module Latex.Language
( writeLatex
) where

import ClassyPrelude hiding ((<>))
import Text.LaTeX
import Text.LaTeX.Packages.Trees.Qtree
import Text.LaTeX.Packages.Graphicx
import Text.LaTeX.Packages.Lscape
import Text.LaTeX.Packages.Hyperref

import Gen.Phonotactics
import Gen.ParseTree

import Data.Language
--import Data.Grammar


-- Puts together a LaTeX, to be written out as a PDF
-- One PDF per language family
-- Each language gets a major section

writeLatex :: LanguageBranch -> IO ()
writeLatex langFam = renderFile (unpack ("out/" ++ getName (getLanguage langFam) ++ " language family/latex_output.tex")) (makeLatex langFam)


makeLatex :: LanguageBranch -> LaTeX
makeLatex langFam = makePreamble langFam
                 <> document (makeBody langFam)

makePreamble :: LanguageBranch -> LaTeX
makePreamble (LanguageBranch lang _ _) = documentclass [] report
                 <> usepackage [] qtree
                 <> usepackage [] graphicx
                 <> usepackage [] lscape
                 <> usepackage [] hyperref
                 <> author (raw "Generated By ConLangGen")
                 <> title ("Description of the " ++ raw (getName lang) ++ " Language Family")

makeBody :: LanguageBranch -> LaTeX
makeBody langFam = maketitle
                <> tableofcontents
                <> newpage
                <> Text.LaTeX.Packages.Lscape.landscape (figure Nothing ( centering
                  <> caption (raw "Overview of the Language Family")
                  <> resizebox (CustomMeasure $ raw "\\paperwidth") (CustomMeasure "!") (tree id (makeLanguageTree langFam))))
                <> makeChapters langFam

makeChapters :: LanguageBranch -> LaTeX
makeChapters (LanguageBranch lang [] _) = chapter (raw (fst (getNameMod lang) ++ snd (getNameMod lang) ++ getName lang))
                                       <> label ("ch:" ++ raw (fst (getNameMod lang) ++ snd (getNameMod lang) ++ getName lang))
                                       <> "Details here."
makeChapters (LanguageBranch lang langs _) = chapter (raw (fst (getNameMod lang) ++ snd (getNameMod lang) ++ getName lang))
                                          <> label (raw ("ch:" ++ fst (getNameMod lang) ++ snd (getNameMod lang) ++ getName lang))
                                          <> "Details here."
                                          <> mconcat (map makeChapters langs)

makeLanguageTree :: LanguageBranch -> Tree LaTeX
makeLanguageTree (LanguageBranch lang [] _) = Leaf $ textbf $ nameref $ createLabel $ unpack ("ch:" ++ fst (getNameMod lang) ++ snd (getNameMod lang) ++ getName lang)

makeLanguageTree (LanguageBranch lang langs _) = Node (Just $ textbf $ nameref $ createLabel $ unpack ("ch:" ++ fst (getNameMod lang) ++ snd (getNameMod lang) ++ getName lang))
                                                 (map makeLanguageTree langs)
