
==================== FINAL INTERFACE ====================
2016-10-23 00:09:47.697919 UTC

interface conla_1eA9qWUPH9nBowcXqqaV8r:GrammarData 7103
  interface hash: 7d1ef5559ccb345746e7f6fac53e6944
  ABI hash: 562261c81c7ec49bdc1e2f1f7c2ba276
  export-list hash: 8bdb50456abbaae38168fc1d8874c44f
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 962af636f8e927040c7daa9c21457292
  sig of: Nothing
  used TH splices: False
  where
exports:
  GrammarData.Animacy{GrammarData.AN GrammarData.HUM GrammarData.INAN GrammarData.NHUM GrammarData.ZO}
  GrammarData.Case{GrammarData.ABL GrammarData.ACC GrammarData.DAT GrammarData.ERG GrammarData.GEN GrammarData.INS GrammarData.LOC GrammarData.NOM GrammarData.PREP GrammarData.VOC}
  GrammarData.Definiteness{GrammarData.DEF GrammarData.INDF}
  GrammarData.Gender{GrammarData.COM GrammarData.F GrammarData.M GrammarData.N}
  GrammarData.GrammarSystem{GrammarData.GrammarSystem GrammarData.aSys GrammarData.cSys GrammarData.dSys GrammarData.gSys GrammarData.hSys GrammarData.nSys GrammarData.sSys}
  GrammarData.Honorific{GrammarData.FAM GrammarData.FORM}
  GrammarData.Manifest{GrammarData.NoManifest GrammarData.PostParticle GrammarData.PreParticle GrammarData.Prefix GrammarData.Suffix}
  GrammarData.ManifestSystem{GrammarData.PostParticleSystem GrammarData.PreParticleSystem GrammarData.PrefixSystem GrammarData.SuffixSystem}
  GrammarData.Number{GrammarData.DU GrammarData.PA GrammarData.PL GrammarData.SG GrammarData.TRI}
  GrammarData.Specificity{GrammarData.NSPEC GrammarData.SPEC}
module dependencies: OtherData PhonemeData
package dependencies: base-4.8.2.0* ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Monoid
                         base-4.8.2.0:Data.Type.Equality base-4.8.2.0:GHC.Generics
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.Read b423b4506a014855edbd329b567629f3
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  base-4.8.2.0:Text.ParserCombinators.ReadPrec 2590e0e0a57a86ac7c62727f4d868dd2
import  -/  base-4.8.2.0:Text.Read.Lex 724ca44ddd38ddc5f47a501d62736c26
import  -/  OtherData e2b50a410ce19d2d27f8b50952de8b42
  exports: f505dec72f229982fb85e59b44566731
import  -/  PhonemeData fc090a0bcda3a243800b6c4018b433c0
  exports: 6190a60b3ecf64d963416d84612d3413
  Morpheme b64262a4cf24269d3af16c38a15f99cc
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
bca54c8943426aaabb7eead4f61ed8f0
  $fEqAnimacy :: GHC.Classes.Eq GrammarData.Animacy
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.Animacy
                  GrammarData.$fEqAnimacy_$c==
                  GrammarData.$fEqAnimacy_$c/= -}
bca54c8943426aaabb7eead4f61ed8f0
  $fEqAnimacy_$c/= ::
    GrammarData.Animacy -> GrammarData.Animacy -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a27 :: GrammarData.Animacy
                   b :: GrammarData.Animacy ->
                 case a27 of wild {
                   GrammarData.AN
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarData.AN -> GHC.Types.False }
                   GrammarData.HUM
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarData.HUM -> GHC.Types.False }
                   GrammarData.NHUM
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarData.NHUM -> GHC.Types.False }
                   GrammarData.ZO
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarData.ZO -> GHC.Types.False }
                   GrammarData.INAN
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        GrammarData.INAN -> GHC.Types.False } }) -}
bca54c8943426aaabb7eead4f61ed8f0
  $fEqAnimacy_$c== ::
    GrammarData.Animacy -> GrammarData.Animacy -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: GrammarData.Animacy
                   ds1 :: GrammarData.Animacy ->
                 case ds of wild {
                   GrammarData.AN
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarData.AN -> GHC.Types.True }
                   GrammarData.HUM
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarData.HUM -> GHC.Types.True }
                   GrammarData.NHUM
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarData.NHUM -> GHC.Types.True }
                   GrammarData.ZO
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarData.ZO -> GHC.Types.True }
                   GrammarData.INAN
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarData.INAN -> GHC.Types.True } }) -}
80861930bf27d683d5ab7b0a02511c13
  $fEqAspect :: GHC.Classes.Eq GrammarData.Aspect
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.Aspect
                  GrammarData.$fEqAspect_$c==
                  GrammarData.$fEqAspect_$c/= -}
80861930bf27d683d5ab7b0a02511c13
  $fEqAspect_$c/= ::
    GrammarData.Aspect -> GrammarData.Aspect -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a27 :: GrammarData.Aspect b :: GrammarData.Aspect ->
                 case a27 of wild {
                   GrammarData.PFV
                   -> case b of wild1 {
                        GrammarData.PFV -> GHC.Types.False
                        GrammarData.IPFV -> GHC.Types.True }
                   GrammarData.IPFV
                   -> case b of wild1 {
                        GrammarData.PFV -> GHC.Types.True
                        GrammarData.IPFV -> GHC.Types.False } }) -}
80861930bf27d683d5ab7b0a02511c13
  $fEqAspect_$c== ::
    GrammarData.Aspect -> GrammarData.Aspect -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarData.Aspect ds1 :: GrammarData.Aspect ->
                 case ds of wild {
                   GrammarData.PFV
                   -> case ds1 of wild1 {
                        GrammarData.PFV -> GHC.Types.True
                        GrammarData.IPFV -> GHC.Types.False }
                   GrammarData.IPFV
                   -> case ds1 of wild1 {
                        GrammarData.PFV -> GHC.Types.False
                        GrammarData.IPFV -> GHC.Types.True } }) -}
414449d8392b340149498bdeea675855
  $fEqCase :: GHC.Classes.Eq GrammarData.Case
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.Case
                  GrammarData.$fEqCase_$c==
                  GrammarData.$fEqCase_$c/= -}
414449d8392b340149498bdeea675855
  $fEqCase_$c/= ::
    GrammarData.Case -> GrammarData.Case -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a27 :: GrammarData.Case b :: GrammarData.Case ->
                 case a27 of wild {
                   GrammarData.NOM
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarData.NOM -> GHC.Types.False }
                   GrammarData.ACC
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarData.ACC -> GHC.Types.False }
                   GrammarData.ERG
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarData.ERG -> GHC.Types.False }
                   GrammarData.GEN
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarData.GEN -> GHC.Types.False }
                   GrammarData.DAT
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarData.DAT -> GHC.Types.False }
                   GrammarData.LOC
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarData.LOC -> GHC.Types.False }
                   GrammarData.PREP
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarData.PREP -> GHC.Types.False }
                   GrammarData.ABL
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarData.ABL -> GHC.Types.False }
                   GrammarData.INS
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarData.INS -> GHC.Types.False }
                   GrammarData.VOC
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        GrammarData.VOC -> GHC.Types.False } }) -}
414449d8392b340149498bdeea675855
  $fEqCase_$c== ::
    GrammarData.Case -> GrammarData.Case -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: GrammarData.Case ds1 :: GrammarData.Case ->
                 case ds of wild {
                   GrammarData.NOM
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarData.NOM -> GHC.Types.True }
                   GrammarData.ACC
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarData.ACC -> GHC.Types.True }
                   GrammarData.ERG
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarData.ERG -> GHC.Types.True }
                   GrammarData.GEN
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarData.GEN -> GHC.Types.True }
                   GrammarData.DAT
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarData.DAT -> GHC.Types.True }
                   GrammarData.LOC
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarData.LOC -> GHC.Types.True }
                   GrammarData.PREP
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarData.PREP -> GHC.Types.True }
                   GrammarData.ABL
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarData.ABL -> GHC.Types.True }
                   GrammarData.INS
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarData.INS -> GHC.Types.True }
                   GrammarData.VOC
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarData.VOC -> GHC.Types.True } }) -}
b259ad971f4abd96d51568b3b5e664ea
  $fEqDefiniteness :: GHC.Classes.Eq GrammarData.Definiteness
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.Definiteness
                  GrammarData.$fEqDefiniteness_$c==
                  GrammarData.$fEqDefiniteness_$c/= -}
b259ad971f4abd96d51568b3b5e664ea
  $fEqDefiniteness_$c/= ::
    GrammarData.Definiteness
    -> GrammarData.Definiteness -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a27 :: GrammarData.Definiteness b :: GrammarData.Definiteness ->
                 case a27 of wild {
                   GrammarData.DEF
                   -> case b of wild1 {
                        GrammarData.DEF -> GHC.Types.False
                        GrammarData.INDF -> GHC.Types.True }
                   GrammarData.INDF
                   -> case b of wild1 {
                        GrammarData.DEF -> GHC.Types.True
                        GrammarData.INDF -> GHC.Types.False } }) -}
b259ad971f4abd96d51568b3b5e664ea
  $fEqDefiniteness_$c== ::
    GrammarData.Definiteness
    -> GrammarData.Definiteness -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarData.Definiteness
                   ds1 :: GrammarData.Definiteness ->
                 case ds of wild {
                   GrammarData.DEF
                   -> case ds1 of wild1 {
                        GrammarData.DEF -> GHC.Types.True
                        GrammarData.INDF -> GHC.Types.False }
                   GrammarData.INDF
                   -> case ds1 of wild1 {
                        GrammarData.DEF -> GHC.Types.False
                        GrammarData.INDF -> GHC.Types.True } }) -}
c2de0d68a0340ca4bb61c34dcc01b06e
  $fEqEvidentiality :: GHC.Classes.Eq GrammarData.Evidentiality
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.Evidentiality
                  GrammarData.$fEqEvidentiality_$c==
                  GrammarData.$fEqEvidentiality_$c/= -}
c2de0d68a0340ca4bb61c34dcc01b06e
  $fEqEvidentiality_$c/= ::
    GrammarData.Evidentiality
    -> GrammarData.Evidentiality -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a27 :: GrammarData.Evidentiality
                   b :: GrammarData.Evidentiality ->
                 case a27 of wild {
                   GrammarData.EXP
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarData.EXP -> GHC.Types.False }
                   GrammarData.SENS
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarData.SENS -> GHC.Types.False }
                   GrammarData.VIS
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarData.VIS -> GHC.Types.False }
                   GrammarData.NVIS
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarData.NVIS -> GHC.Types.False }
                   GrammarData.AUD
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarData.AUD -> GHC.Types.False }
                   GrammarData.INFER
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarData.INFER -> GHC.Types.False }
                   GrammarData.REP
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarData.REP -> GHC.Types.False }
                   GrammarData.HSY
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarData.HSY -> GHC.Types.False }
                   GrammarData.QUO
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarData.QUO -> GHC.Types.False }
                   GrammarData.ASS
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        GrammarData.ASS -> GHC.Types.False } }) -}
c2de0d68a0340ca4bb61c34dcc01b06e
  $fEqEvidentiality_$c== ::
    GrammarData.Evidentiality
    -> GrammarData.Evidentiality -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: GrammarData.Evidentiality
                   ds1 :: GrammarData.Evidentiality ->
                 case ds of wild {
                   GrammarData.EXP
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarData.EXP -> GHC.Types.True }
                   GrammarData.SENS
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarData.SENS -> GHC.Types.True }
                   GrammarData.VIS
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarData.VIS -> GHC.Types.True }
                   GrammarData.NVIS
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarData.NVIS -> GHC.Types.True }
                   GrammarData.AUD
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarData.AUD -> GHC.Types.True }
                   GrammarData.INFER
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarData.INFER -> GHC.Types.True }
                   GrammarData.REP
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarData.REP -> GHC.Types.True }
                   GrammarData.HSY
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarData.HSY -> GHC.Types.True }
                   GrammarData.QUO
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarData.QUO -> GHC.Types.True }
                   GrammarData.ASS
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarData.ASS -> GHC.Types.True } }) -}
e7961ab838d9fccce2f6168c4bdf0b78
  $fEqGender :: GHC.Classes.Eq GrammarData.Gender
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.Gender
                  GrammarData.$fEqGender_$c==
                  GrammarData.$fEqGender_$c/= -}
e7961ab838d9fccce2f6168c4bdf0b78
  $fEqGender_$c/= ::
    GrammarData.Gender -> GrammarData.Gender -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a27 :: GrammarData.Gender b :: GrammarData.Gender ->
                 case a27 of wild {
                   GrammarData.M
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarData.M -> GHC.Types.False }
                   GrammarData.F
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarData.F -> GHC.Types.False }
                   GrammarData.COM
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarData.COM -> GHC.Types.False }
                   GrammarData.N
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarData.N -> GHC.Types.False } }) -}
e7961ab838d9fccce2f6168c4bdf0b78
  $fEqGender_$c== ::
    GrammarData.Gender -> GrammarData.Gender -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: GrammarData.Gender ds1 :: GrammarData.Gender ->
                 case ds of wild {
                   GrammarData.M
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarData.M -> GHC.Types.True }
                   GrammarData.F
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarData.F -> GHC.Types.True }
                   GrammarData.COM
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarData.COM -> GHC.Types.True }
                   GrammarData.N
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarData.N -> GHC.Types.True } }) -}
8bea2a401488a9b7443e58342e97c338
  $fEqHonorific :: GHC.Classes.Eq GrammarData.Honorific
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.Honorific
                  GrammarData.$fEqHonorific_$c==
                  GrammarData.$fEqHonorific_$c/= -}
8bea2a401488a9b7443e58342e97c338
  $fEqHonorific_$c/= ::
    GrammarData.Honorific -> GrammarData.Honorific -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a27 :: GrammarData.Honorific b :: GrammarData.Honorific ->
                 case a27 of wild {
                   GrammarData.FAM
                   -> case b of wild1 {
                        GrammarData.FAM -> GHC.Types.False
                        GrammarData.FORM -> GHC.Types.True }
                   GrammarData.FORM
                   -> case b of wild1 {
                        GrammarData.FAM -> GHC.Types.True
                        GrammarData.FORM -> GHC.Types.False } }) -}
8bea2a401488a9b7443e58342e97c338
  $fEqHonorific_$c== ::
    GrammarData.Honorific -> GrammarData.Honorific -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarData.Honorific ds1 :: GrammarData.Honorific ->
                 case ds of wild {
                   GrammarData.FAM
                   -> case ds1 of wild1 {
                        GrammarData.FAM -> GHC.Types.True
                        GrammarData.FORM -> GHC.Types.False }
                   GrammarData.FORM
                   -> case ds1 of wild1 {
                        GrammarData.FAM -> GHC.Types.False
                        GrammarData.FORM -> GHC.Types.True } }) -}
bf97cdc74f3aad6d32e164918e597133
  $fEqManifest ::
    GHC.Classes.Eq a => GHC.Classes.Eq (GrammarData.Manifest a)
  DFunId[0]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a27 $dEq :: GHC.Classes.Eq a27.
                  @ (GrammarData.Manifest a27)
                  (GrammarData.$fEqManifest_$c==2 @ a27 $dEq)
                  (GrammarData.$fEqManifest_$c/= @ a27 $dEq) -}
06cffada020518bb114c8b5b2ca05a44
  $fEqManifest1 ::
    GrammarData.Manifest GrammarData.Gender
    -> GrammarData.Manifest GrammarData.Gender -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a27 :: GrammarData.Manifest GrammarData.Gender
                   b :: GrammarData.Manifest GrammarData.Gender ->
                 case a27 of wild {
                   GrammarData.NoManifest
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        GrammarData.NoManifest -> GHC.Types.False }
                   GrammarData.PreParticle a28
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        GrammarData.PreParticle b1
                        -> case a28 of wild2 {
                             GrammarData.M
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.M -> GHC.Types.False }
                             GrammarData.F
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.F -> GHC.Types.False }
                             GrammarData.COM
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.COM -> GHC.Types.False }
                             GrammarData.N
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.N -> GHC.Types.False } } }
                   GrammarData.PostParticle a28
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        GrammarData.PostParticle b1
                        -> case a28 of wild2 {
                             GrammarData.M
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.M -> GHC.Types.False }
                             GrammarData.F
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.F -> GHC.Types.False }
                             GrammarData.COM
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.COM -> GHC.Types.False }
                             GrammarData.N
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.N -> GHC.Types.False } } }
                   GrammarData.Prefix a28
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        GrammarData.Prefix b1
                        -> case a28 of wild2 {
                             GrammarData.M
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.M -> GHC.Types.False }
                             GrammarData.F
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.F -> GHC.Types.False }
                             GrammarData.COM
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.COM -> GHC.Types.False }
                             GrammarData.N
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.N -> GHC.Types.False } } }
                   GrammarData.Suffix a28
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        GrammarData.Suffix b1
                        -> case a28 of wild2 {
                             GrammarData.M
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.M -> GHC.Types.False }
                             GrammarData.F
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.F -> GHC.Types.False }
                             GrammarData.COM
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.COM -> GHC.Types.False }
                             GrammarData.N
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True
                                  GrammarData.N -> GHC.Types.False } } } }) -}
aaa39e6551221e6e22bf33e864baae4b
  $fEqManifest2 ::
    GrammarData.Manifest GrammarData.Animacy
    -> GrammarData.Manifest GrammarData.Animacy -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a27 :: GrammarData.Manifest GrammarData.Animacy
                   b :: GrammarData.Manifest GrammarData.Animacy ->
                 case a27 of wild {
                   GrammarData.NoManifest
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        GrammarData.NoManifest -> GHC.Types.False }
                   GrammarData.PreParticle a28
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        GrammarData.PreParticle b1
                        -> case a28 of wild2 {
                             GrammarData.AN
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.AN -> GHC.Types.False }
                             GrammarData.HUM
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.HUM -> GHC.Types.False }
                             GrammarData.NHUM
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.NHUM -> GHC.Types.False }
                             GrammarData.ZO
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.ZO -> GHC.Types.False }
                             GrammarData.INAN
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True
                                  GrammarData.INAN -> GHC.Types.False } } }
                   GrammarData.PostParticle a28
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        GrammarData.PostParticle b1
                        -> case a28 of wild2 {
                             GrammarData.AN
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.AN -> GHC.Types.False }
                             GrammarData.HUM
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.HUM -> GHC.Types.False }
                             GrammarData.NHUM
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.NHUM -> GHC.Types.False }
                             GrammarData.ZO
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.ZO -> GHC.Types.False }
                             GrammarData.INAN
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True
                                  GrammarData.INAN -> GHC.Types.False } } }
                   GrammarData.Prefix a28
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        GrammarData.Prefix b1
                        -> case a28 of wild2 {
                             GrammarData.AN
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.AN -> GHC.Types.False }
                             GrammarData.HUM
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.HUM -> GHC.Types.False }
                             GrammarData.NHUM
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.NHUM -> GHC.Types.False }
                             GrammarData.ZO
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.ZO -> GHC.Types.False }
                             GrammarData.INAN
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True
                                  GrammarData.INAN -> GHC.Types.False } } }
                   GrammarData.Suffix a28
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        GrammarData.Suffix b1
                        -> case a28 of wild2 {
                             GrammarData.AN
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.AN -> GHC.Types.False }
                             GrammarData.HUM
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.HUM -> GHC.Types.False }
                             GrammarData.NHUM
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.NHUM -> GHC.Types.False }
                             GrammarData.ZO
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.ZO -> GHC.Types.False }
                             GrammarData.INAN
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True
                                  GrammarData.INAN -> GHC.Types.False } } } }) -}
068257d62157edd5505d50ab65c73598
  $fEqManifest3 ::
    GrammarData.Manifest GrammarData.Case
    -> GrammarData.Manifest GrammarData.Case -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a27 :: GrammarData.Manifest GrammarData.Case
                   b :: GrammarData.Manifest GrammarData.Case ->
                 case a27 of wild {
                   GrammarData.NoManifest
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        GrammarData.NoManifest -> GHC.Types.False }
                   GrammarData.PreParticle a28
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        GrammarData.PreParticle b1
                        -> case a28 of wild2 {
                             GrammarData.NOM
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.NOM -> GHC.Types.False }
                             GrammarData.ACC
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.ACC -> GHC.Types.False }
                             GrammarData.ERG
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.ERG -> GHC.Types.False }
                             GrammarData.GEN
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.GEN -> GHC.Types.False }
                             GrammarData.DAT
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.DAT -> GHC.Types.False }
                             GrammarData.LOC
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.LOC -> GHC.Types.False }
                             GrammarData.PREP
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.PREP -> GHC.Types.False }
                             GrammarData.ABL
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.ABL -> GHC.Types.False }
                             GrammarData.INS
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.INS -> GHC.Types.False }
                             GrammarData.VOC
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.VOC -> GHC.Types.False } } }
                   GrammarData.PostParticle a28
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        GrammarData.PostParticle b1
                        -> case a28 of wild2 {
                             GrammarData.NOM
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.NOM -> GHC.Types.False }
                             GrammarData.ACC
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.ACC -> GHC.Types.False }
                             GrammarData.ERG
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.ERG -> GHC.Types.False }
                             GrammarData.GEN
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.GEN -> GHC.Types.False }
                             GrammarData.DAT
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.DAT -> GHC.Types.False }
                             GrammarData.LOC
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.LOC -> GHC.Types.False }
                             GrammarData.PREP
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.PREP -> GHC.Types.False }
                             GrammarData.ABL
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.ABL -> GHC.Types.False }
                             GrammarData.INS
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.INS -> GHC.Types.False }
                             GrammarData.VOC
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.VOC -> GHC.Types.False } } }
                   GrammarData.Prefix a28
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        GrammarData.Prefix b1
                        -> case a28 of wild2 {
                             GrammarData.NOM
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.NOM -> GHC.Types.False }
                             GrammarData.ACC
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.ACC -> GHC.Types.False }
                             GrammarData.ERG
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.ERG -> GHC.Types.False }
                             GrammarData.GEN
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.GEN -> GHC.Types.False }
                             GrammarData.DAT
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.DAT -> GHC.Types.False }
                             GrammarData.LOC
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.LOC -> GHC.Types.False }
                             GrammarData.PREP
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.PREP -> GHC.Types.False }
                             GrammarData.ABL
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.ABL -> GHC.Types.False }
                             GrammarData.INS
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.INS -> GHC.Types.False }
                             GrammarData.VOC
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.VOC -> GHC.Types.False } } }
                   GrammarData.Suffix a28
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        GrammarData.Suffix b1
                        -> case a28 of wild2 {
                             GrammarData.NOM
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.NOM -> GHC.Types.False }
                             GrammarData.ACC
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.ACC -> GHC.Types.False }
                             GrammarData.ERG
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.ERG -> GHC.Types.False }
                             GrammarData.GEN
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.GEN -> GHC.Types.False }
                             GrammarData.DAT
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.DAT -> GHC.Types.False }
                             GrammarData.LOC
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.LOC -> GHC.Types.False }
                             GrammarData.PREP
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.PREP -> GHC.Types.False }
                             GrammarData.ABL
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.ABL -> GHC.Types.False }
                             GrammarData.INS
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.INS -> GHC.Types.False }
                             GrammarData.VOC
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True
                                  GrammarData.VOC -> GHC.Types.False } } } }) -}
16803b6548ed2760c7493e44c0902d96
  $fEqManifest4 ::
    GrammarData.Manifest GrammarData.Number
    -> GrammarData.Manifest GrammarData.Number -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a27 :: GrammarData.Manifest GrammarData.Number
                   b :: GrammarData.Manifest GrammarData.Number ->
                 case a27 of wild {
                   GrammarData.NoManifest
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        GrammarData.NoManifest -> GHC.Types.False }
                   GrammarData.PreParticle a28
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        GrammarData.PreParticle b1
                        -> case a28 of wild2 {
                             GrammarData.SG
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.SG -> GHC.Types.False }
                             GrammarData.DU
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.DU -> GHC.Types.False }
                             GrammarData.TRI
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.TRI -> GHC.Types.False }
                             GrammarData.PA
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.PA -> GHC.Types.False }
                             GrammarData.PL
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.PL -> GHC.Types.False } } }
                   GrammarData.PostParticle a28
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        GrammarData.PostParticle b1
                        -> case a28 of wild2 {
                             GrammarData.SG
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.SG -> GHC.Types.False }
                             GrammarData.DU
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.DU -> GHC.Types.False }
                             GrammarData.TRI
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.TRI -> GHC.Types.False }
                             GrammarData.PA
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.PA -> GHC.Types.False }
                             GrammarData.PL
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.PL -> GHC.Types.False } } }
                   GrammarData.Prefix a28
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        GrammarData.Prefix b1
                        -> case a28 of wild2 {
                             GrammarData.SG
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.SG -> GHC.Types.False }
                             GrammarData.DU
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.DU -> GHC.Types.False }
                             GrammarData.TRI
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.TRI -> GHC.Types.False }
                             GrammarData.PA
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.PA -> GHC.Types.False }
                             GrammarData.PL
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.PL -> GHC.Types.False } } }
                   GrammarData.Suffix a28
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        GrammarData.Suffix b1
                        -> case a28 of wild2 {
                             GrammarData.SG
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.SG -> GHC.Types.False }
                             GrammarData.DU
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.DU -> GHC.Types.False }
                             GrammarData.TRI
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.TRI -> GHC.Types.False }
                             GrammarData.PA
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarData.PA -> GHC.Types.False }
                             GrammarData.PL
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True
                                  GrammarData.PL -> GHC.Types.False } } } }) -}
86c44a26856eae8ac73cec75da62c445
  $fEqManifest5 ::
    GrammarData.Manifest GrammarData.Honorific
    -> GrammarData.Manifest GrammarData.Honorific -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a27 :: GrammarData.Manifest GrammarData.Honorific
                   b :: GrammarData.Manifest GrammarData.Honorific ->
                 case a27 of wild {
                   GrammarData.NoManifest
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        GrammarData.NoManifest -> GHC.Types.False }
                   GrammarData.PreParticle a28
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        GrammarData.PreParticle b1
                        -> case a28 of wild2 {
                             GrammarData.FAM
                             -> case b1 of wild3 {
                                  GrammarData.FAM -> GHC.Types.False
                                  GrammarData.FORM -> GHC.Types.True }
                             GrammarData.FORM
                             -> case b1 of wild3 {
                                  GrammarData.FAM -> GHC.Types.True
                                  GrammarData.FORM -> GHC.Types.False } } }
                   GrammarData.PostParticle a28
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        GrammarData.PostParticle b1
                        -> case a28 of wild2 {
                             GrammarData.FAM
                             -> case b1 of wild3 {
                                  GrammarData.FAM -> GHC.Types.False
                                  GrammarData.FORM -> GHC.Types.True }
                             GrammarData.FORM
                             -> case b1 of wild3 {
                                  GrammarData.FAM -> GHC.Types.True
                                  GrammarData.FORM -> GHC.Types.False } } }
                   GrammarData.Prefix a28
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        GrammarData.Prefix b1
                        -> case a28 of wild2 {
                             GrammarData.FAM
                             -> case b1 of wild3 {
                                  GrammarData.FAM -> GHC.Types.False
                                  GrammarData.FORM -> GHC.Types.True }
                             GrammarData.FORM
                             -> case b1 of wild3 {
                                  GrammarData.FAM -> GHC.Types.True
                                  GrammarData.FORM -> GHC.Types.False } } }
                   GrammarData.Suffix a28
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        GrammarData.Suffix b1
                        -> case a28 of wild2 {
                             GrammarData.FAM
                             -> case b1 of wild3 {
                                  GrammarData.FAM -> GHC.Types.False
                                  GrammarData.FORM -> GHC.Types.True }
                             GrammarData.FORM
                             -> case b1 of wild3 {
                                  GrammarData.FAM -> GHC.Types.True
                                  GrammarData.FORM -> GHC.Types.False } } } }) -}
6eba1b8bedbcb40546e88f300ecbc49a
  $fEqManifest6 ::
    GrammarData.Manifest GrammarData.Definiteness
    -> GrammarData.Manifest GrammarData.Definiteness -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a27 :: GrammarData.Manifest GrammarData.Definiteness
                   b :: GrammarData.Manifest GrammarData.Definiteness ->
                 case a27 of wild {
                   GrammarData.NoManifest
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        GrammarData.NoManifest -> GHC.Types.False }
                   GrammarData.PreParticle a28
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        GrammarData.PreParticle b1
                        -> case a28 of wild2 {
                             GrammarData.DEF
                             -> case b1 of wild3 {
                                  GrammarData.DEF -> GHC.Types.False
                                  GrammarData.INDF -> GHC.Types.True }
                             GrammarData.INDF
                             -> case b1 of wild3 {
                                  GrammarData.DEF -> GHC.Types.True
                                  GrammarData.INDF -> GHC.Types.False } } }
                   GrammarData.PostParticle a28
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        GrammarData.PostParticle b1
                        -> case a28 of wild2 {
                             GrammarData.DEF
                             -> case b1 of wild3 {
                                  GrammarData.DEF -> GHC.Types.False
                                  GrammarData.INDF -> GHC.Types.True }
                             GrammarData.INDF
                             -> case b1 of wild3 {
                                  GrammarData.DEF -> GHC.Types.True
                                  GrammarData.INDF -> GHC.Types.False } } }
                   GrammarData.Prefix a28
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        GrammarData.Prefix b1
                        -> case a28 of wild2 {
                             GrammarData.DEF
                             -> case b1 of wild3 {
                                  GrammarData.DEF -> GHC.Types.False
                                  GrammarData.INDF -> GHC.Types.True }
                             GrammarData.INDF
                             -> case b1 of wild3 {
                                  GrammarData.DEF -> GHC.Types.True
                                  GrammarData.INDF -> GHC.Types.False } } }
                   GrammarData.Suffix a28
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        GrammarData.Suffix b1
                        -> case a28 of wild2 {
                             GrammarData.DEF
                             -> case b1 of wild3 {
                                  GrammarData.DEF -> GHC.Types.False
                                  GrammarData.INDF -> GHC.Types.True }
                             GrammarData.INDF
                             -> case b1 of wild3 {
                                  GrammarData.DEF -> GHC.Types.True
                                  GrammarData.INDF -> GHC.Types.False } } } }) -}
ee56ed77921d6c234304cf3ec30350d1
  $fEqManifest7 ::
    GrammarData.Manifest GrammarData.Specificity
    -> GrammarData.Manifest GrammarData.Specificity -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a27 :: GrammarData.Manifest GrammarData.Specificity
                   b :: GrammarData.Manifest GrammarData.Specificity ->
                 case a27 of wild {
                   GrammarData.NoManifest
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        GrammarData.NoManifest -> GHC.Types.False }
                   GrammarData.PreParticle a28
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        GrammarData.PreParticle b1
                        -> case a28 of wild2 {
                             GrammarData.SPEC
                             -> case b1 of wild3 {
                                  GrammarData.SPEC -> GHC.Types.False
                                  GrammarData.NSPEC -> GHC.Types.True }
                             GrammarData.NSPEC
                             -> case b1 of wild3 {
                                  GrammarData.SPEC -> GHC.Types.True
                                  GrammarData.NSPEC -> GHC.Types.False } } }
                   GrammarData.PostParticle a28
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        GrammarData.PostParticle b1
                        -> case a28 of wild2 {
                             GrammarData.SPEC
                             -> case b1 of wild3 {
                                  GrammarData.SPEC -> GHC.Types.False
                                  GrammarData.NSPEC -> GHC.Types.True }
                             GrammarData.NSPEC
                             -> case b1 of wild3 {
                                  GrammarData.SPEC -> GHC.Types.True
                                  GrammarData.NSPEC -> GHC.Types.False } } }
                   GrammarData.Prefix a28
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        GrammarData.Prefix b1
                        -> case a28 of wild2 {
                             GrammarData.SPEC
                             -> case b1 of wild3 {
                                  GrammarData.SPEC -> GHC.Types.False
                                  GrammarData.NSPEC -> GHC.Types.True }
                             GrammarData.NSPEC
                             -> case b1 of wild3 {
                                  GrammarData.SPEC -> GHC.Types.True
                                  GrammarData.NSPEC -> GHC.Types.False } } }
                   GrammarData.Suffix a28
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        GrammarData.Suffix b1
                        -> case a28 of wild2 {
                             GrammarData.SPEC
                             -> case b1 of wild3 {
                                  GrammarData.SPEC -> GHC.Types.False
                                  GrammarData.NSPEC -> GHC.Types.True }
                             GrammarData.NSPEC
                             -> case b1 of wild3 {
                                  GrammarData.SPEC -> GHC.Types.True
                                  GrammarData.NSPEC -> GHC.Types.False } } } }) -}
e59e026f6f243dc64e3e0392a6b7fb92
  $fEqManifestSystem :: GHC.Classes.Eq GrammarData.ManifestSystem
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.ManifestSystem
                  GrammarData.$fEqManifestSystem_$c==
                  GrammarData.$fEqManifestSystem_$c/= -}
0b1479d87994bd3e1211def35621683e
  $fEqManifestSystem1 ::
    GHC.Classes.Eq
      (GrammarData.Manifest GrammarData.Gender,
       GrammarData.Manifest GrammarData.Animacy,
       GrammarData.Manifest GrammarData.Case,
       GrammarData.Manifest GrammarData.Number,
       GrammarData.Manifest GrammarData.Honorific,
       GrammarData.Manifest GrammarData.Definiteness,
       GrammarData.Manifest GrammarData.Specificity)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fEqManifestSystem_$s$fEq(,,,,,,) -}
792c26b03dc900c7ace5f8672040804d
  $fEqManifestSystem2 ::
    GHC.Classes.Eq (GrammarData.Manifest GrammarData.Specificity)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fEqManifest_$s$fEqManifest6 -}
5113a3cb4918a2ff6b9832344c0e48d5
  $fEqManifestSystem3 ::
    GHC.Classes.Eq (GrammarData.Manifest GrammarData.Definiteness)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fEqManifest_$s$fEqManifest5 -}
4016c6dc45e24ec4248e7cb2e6e9fa55
  $fEqManifestSystem4 ::
    GHC.Classes.Eq (GrammarData.Manifest GrammarData.Honorific)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fEqManifest_$s$fEqManifest4 -}
5dafe8492653f04ed7688ef5164cb227
  $fEqManifestSystem5 ::
    GHC.Classes.Eq (GrammarData.Manifest GrammarData.Number)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fEqManifest_$s$fEqManifest3 -}
dac39928baa2ebd608c943c3e37aaad6
  $fEqManifestSystem6 ::
    GHC.Classes.Eq (GrammarData.Manifest GrammarData.Case)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fEqManifest_$s$fEqManifest2 -}
969641647f6e1bcc2accb456bc5f1b04
  $fEqManifestSystem7 ::
    GHC.Classes.Eq (GrammarData.Manifest GrammarData.Animacy)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fEqManifest_$s$fEqManifest1 -}
e95c2efe402b378f06e2c3db1c014426
  $fEqManifestSystem8 ::
    GHC.Classes.Eq (GrammarData.Manifest GrammarData.Gender)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fEqManifest_$s$fEqManifest -}
e59e026f6f243dc64e3e0392a6b7fb92
  $fEqManifestSystem_$c/= ::
    GrammarData.ManifestSystem
    -> GrammarData.ManifestSystem -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a27 :: GrammarData.ManifestSystem
                   b :: GrammarData.ManifestSystem ->
                 case GrammarData.$fEqManifestSystem_$c== a27 b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
e59e026f6f243dc64e3e0392a6b7fb92
  $fEqManifestSystem_$c== ::
    GrammarData.ManifestSystem
    -> GrammarData.ManifestSystem -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: GrammarData.ManifestSystem
                   ds1 :: GrammarData.ManifestSystem ->
                 case ds of wild {
                   GrammarData.PreParticleSystem a27
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarData.PreParticleSystem b1
                        -> GHC.Classes.$fEq[]_$c==
                             @ (PhonemeData.Morpheme,
                                (GrammarData.Manifest GrammarData.Gender,
                                 GrammarData.Manifest GrammarData.Animacy,
                                 GrammarData.Manifest GrammarData.Case,
                                 GrammarData.Manifest GrammarData.Number,
                                 GrammarData.Manifest GrammarData.Honorific,
                                 GrammarData.Manifest GrammarData.Definiteness,
                                 GrammarData.Manifest GrammarData.Specificity))
                             GrammarData.$fEqManifestSystem_$s$fEq(,)
                             a27
                             b1 }
                   GrammarData.PostParticleSystem a27
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarData.PostParticleSystem b1
                        -> GHC.Classes.$fEq[]_$c==
                             @ (PhonemeData.Morpheme,
                                (GrammarData.Manifest GrammarData.Gender,
                                 GrammarData.Manifest GrammarData.Animacy,
                                 GrammarData.Manifest GrammarData.Case,
                                 GrammarData.Manifest GrammarData.Number,
                                 GrammarData.Manifest GrammarData.Honorific,
                                 GrammarData.Manifest GrammarData.Definiteness,
                                 GrammarData.Manifest GrammarData.Specificity))
                             GrammarData.$fEqManifestSystem_$s$fEq(,)
                             a27
                             b1 }
                   GrammarData.PrefixSystem a27
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarData.PrefixSystem b1
                        -> GHC.Classes.$fEq[]_$c==
                             @ (PhonemeData.Morpheme,
                                (GrammarData.Manifest GrammarData.Gender,
                                 GrammarData.Manifest GrammarData.Animacy,
                                 GrammarData.Manifest GrammarData.Case,
                                 GrammarData.Manifest GrammarData.Number,
                                 GrammarData.Manifest GrammarData.Honorific,
                                 GrammarData.Manifest GrammarData.Definiteness,
                                 GrammarData.Manifest GrammarData.Specificity))
                             GrammarData.$fEqManifestSystem_$s$fEq(,)
                             a27
                             b1 }
                   GrammarData.SuffixSystem a27
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarData.SuffixSystem b1
                        -> GHC.Classes.$fEq[]_$c==
                             @ (PhonemeData.Morpheme,
                                (GrammarData.Manifest GrammarData.Gender,
                                 GrammarData.Manifest GrammarData.Animacy,
                                 GrammarData.Manifest GrammarData.Case,
                                 GrammarData.Manifest GrammarData.Number,
                                 GrammarData.Manifest GrammarData.Honorific,
                                 GrammarData.Manifest GrammarData.Definiteness,
                                 GrammarData.Manifest GrammarData.Specificity))
                             GrammarData.$fEqManifestSystem_$s$fEq(,)
                             a27
                             b1 } }) -}
e279808a80db16b68061c7f72f806daa
  $fEqManifestSystem_$s$fEq(,) ::
    GHC.Classes.Eq
      (PhonemeData.Morpheme,
       (GrammarData.Manifest GrammarData.Gender,
        GrammarData.Manifest GrammarData.Animacy,
        GrammarData.Manifest GrammarData.Case,
        GrammarData.Manifest GrammarData.Number,
        GrammarData.Manifest GrammarData.Honorific,
        GrammarData.Manifest GrammarData.Definiteness,
        GrammarData.Manifest GrammarData.Specificity))
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (PhonemeData.Morpheme,
                     (GrammarData.Manifest GrammarData.Gender,
                      GrammarData.Manifest GrammarData.Animacy,
                      GrammarData.Manifest GrammarData.Case,
                      GrammarData.Manifest GrammarData.Number,
                      GrammarData.Manifest GrammarData.Honorific,
                      GrammarData.Manifest GrammarData.Definiteness,
                      GrammarData.Manifest GrammarData.Specificity))
                  (GHC.Classes.$fEq(,)_$c==
                     @ PhonemeData.Morpheme
                     @ (GrammarData.Manifest GrammarData.Gender,
                        GrammarData.Manifest GrammarData.Animacy,
                        GrammarData.Manifest GrammarData.Case,
                        GrammarData.Manifest GrammarData.Number,
                        GrammarData.Manifest GrammarData.Honorific,
                        GrammarData.Manifest GrammarData.Definiteness,
                        GrammarData.Manifest GrammarData.Specificity)
                     PhonemeData.$fEqMorpheme
                     GrammarData.$fEqManifestSystem1)
                  (GHC.Classes.$fEq(,)_$c/=
                     @ PhonemeData.Morpheme
                     @ (GrammarData.Manifest GrammarData.Gender,
                        GrammarData.Manifest GrammarData.Animacy,
                        GrammarData.Manifest GrammarData.Case,
                        GrammarData.Manifest GrammarData.Number,
                        GrammarData.Manifest GrammarData.Honorific,
                        GrammarData.Manifest GrammarData.Definiteness,
                        GrammarData.Manifest GrammarData.Specificity)
                     PhonemeData.$fEqMorpheme
                     GrammarData.$fEqManifestSystem1) -}
f7392e387aa8ecb02591bf8b4e690be3
  $fEqManifestSystem_$s$fEq(,,,,,,) ::
    GHC.Classes.Eq
      (GrammarData.Manifest GrammarData.Gender,
       GrammarData.Manifest GrammarData.Animacy,
       GrammarData.Manifest GrammarData.Case,
       GrammarData.Manifest GrammarData.Number,
       GrammarData.Manifest GrammarData.Honorific,
       GrammarData.Manifest GrammarData.Definiteness,
       GrammarData.Manifest GrammarData.Specificity)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GrammarData.Manifest GrammarData.Gender,
                     GrammarData.Manifest GrammarData.Animacy,
                     GrammarData.Manifest GrammarData.Case,
                     GrammarData.Manifest GrammarData.Number,
                     GrammarData.Manifest GrammarData.Honorific,
                     GrammarData.Manifest GrammarData.Definiteness,
                     GrammarData.Manifest GrammarData.Specificity)
                  (GHC.Classes.$fEq(,,,,,,)_$c==
                     @ (GrammarData.Manifest GrammarData.Gender)
                     @ (GrammarData.Manifest GrammarData.Animacy)
                     @ (GrammarData.Manifest GrammarData.Case)
                     @ (GrammarData.Manifest GrammarData.Number)
                     @ (GrammarData.Manifest GrammarData.Honorific)
                     @ (GrammarData.Manifest GrammarData.Definiteness)
                     @ (GrammarData.Manifest GrammarData.Specificity)
                     GrammarData.$fEqManifestSystem8
                     GrammarData.$fEqManifestSystem7
                     GrammarData.$fEqManifestSystem6
                     GrammarData.$fEqManifestSystem5
                     GrammarData.$fEqManifestSystem4
                     GrammarData.$fEqManifestSystem3
                     GrammarData.$fEqManifestSystem2)
                  GrammarData.$fEqManifestSystem_$s$fEq(,,,,,,)_$c/= -}
8a6ca6302a641fb495d28a06af4b3476
  $fEqManifestSystem_$s$fEq(,,,,,,)_$c/= ::
    (GrammarData.Manifest GrammarData.Gender,
     GrammarData.Manifest GrammarData.Animacy,
     GrammarData.Manifest GrammarData.Case,
     GrammarData.Manifest GrammarData.Number,
     GrammarData.Manifest GrammarData.Honorific,
     GrammarData.Manifest GrammarData.Definiteness,
     GrammarData.Manifest GrammarData.Specificity)
    -> (GrammarData.Manifest GrammarData.Gender,
        GrammarData.Manifest GrammarData.Animacy,
        GrammarData.Manifest GrammarData.Case,
        GrammarData.Manifest GrammarData.Number,
        GrammarData.Manifest GrammarData.Honorific,
        GrammarData.Manifest GrammarData.Definiteness,
        GrammarData.Manifest GrammarData.Specificity)
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U)><S(SLLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ a27 :: (GrammarData.Manifest GrammarData.Gender,
                           GrammarData.Manifest GrammarData.Animacy,
                           GrammarData.Manifest GrammarData.Case,
                           GrammarData.Manifest GrammarData.Number,
                           GrammarData.Manifest GrammarData.Honorific,
                           GrammarData.Manifest GrammarData.Definiteness,
                           GrammarData.Manifest GrammarData.Specificity)
                   b1 :: (GrammarData.Manifest GrammarData.Gender,
                          GrammarData.Manifest GrammarData.Animacy,
                          GrammarData.Manifest GrammarData.Case,
                          GrammarData.Manifest GrammarData.Number,
                          GrammarData.Manifest GrammarData.Honorific,
                          GrammarData.Manifest GrammarData.Definiteness,
                          GrammarData.Manifest GrammarData.Specificity) ->
                 case GHC.Classes.$fEq(,,,,,,)_$c==
                        @ (GrammarData.Manifest GrammarData.Gender)
                        @ (GrammarData.Manifest GrammarData.Animacy)
                        @ (GrammarData.Manifest GrammarData.Case)
                        @ (GrammarData.Manifest GrammarData.Number)
                        @ (GrammarData.Manifest GrammarData.Honorific)
                        @ (GrammarData.Manifest GrammarData.Definiteness)
                        @ (GrammarData.Manifest GrammarData.Specificity)
                        GrammarData.$fEqManifestSystem8
                        GrammarData.$fEqManifestSystem7
                        GrammarData.$fEqManifestSystem6
                        GrammarData.$fEqManifestSystem5
                        GrammarData.$fEqManifestSystem4
                        GrammarData.$fEqManifestSystem3
                        GrammarData.$fEqManifestSystem2
                        a27
                        b1 of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
bf97cdc74f3aad6d32e164918e597133
  $fEqManifest_$c/= ::
    GHC.Classes.Eq a =>
    GrammarData.Manifest a -> GrammarData.Manifest a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a27
                   $dEq :: GHC.Classes.Eq a27
                   a28 :: GrammarData.Manifest a27
                   b :: GrammarData.Manifest a27 ->
                 case GrammarData.$fEqManifest_$c==2 @ a27 $dEq a28 b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
8ed84510caef32c77eef1e60822eb3ba
  $fEqManifest_$c== ::
    GrammarData.Number -> GrammarData.Number -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: GrammarData.Number ds1 :: GrammarData.Number ->
                 case ds of wild {
                   GrammarData.SG
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarData.SG -> GHC.Types.True }
                   GrammarData.DU
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarData.DU -> GHC.Types.True }
                   GrammarData.TRI
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarData.TRI -> GHC.Types.True }
                   GrammarData.PA
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarData.PA -> GHC.Types.True }
                   GrammarData.PL
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarData.PL -> GHC.Types.True } }) -}
f663e7ff07f2909cb51f85e829fe40a9
  $fEqManifest_$c==1 ::
    GrammarData.Specificity
    -> GrammarData.Specificity -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarData.Specificity ds1 :: GrammarData.Specificity ->
                 case ds of wild {
                   GrammarData.SPEC
                   -> case ds1 of wild1 {
                        GrammarData.SPEC -> GHC.Types.True
                        GrammarData.NSPEC -> GHC.Types.False }
                   GrammarData.NSPEC
                   -> case ds1 of wild1 {
                        GrammarData.SPEC -> GHC.Types.False
                        GrammarData.NSPEC -> GHC.Types.True } }) -}
bf97cdc74f3aad6d32e164918e597133
  $fEqManifest_$c==2 ::
    GHC.Classes.Eq a =>
    GrammarData.Manifest a -> GrammarData.Manifest a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a27
                   $dEq :: GHC.Classes.Eq a27
                   ds :: GrammarData.Manifest a27
                   ds1 :: GrammarData.Manifest a27 ->
                 case ds of wild {
                   GrammarData.NoManifest
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarData.NoManifest -> GHC.Types.True }
                   GrammarData.PreParticle a28
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarData.PreParticle b1 -> GHC.Classes.== @ a27 $dEq a28 b1 }
                   GrammarData.PostParticle a28
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarData.PostParticle b1 -> GHC.Classes.== @ a27 $dEq a28 b1 }
                   GrammarData.Prefix a28
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarData.Prefix b1 -> GHC.Classes.== @ a27 $dEq a28 b1 }
                   GrammarData.Suffix a28
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarData.Suffix b1 -> GHC.Classes.== @ a27 $dEq a28 b1 } }) -}
e19ea9b9ac5a887e12946c721ee282ce
  $fEqManifest_$s$c== ::
    GrammarData.Manifest GrammarData.Gender
    -> GrammarData.Manifest GrammarData.Gender -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: GrammarData.Manifest GrammarData.Gender
                   ds1 :: GrammarData.Manifest GrammarData.Gender ->
                 case ds of wild {
                   GrammarData.NoManifest
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarData.NoManifest -> GHC.Types.True }
                   GrammarData.PreParticle a27
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarData.PreParticle b1 -> GrammarData.$fEqGender_$c== a27 b1 }
                   GrammarData.PostParticle a27
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarData.PostParticle b1 -> GrammarData.$fEqGender_$c== a27 b1 }
                   GrammarData.Prefix a27
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarData.Prefix b1 -> GrammarData.$fEqGender_$c== a27 b1 }
                   GrammarData.Suffix a27
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarData.Suffix b1 -> GrammarData.$fEqGender_$c== a27 b1 } }) -}
45a65cbfc9db978a4cebfaffc0fd719c
  $fEqManifest_$s$c==1 ::
    GrammarData.Manifest GrammarData.Animacy
    -> GrammarData.Manifest GrammarData.Animacy -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: GrammarData.Manifest GrammarData.Animacy
                   ds1 :: GrammarData.Manifest GrammarData.Animacy ->
                 case ds of wild {
                   GrammarData.NoManifest
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarData.NoManifest -> GHC.Types.True }
                   GrammarData.PreParticle a27
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarData.PreParticle b1 -> GrammarData.$fEqAnimacy_$c== a27 b1 }
                   GrammarData.PostParticle a27
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarData.PostParticle b1
                        -> GrammarData.$fEqAnimacy_$c== a27 b1 }
                   GrammarData.Prefix a27
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarData.Prefix b1 -> GrammarData.$fEqAnimacy_$c== a27 b1 }
                   GrammarData.Suffix a27
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarData.Suffix b1
                        -> GrammarData.$fEqAnimacy_$c== a27 b1 } }) -}
5b6304691c310840edf2123926d059ba
  $fEqManifest_$s$c==2 ::
    GrammarData.Manifest GrammarData.Case
    -> GrammarData.Manifest GrammarData.Case -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: GrammarData.Manifest GrammarData.Case
                   ds1 :: GrammarData.Manifest GrammarData.Case ->
                 case ds of wild {
                   GrammarData.NoManifest
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarData.NoManifest -> GHC.Types.True }
                   GrammarData.PreParticle a27
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarData.PreParticle b1 -> GrammarData.$fEqCase_$c== a27 b1 }
                   GrammarData.PostParticle a27
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarData.PostParticle b1 -> GrammarData.$fEqCase_$c== a27 b1 }
                   GrammarData.Prefix a27
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarData.Prefix b1 -> GrammarData.$fEqCase_$c== a27 b1 }
                   GrammarData.Suffix a27
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarData.Suffix b1 -> GrammarData.$fEqCase_$c== a27 b1 } }) -}
8cfd45635af66fbdb79a720ff219cdf9
  $fEqManifest_$s$c==3 ::
    GrammarData.Manifest GrammarData.Number
    -> GrammarData.Manifest GrammarData.Number -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: GrammarData.Manifest GrammarData.Number
                   ds1 :: GrammarData.Manifest GrammarData.Number ->
                 case ds of wild {
                   GrammarData.NoManifest
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarData.NoManifest -> GHC.Types.True }
                   GrammarData.PreParticle a27
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarData.PreParticle b1
                        -> GrammarData.$fEqManifest_$c== a27 b1 }
                   GrammarData.PostParticle a27
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarData.PostParticle b1
                        -> GrammarData.$fEqManifest_$c== a27 b1 }
                   GrammarData.Prefix a27
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarData.Prefix b1 -> GrammarData.$fEqManifest_$c== a27 b1 }
                   GrammarData.Suffix a27
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarData.Suffix b1
                        -> GrammarData.$fEqManifest_$c== a27 b1 } }) -}
2482c6cc0c2f88be786a6bb247ec15a2
  $fEqManifest_$s$c==4 ::
    GrammarData.Manifest GrammarData.Honorific
    -> GrammarData.Manifest GrammarData.Honorific -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: GrammarData.Manifest GrammarData.Honorific
                   ds1 :: GrammarData.Manifest GrammarData.Honorific ->
                 case ds of wild {
                   GrammarData.NoManifest
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarData.NoManifest -> GHC.Types.True }
                   GrammarData.PreParticle a27
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarData.PreParticle b1
                        -> GrammarData.$fEqHonorific_$c== a27 b1 }
                   GrammarData.PostParticle a27
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarData.PostParticle b1
                        -> GrammarData.$fEqHonorific_$c== a27 b1 }
                   GrammarData.Prefix a27
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarData.Prefix b1 -> GrammarData.$fEqHonorific_$c== a27 b1 }
                   GrammarData.Suffix a27
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarData.Suffix b1
                        -> GrammarData.$fEqHonorific_$c== a27 b1 } }) -}
706eecf1a26790557cf302d1f82cc530
  $fEqManifest_$s$c==5 ::
    GrammarData.Manifest GrammarData.Definiteness
    -> GrammarData.Manifest GrammarData.Definiteness -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: GrammarData.Manifest GrammarData.Definiteness
                   ds1 :: GrammarData.Manifest GrammarData.Definiteness ->
                 case ds of wild {
                   GrammarData.NoManifest
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarData.NoManifest -> GHC.Types.True }
                   GrammarData.PreParticle a27
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarData.PreParticle b1
                        -> GrammarData.$fEqDefiniteness_$c== a27 b1 }
                   GrammarData.PostParticle a27
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarData.PostParticle b1
                        -> GrammarData.$fEqDefiniteness_$c== a27 b1 }
                   GrammarData.Prefix a27
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarData.Prefix b1 -> GrammarData.$fEqDefiniteness_$c== a27 b1 }
                   GrammarData.Suffix a27
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarData.Suffix b1
                        -> GrammarData.$fEqDefiniteness_$c== a27 b1 } }) -}
cdd5eef0707eeeff04e2bb7ce2235480
  $fEqManifest_$s$c==6 ::
    GrammarData.Manifest GrammarData.Specificity
    -> GrammarData.Manifest GrammarData.Specificity -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: GrammarData.Manifest GrammarData.Specificity
                   ds1 :: GrammarData.Manifest GrammarData.Specificity ->
                 case ds of wild {
                   GrammarData.NoManifest
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarData.NoManifest -> GHC.Types.True }
                   GrammarData.PreParticle a27
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarData.PreParticle b1
                        -> GrammarData.$fEqManifest_$c==1 a27 b1 }
                   GrammarData.PostParticle a27
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarData.PostParticle b1
                        -> GrammarData.$fEqManifest_$c==1 a27 b1 }
                   GrammarData.Prefix a27
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarData.Prefix b1 -> GrammarData.$fEqManifest_$c==1 a27 b1 }
                   GrammarData.Suffix a27
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarData.Suffix b1
                        -> GrammarData.$fEqManifest_$c==1 a27 b1 } }) -}
dbb3e2474846a0ce4604e285b697abe8
  $fEqManifest_$s$fEqManifest ::
    GHC.Classes.Eq (GrammarData.Manifest GrammarData.Gender)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GrammarData.Manifest GrammarData.Gender)
                  GrammarData.$fEqManifest_$s$c==
                  GrammarData.$fEqManifest1 -}
09725a9cfa0c74f200903b15acadea74
  $fEqManifest_$s$fEqManifest1 ::
    GHC.Classes.Eq (GrammarData.Manifest GrammarData.Animacy)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GrammarData.Manifest GrammarData.Animacy)
                  GrammarData.$fEqManifest_$s$c==1
                  GrammarData.$fEqManifest2 -}
4280bd1dc242509a98c7550ef3a7c23c
  $fEqManifest_$s$fEqManifest2 ::
    GHC.Classes.Eq (GrammarData.Manifest GrammarData.Case)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GrammarData.Manifest GrammarData.Case)
                  GrammarData.$fEqManifest_$s$c==2
                  GrammarData.$fEqManifest3 -}
4ea382c2132014c137c30c88fee75e63
  $fEqManifest_$s$fEqManifest3 ::
    GHC.Classes.Eq (GrammarData.Manifest GrammarData.Number)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GrammarData.Manifest GrammarData.Number)
                  GrammarData.$fEqManifest_$s$c==3
                  GrammarData.$fEqManifest4 -}
3c921e5d49398e0116755fb50c474a27
  $fEqManifest_$s$fEqManifest4 ::
    GHC.Classes.Eq (GrammarData.Manifest GrammarData.Honorific)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GrammarData.Manifest GrammarData.Honorific)
                  GrammarData.$fEqManifest_$s$c==4
                  GrammarData.$fEqManifest5 -}
7bd4e32478b288a2c99460670534abc3
  $fEqManifest_$s$fEqManifest5 ::
    GHC.Classes.Eq (GrammarData.Manifest GrammarData.Definiteness)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GrammarData.Manifest GrammarData.Definiteness)
                  GrammarData.$fEqManifest_$s$c==5
                  GrammarData.$fEqManifest6 -}
ea665150be8d6531e87415cc6dd66733
  $fEqManifest_$s$fEqManifest6 ::
    GHC.Classes.Eq (GrammarData.Manifest GrammarData.Specificity)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GrammarData.Manifest GrammarData.Specificity)
                  GrammarData.$fEqManifest_$s$c==6
                  GrammarData.$fEqManifest7 -}
1f9e0042782b650d0d74a52671e595f1
  $fEqMood :: GHC.Classes.Eq GrammarData.Mood
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.Mood
                  GrammarData.$fEqMood_$c==
                  GrammarData.$fEqMood_$c/= -}
1f9e0042782b650d0d74a52671e595f1
  $fEqMood_$c/= ::
    GrammarData.Mood -> GrammarData.Mood -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a27 :: GrammarData.Mood b :: GrammarData.Mood ->
                 case a27 of wild {
                   GrammarData.IND
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarData.IND -> GHC.Types.False }
                   GrammarData.IRR
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarData.IRR -> GHC.Types.False }
                   GrammarData.DEO
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarData.DEO -> GHC.Types.False }
                   GrammarData.IMP
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarData.IMP -> GHC.Types.False }
                   GrammarData.JUS
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarData.JUS -> GHC.Types.False }
                   GrammarData.OPT
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarData.OPT -> GHC.Types.False }
                   GrammarData.EPIS
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarData.EPIS -> GHC.Types.False }
                   GrammarData.SBJV
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarData.SBJV -> GHC.Types.False }
                   GrammarData.POT
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarData.POT -> GHC.Types.False }
                   GrammarData.COND
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        GrammarData.COND -> GHC.Types.False } }) -}
1f9e0042782b650d0d74a52671e595f1
  $fEqMood_$c== ::
    GrammarData.Mood -> GrammarData.Mood -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: GrammarData.Mood ds1 :: GrammarData.Mood ->
                 case ds of wild {
                   GrammarData.IND
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarData.IND -> GHC.Types.True }
                   GrammarData.IRR
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarData.IRR -> GHC.Types.True }
                   GrammarData.DEO
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarData.DEO -> GHC.Types.True }
                   GrammarData.IMP
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarData.IMP -> GHC.Types.True }
                   GrammarData.JUS
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarData.JUS -> GHC.Types.True }
                   GrammarData.OPT
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarData.OPT -> GHC.Types.True }
                   GrammarData.EPIS
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarData.EPIS -> GHC.Types.True }
                   GrammarData.SBJV
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarData.SBJV -> GHC.Types.True }
                   GrammarData.POT
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarData.POT -> GHC.Types.True }
                   GrammarData.COND
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarData.COND -> GHC.Types.True } }) -}
8ed84510caef32c77eef1e60822eb3ba
  $fEqNumber :: GHC.Classes.Eq GrammarData.Number
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.Number
                  GrammarData.$fEqManifest_$c==
                  GrammarData.$fEqNumber_$c/= -}
8ed84510caef32c77eef1e60822eb3ba
  $fEqNumber_$c/= ::
    GrammarData.Number -> GrammarData.Number -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a27 :: GrammarData.Number b :: GrammarData.Number ->
                 case a27 of wild {
                   GrammarData.SG
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarData.SG -> GHC.Types.False }
                   GrammarData.DU
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarData.DU -> GHC.Types.False }
                   GrammarData.TRI
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarData.TRI -> GHC.Types.False }
                   GrammarData.PA
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarData.PA -> GHC.Types.False }
                   GrammarData.PL
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarData.PL -> GHC.Types.False } }) -}
3b7d81f4c94437e6844a3064e4af630e
  $fEqPerson :: GHC.Classes.Eq GrammarData.Person
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.Person
                  GrammarData.$fEqPerson_$c==
                  GrammarData.$fEqPerson_$c/= -}
3b7d81f4c94437e6844a3064e4af630e
  $fEqPerson_$c/= ::
    GrammarData.Person -> GrammarData.Person -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a27 :: GrammarData.Person b :: GrammarData.Person ->
                 case a27 of wild {
                   GrammarData.FIRST
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarData.FIRST -> GHC.Types.False }
                   GrammarData.SECOND
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarData.SECOND -> GHC.Types.False }
                   GrammarData.THIRD
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        GrammarData.THIRD -> GHC.Types.False } }) -}
3b7d81f4c94437e6844a3064e4af630e
  $fEqPerson_$c== ::
    GrammarData.Person -> GrammarData.Person -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarData.Person ds1 :: GrammarData.Person ->
                 case ds of wild {
                   GrammarData.FIRST
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarData.FIRST -> GHC.Types.True }
                   GrammarData.SECOND
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarData.SECOND -> GHC.Types.True }
                   GrammarData.THIRD
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarData.THIRD -> GHC.Types.True } }) -}
fd1897a0d2b932b38e0c47ea3af5837d
  $fEqPolarity :: GHC.Classes.Eq GrammarData.Polarity
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.Polarity
                  GrammarData.$fEqPolarity_$c==
                  GrammarData.$fEqPolarity_$c/= -}
fd1897a0d2b932b38e0c47ea3af5837d
  $fEqPolarity_$c/= ::
    GrammarData.Polarity -> GrammarData.Polarity -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a27 :: GrammarData.Polarity b :: GrammarData.Polarity ->
                 case a27 of wild {
                   GrammarData.AFF
                   -> case b of wild1 {
                        GrammarData.AFF -> GHC.Types.False
                        GrammarData.NEG -> GHC.Types.True }
                   GrammarData.NEG
                   -> case b of wild1 {
                        GrammarData.AFF -> GHC.Types.True
                        GrammarData.NEG -> GHC.Types.False } }) -}
fd1897a0d2b932b38e0c47ea3af5837d
  $fEqPolarity_$c== ::
    GrammarData.Polarity -> GrammarData.Polarity -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarData.Polarity ds1 :: GrammarData.Polarity ->
                 case ds of wild {
                   GrammarData.AFF
                   -> case ds1 of wild1 {
                        GrammarData.AFF -> GHC.Types.True
                        GrammarData.NEG -> GHC.Types.False }
                   GrammarData.NEG
                   -> case ds1 of wild1 {
                        GrammarData.AFF -> GHC.Types.False
                        GrammarData.NEG -> GHC.Types.True } }) -}
f663e7ff07f2909cb51f85e829fe40a9
  $fEqSpecificity :: GHC.Classes.Eq GrammarData.Specificity
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.Specificity
                  GrammarData.$fEqManifest_$c==1
                  GrammarData.$fEqSpecificity_$c/= -}
f663e7ff07f2909cb51f85e829fe40a9
  $fEqSpecificity_$c/= ::
    GrammarData.Specificity
    -> GrammarData.Specificity -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a27 :: GrammarData.Specificity b :: GrammarData.Specificity ->
                 case a27 of wild {
                   GrammarData.SPEC
                   -> case b of wild1 {
                        GrammarData.SPEC -> GHC.Types.False
                        GrammarData.NSPEC -> GHC.Types.True }
                   GrammarData.NSPEC
                   -> case b of wild1 {
                        GrammarData.SPEC -> GHC.Types.True
                        GrammarData.NSPEC -> GHC.Types.False } }) -}
635ace3f32ba47f6e643bb471451b3ec
  $fEqTense :: GHC.Classes.Eq GrammarData.Tense
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.Tense
                  GrammarData.$fEqTense_$c==
                  GrammarData.$fEqTense_$c/= -}
635ace3f32ba47f6e643bb471451b3ec
  $fEqTense_$c/= ::
    GrammarData.Tense -> GrammarData.Tense -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a27 :: GrammarData.Tense b :: GrammarData.Tense ->
                 case a27 of wild {
                   GrammarData.PST
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarData.PST -> GHC.Types.False }
                   GrammarData.REM
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarData.REM -> GHC.Types.False }
                   GrammarData.REC
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarData.REC -> GHC.Types.False }
                   GrammarData.NPST
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarData.NPST -> GHC.Types.False }
                   GrammarData.PRS
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarData.PRS -> GHC.Types.False }
                   GrammarData.NFUT
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarData.NFUT -> GHC.Types.False }
                   GrammarData.FUT
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarData.FUT -> GHC.Types.False }
                   GrammarData.IMMF
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarData.IMMF -> GHC.Types.False }
                   GrammarData.REMF
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        GrammarData.REMF -> GHC.Types.False } }) -}
635ace3f32ba47f6e643bb471451b3ec
  $fEqTense_$c== ::
    GrammarData.Tense -> GrammarData.Tense -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: GrammarData.Tense ds1 :: GrammarData.Tense ->
                 case ds of wild {
                   GrammarData.PST
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarData.PST -> GHC.Types.True }
                   GrammarData.REM
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarData.REM -> GHC.Types.True }
                   GrammarData.REC
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarData.REC -> GHC.Types.True }
                   GrammarData.NPST
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarData.NPST -> GHC.Types.True }
                   GrammarData.PRS
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarData.PRS -> GHC.Types.True }
                   GrammarData.NFUT
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarData.NFUT -> GHC.Types.True }
                   GrammarData.FUT
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarData.FUT -> GHC.Types.True }
                   GrammarData.IMMF
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarData.IMMF -> GHC.Types.True }
                   GrammarData.REMF
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarData.REMF -> GHC.Types.True } }) -}
ce1309e748ae1ead2a5127b0f086bbd0
  $fEqTransitivity :: GHC.Classes.Eq GrammarData.Transitivity
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.Transitivity
                  GrammarData.$fEqTransitivity_$c==
                  GrammarData.$fEqTransitivity_$c/= -}
ce1309e748ae1ead2a5127b0f086bbd0
  $fEqTransitivity_$c/= ::
    GrammarData.Transitivity
    -> GrammarData.Transitivity -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a27 :: GrammarData.Transitivity b :: GrammarData.Transitivity ->
                 case a27 of wild {
                   GrammarData.INTR
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarData.INTR -> GHC.Types.False }
                   GrammarData.TR
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarData.TR -> GHC.Types.False }
                   GrammarData.DITR
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        GrammarData.DITR -> GHC.Types.False } }) -}
ce1309e748ae1ead2a5127b0f086bbd0
  $fEqTransitivity_$c== ::
    GrammarData.Transitivity
    -> GrammarData.Transitivity -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarData.Transitivity
                   ds1 :: GrammarData.Transitivity ->
                 case ds of wild {
                   GrammarData.INTR
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarData.INTR -> GHC.Types.True }
                   GrammarData.TR
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarData.TR -> GHC.Types.True }
                   GrammarData.DITR
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarData.DITR -> GHC.Types.True } }) -}
b7c0182e94b370d685bfdc0c00290938
  $fEqVoice :: GHC.Classes.Eq GrammarData.Voice
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.Voice
                  GrammarData.$fEqVoice_$c==
                  GrammarData.$fEqVoice_$c/= -}
b7c0182e94b370d685bfdc0c00290938
  $fEqVoice_$c/= ::
    GrammarData.Voice -> GrammarData.Voice -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a27 :: GrammarData.Voice b :: GrammarData.Voice ->
                 case a27 of wild {
                   GrammarData.ACT
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarData.ACT -> GHC.Types.False }
                   GrammarData.MID
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarData.MID -> GHC.Types.False }
                   GrammarData.PAS
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        GrammarData.PAS -> GHC.Types.False } }) -}
b7c0182e94b370d685bfdc0c00290938
  $fEqVoice_$c== ::
    GrammarData.Voice -> GrammarData.Voice -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarData.Voice ds1 :: GrammarData.Voice ->
                 case ds of wild {
                   GrammarData.ACT
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarData.ACT -> GHC.Types.True }
                   GrammarData.MID
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarData.MID -> GHC.Types.True }
                   GrammarData.PAS
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarData.PAS -> GHC.Types.True } }) -}
70ef043381ff12719553fe55296234a2
  $fEqVolition :: GHC.Classes.Eq GrammarData.Volition
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.Volition
                  GrammarData.$fEqVolition_$c==
                  GrammarData.$fEqVolition_$c/= -}
70ef043381ff12719553fe55296234a2
  $fEqVolition_$c/= ::
    GrammarData.Volition -> GrammarData.Volition -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a27 :: GrammarData.Volition b :: GrammarData.Volition ->
                 case a27 of wild {
                   GrammarData.VOL
                   -> case b of wild1 {
                        GrammarData.VOL -> GHC.Types.False
                        GrammarData.NVOL -> GHC.Types.True }
                   GrammarData.NVOL
                   -> case b of wild1 {
                        GrammarData.VOL -> GHC.Types.True
                        GrammarData.NVOL -> GHC.Types.False } }) -}
70ef043381ff12719553fe55296234a2
  $fEqVolition_$c== ::
    GrammarData.Volition -> GrammarData.Volition -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarData.Volition ds1 :: GrammarData.Volition ->
                 case ds of wild {
                   GrammarData.VOL
                   -> case ds1 of wild1 {
                        GrammarData.VOL -> GHC.Types.True
                        GrammarData.NVOL -> GHC.Types.False }
                   GrammarData.NVOL
                   -> case ds1 of wild1 {
                        GrammarData.VOL -> GHC.Types.False
                        GrammarData.NVOL -> GHC.Types.True } }) -}
bca54c8943426aaabb7eead4f61ed8f0
  $fReadAnimacy :: GHC.Read.Read GrammarData.Animacy
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.Animacy
                  GrammarData.$fReadAnimacy_$s$dmreadsPrec
                  GrammarData.$fReadAnimacy_$sreadListDefault
                  GrammarData.$fReadAnimacy_$creadPrec
                  GrammarData.$fReadAnimacy_$creadListPrec -}
bca54c8943426aaabb7eead4f61ed8f0
  $fReadAnimacy1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarData.Animacy] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarData.Animacy]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarData.Animacy
                   GrammarData.$fReadAnimacy2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarData.Animacy>_R))
                   @ b
                   eta1) -}
bca54c8943426aaabb7eead4f61ed8f0
  $fReadAnimacy10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Animacy -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.Animacy -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.INAN) -}
96da1a8f12ae7c58323094888239179a
  $fReadAnimacy11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "INAN"#) -}
bca54c8943426aaabb7eead4f61ed8f0
  $fReadAnimacy12 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Animacy)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadAnimacy14,
                  GrammarData.$fReadAnimacy13
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.Animacy>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.Animacy>_R))))) -}
bca54c8943426aaabb7eead4f61ed8f0
  $fReadAnimacy13 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Animacy -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.Animacy -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.ZO) -}
46c724203b8f2bd4945cd5ff5928f2e8
  $fReadAnimacy14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ZO"#) -}
bca54c8943426aaabb7eead4f61ed8f0
  $fReadAnimacy15 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Animacy)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadAnimacy17,
                  GrammarData.$fReadAnimacy16
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.Animacy>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.Animacy>_R))))) -}
bca54c8943426aaabb7eead4f61ed8f0
  $fReadAnimacy16 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Animacy -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.Animacy -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.NHUM) -}
2ea2f46b285b906c179558739e0737c7
  $fReadAnimacy17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NHUM"#) -}
bca54c8943426aaabb7eead4f61ed8f0
  $fReadAnimacy18 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Animacy)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadAnimacy20,
                  GrammarData.$fReadAnimacy19
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.Animacy>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.Animacy>_R))))) -}
bca54c8943426aaabb7eead4f61ed8f0
  $fReadAnimacy19 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Animacy -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.Animacy -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.HUM) -}
bca54c8943426aaabb7eead4f61ed8f0
  $fReadAnimacy2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarData.Animacy
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarData.Animacy
                   GrammarData.$fReadAnimacy3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarData.Animacy>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarData.Animacy>_R)))) -}
f4b152c9f41cdda728b9607e47d60af0
  $fReadAnimacy20 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "HUM"#) -}
bca54c8943426aaabb7eead4f61ed8f0
  $fReadAnimacy21 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Animacy)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadAnimacy23,
                  GrammarData.$fReadAnimacy22
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.Animacy>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.Animacy>_R))))) -}
bca54c8943426aaabb7eead4f61ed8f0
  $fReadAnimacy22 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Animacy -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.Animacy -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.AN) -}
44502787459f8fb42249f576611e9cd0
  $fReadAnimacy23 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AN"#) -}
bca54c8943426aaabb7eead4f61ed8f0
  $fReadAnimacy3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Animacy -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarData.Animacy -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarData.Animacy
                   GrammarData.$fReadAnimacy4
                   eta
                   @ b
                   eta1) -}
bca54c8943426aaabb7eead4f61ed8f0
  $fReadAnimacy4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Animacy)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Animacy)
                   GrammarData.$fReadAnimacy21
                   GrammarData.$fReadAnimacy5) -}
bca54c8943426aaabb7eead4f61ed8f0
  $fReadAnimacy5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Animacy)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Animacy)
                   GrammarData.$fReadAnimacy18
                   GrammarData.$fReadAnimacy6) -}
bca54c8943426aaabb7eead4f61ed8f0
  $fReadAnimacy6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Animacy)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Animacy)
                   GrammarData.$fReadAnimacy15
                   GrammarData.$fReadAnimacy7) -}
bca54c8943426aaabb7eead4f61ed8f0
  $fReadAnimacy7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Animacy)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Animacy)
                   GrammarData.$fReadAnimacy12
                   GrammarData.$fReadAnimacy8) -}
bca54c8943426aaabb7eead4f61ed8f0
  $fReadAnimacy8 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Animacy)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Animacy)
                   GrammarData.$fReadAnimacy9
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Animacy))) -}
bca54c8943426aaabb7eead4f61ed8f0
  $fReadAnimacy9 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Animacy)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadAnimacy11,
                  GrammarData.$fReadAnimacy10
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.Animacy>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.Animacy>_R))))) -}
bca54c8943426aaabb7eead4f61ed8f0
  $fReadAnimacy_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [GrammarData.Animacy]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadAnimacy1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarData.Animacy]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarData.Animacy]>_R))) -}
bca54c8943426aaabb7eead4f61ed8f0
  $fReadAnimacy_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Animacy
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadAnimacy2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarData.Animacy>_R)) -}
bca54c8943426aaabb7eead4f61ed8f0
  $fReadAnimacy_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarData.Animacy
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarData.Animacy
                   GrammarData.$fReadAnimacy_$creadPrec
                   eta) -}
bca54c8943426aaabb7eead4f61ed8f0
  $fReadAnimacy_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarData.Animacy]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarData.Animacy]
                   ((GrammarData.$fReadAnimacy_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarData.Animacy]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarData.Animacy]>_R)
                      @ [GrammarData.Animacy]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarData.Animacy]))) -}
80861930bf27d683d5ab7b0a02511c13
  $fReadAspect :: GHC.Read.Read GrammarData.Aspect
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.Aspect
                  GrammarData.$fReadAspect_$s$dmreadsPrec
                  GrammarData.$fReadAspect_$sreadListDefault
                  GrammarData.$fReadAspect_$creadPrec
                  GrammarData.$fReadAspect_$creadListPrec -}
80861930bf27d683d5ab7b0a02511c13
  $fReadAspect1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarData.Aspect] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarData.Aspect] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarData.Aspect
                   GrammarData.$fReadAspect2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarData.Aspect>_R))
                   @ b
                   eta1) -}
80861930bf27d683d5ab7b0a02511c13
  $fReadAspect10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Aspect -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.Aspect -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.PFV) -}
448d9f83b8050fbc6d7259c4347fe742
  $fReadAspect11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PFV"#) -}
80861930bf27d683d5ab7b0a02511c13
  $fReadAspect2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarData.Aspect
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarData.Aspect
                   GrammarData.$fReadAspect3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarData.Aspect>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarData.Aspect>_R)))) -}
80861930bf27d683d5ab7b0a02511c13
  $fReadAspect3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Aspect -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarData.Aspect -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarData.Aspect
                   GrammarData.$fReadAspect4
                   eta
                   @ b
                   eta1) -}
80861930bf27d683d5ab7b0a02511c13
  $fReadAspect4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Aspect)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Aspect)
                   GrammarData.$fReadAspect9
                   GrammarData.$fReadAspect5) -}
80861930bf27d683d5ab7b0a02511c13
  $fReadAspect5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Aspect)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Aspect)
                   GrammarData.$fReadAspect6
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Aspect))) -}
80861930bf27d683d5ab7b0a02511c13
  $fReadAspect6 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Aspect)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadAspect8,
                  GrammarData.$fReadAspect7
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.Aspect>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.Aspect>_R))))) -}
80861930bf27d683d5ab7b0a02511c13
  $fReadAspect7 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Aspect -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.Aspect -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.IPFV) -}
20f767f1f16cc1776a2bb9c0fbf1d791
  $fReadAspect8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "IPFV"#) -}
80861930bf27d683d5ab7b0a02511c13
  $fReadAspect9 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Aspect)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadAspect11,
                  GrammarData.$fReadAspect10
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.Aspect>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.Aspect>_R))))) -}
80861930bf27d683d5ab7b0a02511c13
  $fReadAspect_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [GrammarData.Aspect]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadAspect1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarData.Aspect]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarData.Aspect]>_R))) -}
80861930bf27d683d5ab7b0a02511c13
  $fReadAspect_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Aspect
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadAspect2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarData.Aspect>_R)) -}
80861930bf27d683d5ab7b0a02511c13
  $fReadAspect_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarData.Aspect
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarData.Aspect
                   GrammarData.$fReadAspect_$creadPrec
                   eta) -}
80861930bf27d683d5ab7b0a02511c13
  $fReadAspect_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarData.Aspect]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarData.Aspect]
                   ((GrammarData.$fReadAspect_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarData.Aspect]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarData.Aspect]>_R)
                      @ [GrammarData.Aspect]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarData.Aspect]))) -}
414449d8392b340149498bdeea675855
  $fReadCase :: GHC.Read.Read GrammarData.Case
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.Case
                  GrammarData.$fReadCase_$s$dmreadsPrec
                  GrammarData.$fReadCase_$sreadListDefault
                  GrammarData.$fReadCase_$creadPrec
                  GrammarData.$fReadCase_$creadListPrec -}
414449d8392b340149498bdeea675855
  $fReadCase1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarData.Case] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarData.Case] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarData.Case
                   GrammarData.$fReadCase2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarData.Case>_R))
                   @ b
                   eta1) -}
414449d8392b340149498bdeea675855
  $fReadCase10 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Case)
                   GrammarData.$fReadCase23
                   GrammarData.$fReadCase11) -}
414449d8392b340149498bdeea675855
  $fReadCase11 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Case)
                   GrammarData.$fReadCase20
                   GrammarData.$fReadCase12) -}
414449d8392b340149498bdeea675855
  $fReadCase12 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Case)
                   GrammarData.$fReadCase17
                   GrammarData.$fReadCase13) -}
414449d8392b340149498bdeea675855
  $fReadCase13 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Case)
                   GrammarData.$fReadCase14
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Case))) -}
414449d8392b340149498bdeea675855
  $fReadCase14 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Case)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadCase16,
                  GrammarData.$fReadCase15
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.Case>_R))))) -}
414449d8392b340149498bdeea675855
  $fReadCase15 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.VOC) -}
e2fd9e2b150c3cb180afd8ca43e97aa2
  $fReadCase16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "VOC"#) -}
414449d8392b340149498bdeea675855
  $fReadCase17 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Case)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadCase19,
                  GrammarData.$fReadCase18
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.Case>_R))))) -}
414449d8392b340149498bdeea675855
  $fReadCase18 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.INS) -}
648d1857391ca8cbc756b4bbdf9f063d
  $fReadCase19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "INS"#) -}
414449d8392b340149498bdeea675855
  $fReadCase2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarData.Case
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarData.Case
                   GrammarData.$fReadCase3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarData.Case>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarData.Case>_R)))) -}
414449d8392b340149498bdeea675855
  $fReadCase20 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Case)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadCase22,
                  GrammarData.$fReadCase21
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.Case>_R))))) -}
414449d8392b340149498bdeea675855
  $fReadCase21 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.ABL) -}
fc79195fe387660e35ad4c53359e19d9
  $fReadCase22 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ABL"#) -}
414449d8392b340149498bdeea675855
  $fReadCase23 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Case)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadCase25,
                  GrammarData.$fReadCase24
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.Case>_R))))) -}
414449d8392b340149498bdeea675855
  $fReadCase24 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.PREP) -}
a9546ae45f1a4dd2918102793a2b77b0
  $fReadCase25 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PREP"#) -}
414449d8392b340149498bdeea675855
  $fReadCase26 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Case)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadCase28,
                  GrammarData.$fReadCase27
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.Case>_R))))) -}
414449d8392b340149498bdeea675855
  $fReadCase27 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.LOC) -}
2da6e7d77efe63165d4cada49abfe51f
  $fReadCase28 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "LOC"#) -}
414449d8392b340149498bdeea675855
  $fReadCase29 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Case)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadCase31,
                  GrammarData.$fReadCase30
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.Case>_R))))) -}
414449d8392b340149498bdeea675855
  $fReadCase3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarData.Case -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarData.Case
                   GrammarData.$fReadCase4
                   eta
                   @ b
                   eta1) -}
414449d8392b340149498bdeea675855
  $fReadCase30 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.DAT) -}
67d0fe2e817d1bd987fffd6b24b8b9c0
  $fReadCase31 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DAT"#) -}
414449d8392b340149498bdeea675855
  $fReadCase32 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Case)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadCase34,
                  GrammarData.$fReadCase33
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.Case>_R))))) -}
414449d8392b340149498bdeea675855
  $fReadCase33 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.GEN) -}
ba1cd4eea85caba2f0e6bd6c004b34df
  $fReadCase34 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "GEN"#) -}
414449d8392b340149498bdeea675855
  $fReadCase35 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Case)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadCase37,
                  GrammarData.$fReadCase36
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.Case>_R))))) -}
414449d8392b340149498bdeea675855
  $fReadCase36 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.ERG) -}
1b2bc9adb1dc2a116560bed4aef06f28
  $fReadCase37 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ERG"#) -}
414449d8392b340149498bdeea675855
  $fReadCase38 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Case)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadCase40,
                  GrammarData.$fReadCase39
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.Case>_R))))) -}
414449d8392b340149498bdeea675855
  $fReadCase39 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.ACC) -}
414449d8392b340149498bdeea675855
  $fReadCase4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Case)
                   GrammarData.$fReadCase41
                   GrammarData.$fReadCase5) -}
07922eeb65704723cfaa739b698f11d6
  $fReadCase40 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ACC"#) -}
414449d8392b340149498bdeea675855
  $fReadCase41 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Case)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadCase43,
                  GrammarData.$fReadCase42
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.Case>_R))))) -}
414449d8392b340149498bdeea675855
  $fReadCase42 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.NOM) -}
7682418989fbdaaec9ab9f7c92ff2b0a
  $fReadCase43 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NOM"#) -}
414449d8392b340149498bdeea675855
  $fReadCase5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Case)
                   GrammarData.$fReadCase38
                   GrammarData.$fReadCase6) -}
414449d8392b340149498bdeea675855
  $fReadCase6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Case)
                   GrammarData.$fReadCase35
                   GrammarData.$fReadCase7) -}
414449d8392b340149498bdeea675855
  $fReadCase7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Case)
                   GrammarData.$fReadCase32
                   GrammarData.$fReadCase8) -}
414449d8392b340149498bdeea675855
  $fReadCase8 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Case)
                   GrammarData.$fReadCase29
                   GrammarData.$fReadCase9) -}
414449d8392b340149498bdeea675855
  $fReadCase9 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Case)
                   GrammarData.$fReadCase26
                   GrammarData.$fReadCase10) -}
414449d8392b340149498bdeea675855
  $fReadCase_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [GrammarData.Case]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadCase1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarData.Case]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarData.Case]>_R))) -}
414449d8392b340149498bdeea675855
  $fReadCase_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Case
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadCase2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarData.Case>_R)) -}
414449d8392b340149498bdeea675855
  $fReadCase_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarData.Case
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarData.Case
                   GrammarData.$fReadCase_$creadPrec
                   eta) -}
414449d8392b340149498bdeea675855
  $fReadCase_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarData.Case]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarData.Case]
                   ((GrammarData.$fReadCase_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarData.Case]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <[GrammarData.Case]>_R)
                      @ [GrammarData.Case]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarData.Case]))) -}
b259ad971f4abd96d51568b3b5e664ea
  $fReadDefiniteness :: GHC.Read.Read GrammarData.Definiteness
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.Definiteness
                  GrammarData.$fReadDefiniteness_$s$dmreadsPrec
                  GrammarData.$fReadDefiniteness_$sreadListDefault
                  GrammarData.$fReadDefiniteness_$creadPrec
                  GrammarData.$fReadDefiniteness_$creadListPrec -}
b259ad971f4abd96d51568b3b5e664ea
  $fReadDefiniteness1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarData.Definiteness] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarData.Definiteness]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarData.Definiteness
                   GrammarData.$fReadDefiniteness2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarData.Definiteness>_R))
                   @ b
                   eta1) -}
b259ad971f4abd96d51568b3b5e664ea
  $fReadDefiniteness10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Definiteness -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.Definiteness
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.DEF) -}
ba0974bd1e91088af93d9390b7ad9e9a
  $fReadDefiniteness11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DEF"#) -}
b259ad971f4abd96d51568b3b5e664ea
  $fReadDefiniteness2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarData.Definiteness
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarData.Definiteness
                   GrammarData.$fReadDefiniteness3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarData.Definiteness>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarData.Definiteness>_R)))) -}
b259ad971f4abd96d51568b3b5e664ea
  $fReadDefiniteness3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Definiteness -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarData.Definiteness
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarData.Definiteness
                   GrammarData.$fReadDefiniteness4
                   eta
                   @ b
                   eta1) -}
b259ad971f4abd96d51568b3b5e664ea
  $fReadDefiniteness4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Definiteness)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Definiteness)
                   GrammarData.$fReadDefiniteness9
                   GrammarData.$fReadDefiniteness5) -}
b259ad971f4abd96d51568b3b5e664ea
  $fReadDefiniteness5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Definiteness)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Definiteness)
                   GrammarData.$fReadDefiniteness6
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           GrammarData.Definiteness))) -}
b259ad971f4abd96d51568b3b5e664ea
  $fReadDefiniteness6 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Definiteness)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadDefiniteness8,
                  GrammarData.$fReadDefiniteness7
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.Definiteness>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.Definiteness>_R))))) -}
b259ad971f4abd96d51568b3b5e664ea
  $fReadDefiniteness7 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Definiteness -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.Definiteness
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.INDF) -}
a889ffc1614be79b40282b497a09d7da
  $fReadDefiniteness8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "INDF"#) -}
b259ad971f4abd96d51568b3b5e664ea
  $fReadDefiniteness9 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Definiteness)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadDefiniteness11,
                  GrammarData.$fReadDefiniteness10
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.Definiteness>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.Definiteness>_R))))) -}
b259ad971f4abd96d51568b3b5e664ea
  $fReadDefiniteness_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [GrammarData.Definiteness]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadDefiniteness1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarData.Definiteness]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarData.Definiteness]>_R))) -}
b259ad971f4abd96d51568b3b5e664ea
  $fReadDefiniteness_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Definiteness
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadDefiniteness2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarData.Definiteness>_R)) -}
b259ad971f4abd96d51568b3b5e664ea
  $fReadDefiniteness_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarData.Definiteness
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarData.Definiteness
                   GrammarData.$fReadDefiniteness_$creadPrec
                   eta) -}
b259ad971f4abd96d51568b3b5e664ea
  $fReadDefiniteness_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarData.Definiteness]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarData.Definiteness]
                   ((GrammarData.$fReadDefiniteness_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarData.Definiteness]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarData.Definiteness]>_R)
                      @ [GrammarData.Definiteness]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarData.Definiteness]))) -}
c2de0d68a0340ca4bb61c34dcc01b06e
  $fReadEvidentiality :: GHC.Read.Read GrammarData.Evidentiality
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.Evidentiality
                  GrammarData.$fReadEvidentiality_$s$dmreadsPrec
                  GrammarData.$fReadEvidentiality_$sreadListDefault
                  GrammarData.$fReadEvidentiality_$creadPrec
                  GrammarData.$fReadEvidentiality_$creadListPrec -}
c2de0d68a0340ca4bb61c34dcc01b06e
  $fReadEvidentiality1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarData.Evidentiality] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarData.Evidentiality]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarData.Evidentiality
                   GrammarData.$fReadEvidentiality2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarData.Evidentiality>_R))
                   @ b
                   eta1) -}
c2de0d68a0340ca4bb61c34dcc01b06e
  $fReadEvidentiality10 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GrammarData.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Evidentiality)
                   GrammarData.$fReadEvidentiality23
                   GrammarData.$fReadEvidentiality11) -}
c2de0d68a0340ca4bb61c34dcc01b06e
  $fReadEvidentiality11 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GrammarData.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Evidentiality)
                   GrammarData.$fReadEvidentiality20
                   GrammarData.$fReadEvidentiality12) -}
c2de0d68a0340ca4bb61c34dcc01b06e
  $fReadEvidentiality12 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GrammarData.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Evidentiality)
                   GrammarData.$fReadEvidentiality17
                   GrammarData.$fReadEvidentiality13) -}
c2de0d68a0340ca4bb61c34dcc01b06e
  $fReadEvidentiality13 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GrammarData.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Evidentiality)
                   GrammarData.$fReadEvidentiality14
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           GrammarData.Evidentiality))) -}
c2de0d68a0340ca4bb61c34dcc01b06e
  $fReadEvidentiality14 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Evidentiality)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadEvidentiality16,
                  GrammarData.$fReadEvidentiality15
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.Evidentiality>_R))))) -}
c2de0d68a0340ca4bb61c34dcc01b06e
  $fReadEvidentiality15 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.Evidentiality
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.ASS) -}
3022017b4ddfbe973fa28015954a6251
  $fReadEvidentiality16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ASS"#) -}
c2de0d68a0340ca4bb61c34dcc01b06e
  $fReadEvidentiality17 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Evidentiality)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadEvidentiality19,
                  GrammarData.$fReadEvidentiality18
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.Evidentiality>_R))))) -}
c2de0d68a0340ca4bb61c34dcc01b06e
  $fReadEvidentiality18 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.Evidentiality
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.QUO) -}
3b3eed58250b10a5b31ab2692934ae6f
  $fReadEvidentiality19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "QUO"#) -}
c2de0d68a0340ca4bb61c34dcc01b06e
  $fReadEvidentiality2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarData.Evidentiality
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarData.Evidentiality
                   GrammarData.$fReadEvidentiality3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarData.Evidentiality>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarData.Evidentiality>_R)))) -}
c2de0d68a0340ca4bb61c34dcc01b06e
  $fReadEvidentiality20 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Evidentiality)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadEvidentiality22,
                  GrammarData.$fReadEvidentiality21
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.Evidentiality>_R))))) -}
c2de0d68a0340ca4bb61c34dcc01b06e
  $fReadEvidentiality21 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.Evidentiality
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.HSY) -}
f3e10dc5fd5f6c32fae421084bd85cd0
  $fReadEvidentiality22 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "HSY"#) -}
c2de0d68a0340ca4bb61c34dcc01b06e
  $fReadEvidentiality23 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Evidentiality)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadEvidentiality25,
                  GrammarData.$fReadEvidentiality24
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.Evidentiality>_R))))) -}
c2de0d68a0340ca4bb61c34dcc01b06e
  $fReadEvidentiality24 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.Evidentiality
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.REP) -}
b78b8a403ca1ee587a2a884484b62aaf
  $fReadEvidentiality25 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "REP"#) -}
c2de0d68a0340ca4bb61c34dcc01b06e
  $fReadEvidentiality26 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Evidentiality)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadEvidentiality28,
                  GrammarData.$fReadEvidentiality27
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.Evidentiality>_R))))) -}
c2de0d68a0340ca4bb61c34dcc01b06e
  $fReadEvidentiality27 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.Evidentiality
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.INFER) -}
d8cae8f165cb606f1649ee2fa77bda70
  $fReadEvidentiality28 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "INFER"#) -}
c2de0d68a0340ca4bb61c34dcc01b06e
  $fReadEvidentiality29 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Evidentiality)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadEvidentiality31,
                  GrammarData.$fReadEvidentiality30
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.Evidentiality>_R))))) -}
c2de0d68a0340ca4bb61c34dcc01b06e
  $fReadEvidentiality3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarData.Evidentiality
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarData.Evidentiality
                   GrammarData.$fReadEvidentiality4
                   eta
                   @ b
                   eta1) -}
c2de0d68a0340ca4bb61c34dcc01b06e
  $fReadEvidentiality30 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.Evidentiality
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.AUD) -}
82ac1152644bbfc471f0ce85ba35effc
  $fReadEvidentiality31 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AUD"#) -}
c2de0d68a0340ca4bb61c34dcc01b06e
  $fReadEvidentiality32 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Evidentiality)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadEvidentiality34,
                  GrammarData.$fReadEvidentiality33
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.Evidentiality>_R))))) -}
c2de0d68a0340ca4bb61c34dcc01b06e
  $fReadEvidentiality33 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.Evidentiality
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.NVIS) -}
34cb5d3bbfb6d1cbdef9ff35eb112a5b
  $fReadEvidentiality34 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NVIS"#) -}
c2de0d68a0340ca4bb61c34dcc01b06e
  $fReadEvidentiality35 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Evidentiality)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadEvidentiality37,
                  GrammarData.$fReadEvidentiality36
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.Evidentiality>_R))))) -}
c2de0d68a0340ca4bb61c34dcc01b06e
  $fReadEvidentiality36 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.Evidentiality
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.VIS) -}
3183c299ebb63843c2ec86ba7165367b
  $fReadEvidentiality37 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "VIS"#) -}
c2de0d68a0340ca4bb61c34dcc01b06e
  $fReadEvidentiality38 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Evidentiality)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadEvidentiality40,
                  GrammarData.$fReadEvidentiality39
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.Evidentiality>_R))))) -}
c2de0d68a0340ca4bb61c34dcc01b06e
  $fReadEvidentiality39 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.Evidentiality
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.SENS) -}
c2de0d68a0340ca4bb61c34dcc01b06e
  $fReadEvidentiality4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GrammarData.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Evidentiality)
                   GrammarData.$fReadEvidentiality41
                   GrammarData.$fReadEvidentiality5) -}
d7de3852d3ffa0abe4cc5688b9f1d56f
  $fReadEvidentiality40 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SENS"#) -}
c2de0d68a0340ca4bb61c34dcc01b06e
  $fReadEvidentiality41 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Evidentiality)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadEvidentiality43,
                  GrammarData.$fReadEvidentiality42
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.Evidentiality>_R))))) -}
c2de0d68a0340ca4bb61c34dcc01b06e
  $fReadEvidentiality42 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.Evidentiality
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.EXP) -}
0cdfaa283dd215811f05a084a08da134
  $fReadEvidentiality43 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "EXP"#) -}
c2de0d68a0340ca4bb61c34dcc01b06e
  $fReadEvidentiality5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GrammarData.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Evidentiality)
                   GrammarData.$fReadEvidentiality38
                   GrammarData.$fReadEvidentiality6) -}
c2de0d68a0340ca4bb61c34dcc01b06e
  $fReadEvidentiality6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GrammarData.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Evidentiality)
                   GrammarData.$fReadEvidentiality35
                   GrammarData.$fReadEvidentiality7) -}
c2de0d68a0340ca4bb61c34dcc01b06e
  $fReadEvidentiality7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GrammarData.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Evidentiality)
                   GrammarData.$fReadEvidentiality32
                   GrammarData.$fReadEvidentiality8) -}
c2de0d68a0340ca4bb61c34dcc01b06e
  $fReadEvidentiality8 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GrammarData.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Evidentiality)
                   GrammarData.$fReadEvidentiality29
                   GrammarData.$fReadEvidentiality9) -}
c2de0d68a0340ca4bb61c34dcc01b06e
  $fReadEvidentiality9 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GrammarData.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Evidentiality)
                   GrammarData.$fReadEvidentiality26
                   GrammarData.$fReadEvidentiality10) -}
c2de0d68a0340ca4bb61c34dcc01b06e
  $fReadEvidentiality_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [GrammarData.Evidentiality]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadEvidentiality1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarData.Evidentiality]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarData.Evidentiality]>_R))) -}
c2de0d68a0340ca4bb61c34dcc01b06e
  $fReadEvidentiality_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Evidentiality
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadEvidentiality2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarData.Evidentiality>_R)) -}
c2de0d68a0340ca4bb61c34dcc01b06e
  $fReadEvidentiality_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarData.Evidentiality
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarData.Evidentiality
                   GrammarData.$fReadEvidentiality_$creadPrec
                   eta) -}
c2de0d68a0340ca4bb61c34dcc01b06e
  $fReadEvidentiality_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarData.Evidentiality]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarData.Evidentiality]
                   ((GrammarData.$fReadEvidentiality_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarData.Evidentiality]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarData.Evidentiality]>_R)
                      @ [GrammarData.Evidentiality]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarData.Evidentiality]))) -}
e7961ab838d9fccce2f6168c4bdf0b78
  $fReadGender :: GHC.Read.Read GrammarData.Gender
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.Gender
                  GrammarData.$fReadGender_$s$dmreadsPrec
                  GrammarData.$fReadGender_$sreadListDefault
                  GrammarData.$fReadGender_$creadPrec
                  GrammarData.$fReadGender_$creadListPrec -}
e7961ab838d9fccce2f6168c4bdf0b78
  $fReadGender1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarData.Gender] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarData.Gender] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarData.Gender
                   GrammarData.$fReadGender2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarData.Gender>_R))
                   @ b
                   eta1) -}
0523d75c3af948c8a264e3363997499f
  $fReadGender10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "N"#) -}
e7961ab838d9fccce2f6168c4bdf0b78
  $fReadGender11 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Gender)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadGender13,
                  GrammarData.$fReadGender12
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.Gender>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.Gender>_R))))) -}
e7961ab838d9fccce2f6168c4bdf0b78
  $fReadGender12 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Gender -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.Gender -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.COM) -}
202845e530b669669aab93948982a6ce
  $fReadGender13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "COM"#) -}
e7961ab838d9fccce2f6168c4bdf0b78
  $fReadGender14 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Gender)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadGender16,
                  GrammarData.$fReadGender15
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.Gender>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.Gender>_R))))) -}
e7961ab838d9fccce2f6168c4bdf0b78
  $fReadGender15 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Gender -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.Gender -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.F) -}
08f1199deb808519d2e5147caf253b34
  $fReadGender16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "F"#) -}
e7961ab838d9fccce2f6168c4bdf0b78
  $fReadGender17 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Gender)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadGender19,
                  GrammarData.$fReadGender18
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.Gender>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.Gender>_R))))) -}
e7961ab838d9fccce2f6168c4bdf0b78
  $fReadGender18 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Gender -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.Gender -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.M) -}
8837456d961aa2b6bb74f90a24f3c7bb
  $fReadGender19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "M"#) -}
e7961ab838d9fccce2f6168c4bdf0b78
  $fReadGender2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarData.Gender
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarData.Gender
                   GrammarData.$fReadGender3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarData.Gender>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarData.Gender>_R)))) -}
e7961ab838d9fccce2f6168c4bdf0b78
  $fReadGender3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Gender -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarData.Gender -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarData.Gender
                   GrammarData.$fReadGender4
                   eta
                   @ b
                   eta1) -}
e7961ab838d9fccce2f6168c4bdf0b78
  $fReadGender4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Gender)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Gender)
                   GrammarData.$fReadGender17
                   GrammarData.$fReadGender5) -}
e7961ab838d9fccce2f6168c4bdf0b78
  $fReadGender5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Gender)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Gender)
                   GrammarData.$fReadGender14
                   GrammarData.$fReadGender6) -}
e7961ab838d9fccce2f6168c4bdf0b78
  $fReadGender6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Gender)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Gender)
                   GrammarData.$fReadGender11
                   GrammarData.$fReadGender7) -}
e7961ab838d9fccce2f6168c4bdf0b78
  $fReadGender7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Gender)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Gender)
                   GrammarData.$fReadGender8
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Gender))) -}
e7961ab838d9fccce2f6168c4bdf0b78
  $fReadGender8 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Gender)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadGender10,
                  GrammarData.$fReadGender9
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.Gender>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.Gender>_R))))) -}
e7961ab838d9fccce2f6168c4bdf0b78
  $fReadGender9 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Gender -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.Gender -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.N) -}
e7961ab838d9fccce2f6168c4bdf0b78
  $fReadGender_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [GrammarData.Gender]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadGender1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarData.Gender]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarData.Gender]>_R))) -}
e7961ab838d9fccce2f6168c4bdf0b78
  $fReadGender_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Gender
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadGender2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarData.Gender>_R)) -}
e7961ab838d9fccce2f6168c4bdf0b78
  $fReadGender_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarData.Gender
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarData.Gender
                   GrammarData.$fReadGender_$creadPrec
                   eta) -}
e7961ab838d9fccce2f6168c4bdf0b78
  $fReadGender_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarData.Gender]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarData.Gender]
                   ((GrammarData.$fReadGender_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarData.Gender]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarData.Gender]>_R)
                      @ [GrammarData.Gender]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarData.Gender]))) -}
8bea2a401488a9b7443e58342e97c338
  $fReadHonorific :: GHC.Read.Read GrammarData.Honorific
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.Honorific
                  GrammarData.$fReadHonorific_$s$dmreadsPrec
                  GrammarData.$fReadHonorific_$sreadListDefault
                  GrammarData.$fReadHonorific_$creadPrec
                  GrammarData.$fReadHonorific_$creadListPrec -}
8bea2a401488a9b7443e58342e97c338
  $fReadHonorific1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarData.Honorific] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarData.Honorific]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarData.Honorific
                   GrammarData.$fReadHonorific2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarData.Honorific>_R))
                   @ b
                   eta1) -}
8bea2a401488a9b7443e58342e97c338
  $fReadHonorific10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Honorific -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.Honorific -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.FAM) -}
c257f951259a26297396c01673b9bd3c
  $fReadHonorific11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FAM"#) -}
8bea2a401488a9b7443e58342e97c338
  $fReadHonorific2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarData.Honorific
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarData.Honorific
                   GrammarData.$fReadHonorific3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarData.Honorific>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarData.Honorific>_R)))) -}
8bea2a401488a9b7443e58342e97c338
  $fReadHonorific3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Honorific -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarData.Honorific
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarData.Honorific
                   GrammarData.$fReadHonorific4
                   eta
                   @ b
                   eta1) -}
8bea2a401488a9b7443e58342e97c338
  $fReadHonorific4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Honorific)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Honorific)
                   GrammarData.$fReadHonorific9
                   GrammarData.$fReadHonorific5) -}
8bea2a401488a9b7443e58342e97c338
  $fReadHonorific5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Honorific)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Honorific)
                   GrammarData.$fReadHonorific6
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           GrammarData.Honorific))) -}
8bea2a401488a9b7443e58342e97c338
  $fReadHonorific6 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Honorific)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadHonorific8,
                  GrammarData.$fReadHonorific7
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.Honorific>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.Honorific>_R))))) -}
8bea2a401488a9b7443e58342e97c338
  $fReadHonorific7 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Honorific -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.Honorific -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.FORM) -}
c2b930df2f13fff7c637ebe16621db8c
  $fReadHonorific8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FORM"#) -}
8bea2a401488a9b7443e58342e97c338
  $fReadHonorific9 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Honorific)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadHonorific11,
                  GrammarData.$fReadHonorific10
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.Honorific>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.Honorific>_R))))) -}
8bea2a401488a9b7443e58342e97c338
  $fReadHonorific_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [GrammarData.Honorific]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadHonorific1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarData.Honorific]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarData.Honorific]>_R))) -}
8bea2a401488a9b7443e58342e97c338
  $fReadHonorific_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Honorific
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadHonorific2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarData.Honorific>_R)) -}
8bea2a401488a9b7443e58342e97c338
  $fReadHonorific_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarData.Honorific
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarData.Honorific
                   GrammarData.$fReadHonorific_$creadPrec
                   eta) -}
8bea2a401488a9b7443e58342e97c338
  $fReadHonorific_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarData.Honorific]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarData.Honorific]
                   ((GrammarData.$fReadHonorific_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarData.Honorific]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarData.Honorific]>_R)
                      @ [GrammarData.Honorific]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarData.Honorific]))) -}
bf97cdc74f3aad6d32e164918e597133
  $fReadManifest ::
    GHC.Read.Read a => GHC.Read.Read (GrammarData.Manifest a)
  DFunId[0]
  {- Arity: 1, Strictness: <L,U(A,A,U,A)>m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a27 $dRead :: GHC.Read.Read a27.
                  @ (GrammarData.Manifest a27)
                  (GrammarData.$fReadManifest_$creadsPrec @ a27 $dRead)
                  (GrammarData.$fReadManifest_$creadList @ a27 $dRead)
                  (GrammarData.$fReadManifest_$creadPrec @ a27 $dRead)
                  (GrammarData.$fReadManifest_$creadListPrec @ a27 $dRead) -}
0368edb45429beadf0700dcb78164252
  $fReadManifest1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarData.Manifest GrammarData.Gender]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarData.Manifest GrammarData.Gender]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ (GrammarData.Manifest GrammarData.Gender)
                   GrammarData.$fReadManifest2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarData.Manifest GrammarData.Gender>_R))
                   @ b
                   eta1) -}
5d86255862619d8dff1b9ce6340e680a
  $fReadManifest10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarData.Manifest GrammarData.Number]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarData.Manifest GrammarData.Number]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ (GrammarData.Manifest GrammarData.Number)
                   GrammarData.$fReadManifest11
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarData.Manifest GrammarData.Number>_R))
                   @ b
                   eta1) -}
432873a518e727fd0cefa85c30daa8ae
  $fReadManifest11 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP
         (GrammarData.Manifest GrammarData.Number)
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ (GrammarData.Manifest GrammarData.Number)
                   GrammarData.$fReadManifest12
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarData.Manifest GrammarData.Number>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarData.Manifest GrammarData.Number>_R)))) -}
0da3600e200316296c3d4bf676641e38
  $fReadManifest12 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Manifest GrammarData.Number
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)> -}
c76b2f9d9ee212d312da473100c7a133
  $fReadManifest13 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarData.Manifest GrammarData.Honorific]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarData.Manifest GrammarData.Honorific]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ (GrammarData.Manifest GrammarData.Honorific)
                   GrammarData.$fReadManifest14
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarData.Manifest GrammarData.Honorific>_R))
                   @ b
                   eta1) -}
0835dccaa13c6501c3eeb77ba90ef0f6
  $fReadManifest14 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP
         (GrammarData.Manifest GrammarData.Honorific)
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ (GrammarData.Manifest GrammarData.Honorific)
                   GrammarData.$fReadManifest15
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarData.Manifest GrammarData.Honorific>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarData.Manifest GrammarData.Honorific>_R)))) -}
e11398a7a561ff08f95792fd766b7789
  $fReadManifest15 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Manifest GrammarData.Honorific
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)> -}
73568571fc739deb3573df89f341279e
  $fReadManifest16 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarData.Manifest GrammarData.Definiteness]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarData.Manifest GrammarData.Definiteness]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ (GrammarData.Manifest GrammarData.Definiteness)
                   GrammarData.$fReadManifest17
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarData.Manifest GrammarData.Definiteness>_R))
                   @ b
                   eta1) -}
e86f1d067d821350fca7d77dc1de1b59
  $fReadManifest17 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP
         (GrammarData.Manifest GrammarData.Definiteness)
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ (GrammarData.Manifest GrammarData.Definiteness)
                   GrammarData.$fReadManifest18
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarData.Manifest GrammarData.Definiteness>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarData.Manifest GrammarData.Definiteness>_R)))) -}
be1a8a96c320a112abb41cef99337e47
  $fReadManifest18 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Manifest GrammarData.Definiteness
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)> -}
0fc82cd4a46f0e92b8b34cc813613f41
  $fReadManifest19 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarData.Manifest GrammarData.Specificity]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarData.Manifest GrammarData.Specificity]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ (GrammarData.Manifest GrammarData.Specificity)
                   GrammarData.$fReadManifest20
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarData.Manifest GrammarData.Specificity>_R))
                   @ b
                   eta1) -}
0a3feac11a1025a09277d1f73e9acb1f
  $fReadManifest2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP
         (GrammarData.Manifest GrammarData.Gender)
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ (GrammarData.Manifest GrammarData.Gender)
                   GrammarData.$fReadManifest3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarData.Manifest GrammarData.Gender>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarData.Manifest GrammarData.Gender>_R)))) -}
3e46c19a9ebe38bbd685e28e7e21367a
  $fReadManifest20 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP
         (GrammarData.Manifest GrammarData.Specificity)
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ (GrammarData.Manifest GrammarData.Specificity)
                   GrammarData.$fReadManifest21
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarData.Manifest GrammarData.Specificity>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarData.Manifest GrammarData.Specificity>_R)))) -}
75638f3fe88c861e4c493c2718b53c5b
  $fReadManifest21 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Manifest GrammarData.Specificity
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)> -}
bf97cdc74f3aad6d32e164918e597133
  $fReadManifest22 ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarData.Manifest a] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 3, Strictness: <L,U(A,A,U,A)><L,A><L,C(U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a27
                   $dRead :: GHC.Read.Read a27
                   eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarData.Manifest a27]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ (GrammarData.Manifest a27)
                   (GrammarData.$fReadManifest23 @ a27 $dRead)
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarData.Manifest a27>_R))
                   @ b
                   eta1) -}
bf97cdc74f3aad6d32e164918e597133
  $fReadManifest23 ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP (GrammarData.Manifest a)
  {- Arity: 2, Strictness: <L,U(A,A,U,A)><L,U> -}
6bf1f7b189f154bb50b4ed606cc91d4c
  $fReadManifest3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Manifest GrammarData.Gender
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)> -}
a3efa8b086d03573cc03c7ce10794815
  $fReadManifest4 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarData.Manifest GrammarData.Animacy]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarData.Manifest GrammarData.Animacy]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ (GrammarData.Manifest GrammarData.Animacy)
                   GrammarData.$fReadManifest5
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarData.Manifest GrammarData.Animacy>_R))
                   @ b
                   eta1) -}
a35a6204bb938a9a46987036af31f684
  $fReadManifest5 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP
         (GrammarData.Manifest GrammarData.Animacy)
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ (GrammarData.Manifest GrammarData.Animacy)
                   GrammarData.$fReadManifest6
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarData.Manifest GrammarData.Animacy>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarData.Manifest GrammarData.Animacy>_R)))) -}
e5a459b59bbcf0bbfa7b020fedec245e
  $fReadManifest6 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Manifest GrammarData.Animacy
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)> -}
a828fe952562f6444ad9d9cfc94d7092
  $fReadManifest7 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarData.Manifest GrammarData.Case]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarData.Manifest GrammarData.Case]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ (GrammarData.Manifest GrammarData.Case)
                   GrammarData.$fReadManifest8
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarData.Manifest GrammarData.Case>_R))
                   @ b
                   eta1) -}
31b90cbdf99a08852976c7f496371e2a
  $fReadManifest8 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP
         (GrammarData.Manifest GrammarData.Case)
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ (GrammarData.Manifest GrammarData.Case)
                   GrammarData.$fReadManifest9
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarData.Manifest GrammarData.Case>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarData.Manifest GrammarData.Case>_R)))) -}
898f471056303fb7f2317ad8af8d1b77
  $fReadManifest9 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Manifest GrammarData.Case
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)> -}
e59e026f6f243dc64e3e0392a6b7fb92
  $fReadManifestSystem :: GHC.Read.Read GrammarData.ManifestSystem
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.ManifestSystem
                  GrammarData.$fReadManifestSystem_$creadsPrec
                  GrammarData.$fReadManifestSystem_$sreadListDefault
                  GrammarData.$fReadManifestSystem_$creadPrec
                  GrammarData.$fReadManifestSystem_$creadListPrec -}
e59e026f6f243dc64e3e0392a6b7fb92
  $fReadManifestSystem1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarData.ManifestSystem] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarData.ManifestSystem]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarData.ManifestSystem
                   GrammarData.$fReadManifestSystem2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarData.ManifestSystem>_R))
                   @ b
                   eta1) -}
e59e026f6f243dc64e3e0392a6b7fb92
  $fReadManifestSystem2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarData.ManifestSystem
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarData.ManifestSystem
                   GrammarData.$fReadManifestSystem3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarData.ManifestSystem>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarData.ManifestSystem>_R)))) -}
e59e026f6f243dc64e3e0392a6b7fb92
  $fReadManifestSystem3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.ManifestSystem -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: GrammarData.ManifestSystem
                         -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 -> GrammarData.$wa ww1 @ b w1 }) -}
e59e026f6f243dc64e3e0392a6b7fb92
  $fReadManifestSystem_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [GrammarData.ManifestSystem]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadManifestSystem1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarData.ManifestSystem]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarData.ManifestSystem]>_R))) -}
e59e026f6f243dc64e3e0392a6b7fb92
  $fReadManifestSystem_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.ManifestSystem
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadManifestSystem2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarData.ManifestSystem>_R)) -}
e59e026f6f243dc64e3e0392a6b7fb92
  $fReadManifestSystem_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarData.ManifestSystem
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadP.run
                   @ GrammarData.ManifestSystem
                   ((GHC.Read.$fReadDouble10
                       @ GrammarData.ManifestSystem
                       GrammarData.$fReadManifestSystem3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                           <GrammarData.ManifestSystem>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                      <GrammarData.ManifestSystem>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <GrammarData.ManifestSystem>_R)
                      @ GrammarData.ManifestSystem
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ GrammarData.ManifestSystem))) -}
e59e026f6f243dc64e3e0392a6b7fb92
  $fReadManifestSystem_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarData.ManifestSystem]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarData.ManifestSystem]
                   ((GrammarData.$fReadManifestSystem_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarData.ManifestSystem]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarData.ManifestSystem]>_R)
                      @ [GrammarData.ManifestSystem]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarData.ManifestSystem]))) -}
bf97cdc74f3aad6d32e164918e597133
  $fReadManifest_$creadList ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadP.ReadS [GrammarData.Manifest a]
  {- Arity: 1, Strictness: <L,U(A,A,U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a27 $dRead :: GHC.Read.Read a27 ->
                 Text.ParserCombinators.ReadP.run
                   @ [GrammarData.Manifest a27]
                   (GHC.Read.$wa
                      @ (GrammarData.Manifest a27)
                      (GrammarData.$fReadManifest23 @ a27 $dRead)
                        `cast`
                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                <GrammarData.Manifest a27>_R))
                      @ [GrammarData.Manifest a27]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarData.Manifest a27]))) -}
bf97cdc74f3aad6d32e164918e597133
  $fReadManifest_$creadListPrec ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadPrec.ReadPrec [GrammarData.Manifest a]
  {- Arity: 3, Strictness: <L,U(A,A,U,A)><L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadManifest22
                  `cast`
                (forall a27.
                 <GHC.Read.Read a27>_R
                 ->_R Trans
                          (<Text.ParserCombinators.ReadPrec.Prec>_R
                           ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                         <[GrammarData.Manifest a27]>_R))
                          (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                    <[GrammarData.Manifest a27]>_R))) -}
bf97cdc74f3aad6d32e164918e597133
  $fReadManifest_$creadPrec ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadPrec.ReadPrec (GrammarData.Manifest a)
  {- Arity: 2, Strictness: <L,U(A,A,U,A)><L,U>,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadManifest23
                  `cast`
                (forall a27.
                 <GHC.Read.Read a27>_R
                 ->_R Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <GrammarData.Manifest a27>_R)) -}
bf97cdc74f3aad6d32e164918e597133
  $fReadManifest_$creadsPrec ::
    GHC.Read.Read a =>
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS (GrammarData.Manifest a)
  {- Arity: 2, Strictness: <L,U(A,A,U,A)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a27 $dRead :: GHC.Read.Read a27 eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadP.run
                   @ (GrammarData.Manifest a27)
                   ((GrammarData.$fReadManifest23 @ a27 $dRead eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <GrammarData.Manifest a27>_R)
                      @ (GrammarData.Manifest a27)
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ (GrammarData.Manifest a27)))) -}
1ecbc5888257b8d369c86010908c908b
  $fReadManifest_$s$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [GrammarData.Manifest GrammarData.Gender]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadManifest1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarData.Manifest GrammarData.Gender]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarData.Manifest GrammarData.Gender]>_R))) -}
3f034874b256942663812550b841c62c
  $fReadManifest_$s$creadListPrec1 ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [GrammarData.Manifest GrammarData.Animacy]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadManifest4
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarData.Manifest GrammarData.Animacy]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarData.Manifest GrammarData.Animacy]>_R))) -}
90022c59ad8ae33d9ebe1931e5005a70
  $fReadManifest_$s$creadListPrec2 ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [GrammarData.Manifest GrammarData.Case]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadManifest7
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarData.Manifest GrammarData.Case]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarData.Manifest GrammarData.Case]>_R))) -}
e48fef3edf7ff8e20a24881782683f4e
  $fReadManifest_$s$creadListPrec3 ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [GrammarData.Manifest GrammarData.Number]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadManifest10
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarData.Manifest GrammarData.Number]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarData.Manifest GrammarData.Number]>_R))) -}
69f432354b3b28b52db0de8bd589e87b
  $fReadManifest_$s$creadListPrec4 ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [GrammarData.Manifest GrammarData.Honorific]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadManifest13
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarData.Manifest GrammarData.Honorific]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarData.Manifest GrammarData.Honorific]>_R))) -}
51ed0986fec5493422cc611534ac9824
  $fReadManifest_$s$creadListPrec5 ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [GrammarData.Manifest GrammarData.Definiteness]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadManifest16
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarData.Manifest GrammarData.Definiteness]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarData.Manifest GrammarData.Definiteness]>_R))) -}
e9de3af198cd0122e10e26635a4e73c2
  $fReadManifest_$s$creadListPrec6 ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [GrammarData.Manifest GrammarData.Specificity]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadManifest19
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarData.Manifest GrammarData.Specificity]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarData.Manifest GrammarData.Specificity]>_R))) -}
44ae7f63dabf9318d049029cf06ccee0
  $fReadManifest_$s$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      (GrammarData.Manifest GrammarData.Gender)
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadManifest2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarData.Manifest GrammarData.Gender>_R)) -}
e8c18836294a7e9ef88bcae5d7354588
  $fReadManifest_$s$creadPrec1 ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      (GrammarData.Manifest GrammarData.Animacy)
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadManifest5
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarData.Manifest GrammarData.Animacy>_R)) -}
a0c89b32661232e783b2ade3d0341bc8
  $fReadManifest_$s$creadPrec2 ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      (GrammarData.Manifest GrammarData.Case)
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadManifest8
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarData.Manifest GrammarData.Case>_R)) -}
dee00c3b9cab6a1836dd2776ebc1afd8
  $fReadManifest_$s$creadPrec3 ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      (GrammarData.Manifest GrammarData.Number)
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadManifest11
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarData.Manifest GrammarData.Number>_R)) -}
72db8a6503d287ec4e4419d4a3605922
  $fReadManifest_$s$creadPrec4 ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      (GrammarData.Manifest GrammarData.Honorific)
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadManifest14
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarData.Manifest GrammarData.Honorific>_R)) -}
f10dd0c65a7a7bb28f929ed16de3148e
  $fReadManifest_$s$creadPrec5 ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      (GrammarData.Manifest GrammarData.Definiteness)
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadManifest17
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarData.Manifest GrammarData.Definiteness>_R)) -}
275e6ff3e1fd9d6d7f3ee05f92b25092
  $fReadManifest_$s$creadPrec6 ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      (GrammarData.Manifest GrammarData.Specificity)
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadManifest20
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarData.Manifest GrammarData.Specificity>_R)) -}
e6ccfad396a03be4f2598d3a34a7e6c6
  $fReadManifest_$s$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS
         (GrammarData.Manifest GrammarData.Gender)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadP.run
                   @ (GrammarData.Manifest GrammarData.Gender)
                   ((GHC.Read.$fReadDouble10
                       @ (GrammarData.Manifest GrammarData.Gender)
                       GrammarData.$fReadManifest3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                           <GrammarData.Manifest GrammarData.Gender>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                      <GrammarData.Manifest GrammarData.Gender>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <GrammarData.Manifest GrammarData.Gender>_R)
                      @ (GrammarData.Manifest GrammarData.Gender)
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ (GrammarData.Manifest GrammarData.Gender)))) -}
f6f3ba4654664c140819683b31fe8dab
  $fReadManifest_$s$creadsPrec1 ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS
         (GrammarData.Manifest GrammarData.Animacy)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadP.run
                   @ (GrammarData.Manifest GrammarData.Animacy)
                   ((GHC.Read.$fReadDouble10
                       @ (GrammarData.Manifest GrammarData.Animacy)
                       GrammarData.$fReadManifest6
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                           <GrammarData.Manifest GrammarData.Animacy>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                      <GrammarData.Manifest GrammarData.Animacy>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <GrammarData.Manifest GrammarData.Animacy>_R)
                      @ (GrammarData.Manifest GrammarData.Animacy)
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ (GrammarData.Manifest GrammarData.Animacy)))) -}
d5d7e3d6f86397befc7c19457e032902
  $fReadManifest_$s$creadsPrec2 ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS
         (GrammarData.Manifest GrammarData.Case)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadP.run
                   @ (GrammarData.Manifest GrammarData.Case)
                   ((GHC.Read.$fReadDouble10
                       @ (GrammarData.Manifest GrammarData.Case)
                       GrammarData.$fReadManifest9
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                           <GrammarData.Manifest GrammarData.Case>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                      <GrammarData.Manifest GrammarData.Case>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <GrammarData.Manifest GrammarData.Case>_R)
                      @ (GrammarData.Manifest GrammarData.Case)
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ (GrammarData.Manifest GrammarData.Case)))) -}
edb7e7deb632c1eaa989c4d8e27d8945
  $fReadManifest_$s$creadsPrec3 ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS
         (GrammarData.Manifest GrammarData.Number)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadP.run
                   @ (GrammarData.Manifest GrammarData.Number)
                   ((GHC.Read.$fReadDouble10
                       @ (GrammarData.Manifest GrammarData.Number)
                       GrammarData.$fReadManifest12
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                           <GrammarData.Manifest GrammarData.Number>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                      <GrammarData.Manifest GrammarData.Number>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <GrammarData.Manifest GrammarData.Number>_R)
                      @ (GrammarData.Manifest GrammarData.Number)
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ (GrammarData.Manifest GrammarData.Number)))) -}
aa81a910fc575e4a238ec5341bfff6bb
  $fReadManifest_$s$creadsPrec4 ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS
         (GrammarData.Manifest GrammarData.Honorific)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadP.run
                   @ (GrammarData.Manifest GrammarData.Honorific)
                   ((GHC.Read.$fReadDouble10
                       @ (GrammarData.Manifest GrammarData.Honorific)
                       GrammarData.$fReadManifest15
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                           <GrammarData.Manifest GrammarData.Honorific>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                      <GrammarData.Manifest GrammarData.Honorific>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <GrammarData.Manifest GrammarData.Honorific>_R)
                      @ (GrammarData.Manifest GrammarData.Honorific)
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ (GrammarData.Manifest GrammarData.Honorific)))) -}
9a40ca6ff255a0f7602853e21cd2e3f9
  $fReadManifest_$s$creadsPrec5 ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS
         (GrammarData.Manifest GrammarData.Definiteness)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadP.run
                   @ (GrammarData.Manifest GrammarData.Definiteness)
                   ((GHC.Read.$fReadDouble10
                       @ (GrammarData.Manifest GrammarData.Definiteness)
                       GrammarData.$fReadManifest18
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                           <GrammarData.Manifest GrammarData.Definiteness>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                      <GrammarData.Manifest GrammarData.Definiteness>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <GrammarData.Manifest GrammarData.Definiteness>_R)
                      @ (GrammarData.Manifest GrammarData.Definiteness)
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ (GrammarData.Manifest GrammarData.Definiteness)))) -}
5ed286111e762b9f9cead7679755d17f
  $fReadManifest_$s$creadsPrec6 ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS
         (GrammarData.Manifest GrammarData.Specificity)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadP.run
                   @ (GrammarData.Manifest GrammarData.Specificity)
                   ((GHC.Read.$fReadDouble10
                       @ (GrammarData.Manifest GrammarData.Specificity)
                       GrammarData.$fReadManifest21
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                           <GrammarData.Manifest GrammarData.Specificity>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                      <GrammarData.Manifest GrammarData.Specificity>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <GrammarData.Manifest GrammarData.Specificity>_R)
                      @ (GrammarData.Manifest GrammarData.Specificity)
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ (GrammarData.Manifest GrammarData.Specificity)))) -}
438023f506b75c5d4d83c705fae64e5e
  $fReadManifest_$s$fReadManifest ::
    GHC.Read.Read (GrammarData.Manifest GrammarData.Gender)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GrammarData.Manifest GrammarData.Gender)
                  GrammarData.$fReadManifest_$s$creadsPrec
                  GrammarData.$fReadManifest_$sreadListDefault
                  GrammarData.$fReadManifest_$s$creadPrec
                  GrammarData.$fReadManifest_$s$creadListPrec -}
ec0dcc64e9a67da321ebcf7e957832f8
  $fReadManifest_$s$fReadManifest1 ::
    GHC.Read.Read (GrammarData.Manifest GrammarData.Animacy)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GrammarData.Manifest GrammarData.Animacy)
                  GrammarData.$fReadManifest_$s$creadsPrec1
                  GrammarData.$fReadManifest_$sreadListDefault1
                  GrammarData.$fReadManifest_$s$creadPrec1
                  GrammarData.$fReadManifest_$s$creadListPrec1 -}
21695c8259bd79be9ab6241a398639e0
  $fReadManifest_$s$fReadManifest2 ::
    GHC.Read.Read (GrammarData.Manifest GrammarData.Case)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GrammarData.Manifest GrammarData.Case)
                  GrammarData.$fReadManifest_$s$creadsPrec2
                  GrammarData.$fReadManifest_$sreadListDefault2
                  GrammarData.$fReadManifest_$s$creadPrec2
                  GrammarData.$fReadManifest_$s$creadListPrec2 -}
4d0e0221fd44b595cb8721141a583222
  $fReadManifest_$s$fReadManifest3 ::
    GHC.Read.Read (GrammarData.Manifest GrammarData.Number)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GrammarData.Manifest GrammarData.Number)
                  GrammarData.$fReadManifest_$s$creadsPrec3
                  GrammarData.$fReadManifest_$sreadListDefault3
                  GrammarData.$fReadManifest_$s$creadPrec3
                  GrammarData.$fReadManifest_$s$creadListPrec3 -}
e54b996ea3c5ed57dd88796626c5d278
  $fReadManifest_$s$fReadManifest4 ::
    GHC.Read.Read (GrammarData.Manifest GrammarData.Honorific)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GrammarData.Manifest GrammarData.Honorific)
                  GrammarData.$fReadManifest_$s$creadsPrec4
                  GrammarData.$fReadManifest_$sreadListDefault4
                  GrammarData.$fReadManifest_$s$creadPrec4
                  GrammarData.$fReadManifest_$s$creadListPrec4 -}
3dbe480df6b32e2a9fe31bf60976f8a4
  $fReadManifest_$s$fReadManifest5 ::
    GHC.Read.Read (GrammarData.Manifest GrammarData.Definiteness)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GrammarData.Manifest GrammarData.Definiteness)
                  GrammarData.$fReadManifest_$s$creadsPrec5
                  GrammarData.$fReadManifest_$sreadListDefault5
                  GrammarData.$fReadManifest_$s$creadPrec5
                  GrammarData.$fReadManifest_$s$creadListPrec5 -}
12ac7f9e7d202d76522786cab0343949
  $fReadManifest_$s$fReadManifest6 ::
    GHC.Read.Read (GrammarData.Manifest GrammarData.Specificity)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GrammarData.Manifest GrammarData.Specificity)
                  GrammarData.$fReadManifest_$s$creadsPrec6
                  GrammarData.$fReadManifest_$sreadListDefault6
                  GrammarData.$fReadManifest_$s$creadPrec6
                  GrammarData.$fReadManifest_$s$creadListPrec6 -}
37949949ca2bf5c1d49212e6882f7f3d
  $fReadManifest_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS
      [GrammarData.Manifest GrammarData.Gender]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarData.Manifest GrammarData.Gender]
                   ((GrammarData.$fReadManifest_$s$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarData.Manifest GrammarData.Gender]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarData.Manifest GrammarData.Gender]>_R)
                      @ [GrammarData.Manifest GrammarData.Gender]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarData.Manifest GrammarData.Gender]))) -}
767caaa18b85f9d5bcc97607c01992d5
  $fReadManifest_$sreadListDefault1 ::
    Text.ParserCombinators.ReadP.ReadS
      [GrammarData.Manifest GrammarData.Animacy]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarData.Manifest GrammarData.Animacy]
                   ((GrammarData.$fReadManifest_$s$creadListPrec1
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarData.Manifest GrammarData.Animacy]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarData.Manifest GrammarData.Animacy]>_R)
                      @ [GrammarData.Manifest GrammarData.Animacy]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarData.Manifest GrammarData.Animacy]))) -}
2bc1ba98478aa25a513a1094a201949b
  $fReadManifest_$sreadListDefault2 ::
    Text.ParserCombinators.ReadP.ReadS
      [GrammarData.Manifest GrammarData.Case]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarData.Manifest GrammarData.Case]
                   ((GrammarData.$fReadManifest_$s$creadListPrec2
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarData.Manifest GrammarData.Case]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarData.Manifest GrammarData.Case]>_R)
                      @ [GrammarData.Manifest GrammarData.Case]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarData.Manifest GrammarData.Case]))) -}
2ccf271dccb850882621b997a1213492
  $fReadManifest_$sreadListDefault3 ::
    Text.ParserCombinators.ReadP.ReadS
      [GrammarData.Manifest GrammarData.Number]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarData.Manifest GrammarData.Number]
                   ((GrammarData.$fReadManifest_$s$creadListPrec3
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarData.Manifest GrammarData.Number]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarData.Manifest GrammarData.Number]>_R)
                      @ [GrammarData.Manifest GrammarData.Number]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarData.Manifest GrammarData.Number]))) -}
c1a03aae71b7e0fa7540070f0848f196
  $fReadManifest_$sreadListDefault4 ::
    Text.ParserCombinators.ReadP.ReadS
      [GrammarData.Manifest GrammarData.Honorific]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarData.Manifest GrammarData.Honorific]
                   ((GrammarData.$fReadManifest_$s$creadListPrec4
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarData.Manifest GrammarData.Honorific]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarData.Manifest GrammarData.Honorific]>_R)
                      @ [GrammarData.Manifest GrammarData.Honorific]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarData.Manifest GrammarData.Honorific]))) -}
4648b94fe7ca8850d92acd216678da18
  $fReadManifest_$sreadListDefault5 ::
    Text.ParserCombinators.ReadP.ReadS
      [GrammarData.Manifest GrammarData.Definiteness]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarData.Manifest GrammarData.Definiteness]
                   ((GrammarData.$fReadManifest_$s$creadListPrec5
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarData.Manifest GrammarData.Definiteness]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarData.Manifest GrammarData.Definiteness]>_R)
                      @ [GrammarData.Manifest GrammarData.Definiteness]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarData.Manifest GrammarData.Definiteness]))) -}
23db455b81f436605a29512a33aaec68
  $fReadManifest_$sreadListDefault6 ::
    Text.ParserCombinators.ReadP.ReadS
      [GrammarData.Manifest GrammarData.Specificity]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarData.Manifest GrammarData.Specificity]
                   ((GrammarData.$fReadManifest_$s$creadListPrec6
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarData.Manifest GrammarData.Specificity]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarData.Manifest GrammarData.Specificity]>_R)
                      @ [GrammarData.Manifest GrammarData.Specificity]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarData.Manifest GrammarData.Specificity]))) -}
1f9e0042782b650d0d74a52671e595f1
  $fReadMood :: GHC.Read.Read GrammarData.Mood
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.Mood
                  GrammarData.$fReadMood_$s$dmreadsPrec
                  GrammarData.$fReadMood_$sreadListDefault
                  GrammarData.$fReadMood_$creadPrec
                  GrammarData.$fReadMood_$creadListPrec -}
1f9e0042782b650d0d74a52671e595f1
  $fReadMood1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarData.Mood] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarData.Mood] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarData.Mood
                   GrammarData.$fReadMood2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarData.Mood>_R))
                   @ b
                   eta1) -}
1f9e0042782b650d0d74a52671e595f1
  $fReadMood10 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Mood)
                   GrammarData.$fReadMood23
                   GrammarData.$fReadMood11) -}
1f9e0042782b650d0d74a52671e595f1
  $fReadMood11 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Mood)
                   GrammarData.$fReadMood20
                   GrammarData.$fReadMood12) -}
1f9e0042782b650d0d74a52671e595f1
  $fReadMood12 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Mood)
                   GrammarData.$fReadMood17
                   GrammarData.$fReadMood13) -}
1f9e0042782b650d0d74a52671e595f1
  $fReadMood13 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Mood)
                   GrammarData.$fReadMood14
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Mood))) -}
1f9e0042782b650d0d74a52671e595f1
  $fReadMood14 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Mood)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadMood16,
                  GrammarData.$fReadMood15
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.Mood>_R))))) -}
1f9e0042782b650d0d74a52671e595f1
  $fReadMood15 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.Mood -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.COND) -}
8e270cedd59489f5c79d4ba1bc345917
  $fReadMood16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "COND"#) -}
1f9e0042782b650d0d74a52671e595f1
  $fReadMood17 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Mood)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadMood19,
                  GrammarData.$fReadMood18
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.Mood>_R))))) -}
1f9e0042782b650d0d74a52671e595f1
  $fReadMood18 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.Mood -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.POT) -}
c7e2efd6e22bd0016d555dddf08a23d0
  $fReadMood19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "POT"#) -}
1f9e0042782b650d0d74a52671e595f1
  $fReadMood2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarData.Mood
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarData.Mood
                   GrammarData.$fReadMood3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarData.Mood>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarData.Mood>_R)))) -}
1f9e0042782b650d0d74a52671e595f1
  $fReadMood20 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Mood)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadMood22,
                  GrammarData.$fReadMood21
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.Mood>_R))))) -}
1f9e0042782b650d0d74a52671e595f1
  $fReadMood21 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.Mood -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.SBJV) -}
62a9a2fc3009690ed75a534969f05843
  $fReadMood22 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SBJV"#) -}
1f9e0042782b650d0d74a52671e595f1
  $fReadMood23 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Mood)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadMood25,
                  GrammarData.$fReadMood24
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.Mood>_R))))) -}
1f9e0042782b650d0d74a52671e595f1
  $fReadMood24 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.Mood -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.EPIS) -}
20d056c0200ac1bf90522ea5777ed3c6
  $fReadMood25 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "EPIS"#) -}
1f9e0042782b650d0d74a52671e595f1
  $fReadMood26 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Mood)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadMood28,
                  GrammarData.$fReadMood27
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.Mood>_R))))) -}
1f9e0042782b650d0d74a52671e595f1
  $fReadMood27 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.Mood -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.OPT) -}
a7f1a59fccb5fef22fc867f605843fba
  $fReadMood28 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OPT"#) -}
1f9e0042782b650d0d74a52671e595f1
  $fReadMood29 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Mood)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadMood31,
                  GrammarData.$fReadMood30
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.Mood>_R))))) -}
1f9e0042782b650d0d74a52671e595f1
  $fReadMood3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarData.Mood -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarData.Mood
                   GrammarData.$fReadMood4
                   eta
                   @ b
                   eta1) -}
1f9e0042782b650d0d74a52671e595f1
  $fReadMood30 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.Mood -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.JUS) -}
c70c2c1f544524f963f8ad3d54cabe19
  $fReadMood31 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "JUS"#) -}
1f9e0042782b650d0d74a52671e595f1
  $fReadMood32 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Mood)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadMood34,
                  GrammarData.$fReadMood33
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.Mood>_R))))) -}
1f9e0042782b650d0d74a52671e595f1
  $fReadMood33 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.Mood -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.IMP) -}
0d0cf78766b422b103d942a942231218
  $fReadMood34 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "IMP"#) -}
1f9e0042782b650d0d74a52671e595f1
  $fReadMood35 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Mood)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadMood37,
                  GrammarData.$fReadMood36
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.Mood>_R))))) -}
1f9e0042782b650d0d74a52671e595f1
  $fReadMood36 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.Mood -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.DEO) -}
9b27b12ee8a18a7e99f7f4fac2d9af2b
  $fReadMood37 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DEO"#) -}
1f9e0042782b650d0d74a52671e595f1
  $fReadMood38 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Mood)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadMood40,
                  GrammarData.$fReadMood39
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.Mood>_R))))) -}
1f9e0042782b650d0d74a52671e595f1
  $fReadMood39 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.Mood -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.IRR) -}
1f9e0042782b650d0d74a52671e595f1
  $fReadMood4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Mood)
                   GrammarData.$fReadMood41
                   GrammarData.$fReadMood5) -}
52491aaf475c3d681d21a1950b4557d9
  $fReadMood40 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "IRR"#) -}
1f9e0042782b650d0d74a52671e595f1
  $fReadMood41 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Mood)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadMood43,
                  GrammarData.$fReadMood42
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.Mood>_R))))) -}
1f9e0042782b650d0d74a52671e595f1
  $fReadMood42 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.Mood -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.IND) -}
baada629c5ee0f9898019232ca0fcb89
  $fReadMood43 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "IND"#) -}
1f9e0042782b650d0d74a52671e595f1
  $fReadMood5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Mood)
                   GrammarData.$fReadMood38
                   GrammarData.$fReadMood6) -}
1f9e0042782b650d0d74a52671e595f1
  $fReadMood6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Mood)
                   GrammarData.$fReadMood35
                   GrammarData.$fReadMood7) -}
1f9e0042782b650d0d74a52671e595f1
  $fReadMood7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Mood)
                   GrammarData.$fReadMood32
                   GrammarData.$fReadMood8) -}
1f9e0042782b650d0d74a52671e595f1
  $fReadMood8 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Mood)
                   GrammarData.$fReadMood29
                   GrammarData.$fReadMood9) -}
1f9e0042782b650d0d74a52671e595f1
  $fReadMood9 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Mood)
                   GrammarData.$fReadMood26
                   GrammarData.$fReadMood10) -}
1f9e0042782b650d0d74a52671e595f1
  $fReadMood_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [GrammarData.Mood]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadMood1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarData.Mood]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarData.Mood]>_R))) -}
1f9e0042782b650d0d74a52671e595f1
  $fReadMood_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Mood
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadMood2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarData.Mood>_R)) -}
1f9e0042782b650d0d74a52671e595f1
  $fReadMood_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarData.Mood
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarData.Mood
                   GrammarData.$fReadMood_$creadPrec
                   eta) -}
1f9e0042782b650d0d74a52671e595f1
  $fReadMood_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarData.Mood]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarData.Mood]
                   ((GrammarData.$fReadMood_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarData.Mood]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <[GrammarData.Mood]>_R)
                      @ [GrammarData.Mood]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarData.Mood]))) -}
8ed84510caef32c77eef1e60822eb3ba
  $fReadNumber :: GHC.Read.Read GrammarData.Number
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.Number
                  GrammarData.$fReadNumber_$s$dmreadsPrec
                  GrammarData.$fReadNumber_$sreadListDefault
                  GrammarData.$fReadNumber_$creadPrec
                  GrammarData.$fReadNumber_$creadListPrec -}
8ed84510caef32c77eef1e60822eb3ba
  $fReadNumber1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarData.Number] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarData.Number] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarData.Number
                   GrammarData.$fReadNumber2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarData.Number>_R))
                   @ b
                   eta1) -}
8ed84510caef32c77eef1e60822eb3ba
  $fReadNumber10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Number -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.Number -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.PL) -}
62ea078755ab1ad66a93f0bf2c23d1bc
  $fReadNumber11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PL"#) -}
8ed84510caef32c77eef1e60822eb3ba
  $fReadNumber12 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Number)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadNumber14,
                  GrammarData.$fReadNumber13
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.Number>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.Number>_R))))) -}
8ed84510caef32c77eef1e60822eb3ba
  $fReadNumber13 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Number -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.Number -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.PA) -}
4a07d611f15c23f2d9b610775881bd34
  $fReadNumber14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PA"#) -}
8ed84510caef32c77eef1e60822eb3ba
  $fReadNumber15 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Number)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadNumber17,
                  GrammarData.$fReadNumber16
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.Number>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.Number>_R))))) -}
8ed84510caef32c77eef1e60822eb3ba
  $fReadNumber16 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Number -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.Number -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.TRI) -}
27debc546614399e5b3f9b546a7297bd
  $fReadNumber17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TRI"#) -}
8ed84510caef32c77eef1e60822eb3ba
  $fReadNumber18 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Number)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadNumber20,
                  GrammarData.$fReadNumber19
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.Number>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.Number>_R))))) -}
8ed84510caef32c77eef1e60822eb3ba
  $fReadNumber19 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Number -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.Number -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.DU) -}
8ed84510caef32c77eef1e60822eb3ba
  $fReadNumber2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarData.Number
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarData.Number
                   GrammarData.$fReadNumber3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarData.Number>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarData.Number>_R)))) -}
e71216c8e56f75f1183e0992b12893bd
  $fReadNumber20 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DU"#) -}
8ed84510caef32c77eef1e60822eb3ba
  $fReadNumber21 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Number)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadNumber23,
                  GrammarData.$fReadNumber22
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.Number>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.Number>_R))))) -}
8ed84510caef32c77eef1e60822eb3ba
  $fReadNumber22 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Number -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.Number -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.SG) -}
c51de8b9e0cc1649104687c471991b29
  $fReadNumber23 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SG"#) -}
8ed84510caef32c77eef1e60822eb3ba
  $fReadNumber3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Number -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarData.Number -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarData.Number
                   GrammarData.$fReadNumber4
                   eta
                   @ b
                   eta1) -}
8ed84510caef32c77eef1e60822eb3ba
  $fReadNumber4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Number)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Number)
                   GrammarData.$fReadNumber21
                   GrammarData.$fReadNumber5) -}
8ed84510caef32c77eef1e60822eb3ba
  $fReadNumber5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Number)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Number)
                   GrammarData.$fReadNumber18
                   GrammarData.$fReadNumber6) -}
8ed84510caef32c77eef1e60822eb3ba
  $fReadNumber6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Number)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Number)
                   GrammarData.$fReadNumber15
                   GrammarData.$fReadNumber7) -}
8ed84510caef32c77eef1e60822eb3ba
  $fReadNumber7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Number)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Number)
                   GrammarData.$fReadNumber12
                   GrammarData.$fReadNumber8) -}
8ed84510caef32c77eef1e60822eb3ba
  $fReadNumber8 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Number)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Number)
                   GrammarData.$fReadNumber9
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Number))) -}
8ed84510caef32c77eef1e60822eb3ba
  $fReadNumber9 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Number)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadNumber11,
                  GrammarData.$fReadNumber10
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.Number>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.Number>_R))))) -}
8ed84510caef32c77eef1e60822eb3ba
  $fReadNumber_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [GrammarData.Number]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadNumber1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarData.Number]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarData.Number]>_R))) -}
8ed84510caef32c77eef1e60822eb3ba
  $fReadNumber_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Number
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadNumber2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarData.Number>_R)) -}
8ed84510caef32c77eef1e60822eb3ba
  $fReadNumber_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarData.Number
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarData.Number
                   GrammarData.$fReadNumber_$creadPrec
                   eta) -}
8ed84510caef32c77eef1e60822eb3ba
  $fReadNumber_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarData.Number]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarData.Number]
                   ((GrammarData.$fReadNumber_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarData.Number]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarData.Number]>_R)
                      @ [GrammarData.Number]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarData.Number]))) -}
3b7d81f4c94437e6844a3064e4af630e
  $fReadPerson :: GHC.Read.Read GrammarData.Person
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.Person
                  GrammarData.$fReadPerson_$s$dmreadsPrec
                  GrammarData.$fReadPerson_$sreadListDefault
                  GrammarData.$fReadPerson_$creadPrec
                  GrammarData.$fReadPerson_$creadListPrec -}
3b7d81f4c94437e6844a3064e4af630e
  $fReadPerson1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarData.Person] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarData.Person] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarData.Person
                   GrammarData.$fReadPerson2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarData.Person>_R))
                   @ b
                   eta1) -}
3b7d81f4c94437e6844a3064e4af630e
  $fReadPerson10 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Person)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadPerson12,
                  GrammarData.$fReadPerson11
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.Person>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.Person>_R))))) -}
3b7d81f4c94437e6844a3064e4af630e
  $fReadPerson11 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Person -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.Person -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.SECOND) -}
1ef2071b31e9712c11e792dbea15f54a
  $fReadPerson12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SECOND"#) -}
3b7d81f4c94437e6844a3064e4af630e
  $fReadPerson13 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Person)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadPerson15,
                  GrammarData.$fReadPerson14
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.Person>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.Person>_R))))) -}
3b7d81f4c94437e6844a3064e4af630e
  $fReadPerson14 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Person -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.Person -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.FIRST) -}
3aab453bd402096eaff2da8cd280e292
  $fReadPerson15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FIRST"#) -}
3b7d81f4c94437e6844a3064e4af630e
  $fReadPerson2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarData.Person
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarData.Person
                   GrammarData.$fReadPerson3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarData.Person>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarData.Person>_R)))) -}
3b7d81f4c94437e6844a3064e4af630e
  $fReadPerson3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Person -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarData.Person -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarData.Person
                   GrammarData.$fReadPerson4
                   eta
                   @ b
                   eta1) -}
3b7d81f4c94437e6844a3064e4af630e
  $fReadPerson4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Person)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Person)
                   GrammarData.$fReadPerson13
                   GrammarData.$fReadPerson5) -}
3b7d81f4c94437e6844a3064e4af630e
  $fReadPerson5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Person)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Person)
                   GrammarData.$fReadPerson10
                   GrammarData.$fReadPerson6) -}
3b7d81f4c94437e6844a3064e4af630e
  $fReadPerson6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Person)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Person)
                   GrammarData.$fReadPerson7
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Person))) -}
3b7d81f4c94437e6844a3064e4af630e
  $fReadPerson7 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Person)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadPerson9,
                  GrammarData.$fReadPerson8
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.Person>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.Person>_R))))) -}
3b7d81f4c94437e6844a3064e4af630e
  $fReadPerson8 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Person -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.Person -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.THIRD) -}
564c27dd3c8f85899d3f6268b9783a2e
  $fReadPerson9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "THIRD"#) -}
3b7d81f4c94437e6844a3064e4af630e
  $fReadPerson_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [GrammarData.Person]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadPerson1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarData.Person]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarData.Person]>_R))) -}
3b7d81f4c94437e6844a3064e4af630e
  $fReadPerson_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Person
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadPerson2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarData.Person>_R)) -}
3b7d81f4c94437e6844a3064e4af630e
  $fReadPerson_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarData.Person
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarData.Person
                   GrammarData.$fReadPerson_$creadPrec
                   eta) -}
3b7d81f4c94437e6844a3064e4af630e
  $fReadPerson_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarData.Person]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarData.Person]
                   ((GrammarData.$fReadPerson_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarData.Person]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarData.Person]>_R)
                      @ [GrammarData.Person]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarData.Person]))) -}
fd1897a0d2b932b38e0c47ea3af5837d
  $fReadPolarity :: GHC.Read.Read GrammarData.Polarity
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.Polarity
                  GrammarData.$fReadPolarity_$s$dmreadsPrec
                  GrammarData.$fReadPolarity_$sreadListDefault
                  GrammarData.$fReadPolarity_$creadPrec
                  GrammarData.$fReadPolarity_$creadListPrec -}
fd1897a0d2b932b38e0c47ea3af5837d
  $fReadPolarity1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarData.Polarity] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarData.Polarity]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarData.Polarity
                   GrammarData.$fReadPolarity2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarData.Polarity>_R))
                   @ b
                   eta1) -}
fd1897a0d2b932b38e0c47ea3af5837d
  $fReadPolarity10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Polarity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.Polarity -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.AFF) -}
ce9eab1cb8518e16420d0474351cd303
  $fReadPolarity11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AFF"#) -}
fd1897a0d2b932b38e0c47ea3af5837d
  $fReadPolarity2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarData.Polarity
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarData.Polarity
                   GrammarData.$fReadPolarity3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarData.Polarity>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarData.Polarity>_R)))) -}
fd1897a0d2b932b38e0c47ea3af5837d
  $fReadPolarity3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Polarity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarData.Polarity -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarData.Polarity
                   GrammarData.$fReadPolarity4
                   eta
                   @ b
                   eta1) -}
fd1897a0d2b932b38e0c47ea3af5837d
  $fReadPolarity4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Polarity)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Polarity)
                   GrammarData.$fReadPolarity9
                   GrammarData.$fReadPolarity5) -}
fd1897a0d2b932b38e0c47ea3af5837d
  $fReadPolarity5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Polarity)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Polarity)
                   GrammarData.$fReadPolarity6
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Polarity))) -}
fd1897a0d2b932b38e0c47ea3af5837d
  $fReadPolarity6 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Polarity)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadPolarity8,
                  GrammarData.$fReadPolarity7
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.Polarity>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.Polarity>_R))))) -}
fd1897a0d2b932b38e0c47ea3af5837d
  $fReadPolarity7 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Polarity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.Polarity -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.NEG) -}
061b2869ae60b04348efaed6daa710c7
  $fReadPolarity8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NEG"#) -}
fd1897a0d2b932b38e0c47ea3af5837d
  $fReadPolarity9 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Polarity)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadPolarity11,
                  GrammarData.$fReadPolarity10
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.Polarity>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.Polarity>_R))))) -}
fd1897a0d2b932b38e0c47ea3af5837d
  $fReadPolarity_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [GrammarData.Polarity]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadPolarity1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarData.Polarity]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarData.Polarity]>_R))) -}
fd1897a0d2b932b38e0c47ea3af5837d
  $fReadPolarity_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Polarity
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadPolarity2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarData.Polarity>_R)) -}
fd1897a0d2b932b38e0c47ea3af5837d
  $fReadPolarity_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarData.Polarity
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarData.Polarity
                   GrammarData.$fReadPolarity_$creadPrec
                   eta) -}
fd1897a0d2b932b38e0c47ea3af5837d
  $fReadPolarity_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarData.Polarity]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarData.Polarity]
                   ((GrammarData.$fReadPolarity_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarData.Polarity]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarData.Polarity]>_R)
                      @ [GrammarData.Polarity]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarData.Polarity]))) -}
f663e7ff07f2909cb51f85e829fe40a9
  $fReadSpecificity :: GHC.Read.Read GrammarData.Specificity
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.Specificity
                  GrammarData.$fReadSpecificity_$s$dmreadsPrec
                  GrammarData.$fReadSpecificity_$sreadListDefault
                  GrammarData.$fReadSpecificity_$creadPrec
                  GrammarData.$fReadSpecificity_$creadListPrec -}
f663e7ff07f2909cb51f85e829fe40a9
  $fReadSpecificity1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarData.Specificity] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarData.Specificity]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarData.Specificity
                   GrammarData.$fReadSpecificity2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarData.Specificity>_R))
                   @ b
                   eta1) -}
f663e7ff07f2909cb51f85e829fe40a9
  $fReadSpecificity10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Specificity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.Specificity
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.SPEC) -}
58f39f48d85070b2dddb1c75d55b11ae
  $fReadSpecificity11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SPEC"#) -}
f663e7ff07f2909cb51f85e829fe40a9
  $fReadSpecificity2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarData.Specificity
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarData.Specificity
                   GrammarData.$fReadSpecificity3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarData.Specificity>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarData.Specificity>_R)))) -}
f663e7ff07f2909cb51f85e829fe40a9
  $fReadSpecificity3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Specificity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarData.Specificity
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarData.Specificity
                   GrammarData.$fReadSpecificity4
                   eta
                   @ b
                   eta1) -}
f663e7ff07f2909cb51f85e829fe40a9
  $fReadSpecificity4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Specificity)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Specificity)
                   GrammarData.$fReadSpecificity9
                   GrammarData.$fReadSpecificity5) -}
f663e7ff07f2909cb51f85e829fe40a9
  $fReadSpecificity5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Specificity)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Specificity)
                   GrammarData.$fReadSpecificity6
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           GrammarData.Specificity))) -}
f663e7ff07f2909cb51f85e829fe40a9
  $fReadSpecificity6 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Specificity)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadSpecificity8,
                  GrammarData.$fReadSpecificity7
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.Specificity>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.Specificity>_R))))) -}
f663e7ff07f2909cb51f85e829fe40a9
  $fReadSpecificity7 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Specificity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.Specificity
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.NSPEC) -}
92bdfd53d4b15e3a2812c2b25ebf5a9c
  $fReadSpecificity8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NSPEC"#) -}
f663e7ff07f2909cb51f85e829fe40a9
  $fReadSpecificity9 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Specificity)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadSpecificity11,
                  GrammarData.$fReadSpecificity10
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.Specificity>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.Specificity>_R))))) -}
f663e7ff07f2909cb51f85e829fe40a9
  $fReadSpecificity_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [GrammarData.Specificity]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadSpecificity1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarData.Specificity]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarData.Specificity]>_R))) -}
f663e7ff07f2909cb51f85e829fe40a9
  $fReadSpecificity_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Specificity
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadSpecificity2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarData.Specificity>_R)) -}
f663e7ff07f2909cb51f85e829fe40a9
  $fReadSpecificity_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarData.Specificity
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarData.Specificity
                   GrammarData.$fReadSpecificity_$creadPrec
                   eta) -}
f663e7ff07f2909cb51f85e829fe40a9
  $fReadSpecificity_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarData.Specificity]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarData.Specificity]
                   ((GrammarData.$fReadSpecificity_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarData.Specificity]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarData.Specificity]>_R)
                      @ [GrammarData.Specificity]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarData.Specificity]))) -}
635ace3f32ba47f6e643bb471451b3ec
  $fReadTense :: GHC.Read.Read GrammarData.Tense
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.Tense
                  GrammarData.$fReadTense_$s$dmreadsPrec
                  GrammarData.$fReadTense_$sreadListDefault
                  GrammarData.$fReadTense_$creadPrec
                  GrammarData.$fReadTense_$creadListPrec -}
635ace3f32ba47f6e643bb471451b3ec
  $fReadTense1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarData.Tense] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarData.Tense] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarData.Tense
                   GrammarData.$fReadTense2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarData.Tense>_R))
                   @ b
                   eta1) -}
635ace3f32ba47f6e643bb471451b3ec
  $fReadTense10 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Tense)
                   GrammarData.$fReadTense19
                   GrammarData.$fReadTense11) -}
635ace3f32ba47f6e643bb471451b3ec
  $fReadTense11 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Tense)
                   GrammarData.$fReadTense16
                   GrammarData.$fReadTense12) -}
635ace3f32ba47f6e643bb471451b3ec
  $fReadTense12 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Tense)
                   GrammarData.$fReadTense13
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Tense))) -}
635ace3f32ba47f6e643bb471451b3ec
  $fReadTense13 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Tense)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadTense15,
                  GrammarData.$fReadTense14
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.Tense>_R))))) -}
635ace3f32ba47f6e643bb471451b3ec
  $fReadTense14 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.REMF) -}
31a7b6907a41d5a68ed4a218beb899a6
  $fReadTense15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "REMF"#) -}
635ace3f32ba47f6e643bb471451b3ec
  $fReadTense16 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Tense)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadTense18,
                  GrammarData.$fReadTense17
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.Tense>_R))))) -}
635ace3f32ba47f6e643bb471451b3ec
  $fReadTense17 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.IMMF) -}
1fbf280d5d29846b448003f1ef541e0f
  $fReadTense18 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "IMMF"#) -}
635ace3f32ba47f6e643bb471451b3ec
  $fReadTense19 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Tense)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadTense21,
                  GrammarData.$fReadTense20
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.Tense>_R))))) -}
635ace3f32ba47f6e643bb471451b3ec
  $fReadTense2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarData.Tense
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarData.Tense
                   GrammarData.$fReadTense3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarData.Tense>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarData.Tense>_R)))) -}
635ace3f32ba47f6e643bb471451b3ec
  $fReadTense20 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.FUT) -}
53347aec61540b1a63f93952d53c2275
  $fReadTense21 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FUT"#) -}
635ace3f32ba47f6e643bb471451b3ec
  $fReadTense22 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Tense)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadTense24,
                  GrammarData.$fReadTense23
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.Tense>_R))))) -}
635ace3f32ba47f6e643bb471451b3ec
  $fReadTense23 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.NFUT) -}
49f03a9a651be969fa7ce1aca006107c
  $fReadTense24 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NFUT"#) -}
635ace3f32ba47f6e643bb471451b3ec
  $fReadTense25 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Tense)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadTense27,
                  GrammarData.$fReadTense26
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.Tense>_R))))) -}
635ace3f32ba47f6e643bb471451b3ec
  $fReadTense26 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.PRS) -}
ce58e5c0996f757b03a29341e2d190ad
  $fReadTense27 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PRS"#) -}
635ace3f32ba47f6e643bb471451b3ec
  $fReadTense28 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Tense)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadTense30,
                  GrammarData.$fReadTense29
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.Tense>_R))))) -}
635ace3f32ba47f6e643bb471451b3ec
  $fReadTense29 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.NPST) -}
635ace3f32ba47f6e643bb471451b3ec
  $fReadTense3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarData.Tense
                   GrammarData.$fReadTense4
                   eta
                   @ b
                   eta1) -}
4c58db4783fad6762a16367ac014607d
  $fReadTense30 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NPST"#) -}
635ace3f32ba47f6e643bb471451b3ec
  $fReadTense31 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Tense)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadTense33,
                  GrammarData.$fReadTense32
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.Tense>_R))))) -}
635ace3f32ba47f6e643bb471451b3ec
  $fReadTense32 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.REC) -}
77ca370c252c5a0caa2e4e6113287c70
  $fReadTense33 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "REC"#) -}
635ace3f32ba47f6e643bb471451b3ec
  $fReadTense34 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Tense)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadTense36,
                  GrammarData.$fReadTense35
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.Tense>_R))))) -}
635ace3f32ba47f6e643bb471451b3ec
  $fReadTense35 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.REM) -}
1f493e18c21726e39347bc9de839f606
  $fReadTense36 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "REM"#) -}
635ace3f32ba47f6e643bb471451b3ec
  $fReadTense37 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Tense)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadTense39,
                  GrammarData.$fReadTense38
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.Tense>_R))))) -}
635ace3f32ba47f6e643bb471451b3ec
  $fReadTense38 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.PST) -}
0a42fcee0e63b94682ca90bbe17ee49a
  $fReadTense39 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PST"#) -}
635ace3f32ba47f6e643bb471451b3ec
  $fReadTense4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Tense)
                   GrammarData.$fReadTense37
                   GrammarData.$fReadTense5) -}
635ace3f32ba47f6e643bb471451b3ec
  $fReadTense5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Tense)
                   GrammarData.$fReadTense34
                   GrammarData.$fReadTense6) -}
635ace3f32ba47f6e643bb471451b3ec
  $fReadTense6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Tense)
                   GrammarData.$fReadTense31
                   GrammarData.$fReadTense7) -}
635ace3f32ba47f6e643bb471451b3ec
  $fReadTense7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Tense)
                   GrammarData.$fReadTense28
                   GrammarData.$fReadTense8) -}
635ace3f32ba47f6e643bb471451b3ec
  $fReadTense8 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Tense)
                   GrammarData.$fReadTense25
                   GrammarData.$fReadTense9) -}
635ace3f32ba47f6e643bb471451b3ec
  $fReadTense9 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Tense)
                   GrammarData.$fReadTense22
                   GrammarData.$fReadTense10) -}
635ace3f32ba47f6e643bb471451b3ec
  $fReadTense_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [GrammarData.Tense]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadTense1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarData.Tense]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarData.Tense]>_R))) -}
635ace3f32ba47f6e643bb471451b3ec
  $fReadTense_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Tense
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadTense2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarData.Tense>_R)) -}
635ace3f32ba47f6e643bb471451b3ec
  $fReadTense_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarData.Tense
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarData.Tense
                   GrammarData.$fReadTense_$creadPrec
                   eta) -}
635ace3f32ba47f6e643bb471451b3ec
  $fReadTense_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarData.Tense]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarData.Tense]
                   ((GrammarData.$fReadTense_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarData.Tense]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarData.Tense]>_R)
                      @ [GrammarData.Tense]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarData.Tense]))) -}
ce1309e748ae1ead2a5127b0f086bbd0
  $fReadTransitivity :: GHC.Read.Read GrammarData.Transitivity
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.Transitivity
                  GrammarData.$fReadTransitivity_$s$dmreadsPrec
                  GrammarData.$fReadTransitivity_$sreadListDefault
                  GrammarData.$fReadTransitivity_$creadPrec
                  GrammarData.$fReadTransitivity_$creadListPrec -}
ce1309e748ae1ead2a5127b0f086bbd0
  $fReadTransitivity1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarData.Transitivity] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarData.Transitivity]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarData.Transitivity
                   GrammarData.$fReadTransitivity2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarData.Transitivity>_R))
                   @ b
                   eta1) -}
ce1309e748ae1ead2a5127b0f086bbd0
  $fReadTransitivity10 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Transitivity)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadTransitivity12,
                  GrammarData.$fReadTransitivity11
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.Transitivity>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.Transitivity>_R))))) -}
ce1309e748ae1ead2a5127b0f086bbd0
  $fReadTransitivity11 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Transitivity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.Transitivity
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.TR) -}
1499d9ecdc982a229cb7f0e87a8d618e
  $fReadTransitivity12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TR"#) -}
ce1309e748ae1ead2a5127b0f086bbd0
  $fReadTransitivity13 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Transitivity)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadTransitivity15,
                  GrammarData.$fReadTransitivity14
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.Transitivity>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.Transitivity>_R))))) -}
ce1309e748ae1ead2a5127b0f086bbd0
  $fReadTransitivity14 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Transitivity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.Transitivity
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.INTR) -}
4d85455b67a7dee99a8f697b670ba12a
  $fReadTransitivity15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "INTR"#) -}
ce1309e748ae1ead2a5127b0f086bbd0
  $fReadTransitivity2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarData.Transitivity
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarData.Transitivity
                   GrammarData.$fReadTransitivity3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarData.Transitivity>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarData.Transitivity>_R)))) -}
ce1309e748ae1ead2a5127b0f086bbd0
  $fReadTransitivity3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Transitivity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarData.Transitivity
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarData.Transitivity
                   GrammarData.$fReadTransitivity4
                   eta
                   @ b
                   eta1) -}
ce1309e748ae1ead2a5127b0f086bbd0
  $fReadTransitivity4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Transitivity)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Transitivity)
                   GrammarData.$fReadTransitivity13
                   GrammarData.$fReadTransitivity5) -}
ce1309e748ae1ead2a5127b0f086bbd0
  $fReadTransitivity5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Transitivity)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Transitivity)
                   GrammarData.$fReadTransitivity10
                   GrammarData.$fReadTransitivity6) -}
ce1309e748ae1ead2a5127b0f086bbd0
  $fReadTransitivity6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Transitivity)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Transitivity)
                   GrammarData.$fReadTransitivity7
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           GrammarData.Transitivity))) -}
ce1309e748ae1ead2a5127b0f086bbd0
  $fReadTransitivity7 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Transitivity)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadTransitivity9,
                  GrammarData.$fReadTransitivity8
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.Transitivity>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.Transitivity>_R))))) -}
ce1309e748ae1ead2a5127b0f086bbd0
  $fReadTransitivity8 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Transitivity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.Transitivity
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.DITR) -}
11d646819a4360b3a542b7576979a676
  $fReadTransitivity9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DITR"#) -}
ce1309e748ae1ead2a5127b0f086bbd0
  $fReadTransitivity_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [GrammarData.Transitivity]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadTransitivity1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarData.Transitivity]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarData.Transitivity]>_R))) -}
ce1309e748ae1ead2a5127b0f086bbd0
  $fReadTransitivity_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Transitivity
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadTransitivity2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarData.Transitivity>_R)) -}
ce1309e748ae1ead2a5127b0f086bbd0
  $fReadTransitivity_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarData.Transitivity
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarData.Transitivity
                   GrammarData.$fReadTransitivity_$creadPrec
                   eta) -}
ce1309e748ae1ead2a5127b0f086bbd0
  $fReadTransitivity_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarData.Transitivity]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarData.Transitivity]
                   ((GrammarData.$fReadTransitivity_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarData.Transitivity]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarData.Transitivity]>_R)
                      @ [GrammarData.Transitivity]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarData.Transitivity]))) -}
b7c0182e94b370d685bfdc0c00290938
  $fReadVoice :: GHC.Read.Read GrammarData.Voice
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.Voice
                  GrammarData.$fReadVoice_$s$dmreadsPrec
                  GrammarData.$fReadVoice_$sreadListDefault
                  GrammarData.$fReadVoice_$creadPrec
                  GrammarData.$fReadVoice_$creadListPrec -}
b7c0182e94b370d685bfdc0c00290938
  $fReadVoice1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarData.Voice] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarData.Voice] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarData.Voice
                   GrammarData.$fReadVoice2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarData.Voice>_R))
                   @ b
                   eta1) -}
b7c0182e94b370d685bfdc0c00290938
  $fReadVoice10 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Voice)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadVoice12,
                  GrammarData.$fReadVoice11
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.Voice>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.Voice>_R))))) -}
b7c0182e94b370d685bfdc0c00290938
  $fReadVoice11 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Voice -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.Voice -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.MID) -}
d413508f9b3326b2cb93b3efd084fcb5
  $fReadVoice12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "MID"#) -}
b7c0182e94b370d685bfdc0c00290938
  $fReadVoice13 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Voice)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadVoice15,
                  GrammarData.$fReadVoice14
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.Voice>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.Voice>_R))))) -}
b7c0182e94b370d685bfdc0c00290938
  $fReadVoice14 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Voice -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.Voice -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.ACT) -}
888d613912fceb1aaae5ca84391890f1
  $fReadVoice15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ACT"#) -}
b7c0182e94b370d685bfdc0c00290938
  $fReadVoice2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarData.Voice
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarData.Voice
                   GrammarData.$fReadVoice3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarData.Voice>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarData.Voice>_R)))) -}
b7c0182e94b370d685bfdc0c00290938
  $fReadVoice3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Voice -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarData.Voice -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarData.Voice
                   GrammarData.$fReadVoice4
                   eta
                   @ b
                   eta1) -}
b7c0182e94b370d685bfdc0c00290938
  $fReadVoice4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Voice)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Voice)
                   GrammarData.$fReadVoice13
                   GrammarData.$fReadVoice5) -}
b7c0182e94b370d685bfdc0c00290938
  $fReadVoice5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Voice)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Voice)
                   GrammarData.$fReadVoice10
                   GrammarData.$fReadVoice6) -}
b7c0182e94b370d685bfdc0c00290938
  $fReadVoice6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Voice)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Voice)
                   GrammarData.$fReadVoice7
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Voice))) -}
b7c0182e94b370d685bfdc0c00290938
  $fReadVoice7 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Voice)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadVoice9,
                  GrammarData.$fReadVoice8
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.Voice>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.Voice>_R))))) -}
b7c0182e94b370d685bfdc0c00290938
  $fReadVoice8 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Voice -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.Voice -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.PAS) -}
b85e837122375423f0ad41c5e669dc8f
  $fReadVoice9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PAS"#) -}
b7c0182e94b370d685bfdc0c00290938
  $fReadVoice_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [GrammarData.Voice]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadVoice1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarData.Voice]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarData.Voice]>_R))) -}
b7c0182e94b370d685bfdc0c00290938
  $fReadVoice_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Voice
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadVoice2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarData.Voice>_R)) -}
b7c0182e94b370d685bfdc0c00290938
  $fReadVoice_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarData.Voice
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarData.Voice
                   GrammarData.$fReadVoice_$creadPrec
                   eta) -}
b7c0182e94b370d685bfdc0c00290938
  $fReadVoice_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarData.Voice]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarData.Voice]
                   ((GrammarData.$fReadVoice_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarData.Voice]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarData.Voice]>_R)
                      @ [GrammarData.Voice]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarData.Voice]))) -}
70ef043381ff12719553fe55296234a2
  $fReadVolition :: GHC.Read.Read GrammarData.Volition
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.Volition
                  GrammarData.$fReadVolition_$s$dmreadsPrec
                  GrammarData.$fReadVolition_$sreadListDefault
                  GrammarData.$fReadVolition_$creadPrec
                  GrammarData.$fReadVolition_$creadListPrec -}
70ef043381ff12719553fe55296234a2
  $fReadVolition1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarData.Volition] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarData.Volition]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarData.Volition
                   GrammarData.$fReadVolition2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarData.Volition>_R))
                   @ b
                   eta1) -}
70ef043381ff12719553fe55296234a2
  $fReadVolition10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Volition -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.Volition -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.VOL) -}
06e2191022e6c7d5ae6b618fa7047597
  $fReadVolition11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "VOL"#) -}
70ef043381ff12719553fe55296234a2
  $fReadVolition2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarData.Volition
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarData.Volition
                   GrammarData.$fReadVolition3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarData.Volition>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarData.Volition>_R)))) -}
70ef043381ff12719553fe55296234a2
  $fReadVolition3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Volition -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarData.Volition -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarData.Volition
                   GrammarData.$fReadVolition4
                   eta
                   @ b
                   eta1) -}
70ef043381ff12719553fe55296234a2
  $fReadVolition4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Volition)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Volition)
                   GrammarData.$fReadVolition9
                   GrammarData.$fReadVolition5) -}
70ef043381ff12719553fe55296234a2
  $fReadVolition5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Volition)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Volition)
                   GrammarData.$fReadVolition6
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Volition))) -}
70ef043381ff12719553fe55296234a2
  $fReadVolition6 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Volition)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadVolition8,
                  GrammarData.$fReadVolition7
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.Volition>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.Volition>_R))))) -}
70ef043381ff12719553fe55296234a2
  $fReadVolition7 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.Volition -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.Volition -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.NVOL) -}
b12eb6bef7f3080e53bd9e5232a1f496
  $fReadVolition8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NVOL"#) -}
70ef043381ff12719553fe55296234a2
  $fReadVolition9 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Volition)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadVolition11,
                  GrammarData.$fReadVolition10
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.Volition>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.Volition>_R))))) -}
70ef043381ff12719553fe55296234a2
  $fReadVolition_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [GrammarData.Volition]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadVolition1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarData.Volition]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarData.Volition]>_R))) -}
70ef043381ff12719553fe55296234a2
  $fReadVolition_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.Volition
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadVolition2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarData.Volition>_R)) -}
70ef043381ff12719553fe55296234a2
  $fReadVolition_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarData.Volition
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarData.Volition
                   GrammarData.$fReadVolition_$creadPrec
                   eta) -}
70ef043381ff12719553fe55296234a2
  $fReadVolition_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarData.Volition]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarData.Volition]
                   ((GrammarData.$fReadVolition_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarData.Volition]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarData.Volition]>_R)
                      @ [GrammarData.Volition]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarData.Volition]))) -}
bca54c8943426aaabb7eead4f61ed8f0
  $fShowAnimacy :: GHC.Show.Show GrammarData.Animacy
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.Animacy
                  GrammarData.$fShowAnimacy_$cshowsPrec
                  GrammarData.$fShowAnimacy_$cshow
                  GrammarData.$fShowAnimacy_$cshowList -}
bca54c8943426aaabb7eead4f61ed8f0
  $fShowAnimacy_$cshow :: GrammarData.Animacy -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarData.Animacy ->
                 GrammarData.$fShowAnimacy_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
bca54c8943426aaabb7eead4f61ed8f0
  $fShowAnimacy_$cshowList :: [GrammarData.Animacy] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarData.Animacy
                   GrammarData.$w$cshowsPrec) -}
bca54c8943426aaabb7eead4f61ed8f0
  $fShowAnimacy_$cshowsPrec ::
    GHC.Types.Int -> GrammarData.Animacy -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: GrammarData.Animacy
                   w2 :: GHC.Base.String ->
                 GrammarData.$w$cshowsPrec w1 w2) -}
80861930bf27d683d5ab7b0a02511c13
  $fShowAspect :: GHC.Show.Show GrammarData.Aspect
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.Aspect
                  GrammarData.$fShowAspect_$cshowsPrec
                  GrammarData.$fShowAspect_$cshow
                  GrammarData.$fShowAspect_$cshowList -}
80861930bf27d683d5ab7b0a02511c13
  $fShowAspect1 :: GrammarData.Aspect -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarData.Aspect eta :: GHC.Base.String ->
                 case ds of wild {
                   GrammarData.PFV
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n GrammarData.$fReadAspect11)
                        eta
                   GrammarData.IPFV
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n GrammarData.$fReadAspect8)
                        eta }) -}
80861930bf27d683d5ab7b0a02511c13
  $fShowAspect_$cshow :: GrammarData.Aspect -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarData.Aspect ->
                 case x of wild {
                   GrammarData.PFV -> GrammarData.$fReadAspect11
                   GrammarData.IPFV -> GrammarData.$fReadAspect8 }) -}
80861930bf27d683d5ab7b0a02511c13
  $fShowAspect_$cshowList :: [GrammarData.Aspect] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarData.Aspect
                   GrammarData.$fShowAspect1) -}
80861930bf27d683d5ab7b0a02511c13
  $fShowAspect_$cshowsPrec ::
    GHC.Types.Int -> GrammarData.Aspect -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   ds1 :: GrammarData.Aspect
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   GrammarData.PFV
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n GrammarData.$fReadAspect11)
                        eta
                   GrammarData.IPFV
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n GrammarData.$fReadAspect8)
                        eta }) -}
414449d8392b340149498bdeea675855
  $fShowCase :: GHC.Show.Show GrammarData.Case
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.Case
                  GrammarData.$fShowCase_$cshowsPrec
                  GrammarData.$fShowCase_$cshow
                  GrammarData.$fShowCase_$cshowList -}
414449d8392b340149498bdeea675855
  $fShowCase_$cshow :: GrammarData.Case -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarData.Case ->
                 GrammarData.$fShowCase_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
414449d8392b340149498bdeea675855
  $fShowCase_$cshowList :: [GrammarData.Case] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarData.Case
                   GrammarData.$w$cshowsPrec1) -}
414449d8392b340149498bdeea675855
  $fShowCase_$cshowsPrec ::
    GHC.Types.Int -> GrammarData.Case -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: GrammarData.Case
                   w2 :: GHC.Base.String ->
                 GrammarData.$w$cshowsPrec1 w1 w2) -}
b259ad971f4abd96d51568b3b5e664ea
  $fShowDefiniteness :: GHC.Show.Show GrammarData.Definiteness
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.Definiteness
                  GrammarData.$fShowDefiniteness_$cshowsPrec
                  GrammarData.$fShowDefiniteness_$cshow
                  GrammarData.$fShowDefiniteness_$cshowList -}
b259ad971f4abd96d51568b3b5e664ea
  $fShowDefiniteness1 :: GrammarData.Definiteness -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarData.Definiteness eta :: GHC.Base.String ->
                 case ds of wild {
                   GrammarData.DEF
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           GrammarData.$fReadDefiniteness11)
                        eta
                   GrammarData.INDF
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           GrammarData.$fReadDefiniteness8)
                        eta }) -}
b259ad971f4abd96d51568b3b5e664ea
  $fShowDefiniteness_$cshow ::
    GrammarData.Definiteness -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarData.Definiteness ->
                 case x of wild {
                   GrammarData.DEF -> GrammarData.$fReadDefiniteness11
                   GrammarData.INDF -> GrammarData.$fReadDefiniteness8 }) -}
b259ad971f4abd96d51568b3b5e664ea
  $fShowDefiniteness_$cshowList ::
    [GrammarData.Definiteness] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarData.Definiteness
                   GrammarData.$fShowDefiniteness1) -}
b259ad971f4abd96d51568b3b5e664ea
  $fShowDefiniteness_$cshowsPrec ::
    GHC.Types.Int -> GrammarData.Definiteness -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   ds1 :: GrammarData.Definiteness
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   GrammarData.DEF
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           GrammarData.$fReadDefiniteness11)
                        eta
                   GrammarData.INDF
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           GrammarData.$fReadDefiniteness8)
                        eta }) -}
c2de0d68a0340ca4bb61c34dcc01b06e
  $fShowEvidentiality :: GHC.Show.Show GrammarData.Evidentiality
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.Evidentiality
                  GrammarData.$fShowEvidentiality_$cshowsPrec
                  GrammarData.$fShowEvidentiality_$cshow
                  GrammarData.$fShowEvidentiality_$cshowList -}
c2de0d68a0340ca4bb61c34dcc01b06e
  $fShowEvidentiality_$cshow ::
    GrammarData.Evidentiality -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarData.Evidentiality ->
                 GrammarData.$fShowEvidentiality_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
c2de0d68a0340ca4bb61c34dcc01b06e
  $fShowEvidentiality_$cshowList ::
    [GrammarData.Evidentiality] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarData.Evidentiality
                   GrammarData.$w$cshowsPrec2) -}
c2de0d68a0340ca4bb61c34dcc01b06e
  $fShowEvidentiality_$cshowsPrec ::
    GHC.Types.Int -> GrammarData.Evidentiality -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: GrammarData.Evidentiality
                   w2 :: GHC.Base.String ->
                 GrammarData.$w$cshowsPrec2 w1 w2) -}
e7961ab838d9fccce2f6168c4bdf0b78
  $fShowGender :: GHC.Show.Show GrammarData.Gender
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.Gender
                  GrammarData.$fShowGender_$cshowsPrec
                  GrammarData.$fShowGender_$cshow
                  GrammarData.$fShowGender_$cshowList -}
e7961ab838d9fccce2f6168c4bdf0b78
  $fShowGender_$cshow :: GrammarData.Gender -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarData.Gender ->
                 GrammarData.$fShowGender_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
e7961ab838d9fccce2f6168c4bdf0b78
  $fShowGender_$cshowList :: [GrammarData.Gender] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarData.Gender
                   GrammarData.$w$cshowsPrec3) -}
e7961ab838d9fccce2f6168c4bdf0b78
  $fShowGender_$cshowsPrec ::
    GHC.Types.Int -> GrammarData.Gender -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: GrammarData.Gender
                   w2 :: GHC.Base.String ->
                 GrammarData.$w$cshowsPrec3 w1 w2) -}
c21478941058e7db3f75b02a2a8e65d0
  $fShowGrammarSystem :: GHC.Show.Show GrammarData.GrammarSystem
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.GrammarSystem
                  GrammarData.$fShowGrammarSystem_$cshowsPrec
                  GrammarData.$fShowGrammarSystem_$cshow
                  GrammarData.$fShowGrammarSystem_$cshowList -}
c21478941058e7db3f75b02a2a8e65d0
  $fShowGrammarSystem1 :: GrammarData.GrammarSystem -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: GrammarData.GrammarSystem
                   w1 :: GHC.Base.String ->
                 case w of ww { GrammarData.GrammarSystem ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 GrammarData.$w$cshowsPrec4 0 ww1 ww2 ww3 ww4 ww5 ww6 ww7 w1 }) -}
c21478941058e7db3f75b02a2a8e65d0
  $fShowGrammarSystem_$cshow ::
    GrammarData.GrammarSystem -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarData.GrammarSystem ->
                 GrammarData.$fShowGrammarSystem_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
c21478941058e7db3f75b02a2a8e65d0
  $fShowGrammarSystem_$cshowList ::
    [GrammarData.GrammarSystem] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarData.GrammarSystem
                   GrammarData.$fShowGrammarSystem1) -}
c21478941058e7db3f75b02a2a8e65d0
  $fShowGrammarSystem_$cshowsPrec ::
    GHC.Types.Int -> GrammarData.GrammarSystem -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <S,1*U(U)><S,1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int
                   w1 :: GrammarData.GrammarSystem
                   w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { GrammarData.GrammarSystem ww3 ww4 ww5 ww6 ww7 ww8 ww9 ->
                 GrammarData.$w$cshowsPrec4
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   w2 } }) -}
8bea2a401488a9b7443e58342e97c338
  $fShowHonorific :: GHC.Show.Show GrammarData.Honorific
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.Honorific
                  GrammarData.$fShowHonorific_$cshowsPrec
                  GrammarData.$fShowHonorific_$cshow
                  GrammarData.$fShowHonorific_$cshowList -}
8bea2a401488a9b7443e58342e97c338
  $fShowHonorific1 :: GrammarData.Honorific -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarData.Honorific eta :: GHC.Base.String ->
                 case ds of wild {
                   GrammarData.FAM
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           GrammarData.$fReadHonorific11)
                        eta
                   GrammarData.FORM
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           GrammarData.$fReadHonorific8)
                        eta }) -}
8bea2a401488a9b7443e58342e97c338
  $fShowHonorific_$cshow :: GrammarData.Honorific -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarData.Honorific ->
                 case x of wild {
                   GrammarData.FAM -> GrammarData.$fReadHonorific11
                   GrammarData.FORM -> GrammarData.$fReadHonorific8 }) -}
8bea2a401488a9b7443e58342e97c338
  $fShowHonorific_$cshowList ::
    [GrammarData.Honorific] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarData.Honorific
                   GrammarData.$fShowHonorific1) -}
8bea2a401488a9b7443e58342e97c338
  $fShowHonorific_$cshowsPrec ::
    GHC.Types.Int -> GrammarData.Honorific -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   ds1 :: GrammarData.Honorific
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   GrammarData.FAM
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           GrammarData.$fReadHonorific11)
                        eta
                   GrammarData.FORM
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           GrammarData.$fReadHonorific8)
                        eta }) -}
bf97cdc74f3aad6d32e164918e597133
  $fShowManifest ::
    GHC.Show.Show a => GHC.Show.Show (GrammarData.Manifest a)
  DFunId[0]
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a27 $dShow :: GHC.Show.Show a27.
                  @ (GrammarData.Manifest a27)
                  (GrammarData.$fShowManifest_$cshowsPrec @ a27 $dShow)
                  (GrammarData.$fShowManifest_$cshow @ a27 $dShow)
                  (GrammarData.$fShowManifest_$cshowList @ a27 $dShow) -}
05dd034cf9624cf60983cd8c1eb649e6
  $fShowManifest14 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11) -}
10122840601a41a5cce248eaa2b6093b
  $fShowManifest15 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   GrammarData.$fShowManifest7) -}
cbd4fadbacec8167446f469d4d17bbe8
  $fShowManifest16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   GrammarData.$fShowManifest7
                   (GHC.Types.[] @ GHC.Types.Char)) -}
09ff573a6d2eb3f50825d4afd6f82476
  $fShowManifest2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0) -}
5ed9b002b3afdeb4685704c03bf9ec4d
  $fShowManifest3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Suffix "#) -}
a04d86bf7e44c0eda333518ed79f1b08
  $fShowManifest4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Prefix "#) -}
4919f22646c449bacd1cc169e037bb3c
  $fShowManifest5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PostParticle "#) -}
e533dab576b34ccf6442246788925e82
  $fShowManifest6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PreParticle "#) -}
a4108ed90e66ba288cb2ba537c780667
  $fShowManifest7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NoManifest"#) -}
e59e026f6f243dc64e3e0392a6b7fb92
  $fShowManifestSystem :: GHC.Show.Show GrammarData.ManifestSystem
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.ManifestSystem
                  GrammarData.$fShowManifestSystem_$cshowsPrec
                  GrammarData.$fShowManifestSystem_$cshow
                  GrammarData.$fShowManifestSystem_$cshowList -}
e59e026f6f243dc64e3e0392a6b7fb92
  $fShowManifestSystem1 ::
    GrammarData.ManifestSystem -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: GrammarData.ManifestSystem
                   w1 :: GHC.Base.String ->
                 GrammarData.$w$cshowsPrec6 0 w w1) -}
0f915c8940e55649f1b81057bc85a9c0
  $fShowManifestSystem2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SuffixSystem "#) -}
8484be57d8ac3de1fdd6cd3eb34560b0
  $fShowManifestSystem3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PrefixSystem "#) -}
5014336190e78a24eeab0ca7056fcdf5
  $fShowManifestSystem4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "PostParticleSystem "#) -}
c81ffac353c54bc2a789f1d7da51716f
  $fShowManifestSystem5 ::
    (PhonemeData.Morpheme,
     (GrammarData.Manifest GrammarData.Gender,
      GrammarData.Manifest GrammarData.Animacy,
      GrammarData.Manifest GrammarData.Case,
      GrammarData.Manifest GrammarData.Number,
      GrammarData.Manifest GrammarData.Honorific,
      GrammarData.Manifest GrammarData.Definiteness,
      GrammarData.Manifest GrammarData.Specificity))
    -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ w3 :: (PhonemeData.Morpheme,
                          (GrammarData.Manifest GrammarData.Gender,
                           GrammarData.Manifest GrammarData.Animacy,
                           GrammarData.Manifest GrammarData.Case,
                           GrammarData.Manifest GrammarData.Number,
                           GrammarData.Manifest GrammarData.Honorific,
                           GrammarData.Manifest GrammarData.Definiteness,
                           GrammarData.Manifest GrammarData.Specificity))
                   w4 :: GHC.Base.String[OneShot] ->
                 case w3 of ww { (,) ww1 ww2 ->
                 GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows9
                   (case ww1 of ww4 { PhonemeData.Morpheme ww3 ->
                    PhonemeData.$w$cshowsPrec4
                      0
                      ww3
                      (GHC.Types.:
                         @ GHC.Types.Char
                         GHC.Show.showList__1
                         (GHC.Show.$fShow(,)_$sgo
                            (\ w9 :: GHC.Base.String ->
                             case ww2 of ww5 { (,,,,,,) ww6 ww7 ww8 ww9 ww10 ww11 ww12 ->
                             GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.shows9
                               (GrammarData.$fShowManifest_$s$cshowsPrec
                                  GHC.Show.shows18
                                  ww6
                                  (GHC.Types.:
                                     @ GHC.Types.Char
                                     GHC.Show.showList__1
                                     (GHC.Show.$fShow(,,,,,,)_$sgo
                                        (GrammarData.$fShowManifest_$s$cshowsPrec1
                                           GHC.Show.shows18
                                           ww7)
                                        (GHC.Types.:
                                           @ GHC.Show.ShowS
                                           (GrammarData.$fShowManifest_$s$cshowsPrec2
                                              GHC.Show.shows18
                                              ww8)
                                           (GHC.Types.:
                                              @ GHC.Show.ShowS
                                              (GrammarData.$fShowManifest_$s$cshowsPrec3
                                                 GHC.Show.shows18
                                                 ww9)
                                              (GHC.Types.:
                                                 @ GHC.Show.ShowS
                                                 (GrammarData.$fShowManifest_$s$cshowsPrec4
                                                    GHC.Show.shows18
                                                    ww10)
                                                 (GHC.Types.:
                                                    @ GHC.Show.ShowS
                                                    (GrammarData.$fShowManifest_$s$cshowsPrec5
                                                       GHC.Show.shows18
                                                       ww11)
                                                    (GHC.Types.:
                                                       @ GHC.Show.ShowS
                                                       (GrammarData.$fShowManifest_$s$cshowsPrec6
                                                          GHC.Show.shows18
                                                          ww12)
                                                       (GHC.Types.[] @ GHC.Show.ShowS))))))
                                        (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w9)))) })
                            (GHC.Types.[] @ GHC.Show.ShowS)
                            (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w4))) }) }) -}
e8d102dab8f38fc0ab23370499b5c5e0
  $fShowManifestSystem6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PreParticleSystem "#) -}
e59e026f6f243dc64e3e0392a6b7fb92
  $fShowManifestSystem_$cshow ::
    GrammarData.ManifestSystem -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarData.ManifestSystem ->
                 GrammarData.$fShowManifestSystem_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
e59e026f6f243dc64e3e0392a6b7fb92
  $fShowManifestSystem_$cshowList ::
    [GrammarData.ManifestSystem] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarData.ManifestSystem
                   GrammarData.$fShowManifestSystem1) -}
e59e026f6f243dc64e3e0392a6b7fb92
  $fShowManifestSystem_$cshowsPrec ::
    GHC.Types.Int -> GrammarData.ManifestSystem -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S,1*U><L,U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int
                   w1 :: GrammarData.ManifestSystem
                   w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 GrammarData.$w$cshowsPrec6 ww1 w1 w2 }) -}
bf97cdc74f3aad6d32e164918e597133
  $fShowManifest_$cshow ::
    GHC.Show.Show a => GrammarData.Manifest a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(1*C1(C1(C1(U))),A,A)><S,1*U>,
     Unfolding: (\ @ a27
                   $dShow :: GHC.Show.Show a27
                   x :: GrammarData.Manifest a27 ->
                 case x of wild {
                   GrammarData.NoManifest -> GrammarData.$fShowManifest16
                   GrammarData.PreParticle b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        GrammarData.$fShowManifest6
                        (GHC.Show.showsPrec
                           @ a27
                           $dShow
                           GrammarData.$fShowManifest14
                           b1
                           (GHC.Types.[] @ GHC.Types.Char))
                   GrammarData.PostParticle b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        GrammarData.$fShowManifest5
                        (GHC.Show.showsPrec
                           @ a27
                           $dShow
                           GrammarData.$fShowManifest14
                           b1
                           (GHC.Types.[] @ GHC.Types.Char))
                   GrammarData.Prefix b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        GrammarData.$fShowManifest4
                        (GHC.Show.showsPrec
                           @ a27
                           $dShow
                           GrammarData.$fShowManifest14
                           b1
                           (GHC.Types.[] @ GHC.Types.Char))
                   GrammarData.Suffix b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        GrammarData.$fShowManifest3
                        (GHC.Show.showsPrec
                           @ a27
                           $dShow
                           GrammarData.$fShowManifest14
                           b1
                           (GHC.Types.[] @ GHC.Types.Char)) }) -}
bf97cdc74f3aad6d32e164918e597133
  $fShowManifest_$cshowList ::
    GHC.Show.Show a => [GrammarData.Manifest a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a27
                   $dShow :: GHC.Show.Show a27
                   eta :: [GrammarData.Manifest a27]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (GrammarData.Manifest a27)
                   (GrammarData.$fShowManifest_$cshowsPrec
                      @ a27
                      $dShow
                      GrammarData.$fShowManifest2)
                   eta
                   eta1) -}
bf97cdc74f3aad6d32e164918e597133
  $fShowManifest_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int -> GrammarData.Manifest a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(U)><S,1*U>,
     Unfolding: (\ @ a27
                   $dShow :: GHC.Show.Show a27
                   ds :: GHC.Types.Int
                   ds1 :: GrammarData.Manifest a27 ->
                 case ds1 of wild {
                   GrammarData.NoManifest -> GrammarData.$fShowManifest15
                   GrammarData.PreParticle b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.showsPrec @ a27 $dShow GrammarData.$fShowManifest14 b1
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> \ x1 :: GHC.Base.String ->
                           GHC.Base.++ @ GHC.Types.Char GrammarData.$fShowManifest6 (g x1)
                        GHC.Types.True
                        -> \ x1 :: GHC.Base.String ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                GrammarData.$fShowManifest6
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x1))) } }
                   GrammarData.PostParticle b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.showsPrec @ a27 $dShow GrammarData.$fShowManifest14 b1
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> \ x1 :: GHC.Base.String ->
                           GHC.Base.++ @ GHC.Types.Char GrammarData.$fShowManifest5 (g x1)
                        GHC.Types.True
                        -> \ x1 :: GHC.Base.String ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                GrammarData.$fShowManifest5
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x1))) } }
                   GrammarData.Prefix b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.showsPrec @ a27 $dShow GrammarData.$fShowManifest14 b1
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> \ x1 :: GHC.Base.String ->
                           GHC.Base.++ @ GHC.Types.Char GrammarData.$fShowManifest4 (g x1)
                        GHC.Types.True
                        -> \ x1 :: GHC.Base.String ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                GrammarData.$fShowManifest4
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x1))) } }
                   GrammarData.Suffix b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.showsPrec @ a27 $dShow GrammarData.$fShowManifest14 b1
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> \ x1 :: GHC.Base.String ->
                           GHC.Base.++ @ GHC.Types.Char GrammarData.$fShowManifest3 (g x1)
                        GHC.Types.True
                        -> \ x1 :: GHC.Base.String ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                GrammarData.$fShowManifest3
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x1))) } } }) -}
deca8aec93d5f637bf646e838c1c67df
  $fShowManifest_$s$cshowsPrec ::
    GHC.Types.Int
    -> GrammarData.Manifest GrammarData.Gender -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: GrammarData.Manifest GrammarData.Gender
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   GrammarData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char GrammarData.$fShowManifest7 eta
                   GrammarData.PreParticle b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             GrammarData.$fShowManifest6
                             (GrammarData.$w$cshowsPrec3 b1 eta)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                GrammarData.$fShowManifest6
                                (GrammarData.$w$cshowsPrec3
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta))) } }
                   GrammarData.PostParticle b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             GrammarData.$fShowManifest5
                             (GrammarData.$w$cshowsPrec3 b1 eta)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                GrammarData.$fShowManifest5
                                (GrammarData.$w$cshowsPrec3
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta))) } }
                   GrammarData.Prefix b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             GrammarData.$fShowManifest4
                             (GrammarData.$w$cshowsPrec3 b1 eta)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                GrammarData.$fShowManifest4
                                (GrammarData.$w$cshowsPrec3
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta))) } }
                   GrammarData.Suffix b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             GrammarData.$fShowManifest3
                             (GrammarData.$w$cshowsPrec3 b1 eta)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                GrammarData.$fShowManifest3
                                (GrammarData.$w$cshowsPrec3
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta))) } } }) -}
90b03259ef7f53ce738203c0ed000a2e
  $fShowManifest_$s$cshowsPrec1 ::
    GHC.Types.Int
    -> GrammarData.Manifest GrammarData.Animacy -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: GrammarData.Manifest GrammarData.Animacy
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   GrammarData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char GrammarData.$fShowManifest7 eta
                   GrammarData.PreParticle b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             GrammarData.$fShowManifest6
                             (GrammarData.$w$cshowsPrec b1 eta)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                GrammarData.$fShowManifest6
                                (GrammarData.$w$cshowsPrec
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta))) } }
                   GrammarData.PostParticle b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             GrammarData.$fShowManifest5
                             (GrammarData.$w$cshowsPrec b1 eta)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                GrammarData.$fShowManifest5
                                (GrammarData.$w$cshowsPrec
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta))) } }
                   GrammarData.Prefix b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             GrammarData.$fShowManifest4
                             (GrammarData.$w$cshowsPrec b1 eta)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                GrammarData.$fShowManifest4
                                (GrammarData.$w$cshowsPrec
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta))) } }
                   GrammarData.Suffix b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             GrammarData.$fShowManifest3
                             (GrammarData.$w$cshowsPrec b1 eta)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                GrammarData.$fShowManifest3
                                (GrammarData.$w$cshowsPrec
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta))) } } }) -}
c5401c99c1ba3c98f5e20c00788fe016
  $fShowManifest_$s$cshowsPrec10 ::
    GHC.Types.Int
    -> GrammarData.Manifest ([GrammarData.Number], GHC.Types.Int)
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U> -}
476ae9e7f8783ddee07cc7829de77eb7
  $fShowManifest_$s$cshowsPrec11 ::
    GHC.Types.Int
    -> GrammarData.Manifest ([GrammarData.Honorific], GHC.Types.Int)
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U> -}
2f3aa14c7e91666fd1dc996aa72ac72a
  $fShowManifest_$s$cshowsPrec12 ::
    GHC.Types.Int
    -> GrammarData.Manifest ([GrammarData.Definiteness], GHC.Types.Int)
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U> -}
64b7d4c5c37cf431e9a980f875007f11
  $fShowManifest_$s$cshowsPrec13 ::
    GHC.Types.Int
    -> GrammarData.Manifest ([GrammarData.Specificity], GHC.Types.Int)
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U> -}
562592305b76ec7f8377f8924682a738
  $fShowManifest_$s$cshowsPrec2 ::
    GHC.Types.Int
    -> GrammarData.Manifest GrammarData.Case -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: GrammarData.Manifest GrammarData.Case
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   GrammarData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char GrammarData.$fShowManifest7 eta
                   GrammarData.PreParticle b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             GrammarData.$fShowManifest6
                             (GrammarData.$w$cshowsPrec1 b1 eta)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                GrammarData.$fShowManifest6
                                (GrammarData.$w$cshowsPrec1
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta))) } }
                   GrammarData.PostParticle b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             GrammarData.$fShowManifest5
                             (GrammarData.$w$cshowsPrec1 b1 eta)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                GrammarData.$fShowManifest5
                                (GrammarData.$w$cshowsPrec1
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta))) } }
                   GrammarData.Prefix b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             GrammarData.$fShowManifest4
                             (GrammarData.$w$cshowsPrec1 b1 eta)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                GrammarData.$fShowManifest4
                                (GrammarData.$w$cshowsPrec1
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta))) } }
                   GrammarData.Suffix b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             GrammarData.$fShowManifest3
                             (GrammarData.$w$cshowsPrec1 b1 eta)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                GrammarData.$fShowManifest3
                                (GrammarData.$w$cshowsPrec1
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta))) } } }) -}
3a6c3e1842858d5387ce997eff81947f
  $fShowManifest_$s$cshowsPrec3 ::
    GHC.Types.Int
    -> GrammarData.Manifest GrammarData.Number -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: GrammarData.Manifest GrammarData.Number
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   GrammarData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char GrammarData.$fShowManifest7 eta
                   GrammarData.PreParticle b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             GrammarData.$fShowManifest6
                             (GrammarData.$w$cshowsPrec5 b1 eta)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                GrammarData.$fShowManifest6
                                (GrammarData.$w$cshowsPrec5
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta))) } }
                   GrammarData.PostParticle b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             GrammarData.$fShowManifest5
                             (GrammarData.$w$cshowsPrec5 b1 eta)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                GrammarData.$fShowManifest5
                                (GrammarData.$w$cshowsPrec5
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta))) } }
                   GrammarData.Prefix b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             GrammarData.$fShowManifest4
                             (GrammarData.$w$cshowsPrec5 b1 eta)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                GrammarData.$fShowManifest4
                                (GrammarData.$w$cshowsPrec5
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta))) } }
                   GrammarData.Suffix b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             GrammarData.$fShowManifest3
                             (GrammarData.$w$cshowsPrec5 b1 eta)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                GrammarData.$fShowManifest3
                                (GrammarData.$w$cshowsPrec5
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta))) } } }) -}
31f9a4ace3d691a912322714d096ba2e
  $fShowManifest_$s$cshowsPrec4 ::
    GHC.Types.Int
    -> GrammarData.Manifest GrammarData.Honorific -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U> -}
8102b11d567a49cedd0e1c476389a383
  $fShowManifest_$s$cshowsPrec5 ::
    GHC.Types.Int
    -> GrammarData.Manifest GrammarData.Definiteness -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U> -}
af633580f39dd4a2b85cba5e80eaf46d
  $fShowManifest_$s$cshowsPrec6 ::
    GHC.Types.Int
    -> GrammarData.Manifest GrammarData.Specificity -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U> -}
78c48421ac5648f179f368065f600754
  $fShowManifest_$s$cshowsPrec7 ::
    GHC.Types.Int
    -> GrammarData.Manifest ([GrammarData.Gender], GHC.Types.Int)
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U> -}
dafdbe55e4e43d16130aa29669a6b31c
  $fShowManifest_$s$cshowsPrec8 ::
    GHC.Types.Int
    -> GrammarData.Manifest ([GrammarData.Animacy], GHC.Types.Int)
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U> -}
7f9d801c3cb5dbc990e4717ddd0a6c95
  $fShowManifest_$s$cshowsPrec9 ::
    GHC.Types.Int
    -> GrammarData.Manifest ([GrammarData.Case], GHC.Types.Int)
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U> -}
1f9e0042782b650d0d74a52671e595f1
  $fShowMood :: GHC.Show.Show GrammarData.Mood
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.Mood
                  GrammarData.$fShowMood_$cshowsPrec
                  GrammarData.$fShowMood_$cshow
                  GrammarData.$fShowMood_$cshowList -}
1f9e0042782b650d0d74a52671e595f1
  $fShowMood_$cshow :: GrammarData.Mood -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarData.Mood ->
                 GrammarData.$fShowMood_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
1f9e0042782b650d0d74a52671e595f1
  $fShowMood_$cshowList :: [GrammarData.Mood] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarData.Mood
                   GrammarData.$w$cshowsPrec7) -}
1f9e0042782b650d0d74a52671e595f1
  $fShowMood_$cshowsPrec ::
    GHC.Types.Int -> GrammarData.Mood -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: GrammarData.Mood
                   w2 :: GHC.Base.String ->
                 GrammarData.$w$cshowsPrec7 w1 w2) -}
8ed84510caef32c77eef1e60822eb3ba
  $fShowNumber :: GHC.Show.Show GrammarData.Number
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.Number
                  GrammarData.$fShowNumber_$cshowsPrec
                  GrammarData.$fShowNumber_$cshow
                  GrammarData.$fShowNumber_$cshowList -}
8ed84510caef32c77eef1e60822eb3ba
  $fShowNumber_$cshow :: GrammarData.Number -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarData.Number ->
                 GrammarData.$fShowNumber_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
8ed84510caef32c77eef1e60822eb3ba
  $fShowNumber_$cshowList :: [GrammarData.Number] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarData.Number
                   GrammarData.$w$cshowsPrec5) -}
8ed84510caef32c77eef1e60822eb3ba
  $fShowNumber_$cshowsPrec ::
    GHC.Types.Int -> GrammarData.Number -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: GrammarData.Number
                   w2 :: GHC.Base.String ->
                 GrammarData.$w$cshowsPrec5 w1 w2) -}
3b7d81f4c94437e6844a3064e4af630e
  $fShowPerson :: GHC.Show.Show GrammarData.Person
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.Person
                  GrammarData.$fShowPerson_$cshowsPrec
                  GrammarData.$fShowPerson_$cshow
                  GrammarData.$fShowPerson_$cshowList -}
3b7d81f4c94437e6844a3064e4af630e
  $fShowPerson_$cshow :: GrammarData.Person -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarData.Person ->
                 case x of wild {
                   GrammarData.FIRST -> GrammarData.$fReadPerson15
                   GrammarData.SECOND -> GrammarData.$fReadPerson12
                   GrammarData.THIRD -> GrammarData.$fReadPerson9 }) -}
3b7d81f4c94437e6844a3064e4af630e
  $fShowPerson_$cshowList :: [GrammarData.Person] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarData.Person
                   GrammarData.$w$cshowsPrec8) -}
3b7d81f4c94437e6844a3064e4af630e
  $fShowPerson_$cshowsPrec ::
    GHC.Types.Int -> GrammarData.Person -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: GrammarData.Person
                   w2 :: GHC.Base.String ->
                 GrammarData.$w$cshowsPrec8 w1 w2) -}
fd1897a0d2b932b38e0c47ea3af5837d
  $fShowPolarity :: GHC.Show.Show GrammarData.Polarity
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.Polarity
                  GrammarData.$fShowPolarity_$cshowsPrec
                  GrammarData.$fShowPolarity_$cshow
                  GrammarData.$fShowPolarity_$cshowList -}
fd1897a0d2b932b38e0c47ea3af5837d
  $fShowPolarity1 :: GrammarData.Polarity -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarData.Polarity eta :: GHC.Base.String ->
                 case ds of wild {
                   GrammarData.AFF
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           GrammarData.$fReadPolarity11)
                        eta
                   GrammarData.NEG
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           GrammarData.$fReadPolarity8)
                        eta }) -}
fd1897a0d2b932b38e0c47ea3af5837d
  $fShowPolarity_$cshow :: GrammarData.Polarity -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarData.Polarity ->
                 case x of wild {
                   GrammarData.AFF -> GrammarData.$fReadPolarity11
                   GrammarData.NEG -> GrammarData.$fReadPolarity8 }) -}
fd1897a0d2b932b38e0c47ea3af5837d
  $fShowPolarity_$cshowList ::
    [GrammarData.Polarity] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarData.Polarity
                   GrammarData.$fShowPolarity1) -}
fd1897a0d2b932b38e0c47ea3af5837d
  $fShowPolarity_$cshowsPrec ::
    GHC.Types.Int -> GrammarData.Polarity -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   ds1 :: GrammarData.Polarity
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   GrammarData.AFF
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           GrammarData.$fReadPolarity11)
                        eta
                   GrammarData.NEG
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           GrammarData.$fReadPolarity8)
                        eta }) -}
f663e7ff07f2909cb51f85e829fe40a9
  $fShowSpecificity :: GHC.Show.Show GrammarData.Specificity
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.Specificity
                  GrammarData.$fShowSpecificity_$cshowsPrec
                  GrammarData.$fShowSpecificity_$cshow
                  GrammarData.$fShowSpecificity_$cshowList -}
f663e7ff07f2909cb51f85e829fe40a9
  $fShowSpecificity1 :: GrammarData.Specificity -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarData.Specificity eta :: GHC.Base.String ->
                 case ds of wild {
                   GrammarData.SPEC
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           GrammarData.$fReadSpecificity11)
                        eta
                   GrammarData.NSPEC
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           GrammarData.$fReadSpecificity8)
                        eta }) -}
f663e7ff07f2909cb51f85e829fe40a9
  $fShowSpecificity_$cshow ::
    GrammarData.Specificity -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarData.Specificity ->
                 case x of wild {
                   GrammarData.SPEC -> GrammarData.$fReadSpecificity11
                   GrammarData.NSPEC -> GrammarData.$fReadSpecificity8 }) -}
f663e7ff07f2909cb51f85e829fe40a9
  $fShowSpecificity_$cshowList ::
    [GrammarData.Specificity] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarData.Specificity
                   GrammarData.$fShowSpecificity1) -}
f663e7ff07f2909cb51f85e829fe40a9
  $fShowSpecificity_$cshowsPrec ::
    GHC.Types.Int -> GrammarData.Specificity -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   ds1 :: GrammarData.Specificity
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   GrammarData.SPEC
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           GrammarData.$fReadSpecificity11)
                        eta
                   GrammarData.NSPEC
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           GrammarData.$fReadSpecificity8)
                        eta }) -}
635ace3f32ba47f6e643bb471451b3ec
  $fShowTense :: GHC.Show.Show GrammarData.Tense
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.Tense
                  GrammarData.$fShowTense_$cshowsPrec
                  GrammarData.$fShowTense_$cshow
                  GrammarData.$fShowTense_$cshowList -}
635ace3f32ba47f6e643bb471451b3ec
  $fShowTense_$cshow :: GrammarData.Tense -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarData.Tense ->
                 GrammarData.$fShowTense_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
635ace3f32ba47f6e643bb471451b3ec
  $fShowTense_$cshowList :: [GrammarData.Tense] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarData.Tense
                   GrammarData.$w$cshowsPrec9) -}
635ace3f32ba47f6e643bb471451b3ec
  $fShowTense_$cshowsPrec ::
    GHC.Types.Int -> GrammarData.Tense -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: GrammarData.Tense
                   w2 :: GHC.Base.String ->
                 GrammarData.$w$cshowsPrec9 w1 w2) -}
ce1309e748ae1ead2a5127b0f086bbd0
  $fShowTransitivity :: GHC.Show.Show GrammarData.Transitivity
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.Transitivity
                  GrammarData.$fShowTransitivity_$cshowsPrec
                  GrammarData.$fShowTransitivity_$cshow
                  GrammarData.$fShowTransitivity_$cshowList -}
ce1309e748ae1ead2a5127b0f086bbd0
  $fShowTransitivity_$cshow ::
    GrammarData.Transitivity -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarData.Transitivity ->
                 case x of wild {
                   GrammarData.INTR -> GrammarData.$fReadTransitivity15
                   GrammarData.TR -> GrammarData.$fReadTransitivity12
                   GrammarData.DITR -> GrammarData.$fReadTransitivity9 }) -}
ce1309e748ae1ead2a5127b0f086bbd0
  $fShowTransitivity_$cshowList ::
    [GrammarData.Transitivity] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarData.Transitivity
                   GrammarData.$w$cshowsPrec10) -}
ce1309e748ae1ead2a5127b0f086bbd0
  $fShowTransitivity_$cshowsPrec ::
    GHC.Types.Int -> GrammarData.Transitivity -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: GrammarData.Transitivity
                   w2 :: GHC.Base.String ->
                 GrammarData.$w$cshowsPrec10 w1 w2) -}
b7c0182e94b370d685bfdc0c00290938
  $fShowVoice :: GHC.Show.Show GrammarData.Voice
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.Voice
                  GrammarData.$fShowVoice_$cshowsPrec
                  GrammarData.$fShowVoice_$cshow
                  GrammarData.$fShowVoice_$cshowList -}
b7c0182e94b370d685bfdc0c00290938
  $fShowVoice_$cshow :: GrammarData.Voice -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarData.Voice ->
                 case x of wild {
                   GrammarData.ACT -> GrammarData.$fReadVoice15
                   GrammarData.MID -> GrammarData.$fReadVoice12
                   GrammarData.PAS -> GrammarData.$fReadVoice9 }) -}
b7c0182e94b370d685bfdc0c00290938
  $fShowVoice_$cshowList :: [GrammarData.Voice] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarData.Voice
                   GrammarData.$w$cshowsPrec11) -}
b7c0182e94b370d685bfdc0c00290938
  $fShowVoice_$cshowsPrec ::
    GHC.Types.Int -> GrammarData.Voice -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: GrammarData.Voice
                   w2 :: GHC.Base.String ->
                 GrammarData.$w$cshowsPrec11 w1 w2) -}
70ef043381ff12719553fe55296234a2
  $fShowVolition :: GHC.Show.Show GrammarData.Volition
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.Volition
                  GrammarData.$fShowVolition_$cshowsPrec
                  GrammarData.$fShowVolition_$cshow
                  GrammarData.$fShowVolition_$cshowList -}
70ef043381ff12719553fe55296234a2
  $fShowVolition1 :: GrammarData.Volition -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarData.Volition eta :: GHC.Base.String ->
                 case ds of wild {
                   GrammarData.VOL
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           GrammarData.$fReadVolition11)
                        eta
                   GrammarData.NVOL
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           GrammarData.$fReadVolition8)
                        eta }) -}
70ef043381ff12719553fe55296234a2
  $fShowVolition_$cshow :: GrammarData.Volition -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarData.Volition ->
                 case x of wild {
                   GrammarData.VOL -> GrammarData.$fReadVolition11
                   GrammarData.NVOL -> GrammarData.$fReadVolition8 }) -}
70ef043381ff12719553fe55296234a2
  $fShowVolition_$cshowList ::
    [GrammarData.Volition] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarData.Volition
                   GrammarData.$fShowVolition1) -}
70ef043381ff12719553fe55296234a2
  $fShowVolition_$cshowsPrec ::
    GHC.Types.Int -> GrammarData.Volition -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   ds1 :: GrammarData.Volition
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   GrammarData.VOL
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           GrammarData.$fReadVolition11)
                        eta
                   GrammarData.NVOL
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           GrammarData.$fReadVolition8)
                        eta }) -}
1b9e12ff44c1e38a9771ab469237e72f
  $s$fRead(,,,,,,) ::
    GHC.Read.Read
      (GrammarData.Manifest GrammarData.Gender,
       GrammarData.Manifest GrammarData.Animacy,
       GrammarData.Manifest GrammarData.Case,
       GrammarData.Manifest GrammarData.Number,
       GrammarData.Manifest GrammarData.Honorific,
       GrammarData.Manifest GrammarData.Definiteness,
       GrammarData.Manifest GrammarData.Specificity)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GrammarData.Manifest GrammarData.Gender,
                     GrammarData.Manifest GrammarData.Animacy,
                     GrammarData.Manifest GrammarData.Case,
                     GrammarData.Manifest GrammarData.Number,
                     GrammarData.Manifest GrammarData.Honorific,
                     GrammarData.Manifest GrammarData.Definiteness,
                     GrammarData.Manifest GrammarData.Specificity)
                  GrammarData.$s$fRead(,,,,,,)_$s$fRead(,,,,,,)_$creadsPrec
                  GrammarData.$s$fRead(,,,,,,)_$s$fRead(,,,,,,)_$creadList
                  (GHC.Read.$fRead(,,,,,,)_$creadPrec
                     @ (GrammarData.Manifest GrammarData.Gender)
                     @ (GrammarData.Manifest GrammarData.Animacy)
                     @ (GrammarData.Manifest GrammarData.Case)
                     @ (GrammarData.Manifest GrammarData.Number)
                     @ (GrammarData.Manifest GrammarData.Honorific)
                     @ (GrammarData.Manifest GrammarData.Definiteness)
                     @ (GrammarData.Manifest GrammarData.Specificity)
                     GrammarData.$s$fRead(,,,,,,)7
                     GrammarData.$s$fRead(,,,,,,)6
                     GrammarData.$s$fRead(,,,,,,)5
                     GrammarData.$s$fRead(,,,,,,)4
                     GrammarData.$s$fRead(,,,,,,)3
                     GrammarData.$s$fRead(,,,,,,)2
                     GrammarData.$s$fRead(,,,,,,)1)
                  (GHC.Read.$fRead(,,,,,,)_$creadListPrec
                     @ (GrammarData.Manifest GrammarData.Gender)
                     @ (GrammarData.Manifest GrammarData.Animacy)
                     @ (GrammarData.Manifest GrammarData.Case)
                     @ (GrammarData.Manifest GrammarData.Number)
                     @ (GrammarData.Manifest GrammarData.Honorific)
                     @ (GrammarData.Manifest GrammarData.Definiteness)
                     @ (GrammarData.Manifest GrammarData.Specificity)
                     GrammarData.$s$fRead(,,,,,,)7
                     GrammarData.$s$fRead(,,,,,,)6
                     GrammarData.$s$fRead(,,,,,,)5
                     GrammarData.$s$fRead(,,,,,,)4
                     GrammarData.$s$fRead(,,,,,,)3
                     GrammarData.$s$fRead(,,,,,,)2
                     GrammarData.$s$fRead(,,,,,,)1) -}
d0b0c1b7701cdab10a5fb63374034b27
  $s$fRead(,,,,,,)1 ::
    GHC.Read.Read (GrammarData.Manifest GrammarData.Specificity)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadManifest_$s$fReadManifest6 -}
1e5c7bf88ab4c5d0db4ca5017eccda37
  $s$fRead(,,,,,,)2 ::
    GHC.Read.Read (GrammarData.Manifest GrammarData.Definiteness)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadManifest_$s$fReadManifest5 -}
d1b47a7792dce8c10dd7cec0e64ddb1d
  $s$fRead(,,,,,,)3 ::
    GHC.Read.Read (GrammarData.Manifest GrammarData.Honorific)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadManifest_$s$fReadManifest4 -}
2b71de5f041cc51c80d284d8a4f2221b
  $s$fRead(,,,,,,)4 ::
    GHC.Read.Read (GrammarData.Manifest GrammarData.Number)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadManifest_$s$fReadManifest3 -}
ea5d4ac0a7a3f72a87c5da69b73dd835
  $s$fRead(,,,,,,)5 ::
    GHC.Read.Read (GrammarData.Manifest GrammarData.Case)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadManifest_$s$fReadManifest2 -}
29c3d7ece9c80ff677674cc1ad4de2fa
  $s$fRead(,,,,,,)6 ::
    GHC.Read.Read (GrammarData.Manifest GrammarData.Animacy)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadManifest_$s$fReadManifest1 -}
6c20cb919d5b51c440f2b8b58d5d604d
  $s$fRead(,,,,,,)7 ::
    GHC.Read.Read (GrammarData.Manifest GrammarData.Gender)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadManifest_$s$fReadManifest -}
3a0ace6e0e5b49642e1969439ff42a5f
  $s$fRead(,,,,,,)_$s$fRead(,,,,,,)_$creadList ::
    Text.ParserCombinators.ReadP.ReadS
      [(GrammarData.Manifest GrammarData.Gender,
        GrammarData.Manifest GrammarData.Animacy,
        GrammarData.Manifest GrammarData.Case,
        GrammarData.Manifest GrammarData.Number,
        GrammarData.Manifest GrammarData.Honorific,
        GrammarData.Manifest GrammarData.Definiteness,
        GrammarData.Manifest GrammarData.Specificity)]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [(GrammarData.Manifest GrammarData.Gender,
                       GrammarData.Manifest GrammarData.Animacy,
                       GrammarData.Manifest GrammarData.Case,
                       GrammarData.Manifest GrammarData.Number,
                       GrammarData.Manifest GrammarData.Honorific,
                       GrammarData.Manifest GrammarData.Definiteness,
                       GrammarData.Manifest GrammarData.Specificity)]
                   (GHC.Read.list1
                      @ (GrammarData.Manifest GrammarData.Gender,
                         GrammarData.Manifest GrammarData.Animacy,
                         GrammarData.Manifest GrammarData.Case,
                         GrammarData.Manifest GrammarData.Number,
                         GrammarData.Manifest GrammarData.Honorific,
                         GrammarData.Manifest GrammarData.Definiteness,
                         GrammarData.Manifest GrammarData.Specificity)
                      (GHC.Read.$fRead(,,,,,,)2
                         @ (GrammarData.Manifest GrammarData.Gender)
                         @ (GrammarData.Manifest GrammarData.Animacy)
                         @ (GrammarData.Manifest GrammarData.Case)
                         @ (GrammarData.Manifest GrammarData.Number)
                         @ (GrammarData.Manifest GrammarData.Honorific)
                         @ (GrammarData.Manifest GrammarData.Definiteness)
                         @ (GrammarData.Manifest GrammarData.Specificity)
                         GrammarData.$s$fRead(,,,,,,)7
                         GrammarData.$s$fRead(,,,,,,)6
                         GrammarData.$s$fRead(,,,,,,)5
                         GrammarData.$s$fRead(,,,,,,)4
                         GrammarData.$s$fRead(,,,,,,)3
                         GrammarData.$s$fRead(,,,,,,)2
                         GrammarData.$s$fRead(,,,,,,)1)
                        `cast`
                      (Trans
                           (<Text.ParserCombinators.ReadPrec.Prec>_R
                            ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                          <(GrammarData.Manifest GrammarData.Gender,
                                            GrammarData.Manifest GrammarData.Animacy,
                                            GrammarData.Manifest GrammarData.Case,
                                            GrammarData.Manifest GrammarData.Number,
                                            GrammarData.Manifest GrammarData.Honorific,
                                            GrammarData.Manifest GrammarData.Definiteness,
                                            GrammarData.Manifest GrammarData.Specificity)>_R))
                           (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                     <(GrammarData.Manifest GrammarData.Gender,
                                       GrammarData.Manifest GrammarData.Animacy,
                                       GrammarData.Manifest GrammarData.Case,
                                       GrammarData.Manifest GrammarData.Number,
                                       GrammarData.Manifest GrammarData.Honorific,
                                       GrammarData.Manifest GrammarData.Definiteness,
                                       GrammarData.Manifest GrammarData.Specificity)>_R)))
                      GHC.Read.$fRead(,)7
                      @ [(GrammarData.Manifest GrammarData.Gender,
                          GrammarData.Manifest GrammarData.Animacy,
                          GrammarData.Manifest GrammarData.Case,
                          GrammarData.Manifest GrammarData.Number,
                          GrammarData.Manifest GrammarData.Honorific,
                          GrammarData.Manifest GrammarData.Definiteness,
                          GrammarData.Manifest GrammarData.Specificity)]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [(GrammarData.Manifest GrammarData.Gender,
                             GrammarData.Manifest GrammarData.Animacy,
                             GrammarData.Manifest GrammarData.Case,
                             GrammarData.Manifest GrammarData.Number,
                             GrammarData.Manifest GrammarData.Honorific,
                             GrammarData.Manifest GrammarData.Definiteness,
                             GrammarData.Manifest GrammarData.Specificity)]))) -}
1df250aa3a41121168d3dae8c89273cb
  $s$fRead(,,,,,,)_$s$fRead(,,,,,,)_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS
         (GrammarData.Manifest GrammarData.Gender,
          GrammarData.Manifest GrammarData.Animacy,
          GrammarData.Manifest GrammarData.Case,
          GrammarData.Manifest GrammarData.Number,
          GrammarData.Manifest GrammarData.Honorific,
          GrammarData.Manifest GrammarData.Definiteness,
          GrammarData.Manifest GrammarData.Specificity)
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadP.run
                   @ (GrammarData.Manifest GrammarData.Gender,
                      GrammarData.Manifest GrammarData.Animacy,
                      GrammarData.Manifest GrammarData.Case,
                      GrammarData.Manifest GrammarData.Number,
                      GrammarData.Manifest GrammarData.Honorific,
                      GrammarData.Manifest GrammarData.Definiteness,
                      GrammarData.Manifest GrammarData.Specificity)
                   (GHC.Read.$fRead(,,,,,,)2
                      @ (GrammarData.Manifest GrammarData.Gender)
                      @ (GrammarData.Manifest GrammarData.Animacy)
                      @ (GrammarData.Manifest GrammarData.Case)
                      @ (GrammarData.Manifest GrammarData.Number)
                      @ (GrammarData.Manifest GrammarData.Honorific)
                      @ (GrammarData.Manifest GrammarData.Definiteness)
                      @ (GrammarData.Manifest GrammarData.Specificity)
                      GrammarData.$s$fRead(,,,,,,)7
                      GrammarData.$s$fRead(,,,,,,)6
                      GrammarData.$s$fRead(,,,,,,)5
                      GrammarData.$s$fRead(,,,,,,)4
                      GrammarData.$s$fRead(,,,,,,)3
                      GrammarData.$s$fRead(,,,,,,)2
                      GrammarData.$s$fRead(,,,,,,)1
                      eta
                      @ (GrammarData.Manifest GrammarData.Gender,
                         GrammarData.Manifest GrammarData.Animacy,
                         GrammarData.Manifest GrammarData.Case,
                         GrammarData.Manifest GrammarData.Number,
                         GrammarData.Manifest GrammarData.Honorific,
                         GrammarData.Manifest GrammarData.Definiteness,
                         GrammarData.Manifest GrammarData.Specificity)
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ (GrammarData.Manifest GrammarData.Gender,
                            GrammarData.Manifest GrammarData.Animacy,
                            GrammarData.Manifest GrammarData.Case,
                            GrammarData.Manifest GrammarData.Number,
                            GrammarData.Manifest GrammarData.Honorific,
                            GrammarData.Manifest GrammarData.Definiteness,
                            GrammarData.Manifest GrammarData.Specificity)))) -}
bca54c8943426aaabb7eead4f61ed8f0
  $w$cshowsPrec ::
    GrammarData.Animacy -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: GrammarData.Animacy w1 :: GHC.Base.String ->
                 case w of wild {
                   GrammarData.AN
                   -> GHC.Base.++ @ GHC.Types.Char GrammarData.$fReadAnimacy23 w1
                   GrammarData.HUM
                   -> GHC.Base.++ @ GHC.Types.Char GrammarData.$fReadAnimacy20 w1
                   GrammarData.NHUM
                   -> GHC.Base.++ @ GHC.Types.Char GrammarData.$fReadAnimacy17 w1
                   GrammarData.ZO
                   -> GHC.Base.++ @ GHC.Types.Char GrammarData.$fReadAnimacy14 w1
                   GrammarData.INAN
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        GrammarData.$fReadAnimacy11
                        w1 }) -}
414449d8392b340149498bdeea675855
  $w$cshowsPrec1 ::
    GrammarData.Case -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: GrammarData.Case w1 :: GHC.Base.String ->
                 case w of wild {
                   GrammarData.NOM
                   -> GHC.Base.++ @ GHC.Types.Char GrammarData.$fReadCase43 w1
                   GrammarData.ACC
                   -> GHC.Base.++ @ GHC.Types.Char GrammarData.$fReadCase40 w1
                   GrammarData.ERG
                   -> GHC.Base.++ @ GHC.Types.Char GrammarData.$fReadCase37 w1
                   GrammarData.GEN
                   -> GHC.Base.++ @ GHC.Types.Char GrammarData.$fReadCase34 w1
                   GrammarData.DAT
                   -> GHC.Base.++ @ GHC.Types.Char GrammarData.$fReadCase31 w1
                   GrammarData.LOC
                   -> GHC.Base.++ @ GHC.Types.Char GrammarData.$fReadCase28 w1
                   GrammarData.PREP
                   -> GHC.Base.++ @ GHC.Types.Char GrammarData.$fReadCase25 w1
                   GrammarData.ABL
                   -> GHC.Base.++ @ GHC.Types.Char GrammarData.$fReadCase22 w1
                   GrammarData.INS
                   -> GHC.Base.++ @ GHC.Types.Char GrammarData.$fReadCase19 w1
                   GrammarData.VOC
                   -> GHC.Base.++ @ GHC.Types.Char GrammarData.$fReadCase16 w1 }) -}
ce1309e748ae1ead2a5127b0f086bbd0
  $w$cshowsPrec10 ::
    GrammarData.Transitivity -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: GrammarData.Transitivity
                   w1 :: GHC.Base.String ->
                 case w of wild {
                   GrammarData.INTR
                   -> GHC.Base.++ @ GHC.Types.Char GrammarData.$fReadTransitivity15 w1
                   GrammarData.TR
                   -> GHC.Base.++ @ GHC.Types.Char GrammarData.$fReadTransitivity12 w1
                   GrammarData.DITR
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        GrammarData.$fReadTransitivity9
                        w1 }) -}
b7c0182e94b370d685bfdc0c00290938
  $w$cshowsPrec11 ::
    GrammarData.Voice -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: GrammarData.Voice w1 :: GHC.Base.String ->
                 case w of wild {
                   GrammarData.ACT
                   -> GHC.Base.++ @ GHC.Types.Char GrammarData.$fReadVoice15 w1
                   GrammarData.MID
                   -> GHC.Base.++ @ GHC.Types.Char GrammarData.$fReadVoice12 w1
                   GrammarData.PAS
                   -> GHC.Base.++ @ GHC.Types.Char GrammarData.$fReadVoice9 w1 }) -}
c2de0d68a0340ca4bb61c34dcc01b06e
  $w$cshowsPrec2 ::
    GrammarData.Evidentiality -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: GrammarData.Evidentiality
                   w1 :: GHC.Base.String ->
                 case w of wild {
                   GrammarData.EXP
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        GrammarData.$fReadEvidentiality43
                        w1
                   GrammarData.SENS
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        GrammarData.$fReadEvidentiality40
                        w1
                   GrammarData.VIS
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        GrammarData.$fReadEvidentiality37
                        w1
                   GrammarData.NVIS
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        GrammarData.$fReadEvidentiality34
                        w1
                   GrammarData.AUD
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        GrammarData.$fReadEvidentiality31
                        w1
                   GrammarData.INFER
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        GrammarData.$fReadEvidentiality28
                        w1
                   GrammarData.REP
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        GrammarData.$fReadEvidentiality25
                        w1
                   GrammarData.HSY
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        GrammarData.$fReadEvidentiality22
                        w1
                   GrammarData.QUO
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        GrammarData.$fReadEvidentiality19
                        w1
                   GrammarData.ASS
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        GrammarData.$fReadEvidentiality16
                        w1 }) -}
e7961ab838d9fccce2f6168c4bdf0b78
  $w$cshowsPrec3 ::
    GrammarData.Gender -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: GrammarData.Gender w1 :: GHC.Base.String ->
                 case w of wild {
                   GrammarData.M
                   -> GHC.Base.++ @ GHC.Types.Char GrammarData.$fReadGender19 w1
                   GrammarData.F
                   -> GHC.Base.++ @ GHC.Types.Char GrammarData.$fReadGender16 w1
                   GrammarData.COM
                   -> GHC.Base.++ @ GHC.Types.Char GrammarData.$fReadGender13 w1
                   GrammarData.N
                   -> GHC.Base.++ @ GHC.Types.Char GrammarData.$fReadGender10 w1 }) -}
81fc850834bd85ff0c45f50e741d2360
  $w$cshowsPrec4 ::
    GHC.Prim.Int#
    -> GrammarData.Manifest ([GrammarData.Gender], GHC.Types.Int)
    -> GrammarData.Manifest ([GrammarData.Animacy], GHC.Types.Int)
    -> GrammarData.Manifest ([GrammarData.Case], GHC.Types.Int)
    -> GrammarData.Manifest ([GrammarData.Number], GHC.Types.Int)
    -> GrammarData.Manifest ([GrammarData.Honorific], GHC.Types.Int)
    -> GrammarData.Manifest ([GrammarData.Definiteness], GHC.Types.Int)
    -> GrammarData.Manifest ([GrammarData.Specificity], GHC.Types.Int)
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 9,
     Strictness: <L,U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,U>,
     Inline: [0] -}
8ed84510caef32c77eef1e60822eb3ba
  $w$cshowsPrec5 ::
    GrammarData.Number -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: GrammarData.Number w1 :: GHC.Base.String ->
                 case w of wild {
                   GrammarData.SG
                   -> GHC.Base.++ @ GHC.Types.Char GrammarData.$fReadNumber23 w1
                   GrammarData.DU
                   -> GHC.Base.++ @ GHC.Types.Char GrammarData.$fReadNumber20 w1
                   GrammarData.TRI
                   -> GHC.Base.++ @ GHC.Types.Char GrammarData.$fReadNumber17 w1
                   GrammarData.PA
                   -> GHC.Base.++ @ GHC.Types.Char GrammarData.$fReadNumber14 w1
                   GrammarData.PL
                   -> GHC.Base.++ @ GHC.Types.Char GrammarData.$fReadNumber11 w1 }) -}
e59e026f6f243dc64e3e0392a6b7fb92
  $w$cshowsPrec6 ::
    GHC.Prim.Int#
    -> GrammarData.ManifestSystem -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><S,1*U><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   w :: GrammarData.ManifestSystem
                   w1 :: GHC.Base.String ->
                 case w of wild {
                   GrammarData.PreParticleSystem b1
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11) of wild1 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             GrammarData.$fShowManifestSystem6
                             (GHC.Show.showList__
                                @ (PhonemeData.Morpheme,
                                   (GrammarData.Manifest GrammarData.Gender,
                                    GrammarData.Manifest GrammarData.Animacy,
                                    GrammarData.Manifest GrammarData.Case,
                                    GrammarData.Manifest GrammarData.Number,
                                    GrammarData.Manifest GrammarData.Honorific,
                                    GrammarData.Manifest GrammarData.Definiteness,
                                    GrammarData.Manifest GrammarData.Specificity))
                                GrammarData.$fShowManifestSystem5
                                b1
                                w1)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                GrammarData.$fShowManifestSystem6
                                (GHC.Show.showList__
                                   @ (PhonemeData.Morpheme,
                                      (GrammarData.Manifest GrammarData.Gender,
                                       GrammarData.Manifest GrammarData.Animacy,
                                       GrammarData.Manifest GrammarData.Case,
                                       GrammarData.Manifest GrammarData.Number,
                                       GrammarData.Manifest GrammarData.Honorific,
                                       GrammarData.Manifest GrammarData.Definiteness,
                                       GrammarData.Manifest GrammarData.Specificity))
                                   GrammarData.$fShowManifestSystem5
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w1))) }
                   GrammarData.PostParticleSystem b1
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11) of wild1 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             GrammarData.$fShowManifestSystem4
                             (GHC.Show.showList__
                                @ (PhonemeData.Morpheme,
                                   (GrammarData.Manifest GrammarData.Gender,
                                    GrammarData.Manifest GrammarData.Animacy,
                                    GrammarData.Manifest GrammarData.Case,
                                    GrammarData.Manifest GrammarData.Number,
                                    GrammarData.Manifest GrammarData.Honorific,
                                    GrammarData.Manifest GrammarData.Definiteness,
                                    GrammarData.Manifest GrammarData.Specificity))
                                GrammarData.$fShowManifestSystem5
                                b1
                                w1)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                GrammarData.$fShowManifestSystem4
                                (GHC.Show.showList__
                                   @ (PhonemeData.Morpheme,
                                      (GrammarData.Manifest GrammarData.Gender,
                                       GrammarData.Manifest GrammarData.Animacy,
                                       GrammarData.Manifest GrammarData.Case,
                                       GrammarData.Manifest GrammarData.Number,
                                       GrammarData.Manifest GrammarData.Honorific,
                                       GrammarData.Manifest GrammarData.Definiteness,
                                       GrammarData.Manifest GrammarData.Specificity))
                                   GrammarData.$fShowManifestSystem5
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w1))) }
                   GrammarData.PrefixSystem b1
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11) of wild1 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             GrammarData.$fShowManifestSystem3
                             (GHC.Show.showList__
                                @ (PhonemeData.Morpheme,
                                   (GrammarData.Manifest GrammarData.Gender,
                                    GrammarData.Manifest GrammarData.Animacy,
                                    GrammarData.Manifest GrammarData.Case,
                                    GrammarData.Manifest GrammarData.Number,
                                    GrammarData.Manifest GrammarData.Honorific,
                                    GrammarData.Manifest GrammarData.Definiteness,
                                    GrammarData.Manifest GrammarData.Specificity))
                                GrammarData.$fShowManifestSystem5
                                b1
                                w1)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                GrammarData.$fShowManifestSystem3
                                (GHC.Show.showList__
                                   @ (PhonemeData.Morpheme,
                                      (GrammarData.Manifest GrammarData.Gender,
                                       GrammarData.Manifest GrammarData.Animacy,
                                       GrammarData.Manifest GrammarData.Case,
                                       GrammarData.Manifest GrammarData.Number,
                                       GrammarData.Manifest GrammarData.Honorific,
                                       GrammarData.Manifest GrammarData.Definiteness,
                                       GrammarData.Manifest GrammarData.Specificity))
                                   GrammarData.$fShowManifestSystem5
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w1))) }
                   GrammarData.SuffixSystem b1
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11) of wild1 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             GrammarData.$fShowManifestSystem2
                             (GHC.Show.showList__
                                @ (PhonemeData.Morpheme,
                                   (GrammarData.Manifest GrammarData.Gender,
                                    GrammarData.Manifest GrammarData.Animacy,
                                    GrammarData.Manifest GrammarData.Case,
                                    GrammarData.Manifest GrammarData.Number,
                                    GrammarData.Manifest GrammarData.Honorific,
                                    GrammarData.Manifest GrammarData.Definiteness,
                                    GrammarData.Manifest GrammarData.Specificity))
                                GrammarData.$fShowManifestSystem5
                                b1
                                w1)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                GrammarData.$fShowManifestSystem2
                                (GHC.Show.showList__
                                   @ (PhonemeData.Morpheme,
                                      (GrammarData.Manifest GrammarData.Gender,
                                       GrammarData.Manifest GrammarData.Animacy,
                                       GrammarData.Manifest GrammarData.Case,
                                       GrammarData.Manifest GrammarData.Number,
                                       GrammarData.Manifest GrammarData.Honorific,
                                       GrammarData.Manifest GrammarData.Definiteness,
                                       GrammarData.Manifest GrammarData.Specificity))
                                   GrammarData.$fShowManifestSystem5
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w1))) } }) -}
1f9e0042782b650d0d74a52671e595f1
  $w$cshowsPrec7 ::
    GrammarData.Mood -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: GrammarData.Mood w1 :: GHC.Base.String ->
                 case w of wild {
                   GrammarData.IND
                   -> GHC.Base.++ @ GHC.Types.Char GrammarData.$fReadMood43 w1
                   GrammarData.IRR
                   -> GHC.Base.++ @ GHC.Types.Char GrammarData.$fReadMood40 w1
                   GrammarData.DEO
                   -> GHC.Base.++ @ GHC.Types.Char GrammarData.$fReadMood37 w1
                   GrammarData.IMP
                   -> GHC.Base.++ @ GHC.Types.Char GrammarData.$fReadMood34 w1
                   GrammarData.JUS
                   -> GHC.Base.++ @ GHC.Types.Char GrammarData.$fReadMood31 w1
                   GrammarData.OPT
                   -> GHC.Base.++ @ GHC.Types.Char GrammarData.$fReadMood28 w1
                   GrammarData.EPIS
                   -> GHC.Base.++ @ GHC.Types.Char GrammarData.$fReadMood25 w1
                   GrammarData.SBJV
                   -> GHC.Base.++ @ GHC.Types.Char GrammarData.$fReadMood22 w1
                   GrammarData.POT
                   -> GHC.Base.++ @ GHC.Types.Char GrammarData.$fReadMood19 w1
                   GrammarData.COND
                   -> GHC.Base.++ @ GHC.Types.Char GrammarData.$fReadMood16 w1 }) -}
3b7d81f4c94437e6844a3064e4af630e
  $w$cshowsPrec8 ::
    GrammarData.Person -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: GrammarData.Person w1 :: GHC.Base.String ->
                 case w of wild {
                   GrammarData.FIRST
                   -> GHC.Base.++ @ GHC.Types.Char GrammarData.$fReadPerson15 w1
                   GrammarData.SECOND
                   -> GHC.Base.++ @ GHC.Types.Char GrammarData.$fReadPerson12 w1
                   GrammarData.THIRD
                   -> GHC.Base.++ @ GHC.Types.Char GrammarData.$fReadPerson9 w1 }) -}
635ace3f32ba47f6e643bb471451b3ec
  $w$cshowsPrec9 ::
    GrammarData.Tense -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: GrammarData.Tense w1 :: GHC.Base.String ->
                 case w of wild {
                   GrammarData.PST
                   -> GHC.Base.++ @ GHC.Types.Char GrammarData.$fReadTense39 w1
                   GrammarData.REM
                   -> GHC.Base.++ @ GHC.Types.Char GrammarData.$fReadTense36 w1
                   GrammarData.REC
                   -> GHC.Base.++ @ GHC.Types.Char GrammarData.$fReadTense33 w1
                   GrammarData.NPST
                   -> GHC.Base.++ @ GHC.Types.Char GrammarData.$fReadTense30 w1
                   GrammarData.PRS
                   -> GHC.Base.++ @ GHC.Types.Char GrammarData.$fReadTense27 w1
                   GrammarData.NFUT
                   -> GHC.Base.++ @ GHC.Types.Char GrammarData.$fReadTense24 w1
                   GrammarData.FUT
                   -> GHC.Base.++ @ GHC.Types.Char GrammarData.$fReadTense21 w1
                   GrammarData.IMMF
                   -> GHC.Base.++ @ GHC.Types.Char GrammarData.$fReadTense18 w1
                   GrammarData.REMF
                   -> GHC.Base.++ @ GHC.Types.Char GrammarData.$fReadTense15 w1 }) -}
e59e026f6f243dc64e3e0392a6b7fb92
  $wa ::
    GHC.Prim.Int#
    -> forall b.
       (GrammarData.ManifestSystem -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0] -}
bca54c8943426aaabb7eead4f61ed8f0
  data Animacy = AN | HUM | NHUM | ZO | INAN
    Promotable
80861930bf27d683d5ab7b0a02511c13
  data Aspect = PFV | IPFV
    Promotable
414449d8392b340149498bdeea675855
  data Case
    = NOM | ACC | ERG | GEN | DAT | LOC | PREP | ABL | INS | VOC
    Promotable
b259ad971f4abd96d51568b3b5e664ea
  data Definiteness = DEF | INDF
    Promotable
c2de0d68a0340ca4bb61c34dcc01b06e
  data Evidentiality
    = EXP | SENS | VIS | NVIS | AUD | INFER | REP | HSY | QUO | ASS
    Promotable
e7961ab838d9fccce2f6168c4bdf0b78
  data Gender = M | F | COM | N
    Promotable
c21478941058e7db3f75b02a2a8e65d0
  data GrammarSystem
    = GrammarSystem {gSys :: GrammarData.Manifest
                               ([GrammarData.Gender], GHC.Types.Int),
                     aSys :: GrammarData.Manifest
                               ([GrammarData.Animacy], GHC.Types.Int),
                     cSys :: GrammarData.Manifest ([GrammarData.Case], GHC.Types.Int),
                     nSys :: GrammarData.Manifest ([GrammarData.Number], GHC.Types.Int),
                     hSys :: GrammarData.Manifest
                               ([GrammarData.Honorific], GHC.Types.Int),
                     dSys :: GrammarData.Manifest
                               ([GrammarData.Definiteness], GHC.Types.Int),
                     sSys :: GrammarData.Manifest
                               ([GrammarData.Specificity], GHC.Types.Int)}
8bea2a401488a9b7443e58342e97c338
  data Honorific = FAM | FORM
    Promotable
bf97cdc74f3aad6d32e164918e597133
  data Manifest a
    = NoManifest | PreParticle a | PostParticle a | Prefix a | Suffix a
    Promotable
e59e026f6f243dc64e3e0392a6b7fb92
  data ManifestSystem
    = PreParticleSystem [(PhonemeData.Morpheme,
                          (GrammarData.Manifest GrammarData.Gender,
                           GrammarData.Manifest GrammarData.Animacy,
                           GrammarData.Manifest GrammarData.Case,
                           GrammarData.Manifest GrammarData.Number,
                           GrammarData.Manifest GrammarData.Honorific,
                           GrammarData.Manifest GrammarData.Definiteness,
                           GrammarData.Manifest GrammarData.Specificity))]
    | PostParticleSystem [(PhonemeData.Morpheme,
                           (GrammarData.Manifest GrammarData.Gender,
                            GrammarData.Manifest GrammarData.Animacy,
                            GrammarData.Manifest GrammarData.Case,
                            GrammarData.Manifest GrammarData.Number,
                            GrammarData.Manifest GrammarData.Honorific,
                            GrammarData.Manifest GrammarData.Definiteness,
                            GrammarData.Manifest GrammarData.Specificity))]
    | PrefixSystem [(PhonemeData.Morpheme,
                     (GrammarData.Manifest GrammarData.Gender,
                      GrammarData.Manifest GrammarData.Animacy,
                      GrammarData.Manifest GrammarData.Case,
                      GrammarData.Manifest GrammarData.Number,
                      GrammarData.Manifest GrammarData.Honorific,
                      GrammarData.Manifest GrammarData.Definiteness,
                      GrammarData.Manifest GrammarData.Specificity))]
    | SuffixSystem [(PhonemeData.Morpheme,
                     (GrammarData.Manifest GrammarData.Gender,
                      GrammarData.Manifest GrammarData.Animacy,
                      GrammarData.Manifest GrammarData.Case,
                      GrammarData.Manifest GrammarData.Number,
                      GrammarData.Manifest GrammarData.Honorific,
                      GrammarData.Manifest GrammarData.Definiteness,
                      GrammarData.Manifest GrammarData.Specificity))]
1f9e0042782b650d0d74a52671e595f1
  data Mood
    = IND | IRR | DEO | IMP | JUS | OPT | EPIS | SBJV | POT | COND
    Promotable
8ed84510caef32c77eef1e60822eb3ba
  data Number = SG | DU | TRI | PA | PL
    Promotable
3b7d81f4c94437e6844a3064e4af630e
  data Person = FIRST | SECOND | THIRD
    Promotable
fd1897a0d2b932b38e0c47ea3af5837d
  data Polarity = AFF | NEG
    Promotable
f663e7ff07f2909cb51f85e829fe40a9
  data Specificity = SPEC | NSPEC
    Promotable
635ace3f32ba47f6e643bb471451b3ec
  data Tense
    = PST | REM | REC | NPST | PRS | NFUT | FUT | IMMF | REMF
    Promotable
ce1309e748ae1ead2a5127b0f086bbd0
  data Transitivity = INTR | TR | DITR
    Promotable
b7c0182e94b370d685bfdc0c00290938
  data Voice = ACT | MID | PAS
    Promotable
70ef043381ff12719553fe55296234a2
  data Volition = VOL | NVOL
    Promotable
d269b60abc68129706c3bc48103e15dc
  aSys ::
    GrammarData.GrammarSystem
    -> GrammarData.Manifest ([GrammarData.Animacy], GHC.Types.Int)
  RecSel GrammarData.GrammarSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLLL),1*U(A,1*U,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarData.GrammarSystem ->
                 case ds of wild { GrammarData.GrammarSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds2 }) -}
bb642be0cef669d7093c155cfa22c6c8
  cSys ::
    GrammarData.GrammarSystem
    -> GrammarData.Manifest ([GrammarData.Case], GHC.Types.Int)
  RecSel GrammarData.GrammarSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLLL),1*U(A,A,1*U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarData.GrammarSystem ->
                 case ds of wild { GrammarData.GrammarSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds3 }) -}
020fc030b1c4cd50cbe8a69ade9b4446
  dSys ::
    GrammarData.GrammarSystem
    -> GrammarData.Manifest ([GrammarData.Definiteness], GHC.Types.Int)
  RecSel GrammarData.GrammarSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLSL),1*U(A,A,A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarData.GrammarSystem ->
                 case ds of wild { GrammarData.GrammarSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds6 }) -}
3a24a89280b24f14e33aff4de4a13257
  gSys ::
    GrammarData.GrammarSystem
    -> GrammarData.Manifest ([GrammarData.Gender], GHC.Types.Int)
  RecSel GrammarData.GrammarSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLLL),1*U(1*U,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarData.GrammarSystem ->
                 case ds of wild { GrammarData.GrammarSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds1 }) -}
60f502704f41b4fa1b7b87c322567435
  hSys ::
    GrammarData.GrammarSystem
    -> GrammarData.Manifest ([GrammarData.Honorific], GHC.Types.Int)
  RecSel GrammarData.GrammarSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSLL),1*U(A,A,A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarData.GrammarSystem ->
                 case ds of wild { GrammarData.GrammarSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds5 }) -}
9a782565a5dbf19aa97494dc70bec11d
  nSys ::
    GrammarData.GrammarSystem
    -> GrammarData.Manifest ([GrammarData.Number], GHC.Types.Int)
  RecSel GrammarData.GrammarSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLLL),1*U(A,A,A,1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarData.GrammarSystem ->
                 case ds of wild { GrammarData.GrammarSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds4 }) -}
ea6ca5c1bf5c893d17ea94914d0bd9da
  sSys ::
    GrammarData.GrammarSystem
    -> GrammarData.Manifest ([GrammarData.Specificity], GHC.Types.Int)
  RecSel GrammarData.GrammarSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLS),1*U(A,A,A,A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarData.GrammarSystem ->
                 case ds of wild { GrammarData.GrammarSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds7 }) -}
instance GHC.Classes.Eq [GrammarData.Animacy]
  = GrammarData.$fEqAnimacy
instance GHC.Classes.Eq [GrammarData.Aspect]
  = GrammarData.$fEqAspect
instance GHC.Classes.Eq [GrammarData.Case] = GrammarData.$fEqCase
instance GHC.Classes.Eq [GrammarData.Definiteness]
  = GrammarData.$fEqDefiniteness
instance GHC.Classes.Eq [GrammarData.Evidentiality]
  = GrammarData.$fEqEvidentiality
instance GHC.Classes.Eq [GrammarData.Gender]
  = GrammarData.$fEqGender
instance GHC.Classes.Eq [GrammarData.Honorific]
  = GrammarData.$fEqHonorific
instance GHC.Classes.Eq [GrammarData.Manifest]
  = GrammarData.$fEqManifest
instance GHC.Classes.Eq [GrammarData.ManifestSystem]
  = GrammarData.$fEqManifestSystem
instance GHC.Classes.Eq [GrammarData.Mood] = GrammarData.$fEqMood
instance GHC.Classes.Eq [GrammarData.Number]
  = GrammarData.$fEqNumber
instance GHC.Classes.Eq [GrammarData.Person]
  = GrammarData.$fEqPerson
instance GHC.Classes.Eq [GrammarData.Polarity]
  = GrammarData.$fEqPolarity
instance GHC.Classes.Eq [GrammarData.Specificity]
  = GrammarData.$fEqSpecificity
instance GHC.Classes.Eq [GrammarData.Tense] = GrammarData.$fEqTense
instance GHC.Classes.Eq [GrammarData.Transitivity]
  = GrammarData.$fEqTransitivity
instance GHC.Classes.Eq [GrammarData.Voice] = GrammarData.$fEqVoice
instance GHC.Classes.Eq [GrammarData.Volition]
  = GrammarData.$fEqVolition
instance GHC.Read.Read [GrammarData.Animacy]
  = GrammarData.$fReadAnimacy
instance GHC.Read.Read [GrammarData.Aspect]
  = GrammarData.$fReadAspect
instance GHC.Read.Read [GrammarData.Case] = GrammarData.$fReadCase
instance GHC.Read.Read [GrammarData.Definiteness]
  = GrammarData.$fReadDefiniteness
instance GHC.Read.Read [GrammarData.Evidentiality]
  = GrammarData.$fReadEvidentiality
instance GHC.Read.Read [GrammarData.Gender]
  = GrammarData.$fReadGender
instance GHC.Read.Read [GrammarData.Honorific]
  = GrammarData.$fReadHonorific
instance GHC.Read.Read [GrammarData.Manifest]
  = GrammarData.$fReadManifest
instance GHC.Read.Read [GrammarData.ManifestSystem]
  = GrammarData.$fReadManifestSystem
instance GHC.Read.Read [GrammarData.Mood] = GrammarData.$fReadMood
instance GHC.Read.Read [GrammarData.Number]
  = GrammarData.$fReadNumber
instance GHC.Read.Read [GrammarData.Person]
  = GrammarData.$fReadPerson
instance GHC.Read.Read [GrammarData.Polarity]
  = GrammarData.$fReadPolarity
instance GHC.Read.Read [GrammarData.Specificity]
  = GrammarData.$fReadSpecificity
instance GHC.Read.Read [GrammarData.Tense]
  = GrammarData.$fReadTense
instance GHC.Read.Read [GrammarData.Transitivity]
  = GrammarData.$fReadTransitivity
instance GHC.Read.Read [GrammarData.Voice]
  = GrammarData.$fReadVoice
instance GHC.Read.Read [GrammarData.Volition]
  = GrammarData.$fReadVolition
instance GHC.Show.Show [GrammarData.Animacy]
  = GrammarData.$fShowAnimacy
instance GHC.Show.Show [GrammarData.Aspect]
  = GrammarData.$fShowAspect
instance GHC.Show.Show [GrammarData.Case] = GrammarData.$fShowCase
instance GHC.Show.Show [GrammarData.Definiteness]
  = GrammarData.$fShowDefiniteness
instance GHC.Show.Show [GrammarData.Evidentiality]
  = GrammarData.$fShowEvidentiality
instance GHC.Show.Show [GrammarData.Gender]
  = GrammarData.$fShowGender
instance GHC.Show.Show [GrammarData.GrammarSystem]
  = GrammarData.$fShowGrammarSystem
instance GHC.Show.Show [GrammarData.Honorific]
  = GrammarData.$fShowHonorific
instance GHC.Show.Show [GrammarData.Manifest]
  = GrammarData.$fShowManifest
instance GHC.Show.Show [GrammarData.ManifestSystem]
  = GrammarData.$fShowManifestSystem
instance GHC.Show.Show [GrammarData.Mood] = GrammarData.$fShowMood
instance GHC.Show.Show [GrammarData.Number]
  = GrammarData.$fShowNumber
instance GHC.Show.Show [GrammarData.Person]
  = GrammarData.$fShowPerson
instance GHC.Show.Show [GrammarData.Polarity]
  = GrammarData.$fShowPolarity
instance GHC.Show.Show [GrammarData.Specificity]
  = GrammarData.$fShowSpecificity
instance GHC.Show.Show [GrammarData.Tense]
  = GrammarData.$fShowTense
instance GHC.Show.Show [GrammarData.Transitivity]
  = GrammarData.$fShowTransitivity
instance GHC.Show.Show [GrammarData.Voice]
  = GrammarData.$fShowVoice
instance GHC.Show.Show [GrammarData.Volition]
  = GrammarData.$fShowVolition
"SPEC $c/= @ Animacy" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                GrammarData.Animacy
  GrammarData.$fEqManifest_$c/= @ GrammarData.Animacy $dEq
  = GrammarData.$fEqManifest2
"SPEC $c/= @ Case" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                             GrammarData.Case
  GrammarData.$fEqManifest_$c/= @ GrammarData.Case $dEq
  = GrammarData.$fEqManifest3
"SPEC $c/= @ Definiteness" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                     GrammarData.Definiteness
  GrammarData.$fEqManifest_$c/= @ GrammarData.Definiteness $dEq
  = GrammarData.$fEqManifest6
"SPEC $c/= @ Gender" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                               GrammarData.Gender
  GrammarData.$fEqManifest_$c/= @ GrammarData.Gender $dEq
  = GrammarData.$fEqManifest1
"SPEC $c/= @ Honorific" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                  GrammarData.Honorific
  GrammarData.$fEqManifest_$c/= @ GrammarData.Honorific $dEq
  = GrammarData.$fEqManifest5
"SPEC $c/= @ Number" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                               GrammarData.Number
  GrammarData.$fEqManifest_$c/= @ GrammarData.Number $dEq
  = GrammarData.$fEqManifest4
"SPEC $c/= @ Specificity" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                    GrammarData.Specificity
  GrammarData.$fEqManifest_$c/= @ GrammarData.Specificity $dEq
  = GrammarData.$fEqManifest7
"SPEC $c== @ Animacy" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                GrammarData.Animacy
  GrammarData.$fEqManifest_$c==2 @ GrammarData.Animacy $dEq
  = GrammarData.$fEqManifest_$s$c==1
"SPEC $c== @ Case" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                             GrammarData.Case
  GrammarData.$fEqManifest_$c==2 @ GrammarData.Case $dEq
  = GrammarData.$fEqManifest_$s$c==2
"SPEC $c== @ Definiteness" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                     GrammarData.Definiteness
  GrammarData.$fEqManifest_$c==2 @ GrammarData.Definiteness $dEq
  = GrammarData.$fEqManifest_$s$c==5
"SPEC $c== @ Gender" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                               GrammarData.Gender
  GrammarData.$fEqManifest_$c==2 @ GrammarData.Gender $dEq
  = GrammarData.$fEqManifest_$s$c==
"SPEC $c== @ Honorific" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                  GrammarData.Honorific
  GrammarData.$fEqManifest_$c==2 @ GrammarData.Honorific $dEq
  = GrammarData.$fEqManifest_$s$c==4
"SPEC $c== @ Number" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                               GrammarData.Number
  GrammarData.$fEqManifest_$c==2 @ GrammarData.Number $dEq
  = GrammarData.$fEqManifest_$s$c==3
"SPEC $c== @ Specificity" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                    GrammarData.Specificity
  GrammarData.$fEqManifest_$c==2 @ GrammarData.Specificity $dEq
  = GrammarData.$fEqManifest_$s$c==6
"SPEC $creadList @ Animacy" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                        GrammarData.Animacy
  GrammarData.$fReadManifest_$creadList @ GrammarData.Animacy $dRead
  = GrammarData.$fReadManifest_$sreadListDefault1
"SPEC $creadList @ Case" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                     GrammarData.Case
  GrammarData.$fReadManifest_$creadList @ GrammarData.Case $dRead
  = GrammarData.$fReadManifest_$sreadListDefault2
"SPEC $creadList @ Definiteness" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                             GrammarData.Definiteness
  GrammarData.$fReadManifest_$creadList @ GrammarData.Definiteness
                                        $dRead
  = GrammarData.$fReadManifest_$sreadListDefault5
"SPEC $creadList @ Gender" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                       GrammarData.Gender
  GrammarData.$fReadManifest_$creadList @ GrammarData.Gender $dRead
  = GrammarData.$fReadManifest_$sreadListDefault
"SPEC $creadList @ Honorific" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                          GrammarData.Honorific
  GrammarData.$fReadManifest_$creadList @ GrammarData.Honorific
                                        $dRead
  = GrammarData.$fReadManifest_$sreadListDefault4
"SPEC $creadList @ Number" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                       GrammarData.Number
  GrammarData.$fReadManifest_$creadList @ GrammarData.Number $dRead
  = GrammarData.$fReadManifest_$sreadListDefault3
"SPEC $creadList @ Specificity" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                            GrammarData.Specificity
  GrammarData.$fReadManifest_$creadList @ GrammarData.Specificity
                                        $dRead
  = GrammarData.$fReadManifest_$sreadListDefault6
"SPEC $creadListPrec @ Animacy" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                            GrammarData.Animacy
  GrammarData.$fReadManifest_$creadListPrec @ GrammarData.Animacy
                                            $dRead
  = GrammarData.$fReadManifest_$s$creadListPrec1
"SPEC $creadListPrec @ Case" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                         GrammarData.Case
  GrammarData.$fReadManifest_$creadListPrec @ GrammarData.Case $dRead
  = GrammarData.$fReadManifest_$s$creadListPrec2
"SPEC $creadListPrec @ Definiteness" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                 GrammarData.Definiteness
  GrammarData.$fReadManifest_$creadListPrec @ GrammarData.Definiteness
                                            $dRead
  = GrammarData.$fReadManifest_$s$creadListPrec5
"SPEC $creadListPrec @ Gender" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                           GrammarData.Gender
  GrammarData.$fReadManifest_$creadListPrec @ GrammarData.Gender
                                            $dRead
  = GrammarData.$fReadManifest_$s$creadListPrec
"SPEC $creadListPrec @ Honorific" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                              GrammarData.Honorific
  GrammarData.$fReadManifest_$creadListPrec @ GrammarData.Honorific
                                            $dRead
  = GrammarData.$fReadManifest_$s$creadListPrec4
"SPEC $creadListPrec @ Number" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                           GrammarData.Number
  GrammarData.$fReadManifest_$creadListPrec @ GrammarData.Number
                                            $dRead
  = GrammarData.$fReadManifest_$s$creadListPrec3
"SPEC $creadListPrec @ Specificity" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                GrammarData.Specificity
  GrammarData.$fReadManifest_$creadListPrec @ GrammarData.Specificity
                                            $dRead
  = GrammarData.$fReadManifest_$s$creadListPrec6
"SPEC $creadPrec @ Animacy" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                        GrammarData.Animacy
  GrammarData.$fReadManifest_$creadPrec @ GrammarData.Animacy $dRead
  = GrammarData.$fReadManifest_$s$creadPrec1
"SPEC $creadPrec @ Case" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                     GrammarData.Case
  GrammarData.$fReadManifest_$creadPrec @ GrammarData.Case $dRead
  = GrammarData.$fReadManifest_$s$creadPrec2
"SPEC $creadPrec @ Definiteness" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                             GrammarData.Definiteness
  GrammarData.$fReadManifest_$creadPrec @ GrammarData.Definiteness
                                        $dRead
  = GrammarData.$fReadManifest_$s$creadPrec5
"SPEC $creadPrec @ Gender" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                       GrammarData.Gender
  GrammarData.$fReadManifest_$creadPrec @ GrammarData.Gender $dRead
  = GrammarData.$fReadManifest_$s$creadPrec
"SPEC $creadPrec @ Honorific" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                          GrammarData.Honorific
  GrammarData.$fReadManifest_$creadPrec @ GrammarData.Honorific
                                        $dRead
  = GrammarData.$fReadManifest_$s$creadPrec4
"SPEC $creadPrec @ Number" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                       GrammarData.Number
  GrammarData.$fReadManifest_$creadPrec @ GrammarData.Number $dRead
  = GrammarData.$fReadManifest_$s$creadPrec3
"SPEC $creadPrec @ Specificity" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                            GrammarData.Specificity
  GrammarData.$fReadManifest_$creadPrec @ GrammarData.Specificity
                                        $dRead
  = GrammarData.$fReadManifest_$s$creadPrec6
"SPEC $creadsPrec @ Animacy" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                         GrammarData.Animacy
  GrammarData.$fReadManifest_$creadsPrec @ GrammarData.Animacy $dRead
  = GrammarData.$fReadManifest_$s$creadsPrec1
"SPEC $creadsPrec @ Case" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                      GrammarData.Case
  GrammarData.$fReadManifest_$creadsPrec @ GrammarData.Case $dRead
  = GrammarData.$fReadManifest_$s$creadsPrec2
"SPEC $creadsPrec @ Definiteness" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                              GrammarData.Definiteness
  GrammarData.$fReadManifest_$creadsPrec @ GrammarData.Definiteness
                                         $dRead
  = GrammarData.$fReadManifest_$s$creadsPrec5
"SPEC $creadsPrec @ Gender" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                        GrammarData.Gender
  GrammarData.$fReadManifest_$creadsPrec @ GrammarData.Gender $dRead
  = GrammarData.$fReadManifest_$s$creadsPrec
"SPEC $creadsPrec @ Honorific" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                           GrammarData.Honorific
  GrammarData.$fReadManifest_$creadsPrec @ GrammarData.Honorific
                                         $dRead
  = GrammarData.$fReadManifest_$s$creadsPrec4
"SPEC $creadsPrec @ Number" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                        GrammarData.Number
  GrammarData.$fReadManifest_$creadsPrec @ GrammarData.Number $dRead
  = GrammarData.$fReadManifest_$s$creadsPrec3
"SPEC $creadsPrec @ Specificity" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                             GrammarData.Specificity
  GrammarData.$fReadManifest_$creadsPrec @ GrammarData.Specificity
                                         $dRead
  = GrammarData.$fReadManifest_$s$creadsPrec6
"SPEC $cshowsPrec @ ([Animacy], Int)" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                  ([GrammarData.Animacy],
                                                                   GHC.Types.Int)
  GrammarData.$fShowManifest_$cshowsPrec @ ([GrammarData.Animacy],
                                            GHC.Types.Int)
                                         $dShow
  = GrammarData.$fShowManifest_$s$cshowsPrec8
"SPEC $cshowsPrec @ ([Case], Int)" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                               ([GrammarData.Case], GHC.Types.Int)
  GrammarData.$fShowManifest_$cshowsPrec @ ([GrammarData.Case],
                                            GHC.Types.Int)
                                         $dShow
  = GrammarData.$fShowManifest_$s$cshowsPrec9
"SPEC $cshowsPrec @ ([Definiteness], Int)" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                       ([GrammarData.Definiteness],
                                                                        GHC.Types.Int)
  GrammarData.$fShowManifest_$cshowsPrec @ ([GrammarData.Definiteness],
                                            GHC.Types.Int)
                                         $dShow
  = GrammarData.$fShowManifest_$s$cshowsPrec12
"SPEC $cshowsPrec @ ([Gender], Int)" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                 ([GrammarData.Gender],
                                                                  GHC.Types.Int)
  GrammarData.$fShowManifest_$cshowsPrec @ ([GrammarData.Gender],
                                            GHC.Types.Int)
                                         $dShow
  = GrammarData.$fShowManifest_$s$cshowsPrec7
"SPEC $cshowsPrec @ ([Honorific], Int)" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                    ([GrammarData.Honorific],
                                                                     GHC.Types.Int)
  GrammarData.$fShowManifest_$cshowsPrec @ ([GrammarData.Honorific],
                                            GHC.Types.Int)
                                         $dShow
  = GrammarData.$fShowManifest_$s$cshowsPrec11
"SPEC $cshowsPrec @ ([Number], Int)" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                 ([GrammarData.Number],
                                                                  GHC.Types.Int)
  GrammarData.$fShowManifest_$cshowsPrec @ ([GrammarData.Number],
                                            GHC.Types.Int)
                                         $dShow
  = GrammarData.$fShowManifest_$s$cshowsPrec10
"SPEC $cshowsPrec @ ([Specificity], Int)" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                      ([GrammarData.Specificity],
                                                                       GHC.Types.Int)
  GrammarData.$fShowManifest_$cshowsPrec @ ([GrammarData.Specificity],
                                            GHC.Types.Int)
                                         $dShow
  = GrammarData.$fShowManifest_$s$cshowsPrec13
"SPEC $cshowsPrec @ Animacy" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                         GrammarData.Animacy
  GrammarData.$fShowManifest_$cshowsPrec @ GrammarData.Animacy $dShow
  = GrammarData.$fShowManifest_$s$cshowsPrec1
"SPEC $cshowsPrec @ Case" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                      GrammarData.Case
  GrammarData.$fShowManifest_$cshowsPrec @ GrammarData.Case $dShow
  = GrammarData.$fShowManifest_$s$cshowsPrec2
"SPEC $cshowsPrec @ Definiteness" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                              GrammarData.Definiteness
  GrammarData.$fShowManifest_$cshowsPrec @ GrammarData.Definiteness
                                         $dShow
  = GrammarData.$fShowManifest_$s$cshowsPrec5
"SPEC $cshowsPrec @ Gender" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                        GrammarData.Gender
  GrammarData.$fShowManifest_$cshowsPrec @ GrammarData.Gender $dShow
  = GrammarData.$fShowManifest_$s$cshowsPrec
"SPEC $cshowsPrec @ Honorific" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                           GrammarData.Honorific
  GrammarData.$fShowManifest_$cshowsPrec @ GrammarData.Honorific
                                         $dShow
  = GrammarData.$fShowManifest_$s$cshowsPrec4
"SPEC $cshowsPrec @ Number" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                        GrammarData.Number
  GrammarData.$fShowManifest_$cshowsPrec @ GrammarData.Number $dShow
  = GrammarData.$fShowManifest_$s$cshowsPrec3
"SPEC $cshowsPrec @ Specificity" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                             GrammarData.Specificity
  GrammarData.$fShowManifest_$cshowsPrec @ GrammarData.Specificity
                                         $dShow
  = GrammarData.$fShowManifest_$s$cshowsPrec6
"SPEC $fEqManifest @ Animacy" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                        GrammarData.Animacy
  GrammarData.$fEqManifest @ GrammarData.Animacy $dEq
  = GrammarData.$fEqManifest_$s$fEqManifest1
"SPEC $fEqManifest @ Case" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                     GrammarData.Case
  GrammarData.$fEqManifest @ GrammarData.Case $dEq
  = GrammarData.$fEqManifest_$s$fEqManifest2
"SPEC $fEqManifest @ Definiteness" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                             GrammarData.Definiteness
  GrammarData.$fEqManifest @ GrammarData.Definiteness $dEq
  = GrammarData.$fEqManifest_$s$fEqManifest5
"SPEC $fEqManifest @ Gender" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                       GrammarData.Gender
  GrammarData.$fEqManifest @ GrammarData.Gender $dEq
  = GrammarData.$fEqManifest_$s$fEqManifest
"SPEC $fEqManifest @ Honorific" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                          GrammarData.Honorific
  GrammarData.$fEqManifest @ GrammarData.Honorific $dEq
  = GrammarData.$fEqManifest_$s$fEqManifest4
"SPEC $fEqManifest @ Number" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                       GrammarData.Number
  GrammarData.$fEqManifest @ GrammarData.Number $dEq
  = GrammarData.$fEqManifest_$s$fEqManifest3
"SPEC $fEqManifest @ Specificity" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                            GrammarData.Specificity
  GrammarData.$fEqManifest @ GrammarData.Specificity $dEq
  = GrammarData.$fEqManifest_$s$fEqManifest6
"SPEC $fReadManifest @ Animacy" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                            GrammarData.Animacy
  GrammarData.$fReadManifest @ GrammarData.Animacy $dRead
  = GrammarData.$fReadManifest_$s$fReadManifest1
"SPEC $fReadManifest @ Case" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                         GrammarData.Case
  GrammarData.$fReadManifest @ GrammarData.Case $dRead
  = GrammarData.$fReadManifest_$s$fReadManifest2
"SPEC $fReadManifest @ Definiteness" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                 GrammarData.Definiteness
  GrammarData.$fReadManifest @ GrammarData.Definiteness $dRead
  = GrammarData.$fReadManifest_$s$fReadManifest5
"SPEC $fReadManifest @ Gender" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                           GrammarData.Gender
  GrammarData.$fReadManifest @ GrammarData.Gender $dRead
  = GrammarData.$fReadManifest_$s$fReadManifest
"SPEC $fReadManifest @ Honorific" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                              GrammarData.Honorific
  GrammarData.$fReadManifest @ GrammarData.Honorific $dRead
  = GrammarData.$fReadManifest_$s$fReadManifest4
"SPEC $fReadManifest @ Number" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                           GrammarData.Number
  GrammarData.$fReadManifest @ GrammarData.Number $dRead
  = GrammarData.$fReadManifest_$s$fReadManifest3
"SPEC $fReadManifest @ Specificity" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                GrammarData.Specificity
  GrammarData.$fReadManifest @ GrammarData.Specificity $dRead
  = GrammarData.$fReadManifest_$s$fReadManifest6
"SPEC/GrammarData $dmreadsPrec @ Animacy" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                      GrammarData.Animacy
  GHC.Read.$dmreadsPrec @ GrammarData.Animacy $dRead
  = GrammarData.$fReadAnimacy_$s$dmreadsPrec
"SPEC/GrammarData $dmreadsPrec @ Aspect" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                     GrammarData.Aspect
  GHC.Read.$dmreadsPrec @ GrammarData.Aspect $dRead
  = GrammarData.$fReadAspect_$s$dmreadsPrec
"SPEC/GrammarData $dmreadsPrec @ Case" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                   GrammarData.Case
  GHC.Read.$dmreadsPrec @ GrammarData.Case $dRead
  = GrammarData.$fReadCase_$s$dmreadsPrec
"SPEC/GrammarData $dmreadsPrec @ Definiteness" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                           GrammarData.Definiteness
  GHC.Read.$dmreadsPrec @ GrammarData.Definiteness $dRead
  = GrammarData.$fReadDefiniteness_$s$dmreadsPrec
"SPEC/GrammarData $dmreadsPrec @ Evidentiality" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                            GrammarData.Evidentiality
  GHC.Read.$dmreadsPrec @ GrammarData.Evidentiality $dRead
  = GrammarData.$fReadEvidentiality_$s$dmreadsPrec
"SPEC/GrammarData $dmreadsPrec @ Gender" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                     GrammarData.Gender
  GHC.Read.$dmreadsPrec @ GrammarData.Gender $dRead
  = GrammarData.$fReadGender_$s$dmreadsPrec
"SPEC/GrammarData $dmreadsPrec @ Honorific" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                        GrammarData.Honorific
  GHC.Read.$dmreadsPrec @ GrammarData.Honorific $dRead
  = GrammarData.$fReadHonorific_$s$dmreadsPrec
"SPEC/GrammarData $dmreadsPrec @ Mood" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                   GrammarData.Mood
  GHC.Read.$dmreadsPrec @ GrammarData.Mood $dRead
  = GrammarData.$fReadMood_$s$dmreadsPrec
"SPEC/GrammarData $dmreadsPrec @ Number" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                     GrammarData.Number
  GHC.Read.$dmreadsPrec @ GrammarData.Number $dRead
  = GrammarData.$fReadNumber_$s$dmreadsPrec
"SPEC/GrammarData $dmreadsPrec @ Person" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                     GrammarData.Person
  GHC.Read.$dmreadsPrec @ GrammarData.Person $dRead
  = GrammarData.$fReadPerson_$s$dmreadsPrec
"SPEC/GrammarData $dmreadsPrec @ Polarity" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                       GrammarData.Polarity
  GHC.Read.$dmreadsPrec @ GrammarData.Polarity $dRead
  = GrammarData.$fReadPolarity_$s$dmreadsPrec
"SPEC/GrammarData $dmreadsPrec @ Specificity" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                          GrammarData.Specificity
  GHC.Read.$dmreadsPrec @ GrammarData.Specificity $dRead
  = GrammarData.$fReadSpecificity_$s$dmreadsPrec
"SPEC/GrammarData $dmreadsPrec @ Tense" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                    GrammarData.Tense
  GHC.Read.$dmreadsPrec @ GrammarData.Tense $dRead
  = GrammarData.$fReadTense_$s$dmreadsPrec
"SPEC/GrammarData $dmreadsPrec @ Transitivity" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                           GrammarData.Transitivity
  GHC.Read.$dmreadsPrec @ GrammarData.Transitivity $dRead
  = GrammarData.$fReadTransitivity_$s$dmreadsPrec
"SPEC/GrammarData $dmreadsPrec @ Voice" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                    GrammarData.Voice
  GHC.Read.$dmreadsPrec @ GrammarData.Voice $dRead
  = GrammarData.$fReadVoice_$s$dmreadsPrec
"SPEC/GrammarData $dmreadsPrec @ Volition" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                       GrammarData.Volition
  GHC.Read.$dmreadsPrec @ GrammarData.Volition $dRead
  = GrammarData.$fReadVolition_$s$dmreadsPrec
"SPEC/GrammarData $fEq(,) @ Morpheme @ (Manifest Gender,
                                       Manifest Animacy,
                                       Manifest Case,
                                       Manifest Number,
                                       Manifest Honorific,
                                       Manifest Definiteness,
                                       Manifest Specificity)" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                                                                                                                                                                                                                                                                                                                                                                                                 PhonemeData.Morpheme
                                                                                                                                                                                                                                                                                                                                                                                                                                       $dEq1 :: GHC.Classes.Eq
                                                                                                                                                                                                                                                                                                                                                                                                                                                  (GrammarData.Manifest
                                                                                                                                                                                                                                                                                                                                                                                                                                                     GrammarData.Gender,
                                                                                                                                                                                                                                                                                                                                                                                                                                                   GrammarData.Manifest
                                                                                                                                                                                                                                                                                                                                                                                                                                                     GrammarData.Animacy,
                                                                                                                                                                                                                                                                                                                                                                                                                                                   GrammarData.Manifest
                                                                                                                                                                                                                                                                                                                                                                                                                                                     GrammarData.Case,
                                                                                                                                                                                                                                                                                                                                                                                                                                                   GrammarData.Manifest
                                                                                                                                                                                                                                                                                                                                                                                                                                                     GrammarData.Number,
                                                                                                                                                                                                                                                                                                                                                                                                                                                   GrammarData.Manifest
                                                                                                                                                                                                                                                                                                                                                                                                                                                     GrammarData.Honorific,
                                                                                                                                                                                                                                                                                                                                                                                                                                                   GrammarData.Manifest
                                                                                                                                                                                                                                                                                                                                                                                                                                                     GrammarData.Definiteness,
                                                                                                                                                                                                                                                                                                                                                                                                                                                   GrammarData.Manifest
                                                                                                                                                                                                                                                                                                                                                                                                                                                     GrammarData.Specificity)
  GHC.Classes.$fEq(,) @ PhonemeData.Morpheme
                      @ (GrammarData.Manifest GrammarData.Gender,
                         GrammarData.Manifest GrammarData.Animacy,
                         GrammarData.Manifest GrammarData.Case,
                         GrammarData.Manifest GrammarData.Number,
                         GrammarData.Manifest GrammarData.Honorific,
                         GrammarData.Manifest GrammarData.Definiteness,
                         GrammarData.Manifest GrammarData.Specificity)
                      $dEq
                      $dEq1
  = GrammarData.$fEqManifestSystem_$s$fEq(,)
"SPEC/GrammarData $fEq(,,,,,,) @ (Manifest Gender) @ (Manifest
                                                       Animacy) @ (Manifest Case) @ (Manifest
                                                                                       Number) @ (Manifest
                                                                                                    Honorific) @ (Manifest
                                                                                                                    Definiteness) @ (Manifest
                                                                                                                                       Specificity)" [ALWAYS] forall $dEq :: GHC.Classes.Eq
rammarData.Manifest
rammarData.Gender)
dEq1 :: GHC.Classes.Eq
rammarData.Manifest
rammarData.Animacy)
dEq2 :: GHC.Classes.Eq
rammarData.Manifest
rammarData.Case)
dEq3 :: GHC.Classes.Eq
rammarData.Manifest
rammarData.Number)
dEq4 :: GHC.Classes.Eq
rammarData.Manifest
rammarData.Honorific)
dEq5 :: GHC.Classes.Eq
rammarData.Manifest
rammarData.Definiteness)
dEq6 :: GHC.Classes.Eq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 (GrammarData.Manifest
rammarData.Specificity)
  GHC.Classes.$fEq(,,,,,,) @ (GrammarData.Manifest
                                GrammarData.Gender)
                           @ (GrammarData.Manifest GrammarData.Animacy)
                           @ (GrammarData.Manifest GrammarData.Case)
                           @ (GrammarData.Manifest GrammarData.Number)
                           @ (GrammarData.Manifest GrammarData.Honorific)
                           @ (GrammarData.Manifest GrammarData.Definiteness)
                           @ (GrammarData.Manifest GrammarData.Specificity)
                           $dEq
                           $dEq1
                           $dEq2
                           $dEq3
                           $dEq4
                           $dEq5
                           $dEq6
  = GrammarData.$fEqManifestSystem_$s$fEq(,,,,,,)
"SPEC/GrammarData $fEq(,,,,,,)_$c/= @ (Manifest Gender) @ (Manifest
                                                            Animacy) @ (Manifest Case) @ (Manifest
                                                                                            Number) @ (Manifest
                                                                                                         Honorific) @ (Manifest
                                                                                                                         Definiteness) @ (Manifest
                                                                                                                                            Specificity)" [ALWAYS] forall $dEq :: GHC.Classes.Eq
rammarData.Manifest
rammarData.Gender)
dEq1 :: GHC.Classes.Eq
rammarData.Manifest
rammarData.Animacy)
dEq2 :: GHC.Classes.Eq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               (GrammarData.Manifest
rammarData.Case)
dEq3 :: GHC.Classes.Eq
rammarData.Manifest
rammarData.Number)
dEq4 :: GHC.Classes.Eq
rammarData.Manifest
rammarData.Honorific)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    $dEq5 :: GHC.Classes.Eq
rammarData.Manifest
rammarData.Definiteness)
dEq6 :: GHC.Classes.Eq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               (GrammarData.Manifest
rammarData.Specificity)
  GHC.Classes.$fEq(,,,,,,)_$c/= @ (GrammarData.Manifest
                                     GrammarData.Gender)
                                @ (GrammarData.Manifest GrammarData.Animacy)
                                @ (GrammarData.Manifest GrammarData.Case)
                                @ (GrammarData.Manifest GrammarData.Number)
                                @ (GrammarData.Manifest GrammarData.Honorific)
                                @ (GrammarData.Manifest GrammarData.Definiteness)
                                @ (GrammarData.Manifest GrammarData.Specificity)
                                $dEq
                                $dEq1
                                $dEq2
                                $dEq3
                                $dEq4
                                $dEq5
                                $dEq6
  = GrammarData.$fEqManifestSystem_$s$fEq(,,,,,,)_$c/=
"SPEC/GrammarData $fRead(,,,,,,) @ (Manifest Gender) @ (Manifest
                                                         Animacy) @ (Manifest Case) @ (Manifest
                                                                                         Number) @ (Manifest
                                                                                                      Honorific) @ (Manifest
                                                                                                                      Definiteness) @ (Manifest
                                                                                                                                         Specificity)" [ALWAYS] forall $dRead :: GHC.Read.Read
rammarData.Manifest
rammarData.Gender)
dRead1 :: GHC.Read.Read
rammarData.Manifest
rammarData.Animacy)
dRead2 :: GHC.Read.Read
rammarData.Manifest
rammarData.Case)
dRead3 :: GHC.Read.Read
rammarData.Manifest
rammarData.Number)
dRead4 :: GHC.Read.Read
rammarData.Manifest
rammarData.Honorific)
dRead5 :: GHC.Read.Read
rammarData.Manifest
rammarData.Definiteness)
dRead6 :: GHC.Read.Read
rammarData.Manifest
rammarData.Specificity)
  GHC.Read.$fRead(,,,,,,) @ (GrammarData.Manifest GrammarData.Gender)
                          @ (GrammarData.Manifest GrammarData.Animacy)
                          @ (GrammarData.Manifest GrammarData.Case)
                          @ (GrammarData.Manifest GrammarData.Number)
                          @ (GrammarData.Manifest GrammarData.Honorific)
                          @ (GrammarData.Manifest GrammarData.Definiteness)
                          @ (GrammarData.Manifest GrammarData.Specificity)
                          $dRead
                          $dRead1
                          $dRead2
                          $dRead3
                          $dRead4
                          $dRead5
                          $dRead6
  = GrammarData.$s$fRead(,,,,,,)
"SPEC/GrammarData $fRead(,,,,,,)_$creadList @ (Manifest
                                                Gender) @ (Manifest Animacy) @ (Manifest
                                                                                  Case) @ (Manifest
                                                                                             Number) @ (Manifest
                                                                                                          Honorific) @ (Manifest
                                                                                                                          Definiteness) @ (Manifest
                                                                                                                                             Specificity)" [ALWAYS] forall $dRead :: GHC.Read.Read
rammarData.Manifest
rammarData.Gender)
dRead1 :: GHC.Read.Read
rammarData.Manifest
rammarData.Animacy)
dRead2 :: GHC.Read.Read
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   (GrammarData.Manifest
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      GrammarData.Case)
dRead3 :: GHC.Read.Read
rammarData.Manifest
rammarData.Number)
dRead4 :: GHC.Read.Read
rammarData.Manifest
rammarData.Honorific)
dRead5 :: GHC.Read.Read
rammarData.Manifest
rammarData.Definiteness)
dRead6 :: GHC.Read.Read
rammarData.Manifest
rammarData.Specificity)
  GHC.Read.$fRead(,,,,,,)_$creadList @ (GrammarData.Manifest
                                          GrammarData.Gender)
                                     @ (GrammarData.Manifest GrammarData.Animacy)
                                     @ (GrammarData.Manifest GrammarData.Case)
                                     @ (GrammarData.Manifest GrammarData.Number)
                                     @ (GrammarData.Manifest GrammarData.Honorific)
                                     @ (GrammarData.Manifest GrammarData.Definiteness)
                                     @ (GrammarData.Manifest GrammarData.Specificity)
                                     $dRead
                                     $dRead1
                                     $dRead2
                                     $dRead3
                                     $dRead4
                                     $dRead5
                                     $dRead6
  = GrammarData.$s$fRead(,,,,,,)_$s$fRead(,,,,,,)_$creadList
"SPEC/GrammarData $fRead(,,,,,,)_$creadsPrec @ (Manifest
                                                 Gender) @ (Manifest Animacy) @ (Manifest
                                                                                   Case) @ (Manifest
                                                                                              Number) @ (Manifest
                                                                                                           Honorific) @ (Manifest
                                                                                                                           Definiteness) @ (Manifest
                                                                                                                                              Specificity)" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         (GrammarData.Manifest
rammarData.Gender)
dRead1 :: GHC.Read.Read
rammarData.Manifest
rammarData.Animacy)
dRead2 :: GHC.Read.Read
rammarData.Manifest
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             GrammarData.Case)
dRead3 :: GHC.Read.Read
rammarData.Manifest
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             GrammarData.Number)
dRead4 :: GHC.Read.Read
rammarData.Manifest
rammarData.Honorific)
dRead5 :: GHC.Read.Read
rammarData.Manifest
rammarData.Definiteness)
dRead6 :: GHC.Read.Read
rammarData.Manifest
rammarData.Specificity)
  GHC.Read.$fRead(,,,,,,)_$creadsPrec @ (GrammarData.Manifest
                                           GrammarData.Gender)
                                      @ (GrammarData.Manifest GrammarData.Animacy)
                                      @ (GrammarData.Manifest GrammarData.Case)
                                      @ (GrammarData.Manifest GrammarData.Number)
                                      @ (GrammarData.Manifest GrammarData.Honorific)
                                      @ (GrammarData.Manifest GrammarData.Definiteness)
                                      @ (GrammarData.Manifest GrammarData.Specificity)
                                      $dRead
                                      $dRead1
                                      $dRead2
                                      $dRead3
                                      $dRead4
                                      $dRead5
                                      $dRead6
  = GrammarData.$s$fRead(,,,,,,)_$s$fRead(,,,,,,)_$creadsPrec
"SPEC/GrammarData readListDefault @ (Manifest Animacy)" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                                    (GrammarData.Manifest
                                                                                       GrammarData.Animacy)
  GHC.Read.readListDefault @ (GrammarData.Manifest
                                GrammarData.Animacy)
                           $dRead
  = GrammarData.$fReadManifest_$sreadListDefault1
"SPEC/GrammarData readListDefault @ (Manifest Case)" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                                 (GrammarData.Manifest
                                                                                    GrammarData.Case)
  GHC.Read.readListDefault @ (GrammarData.Manifest GrammarData.Case)
                           $dRead
  = GrammarData.$fReadManifest_$sreadListDefault2
"SPEC/GrammarData readListDefault @ (Manifest Definiteness)" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                                         (GrammarData.Manifest
                                                                                            GrammarData.Definiteness)
  GHC.Read.readListDefault @ (GrammarData.Manifest
                                GrammarData.Definiteness)
                           $dRead
  = GrammarData.$fReadManifest_$sreadListDefault5
"SPEC/GrammarData readListDefault @ (Manifest Gender)" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                                   (GrammarData.Manifest
                                                                                      GrammarData.Gender)
  GHC.Read.readListDefault @ (GrammarData.Manifest
                                GrammarData.Gender)
                           $dRead
  = GrammarData.$fReadManifest_$sreadListDefault
"SPEC/GrammarData readListDefault @ (Manifest Honorific)" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                                      (GrammarData.Manifest
                                                                                         GrammarData.Honorific)
  GHC.Read.readListDefault @ (GrammarData.Manifest
                                GrammarData.Honorific)
                           $dRead
  = GrammarData.$fReadManifest_$sreadListDefault4
"SPEC/GrammarData readListDefault @ (Manifest Number)" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                                   (GrammarData.Manifest
                                                                                      GrammarData.Number)
  GHC.Read.readListDefault @ (GrammarData.Manifest
                                GrammarData.Number)
                           $dRead
  = GrammarData.$fReadManifest_$sreadListDefault3
"SPEC/GrammarData readListDefault @ (Manifest Specificity)" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                                        (GrammarData.Manifest
                                                                                           GrammarData.Specificity)
  GHC.Read.readListDefault @ (GrammarData.Manifest
                                GrammarData.Specificity)
                           $dRead
  = GrammarData.$fReadManifest_$sreadListDefault6
"SPEC/GrammarData readListDefault @ Animacy" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                         GrammarData.Animacy
  GHC.Read.readListDefault @ GrammarData.Animacy $dRead
  = GrammarData.$fReadAnimacy_$sreadListDefault
"SPEC/GrammarData readListDefault @ Aspect" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                        GrammarData.Aspect
  GHC.Read.readListDefault @ GrammarData.Aspect $dRead
  = GrammarData.$fReadAspect_$sreadListDefault
"SPEC/GrammarData readListDefault @ Case" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                      GrammarData.Case
  GHC.Read.readListDefault @ GrammarData.Case $dRead
  = GrammarData.$fReadCase_$sreadListDefault
"SPEC/GrammarData readListDefault @ Definiteness" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                              GrammarData.Definiteness
  GHC.Read.readListDefault @ GrammarData.Definiteness $dRead
  = GrammarData.$fReadDefiniteness_$sreadListDefault
"SPEC/GrammarData readListDefault @ Evidentiality" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                               GrammarData.Evidentiality
  GHC.Read.readListDefault @ GrammarData.Evidentiality $dRead
  = GrammarData.$fReadEvidentiality_$sreadListDefault
"SPEC/GrammarData readListDefault @ Gender" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                        GrammarData.Gender
  GHC.Read.readListDefault @ GrammarData.Gender $dRead
  = GrammarData.$fReadGender_$sreadListDefault
"SPEC/GrammarData readListDefault @ Honorific" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                           GrammarData.Honorific
  GHC.Read.readListDefault @ GrammarData.Honorific $dRead
  = GrammarData.$fReadHonorific_$sreadListDefault
"SPEC/GrammarData readListDefault @ ManifestSystem" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                                GrammarData.ManifestSystem
  GHC.Read.readListDefault @ GrammarData.ManifestSystem $dRead
  = GrammarData.$fReadManifestSystem_$sreadListDefault
"SPEC/GrammarData readListDefault @ Mood" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                      GrammarData.Mood
  GHC.Read.readListDefault @ GrammarData.Mood $dRead
  = GrammarData.$fReadMood_$sreadListDefault
"SPEC/GrammarData readListDefault @ Number" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                        GrammarData.Number
  GHC.Read.readListDefault @ GrammarData.Number $dRead
  = GrammarData.$fReadNumber_$sreadListDefault
"SPEC/GrammarData readListDefault @ Person" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                        GrammarData.Person
  GHC.Read.readListDefault @ GrammarData.Person $dRead
  = GrammarData.$fReadPerson_$sreadListDefault
"SPEC/GrammarData readListDefault @ Polarity" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                          GrammarData.Polarity
  GHC.Read.readListDefault @ GrammarData.Polarity $dRead
  = GrammarData.$fReadPolarity_$sreadListDefault
"SPEC/GrammarData readListDefault @ Specificity" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                             GrammarData.Specificity
  GHC.Read.readListDefault @ GrammarData.Specificity $dRead
  = GrammarData.$fReadSpecificity_$sreadListDefault
"SPEC/GrammarData readListDefault @ Tense" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                       GrammarData.Tense
  GHC.Read.readListDefault @ GrammarData.Tense $dRead
  = GrammarData.$fReadTense_$sreadListDefault
"SPEC/GrammarData readListDefault @ Transitivity" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                              GrammarData.Transitivity
  GHC.Read.readListDefault @ GrammarData.Transitivity $dRead
  = GrammarData.$fReadTransitivity_$sreadListDefault
"SPEC/GrammarData readListDefault @ Voice" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                       GrammarData.Voice
  GHC.Read.readListDefault @ GrammarData.Voice $dRead
  = GrammarData.$fReadVoice_$sreadListDefault
"SPEC/GrammarData readListDefault @ Volition" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                          GrammarData.Volition
  GHC.Read.readListDefault @ GrammarData.Volition $dRead
  = GrammarData.$fReadVolition_$sreadListDefault
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

