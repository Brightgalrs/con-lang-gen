
==================== FINAL INTERFACE ====================
2016-10-31 09:53:17.929895 UTC

interface conla_1eA9qWUPH9nBowcXqqaV8r:GrammarData 7103
  interface hash: 15ad061c1923985f632c1d23f63df6b5
  ABI hash: 6068300199f0f1711a9c0db611362463
  export-list hash: 5d09169d5fed1c01e64e0120168a8712
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 962af636f8e927040c7daa9c21457292
  sig of: Nothing
  used TH splices: False
  where
exports:
  GrammarData.AffixHopping{GrammarData.NoAffixHop GrammarData.OblAffixHop}
  GrammarData.Bar{GrammarData.XBarA GrammarData.XBarC GrammarData.adjunct GrammarData.barBar GrammarData.barIl GrammarData.barLC GrammarData.compliment GrammarData.leaf}
  GrammarData.ComplementizerInitial{GrammarData.CompFinal GrammarData.CompInitial}
  GrammarData.Grammar{GrammarData.Grammar GrammarData.getAH GrammarData.getCI GrammarData.getItoC GrammarData.getNS GrammarData.getNT GrammarData.getOF GrammarData.getObT GrammarData.getPP GrammarData.getQI GrammarData.getSI GrammarData.getTM GrammarData.getVtoI GrammarData.getWHM}
  GrammarData.Illoc{GrammarData.Decl GrammarData.Imper GrammarData.Null GrammarData.Ques}
  GrammarData.ItoCMovement{GrammarData.NoItoCMove GrammarData.OblItoCMove}
  GrammarData.Leaf{GrammarData.Leaf GrammarData.LeafNull GrammarData.leafIl GrammarData.leafLC GrammarData.leafStr GrammarData.leafT}
  GrammarData.LeafType{GrammarData.LeafAffix GrammarData.LeafWord}
  GrammarData.LexCat{GrammarData.Adj GrammarData.Adpo GrammarData.Adv GrammarData.Comp GrammarData.Det GrammarData.Infl GrammarData.Noun GrammarData.Verb}
  GrammarData.NullSubject{GrammarData.NoNullSub GrammarData.OptNullSub}
  GrammarData.NullTopic{GrammarData.NoNullTop GrammarData.OptNullTop}
  GrammarData.ObjectFinal{GrammarData.ObjFinal GrammarData.ObjInitial}
  GrammarData.ObligatoryTopic{GrammarData.OblTopic GrammarData.OptTopic}
  GrammarData.Phrase{GrammarData.XP GrammarData.XPNull GrammarData.phraseBar GrammarData.phraseIl GrammarData.phraseLC GrammarData.specifier}
  GrammarData.PiedPiping{GrammarData.PiedPipe GrammarData.PrepStrand}
  GrammarData.QuestionInversion{GrammarData.NoQuesInv GrammarData.OblQuesInv}
  GrammarData.SubjectInitial{GrammarData.SubFinal GrammarData.SubInitial}
  GrammarData.TopicMarking{GrammarData.NoTopMark GrammarData.OblTopMark}
  GrammarData.VtoIMovement{GrammarData.NoVtoIMove GrammarData.OblVtoIMove}
  GrammarData.WHMovementObligatory{GrammarData.NoWHMove GrammarData.OblWHMove}
module dependencies:
package dependencies: base-4.8.2.0* ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Monoid
                         base-4.8.2.0:Data.Type.Equality base-4.8.2.0:GHC.Generics
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.Enum debc6de3086023a15993ab0cecffb90b
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:GHC.Read b423b4506a014855edbd329b567629f3
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
64df7cc6c7fa11aa276601186742ba94
  $fEnumAffixHopping :: GHC.Enum.Enum GrammarData.AffixHopping
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.AffixHopping
                  GrammarData.$fEnumAffixHopping_$csucc
                  GrammarData.$fEnumAffixHopping_$cpred
                  GrammarData.$fEnumAffixHopping_$ctoEnum
                  GrammarData.$fEnumAffixHopping_$cfromEnum
                  GrammarData.$fEnumAffixHopping_$cenumFrom
                  GrammarData.$fEnumAffixHopping_$cenumFromThen
                  GrammarData.$fEnumAffixHopping_$cenumFromTo
                  GrammarData.$fEnumAffixHopping_$cenumFromThenTo -}
64df7cc6c7fa11aa276601186742ba94
  $fEnumAffixHopping1 :: GHC.Prim.Int# -> GrammarData.AffixHopping
  {- Arity: 1, Strictness: <L,U>b -}
64df7cc6c7fa11aa276601186742ba94
  $fEnumAffixHopping2 :: [GrammarData.AffixHopping]
  {- Unfolding: (GrammarData.$fEnumAffixHopping_go2 1) -}
64df7cc6c7fa11aa276601186742ba94
  $fEnumAffixHopping3 :: [GrammarData.AffixHopping]
  {- Unfolding: (GrammarData.$fEnumAffixHopping_go3 0) -}
64df7cc6c7fa11aa276601186742ba94
  $fEnumAffixHopping4 :: GrammarData.AffixHopping
  {- Strictness: b -}
64df7cc6c7fa11aa276601186742ba94
  $fEnumAffixHopping5 :: GrammarData.AffixHopping
  {- Strictness: b -}
64df7cc6c7fa11aa276601186742ba94
  $fEnumAffixHopping_$cenumFrom ::
    GrammarData.AffixHopping -> [GrammarData.AffixHopping]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ a13 :: GrammarData.AffixHopping ->
                 case a13 of wild {
                   GrammarData.NoAffixHop -> GrammarData.$fEnumAffixHopping3
                   GrammarData.OblAffixHop -> GrammarData.$fEnumAffixHopping2 }) -}
64df7cc6c7fa11aa276601186742ba94
  $fEnumAffixHopping_$cenumFromThen ::
    GrammarData.AffixHopping
    -> GrammarData.AffixHopping -> [GrammarData.AffixHopping]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a13 :: GrammarData.AffixHopping
                   b :: GrammarData.AffixHopping ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.AffixHopping]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ a# :: GHC.Prim.Int#[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int# -> [GrammarData.AffixHopping]
                         {- Arity: 1, Strictness: <L,U> -}
                       = \ b# :: GHC.Prim.Int#[OneShot] ->
                         let {
                           $j2 :: GHC.Prim.Int# -> [GrammarData.AffixHopping]
                             {- Arity: 1, Strictness: <L,U> -}
                           = \ y :: GHC.Prim.Int#[OneShot] ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# b# a#) of wild {
                               GHC.Types.False
                               -> GHC.Enum.efdtIntDnFB
                                    @ [GrammarData.AffixHopping]
                                    GrammarData.$fEnumAffixHopping_c1
                                    (GHC.Types.[] @ GrammarData.AffixHopping)
                                    a#
                                    b#
                                    y
                               GHC.Types.True
                               -> GHC.Enum.efdtIntUpFB
                                    @ [GrammarData.AffixHopping]
                                    GrammarData.$fEnumAffixHopping_c1
                                    (GHC.Types.[] @ GrammarData.AffixHopping)
                                    a#
                                    b#
                                    y }
                         } in
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.># a# b#) of wild {
                           GHC.Types.False -> $j2 1 GHC.Types.True -> $j2 0 }
                     } in
                     case b of wild {
                       GrammarData.NoAffixHop -> $j1 0 GrammarData.OblAffixHop -> $j1 1 }
                 } in
                 case a13 of wild {
                   GrammarData.NoAffixHop -> $j 0
                   GrammarData.OblAffixHop -> $j 1 }) -}
64df7cc6c7fa11aa276601186742ba94
  $fEnumAffixHopping_$cenumFromThenTo ::
    GrammarData.AffixHopping
    -> GrammarData.AffixHopping
    -> GrammarData.AffixHopping
    -> [GrammarData.AffixHopping]
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U>,
     Unfolding: (\ x1 :: GrammarData.AffixHopping
                   x2 :: GrammarData.AffixHopping
                   y :: GrammarData.AffixHopping ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.AffixHopping]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ x4 :: GHC.Prim.Int#[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int# -> [GrammarData.AffixHopping]
                         {- Arity: 1, Strictness: <L,U> -}
                       = \ x5 :: GHC.Prim.Int#[OneShot] ->
                         case y of wild {
                           GrammarData.NoAffixHop
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [GrammarData.AffixHopping]
                                     GrammarData.$fEnumAffixHopping_c
                                     (GHC.Types.[] @ GrammarData.AffixHopping)
                                     x4
                                     x5
                                     0
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [GrammarData.AffixHopping]
                                     GrammarData.$fEnumAffixHopping_c
                                     (GHC.Types.[] @ GrammarData.AffixHopping)
                                     x4
                                     x5
                                     0 }
                           GrammarData.OblAffixHop
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [GrammarData.AffixHopping]
                                     GrammarData.$fEnumAffixHopping_c
                                     (GHC.Types.[] @ GrammarData.AffixHopping)
                                     x4
                                     x5
                                     1
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [GrammarData.AffixHopping]
                                     GrammarData.$fEnumAffixHopping_c
                                     (GHC.Types.[] @ GrammarData.AffixHopping)
                                     x4
                                     x5
                                     1 } }
                     } in
                     case x2 of wild {
                       GrammarData.NoAffixHop -> $j1 0 GrammarData.OblAffixHop -> $j1 1 }
                 } in
                 case x1 of wild {
                   GrammarData.NoAffixHop -> $j 0
                   GrammarData.OblAffixHop -> $j 1 }) -}
64df7cc6c7fa11aa276601186742ba94
  $fEnumAffixHopping_$cenumFromTo ::
    GrammarData.AffixHopping
    -> GrammarData.AffixHopping -> [GrammarData.AffixHopping]
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ x :: GrammarData.AffixHopping
                   y :: GrammarData.AffixHopping ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.AffixHopping]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ x1 :: GHC.Prim.Int#[OneShot] ->
                     case y of wild {
                       GrammarData.NoAffixHop
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 0) of wild1 {
                            GHC.Types.False -> GrammarData.$fEnumAffixHopping_go1 x1
                            GHC.Types.True -> GHC.Types.[] @ GrammarData.AffixHopping }
                       GrammarData.OblAffixHop
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 1) of wild1 {
                            GHC.Types.False -> GrammarData.$fEnumAffixHopping_go x1
                            GHC.Types.True -> GHC.Types.[] @ GrammarData.AffixHopping } }
                 } in
                 case x of wild {
                   GrammarData.NoAffixHop -> $j 0
                   GrammarData.OblAffixHop -> $j 1 }) -}
64df7cc6c7fa11aa276601186742ba94
  $fEnumAffixHopping_$cfromEnum ::
    GrammarData.AffixHopping -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.AffixHopping ->
                 case a13 of wild {
                   GrammarData.NoAffixHop -> GHC.Types.I# 0
                   GrammarData.OblAffixHop -> GHC.Types.I# 1 }) -}
64df7cc6c7fa11aa276601186742ba94
  $fEnumAffixHopping_$cpred ::
    GrammarData.AffixHopping -> GrammarData.AffixHopping
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.AffixHopping ->
                 case a13 of wild {
                   GrammarData.NoAffixHop -> GrammarData.$fEnumAffixHopping4
                   GrammarData.OblAffixHop -> GrammarData.NoAffixHop }) -}
64df7cc6c7fa11aa276601186742ba94
  $fEnumAffixHopping_$csucc ::
    GrammarData.AffixHopping -> GrammarData.AffixHopping
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.AffixHopping ->
                 case a13 of wild {
                   GrammarData.NoAffixHop -> GrammarData.OblAffixHop
                   GrammarData.OblAffixHop -> GrammarData.$fEnumAffixHopping5 }) -}
64df7cc6c7fa11aa276601186742ba94
  $fEnumAffixHopping_$ctoEnum ::
    GHC.Types.Int -> GrammarData.AffixHopping
  {- Arity: 1, Strictness: <S,1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: GHC.Types.Int ->
                 case w of ww { GHC.Types.I# ww1 -> GrammarData.$w$ctoEnum ww1 }) -}
64df7cc6c7fa11aa276601186742ba94
  $fEnumAffixHopping_c ::
    GHC.Types.Int
    -> [GrammarData.AffixHopping] -> [GrammarData.AffixHopping]
  {- Arity: 2, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int ys :: [GrammarData.AffixHopping] ->
                 GHC.Types.:
                   @ GrammarData.AffixHopping
                   (GrammarData.$fEnumAffixHopping_$ctoEnum x)
                   ys) -}
64df7cc6c7fa11aa276601186742ba94
  $fEnumAffixHopping_c1 ::
    GHC.Types.Int
    -> [GrammarData.AffixHopping] -> [GrammarData.AffixHopping]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int ys :: [GrammarData.AffixHopping] ->
                 GHC.Types.:
                   @ GrammarData.AffixHopping
                   (case x of wild { GHC.Types.I# a13 ->
                    GHC.Prim.tagToEnum# @ GrammarData.AffixHopping a13 })
                   ys) -}
64df7cc6c7fa11aa276601186742ba94
  $fEnumAffixHopping_go ::
    GHC.Prim.Int# -> [GrammarData.AffixHopping]
  {- Arity: 1, Strictness: <L,U> -}
64df7cc6c7fa11aa276601186742ba94
  $fEnumAffixHopping_go1 ::
    GHC.Prim.Int# -> [GrammarData.AffixHopping]
  {- Arity: 1, Strictness: <L,U> -}
64df7cc6c7fa11aa276601186742ba94
  $fEnumAffixHopping_go2 ::
    GHC.Prim.Int# -> [GrammarData.AffixHopping]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
64df7cc6c7fa11aa276601186742ba94
  $fEnumAffixHopping_go3 ::
    GHC.Prim.Int# -> [GrammarData.AffixHopping]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
bd101cefc51669d2e9cbe89bdbe27552
  $fEnumComplementizerInitial ::
    GHC.Enum.Enum GrammarData.ComplementizerInitial
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.ComplementizerInitial
                  GrammarData.$fEnumComplementizerInitial_$csucc
                  GrammarData.$fEnumComplementizerInitial_$cpred
                  GrammarData.$fEnumComplementizerInitial_$ctoEnum
                  GrammarData.$fEnumComplementizerInitial_$cfromEnum
                  GrammarData.$fEnumComplementizerInitial_$cenumFrom
                  GrammarData.$fEnumComplementizerInitial_$cenumFromThen
                  GrammarData.$fEnumComplementizerInitial_$cenumFromTo
                  GrammarData.$fEnumComplementizerInitial_$cenumFromThenTo -}
bd101cefc51669d2e9cbe89bdbe27552
  $fEnumComplementizerInitial1 ::
    GHC.Prim.Int# -> GrammarData.ComplementizerInitial
  {- Arity: 1, Strictness: <L,U>b -}
bd101cefc51669d2e9cbe89bdbe27552
  $fEnumComplementizerInitial2 :: [GrammarData.ComplementizerInitial]
  {- Unfolding: (GrammarData.$fEnumComplementizerInitial_go2 1) -}
bd101cefc51669d2e9cbe89bdbe27552
  $fEnumComplementizerInitial3 :: [GrammarData.ComplementizerInitial]
  {- Unfolding: (GrammarData.$fEnumComplementizerInitial_go3 0) -}
bd101cefc51669d2e9cbe89bdbe27552
  $fEnumComplementizerInitial4 :: GrammarData.ComplementizerInitial
  {- Strictness: b -}
bd101cefc51669d2e9cbe89bdbe27552
  $fEnumComplementizerInitial5 :: GrammarData.ComplementizerInitial
  {- Strictness: b -}
bd101cefc51669d2e9cbe89bdbe27552
  $fEnumComplementizerInitial_$cenumFrom ::
    GrammarData.ComplementizerInitial
    -> [GrammarData.ComplementizerInitial]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ a13 :: GrammarData.ComplementizerInitial ->
                 case a13 of wild {
                   GrammarData.CompInitial -> GrammarData.$fEnumComplementizerInitial3
                   GrammarData.CompFinal
                   -> GrammarData.$fEnumComplementizerInitial2 }) -}
bd101cefc51669d2e9cbe89bdbe27552
  $fEnumComplementizerInitial_$cenumFromThen ::
    GrammarData.ComplementizerInitial
    -> GrammarData.ComplementizerInitial
    -> [GrammarData.ComplementizerInitial]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a13 :: GrammarData.ComplementizerInitial
                   b :: GrammarData.ComplementizerInitial ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.ComplementizerInitial]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ a# :: GHC.Prim.Int#[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int# -> [GrammarData.ComplementizerInitial]
                         {- Arity: 1, Strictness: <L,U> -}
                       = \ b# :: GHC.Prim.Int#[OneShot] ->
                         let {
                           $j2 :: GHC.Prim.Int# -> [GrammarData.ComplementizerInitial]
                             {- Arity: 1, Strictness: <L,U> -}
                           = \ y :: GHC.Prim.Int#[OneShot] ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# b# a#) of wild {
                               GHC.Types.False
                               -> GHC.Enum.efdtIntDnFB
                                    @ [GrammarData.ComplementizerInitial]
                                    GrammarData.$fEnumComplementizerInitial_c1
                                    (GHC.Types.[] @ GrammarData.ComplementizerInitial)
                                    a#
                                    b#
                                    y
                               GHC.Types.True
                               -> GHC.Enum.efdtIntUpFB
                                    @ [GrammarData.ComplementizerInitial]
                                    GrammarData.$fEnumComplementizerInitial_c1
                                    (GHC.Types.[] @ GrammarData.ComplementizerInitial)
                                    a#
                                    b#
                                    y }
                         } in
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.># a# b#) of wild {
                           GHC.Types.False -> $j2 1 GHC.Types.True -> $j2 0 }
                     } in
                     case b of wild {
                       GrammarData.CompInitial -> $j1 0 GrammarData.CompFinal -> $j1 1 }
                 } in
                 case a13 of wild {
                   GrammarData.CompInitial -> $j 0 GrammarData.CompFinal -> $j 1 }) -}
bd101cefc51669d2e9cbe89bdbe27552
  $fEnumComplementizerInitial_$cenumFromThenTo ::
    GrammarData.ComplementizerInitial
    -> GrammarData.ComplementizerInitial
    -> GrammarData.ComplementizerInitial
    -> [GrammarData.ComplementizerInitial]
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U>,
     Unfolding: (\ x1 :: GrammarData.ComplementizerInitial
                   x2 :: GrammarData.ComplementizerInitial
                   y :: GrammarData.ComplementizerInitial ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.ComplementizerInitial]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ x4 :: GHC.Prim.Int#[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int# -> [GrammarData.ComplementizerInitial]
                         {- Arity: 1, Strictness: <L,U> -}
                       = \ x5 :: GHC.Prim.Int#[OneShot] ->
                         case y of wild {
                           GrammarData.CompInitial
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [GrammarData.ComplementizerInitial]
                                     GrammarData.$fEnumComplementizerInitial_c
                                     (GHC.Types.[] @ GrammarData.ComplementizerInitial)
                                     x4
                                     x5
                                     0
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [GrammarData.ComplementizerInitial]
                                     GrammarData.$fEnumComplementizerInitial_c
                                     (GHC.Types.[] @ GrammarData.ComplementizerInitial)
                                     x4
                                     x5
                                     0 }
                           GrammarData.CompFinal
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [GrammarData.ComplementizerInitial]
                                     GrammarData.$fEnumComplementizerInitial_c
                                     (GHC.Types.[] @ GrammarData.ComplementizerInitial)
                                     x4
                                     x5
                                     1
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [GrammarData.ComplementizerInitial]
                                     GrammarData.$fEnumComplementizerInitial_c
                                     (GHC.Types.[] @ GrammarData.ComplementizerInitial)
                                     x4
                                     x5
                                     1 } }
                     } in
                     case x2 of wild {
                       GrammarData.CompInitial -> $j1 0 GrammarData.CompFinal -> $j1 1 }
                 } in
                 case x1 of wild {
                   GrammarData.CompInitial -> $j 0 GrammarData.CompFinal -> $j 1 }) -}
bd101cefc51669d2e9cbe89bdbe27552
  $fEnumComplementizerInitial_$cenumFromTo ::
    GrammarData.ComplementizerInitial
    -> GrammarData.ComplementizerInitial
    -> [GrammarData.ComplementizerInitial]
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ x :: GrammarData.ComplementizerInitial
                   y :: GrammarData.ComplementizerInitial ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.ComplementizerInitial]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ x1 :: GHC.Prim.Int#[OneShot] ->
                     case y of wild {
                       GrammarData.CompInitial
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 0) of wild1 {
                            GHC.Types.False -> GrammarData.$fEnumComplementizerInitial_go1 x1
                            GHC.Types.True
                            -> GHC.Types.[] @ GrammarData.ComplementizerInitial }
                       GrammarData.CompFinal
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 1) of wild1 {
                            GHC.Types.False -> GrammarData.$fEnumComplementizerInitial_go x1
                            GHC.Types.True
                            -> GHC.Types.[] @ GrammarData.ComplementizerInitial } }
                 } in
                 case x of wild {
                   GrammarData.CompInitial -> $j 0 GrammarData.CompFinal -> $j 1 }) -}
bd101cefc51669d2e9cbe89bdbe27552
  $fEnumComplementizerInitial_$cfromEnum ::
    GrammarData.ComplementizerInitial -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.ComplementizerInitial ->
                 case a13 of wild {
                   GrammarData.CompInitial -> GHC.Types.I# 0
                   GrammarData.CompFinal -> GHC.Types.I# 1 }) -}
bd101cefc51669d2e9cbe89bdbe27552
  $fEnumComplementizerInitial_$cpred ::
    GrammarData.ComplementizerInitial
    -> GrammarData.ComplementizerInitial
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.ComplementizerInitial ->
                 case a13 of wild {
                   GrammarData.CompInitial -> GrammarData.$fEnumComplementizerInitial4
                   GrammarData.CompFinal -> GrammarData.CompInitial }) -}
bd101cefc51669d2e9cbe89bdbe27552
  $fEnumComplementizerInitial_$csucc ::
    GrammarData.ComplementizerInitial
    -> GrammarData.ComplementizerInitial
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.ComplementizerInitial ->
                 case a13 of wild {
                   GrammarData.CompInitial -> GrammarData.CompFinal
                   GrammarData.CompFinal
                   -> GrammarData.$fEnumComplementizerInitial5 }) -}
bd101cefc51669d2e9cbe89bdbe27552
  $fEnumComplementizerInitial_$ctoEnum ::
    GHC.Types.Int -> GrammarData.ComplementizerInitial
  {- Arity: 1, Strictness: <S,1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: GHC.Types.Int ->
                 case w of ww { GHC.Types.I# ww1 ->
                 GrammarData.$w$ctoEnum1 ww1 }) -}
bd101cefc51669d2e9cbe89bdbe27552
  $fEnumComplementizerInitial_c ::
    GHC.Types.Int
    -> [GrammarData.ComplementizerInitial]
    -> [GrammarData.ComplementizerInitial]
  {- Arity: 2, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int ys :: [GrammarData.ComplementizerInitial] ->
                 GHC.Types.:
                   @ GrammarData.ComplementizerInitial
                   (GrammarData.$fEnumComplementizerInitial_$ctoEnum x)
                   ys) -}
bd101cefc51669d2e9cbe89bdbe27552
  $fEnumComplementizerInitial_c1 ::
    GHC.Types.Int
    -> [GrammarData.ComplementizerInitial]
    -> [GrammarData.ComplementizerInitial]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int ys :: [GrammarData.ComplementizerInitial] ->
                 GHC.Types.:
                   @ GrammarData.ComplementizerInitial
                   (case x of wild { GHC.Types.I# a13 ->
                    GHC.Prim.tagToEnum# @ GrammarData.ComplementizerInitial a13 })
                   ys) -}
bd101cefc51669d2e9cbe89bdbe27552
  $fEnumComplementizerInitial_go ::
    GHC.Prim.Int# -> [GrammarData.ComplementizerInitial]
  {- Arity: 1, Strictness: <L,U> -}
bd101cefc51669d2e9cbe89bdbe27552
  $fEnumComplementizerInitial_go1 ::
    GHC.Prim.Int# -> [GrammarData.ComplementizerInitial]
  {- Arity: 1, Strictness: <L,U> -}
bd101cefc51669d2e9cbe89bdbe27552
  $fEnumComplementizerInitial_go2 ::
    GHC.Prim.Int# -> [GrammarData.ComplementizerInitial]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
bd101cefc51669d2e9cbe89bdbe27552
  $fEnumComplementizerInitial_go3 ::
    GHC.Prim.Int# -> [GrammarData.ComplementizerInitial]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
0b723dd66110bae4a164ef4cfb3bebd4
  $fEnumIlloc :: GHC.Enum.Enum GrammarData.Illoc
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.Illoc
                  GrammarData.$fEnumIlloc_$csucc
                  GrammarData.$fEnumIlloc_$cpred
                  GrammarData.$fEnumIlloc_$ctoEnum
                  GrammarData.$fEnumIlloc_$cfromEnum
                  GrammarData.$fEnumIlloc_$cenumFrom
                  GrammarData.$fEnumIlloc_$cenumFromThen
                  GrammarData.$fEnumIlloc_$cenumFromTo
                  GrammarData.$fEnumIlloc_$cenumFromThenTo -}
0b723dd66110bae4a164ef4cfb3bebd4
  $fEnumIlloc1 :: [GrammarData.Illoc]
  {- Unfolding: (GrammarData.$fEnumIlloc_go4 3) -}
0b723dd66110bae4a164ef4cfb3bebd4
  $fEnumIlloc2 :: [GrammarData.Illoc]
  {- Unfolding: (GrammarData.$fEnumIlloc_go5 2) -}
0b723dd66110bae4a164ef4cfb3bebd4
  $fEnumIlloc3 :: [GrammarData.Illoc]
  {- Unfolding: (GrammarData.$fEnumIlloc_go6 1) -}
0b723dd66110bae4a164ef4cfb3bebd4
  $fEnumIlloc4 :: [GrammarData.Illoc]
  {- Unfolding: (GrammarData.$fEnumIlloc_go7 0) -}
0b723dd66110bae4a164ef4cfb3bebd4
  $fEnumIlloc5 :: GHC.Prim.Int# -> GrammarData.Illoc
  {- Arity: 1, Strictness: <L,U>b -}
0b723dd66110bae4a164ef4cfb3bebd4
  $fEnumIlloc6 :: GrammarData.Illoc
  {- Strictness: b -}
0b723dd66110bae4a164ef4cfb3bebd4
  $fEnumIlloc7 :: GrammarData.Illoc
  {- Strictness: b -}
0b723dd66110bae4a164ef4cfb3bebd4
  $fEnumIlloc_$cenumFrom :: GrammarData.Illoc -> [GrammarData.Illoc]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ a13 :: GrammarData.Illoc ->
                 case a13 of wild {
                   GrammarData.Null -> GrammarData.$fEnumIlloc4
                   GrammarData.Ques -> GrammarData.$fEnumIlloc3
                   GrammarData.Decl -> GrammarData.$fEnumIlloc2
                   GrammarData.Imper -> GrammarData.$fEnumIlloc1 }) -}
0b723dd66110bae4a164ef4cfb3bebd4
  $fEnumIlloc_$cenumFromThen ::
    GrammarData.Illoc -> GrammarData.Illoc -> [GrammarData.Illoc]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a13 :: GrammarData.Illoc b :: GrammarData.Illoc ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.Illoc]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ a# :: GHC.Prim.Int#[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int# -> [GrammarData.Illoc]
                         {- Arity: 1, Strictness: <L,U> -}
                       = \ b# :: GHC.Prim.Int#[OneShot] ->
                         let {
                           $j2 :: GHC.Prim.Int# -> [GrammarData.Illoc]
                             {- Arity: 1, Strictness: <L,U> -}
                           = \ y :: GHC.Prim.Int#[OneShot] ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# b# a#) of wild {
                               GHC.Types.False
                               -> GHC.Enum.efdtIntDnFB
                                    @ [GrammarData.Illoc]
                                    GrammarData.$fEnumIlloc_c
                                    (GHC.Types.[] @ GrammarData.Illoc)
                                    a#
                                    b#
                                    y
                               GHC.Types.True
                               -> GHC.Enum.efdtIntUpFB
                                    @ [GrammarData.Illoc]
                                    GrammarData.$fEnumIlloc_c
                                    (GHC.Types.[] @ GrammarData.Illoc)
                                    a#
                                    b#
                                    y }
                         } in
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.># a# b#) of wild {
                           GHC.Types.False -> $j2 3 GHC.Types.True -> $j2 0 }
                     } in
                     case b of wild {
                       GrammarData.Null -> $j1 0
                       GrammarData.Ques -> $j1 1
                       GrammarData.Decl -> $j1 2
                       GrammarData.Imper -> $j1 3 }
                 } in
                 case a13 of wild {
                   GrammarData.Null -> $j 0
                   GrammarData.Ques -> $j 1
                   GrammarData.Decl -> $j 2
                   GrammarData.Imper -> $j 3 }) -}
0b723dd66110bae4a164ef4cfb3bebd4
  $fEnumIlloc_$cenumFromThenTo ::
    GrammarData.Illoc
    -> GrammarData.Illoc -> GrammarData.Illoc -> [GrammarData.Illoc]
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U> -}
0b723dd66110bae4a164ef4cfb3bebd4
  $fEnumIlloc_$cenumFromTo ::
    GrammarData.Illoc -> GrammarData.Illoc -> [GrammarData.Illoc]
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ x :: GrammarData.Illoc y :: GrammarData.Illoc ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.Illoc]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ x1 :: GHC.Prim.Int#[OneShot] ->
                     case y of wild {
                       GrammarData.Null
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 0) of wild1 {
                            GHC.Types.False -> GrammarData.$fEnumIlloc_go3 x1
                            GHC.Types.True -> GHC.Types.[] @ GrammarData.Illoc }
                       GrammarData.Ques
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 1) of wild1 {
                            GHC.Types.False -> GrammarData.$fEnumIlloc_go2 x1
                            GHC.Types.True -> GHC.Types.[] @ GrammarData.Illoc }
                       GrammarData.Decl
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 2) of wild1 {
                            GHC.Types.False -> GrammarData.$fEnumIlloc_go1 x1
                            GHC.Types.True -> GHC.Types.[] @ GrammarData.Illoc }
                       GrammarData.Imper
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 3) of wild1 {
                            GHC.Types.False -> GrammarData.$fEnumIlloc_go x1
                            GHC.Types.True -> GHC.Types.[] @ GrammarData.Illoc } }
                 } in
                 case x of wild {
                   GrammarData.Null -> $j 0
                   GrammarData.Ques -> $j 1
                   GrammarData.Decl -> $j 2
                   GrammarData.Imper -> $j 3 }) -}
0b723dd66110bae4a164ef4cfb3bebd4
  $fEnumIlloc_$cfromEnum :: GrammarData.Illoc -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.Illoc ->
                 case a13 of wild {
                   GrammarData.Null -> GHC.Types.I# 0
                   GrammarData.Ques -> GHC.Types.I# 1
                   GrammarData.Decl -> GHC.Types.I# 2
                   GrammarData.Imper -> GHC.Types.I# 3 }) -}
0b723dd66110bae4a164ef4cfb3bebd4
  $fEnumIlloc_$cpred :: GrammarData.Illoc -> GrammarData.Illoc
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.Illoc ->
                 case a13 of wild {
                   GrammarData.Null -> GrammarData.$fEnumIlloc6
                   GrammarData.Ques -> GrammarData.Null
                   GrammarData.Decl -> GrammarData.Ques
                   GrammarData.Imper -> GrammarData.Decl }) -}
0b723dd66110bae4a164ef4cfb3bebd4
  $fEnumIlloc_$csucc :: GrammarData.Illoc -> GrammarData.Illoc
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.Illoc ->
                 case a13 of wild {
                   GrammarData.Null -> GrammarData.Ques
                   GrammarData.Ques -> GrammarData.Decl
                   GrammarData.Decl -> GrammarData.Imper
                   GrammarData.Imper -> GrammarData.$fEnumIlloc7 }) -}
0b723dd66110bae4a164ef4cfb3bebd4
  $fEnumIlloc_$ctoEnum :: GHC.Types.Int -> GrammarData.Illoc
  {- Arity: 1, Strictness: <S,1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: GHC.Types.Int ->
                 case w of ww { GHC.Types.I# ww1 ->
                 GrammarData.$w$ctoEnum2 ww1 }) -}
0b723dd66110bae4a164ef4cfb3bebd4
  $fEnumIlloc_c ::
    GHC.Types.Int -> [GrammarData.Illoc] -> [GrammarData.Illoc]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int ys :: [GrammarData.Illoc] ->
                 GHC.Types.:
                   @ GrammarData.Illoc
                   (case x of wild { GHC.Types.I# a13 ->
                    GHC.Prim.tagToEnum# @ GrammarData.Illoc a13 })
                   ys) -}
0b723dd66110bae4a164ef4cfb3bebd4
  $fEnumIlloc_go :: GHC.Prim.Int# -> [GrammarData.Illoc]
  {- Arity: 1, Strictness: <L,U> -}
0b723dd66110bae4a164ef4cfb3bebd4
  $fEnumIlloc_go1 :: GHC.Prim.Int# -> [GrammarData.Illoc]
  {- Arity: 1, Strictness: <L,U> -}
0b723dd66110bae4a164ef4cfb3bebd4
  $fEnumIlloc_go2 :: GHC.Prim.Int# -> [GrammarData.Illoc]
  {- Arity: 1, Strictness: <L,U> -}
0b723dd66110bae4a164ef4cfb3bebd4
  $fEnumIlloc_go3 :: GHC.Prim.Int# -> [GrammarData.Illoc]
  {- Arity: 1, Strictness: <L,U> -}
0b723dd66110bae4a164ef4cfb3bebd4
  $fEnumIlloc_go4 :: GHC.Prim.Int# -> [GrammarData.Illoc]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
0b723dd66110bae4a164ef4cfb3bebd4
  $fEnumIlloc_go5 :: GHC.Prim.Int# -> [GrammarData.Illoc]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
0b723dd66110bae4a164ef4cfb3bebd4
  $fEnumIlloc_go6 :: GHC.Prim.Int# -> [GrammarData.Illoc]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
0b723dd66110bae4a164ef4cfb3bebd4
  $fEnumIlloc_go7 :: GHC.Prim.Int# -> [GrammarData.Illoc]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
f50dc15d9604ea3311686cfae7fe1d21
  $fEnumItoCMovement :: GHC.Enum.Enum GrammarData.ItoCMovement
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.ItoCMovement
                  GrammarData.$fEnumItoCMovement_$csucc
                  GrammarData.$fEnumItoCMovement_$cpred
                  GrammarData.$fEnumItoCMovement_$ctoEnum
                  GrammarData.$fEnumItoCMovement_$cfromEnum
                  GrammarData.$fEnumItoCMovement_$cenumFrom
                  GrammarData.$fEnumItoCMovement_$cenumFromThen
                  GrammarData.$fEnumItoCMovement_$cenumFromTo
                  GrammarData.$fEnumItoCMovement_$cenumFromThenTo -}
f50dc15d9604ea3311686cfae7fe1d21
  $fEnumItoCMovement1 :: GHC.Prim.Int# -> GrammarData.ItoCMovement
  {- Arity: 1, Strictness: <L,U>b -}
f50dc15d9604ea3311686cfae7fe1d21
  $fEnumItoCMovement2 :: [GrammarData.ItoCMovement]
  {- Unfolding: (GrammarData.$fEnumItoCMovement_go2 1) -}
f50dc15d9604ea3311686cfae7fe1d21
  $fEnumItoCMovement3 :: [GrammarData.ItoCMovement]
  {- Unfolding: (GrammarData.$fEnumItoCMovement_go3 0) -}
f50dc15d9604ea3311686cfae7fe1d21
  $fEnumItoCMovement4 :: GrammarData.ItoCMovement
  {- Strictness: b -}
f50dc15d9604ea3311686cfae7fe1d21
  $fEnumItoCMovement5 :: GrammarData.ItoCMovement
  {- Strictness: b -}
f50dc15d9604ea3311686cfae7fe1d21
  $fEnumItoCMovement_$cenumFrom ::
    GrammarData.ItoCMovement -> [GrammarData.ItoCMovement]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ a13 :: GrammarData.ItoCMovement ->
                 case a13 of wild {
                   GrammarData.NoItoCMove -> GrammarData.$fEnumItoCMovement3
                   GrammarData.OblItoCMove -> GrammarData.$fEnumItoCMovement2 }) -}
f50dc15d9604ea3311686cfae7fe1d21
  $fEnumItoCMovement_$cenumFromThen ::
    GrammarData.ItoCMovement
    -> GrammarData.ItoCMovement -> [GrammarData.ItoCMovement]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a13 :: GrammarData.ItoCMovement
                   b :: GrammarData.ItoCMovement ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.ItoCMovement]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ a# :: GHC.Prim.Int#[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int# -> [GrammarData.ItoCMovement]
                         {- Arity: 1, Strictness: <L,U> -}
                       = \ b# :: GHC.Prim.Int#[OneShot] ->
                         let {
                           $j2 :: GHC.Prim.Int# -> [GrammarData.ItoCMovement]
                             {- Arity: 1, Strictness: <L,U> -}
                           = \ y :: GHC.Prim.Int#[OneShot] ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# b# a#) of wild {
                               GHC.Types.False
                               -> GHC.Enum.efdtIntDnFB
                                    @ [GrammarData.ItoCMovement]
                                    GrammarData.$fEnumItoCMovement_c1
                                    (GHC.Types.[] @ GrammarData.ItoCMovement)
                                    a#
                                    b#
                                    y
                               GHC.Types.True
                               -> GHC.Enum.efdtIntUpFB
                                    @ [GrammarData.ItoCMovement]
                                    GrammarData.$fEnumItoCMovement_c1
                                    (GHC.Types.[] @ GrammarData.ItoCMovement)
                                    a#
                                    b#
                                    y }
                         } in
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.># a# b#) of wild {
                           GHC.Types.False -> $j2 1 GHC.Types.True -> $j2 0 }
                     } in
                     case b of wild {
                       GrammarData.NoItoCMove -> $j1 0 GrammarData.OblItoCMove -> $j1 1 }
                 } in
                 case a13 of wild {
                   GrammarData.NoItoCMove -> $j 0
                   GrammarData.OblItoCMove -> $j 1 }) -}
f50dc15d9604ea3311686cfae7fe1d21
  $fEnumItoCMovement_$cenumFromThenTo ::
    GrammarData.ItoCMovement
    -> GrammarData.ItoCMovement
    -> GrammarData.ItoCMovement
    -> [GrammarData.ItoCMovement]
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U>,
     Unfolding: (\ x1 :: GrammarData.ItoCMovement
                   x2 :: GrammarData.ItoCMovement
                   y :: GrammarData.ItoCMovement ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.ItoCMovement]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ x4 :: GHC.Prim.Int#[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int# -> [GrammarData.ItoCMovement]
                         {- Arity: 1, Strictness: <L,U> -}
                       = \ x5 :: GHC.Prim.Int#[OneShot] ->
                         case y of wild {
                           GrammarData.NoItoCMove
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [GrammarData.ItoCMovement]
                                     GrammarData.$fEnumItoCMovement_c
                                     (GHC.Types.[] @ GrammarData.ItoCMovement)
                                     x4
                                     x5
                                     0
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [GrammarData.ItoCMovement]
                                     GrammarData.$fEnumItoCMovement_c
                                     (GHC.Types.[] @ GrammarData.ItoCMovement)
                                     x4
                                     x5
                                     0 }
                           GrammarData.OblItoCMove
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [GrammarData.ItoCMovement]
                                     GrammarData.$fEnumItoCMovement_c
                                     (GHC.Types.[] @ GrammarData.ItoCMovement)
                                     x4
                                     x5
                                     1
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [GrammarData.ItoCMovement]
                                     GrammarData.$fEnumItoCMovement_c
                                     (GHC.Types.[] @ GrammarData.ItoCMovement)
                                     x4
                                     x5
                                     1 } }
                     } in
                     case x2 of wild {
                       GrammarData.NoItoCMove -> $j1 0 GrammarData.OblItoCMove -> $j1 1 }
                 } in
                 case x1 of wild {
                   GrammarData.NoItoCMove -> $j 0
                   GrammarData.OblItoCMove -> $j 1 }) -}
f50dc15d9604ea3311686cfae7fe1d21
  $fEnumItoCMovement_$cenumFromTo ::
    GrammarData.ItoCMovement
    -> GrammarData.ItoCMovement -> [GrammarData.ItoCMovement]
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ x :: GrammarData.ItoCMovement
                   y :: GrammarData.ItoCMovement ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.ItoCMovement]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ x1 :: GHC.Prim.Int#[OneShot] ->
                     case y of wild {
                       GrammarData.NoItoCMove
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 0) of wild1 {
                            GHC.Types.False -> GrammarData.$fEnumItoCMovement_go1 x1
                            GHC.Types.True -> GHC.Types.[] @ GrammarData.ItoCMovement }
                       GrammarData.OblItoCMove
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 1) of wild1 {
                            GHC.Types.False -> GrammarData.$fEnumItoCMovement_go x1
                            GHC.Types.True -> GHC.Types.[] @ GrammarData.ItoCMovement } }
                 } in
                 case x of wild {
                   GrammarData.NoItoCMove -> $j 0
                   GrammarData.OblItoCMove -> $j 1 }) -}
f50dc15d9604ea3311686cfae7fe1d21
  $fEnumItoCMovement_$cfromEnum ::
    GrammarData.ItoCMovement -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.ItoCMovement ->
                 case a13 of wild {
                   GrammarData.NoItoCMove -> GHC.Types.I# 0
                   GrammarData.OblItoCMove -> GHC.Types.I# 1 }) -}
f50dc15d9604ea3311686cfae7fe1d21
  $fEnumItoCMovement_$cpred ::
    GrammarData.ItoCMovement -> GrammarData.ItoCMovement
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.ItoCMovement ->
                 case a13 of wild {
                   GrammarData.NoItoCMove -> GrammarData.$fEnumItoCMovement4
                   GrammarData.OblItoCMove -> GrammarData.NoItoCMove }) -}
f50dc15d9604ea3311686cfae7fe1d21
  $fEnumItoCMovement_$csucc ::
    GrammarData.ItoCMovement -> GrammarData.ItoCMovement
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.ItoCMovement ->
                 case a13 of wild {
                   GrammarData.NoItoCMove -> GrammarData.OblItoCMove
                   GrammarData.OblItoCMove -> GrammarData.$fEnumItoCMovement5 }) -}
f50dc15d9604ea3311686cfae7fe1d21
  $fEnumItoCMovement_$ctoEnum ::
    GHC.Types.Int -> GrammarData.ItoCMovement
  {- Arity: 1, Strictness: <S,1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: GHC.Types.Int ->
                 case w of ww { GHC.Types.I# ww1 ->
                 GrammarData.$w$ctoEnum3 ww1 }) -}
f50dc15d9604ea3311686cfae7fe1d21
  $fEnumItoCMovement_c ::
    GHC.Types.Int
    -> [GrammarData.ItoCMovement] -> [GrammarData.ItoCMovement]
  {- Arity: 2, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int ys :: [GrammarData.ItoCMovement] ->
                 GHC.Types.:
                   @ GrammarData.ItoCMovement
                   (GrammarData.$fEnumItoCMovement_$ctoEnum x)
                   ys) -}
f50dc15d9604ea3311686cfae7fe1d21
  $fEnumItoCMovement_c1 ::
    GHC.Types.Int
    -> [GrammarData.ItoCMovement] -> [GrammarData.ItoCMovement]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int ys :: [GrammarData.ItoCMovement] ->
                 GHC.Types.:
                   @ GrammarData.ItoCMovement
                   (case x of wild { GHC.Types.I# a13 ->
                    GHC.Prim.tagToEnum# @ GrammarData.ItoCMovement a13 })
                   ys) -}
f50dc15d9604ea3311686cfae7fe1d21
  $fEnumItoCMovement_go ::
    GHC.Prim.Int# -> [GrammarData.ItoCMovement]
  {- Arity: 1, Strictness: <L,U> -}
f50dc15d9604ea3311686cfae7fe1d21
  $fEnumItoCMovement_go1 ::
    GHC.Prim.Int# -> [GrammarData.ItoCMovement]
  {- Arity: 1, Strictness: <L,U> -}
f50dc15d9604ea3311686cfae7fe1d21
  $fEnumItoCMovement_go2 ::
    GHC.Prim.Int# -> [GrammarData.ItoCMovement]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
f50dc15d9604ea3311686cfae7fe1d21
  $fEnumItoCMovement_go3 ::
    GHC.Prim.Int# -> [GrammarData.ItoCMovement]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
19cdce3f97e68ed82a91b2a7c4c3ff7b
  $fEnumLeafType :: GHC.Enum.Enum GrammarData.LeafType
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.LeafType
                  GrammarData.$fEnumLeafType_$csucc
                  GrammarData.$fEnumLeafType_$cpred
                  GrammarData.$fEnumLeafType_$ctoEnum
                  GrammarData.$fEnumLeafType_$cfromEnum
                  GrammarData.$fEnumLeafType_$cenumFrom
                  GrammarData.$fEnumLeafType_$cenumFromThen
                  GrammarData.$fEnumLeafType_$cenumFromTo
                  GrammarData.$fEnumLeafType_$cenumFromThenTo -}
19cdce3f97e68ed82a91b2a7c4c3ff7b
  $fEnumLeafType1 :: GHC.Prim.Int# -> GrammarData.LeafType
  {- Arity: 1, Strictness: <L,U>b -}
19cdce3f97e68ed82a91b2a7c4c3ff7b
  $fEnumLeafType2 :: [GrammarData.LeafType]
  {- Unfolding: (GrammarData.$fEnumLeafType_go2 1) -}
19cdce3f97e68ed82a91b2a7c4c3ff7b
  $fEnumLeafType3 :: [GrammarData.LeafType]
  {- Unfolding: (GrammarData.$fEnumLeafType_go3 0) -}
19cdce3f97e68ed82a91b2a7c4c3ff7b
  $fEnumLeafType4 :: GrammarData.LeafType
  {- Strictness: b -}
19cdce3f97e68ed82a91b2a7c4c3ff7b
  $fEnumLeafType5 :: GrammarData.LeafType
  {- Strictness: b -}
19cdce3f97e68ed82a91b2a7c4c3ff7b
  $fEnumLeafType_$cenumFrom ::
    GrammarData.LeafType -> [GrammarData.LeafType]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ a13 :: GrammarData.LeafType ->
                 case a13 of wild {
                   GrammarData.LeafWord -> GrammarData.$fEnumLeafType3
                   GrammarData.LeafAffix -> GrammarData.$fEnumLeafType2 }) -}
19cdce3f97e68ed82a91b2a7c4c3ff7b
  $fEnumLeafType_$cenumFromThen ::
    GrammarData.LeafType
    -> GrammarData.LeafType -> [GrammarData.LeafType]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a13 :: GrammarData.LeafType
                   b :: GrammarData.LeafType ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.LeafType]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ a# :: GHC.Prim.Int#[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int# -> [GrammarData.LeafType]
                         {- Arity: 1, Strictness: <L,U> -}
                       = \ b# :: GHC.Prim.Int#[OneShot] ->
                         let {
                           $j2 :: GHC.Prim.Int# -> [GrammarData.LeafType]
                             {- Arity: 1, Strictness: <L,U> -}
                           = \ y :: GHC.Prim.Int#[OneShot] ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# b# a#) of wild {
                               GHC.Types.False
                               -> GHC.Enum.efdtIntDnFB
                                    @ [GrammarData.LeafType]
                                    GrammarData.$fEnumLeafType_c1
                                    (GHC.Types.[] @ GrammarData.LeafType)
                                    a#
                                    b#
                                    y
                               GHC.Types.True
                               -> GHC.Enum.efdtIntUpFB
                                    @ [GrammarData.LeafType]
                                    GrammarData.$fEnumLeafType_c1
                                    (GHC.Types.[] @ GrammarData.LeafType)
                                    a#
                                    b#
                                    y }
                         } in
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.># a# b#) of wild {
                           GHC.Types.False -> $j2 1 GHC.Types.True -> $j2 0 }
                     } in
                     case b of wild {
                       GrammarData.LeafWord -> $j1 0 GrammarData.LeafAffix -> $j1 1 }
                 } in
                 case a13 of wild {
                   GrammarData.LeafWord -> $j 0 GrammarData.LeafAffix -> $j 1 }) -}
19cdce3f97e68ed82a91b2a7c4c3ff7b
  $fEnumLeafType_$cenumFromThenTo ::
    GrammarData.LeafType
    -> GrammarData.LeafType
    -> GrammarData.LeafType
    -> [GrammarData.LeafType]
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U>,
     Unfolding: (\ x1 :: GrammarData.LeafType
                   x2 :: GrammarData.LeafType
                   y :: GrammarData.LeafType ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.LeafType]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ x4 :: GHC.Prim.Int#[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int# -> [GrammarData.LeafType]
                         {- Arity: 1, Strictness: <L,U> -}
                       = \ x5 :: GHC.Prim.Int#[OneShot] ->
                         case y of wild {
                           GrammarData.LeafWord
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [GrammarData.LeafType]
                                     GrammarData.$fEnumLeafType_c
                                     (GHC.Types.[] @ GrammarData.LeafType)
                                     x4
                                     x5
                                     0
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [GrammarData.LeafType]
                                     GrammarData.$fEnumLeafType_c
                                     (GHC.Types.[] @ GrammarData.LeafType)
                                     x4
                                     x5
                                     0 }
                           GrammarData.LeafAffix
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [GrammarData.LeafType]
                                     GrammarData.$fEnumLeafType_c
                                     (GHC.Types.[] @ GrammarData.LeafType)
                                     x4
                                     x5
                                     1
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [GrammarData.LeafType]
                                     GrammarData.$fEnumLeafType_c
                                     (GHC.Types.[] @ GrammarData.LeafType)
                                     x4
                                     x5
                                     1 } }
                     } in
                     case x2 of wild {
                       GrammarData.LeafWord -> $j1 0 GrammarData.LeafAffix -> $j1 1 }
                 } in
                 case x1 of wild {
                   GrammarData.LeafWord -> $j 0 GrammarData.LeafAffix -> $j 1 }) -}
19cdce3f97e68ed82a91b2a7c4c3ff7b
  $fEnumLeafType_$cenumFromTo ::
    GrammarData.LeafType
    -> GrammarData.LeafType -> [GrammarData.LeafType]
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ x :: GrammarData.LeafType
                   y :: GrammarData.LeafType ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.LeafType]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ x1 :: GHC.Prim.Int#[OneShot] ->
                     case y of wild {
                       GrammarData.LeafWord
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 0) of wild1 {
                            GHC.Types.False -> GrammarData.$fEnumLeafType_go1 x1
                            GHC.Types.True -> GHC.Types.[] @ GrammarData.LeafType }
                       GrammarData.LeafAffix
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 1) of wild1 {
                            GHC.Types.False -> GrammarData.$fEnumLeafType_go x1
                            GHC.Types.True -> GHC.Types.[] @ GrammarData.LeafType } }
                 } in
                 case x of wild {
                   GrammarData.LeafWord -> $j 0 GrammarData.LeafAffix -> $j 1 }) -}
19cdce3f97e68ed82a91b2a7c4c3ff7b
  $fEnumLeafType_$cfromEnum :: GrammarData.LeafType -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.LeafType ->
                 case a13 of wild {
                   GrammarData.LeafWord -> GHC.Types.I# 0
                   GrammarData.LeafAffix -> GHC.Types.I# 1 }) -}
19cdce3f97e68ed82a91b2a7c4c3ff7b
  $fEnumLeafType_$cpred ::
    GrammarData.LeafType -> GrammarData.LeafType
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.LeafType ->
                 case a13 of wild {
                   GrammarData.LeafWord -> GrammarData.$fEnumLeafType4
                   GrammarData.LeafAffix -> GrammarData.LeafWord }) -}
19cdce3f97e68ed82a91b2a7c4c3ff7b
  $fEnumLeafType_$csucc ::
    GrammarData.LeafType -> GrammarData.LeafType
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.LeafType ->
                 case a13 of wild {
                   GrammarData.LeafWord -> GrammarData.LeafAffix
                   GrammarData.LeafAffix -> GrammarData.$fEnumLeafType5 }) -}
19cdce3f97e68ed82a91b2a7c4c3ff7b
  $fEnumLeafType_$ctoEnum :: GHC.Types.Int -> GrammarData.LeafType
  {- Arity: 1, Strictness: <S,1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: GHC.Types.Int ->
                 case w of ww { GHC.Types.I# ww1 ->
                 GrammarData.$w$ctoEnum4 ww1 }) -}
19cdce3f97e68ed82a91b2a7c4c3ff7b
  $fEnumLeafType_c ::
    GHC.Types.Int -> [GrammarData.LeafType] -> [GrammarData.LeafType]
  {- Arity: 2, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int ys :: [GrammarData.LeafType] ->
                 GHC.Types.:
                   @ GrammarData.LeafType
                   (GrammarData.$fEnumLeafType_$ctoEnum x)
                   ys) -}
19cdce3f97e68ed82a91b2a7c4c3ff7b
  $fEnumLeafType_c1 ::
    GHC.Types.Int -> [GrammarData.LeafType] -> [GrammarData.LeafType]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int ys :: [GrammarData.LeafType] ->
                 GHC.Types.:
                   @ GrammarData.LeafType
                   (case x of wild { GHC.Types.I# a13 ->
                    GHC.Prim.tagToEnum# @ GrammarData.LeafType a13 })
                   ys) -}
19cdce3f97e68ed82a91b2a7c4c3ff7b
  $fEnumLeafType_go :: GHC.Prim.Int# -> [GrammarData.LeafType]
  {- Arity: 1, Strictness: <L,U> -}
19cdce3f97e68ed82a91b2a7c4c3ff7b
  $fEnumLeafType_go1 :: GHC.Prim.Int# -> [GrammarData.LeafType]
  {- Arity: 1, Strictness: <L,U> -}
19cdce3f97e68ed82a91b2a7c4c3ff7b
  $fEnumLeafType_go2 :: GHC.Prim.Int# -> [GrammarData.LeafType]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
19cdce3f97e68ed82a91b2a7c4c3ff7b
  $fEnumLeafType_go3 :: GHC.Prim.Int# -> [GrammarData.LeafType]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
18ee0e7b552f6ff0d4e216ac9d914b33
  $fEnumLexCat :: GHC.Enum.Enum GrammarData.LexCat
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.LexCat
                  GrammarData.$fEnumLexCat_$csucc
                  GrammarData.$fEnumLexCat_$cpred
                  GrammarData.$fEnumLexCat_$ctoEnum
                  GrammarData.$fEnumLexCat_$cfromEnum
                  GrammarData.$fEnumLexCat_$cenumFrom
                  GrammarData.$fEnumLexCat_$cenumFromThen
                  GrammarData.$fEnumLexCat_$cenumFromTo
                  GrammarData.$fEnumLexCat_$cenumFromThenTo -}
18ee0e7b552f6ff0d4e216ac9d914b33
  $fEnumLexCat1 :: [GrammarData.LexCat]
  {- Unfolding: (GrammarData.$fEnumLexCat_go8 7) -}
18ee0e7b552f6ff0d4e216ac9d914b33
  $fEnumLexCat10 :: GrammarData.LexCat
  {- Strictness: b -}
18ee0e7b552f6ff0d4e216ac9d914b33
  $fEnumLexCat11 :: GrammarData.LexCat
  {- Strictness: b -}
18ee0e7b552f6ff0d4e216ac9d914b33
  $fEnumLexCat2 :: [GrammarData.LexCat]
  {- Unfolding: (GrammarData.$fEnumLexCat_go9 6) -}
18ee0e7b552f6ff0d4e216ac9d914b33
  $fEnumLexCat3 :: [GrammarData.LexCat]
  {- Unfolding: (GrammarData.$fEnumLexCat_go10 5) -}
18ee0e7b552f6ff0d4e216ac9d914b33
  $fEnumLexCat4 :: [GrammarData.LexCat]
  {- Unfolding: (GrammarData.$fEnumLexCat_go11 4) -}
18ee0e7b552f6ff0d4e216ac9d914b33
  $fEnumLexCat5 :: [GrammarData.LexCat]
  {- Unfolding: (GrammarData.$fEnumLexCat_go12 3) -}
18ee0e7b552f6ff0d4e216ac9d914b33
  $fEnumLexCat6 :: [GrammarData.LexCat]
  {- Unfolding: (GrammarData.$fEnumLexCat_go13 2) -}
18ee0e7b552f6ff0d4e216ac9d914b33
  $fEnumLexCat7 :: [GrammarData.LexCat]
  {- Unfolding: (GrammarData.$fEnumLexCat_go14 1) -}
18ee0e7b552f6ff0d4e216ac9d914b33
  $fEnumLexCat8 :: [GrammarData.LexCat]
  {- Unfolding: (GrammarData.$fEnumLexCat_go15 0) -}
18ee0e7b552f6ff0d4e216ac9d914b33
  $fEnumLexCat9 :: GHC.Prim.Int# -> GrammarData.LexCat
  {- Arity: 1, Strictness: <L,U>b -}
18ee0e7b552f6ff0d4e216ac9d914b33
  $fEnumLexCat_$cenumFrom ::
    GrammarData.LexCat -> [GrammarData.LexCat]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ a13 :: GrammarData.LexCat ->
                 case a13 of wild {
                   GrammarData.Comp -> GrammarData.$fEnumLexCat8
                   GrammarData.Infl -> GrammarData.$fEnumLexCat7
                   GrammarData.Verb -> GrammarData.$fEnumLexCat6
                   GrammarData.Det -> GrammarData.$fEnumLexCat5
                   GrammarData.Noun -> GrammarData.$fEnumLexCat4
                   GrammarData.Adpo -> GrammarData.$fEnumLexCat3
                   GrammarData.Adj -> GrammarData.$fEnumLexCat2
                   GrammarData.Adv -> GrammarData.$fEnumLexCat1 }) -}
18ee0e7b552f6ff0d4e216ac9d914b33
  $fEnumLexCat_$cenumFromThen ::
    GrammarData.LexCat -> GrammarData.LexCat -> [GrammarData.LexCat]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a13 :: GrammarData.LexCat b :: GrammarData.LexCat ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.LexCat]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ a# :: GHC.Prim.Int#[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int# -> [GrammarData.LexCat]
                         {- Arity: 1, Strictness: <L,U> -}
                       = \ b# :: GHC.Prim.Int#[OneShot] ->
                         let {
                           $j2 :: GHC.Prim.Int# -> [GrammarData.LexCat]
                             {- Arity: 1, Strictness: <L,U> -}
                           = \ y :: GHC.Prim.Int#[OneShot] ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# b# a#) of wild {
                               GHC.Types.False
                               -> GHC.Enum.efdtIntDnFB
                                    @ [GrammarData.LexCat]
                                    GrammarData.$fEnumLexCat_c
                                    (GHC.Types.[] @ GrammarData.LexCat)
                                    a#
                                    b#
                                    y
                               GHC.Types.True
                               -> GHC.Enum.efdtIntUpFB
                                    @ [GrammarData.LexCat]
                                    GrammarData.$fEnumLexCat_c
                                    (GHC.Types.[] @ GrammarData.LexCat)
                                    a#
                                    b#
                                    y }
                         } in
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.># a# b#) of wild {
                           GHC.Types.False -> $j2 7 GHC.Types.True -> $j2 0 }
                     } in
                     case b of wild {
                       GrammarData.Comp -> $j1 0
                       GrammarData.Infl -> $j1 1
                       GrammarData.Verb -> $j1 2
                       GrammarData.Det -> $j1 3
                       GrammarData.Noun -> $j1 4
                       GrammarData.Adpo -> $j1 5
                       GrammarData.Adj -> $j1 6
                       GrammarData.Adv -> $j1 7 }
                 } in
                 case a13 of wild {
                   GrammarData.Comp -> $j 0
                   GrammarData.Infl -> $j 1
                   GrammarData.Verb -> $j 2
                   GrammarData.Det -> $j 3
                   GrammarData.Noun -> $j 4
                   GrammarData.Adpo -> $j 5
                   GrammarData.Adj -> $j 6
                   GrammarData.Adv -> $j 7 }) -}
18ee0e7b552f6ff0d4e216ac9d914b33
  $fEnumLexCat_$cenumFromThenTo ::
    GrammarData.LexCat
    -> GrammarData.LexCat -> GrammarData.LexCat -> [GrammarData.LexCat]
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U> -}
18ee0e7b552f6ff0d4e216ac9d914b33
  $fEnumLexCat_$cenumFromTo ::
    GrammarData.LexCat -> GrammarData.LexCat -> [GrammarData.LexCat]
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ x :: GrammarData.LexCat y :: GrammarData.LexCat ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.LexCat]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ x1 :: GHC.Prim.Int#[OneShot] ->
                     case y of wild {
                       GrammarData.Comp
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 0) of wild1 {
                            GHC.Types.False -> GrammarData.$fEnumLexCat_go7 x1
                            GHC.Types.True -> GHC.Types.[] @ GrammarData.LexCat }
                       GrammarData.Infl
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 1) of wild1 {
                            GHC.Types.False -> GrammarData.$fEnumLexCat_go6 x1
                            GHC.Types.True -> GHC.Types.[] @ GrammarData.LexCat }
                       GrammarData.Verb
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 2) of wild1 {
                            GHC.Types.False -> GrammarData.$fEnumLexCat_go5 x1
                            GHC.Types.True -> GHC.Types.[] @ GrammarData.LexCat }
                       GrammarData.Det
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 3) of wild1 {
                            GHC.Types.False -> GrammarData.$fEnumLexCat_go4 x1
                            GHC.Types.True -> GHC.Types.[] @ GrammarData.LexCat }
                       GrammarData.Noun
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 4) of wild1 {
                            GHC.Types.False -> GrammarData.$fEnumLexCat_go3 x1
                            GHC.Types.True -> GHC.Types.[] @ GrammarData.LexCat }
                       GrammarData.Adpo
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 5) of wild1 {
                            GHC.Types.False -> GrammarData.$fEnumLexCat_go2 x1
                            GHC.Types.True -> GHC.Types.[] @ GrammarData.LexCat }
                       GrammarData.Adj
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 6) of wild1 {
                            GHC.Types.False -> GrammarData.$fEnumLexCat_go1 x1
                            GHC.Types.True -> GHC.Types.[] @ GrammarData.LexCat }
                       GrammarData.Adv
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 7) of wild1 {
                            GHC.Types.False -> GrammarData.$fEnumLexCat_go x1
                            GHC.Types.True -> GHC.Types.[] @ GrammarData.LexCat } }
                 } in
                 case x of wild {
                   GrammarData.Comp -> $j 0
                   GrammarData.Infl -> $j 1
                   GrammarData.Verb -> $j 2
                   GrammarData.Det -> $j 3
                   GrammarData.Noun -> $j 4
                   GrammarData.Adpo -> $j 5
                   GrammarData.Adj -> $j 6
                   GrammarData.Adv -> $j 7 }) -}
18ee0e7b552f6ff0d4e216ac9d914b33
  $fEnumLexCat_$cfromEnum :: GrammarData.LexCat -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: GrammarData.LexCat ->
                 case w of wild {
                   GrammarData.Comp -> GHC.Types.I# 0
                   GrammarData.Infl -> GHC.Types.I# 1
                   GrammarData.Verb -> GHC.Types.I# 2
                   GrammarData.Det -> GHC.Types.I# 3
                   GrammarData.Noun -> GHC.Types.I# 4
                   GrammarData.Adpo -> GHC.Types.I# 5
                   GrammarData.Adj -> GHC.Types.I# 6
                   GrammarData.Adv -> GHC.Types.I# 7 }) -}
18ee0e7b552f6ff0d4e216ac9d914b33
  $fEnumLexCat_$cpred :: GrammarData.LexCat -> GrammarData.LexCat
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.LexCat ->
                 case a13 of wild {
                   GrammarData.Comp -> GrammarData.$fEnumLexCat10
                   GrammarData.Infl -> GrammarData.Comp
                   GrammarData.Verb -> GrammarData.Infl
                   GrammarData.Det -> GrammarData.Verb
                   GrammarData.Noun -> GrammarData.Det
                   GrammarData.Adpo -> GrammarData.Noun
                   GrammarData.Adj -> GrammarData.Adpo
                   GrammarData.Adv -> GrammarData.Adj }) -}
18ee0e7b552f6ff0d4e216ac9d914b33
  $fEnumLexCat_$csucc :: GrammarData.LexCat -> GrammarData.LexCat
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.LexCat ->
                 case a13 of wild {
                   GrammarData.Comp -> GrammarData.Infl
                   GrammarData.Infl -> GrammarData.Verb
                   GrammarData.Verb -> GrammarData.Det
                   GrammarData.Det -> GrammarData.Noun
                   GrammarData.Noun -> GrammarData.Adpo
                   GrammarData.Adpo -> GrammarData.Adj
                   GrammarData.Adj -> GrammarData.Adv
                   GrammarData.Adv -> GrammarData.$fEnumLexCat11 }) -}
18ee0e7b552f6ff0d4e216ac9d914b33
  $fEnumLexCat_$ctoEnum :: GHC.Types.Int -> GrammarData.LexCat
  {- Arity: 1, Strictness: <S,1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: GHC.Types.Int ->
                 case w of ww { GHC.Types.I# ww1 ->
                 GrammarData.$w$ctoEnum5 ww1 }) -}
18ee0e7b552f6ff0d4e216ac9d914b33
  $fEnumLexCat_c ::
    GHC.Types.Int -> [GrammarData.LexCat] -> [GrammarData.LexCat]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int ys :: [GrammarData.LexCat] ->
                 GHC.Types.:
                   @ GrammarData.LexCat
                   (case x of wild { GHC.Types.I# a13 ->
                    GHC.Prim.tagToEnum# @ GrammarData.LexCat a13 })
                   ys) -}
18ee0e7b552f6ff0d4e216ac9d914b33
  $fEnumLexCat_go :: GHC.Prim.Int# -> [GrammarData.LexCat]
  {- Arity: 1, Strictness: <L,U> -}
18ee0e7b552f6ff0d4e216ac9d914b33
  $fEnumLexCat_go1 :: GHC.Prim.Int# -> [GrammarData.LexCat]
  {- Arity: 1, Strictness: <L,U> -}
18ee0e7b552f6ff0d4e216ac9d914b33
  $fEnumLexCat_go10 :: GHC.Prim.Int# -> [GrammarData.LexCat]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
18ee0e7b552f6ff0d4e216ac9d914b33
  $fEnumLexCat_go11 :: GHC.Prim.Int# -> [GrammarData.LexCat]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
18ee0e7b552f6ff0d4e216ac9d914b33
  $fEnumLexCat_go12 :: GHC.Prim.Int# -> [GrammarData.LexCat]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
18ee0e7b552f6ff0d4e216ac9d914b33
  $fEnumLexCat_go13 :: GHC.Prim.Int# -> [GrammarData.LexCat]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
18ee0e7b552f6ff0d4e216ac9d914b33
  $fEnumLexCat_go14 :: GHC.Prim.Int# -> [GrammarData.LexCat]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
18ee0e7b552f6ff0d4e216ac9d914b33
  $fEnumLexCat_go15 :: GHC.Prim.Int# -> [GrammarData.LexCat]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
18ee0e7b552f6ff0d4e216ac9d914b33
  $fEnumLexCat_go2 :: GHC.Prim.Int# -> [GrammarData.LexCat]
  {- Arity: 1, Strictness: <L,U> -}
18ee0e7b552f6ff0d4e216ac9d914b33
  $fEnumLexCat_go3 :: GHC.Prim.Int# -> [GrammarData.LexCat]
  {- Arity: 1, Strictness: <L,U> -}
18ee0e7b552f6ff0d4e216ac9d914b33
  $fEnumLexCat_go4 :: GHC.Prim.Int# -> [GrammarData.LexCat]
  {- Arity: 1, Strictness: <L,U> -}
18ee0e7b552f6ff0d4e216ac9d914b33
  $fEnumLexCat_go5 :: GHC.Prim.Int# -> [GrammarData.LexCat]
  {- Arity: 1, Strictness: <L,U> -}
18ee0e7b552f6ff0d4e216ac9d914b33
  $fEnumLexCat_go6 :: GHC.Prim.Int# -> [GrammarData.LexCat]
  {- Arity: 1, Strictness: <L,U> -}
18ee0e7b552f6ff0d4e216ac9d914b33
  $fEnumLexCat_go7 :: GHC.Prim.Int# -> [GrammarData.LexCat]
  {- Arity: 1, Strictness: <L,U> -}
18ee0e7b552f6ff0d4e216ac9d914b33
  $fEnumLexCat_go8 :: GHC.Prim.Int# -> [GrammarData.LexCat]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
18ee0e7b552f6ff0d4e216ac9d914b33
  $fEnumLexCat_go9 :: GHC.Prim.Int# -> [GrammarData.LexCat]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
bfc1e5db9e1ebde5ee1a2df0cd215115
  $fEnumNullSubject :: GHC.Enum.Enum GrammarData.NullSubject
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.NullSubject
                  GrammarData.$fEnumNullSubject_$csucc
                  GrammarData.$fEnumNullSubject_$cpred
                  GrammarData.$fEnumNullSubject_$ctoEnum
                  GrammarData.$fEnumNullSubject_$cfromEnum
                  GrammarData.$fEnumNullSubject_$cenumFrom
                  GrammarData.$fEnumNullSubject_$cenumFromThen
                  GrammarData.$fEnumNullSubject_$cenumFromTo
                  GrammarData.$fEnumNullSubject_$cenumFromThenTo -}
bfc1e5db9e1ebde5ee1a2df0cd215115
  $fEnumNullSubject1 :: GHC.Prim.Int# -> GrammarData.NullSubject
  {- Arity: 1, Strictness: <L,U>b -}
bfc1e5db9e1ebde5ee1a2df0cd215115
  $fEnumNullSubject2 :: [GrammarData.NullSubject]
  {- Unfolding: (GrammarData.$fEnumNullSubject_go2 1) -}
bfc1e5db9e1ebde5ee1a2df0cd215115
  $fEnumNullSubject3 :: [GrammarData.NullSubject]
  {- Unfolding: (GrammarData.$fEnumNullSubject_go3 0) -}
bfc1e5db9e1ebde5ee1a2df0cd215115
  $fEnumNullSubject4 :: GrammarData.NullSubject
  {- Strictness: b -}
bfc1e5db9e1ebde5ee1a2df0cd215115
  $fEnumNullSubject5 :: GrammarData.NullSubject
  {- Strictness: b -}
bfc1e5db9e1ebde5ee1a2df0cd215115
  $fEnumNullSubject_$cenumFrom ::
    GrammarData.NullSubject -> [GrammarData.NullSubject]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ a13 :: GrammarData.NullSubject ->
                 case a13 of wild {
                   GrammarData.NoNullSub -> GrammarData.$fEnumNullSubject3
                   GrammarData.OptNullSub -> GrammarData.$fEnumNullSubject2 }) -}
bfc1e5db9e1ebde5ee1a2df0cd215115
  $fEnumNullSubject_$cenumFromThen ::
    GrammarData.NullSubject
    -> GrammarData.NullSubject -> [GrammarData.NullSubject]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a13 :: GrammarData.NullSubject
                   b :: GrammarData.NullSubject ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.NullSubject]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ a# :: GHC.Prim.Int#[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int# -> [GrammarData.NullSubject]
                         {- Arity: 1, Strictness: <L,U> -}
                       = \ b# :: GHC.Prim.Int#[OneShot] ->
                         let {
                           $j2 :: GHC.Prim.Int# -> [GrammarData.NullSubject]
                             {- Arity: 1, Strictness: <L,U> -}
                           = \ y :: GHC.Prim.Int#[OneShot] ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# b# a#) of wild {
                               GHC.Types.False
                               -> GHC.Enum.efdtIntDnFB
                                    @ [GrammarData.NullSubject]
                                    GrammarData.$fEnumNullSubject_c1
                                    (GHC.Types.[] @ GrammarData.NullSubject)
                                    a#
                                    b#
                                    y
                               GHC.Types.True
                               -> GHC.Enum.efdtIntUpFB
                                    @ [GrammarData.NullSubject]
                                    GrammarData.$fEnumNullSubject_c1
                                    (GHC.Types.[] @ GrammarData.NullSubject)
                                    a#
                                    b#
                                    y }
                         } in
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.># a# b#) of wild {
                           GHC.Types.False -> $j2 1 GHC.Types.True -> $j2 0 }
                     } in
                     case b of wild {
                       GrammarData.NoNullSub -> $j1 0 GrammarData.OptNullSub -> $j1 1 }
                 } in
                 case a13 of wild {
                   GrammarData.NoNullSub -> $j 0 GrammarData.OptNullSub -> $j 1 }) -}
bfc1e5db9e1ebde5ee1a2df0cd215115
  $fEnumNullSubject_$cenumFromThenTo ::
    GrammarData.NullSubject
    -> GrammarData.NullSubject
    -> GrammarData.NullSubject
    -> [GrammarData.NullSubject]
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U>,
     Unfolding: (\ x1 :: GrammarData.NullSubject
                   x2 :: GrammarData.NullSubject
                   y :: GrammarData.NullSubject ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.NullSubject]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ x4 :: GHC.Prim.Int#[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int# -> [GrammarData.NullSubject]
                         {- Arity: 1, Strictness: <L,U> -}
                       = \ x5 :: GHC.Prim.Int#[OneShot] ->
                         case y of wild {
                           GrammarData.NoNullSub
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [GrammarData.NullSubject]
                                     GrammarData.$fEnumNullSubject_c
                                     (GHC.Types.[] @ GrammarData.NullSubject)
                                     x4
                                     x5
                                     0
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [GrammarData.NullSubject]
                                     GrammarData.$fEnumNullSubject_c
                                     (GHC.Types.[] @ GrammarData.NullSubject)
                                     x4
                                     x5
                                     0 }
                           GrammarData.OptNullSub
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [GrammarData.NullSubject]
                                     GrammarData.$fEnumNullSubject_c
                                     (GHC.Types.[] @ GrammarData.NullSubject)
                                     x4
                                     x5
                                     1
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [GrammarData.NullSubject]
                                     GrammarData.$fEnumNullSubject_c
                                     (GHC.Types.[] @ GrammarData.NullSubject)
                                     x4
                                     x5
                                     1 } }
                     } in
                     case x2 of wild {
                       GrammarData.NoNullSub -> $j1 0 GrammarData.OptNullSub -> $j1 1 }
                 } in
                 case x1 of wild {
                   GrammarData.NoNullSub -> $j 0 GrammarData.OptNullSub -> $j 1 }) -}
bfc1e5db9e1ebde5ee1a2df0cd215115
  $fEnumNullSubject_$cenumFromTo ::
    GrammarData.NullSubject
    -> GrammarData.NullSubject -> [GrammarData.NullSubject]
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ x :: GrammarData.NullSubject
                   y :: GrammarData.NullSubject ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.NullSubject]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ x1 :: GHC.Prim.Int#[OneShot] ->
                     case y of wild {
                       GrammarData.NoNullSub
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 0) of wild1 {
                            GHC.Types.False -> GrammarData.$fEnumNullSubject_go1 x1
                            GHC.Types.True -> GHC.Types.[] @ GrammarData.NullSubject }
                       GrammarData.OptNullSub
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 1) of wild1 {
                            GHC.Types.False -> GrammarData.$fEnumNullSubject_go x1
                            GHC.Types.True -> GHC.Types.[] @ GrammarData.NullSubject } }
                 } in
                 case x of wild {
                   GrammarData.NoNullSub -> $j 0 GrammarData.OptNullSub -> $j 1 }) -}
bfc1e5db9e1ebde5ee1a2df0cd215115
  $fEnumNullSubject_$cfromEnum ::
    GrammarData.NullSubject -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.NullSubject ->
                 case a13 of wild {
                   GrammarData.NoNullSub -> GHC.Types.I# 0
                   GrammarData.OptNullSub -> GHC.Types.I# 1 }) -}
bfc1e5db9e1ebde5ee1a2df0cd215115
  $fEnumNullSubject_$cpred ::
    GrammarData.NullSubject -> GrammarData.NullSubject
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.NullSubject ->
                 case a13 of wild {
                   GrammarData.NoNullSub -> GrammarData.$fEnumNullSubject4
                   GrammarData.OptNullSub -> GrammarData.NoNullSub }) -}
bfc1e5db9e1ebde5ee1a2df0cd215115
  $fEnumNullSubject_$csucc ::
    GrammarData.NullSubject -> GrammarData.NullSubject
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.NullSubject ->
                 case a13 of wild {
                   GrammarData.NoNullSub -> GrammarData.OptNullSub
                   GrammarData.OptNullSub -> GrammarData.$fEnumNullSubject5 }) -}
bfc1e5db9e1ebde5ee1a2df0cd215115
  $fEnumNullSubject_$ctoEnum ::
    GHC.Types.Int -> GrammarData.NullSubject
  {- Arity: 1, Strictness: <S,1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: GHC.Types.Int ->
                 case w of ww { GHC.Types.I# ww1 ->
                 GrammarData.$w$ctoEnum6 ww1 }) -}
bfc1e5db9e1ebde5ee1a2df0cd215115
  $fEnumNullSubject_c ::
    GHC.Types.Int
    -> [GrammarData.NullSubject] -> [GrammarData.NullSubject]
  {- Arity: 2, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int ys :: [GrammarData.NullSubject] ->
                 GHC.Types.:
                   @ GrammarData.NullSubject
                   (GrammarData.$fEnumNullSubject_$ctoEnum x)
                   ys) -}
bfc1e5db9e1ebde5ee1a2df0cd215115
  $fEnumNullSubject_c1 ::
    GHC.Types.Int
    -> [GrammarData.NullSubject] -> [GrammarData.NullSubject]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int ys :: [GrammarData.NullSubject] ->
                 GHC.Types.:
                   @ GrammarData.NullSubject
                   (case x of wild { GHC.Types.I# a13 ->
                    GHC.Prim.tagToEnum# @ GrammarData.NullSubject a13 })
                   ys) -}
bfc1e5db9e1ebde5ee1a2df0cd215115
  $fEnumNullSubject_go :: GHC.Prim.Int# -> [GrammarData.NullSubject]
  {- Arity: 1, Strictness: <L,U> -}
bfc1e5db9e1ebde5ee1a2df0cd215115
  $fEnumNullSubject_go1 :: GHC.Prim.Int# -> [GrammarData.NullSubject]
  {- Arity: 1, Strictness: <L,U> -}
bfc1e5db9e1ebde5ee1a2df0cd215115
  $fEnumNullSubject_go2 :: GHC.Prim.Int# -> [GrammarData.NullSubject]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
bfc1e5db9e1ebde5ee1a2df0cd215115
  $fEnumNullSubject_go3 :: GHC.Prim.Int# -> [GrammarData.NullSubject]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
f1cc99e06e27728b550e5649fb89e933
  $fEnumNullTopic :: GHC.Enum.Enum GrammarData.NullTopic
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.NullTopic
                  GrammarData.$fEnumNullTopic_$csucc
                  GrammarData.$fEnumNullTopic_$cpred
                  GrammarData.$fEnumNullTopic_$ctoEnum
                  GrammarData.$fEnumNullTopic_$cfromEnum
                  GrammarData.$fEnumNullTopic_$cenumFrom
                  GrammarData.$fEnumNullTopic_$cenumFromThen
                  GrammarData.$fEnumNullTopic_$cenumFromTo
                  GrammarData.$fEnumNullTopic_$cenumFromThenTo -}
f1cc99e06e27728b550e5649fb89e933
  $fEnumNullTopic1 :: GHC.Prim.Int# -> GrammarData.NullTopic
  {- Arity: 1, Strictness: <L,U>b -}
f1cc99e06e27728b550e5649fb89e933
  $fEnumNullTopic2 :: [GrammarData.NullTopic]
  {- Unfolding: (GrammarData.$fEnumNullTopic_go2 1) -}
f1cc99e06e27728b550e5649fb89e933
  $fEnumNullTopic3 :: [GrammarData.NullTopic]
  {- Unfolding: (GrammarData.$fEnumNullTopic_go3 0) -}
f1cc99e06e27728b550e5649fb89e933
  $fEnumNullTopic4 :: GrammarData.NullTopic
  {- Strictness: b -}
f1cc99e06e27728b550e5649fb89e933
  $fEnumNullTopic5 :: GrammarData.NullTopic
  {- Strictness: b -}
f1cc99e06e27728b550e5649fb89e933
  $fEnumNullTopic_$cenumFrom ::
    GrammarData.NullTopic -> [GrammarData.NullTopic]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ a13 :: GrammarData.NullTopic ->
                 case a13 of wild {
                   GrammarData.NoNullTop -> GrammarData.$fEnumNullTopic3
                   GrammarData.OptNullTop -> GrammarData.$fEnumNullTopic2 }) -}
f1cc99e06e27728b550e5649fb89e933
  $fEnumNullTopic_$cenumFromThen ::
    GrammarData.NullTopic
    -> GrammarData.NullTopic -> [GrammarData.NullTopic]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a13 :: GrammarData.NullTopic
                   b :: GrammarData.NullTopic ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.NullTopic]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ a# :: GHC.Prim.Int#[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int# -> [GrammarData.NullTopic]
                         {- Arity: 1, Strictness: <L,U> -}
                       = \ b# :: GHC.Prim.Int#[OneShot] ->
                         let {
                           $j2 :: GHC.Prim.Int# -> [GrammarData.NullTopic]
                             {- Arity: 1, Strictness: <L,U> -}
                           = \ y :: GHC.Prim.Int#[OneShot] ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# b# a#) of wild {
                               GHC.Types.False
                               -> GHC.Enum.efdtIntDnFB
                                    @ [GrammarData.NullTopic]
                                    GrammarData.$fEnumNullTopic_c1
                                    (GHC.Types.[] @ GrammarData.NullTopic)
                                    a#
                                    b#
                                    y
                               GHC.Types.True
                               -> GHC.Enum.efdtIntUpFB
                                    @ [GrammarData.NullTopic]
                                    GrammarData.$fEnumNullTopic_c1
                                    (GHC.Types.[] @ GrammarData.NullTopic)
                                    a#
                                    b#
                                    y }
                         } in
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.># a# b#) of wild {
                           GHC.Types.False -> $j2 1 GHC.Types.True -> $j2 0 }
                     } in
                     case b of wild {
                       GrammarData.NoNullTop -> $j1 0 GrammarData.OptNullTop -> $j1 1 }
                 } in
                 case a13 of wild {
                   GrammarData.NoNullTop -> $j 0 GrammarData.OptNullTop -> $j 1 }) -}
f1cc99e06e27728b550e5649fb89e933
  $fEnumNullTopic_$cenumFromThenTo ::
    GrammarData.NullTopic
    -> GrammarData.NullTopic
    -> GrammarData.NullTopic
    -> [GrammarData.NullTopic]
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U>,
     Unfolding: (\ x1 :: GrammarData.NullTopic
                   x2 :: GrammarData.NullTopic
                   y :: GrammarData.NullTopic ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.NullTopic]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ x4 :: GHC.Prim.Int#[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int# -> [GrammarData.NullTopic]
                         {- Arity: 1, Strictness: <L,U> -}
                       = \ x5 :: GHC.Prim.Int#[OneShot] ->
                         case y of wild {
                           GrammarData.NoNullTop
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [GrammarData.NullTopic]
                                     GrammarData.$fEnumNullTopic_c
                                     (GHC.Types.[] @ GrammarData.NullTopic)
                                     x4
                                     x5
                                     0
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [GrammarData.NullTopic]
                                     GrammarData.$fEnumNullTopic_c
                                     (GHC.Types.[] @ GrammarData.NullTopic)
                                     x4
                                     x5
                                     0 }
                           GrammarData.OptNullTop
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [GrammarData.NullTopic]
                                     GrammarData.$fEnumNullTopic_c
                                     (GHC.Types.[] @ GrammarData.NullTopic)
                                     x4
                                     x5
                                     1
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [GrammarData.NullTopic]
                                     GrammarData.$fEnumNullTopic_c
                                     (GHC.Types.[] @ GrammarData.NullTopic)
                                     x4
                                     x5
                                     1 } }
                     } in
                     case x2 of wild {
                       GrammarData.NoNullTop -> $j1 0 GrammarData.OptNullTop -> $j1 1 }
                 } in
                 case x1 of wild {
                   GrammarData.NoNullTop -> $j 0 GrammarData.OptNullTop -> $j 1 }) -}
f1cc99e06e27728b550e5649fb89e933
  $fEnumNullTopic_$cenumFromTo ::
    GrammarData.NullTopic
    -> GrammarData.NullTopic -> [GrammarData.NullTopic]
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ x :: GrammarData.NullTopic
                   y :: GrammarData.NullTopic ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.NullTopic]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ x1 :: GHC.Prim.Int#[OneShot] ->
                     case y of wild {
                       GrammarData.NoNullTop
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 0) of wild1 {
                            GHC.Types.False -> GrammarData.$fEnumNullTopic_go1 x1
                            GHC.Types.True -> GHC.Types.[] @ GrammarData.NullTopic }
                       GrammarData.OptNullTop
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 1) of wild1 {
                            GHC.Types.False -> GrammarData.$fEnumNullTopic_go x1
                            GHC.Types.True -> GHC.Types.[] @ GrammarData.NullTopic } }
                 } in
                 case x of wild {
                   GrammarData.NoNullTop -> $j 0 GrammarData.OptNullTop -> $j 1 }) -}
f1cc99e06e27728b550e5649fb89e933
  $fEnumNullTopic_$cfromEnum ::
    GrammarData.NullTopic -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.NullTopic ->
                 case a13 of wild {
                   GrammarData.NoNullTop -> GHC.Types.I# 0
                   GrammarData.OptNullTop -> GHC.Types.I# 1 }) -}
f1cc99e06e27728b550e5649fb89e933
  $fEnumNullTopic_$cpred ::
    GrammarData.NullTopic -> GrammarData.NullTopic
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.NullTopic ->
                 case a13 of wild {
                   GrammarData.NoNullTop -> GrammarData.$fEnumNullTopic4
                   GrammarData.OptNullTop -> GrammarData.NoNullTop }) -}
f1cc99e06e27728b550e5649fb89e933
  $fEnumNullTopic_$csucc ::
    GrammarData.NullTopic -> GrammarData.NullTopic
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.NullTopic ->
                 case a13 of wild {
                   GrammarData.NoNullTop -> GrammarData.OptNullTop
                   GrammarData.OptNullTop -> GrammarData.$fEnumNullTopic5 }) -}
f1cc99e06e27728b550e5649fb89e933
  $fEnumNullTopic_$ctoEnum :: GHC.Types.Int -> GrammarData.NullTopic
  {- Arity: 1, Strictness: <S,1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: GHC.Types.Int ->
                 case w of ww { GHC.Types.I# ww1 ->
                 GrammarData.$w$ctoEnum7 ww1 }) -}
f1cc99e06e27728b550e5649fb89e933
  $fEnumNullTopic_c ::
    GHC.Types.Int -> [GrammarData.NullTopic] -> [GrammarData.NullTopic]
  {- Arity: 2, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int ys :: [GrammarData.NullTopic] ->
                 GHC.Types.:
                   @ GrammarData.NullTopic
                   (GrammarData.$fEnumNullTopic_$ctoEnum x)
                   ys) -}
f1cc99e06e27728b550e5649fb89e933
  $fEnumNullTopic_c1 ::
    GHC.Types.Int -> [GrammarData.NullTopic] -> [GrammarData.NullTopic]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int ys :: [GrammarData.NullTopic] ->
                 GHC.Types.:
                   @ GrammarData.NullTopic
                   (case x of wild { GHC.Types.I# a13 ->
                    GHC.Prim.tagToEnum# @ GrammarData.NullTopic a13 })
                   ys) -}
f1cc99e06e27728b550e5649fb89e933
  $fEnumNullTopic_go :: GHC.Prim.Int# -> [GrammarData.NullTopic]
  {- Arity: 1, Strictness: <L,U> -}
f1cc99e06e27728b550e5649fb89e933
  $fEnumNullTopic_go1 :: GHC.Prim.Int# -> [GrammarData.NullTopic]
  {- Arity: 1, Strictness: <L,U> -}
f1cc99e06e27728b550e5649fb89e933
  $fEnumNullTopic_go2 :: GHC.Prim.Int# -> [GrammarData.NullTopic]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
f1cc99e06e27728b550e5649fb89e933
  $fEnumNullTopic_go3 :: GHC.Prim.Int# -> [GrammarData.NullTopic]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
3990d98c3efc6fe781e2cd9838fc9785
  $fEnumObjectFinal :: GHC.Enum.Enum GrammarData.ObjectFinal
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.ObjectFinal
                  GrammarData.$fEnumObjectFinal_$csucc
                  GrammarData.$fEnumObjectFinal_$cpred
                  GrammarData.$fEnumObjectFinal_$ctoEnum
                  GrammarData.$fEnumObjectFinal_$cfromEnum
                  GrammarData.$fEnumObjectFinal_$cenumFrom
                  GrammarData.$fEnumObjectFinal_$cenumFromThen
                  GrammarData.$fEnumObjectFinal_$cenumFromTo
                  GrammarData.$fEnumObjectFinal_$cenumFromThenTo -}
3990d98c3efc6fe781e2cd9838fc9785
  $fEnumObjectFinal1 :: GHC.Prim.Int# -> GrammarData.ObjectFinal
  {- Arity: 1, Strictness: <L,U>b -}
3990d98c3efc6fe781e2cd9838fc9785
  $fEnumObjectFinal2 :: [GrammarData.ObjectFinal]
  {- Unfolding: (GrammarData.$fEnumObjectFinal_go2 1) -}
3990d98c3efc6fe781e2cd9838fc9785
  $fEnumObjectFinal3 :: [GrammarData.ObjectFinal]
  {- Unfolding: (GrammarData.$fEnumObjectFinal_go3 0) -}
3990d98c3efc6fe781e2cd9838fc9785
  $fEnumObjectFinal4 :: GrammarData.ObjectFinal
  {- Strictness: b -}
3990d98c3efc6fe781e2cd9838fc9785
  $fEnumObjectFinal5 :: GrammarData.ObjectFinal
  {- Strictness: b -}
3990d98c3efc6fe781e2cd9838fc9785
  $fEnumObjectFinal_$cenumFrom ::
    GrammarData.ObjectFinal -> [GrammarData.ObjectFinal]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ a13 :: GrammarData.ObjectFinal ->
                 case a13 of wild {
                   GrammarData.ObjFinal -> GrammarData.$fEnumObjectFinal3
                   GrammarData.ObjInitial -> GrammarData.$fEnumObjectFinal2 }) -}
3990d98c3efc6fe781e2cd9838fc9785
  $fEnumObjectFinal_$cenumFromThen ::
    GrammarData.ObjectFinal
    -> GrammarData.ObjectFinal -> [GrammarData.ObjectFinal]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a13 :: GrammarData.ObjectFinal
                   b :: GrammarData.ObjectFinal ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.ObjectFinal]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ a# :: GHC.Prim.Int#[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int# -> [GrammarData.ObjectFinal]
                         {- Arity: 1, Strictness: <L,U> -}
                       = \ b# :: GHC.Prim.Int#[OneShot] ->
                         let {
                           $j2 :: GHC.Prim.Int# -> [GrammarData.ObjectFinal]
                             {- Arity: 1, Strictness: <L,U> -}
                           = \ y :: GHC.Prim.Int#[OneShot] ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# b# a#) of wild {
                               GHC.Types.False
                               -> GHC.Enum.efdtIntDnFB
                                    @ [GrammarData.ObjectFinal]
                                    GrammarData.$fEnumObjectFinal_c1
                                    (GHC.Types.[] @ GrammarData.ObjectFinal)
                                    a#
                                    b#
                                    y
                               GHC.Types.True
                               -> GHC.Enum.efdtIntUpFB
                                    @ [GrammarData.ObjectFinal]
                                    GrammarData.$fEnumObjectFinal_c1
                                    (GHC.Types.[] @ GrammarData.ObjectFinal)
                                    a#
                                    b#
                                    y }
                         } in
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.># a# b#) of wild {
                           GHC.Types.False -> $j2 1 GHC.Types.True -> $j2 0 }
                     } in
                     case b of wild {
                       GrammarData.ObjFinal -> $j1 0 GrammarData.ObjInitial -> $j1 1 }
                 } in
                 case a13 of wild {
                   GrammarData.ObjFinal -> $j 0 GrammarData.ObjInitial -> $j 1 }) -}
3990d98c3efc6fe781e2cd9838fc9785
  $fEnumObjectFinal_$cenumFromThenTo ::
    GrammarData.ObjectFinal
    -> GrammarData.ObjectFinal
    -> GrammarData.ObjectFinal
    -> [GrammarData.ObjectFinal]
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U>,
     Unfolding: (\ x1 :: GrammarData.ObjectFinal
                   x2 :: GrammarData.ObjectFinal
                   y :: GrammarData.ObjectFinal ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.ObjectFinal]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ x4 :: GHC.Prim.Int#[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int# -> [GrammarData.ObjectFinal]
                         {- Arity: 1, Strictness: <L,U> -}
                       = \ x5 :: GHC.Prim.Int#[OneShot] ->
                         case y of wild {
                           GrammarData.ObjFinal
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [GrammarData.ObjectFinal]
                                     GrammarData.$fEnumObjectFinal_c
                                     (GHC.Types.[] @ GrammarData.ObjectFinal)
                                     x4
                                     x5
                                     0
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [GrammarData.ObjectFinal]
                                     GrammarData.$fEnumObjectFinal_c
                                     (GHC.Types.[] @ GrammarData.ObjectFinal)
                                     x4
                                     x5
                                     0 }
                           GrammarData.ObjInitial
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [GrammarData.ObjectFinal]
                                     GrammarData.$fEnumObjectFinal_c
                                     (GHC.Types.[] @ GrammarData.ObjectFinal)
                                     x4
                                     x5
                                     1
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [GrammarData.ObjectFinal]
                                     GrammarData.$fEnumObjectFinal_c
                                     (GHC.Types.[] @ GrammarData.ObjectFinal)
                                     x4
                                     x5
                                     1 } }
                     } in
                     case x2 of wild {
                       GrammarData.ObjFinal -> $j1 0 GrammarData.ObjInitial -> $j1 1 }
                 } in
                 case x1 of wild {
                   GrammarData.ObjFinal -> $j 0 GrammarData.ObjInitial -> $j 1 }) -}
3990d98c3efc6fe781e2cd9838fc9785
  $fEnumObjectFinal_$cenumFromTo ::
    GrammarData.ObjectFinal
    -> GrammarData.ObjectFinal -> [GrammarData.ObjectFinal]
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ x :: GrammarData.ObjectFinal
                   y :: GrammarData.ObjectFinal ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.ObjectFinal]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ x1 :: GHC.Prim.Int#[OneShot] ->
                     case y of wild {
                       GrammarData.ObjFinal
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 0) of wild1 {
                            GHC.Types.False -> GrammarData.$fEnumObjectFinal_go1 x1
                            GHC.Types.True -> GHC.Types.[] @ GrammarData.ObjectFinal }
                       GrammarData.ObjInitial
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 1) of wild1 {
                            GHC.Types.False -> GrammarData.$fEnumObjectFinal_go x1
                            GHC.Types.True -> GHC.Types.[] @ GrammarData.ObjectFinal } }
                 } in
                 case x of wild {
                   GrammarData.ObjFinal -> $j 0 GrammarData.ObjInitial -> $j 1 }) -}
3990d98c3efc6fe781e2cd9838fc9785
  $fEnumObjectFinal_$cfromEnum ::
    GrammarData.ObjectFinal -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.ObjectFinal ->
                 case a13 of wild {
                   GrammarData.ObjFinal -> GHC.Types.I# 0
                   GrammarData.ObjInitial -> GHC.Types.I# 1 }) -}
3990d98c3efc6fe781e2cd9838fc9785
  $fEnumObjectFinal_$cpred ::
    GrammarData.ObjectFinal -> GrammarData.ObjectFinal
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.ObjectFinal ->
                 case a13 of wild {
                   GrammarData.ObjFinal -> GrammarData.$fEnumObjectFinal4
                   GrammarData.ObjInitial -> GrammarData.ObjFinal }) -}
3990d98c3efc6fe781e2cd9838fc9785
  $fEnumObjectFinal_$csucc ::
    GrammarData.ObjectFinal -> GrammarData.ObjectFinal
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.ObjectFinal ->
                 case a13 of wild {
                   GrammarData.ObjFinal -> GrammarData.ObjInitial
                   GrammarData.ObjInitial -> GrammarData.$fEnumObjectFinal5 }) -}
3990d98c3efc6fe781e2cd9838fc9785
  $fEnumObjectFinal_$ctoEnum ::
    GHC.Types.Int -> GrammarData.ObjectFinal
  {- Arity: 1, Strictness: <S,1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: GHC.Types.Int ->
                 case w of ww { GHC.Types.I# ww1 ->
                 GrammarData.$w$ctoEnum8 ww1 }) -}
3990d98c3efc6fe781e2cd9838fc9785
  $fEnumObjectFinal_c ::
    GHC.Types.Int
    -> [GrammarData.ObjectFinal] -> [GrammarData.ObjectFinal]
  {- Arity: 2, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int ys :: [GrammarData.ObjectFinal] ->
                 GHC.Types.:
                   @ GrammarData.ObjectFinal
                   (GrammarData.$fEnumObjectFinal_$ctoEnum x)
                   ys) -}
3990d98c3efc6fe781e2cd9838fc9785
  $fEnumObjectFinal_c1 ::
    GHC.Types.Int
    -> [GrammarData.ObjectFinal] -> [GrammarData.ObjectFinal]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int ys :: [GrammarData.ObjectFinal] ->
                 GHC.Types.:
                   @ GrammarData.ObjectFinal
                   (case x of wild { GHC.Types.I# a13 ->
                    GHC.Prim.tagToEnum# @ GrammarData.ObjectFinal a13 })
                   ys) -}
3990d98c3efc6fe781e2cd9838fc9785
  $fEnumObjectFinal_go :: GHC.Prim.Int# -> [GrammarData.ObjectFinal]
  {- Arity: 1, Strictness: <L,U> -}
3990d98c3efc6fe781e2cd9838fc9785
  $fEnumObjectFinal_go1 :: GHC.Prim.Int# -> [GrammarData.ObjectFinal]
  {- Arity: 1, Strictness: <L,U> -}
3990d98c3efc6fe781e2cd9838fc9785
  $fEnumObjectFinal_go2 :: GHC.Prim.Int# -> [GrammarData.ObjectFinal]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
3990d98c3efc6fe781e2cd9838fc9785
  $fEnumObjectFinal_go3 :: GHC.Prim.Int# -> [GrammarData.ObjectFinal]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
2d6043879706e488d30d1b55f6de040c
  $fEnumObligatoryTopic :: GHC.Enum.Enum GrammarData.ObligatoryTopic
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.ObligatoryTopic
                  GrammarData.$fEnumObligatoryTopic_$csucc
                  GrammarData.$fEnumObligatoryTopic_$cpred
                  GrammarData.$fEnumObligatoryTopic_$ctoEnum
                  GrammarData.$fEnumObligatoryTopic_$cfromEnum
                  GrammarData.$fEnumObligatoryTopic_$cenumFrom
                  GrammarData.$fEnumObligatoryTopic_$cenumFromThen
                  GrammarData.$fEnumObligatoryTopic_$cenumFromTo
                  GrammarData.$fEnumObligatoryTopic_$cenumFromThenTo -}
2d6043879706e488d30d1b55f6de040c
  $fEnumObligatoryTopic1 ::
    GHC.Prim.Int# -> GrammarData.ObligatoryTopic
  {- Arity: 1, Strictness: <L,U>b -}
2d6043879706e488d30d1b55f6de040c
  $fEnumObligatoryTopic2 :: [GrammarData.ObligatoryTopic]
  {- Unfolding: (GrammarData.$fEnumObligatoryTopic_go2 1) -}
2d6043879706e488d30d1b55f6de040c
  $fEnumObligatoryTopic3 :: [GrammarData.ObligatoryTopic]
  {- Unfolding: (GrammarData.$fEnumObligatoryTopic_go3 0) -}
2d6043879706e488d30d1b55f6de040c
  $fEnumObligatoryTopic4 :: GrammarData.ObligatoryTopic
  {- Strictness: b -}
2d6043879706e488d30d1b55f6de040c
  $fEnumObligatoryTopic5 :: GrammarData.ObligatoryTopic
  {- Strictness: b -}
2d6043879706e488d30d1b55f6de040c
  $fEnumObligatoryTopic_$cenumFrom ::
    GrammarData.ObligatoryTopic -> [GrammarData.ObligatoryTopic]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ a13 :: GrammarData.ObligatoryTopic ->
                 case a13 of wild {
                   GrammarData.OblTopic -> GrammarData.$fEnumObligatoryTopic3
                   GrammarData.OptTopic -> GrammarData.$fEnumObligatoryTopic2 }) -}
2d6043879706e488d30d1b55f6de040c
  $fEnumObligatoryTopic_$cenumFromThen ::
    GrammarData.ObligatoryTopic
    -> GrammarData.ObligatoryTopic -> [GrammarData.ObligatoryTopic]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a13 :: GrammarData.ObligatoryTopic
                   b :: GrammarData.ObligatoryTopic ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.ObligatoryTopic]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ a# :: GHC.Prim.Int#[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int# -> [GrammarData.ObligatoryTopic]
                         {- Arity: 1, Strictness: <L,U> -}
                       = \ b# :: GHC.Prim.Int#[OneShot] ->
                         let {
                           $j2 :: GHC.Prim.Int# -> [GrammarData.ObligatoryTopic]
                             {- Arity: 1, Strictness: <L,U> -}
                           = \ y :: GHC.Prim.Int#[OneShot] ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# b# a#) of wild {
                               GHC.Types.False
                               -> GHC.Enum.efdtIntDnFB
                                    @ [GrammarData.ObligatoryTopic]
                                    GrammarData.$fEnumObligatoryTopic_c1
                                    (GHC.Types.[] @ GrammarData.ObligatoryTopic)
                                    a#
                                    b#
                                    y
                               GHC.Types.True
                               -> GHC.Enum.efdtIntUpFB
                                    @ [GrammarData.ObligatoryTopic]
                                    GrammarData.$fEnumObligatoryTopic_c1
                                    (GHC.Types.[] @ GrammarData.ObligatoryTopic)
                                    a#
                                    b#
                                    y }
                         } in
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.># a# b#) of wild {
                           GHC.Types.False -> $j2 1 GHC.Types.True -> $j2 0 }
                     } in
                     case b of wild {
                       GrammarData.OblTopic -> $j1 0 GrammarData.OptTopic -> $j1 1 }
                 } in
                 case a13 of wild {
                   GrammarData.OblTopic -> $j 0 GrammarData.OptTopic -> $j 1 }) -}
2d6043879706e488d30d1b55f6de040c
  $fEnumObligatoryTopic_$cenumFromThenTo ::
    GrammarData.ObligatoryTopic
    -> GrammarData.ObligatoryTopic
    -> GrammarData.ObligatoryTopic
    -> [GrammarData.ObligatoryTopic]
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U>,
     Unfolding: (\ x1 :: GrammarData.ObligatoryTopic
                   x2 :: GrammarData.ObligatoryTopic
                   y :: GrammarData.ObligatoryTopic ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.ObligatoryTopic]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ x4 :: GHC.Prim.Int#[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int# -> [GrammarData.ObligatoryTopic]
                         {- Arity: 1, Strictness: <L,U> -}
                       = \ x5 :: GHC.Prim.Int#[OneShot] ->
                         case y of wild {
                           GrammarData.OblTopic
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [GrammarData.ObligatoryTopic]
                                     GrammarData.$fEnumObligatoryTopic_c
                                     (GHC.Types.[] @ GrammarData.ObligatoryTopic)
                                     x4
                                     x5
                                     0
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [GrammarData.ObligatoryTopic]
                                     GrammarData.$fEnumObligatoryTopic_c
                                     (GHC.Types.[] @ GrammarData.ObligatoryTopic)
                                     x4
                                     x5
                                     0 }
                           GrammarData.OptTopic
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [GrammarData.ObligatoryTopic]
                                     GrammarData.$fEnumObligatoryTopic_c
                                     (GHC.Types.[] @ GrammarData.ObligatoryTopic)
                                     x4
                                     x5
                                     1
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [GrammarData.ObligatoryTopic]
                                     GrammarData.$fEnumObligatoryTopic_c
                                     (GHC.Types.[] @ GrammarData.ObligatoryTopic)
                                     x4
                                     x5
                                     1 } }
                     } in
                     case x2 of wild {
                       GrammarData.OblTopic -> $j1 0 GrammarData.OptTopic -> $j1 1 }
                 } in
                 case x1 of wild {
                   GrammarData.OblTopic -> $j 0 GrammarData.OptTopic -> $j 1 }) -}
2d6043879706e488d30d1b55f6de040c
  $fEnumObligatoryTopic_$cenumFromTo ::
    GrammarData.ObligatoryTopic
    -> GrammarData.ObligatoryTopic -> [GrammarData.ObligatoryTopic]
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ x :: GrammarData.ObligatoryTopic
                   y :: GrammarData.ObligatoryTopic ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.ObligatoryTopic]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ x1 :: GHC.Prim.Int#[OneShot] ->
                     case y of wild {
                       GrammarData.OblTopic
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 0) of wild1 {
                            GHC.Types.False -> GrammarData.$fEnumObligatoryTopic_go1 x1
                            GHC.Types.True -> GHC.Types.[] @ GrammarData.ObligatoryTopic }
                       GrammarData.OptTopic
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 1) of wild1 {
                            GHC.Types.False -> GrammarData.$fEnumObligatoryTopic_go x1
                            GHC.Types.True -> GHC.Types.[] @ GrammarData.ObligatoryTopic } }
                 } in
                 case x of wild {
                   GrammarData.OblTopic -> $j 0 GrammarData.OptTopic -> $j 1 }) -}
2d6043879706e488d30d1b55f6de040c
  $fEnumObligatoryTopic_$cfromEnum ::
    GrammarData.ObligatoryTopic -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.ObligatoryTopic ->
                 case a13 of wild {
                   GrammarData.OblTopic -> GHC.Types.I# 0
                   GrammarData.OptTopic -> GHC.Types.I# 1 }) -}
2d6043879706e488d30d1b55f6de040c
  $fEnumObligatoryTopic_$cpred ::
    GrammarData.ObligatoryTopic -> GrammarData.ObligatoryTopic
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.ObligatoryTopic ->
                 case a13 of wild {
                   GrammarData.OblTopic -> GrammarData.$fEnumObligatoryTopic4
                   GrammarData.OptTopic -> GrammarData.OblTopic }) -}
2d6043879706e488d30d1b55f6de040c
  $fEnumObligatoryTopic_$csucc ::
    GrammarData.ObligatoryTopic -> GrammarData.ObligatoryTopic
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.ObligatoryTopic ->
                 case a13 of wild {
                   GrammarData.OblTopic -> GrammarData.OptTopic
                   GrammarData.OptTopic -> GrammarData.$fEnumObligatoryTopic5 }) -}
2d6043879706e488d30d1b55f6de040c
  $fEnumObligatoryTopic_$ctoEnum ::
    GHC.Types.Int -> GrammarData.ObligatoryTopic
  {- Arity: 1, Strictness: <S,1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: GHC.Types.Int ->
                 case w of ww { GHC.Types.I# ww1 ->
                 GrammarData.$w$ctoEnum9 ww1 }) -}
2d6043879706e488d30d1b55f6de040c
  $fEnumObligatoryTopic_c ::
    GHC.Types.Int
    -> [GrammarData.ObligatoryTopic] -> [GrammarData.ObligatoryTopic]
  {- Arity: 2, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int ys :: [GrammarData.ObligatoryTopic] ->
                 GHC.Types.:
                   @ GrammarData.ObligatoryTopic
                   (GrammarData.$fEnumObligatoryTopic_$ctoEnum x)
                   ys) -}
2d6043879706e488d30d1b55f6de040c
  $fEnumObligatoryTopic_c1 ::
    GHC.Types.Int
    -> [GrammarData.ObligatoryTopic] -> [GrammarData.ObligatoryTopic]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int ys :: [GrammarData.ObligatoryTopic] ->
                 GHC.Types.:
                   @ GrammarData.ObligatoryTopic
                   (case x of wild { GHC.Types.I# a13 ->
                    GHC.Prim.tagToEnum# @ GrammarData.ObligatoryTopic a13 })
                   ys) -}
2d6043879706e488d30d1b55f6de040c
  $fEnumObligatoryTopic_go ::
    GHC.Prim.Int# -> [GrammarData.ObligatoryTopic]
  {- Arity: 1, Strictness: <L,U> -}
2d6043879706e488d30d1b55f6de040c
  $fEnumObligatoryTopic_go1 ::
    GHC.Prim.Int# -> [GrammarData.ObligatoryTopic]
  {- Arity: 1, Strictness: <L,U> -}
2d6043879706e488d30d1b55f6de040c
  $fEnumObligatoryTopic_go2 ::
    GHC.Prim.Int# -> [GrammarData.ObligatoryTopic]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
2d6043879706e488d30d1b55f6de040c
  $fEnumObligatoryTopic_go3 ::
    GHC.Prim.Int# -> [GrammarData.ObligatoryTopic]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
afa5566910055efae0db5c38d7168c87
  $fEnumPiedPiping :: GHC.Enum.Enum GrammarData.PiedPiping
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.PiedPiping
                  GrammarData.$fEnumPiedPiping_$csucc
                  GrammarData.$fEnumPiedPiping_$cpred
                  GrammarData.$fEnumPiedPiping_$ctoEnum
                  GrammarData.$fEnumPiedPiping_$cfromEnum
                  GrammarData.$fEnumPiedPiping_$cenumFrom
                  GrammarData.$fEnumPiedPiping_$cenumFromThen
                  GrammarData.$fEnumPiedPiping_$cenumFromTo
                  GrammarData.$fEnumPiedPiping_$cenumFromThenTo -}
afa5566910055efae0db5c38d7168c87
  $fEnumPiedPiping1 :: GHC.Prim.Int# -> GrammarData.PiedPiping
  {- Arity: 1, Strictness: <L,U>b -}
afa5566910055efae0db5c38d7168c87
  $fEnumPiedPiping2 :: [GrammarData.PiedPiping]
  {- Unfolding: (GrammarData.$fEnumPiedPiping_go2 1) -}
afa5566910055efae0db5c38d7168c87
  $fEnumPiedPiping3 :: [GrammarData.PiedPiping]
  {- Unfolding: (GrammarData.$fEnumPiedPiping_go3 0) -}
afa5566910055efae0db5c38d7168c87
  $fEnumPiedPiping4 :: GrammarData.PiedPiping
  {- Strictness: b -}
afa5566910055efae0db5c38d7168c87
  $fEnumPiedPiping5 :: GrammarData.PiedPiping
  {- Strictness: b -}
afa5566910055efae0db5c38d7168c87
  $fEnumPiedPiping_$cenumFrom ::
    GrammarData.PiedPiping -> [GrammarData.PiedPiping]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ a13 :: GrammarData.PiedPiping ->
                 case a13 of wild {
                   GrammarData.PiedPipe -> GrammarData.$fEnumPiedPiping3
                   GrammarData.PrepStrand -> GrammarData.$fEnumPiedPiping2 }) -}
afa5566910055efae0db5c38d7168c87
  $fEnumPiedPiping_$cenumFromThen ::
    GrammarData.PiedPiping
    -> GrammarData.PiedPiping -> [GrammarData.PiedPiping]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a13 :: GrammarData.PiedPiping
                   b :: GrammarData.PiedPiping ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.PiedPiping]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ a# :: GHC.Prim.Int#[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int# -> [GrammarData.PiedPiping]
                         {- Arity: 1, Strictness: <L,U> -}
                       = \ b# :: GHC.Prim.Int#[OneShot] ->
                         let {
                           $j2 :: GHC.Prim.Int# -> [GrammarData.PiedPiping]
                             {- Arity: 1, Strictness: <L,U> -}
                           = \ y :: GHC.Prim.Int#[OneShot] ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# b# a#) of wild {
                               GHC.Types.False
                               -> GHC.Enum.efdtIntDnFB
                                    @ [GrammarData.PiedPiping]
                                    GrammarData.$fEnumPiedPiping_c1
                                    (GHC.Types.[] @ GrammarData.PiedPiping)
                                    a#
                                    b#
                                    y
                               GHC.Types.True
                               -> GHC.Enum.efdtIntUpFB
                                    @ [GrammarData.PiedPiping]
                                    GrammarData.$fEnumPiedPiping_c1
                                    (GHC.Types.[] @ GrammarData.PiedPiping)
                                    a#
                                    b#
                                    y }
                         } in
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.># a# b#) of wild {
                           GHC.Types.False -> $j2 1 GHC.Types.True -> $j2 0 }
                     } in
                     case b of wild {
                       GrammarData.PiedPipe -> $j1 0 GrammarData.PrepStrand -> $j1 1 }
                 } in
                 case a13 of wild {
                   GrammarData.PiedPipe -> $j 0 GrammarData.PrepStrand -> $j 1 }) -}
afa5566910055efae0db5c38d7168c87
  $fEnumPiedPiping_$cenumFromThenTo ::
    GrammarData.PiedPiping
    -> GrammarData.PiedPiping
    -> GrammarData.PiedPiping
    -> [GrammarData.PiedPiping]
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U>,
     Unfolding: (\ x1 :: GrammarData.PiedPiping
                   x2 :: GrammarData.PiedPiping
                   y :: GrammarData.PiedPiping ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.PiedPiping]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ x4 :: GHC.Prim.Int#[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int# -> [GrammarData.PiedPiping]
                         {- Arity: 1, Strictness: <L,U> -}
                       = \ x5 :: GHC.Prim.Int#[OneShot] ->
                         case y of wild {
                           GrammarData.PiedPipe
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [GrammarData.PiedPiping]
                                     GrammarData.$fEnumPiedPiping_c
                                     (GHC.Types.[] @ GrammarData.PiedPiping)
                                     x4
                                     x5
                                     0
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [GrammarData.PiedPiping]
                                     GrammarData.$fEnumPiedPiping_c
                                     (GHC.Types.[] @ GrammarData.PiedPiping)
                                     x4
                                     x5
                                     0 }
                           GrammarData.PrepStrand
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [GrammarData.PiedPiping]
                                     GrammarData.$fEnumPiedPiping_c
                                     (GHC.Types.[] @ GrammarData.PiedPiping)
                                     x4
                                     x5
                                     1
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [GrammarData.PiedPiping]
                                     GrammarData.$fEnumPiedPiping_c
                                     (GHC.Types.[] @ GrammarData.PiedPiping)
                                     x4
                                     x5
                                     1 } }
                     } in
                     case x2 of wild {
                       GrammarData.PiedPipe -> $j1 0 GrammarData.PrepStrand -> $j1 1 }
                 } in
                 case x1 of wild {
                   GrammarData.PiedPipe -> $j 0 GrammarData.PrepStrand -> $j 1 }) -}
afa5566910055efae0db5c38d7168c87
  $fEnumPiedPiping_$cenumFromTo ::
    GrammarData.PiedPiping
    -> GrammarData.PiedPiping -> [GrammarData.PiedPiping]
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ x :: GrammarData.PiedPiping
                   y :: GrammarData.PiedPiping ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.PiedPiping]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ x1 :: GHC.Prim.Int#[OneShot] ->
                     case y of wild {
                       GrammarData.PiedPipe
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 0) of wild1 {
                            GHC.Types.False -> GrammarData.$fEnumPiedPiping_go1 x1
                            GHC.Types.True -> GHC.Types.[] @ GrammarData.PiedPiping }
                       GrammarData.PrepStrand
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 1) of wild1 {
                            GHC.Types.False -> GrammarData.$fEnumPiedPiping_go x1
                            GHC.Types.True -> GHC.Types.[] @ GrammarData.PiedPiping } }
                 } in
                 case x of wild {
                   GrammarData.PiedPipe -> $j 0 GrammarData.PrepStrand -> $j 1 }) -}
afa5566910055efae0db5c38d7168c87
  $fEnumPiedPiping_$cfromEnum ::
    GrammarData.PiedPiping -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.PiedPiping ->
                 case a13 of wild {
                   GrammarData.PiedPipe -> GHC.Types.I# 0
                   GrammarData.PrepStrand -> GHC.Types.I# 1 }) -}
afa5566910055efae0db5c38d7168c87
  $fEnumPiedPiping_$cpred ::
    GrammarData.PiedPiping -> GrammarData.PiedPiping
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.PiedPiping ->
                 case a13 of wild {
                   GrammarData.PiedPipe -> GrammarData.$fEnumPiedPiping4
                   GrammarData.PrepStrand -> GrammarData.PiedPipe }) -}
afa5566910055efae0db5c38d7168c87
  $fEnumPiedPiping_$csucc ::
    GrammarData.PiedPiping -> GrammarData.PiedPiping
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.PiedPiping ->
                 case a13 of wild {
                   GrammarData.PiedPipe -> GrammarData.PrepStrand
                   GrammarData.PrepStrand -> GrammarData.$fEnumPiedPiping5 }) -}
afa5566910055efae0db5c38d7168c87
  $fEnumPiedPiping_$ctoEnum ::
    GHC.Types.Int -> GrammarData.PiedPiping
  {- Arity: 1, Strictness: <S,1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: GHC.Types.Int ->
                 case w of ww { GHC.Types.I# ww1 ->
                 GrammarData.$w$ctoEnum10 ww1 }) -}
afa5566910055efae0db5c38d7168c87
  $fEnumPiedPiping_c ::
    GHC.Types.Int
    -> [GrammarData.PiedPiping] -> [GrammarData.PiedPiping]
  {- Arity: 2, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int ys :: [GrammarData.PiedPiping] ->
                 GHC.Types.:
                   @ GrammarData.PiedPiping
                   (GrammarData.$fEnumPiedPiping_$ctoEnum x)
                   ys) -}
afa5566910055efae0db5c38d7168c87
  $fEnumPiedPiping_c1 ::
    GHC.Types.Int
    -> [GrammarData.PiedPiping] -> [GrammarData.PiedPiping]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int ys :: [GrammarData.PiedPiping] ->
                 GHC.Types.:
                   @ GrammarData.PiedPiping
                   (case x of wild { GHC.Types.I# a13 ->
                    GHC.Prim.tagToEnum# @ GrammarData.PiedPiping a13 })
                   ys) -}
afa5566910055efae0db5c38d7168c87
  $fEnumPiedPiping_go :: GHC.Prim.Int# -> [GrammarData.PiedPiping]
  {- Arity: 1, Strictness: <L,U> -}
afa5566910055efae0db5c38d7168c87
  $fEnumPiedPiping_go1 :: GHC.Prim.Int# -> [GrammarData.PiedPiping]
  {- Arity: 1, Strictness: <L,U> -}
afa5566910055efae0db5c38d7168c87
  $fEnumPiedPiping_go2 :: GHC.Prim.Int# -> [GrammarData.PiedPiping]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
afa5566910055efae0db5c38d7168c87
  $fEnumPiedPiping_go3 :: GHC.Prim.Int# -> [GrammarData.PiedPiping]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
51189b9950c56b3e0908d62c4348d762
  $fEnumQuestionInversion ::
    GHC.Enum.Enum GrammarData.QuestionInversion
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.QuestionInversion
                  GrammarData.$fEnumQuestionInversion_$csucc
                  GrammarData.$fEnumQuestionInversion_$cpred
                  GrammarData.$fEnumQuestionInversion_$ctoEnum
                  GrammarData.$fEnumQuestionInversion_$cfromEnum
                  GrammarData.$fEnumQuestionInversion_$cenumFrom
                  GrammarData.$fEnumQuestionInversion_$cenumFromThen
                  GrammarData.$fEnumQuestionInversion_$cenumFromTo
                  GrammarData.$fEnumQuestionInversion_$cenumFromThenTo -}
51189b9950c56b3e0908d62c4348d762
  $fEnumQuestionInversion1 ::
    GHC.Prim.Int# -> GrammarData.QuestionInversion
  {- Arity: 1, Strictness: <L,U>b -}
51189b9950c56b3e0908d62c4348d762
  $fEnumQuestionInversion2 :: [GrammarData.QuestionInversion]
  {- Unfolding: (GrammarData.$fEnumQuestionInversion_go2 1) -}
51189b9950c56b3e0908d62c4348d762
  $fEnumQuestionInversion3 :: [GrammarData.QuestionInversion]
  {- Unfolding: (GrammarData.$fEnumQuestionInversion_go3 0) -}
51189b9950c56b3e0908d62c4348d762
  $fEnumQuestionInversion4 :: GrammarData.QuestionInversion
  {- Strictness: b -}
51189b9950c56b3e0908d62c4348d762
  $fEnumQuestionInversion5 :: GrammarData.QuestionInversion
  {- Strictness: b -}
51189b9950c56b3e0908d62c4348d762
  $fEnumQuestionInversion_$cenumFrom ::
    GrammarData.QuestionInversion -> [GrammarData.QuestionInversion]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ a13 :: GrammarData.QuestionInversion ->
                 case a13 of wild {
                   GrammarData.NoQuesInv -> GrammarData.$fEnumQuestionInversion3
                   GrammarData.OblQuesInv
                   -> GrammarData.$fEnumQuestionInversion2 }) -}
51189b9950c56b3e0908d62c4348d762
  $fEnumQuestionInversion_$cenumFromThen ::
    GrammarData.QuestionInversion
    -> GrammarData.QuestionInversion -> [GrammarData.QuestionInversion]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a13 :: GrammarData.QuestionInversion
                   b :: GrammarData.QuestionInversion ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.QuestionInversion]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ a# :: GHC.Prim.Int#[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int# -> [GrammarData.QuestionInversion]
                         {- Arity: 1, Strictness: <L,U> -}
                       = \ b# :: GHC.Prim.Int#[OneShot] ->
                         let {
                           $j2 :: GHC.Prim.Int# -> [GrammarData.QuestionInversion]
                             {- Arity: 1, Strictness: <L,U> -}
                           = \ y :: GHC.Prim.Int#[OneShot] ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# b# a#) of wild {
                               GHC.Types.False
                               -> GHC.Enum.efdtIntDnFB
                                    @ [GrammarData.QuestionInversion]
                                    GrammarData.$fEnumQuestionInversion_c1
                                    (GHC.Types.[] @ GrammarData.QuestionInversion)
                                    a#
                                    b#
                                    y
                               GHC.Types.True
                               -> GHC.Enum.efdtIntUpFB
                                    @ [GrammarData.QuestionInversion]
                                    GrammarData.$fEnumQuestionInversion_c1
                                    (GHC.Types.[] @ GrammarData.QuestionInversion)
                                    a#
                                    b#
                                    y }
                         } in
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.># a# b#) of wild {
                           GHC.Types.False -> $j2 1 GHC.Types.True -> $j2 0 }
                     } in
                     case b of wild {
                       GrammarData.NoQuesInv -> $j1 0 GrammarData.OblQuesInv -> $j1 1 }
                 } in
                 case a13 of wild {
                   GrammarData.NoQuesInv -> $j 0 GrammarData.OblQuesInv -> $j 1 }) -}
51189b9950c56b3e0908d62c4348d762
  $fEnumQuestionInversion_$cenumFromThenTo ::
    GrammarData.QuestionInversion
    -> GrammarData.QuestionInversion
    -> GrammarData.QuestionInversion
    -> [GrammarData.QuestionInversion]
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U>,
     Unfolding: (\ x1 :: GrammarData.QuestionInversion
                   x2 :: GrammarData.QuestionInversion
                   y :: GrammarData.QuestionInversion ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.QuestionInversion]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ x4 :: GHC.Prim.Int#[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int# -> [GrammarData.QuestionInversion]
                         {- Arity: 1, Strictness: <L,U> -}
                       = \ x5 :: GHC.Prim.Int#[OneShot] ->
                         case y of wild {
                           GrammarData.NoQuesInv
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [GrammarData.QuestionInversion]
                                     GrammarData.$fEnumQuestionInversion_c
                                     (GHC.Types.[] @ GrammarData.QuestionInversion)
                                     x4
                                     x5
                                     0
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [GrammarData.QuestionInversion]
                                     GrammarData.$fEnumQuestionInversion_c
                                     (GHC.Types.[] @ GrammarData.QuestionInversion)
                                     x4
                                     x5
                                     0 }
                           GrammarData.OblQuesInv
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [GrammarData.QuestionInversion]
                                     GrammarData.$fEnumQuestionInversion_c
                                     (GHC.Types.[] @ GrammarData.QuestionInversion)
                                     x4
                                     x5
                                     1
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [GrammarData.QuestionInversion]
                                     GrammarData.$fEnumQuestionInversion_c
                                     (GHC.Types.[] @ GrammarData.QuestionInversion)
                                     x4
                                     x5
                                     1 } }
                     } in
                     case x2 of wild {
                       GrammarData.NoQuesInv -> $j1 0 GrammarData.OblQuesInv -> $j1 1 }
                 } in
                 case x1 of wild {
                   GrammarData.NoQuesInv -> $j 0 GrammarData.OblQuesInv -> $j 1 }) -}
51189b9950c56b3e0908d62c4348d762
  $fEnumQuestionInversion_$cenumFromTo ::
    GrammarData.QuestionInversion
    -> GrammarData.QuestionInversion -> [GrammarData.QuestionInversion]
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ x :: GrammarData.QuestionInversion
                   y :: GrammarData.QuestionInversion ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.QuestionInversion]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ x1 :: GHC.Prim.Int#[OneShot] ->
                     case y of wild {
                       GrammarData.NoQuesInv
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 0) of wild1 {
                            GHC.Types.False -> GrammarData.$fEnumQuestionInversion_go1 x1
                            GHC.Types.True -> GHC.Types.[] @ GrammarData.QuestionInversion }
                       GrammarData.OblQuesInv
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 1) of wild1 {
                            GHC.Types.False -> GrammarData.$fEnumQuestionInversion_go x1
                            GHC.Types.True -> GHC.Types.[] @ GrammarData.QuestionInversion } }
                 } in
                 case x of wild {
                   GrammarData.NoQuesInv -> $j 0 GrammarData.OblQuesInv -> $j 1 }) -}
51189b9950c56b3e0908d62c4348d762
  $fEnumQuestionInversion_$cfromEnum ::
    GrammarData.QuestionInversion -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.QuestionInversion ->
                 case a13 of wild {
                   GrammarData.NoQuesInv -> GHC.Types.I# 0
                   GrammarData.OblQuesInv -> GHC.Types.I# 1 }) -}
51189b9950c56b3e0908d62c4348d762
  $fEnumQuestionInversion_$cpred ::
    GrammarData.QuestionInversion -> GrammarData.QuestionInversion
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.QuestionInversion ->
                 case a13 of wild {
                   GrammarData.NoQuesInv -> GrammarData.$fEnumQuestionInversion4
                   GrammarData.OblQuesInv -> GrammarData.NoQuesInv }) -}
51189b9950c56b3e0908d62c4348d762
  $fEnumQuestionInversion_$csucc ::
    GrammarData.QuestionInversion -> GrammarData.QuestionInversion
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.QuestionInversion ->
                 case a13 of wild {
                   GrammarData.NoQuesInv -> GrammarData.OblQuesInv
                   GrammarData.OblQuesInv
                   -> GrammarData.$fEnumQuestionInversion5 }) -}
51189b9950c56b3e0908d62c4348d762
  $fEnumQuestionInversion_$ctoEnum ::
    GHC.Types.Int -> GrammarData.QuestionInversion
  {- Arity: 1, Strictness: <S,1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: GHC.Types.Int ->
                 case w of ww { GHC.Types.I# ww1 ->
                 GrammarData.$w$ctoEnum11 ww1 }) -}
51189b9950c56b3e0908d62c4348d762
  $fEnumQuestionInversion_c ::
    GHC.Types.Int
    -> [GrammarData.QuestionInversion]
    -> [GrammarData.QuestionInversion]
  {- Arity: 2, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int ys :: [GrammarData.QuestionInversion] ->
                 GHC.Types.:
                   @ GrammarData.QuestionInversion
                   (GrammarData.$fEnumQuestionInversion_$ctoEnum x)
                   ys) -}
51189b9950c56b3e0908d62c4348d762
  $fEnumQuestionInversion_c1 ::
    GHC.Types.Int
    -> [GrammarData.QuestionInversion]
    -> [GrammarData.QuestionInversion]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int ys :: [GrammarData.QuestionInversion] ->
                 GHC.Types.:
                   @ GrammarData.QuestionInversion
                   (case x of wild { GHC.Types.I# a13 ->
                    GHC.Prim.tagToEnum# @ GrammarData.QuestionInversion a13 })
                   ys) -}
51189b9950c56b3e0908d62c4348d762
  $fEnumQuestionInversion_go ::
    GHC.Prim.Int# -> [GrammarData.QuestionInversion]
  {- Arity: 1, Strictness: <L,U> -}
51189b9950c56b3e0908d62c4348d762
  $fEnumQuestionInversion_go1 ::
    GHC.Prim.Int# -> [GrammarData.QuestionInversion]
  {- Arity: 1, Strictness: <L,U> -}
51189b9950c56b3e0908d62c4348d762
  $fEnumQuestionInversion_go2 ::
    GHC.Prim.Int# -> [GrammarData.QuestionInversion]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
51189b9950c56b3e0908d62c4348d762
  $fEnumQuestionInversion_go3 ::
    GHC.Prim.Int# -> [GrammarData.QuestionInversion]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
169a6ff198e8a1d23640120a6af7d71f
  $fEnumSubjectInitial :: GHC.Enum.Enum GrammarData.SubjectInitial
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.SubjectInitial
                  GrammarData.$fEnumSubjectInitial_$csucc
                  GrammarData.$fEnumSubjectInitial_$cpred
                  GrammarData.$fEnumSubjectInitial_$ctoEnum
                  GrammarData.$fEnumSubjectInitial_$cfromEnum
                  GrammarData.$fEnumSubjectInitial_$cenumFrom
                  GrammarData.$fEnumSubjectInitial_$cenumFromThen
                  GrammarData.$fEnumSubjectInitial_$cenumFromTo
                  GrammarData.$fEnumSubjectInitial_$cenumFromThenTo -}
169a6ff198e8a1d23640120a6af7d71f
  $fEnumSubjectInitial1 ::
    GHC.Prim.Int# -> GrammarData.SubjectInitial
  {- Arity: 1, Strictness: <L,U>b -}
169a6ff198e8a1d23640120a6af7d71f
  $fEnumSubjectInitial2 :: [GrammarData.SubjectInitial]
  {- Unfolding: (GrammarData.$fEnumSubjectInitial_go2 1) -}
169a6ff198e8a1d23640120a6af7d71f
  $fEnumSubjectInitial3 :: [GrammarData.SubjectInitial]
  {- Unfolding: (GrammarData.$fEnumSubjectInitial_go3 0) -}
169a6ff198e8a1d23640120a6af7d71f
  $fEnumSubjectInitial4 :: GrammarData.SubjectInitial
  {- Strictness: b -}
169a6ff198e8a1d23640120a6af7d71f
  $fEnumSubjectInitial5 :: GrammarData.SubjectInitial
  {- Strictness: b -}
169a6ff198e8a1d23640120a6af7d71f
  $fEnumSubjectInitial_$cenumFrom ::
    GrammarData.SubjectInitial -> [GrammarData.SubjectInitial]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ a13 :: GrammarData.SubjectInitial ->
                 case a13 of wild {
                   GrammarData.SubInitial -> GrammarData.$fEnumSubjectInitial3
                   GrammarData.SubFinal -> GrammarData.$fEnumSubjectInitial2 }) -}
169a6ff198e8a1d23640120a6af7d71f
  $fEnumSubjectInitial_$cenumFromThen ::
    GrammarData.SubjectInitial
    -> GrammarData.SubjectInitial -> [GrammarData.SubjectInitial]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a13 :: GrammarData.SubjectInitial
                   b :: GrammarData.SubjectInitial ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.SubjectInitial]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ a# :: GHC.Prim.Int#[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int# -> [GrammarData.SubjectInitial]
                         {- Arity: 1, Strictness: <L,U> -}
                       = \ b# :: GHC.Prim.Int#[OneShot] ->
                         let {
                           $j2 :: GHC.Prim.Int# -> [GrammarData.SubjectInitial]
                             {- Arity: 1, Strictness: <L,U> -}
                           = \ y :: GHC.Prim.Int#[OneShot] ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# b# a#) of wild {
                               GHC.Types.False
                               -> GHC.Enum.efdtIntDnFB
                                    @ [GrammarData.SubjectInitial]
                                    GrammarData.$fEnumSubjectInitial_c1
                                    (GHC.Types.[] @ GrammarData.SubjectInitial)
                                    a#
                                    b#
                                    y
                               GHC.Types.True
                               -> GHC.Enum.efdtIntUpFB
                                    @ [GrammarData.SubjectInitial]
                                    GrammarData.$fEnumSubjectInitial_c1
                                    (GHC.Types.[] @ GrammarData.SubjectInitial)
                                    a#
                                    b#
                                    y }
                         } in
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.># a# b#) of wild {
                           GHC.Types.False -> $j2 1 GHC.Types.True -> $j2 0 }
                     } in
                     case b of wild {
                       GrammarData.SubInitial -> $j1 0 GrammarData.SubFinal -> $j1 1 }
                 } in
                 case a13 of wild {
                   GrammarData.SubInitial -> $j 0 GrammarData.SubFinal -> $j 1 }) -}
169a6ff198e8a1d23640120a6af7d71f
  $fEnumSubjectInitial_$cenumFromThenTo ::
    GrammarData.SubjectInitial
    -> GrammarData.SubjectInitial
    -> GrammarData.SubjectInitial
    -> [GrammarData.SubjectInitial]
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U>,
     Unfolding: (\ x1 :: GrammarData.SubjectInitial
                   x2 :: GrammarData.SubjectInitial
                   y :: GrammarData.SubjectInitial ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.SubjectInitial]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ x4 :: GHC.Prim.Int#[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int# -> [GrammarData.SubjectInitial]
                         {- Arity: 1, Strictness: <L,U> -}
                       = \ x5 :: GHC.Prim.Int#[OneShot] ->
                         case y of wild {
                           GrammarData.SubInitial
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [GrammarData.SubjectInitial]
                                     GrammarData.$fEnumSubjectInitial_c
                                     (GHC.Types.[] @ GrammarData.SubjectInitial)
                                     x4
                                     x5
                                     0
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [GrammarData.SubjectInitial]
                                     GrammarData.$fEnumSubjectInitial_c
                                     (GHC.Types.[] @ GrammarData.SubjectInitial)
                                     x4
                                     x5
                                     0 }
                           GrammarData.SubFinal
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [GrammarData.SubjectInitial]
                                     GrammarData.$fEnumSubjectInitial_c
                                     (GHC.Types.[] @ GrammarData.SubjectInitial)
                                     x4
                                     x5
                                     1
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [GrammarData.SubjectInitial]
                                     GrammarData.$fEnumSubjectInitial_c
                                     (GHC.Types.[] @ GrammarData.SubjectInitial)
                                     x4
                                     x5
                                     1 } }
                     } in
                     case x2 of wild {
                       GrammarData.SubInitial -> $j1 0 GrammarData.SubFinal -> $j1 1 }
                 } in
                 case x1 of wild {
                   GrammarData.SubInitial -> $j 0 GrammarData.SubFinal -> $j 1 }) -}
169a6ff198e8a1d23640120a6af7d71f
  $fEnumSubjectInitial_$cenumFromTo ::
    GrammarData.SubjectInitial
    -> GrammarData.SubjectInitial -> [GrammarData.SubjectInitial]
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ x :: GrammarData.SubjectInitial
                   y :: GrammarData.SubjectInitial ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.SubjectInitial]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ x1 :: GHC.Prim.Int#[OneShot] ->
                     case y of wild {
                       GrammarData.SubInitial
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 0) of wild1 {
                            GHC.Types.False -> GrammarData.$fEnumSubjectInitial_go1 x1
                            GHC.Types.True -> GHC.Types.[] @ GrammarData.SubjectInitial }
                       GrammarData.SubFinal
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 1) of wild1 {
                            GHC.Types.False -> GrammarData.$fEnumSubjectInitial_go x1
                            GHC.Types.True -> GHC.Types.[] @ GrammarData.SubjectInitial } }
                 } in
                 case x of wild {
                   GrammarData.SubInitial -> $j 0 GrammarData.SubFinal -> $j 1 }) -}
169a6ff198e8a1d23640120a6af7d71f
  $fEnumSubjectInitial_$cfromEnum ::
    GrammarData.SubjectInitial -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.SubjectInitial ->
                 case a13 of wild {
                   GrammarData.SubInitial -> GHC.Types.I# 0
                   GrammarData.SubFinal -> GHC.Types.I# 1 }) -}
169a6ff198e8a1d23640120a6af7d71f
  $fEnumSubjectInitial_$cpred ::
    GrammarData.SubjectInitial -> GrammarData.SubjectInitial
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.SubjectInitial ->
                 case a13 of wild {
                   GrammarData.SubInitial -> GrammarData.$fEnumSubjectInitial4
                   GrammarData.SubFinal -> GrammarData.SubInitial }) -}
169a6ff198e8a1d23640120a6af7d71f
  $fEnumSubjectInitial_$csucc ::
    GrammarData.SubjectInitial -> GrammarData.SubjectInitial
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.SubjectInitial ->
                 case a13 of wild {
                   GrammarData.SubInitial -> GrammarData.SubFinal
                   GrammarData.SubFinal -> GrammarData.$fEnumSubjectInitial5 }) -}
169a6ff198e8a1d23640120a6af7d71f
  $fEnumSubjectInitial_$ctoEnum ::
    GHC.Types.Int -> GrammarData.SubjectInitial
  {- Arity: 1, Strictness: <S,1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: GHC.Types.Int ->
                 case w of ww { GHC.Types.I# ww1 ->
                 GrammarData.$w$ctoEnum12 ww1 }) -}
169a6ff198e8a1d23640120a6af7d71f
  $fEnumSubjectInitial_c ::
    GHC.Types.Int
    -> [GrammarData.SubjectInitial] -> [GrammarData.SubjectInitial]
  {- Arity: 2, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int ys :: [GrammarData.SubjectInitial] ->
                 GHC.Types.:
                   @ GrammarData.SubjectInitial
                   (GrammarData.$fEnumSubjectInitial_$ctoEnum x)
                   ys) -}
169a6ff198e8a1d23640120a6af7d71f
  $fEnumSubjectInitial_c1 ::
    GHC.Types.Int
    -> [GrammarData.SubjectInitial] -> [GrammarData.SubjectInitial]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int ys :: [GrammarData.SubjectInitial] ->
                 GHC.Types.:
                   @ GrammarData.SubjectInitial
                   (case x of wild { GHC.Types.I# a13 ->
                    GHC.Prim.tagToEnum# @ GrammarData.SubjectInitial a13 })
                   ys) -}
169a6ff198e8a1d23640120a6af7d71f
  $fEnumSubjectInitial_go ::
    GHC.Prim.Int# -> [GrammarData.SubjectInitial]
  {- Arity: 1, Strictness: <L,U> -}
169a6ff198e8a1d23640120a6af7d71f
  $fEnumSubjectInitial_go1 ::
    GHC.Prim.Int# -> [GrammarData.SubjectInitial]
  {- Arity: 1, Strictness: <L,U> -}
169a6ff198e8a1d23640120a6af7d71f
  $fEnumSubjectInitial_go2 ::
    GHC.Prim.Int# -> [GrammarData.SubjectInitial]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
169a6ff198e8a1d23640120a6af7d71f
  $fEnumSubjectInitial_go3 ::
    GHC.Prim.Int# -> [GrammarData.SubjectInitial]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
b20cd44ec2d9abc53df9580ade6dee08
  $fEnumTopicMarking :: GHC.Enum.Enum GrammarData.TopicMarking
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.TopicMarking
                  GrammarData.$fEnumTopicMarking_$csucc
                  GrammarData.$fEnumTopicMarking_$cpred
                  GrammarData.$fEnumTopicMarking_$ctoEnum
                  GrammarData.$fEnumTopicMarking_$cfromEnum
                  GrammarData.$fEnumTopicMarking_$cenumFrom
                  GrammarData.$fEnumTopicMarking_$cenumFromThen
                  GrammarData.$fEnumTopicMarking_$cenumFromTo
                  GrammarData.$fEnumTopicMarking_$cenumFromThenTo -}
b20cd44ec2d9abc53df9580ade6dee08
  $fEnumTopicMarking1 :: GHC.Prim.Int# -> GrammarData.TopicMarking
  {- Arity: 1, Strictness: <L,U>b -}
b20cd44ec2d9abc53df9580ade6dee08
  $fEnumTopicMarking2 :: [GrammarData.TopicMarking]
  {- Unfolding: (GrammarData.$fEnumTopicMarking_go2 1) -}
b20cd44ec2d9abc53df9580ade6dee08
  $fEnumTopicMarking3 :: [GrammarData.TopicMarking]
  {- Unfolding: (GrammarData.$fEnumTopicMarking_go3 0) -}
b20cd44ec2d9abc53df9580ade6dee08
  $fEnumTopicMarking4 :: GrammarData.TopicMarking
  {- Strictness: b -}
b20cd44ec2d9abc53df9580ade6dee08
  $fEnumTopicMarking5 :: GrammarData.TopicMarking
  {- Strictness: b -}
b20cd44ec2d9abc53df9580ade6dee08
  $fEnumTopicMarking_$cenumFrom ::
    GrammarData.TopicMarking -> [GrammarData.TopicMarking]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ a13 :: GrammarData.TopicMarking ->
                 case a13 of wild {
                   GrammarData.NoTopMark -> GrammarData.$fEnumTopicMarking3
                   GrammarData.OblTopMark -> GrammarData.$fEnumTopicMarking2 }) -}
b20cd44ec2d9abc53df9580ade6dee08
  $fEnumTopicMarking_$cenumFromThen ::
    GrammarData.TopicMarking
    -> GrammarData.TopicMarking -> [GrammarData.TopicMarking]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a13 :: GrammarData.TopicMarking
                   b :: GrammarData.TopicMarking ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.TopicMarking]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ a# :: GHC.Prim.Int#[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int# -> [GrammarData.TopicMarking]
                         {- Arity: 1, Strictness: <L,U> -}
                       = \ b# :: GHC.Prim.Int#[OneShot] ->
                         let {
                           $j2 :: GHC.Prim.Int# -> [GrammarData.TopicMarking]
                             {- Arity: 1, Strictness: <L,U> -}
                           = \ y :: GHC.Prim.Int#[OneShot] ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# b# a#) of wild {
                               GHC.Types.False
                               -> GHC.Enum.efdtIntDnFB
                                    @ [GrammarData.TopicMarking]
                                    GrammarData.$fEnumTopicMarking_c1
                                    (GHC.Types.[] @ GrammarData.TopicMarking)
                                    a#
                                    b#
                                    y
                               GHC.Types.True
                               -> GHC.Enum.efdtIntUpFB
                                    @ [GrammarData.TopicMarking]
                                    GrammarData.$fEnumTopicMarking_c1
                                    (GHC.Types.[] @ GrammarData.TopicMarking)
                                    a#
                                    b#
                                    y }
                         } in
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.># a# b#) of wild {
                           GHC.Types.False -> $j2 1 GHC.Types.True -> $j2 0 }
                     } in
                     case b of wild {
                       GrammarData.NoTopMark -> $j1 0 GrammarData.OblTopMark -> $j1 1 }
                 } in
                 case a13 of wild {
                   GrammarData.NoTopMark -> $j 0 GrammarData.OblTopMark -> $j 1 }) -}
b20cd44ec2d9abc53df9580ade6dee08
  $fEnumTopicMarking_$cenumFromThenTo ::
    GrammarData.TopicMarking
    -> GrammarData.TopicMarking
    -> GrammarData.TopicMarking
    -> [GrammarData.TopicMarking]
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U>,
     Unfolding: (\ x1 :: GrammarData.TopicMarking
                   x2 :: GrammarData.TopicMarking
                   y :: GrammarData.TopicMarking ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.TopicMarking]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ x4 :: GHC.Prim.Int#[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int# -> [GrammarData.TopicMarking]
                         {- Arity: 1, Strictness: <L,U> -}
                       = \ x5 :: GHC.Prim.Int#[OneShot] ->
                         case y of wild {
                           GrammarData.NoTopMark
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [GrammarData.TopicMarking]
                                     GrammarData.$fEnumTopicMarking_c
                                     (GHC.Types.[] @ GrammarData.TopicMarking)
                                     x4
                                     x5
                                     0
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [GrammarData.TopicMarking]
                                     GrammarData.$fEnumTopicMarking_c
                                     (GHC.Types.[] @ GrammarData.TopicMarking)
                                     x4
                                     x5
                                     0 }
                           GrammarData.OblTopMark
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [GrammarData.TopicMarking]
                                     GrammarData.$fEnumTopicMarking_c
                                     (GHC.Types.[] @ GrammarData.TopicMarking)
                                     x4
                                     x5
                                     1
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [GrammarData.TopicMarking]
                                     GrammarData.$fEnumTopicMarking_c
                                     (GHC.Types.[] @ GrammarData.TopicMarking)
                                     x4
                                     x5
                                     1 } }
                     } in
                     case x2 of wild {
                       GrammarData.NoTopMark -> $j1 0 GrammarData.OblTopMark -> $j1 1 }
                 } in
                 case x1 of wild {
                   GrammarData.NoTopMark -> $j 0 GrammarData.OblTopMark -> $j 1 }) -}
b20cd44ec2d9abc53df9580ade6dee08
  $fEnumTopicMarking_$cenumFromTo ::
    GrammarData.TopicMarking
    -> GrammarData.TopicMarking -> [GrammarData.TopicMarking]
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ x :: GrammarData.TopicMarking
                   y :: GrammarData.TopicMarking ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.TopicMarking]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ x1 :: GHC.Prim.Int#[OneShot] ->
                     case y of wild {
                       GrammarData.NoTopMark
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 0) of wild1 {
                            GHC.Types.False -> GrammarData.$fEnumTopicMarking_go1 x1
                            GHC.Types.True -> GHC.Types.[] @ GrammarData.TopicMarking }
                       GrammarData.OblTopMark
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 1) of wild1 {
                            GHC.Types.False -> GrammarData.$fEnumTopicMarking_go x1
                            GHC.Types.True -> GHC.Types.[] @ GrammarData.TopicMarking } }
                 } in
                 case x of wild {
                   GrammarData.NoTopMark -> $j 0 GrammarData.OblTopMark -> $j 1 }) -}
b20cd44ec2d9abc53df9580ade6dee08
  $fEnumTopicMarking_$cfromEnum ::
    GrammarData.TopicMarking -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.TopicMarking ->
                 case a13 of wild {
                   GrammarData.NoTopMark -> GHC.Types.I# 0
                   GrammarData.OblTopMark -> GHC.Types.I# 1 }) -}
b20cd44ec2d9abc53df9580ade6dee08
  $fEnumTopicMarking_$cpred ::
    GrammarData.TopicMarking -> GrammarData.TopicMarking
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.TopicMarking ->
                 case a13 of wild {
                   GrammarData.NoTopMark -> GrammarData.$fEnumTopicMarking4
                   GrammarData.OblTopMark -> GrammarData.NoTopMark }) -}
b20cd44ec2d9abc53df9580ade6dee08
  $fEnumTopicMarking_$csucc ::
    GrammarData.TopicMarking -> GrammarData.TopicMarking
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.TopicMarking ->
                 case a13 of wild {
                   GrammarData.NoTopMark -> GrammarData.OblTopMark
                   GrammarData.OblTopMark -> GrammarData.$fEnumTopicMarking5 }) -}
b20cd44ec2d9abc53df9580ade6dee08
  $fEnumTopicMarking_$ctoEnum ::
    GHC.Types.Int -> GrammarData.TopicMarking
  {- Arity: 1, Strictness: <S,1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: GHC.Types.Int ->
                 case w of ww { GHC.Types.I# ww1 ->
                 GrammarData.$w$ctoEnum13 ww1 }) -}
b20cd44ec2d9abc53df9580ade6dee08
  $fEnumTopicMarking_c ::
    GHC.Types.Int
    -> [GrammarData.TopicMarking] -> [GrammarData.TopicMarking]
  {- Arity: 2, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int ys :: [GrammarData.TopicMarking] ->
                 GHC.Types.:
                   @ GrammarData.TopicMarking
                   (GrammarData.$fEnumTopicMarking_$ctoEnum x)
                   ys) -}
b20cd44ec2d9abc53df9580ade6dee08
  $fEnumTopicMarking_c1 ::
    GHC.Types.Int
    -> [GrammarData.TopicMarking] -> [GrammarData.TopicMarking]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int ys :: [GrammarData.TopicMarking] ->
                 GHC.Types.:
                   @ GrammarData.TopicMarking
                   (case x of wild { GHC.Types.I# a13 ->
                    GHC.Prim.tagToEnum# @ GrammarData.TopicMarking a13 })
                   ys) -}
b20cd44ec2d9abc53df9580ade6dee08
  $fEnumTopicMarking_go ::
    GHC.Prim.Int# -> [GrammarData.TopicMarking]
  {- Arity: 1, Strictness: <L,U> -}
b20cd44ec2d9abc53df9580ade6dee08
  $fEnumTopicMarking_go1 ::
    GHC.Prim.Int# -> [GrammarData.TopicMarking]
  {- Arity: 1, Strictness: <L,U> -}
b20cd44ec2d9abc53df9580ade6dee08
  $fEnumTopicMarking_go2 ::
    GHC.Prim.Int# -> [GrammarData.TopicMarking]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
b20cd44ec2d9abc53df9580ade6dee08
  $fEnumTopicMarking_go3 ::
    GHC.Prim.Int# -> [GrammarData.TopicMarking]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
ee0bc87f2bf330c19fbe37b3de89b731
  $fEnumVtoIMovement :: GHC.Enum.Enum GrammarData.VtoIMovement
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.VtoIMovement
                  GrammarData.$fEnumVtoIMovement_$csucc
                  GrammarData.$fEnumVtoIMovement_$cpred
                  GrammarData.$fEnumVtoIMovement_$ctoEnum
                  GrammarData.$fEnumVtoIMovement_$cfromEnum
                  GrammarData.$fEnumVtoIMovement_$cenumFrom
                  GrammarData.$fEnumVtoIMovement_$cenumFromThen
                  GrammarData.$fEnumVtoIMovement_$cenumFromTo
                  GrammarData.$fEnumVtoIMovement_$cenumFromThenTo -}
ee0bc87f2bf330c19fbe37b3de89b731
  $fEnumVtoIMovement1 :: GHC.Prim.Int# -> GrammarData.VtoIMovement
  {- Arity: 1, Strictness: <L,U>b -}
ee0bc87f2bf330c19fbe37b3de89b731
  $fEnumVtoIMovement2 :: [GrammarData.VtoIMovement]
  {- Unfolding: (GrammarData.$fEnumVtoIMovement_go2 1) -}
ee0bc87f2bf330c19fbe37b3de89b731
  $fEnumVtoIMovement3 :: [GrammarData.VtoIMovement]
  {- Unfolding: (GrammarData.$fEnumVtoIMovement_go3 0) -}
ee0bc87f2bf330c19fbe37b3de89b731
  $fEnumVtoIMovement4 :: GrammarData.VtoIMovement
  {- Strictness: b -}
ee0bc87f2bf330c19fbe37b3de89b731
  $fEnumVtoIMovement5 :: GrammarData.VtoIMovement
  {- Strictness: b -}
ee0bc87f2bf330c19fbe37b3de89b731
  $fEnumVtoIMovement_$cenumFrom ::
    GrammarData.VtoIMovement -> [GrammarData.VtoIMovement]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ a13 :: GrammarData.VtoIMovement ->
                 case a13 of wild {
                   GrammarData.NoVtoIMove -> GrammarData.$fEnumVtoIMovement3
                   GrammarData.OblVtoIMove -> GrammarData.$fEnumVtoIMovement2 }) -}
ee0bc87f2bf330c19fbe37b3de89b731
  $fEnumVtoIMovement_$cenumFromThen ::
    GrammarData.VtoIMovement
    -> GrammarData.VtoIMovement -> [GrammarData.VtoIMovement]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a13 :: GrammarData.VtoIMovement
                   b :: GrammarData.VtoIMovement ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.VtoIMovement]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ a# :: GHC.Prim.Int#[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int# -> [GrammarData.VtoIMovement]
                         {- Arity: 1, Strictness: <L,U> -}
                       = \ b# :: GHC.Prim.Int#[OneShot] ->
                         let {
                           $j2 :: GHC.Prim.Int# -> [GrammarData.VtoIMovement]
                             {- Arity: 1, Strictness: <L,U> -}
                           = \ y :: GHC.Prim.Int#[OneShot] ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# b# a#) of wild {
                               GHC.Types.False
                               -> GHC.Enum.efdtIntDnFB
                                    @ [GrammarData.VtoIMovement]
                                    GrammarData.$fEnumVtoIMovement_c1
                                    (GHC.Types.[] @ GrammarData.VtoIMovement)
                                    a#
                                    b#
                                    y
                               GHC.Types.True
                               -> GHC.Enum.efdtIntUpFB
                                    @ [GrammarData.VtoIMovement]
                                    GrammarData.$fEnumVtoIMovement_c1
                                    (GHC.Types.[] @ GrammarData.VtoIMovement)
                                    a#
                                    b#
                                    y }
                         } in
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.># a# b#) of wild {
                           GHC.Types.False -> $j2 1 GHC.Types.True -> $j2 0 }
                     } in
                     case b of wild {
                       GrammarData.NoVtoIMove -> $j1 0 GrammarData.OblVtoIMove -> $j1 1 }
                 } in
                 case a13 of wild {
                   GrammarData.NoVtoIMove -> $j 0
                   GrammarData.OblVtoIMove -> $j 1 }) -}
ee0bc87f2bf330c19fbe37b3de89b731
  $fEnumVtoIMovement_$cenumFromThenTo ::
    GrammarData.VtoIMovement
    -> GrammarData.VtoIMovement
    -> GrammarData.VtoIMovement
    -> [GrammarData.VtoIMovement]
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U>,
     Unfolding: (\ x1 :: GrammarData.VtoIMovement
                   x2 :: GrammarData.VtoIMovement
                   y :: GrammarData.VtoIMovement ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.VtoIMovement]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ x4 :: GHC.Prim.Int#[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int# -> [GrammarData.VtoIMovement]
                         {- Arity: 1, Strictness: <L,U> -}
                       = \ x5 :: GHC.Prim.Int#[OneShot] ->
                         case y of wild {
                           GrammarData.NoVtoIMove
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [GrammarData.VtoIMovement]
                                     GrammarData.$fEnumVtoIMovement_c
                                     (GHC.Types.[] @ GrammarData.VtoIMovement)
                                     x4
                                     x5
                                     0
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [GrammarData.VtoIMovement]
                                     GrammarData.$fEnumVtoIMovement_c
                                     (GHC.Types.[] @ GrammarData.VtoIMovement)
                                     x4
                                     x5
                                     0 }
                           GrammarData.OblVtoIMove
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [GrammarData.VtoIMovement]
                                     GrammarData.$fEnumVtoIMovement_c
                                     (GHC.Types.[] @ GrammarData.VtoIMovement)
                                     x4
                                     x5
                                     1
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [GrammarData.VtoIMovement]
                                     GrammarData.$fEnumVtoIMovement_c
                                     (GHC.Types.[] @ GrammarData.VtoIMovement)
                                     x4
                                     x5
                                     1 } }
                     } in
                     case x2 of wild {
                       GrammarData.NoVtoIMove -> $j1 0 GrammarData.OblVtoIMove -> $j1 1 }
                 } in
                 case x1 of wild {
                   GrammarData.NoVtoIMove -> $j 0
                   GrammarData.OblVtoIMove -> $j 1 }) -}
ee0bc87f2bf330c19fbe37b3de89b731
  $fEnumVtoIMovement_$cenumFromTo ::
    GrammarData.VtoIMovement
    -> GrammarData.VtoIMovement -> [GrammarData.VtoIMovement]
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ x :: GrammarData.VtoIMovement
                   y :: GrammarData.VtoIMovement ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.VtoIMovement]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ x1 :: GHC.Prim.Int#[OneShot] ->
                     case y of wild {
                       GrammarData.NoVtoIMove
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 0) of wild1 {
                            GHC.Types.False -> GrammarData.$fEnumVtoIMovement_go1 x1
                            GHC.Types.True -> GHC.Types.[] @ GrammarData.VtoIMovement }
                       GrammarData.OblVtoIMove
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 1) of wild1 {
                            GHC.Types.False -> GrammarData.$fEnumVtoIMovement_go x1
                            GHC.Types.True -> GHC.Types.[] @ GrammarData.VtoIMovement } }
                 } in
                 case x of wild {
                   GrammarData.NoVtoIMove -> $j 0
                   GrammarData.OblVtoIMove -> $j 1 }) -}
ee0bc87f2bf330c19fbe37b3de89b731
  $fEnumVtoIMovement_$cfromEnum ::
    GrammarData.VtoIMovement -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.VtoIMovement ->
                 case a13 of wild {
                   GrammarData.NoVtoIMove -> GHC.Types.I# 0
                   GrammarData.OblVtoIMove -> GHC.Types.I# 1 }) -}
ee0bc87f2bf330c19fbe37b3de89b731
  $fEnumVtoIMovement_$cpred ::
    GrammarData.VtoIMovement -> GrammarData.VtoIMovement
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.VtoIMovement ->
                 case a13 of wild {
                   GrammarData.NoVtoIMove -> GrammarData.$fEnumVtoIMovement4
                   GrammarData.OblVtoIMove -> GrammarData.NoVtoIMove }) -}
ee0bc87f2bf330c19fbe37b3de89b731
  $fEnumVtoIMovement_$csucc ::
    GrammarData.VtoIMovement -> GrammarData.VtoIMovement
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.VtoIMovement ->
                 case a13 of wild {
                   GrammarData.NoVtoIMove -> GrammarData.OblVtoIMove
                   GrammarData.OblVtoIMove -> GrammarData.$fEnumVtoIMovement5 }) -}
ee0bc87f2bf330c19fbe37b3de89b731
  $fEnumVtoIMovement_$ctoEnum ::
    GHC.Types.Int -> GrammarData.VtoIMovement
  {- Arity: 1, Strictness: <S,1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: GHC.Types.Int ->
                 case w of ww { GHC.Types.I# ww1 ->
                 GrammarData.$w$ctoEnum14 ww1 }) -}
ee0bc87f2bf330c19fbe37b3de89b731
  $fEnumVtoIMovement_c ::
    GHC.Types.Int
    -> [GrammarData.VtoIMovement] -> [GrammarData.VtoIMovement]
  {- Arity: 2, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int ys :: [GrammarData.VtoIMovement] ->
                 GHC.Types.:
                   @ GrammarData.VtoIMovement
                   (GrammarData.$fEnumVtoIMovement_$ctoEnum x)
                   ys) -}
ee0bc87f2bf330c19fbe37b3de89b731
  $fEnumVtoIMovement_c1 ::
    GHC.Types.Int
    -> [GrammarData.VtoIMovement] -> [GrammarData.VtoIMovement]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int ys :: [GrammarData.VtoIMovement] ->
                 GHC.Types.:
                   @ GrammarData.VtoIMovement
                   (case x of wild { GHC.Types.I# a13 ->
                    GHC.Prim.tagToEnum# @ GrammarData.VtoIMovement a13 })
                   ys) -}
ee0bc87f2bf330c19fbe37b3de89b731
  $fEnumVtoIMovement_go ::
    GHC.Prim.Int# -> [GrammarData.VtoIMovement]
  {- Arity: 1, Strictness: <L,U> -}
ee0bc87f2bf330c19fbe37b3de89b731
  $fEnumVtoIMovement_go1 ::
    GHC.Prim.Int# -> [GrammarData.VtoIMovement]
  {- Arity: 1, Strictness: <L,U> -}
ee0bc87f2bf330c19fbe37b3de89b731
  $fEnumVtoIMovement_go2 ::
    GHC.Prim.Int# -> [GrammarData.VtoIMovement]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
ee0bc87f2bf330c19fbe37b3de89b731
  $fEnumVtoIMovement_go3 ::
    GHC.Prim.Int# -> [GrammarData.VtoIMovement]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
85e0e6313386cebdafa66f96c67aa72a
  $fEnumWHMovementObligatory ::
    GHC.Enum.Enum GrammarData.WHMovementObligatory
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.WHMovementObligatory
                  GrammarData.$fEnumWHMovementObligatory_$csucc
                  GrammarData.$fEnumWHMovementObligatory_$cpred
                  GrammarData.$fEnumWHMovementObligatory_$ctoEnum
                  GrammarData.$fEnumWHMovementObligatory_$cfromEnum
                  GrammarData.$fEnumWHMovementObligatory_$cenumFrom
                  GrammarData.$fEnumWHMovementObligatory_$cenumFromThen
                  GrammarData.$fEnumWHMovementObligatory_$cenumFromTo
                  GrammarData.$fEnumWHMovementObligatory_$cenumFromThenTo -}
85e0e6313386cebdafa66f96c67aa72a
  $fEnumWHMovementObligatory1 ::
    GHC.Prim.Int# -> GrammarData.WHMovementObligatory
  {- Arity: 1, Strictness: <L,U>b -}
85e0e6313386cebdafa66f96c67aa72a
  $fEnumWHMovementObligatory2 :: [GrammarData.WHMovementObligatory]
  {- Unfolding: (GrammarData.$fEnumWHMovementObligatory_go2 1) -}
85e0e6313386cebdafa66f96c67aa72a
  $fEnumWHMovementObligatory3 :: [GrammarData.WHMovementObligatory]
  {- Unfolding: (GrammarData.$fEnumWHMovementObligatory_go3 0) -}
85e0e6313386cebdafa66f96c67aa72a
  $fEnumWHMovementObligatory4 :: GrammarData.WHMovementObligatory
  {- Strictness: b -}
85e0e6313386cebdafa66f96c67aa72a
  $fEnumWHMovementObligatory5 :: GrammarData.WHMovementObligatory
  {- Strictness: b -}
85e0e6313386cebdafa66f96c67aa72a
  $fEnumWHMovementObligatory_$cenumFrom ::
    GrammarData.WHMovementObligatory
    -> [GrammarData.WHMovementObligatory]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ a13 :: GrammarData.WHMovementObligatory ->
                 case a13 of wild {
                   GrammarData.NoWHMove -> GrammarData.$fEnumWHMovementObligatory3
                   GrammarData.OblWHMove
                   -> GrammarData.$fEnumWHMovementObligatory2 }) -}
85e0e6313386cebdafa66f96c67aa72a
  $fEnumWHMovementObligatory_$cenumFromThen ::
    GrammarData.WHMovementObligatory
    -> GrammarData.WHMovementObligatory
    -> [GrammarData.WHMovementObligatory]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a13 :: GrammarData.WHMovementObligatory
                   b :: GrammarData.WHMovementObligatory ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.WHMovementObligatory]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ a# :: GHC.Prim.Int#[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int# -> [GrammarData.WHMovementObligatory]
                         {- Arity: 1, Strictness: <L,U> -}
                       = \ b# :: GHC.Prim.Int#[OneShot] ->
                         let {
                           $j2 :: GHC.Prim.Int# -> [GrammarData.WHMovementObligatory]
                             {- Arity: 1, Strictness: <L,U> -}
                           = \ y :: GHC.Prim.Int#[OneShot] ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# b# a#) of wild {
                               GHC.Types.False
                               -> GHC.Enum.efdtIntDnFB
                                    @ [GrammarData.WHMovementObligatory]
                                    GrammarData.$fEnumWHMovementObligatory_c1
                                    (GHC.Types.[] @ GrammarData.WHMovementObligatory)
                                    a#
                                    b#
                                    y
                               GHC.Types.True
                               -> GHC.Enum.efdtIntUpFB
                                    @ [GrammarData.WHMovementObligatory]
                                    GrammarData.$fEnumWHMovementObligatory_c1
                                    (GHC.Types.[] @ GrammarData.WHMovementObligatory)
                                    a#
                                    b#
                                    y }
                         } in
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.># a# b#) of wild {
                           GHC.Types.False -> $j2 1 GHC.Types.True -> $j2 0 }
                     } in
                     case b of wild {
                       GrammarData.NoWHMove -> $j1 0 GrammarData.OblWHMove -> $j1 1 }
                 } in
                 case a13 of wild {
                   GrammarData.NoWHMove -> $j 0 GrammarData.OblWHMove -> $j 1 }) -}
85e0e6313386cebdafa66f96c67aa72a
  $fEnumWHMovementObligatory_$cenumFromThenTo ::
    GrammarData.WHMovementObligatory
    -> GrammarData.WHMovementObligatory
    -> GrammarData.WHMovementObligatory
    -> [GrammarData.WHMovementObligatory]
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U>,
     Unfolding: (\ x1 :: GrammarData.WHMovementObligatory
                   x2 :: GrammarData.WHMovementObligatory
                   y :: GrammarData.WHMovementObligatory ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.WHMovementObligatory]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ x4 :: GHC.Prim.Int#[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int# -> [GrammarData.WHMovementObligatory]
                         {- Arity: 1, Strictness: <L,U> -}
                       = \ x5 :: GHC.Prim.Int#[OneShot] ->
                         case y of wild {
                           GrammarData.NoWHMove
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [GrammarData.WHMovementObligatory]
                                     GrammarData.$fEnumWHMovementObligatory_c
                                     (GHC.Types.[] @ GrammarData.WHMovementObligatory)
                                     x4
                                     x5
                                     0
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [GrammarData.WHMovementObligatory]
                                     GrammarData.$fEnumWHMovementObligatory_c
                                     (GHC.Types.[] @ GrammarData.WHMovementObligatory)
                                     x4
                                     x5
                                     0 }
                           GrammarData.OblWHMove
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [GrammarData.WHMovementObligatory]
                                     GrammarData.$fEnumWHMovementObligatory_c
                                     (GHC.Types.[] @ GrammarData.WHMovementObligatory)
                                     x4
                                     x5
                                     1
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [GrammarData.WHMovementObligatory]
                                     GrammarData.$fEnumWHMovementObligatory_c
                                     (GHC.Types.[] @ GrammarData.WHMovementObligatory)
                                     x4
                                     x5
                                     1 } }
                     } in
                     case x2 of wild {
                       GrammarData.NoWHMove -> $j1 0 GrammarData.OblWHMove -> $j1 1 }
                 } in
                 case x1 of wild {
                   GrammarData.NoWHMove -> $j 0 GrammarData.OblWHMove -> $j 1 }) -}
85e0e6313386cebdafa66f96c67aa72a
  $fEnumWHMovementObligatory_$cenumFromTo ::
    GrammarData.WHMovementObligatory
    -> GrammarData.WHMovementObligatory
    -> [GrammarData.WHMovementObligatory]
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ x :: GrammarData.WHMovementObligatory
                   y :: GrammarData.WHMovementObligatory ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.WHMovementObligatory]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ x1 :: GHC.Prim.Int#[OneShot] ->
                     case y of wild {
                       GrammarData.NoWHMove
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 0) of wild1 {
                            GHC.Types.False -> GrammarData.$fEnumWHMovementObligatory_go1 x1
                            GHC.Types.True -> GHC.Types.[] @ GrammarData.WHMovementObligatory }
                       GrammarData.OblWHMove
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 1) of wild1 {
                            GHC.Types.False -> GrammarData.$fEnumWHMovementObligatory_go x1
                            GHC.Types.True
                            -> GHC.Types.[] @ GrammarData.WHMovementObligatory } }
                 } in
                 case x of wild {
                   GrammarData.NoWHMove -> $j 0 GrammarData.OblWHMove -> $j 1 }) -}
85e0e6313386cebdafa66f96c67aa72a
  $fEnumWHMovementObligatory_$cfromEnum ::
    GrammarData.WHMovementObligatory -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.WHMovementObligatory ->
                 case a13 of wild {
                   GrammarData.NoWHMove -> GHC.Types.I# 0
                   GrammarData.OblWHMove -> GHC.Types.I# 1 }) -}
85e0e6313386cebdafa66f96c67aa72a
  $fEnumWHMovementObligatory_$cpred ::
    GrammarData.WHMovementObligatory
    -> GrammarData.WHMovementObligatory
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.WHMovementObligatory ->
                 case a13 of wild {
                   GrammarData.NoWHMove -> GrammarData.$fEnumWHMovementObligatory4
                   GrammarData.OblWHMove -> GrammarData.NoWHMove }) -}
85e0e6313386cebdafa66f96c67aa72a
  $fEnumWHMovementObligatory_$csucc ::
    GrammarData.WHMovementObligatory
    -> GrammarData.WHMovementObligatory
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.WHMovementObligatory ->
                 case a13 of wild {
                   GrammarData.NoWHMove -> GrammarData.OblWHMove
                   GrammarData.OblWHMove
                   -> GrammarData.$fEnumWHMovementObligatory5 }) -}
85e0e6313386cebdafa66f96c67aa72a
  $fEnumWHMovementObligatory_$ctoEnum ::
    GHC.Types.Int -> GrammarData.WHMovementObligatory
  {- Arity: 1, Strictness: <S,1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: GHC.Types.Int ->
                 case w of ww { GHC.Types.I# ww1 ->
                 GrammarData.$w$ctoEnum15 ww1 }) -}
85e0e6313386cebdafa66f96c67aa72a
  $fEnumWHMovementObligatory_c ::
    GHC.Types.Int
    -> [GrammarData.WHMovementObligatory]
    -> [GrammarData.WHMovementObligatory]
  {- Arity: 2, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int ys :: [GrammarData.WHMovementObligatory] ->
                 GHC.Types.:
                   @ GrammarData.WHMovementObligatory
                   (GrammarData.$fEnumWHMovementObligatory_$ctoEnum x)
                   ys) -}
85e0e6313386cebdafa66f96c67aa72a
  $fEnumWHMovementObligatory_c1 ::
    GHC.Types.Int
    -> [GrammarData.WHMovementObligatory]
    -> [GrammarData.WHMovementObligatory]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int ys :: [GrammarData.WHMovementObligatory] ->
                 GHC.Types.:
                   @ GrammarData.WHMovementObligatory
                   (case x of wild { GHC.Types.I# a13 ->
                    GHC.Prim.tagToEnum# @ GrammarData.WHMovementObligatory a13 })
                   ys) -}
85e0e6313386cebdafa66f96c67aa72a
  $fEnumWHMovementObligatory_go ::
    GHC.Prim.Int# -> [GrammarData.WHMovementObligatory]
  {- Arity: 1, Strictness: <L,U> -}
85e0e6313386cebdafa66f96c67aa72a
  $fEnumWHMovementObligatory_go1 ::
    GHC.Prim.Int# -> [GrammarData.WHMovementObligatory]
  {- Arity: 1, Strictness: <L,U> -}
85e0e6313386cebdafa66f96c67aa72a
  $fEnumWHMovementObligatory_go2 ::
    GHC.Prim.Int# -> [GrammarData.WHMovementObligatory]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
85e0e6313386cebdafa66f96c67aa72a
  $fEnumWHMovementObligatory_go3 ::
    GHC.Prim.Int# -> [GrammarData.WHMovementObligatory]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
64df7cc6c7fa11aa276601186742ba94
  $fEqAffixHopping :: GHC.Classes.Eq GrammarData.AffixHopping
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.AffixHopping
                  GrammarData.$fEqAffixHopping_$c==
                  GrammarData.$fEqAffixHopping_$c/= -}
64df7cc6c7fa11aa276601186742ba94
  $fEqAffixHopping_$c/= ::
    GrammarData.AffixHopping
    -> GrammarData.AffixHopping -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a13 :: GrammarData.AffixHopping b :: GrammarData.AffixHopping ->
                 case a13 of wild {
                   GrammarData.NoAffixHop
                   -> case b of wild1 {
                        GrammarData.NoAffixHop -> GHC.Types.False
                        GrammarData.OblAffixHop -> GHC.Types.True }
                   GrammarData.OblAffixHop
                   -> case b of wild1 {
                        GrammarData.NoAffixHop -> GHC.Types.True
                        GrammarData.OblAffixHop -> GHC.Types.False } }) -}
64df7cc6c7fa11aa276601186742ba94
  $fEqAffixHopping_$c== ::
    GrammarData.AffixHopping
    -> GrammarData.AffixHopping -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarData.AffixHopping
                   ds1 :: GrammarData.AffixHopping ->
                 case ds of wild {
                   GrammarData.NoAffixHop
                   -> case ds1 of wild1 {
                        GrammarData.NoAffixHop -> GHC.Types.True
                        GrammarData.OblAffixHop -> GHC.Types.False }
                   GrammarData.OblAffixHop
                   -> case ds1 of wild1 {
                        GrammarData.NoAffixHop -> GHC.Types.False
                        GrammarData.OblAffixHop -> GHC.Types.True } }) -}
2b353fa9d69c4b806de27403b3b905b6
  $fEqBar :: GHC.Classes.Eq GrammarData.Bar
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.Bar
                  GrammarData.$fEqBar_$c==
                  GrammarData.$fEqBar_$c/= -}
2b353fa9d69c4b806de27403b3b905b6
  $fEqBar_$c/= ::
    GrammarData.Bar -> GrammarData.Bar -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a13 :: GrammarData.Bar b :: GrammarData.Bar ->
                 case GrammarData.$fEqBar_$c== a13 b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
2b353fa9d69c4b806de27403b3b905b6
  $fEqBar_$c== ::
    GrammarData.Bar -> GrammarData.Bar -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
bd101cefc51669d2e9cbe89bdbe27552
  $fEqComplementizerInitial ::
    GHC.Classes.Eq GrammarData.ComplementizerInitial
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.ComplementizerInitial
                  GrammarData.$fEqComplementizerInitial_$c==
                  GrammarData.$fEqComplementizerInitial_$c/= -}
bd101cefc51669d2e9cbe89bdbe27552
  $fEqComplementizerInitial_$c/= ::
    GrammarData.ComplementizerInitial
    -> GrammarData.ComplementizerInitial -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a13 :: GrammarData.ComplementizerInitial
                   b :: GrammarData.ComplementizerInitial ->
                 case a13 of wild {
                   GrammarData.CompInitial
                   -> case b of wild1 {
                        GrammarData.CompInitial -> GHC.Types.False
                        GrammarData.CompFinal -> GHC.Types.True }
                   GrammarData.CompFinal
                   -> case b of wild1 {
                        GrammarData.CompInitial -> GHC.Types.True
                        GrammarData.CompFinal -> GHC.Types.False } }) -}
bd101cefc51669d2e9cbe89bdbe27552
  $fEqComplementizerInitial_$c== ::
    GrammarData.ComplementizerInitial
    -> GrammarData.ComplementizerInitial -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarData.ComplementizerInitial
                   ds1 :: GrammarData.ComplementizerInitial ->
                 case ds of wild {
                   GrammarData.CompInitial
                   -> case ds1 of wild1 {
                        GrammarData.CompInitial -> GHC.Types.True
                        GrammarData.CompFinal -> GHC.Types.False }
                   GrammarData.CompFinal
                   -> case ds1 of wild1 {
                        GrammarData.CompInitial -> GHC.Types.False
                        GrammarData.CompFinal -> GHC.Types.True } }) -}
0b723dd66110bae4a164ef4cfb3bebd4
  $fEqIlloc :: GHC.Classes.Eq GrammarData.Illoc
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.Illoc
                  GrammarData.$fEqIlloc_$c==
                  GrammarData.$fEqIlloc_$c/= -}
0b723dd66110bae4a164ef4cfb3bebd4
  $fEqIlloc_$c/= ::
    GrammarData.Illoc -> GrammarData.Illoc -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a13 :: GrammarData.Illoc b :: GrammarData.Illoc ->
                 case a13 of wild {
                   GrammarData.Null
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarData.Null -> GHC.Types.False }
                   GrammarData.Ques
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarData.Ques -> GHC.Types.False }
                   GrammarData.Decl
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarData.Decl -> GHC.Types.False }
                   GrammarData.Imper
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        GrammarData.Imper -> GHC.Types.False } }) -}
0b723dd66110bae4a164ef4cfb3bebd4
  $fEqIlloc_$c== ::
    GrammarData.Illoc -> GrammarData.Illoc -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: GrammarData.Illoc ds1 :: GrammarData.Illoc ->
                 case ds of wild {
                   GrammarData.Null
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarData.Null -> GHC.Types.True }
                   GrammarData.Ques
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarData.Ques -> GHC.Types.True }
                   GrammarData.Decl
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarData.Decl -> GHC.Types.True }
                   GrammarData.Imper
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarData.Imper -> GHC.Types.True } }) -}
f50dc15d9604ea3311686cfae7fe1d21
  $fEqItoCMovement :: GHC.Classes.Eq GrammarData.ItoCMovement
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.ItoCMovement
                  GrammarData.$fEqItoCMovement_$c==
                  GrammarData.$fEqItoCMovement_$c/= -}
f50dc15d9604ea3311686cfae7fe1d21
  $fEqItoCMovement_$c/= ::
    GrammarData.ItoCMovement
    -> GrammarData.ItoCMovement -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a13 :: GrammarData.ItoCMovement b :: GrammarData.ItoCMovement ->
                 case a13 of wild {
                   GrammarData.NoItoCMove
                   -> case b of wild1 {
                        GrammarData.NoItoCMove -> GHC.Types.False
                        GrammarData.OblItoCMove -> GHC.Types.True }
                   GrammarData.OblItoCMove
                   -> case b of wild1 {
                        GrammarData.NoItoCMove -> GHC.Types.True
                        GrammarData.OblItoCMove -> GHC.Types.False } }) -}
f50dc15d9604ea3311686cfae7fe1d21
  $fEqItoCMovement_$c== ::
    GrammarData.ItoCMovement
    -> GrammarData.ItoCMovement -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarData.ItoCMovement
                   ds1 :: GrammarData.ItoCMovement ->
                 case ds of wild {
                   GrammarData.NoItoCMove
                   -> case ds1 of wild1 {
                        GrammarData.NoItoCMove -> GHC.Types.True
                        GrammarData.OblItoCMove -> GHC.Types.False }
                   GrammarData.OblItoCMove
                   -> case ds1 of wild1 {
                        GrammarData.NoItoCMove -> GHC.Types.False
                        GrammarData.OblItoCMove -> GHC.Types.True } }) -}
2ef30aa6b29e534627151abc07bccbb5
  $fEqLeaf :: GHC.Classes.Eq GrammarData.Leaf
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.Leaf
                  GrammarData.$fEqLeaf_$c==
                  GrammarData.$fEqLeaf_$c/= -}
19cdce3f97e68ed82a91b2a7c4c3ff7b
  $fEqLeafType :: GHC.Classes.Eq GrammarData.LeafType
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.LeafType
                  GrammarData.$fEqLeafType_$c==
                  GrammarData.$fEqLeafType_$c/= -}
19cdce3f97e68ed82a91b2a7c4c3ff7b
  $fEqLeafType_$c/= ::
    GrammarData.LeafType -> GrammarData.LeafType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a13 :: GrammarData.LeafType b :: GrammarData.LeafType ->
                 case a13 of wild {
                   GrammarData.LeafWord
                   -> case b of wild1 {
                        GrammarData.LeafWord -> GHC.Types.False
                        GrammarData.LeafAffix -> GHC.Types.True }
                   GrammarData.LeafAffix
                   -> case b of wild1 {
                        GrammarData.LeafWord -> GHC.Types.True
                        GrammarData.LeafAffix -> GHC.Types.False } }) -}
19cdce3f97e68ed82a91b2a7c4c3ff7b
  $fEqLeafType_$c== ::
    GrammarData.LeafType -> GrammarData.LeafType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarData.LeafType ds1 :: GrammarData.LeafType ->
                 case ds of wild {
                   GrammarData.LeafWord
                   -> case ds1 of wild1 {
                        GrammarData.LeafWord -> GHC.Types.True
                        GrammarData.LeafAffix -> GHC.Types.False }
                   GrammarData.LeafAffix
                   -> case ds1 of wild1 {
                        GrammarData.LeafWord -> GHC.Types.False
                        GrammarData.LeafAffix -> GHC.Types.True } }) -}
2ef30aa6b29e534627151abc07bccbb5
  $fEqLeaf_$c/= ::
    GrammarData.Leaf -> GrammarData.Leaf -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a13 :: GrammarData.Leaf b :: GrammarData.Leaf ->
                 case GrammarData.$fEqLeaf_$c== a13 b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
2ef30aa6b29e534627151abc07bccbb5
  $fEqLeaf_$c== ::
    GrammarData.Leaf -> GrammarData.Leaf -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: GrammarData.Leaf ds1 :: GrammarData.Leaf ->
                 case ds of wild {
                   GrammarData.LeafNull a13
                   -> case ds1 of wild1 {
                        GrammarData.LeafNull b1 -> GrammarData.$fEqIlloc_$c== a13 b1
                        GrammarData.Leaf ipv ipv1 ipv2 ipv3 -> GHC.Types.False }
                   GrammarData.Leaf a13 a14 a15 a16
                   -> case ds1 of wild1 {
                        GrammarData.LeafNull ipv -> GHC.Types.False
                        GrammarData.Leaf b1 b2 b3 b4
                        -> let {
                             $j :: GHC.Prim.Void# -> GHC.Types.Bool
                               {- Arity: 1, Strictness: <L,A> -}
                             = \ w :: GHC.Prim.Void#[OneShot] ->
                               let {
                                 $j1 :: GHC.Prim.Void# -> GHC.Types.Bool
                                   {- Arity: 1, Strictness: <L,A> -}
                                 = \ w1 :: GHC.Prim.Void#[OneShot] ->
                                   case a15 of wild2 {
                                     GrammarData.LeafWord
                                     -> case b3 of wild3 {
                                          GrammarData.LeafWord -> GHC.Base.eqString a16 b4
                                          GrammarData.LeafAffix -> GHC.Types.False }
                                     GrammarData.LeafAffix
                                     -> case b3 of wild3 {
                                          GrammarData.LeafWord -> GHC.Types.False
                                          GrammarData.LeafAffix -> GHC.Base.eqString a16 b4 } }
                               } in
                               case a14 of wild2 {
                                 GrammarData.Null
                                 -> case b2 of wild3 {
                                      DEFAULT -> GHC.Types.False
                                      GrammarData.Null -> $j1 GHC.Prim.void# }
                                 GrammarData.Ques
                                 -> case b2 of wild3 {
                                      DEFAULT -> GHC.Types.False
                                      GrammarData.Ques -> $j1 GHC.Prim.void# }
                                 GrammarData.Decl
                                 -> case b2 of wild3 {
                                      DEFAULT -> GHC.Types.False
                                      GrammarData.Decl -> $j1 GHC.Prim.void# }
                                 GrammarData.Imper
                                 -> case b2 of wild3 {
                                      DEFAULT -> GHC.Types.False
                                      GrammarData.Imper -> $j1 GHC.Prim.void# } }
                           } in
                           case a13 of wild2 {
                             GrammarData.Comp
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.False GrammarData.Comp -> $j GHC.Prim.void# }
                             GrammarData.Infl
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.False GrammarData.Infl -> $j GHC.Prim.void# }
                             GrammarData.Verb
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.False GrammarData.Verb -> $j GHC.Prim.void# }
                             GrammarData.Det
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.False GrammarData.Det -> $j GHC.Prim.void# }
                             GrammarData.Noun
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.False GrammarData.Noun -> $j GHC.Prim.void# }
                             GrammarData.Adpo
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.False GrammarData.Adpo -> $j GHC.Prim.void# }
                             GrammarData.Adj
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.False GrammarData.Adj -> $j GHC.Prim.void# }
                             GrammarData.Adv
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.False
                                  GrammarData.Adv -> $j GHC.Prim.void# } } } }) -}
18ee0e7b552f6ff0d4e216ac9d914b33
  $fEqLexCat :: GHC.Classes.Eq GrammarData.LexCat
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.LexCat
                  GrammarData.$fEqLexCat_$c==
                  GrammarData.$fEqLexCat_$c/= -}
18ee0e7b552f6ff0d4e216ac9d914b33
  $fEqLexCat_$c/= ::
    GrammarData.LexCat -> GrammarData.LexCat -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a13 :: GrammarData.LexCat b :: GrammarData.LexCat ->
                 case a13 of wild {
                   GrammarData.Comp
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarData.Comp -> GHC.Types.False }
                   GrammarData.Infl
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarData.Infl -> GHC.Types.False }
                   GrammarData.Verb
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarData.Verb -> GHC.Types.False }
                   GrammarData.Det
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarData.Det -> GHC.Types.False }
                   GrammarData.Noun
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarData.Noun -> GHC.Types.False }
                   GrammarData.Adpo
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarData.Adpo -> GHC.Types.False }
                   GrammarData.Adj
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarData.Adj -> GHC.Types.False }
                   GrammarData.Adv
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        GrammarData.Adv -> GHC.Types.False } }) -}
18ee0e7b552f6ff0d4e216ac9d914b33
  $fEqLexCat_$c== ::
    GrammarData.LexCat -> GrammarData.LexCat -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: GrammarData.LexCat ds1 :: GrammarData.LexCat ->
                 case ds of wild {
                   GrammarData.Comp
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarData.Comp -> GHC.Types.True }
                   GrammarData.Infl
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarData.Infl -> GHC.Types.True }
                   GrammarData.Verb
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarData.Verb -> GHC.Types.True }
                   GrammarData.Det
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarData.Det -> GHC.Types.True }
                   GrammarData.Noun
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarData.Noun -> GHC.Types.True }
                   GrammarData.Adpo
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarData.Adpo -> GHC.Types.True }
                   GrammarData.Adj
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarData.Adj -> GHC.Types.True }
                   GrammarData.Adv
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarData.Adv -> GHC.Types.True } }) -}
bfc1e5db9e1ebde5ee1a2df0cd215115
  $fEqNullSubject :: GHC.Classes.Eq GrammarData.NullSubject
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.NullSubject
                  GrammarData.$fEqNullSubject_$c==
                  GrammarData.$fEqNullSubject_$c/= -}
bfc1e5db9e1ebde5ee1a2df0cd215115
  $fEqNullSubject_$c/= ::
    GrammarData.NullSubject
    -> GrammarData.NullSubject -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a13 :: GrammarData.NullSubject b :: GrammarData.NullSubject ->
                 case a13 of wild {
                   GrammarData.NoNullSub
                   -> case b of wild1 {
                        GrammarData.NoNullSub -> GHC.Types.False
                        GrammarData.OptNullSub -> GHC.Types.True }
                   GrammarData.OptNullSub
                   -> case b of wild1 {
                        GrammarData.NoNullSub -> GHC.Types.True
                        GrammarData.OptNullSub -> GHC.Types.False } }) -}
bfc1e5db9e1ebde5ee1a2df0cd215115
  $fEqNullSubject_$c== ::
    GrammarData.NullSubject
    -> GrammarData.NullSubject -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarData.NullSubject ds1 :: GrammarData.NullSubject ->
                 case ds of wild {
                   GrammarData.NoNullSub
                   -> case ds1 of wild1 {
                        GrammarData.NoNullSub -> GHC.Types.True
                        GrammarData.OptNullSub -> GHC.Types.False }
                   GrammarData.OptNullSub
                   -> case ds1 of wild1 {
                        GrammarData.NoNullSub -> GHC.Types.False
                        GrammarData.OptNullSub -> GHC.Types.True } }) -}
f1cc99e06e27728b550e5649fb89e933
  $fEqNullTopic :: GHC.Classes.Eq GrammarData.NullTopic
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.NullTopic
                  GrammarData.$fEqNullTopic_$c==
                  GrammarData.$fEqNullTopic_$c/= -}
f1cc99e06e27728b550e5649fb89e933
  $fEqNullTopic_$c/= ::
    GrammarData.NullTopic -> GrammarData.NullTopic -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a13 :: GrammarData.NullTopic b :: GrammarData.NullTopic ->
                 case a13 of wild {
                   GrammarData.NoNullTop
                   -> case b of wild1 {
                        GrammarData.NoNullTop -> GHC.Types.False
                        GrammarData.OptNullTop -> GHC.Types.True }
                   GrammarData.OptNullTop
                   -> case b of wild1 {
                        GrammarData.NoNullTop -> GHC.Types.True
                        GrammarData.OptNullTop -> GHC.Types.False } }) -}
f1cc99e06e27728b550e5649fb89e933
  $fEqNullTopic_$c== ::
    GrammarData.NullTopic -> GrammarData.NullTopic -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarData.NullTopic ds1 :: GrammarData.NullTopic ->
                 case ds of wild {
                   GrammarData.NoNullTop
                   -> case ds1 of wild1 {
                        GrammarData.NoNullTop -> GHC.Types.True
                        GrammarData.OptNullTop -> GHC.Types.False }
                   GrammarData.OptNullTop
                   -> case ds1 of wild1 {
                        GrammarData.NoNullTop -> GHC.Types.False
                        GrammarData.OptNullTop -> GHC.Types.True } }) -}
3990d98c3efc6fe781e2cd9838fc9785
  $fEqObjectFinal :: GHC.Classes.Eq GrammarData.ObjectFinal
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.ObjectFinal
                  GrammarData.$fEqObjectFinal_$c==
                  GrammarData.$fEqObjectFinal_$c/= -}
3990d98c3efc6fe781e2cd9838fc9785
  $fEqObjectFinal_$c/= ::
    GrammarData.ObjectFinal
    -> GrammarData.ObjectFinal -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a13 :: GrammarData.ObjectFinal b :: GrammarData.ObjectFinal ->
                 case a13 of wild {
                   GrammarData.ObjFinal
                   -> case b of wild1 {
                        GrammarData.ObjFinal -> GHC.Types.False
                        GrammarData.ObjInitial -> GHC.Types.True }
                   GrammarData.ObjInitial
                   -> case b of wild1 {
                        GrammarData.ObjFinal -> GHC.Types.True
                        GrammarData.ObjInitial -> GHC.Types.False } }) -}
3990d98c3efc6fe781e2cd9838fc9785
  $fEqObjectFinal_$c== ::
    GrammarData.ObjectFinal
    -> GrammarData.ObjectFinal -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarData.ObjectFinal ds1 :: GrammarData.ObjectFinal ->
                 case ds of wild {
                   GrammarData.ObjFinal
                   -> case ds1 of wild1 {
                        GrammarData.ObjFinal -> GHC.Types.True
                        GrammarData.ObjInitial -> GHC.Types.False }
                   GrammarData.ObjInitial
                   -> case ds1 of wild1 {
                        GrammarData.ObjFinal -> GHC.Types.False
                        GrammarData.ObjInitial -> GHC.Types.True } }) -}
2d6043879706e488d30d1b55f6de040c
  $fEqObligatoryTopic :: GHC.Classes.Eq GrammarData.ObligatoryTopic
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.ObligatoryTopic
                  GrammarData.$fEqObligatoryTopic_$c==
                  GrammarData.$fEqObligatoryTopic_$c/= -}
2d6043879706e488d30d1b55f6de040c
  $fEqObligatoryTopic_$c/= ::
    GrammarData.ObligatoryTopic
    -> GrammarData.ObligatoryTopic -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a13 :: GrammarData.ObligatoryTopic
                   b :: GrammarData.ObligatoryTopic ->
                 case a13 of wild {
                   GrammarData.OblTopic
                   -> case b of wild1 {
                        GrammarData.OblTopic -> GHC.Types.False
                        GrammarData.OptTopic -> GHC.Types.True }
                   GrammarData.OptTopic
                   -> case b of wild1 {
                        GrammarData.OblTopic -> GHC.Types.True
                        GrammarData.OptTopic -> GHC.Types.False } }) -}
2d6043879706e488d30d1b55f6de040c
  $fEqObligatoryTopic_$c== ::
    GrammarData.ObligatoryTopic
    -> GrammarData.ObligatoryTopic -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarData.ObligatoryTopic
                   ds1 :: GrammarData.ObligatoryTopic ->
                 case ds of wild {
                   GrammarData.OblTopic
                   -> case ds1 of wild1 {
                        GrammarData.OblTopic -> GHC.Types.True
                        GrammarData.OptTopic -> GHC.Types.False }
                   GrammarData.OptTopic
                   -> case ds1 of wild1 {
                        GrammarData.OblTopic -> GHC.Types.False
                        GrammarData.OptTopic -> GHC.Types.True } }) -}
2b353fa9d69c4b806de27403b3b905b6
  $fEqPhrase :: GHC.Classes.Eq GrammarData.Phrase
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.Phrase
                  GrammarData.$fEqPhrase_$c==
                  GrammarData.$fEqPhrase_$c/= -}
2b353fa9d69c4b806de27403b3b905b6
  $fEqPhrase_$c/= ::
    GrammarData.Phrase -> GrammarData.Phrase -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a13 :: GrammarData.Phrase b :: GrammarData.Phrase ->
                 case GrammarData.$fEqPhrase_$c== a13 b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
2b353fa9d69c4b806de27403b3b905b6
  $fEqPhrase_$c== ::
    GrammarData.Phrase -> GrammarData.Phrase -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
afa5566910055efae0db5c38d7168c87
  $fEqPiedPiping :: GHC.Classes.Eq GrammarData.PiedPiping
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.PiedPiping
                  GrammarData.$fEqPiedPiping_$c==
                  GrammarData.$fEqPiedPiping_$c/= -}
afa5566910055efae0db5c38d7168c87
  $fEqPiedPiping_$c/= ::
    GrammarData.PiedPiping -> GrammarData.PiedPiping -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a13 :: GrammarData.PiedPiping b :: GrammarData.PiedPiping ->
                 case a13 of wild {
                   GrammarData.PiedPipe
                   -> case b of wild1 {
                        GrammarData.PiedPipe -> GHC.Types.False
                        GrammarData.PrepStrand -> GHC.Types.True }
                   GrammarData.PrepStrand
                   -> case b of wild1 {
                        GrammarData.PiedPipe -> GHC.Types.True
                        GrammarData.PrepStrand -> GHC.Types.False } }) -}
afa5566910055efae0db5c38d7168c87
  $fEqPiedPiping_$c== ::
    GrammarData.PiedPiping -> GrammarData.PiedPiping -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarData.PiedPiping ds1 :: GrammarData.PiedPiping ->
                 case ds of wild {
                   GrammarData.PiedPipe
                   -> case ds1 of wild1 {
                        GrammarData.PiedPipe -> GHC.Types.True
                        GrammarData.PrepStrand -> GHC.Types.False }
                   GrammarData.PrepStrand
                   -> case ds1 of wild1 {
                        GrammarData.PiedPipe -> GHC.Types.False
                        GrammarData.PrepStrand -> GHC.Types.True } }) -}
51189b9950c56b3e0908d62c4348d762
  $fEqQuestionInversion ::
    GHC.Classes.Eq GrammarData.QuestionInversion
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.QuestionInversion
                  GrammarData.$fEqQuestionInversion_$c==
                  GrammarData.$fEqQuestionInversion_$c/= -}
51189b9950c56b3e0908d62c4348d762
  $fEqQuestionInversion_$c/= ::
    GrammarData.QuestionInversion
    -> GrammarData.QuestionInversion -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a13 :: GrammarData.QuestionInversion
                   b :: GrammarData.QuestionInversion ->
                 case a13 of wild {
                   GrammarData.NoQuesInv
                   -> case b of wild1 {
                        GrammarData.NoQuesInv -> GHC.Types.False
                        GrammarData.OblQuesInv -> GHC.Types.True }
                   GrammarData.OblQuesInv
                   -> case b of wild1 {
                        GrammarData.NoQuesInv -> GHC.Types.True
                        GrammarData.OblQuesInv -> GHC.Types.False } }) -}
51189b9950c56b3e0908d62c4348d762
  $fEqQuestionInversion_$c== ::
    GrammarData.QuestionInversion
    -> GrammarData.QuestionInversion -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarData.QuestionInversion
                   ds1 :: GrammarData.QuestionInversion ->
                 case ds of wild {
                   GrammarData.NoQuesInv
                   -> case ds1 of wild1 {
                        GrammarData.NoQuesInv -> GHC.Types.True
                        GrammarData.OblQuesInv -> GHC.Types.False }
                   GrammarData.OblQuesInv
                   -> case ds1 of wild1 {
                        GrammarData.NoQuesInv -> GHC.Types.False
                        GrammarData.OblQuesInv -> GHC.Types.True } }) -}
169a6ff198e8a1d23640120a6af7d71f
  $fEqSubjectInitial :: GHC.Classes.Eq GrammarData.SubjectInitial
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.SubjectInitial
                  GrammarData.$fEqSubjectInitial_$c==
                  GrammarData.$fEqSubjectInitial_$c/= -}
169a6ff198e8a1d23640120a6af7d71f
  $fEqSubjectInitial_$c/= ::
    GrammarData.SubjectInitial
    -> GrammarData.SubjectInitial -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a13 :: GrammarData.SubjectInitial
                   b :: GrammarData.SubjectInitial ->
                 case a13 of wild {
                   GrammarData.SubInitial
                   -> case b of wild1 {
                        GrammarData.SubInitial -> GHC.Types.False
                        GrammarData.SubFinal -> GHC.Types.True }
                   GrammarData.SubFinal
                   -> case b of wild1 {
                        GrammarData.SubInitial -> GHC.Types.True
                        GrammarData.SubFinal -> GHC.Types.False } }) -}
169a6ff198e8a1d23640120a6af7d71f
  $fEqSubjectInitial_$c== ::
    GrammarData.SubjectInitial
    -> GrammarData.SubjectInitial -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarData.SubjectInitial
                   ds1 :: GrammarData.SubjectInitial ->
                 case ds of wild {
                   GrammarData.SubInitial
                   -> case ds1 of wild1 {
                        GrammarData.SubInitial -> GHC.Types.True
                        GrammarData.SubFinal -> GHC.Types.False }
                   GrammarData.SubFinal
                   -> case ds1 of wild1 {
                        GrammarData.SubInitial -> GHC.Types.False
                        GrammarData.SubFinal -> GHC.Types.True } }) -}
b20cd44ec2d9abc53df9580ade6dee08
  $fEqTopicMarking :: GHC.Classes.Eq GrammarData.TopicMarking
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.TopicMarking
                  GrammarData.$fEqTopicMarking_$c==
                  GrammarData.$fEqTopicMarking_$c/= -}
b20cd44ec2d9abc53df9580ade6dee08
  $fEqTopicMarking_$c/= ::
    GrammarData.TopicMarking
    -> GrammarData.TopicMarking -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a13 :: GrammarData.TopicMarking b :: GrammarData.TopicMarking ->
                 case a13 of wild {
                   GrammarData.NoTopMark
                   -> case b of wild1 {
                        GrammarData.NoTopMark -> GHC.Types.False
                        GrammarData.OblTopMark -> GHC.Types.True }
                   GrammarData.OblTopMark
                   -> case b of wild1 {
                        GrammarData.NoTopMark -> GHC.Types.True
                        GrammarData.OblTopMark -> GHC.Types.False } }) -}
b20cd44ec2d9abc53df9580ade6dee08
  $fEqTopicMarking_$c== ::
    GrammarData.TopicMarking
    -> GrammarData.TopicMarking -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarData.TopicMarking
                   ds1 :: GrammarData.TopicMarking ->
                 case ds of wild {
                   GrammarData.NoTopMark
                   -> case ds1 of wild1 {
                        GrammarData.NoTopMark -> GHC.Types.True
                        GrammarData.OblTopMark -> GHC.Types.False }
                   GrammarData.OblTopMark
                   -> case ds1 of wild1 {
                        GrammarData.NoTopMark -> GHC.Types.False
                        GrammarData.OblTopMark -> GHC.Types.True } }) -}
ee0bc87f2bf330c19fbe37b3de89b731
  $fEqVtoIMovement :: GHC.Classes.Eq GrammarData.VtoIMovement
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.VtoIMovement
                  GrammarData.$fEqVtoIMovement_$c==
                  GrammarData.$fEqVtoIMovement_$c/= -}
ee0bc87f2bf330c19fbe37b3de89b731
  $fEqVtoIMovement_$c/= ::
    GrammarData.VtoIMovement
    -> GrammarData.VtoIMovement -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a13 :: GrammarData.VtoIMovement b :: GrammarData.VtoIMovement ->
                 case a13 of wild {
                   GrammarData.NoVtoIMove
                   -> case b of wild1 {
                        GrammarData.NoVtoIMove -> GHC.Types.False
                        GrammarData.OblVtoIMove -> GHC.Types.True }
                   GrammarData.OblVtoIMove
                   -> case b of wild1 {
                        GrammarData.NoVtoIMove -> GHC.Types.True
                        GrammarData.OblVtoIMove -> GHC.Types.False } }) -}
ee0bc87f2bf330c19fbe37b3de89b731
  $fEqVtoIMovement_$c== ::
    GrammarData.VtoIMovement
    -> GrammarData.VtoIMovement -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarData.VtoIMovement
                   ds1 :: GrammarData.VtoIMovement ->
                 case ds of wild {
                   GrammarData.NoVtoIMove
                   -> case ds1 of wild1 {
                        GrammarData.NoVtoIMove -> GHC.Types.True
                        GrammarData.OblVtoIMove -> GHC.Types.False }
                   GrammarData.OblVtoIMove
                   -> case ds1 of wild1 {
                        GrammarData.NoVtoIMove -> GHC.Types.False
                        GrammarData.OblVtoIMove -> GHC.Types.True } }) -}
85e0e6313386cebdafa66f96c67aa72a
  $fEqWHMovementObligatory ::
    GHC.Classes.Eq GrammarData.WHMovementObligatory
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.WHMovementObligatory
                  GrammarData.$fEqWHMovementObligatory_$c==
                  GrammarData.$fEqWHMovementObligatory_$c/= -}
85e0e6313386cebdafa66f96c67aa72a
  $fEqWHMovementObligatory_$c/= ::
    GrammarData.WHMovementObligatory
    -> GrammarData.WHMovementObligatory -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a13 :: GrammarData.WHMovementObligatory
                   b :: GrammarData.WHMovementObligatory ->
                 case a13 of wild {
                   GrammarData.NoWHMove
                   -> case b of wild1 {
                        GrammarData.NoWHMove -> GHC.Types.False
                        GrammarData.OblWHMove -> GHC.Types.True }
                   GrammarData.OblWHMove
                   -> case b of wild1 {
                        GrammarData.NoWHMove -> GHC.Types.True
                        GrammarData.OblWHMove -> GHC.Types.False } }) -}
85e0e6313386cebdafa66f96c67aa72a
  $fEqWHMovementObligatory_$c== ::
    GrammarData.WHMovementObligatory
    -> GrammarData.WHMovementObligatory -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarData.WHMovementObligatory
                   ds1 :: GrammarData.WHMovementObligatory ->
                 case ds of wild {
                   GrammarData.NoWHMove
                   -> case ds1 of wild1 {
                        GrammarData.NoWHMove -> GHC.Types.True
                        GrammarData.OblWHMove -> GHC.Types.False }
                   GrammarData.OblWHMove
                   -> case ds1 of wild1 {
                        GrammarData.NoWHMove -> GHC.Types.False
                        GrammarData.OblWHMove -> GHC.Types.True } }) -}
64df7cc6c7fa11aa276601186742ba94
  $fReadAffixHopping :: GHC.Read.Read GrammarData.AffixHopping
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.AffixHopping
                  GrammarData.$fReadAffixHopping_$s$dmreadsPrec
                  GrammarData.$fReadAffixHopping_$sreadListDefault
                  GrammarData.$fReadAffixHopping_$creadPrec
                  GrammarData.$fReadAffixHopping_$creadListPrec -}
64df7cc6c7fa11aa276601186742ba94
  $fReadAffixHopping1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarData.AffixHopping] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarData.AffixHopping]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarData.AffixHopping
                   GrammarData.$fReadAffixHopping2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarData.AffixHopping>_R))
                   @ b
                   eta1) -}
64df7cc6c7fa11aa276601186742ba94
  $fReadAffixHopping10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.AffixHopping -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.AffixHopping
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.NoAffixHop) -}
6c5102b8be4df14f814b349b4bcba4e3
  $fReadAffixHopping11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NoAffixHop"#) -}
64df7cc6c7fa11aa276601186742ba94
  $fReadAffixHopping2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarData.AffixHopping
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarData.AffixHopping
                   GrammarData.$fReadAffixHopping3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarData.AffixHopping>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarData.AffixHopping>_R)))) -}
64df7cc6c7fa11aa276601186742ba94
  $fReadAffixHopping3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.AffixHopping -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarData.AffixHopping
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarData.AffixHopping
                   GrammarData.$fReadAffixHopping4
                   eta
                   @ b
                   eta1) -}
64df7cc6c7fa11aa276601186742ba94
  $fReadAffixHopping4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.AffixHopping)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.AffixHopping)
                   GrammarData.$fReadAffixHopping9
                   GrammarData.$fReadAffixHopping5) -}
64df7cc6c7fa11aa276601186742ba94
  $fReadAffixHopping5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.AffixHopping)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.AffixHopping)
                   GrammarData.$fReadAffixHopping6
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           GrammarData.AffixHopping))) -}
64df7cc6c7fa11aa276601186742ba94
  $fReadAffixHopping6 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.AffixHopping)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadAffixHopping8,
                  GrammarData.$fReadAffixHopping7
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.AffixHopping>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.AffixHopping>_R))))) -}
64df7cc6c7fa11aa276601186742ba94
  $fReadAffixHopping7 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.AffixHopping -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.AffixHopping
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.OblAffixHop) -}
24dc88ddea2b17bc5b964660652a520c
  $fReadAffixHopping8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OblAffixHop"#) -}
64df7cc6c7fa11aa276601186742ba94
  $fReadAffixHopping9 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.AffixHopping)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadAffixHopping11,
                  GrammarData.$fReadAffixHopping10
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.AffixHopping>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.AffixHopping>_R))))) -}
64df7cc6c7fa11aa276601186742ba94
  $fReadAffixHopping_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [GrammarData.AffixHopping]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadAffixHopping1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarData.AffixHopping]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarData.AffixHopping]>_R))) -}
64df7cc6c7fa11aa276601186742ba94
  $fReadAffixHopping_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.AffixHopping
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadAffixHopping2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarData.AffixHopping>_R)) -}
64df7cc6c7fa11aa276601186742ba94
  $fReadAffixHopping_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarData.AffixHopping
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarData.AffixHopping
                   GrammarData.$fReadAffixHopping_$creadPrec
                   eta) -}
64df7cc6c7fa11aa276601186742ba94
  $fReadAffixHopping_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarData.AffixHopping]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarData.AffixHopping]
                   ((GrammarData.$fReadAffixHopping_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarData.AffixHopping]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarData.AffixHopping]>_R)
                      @ [GrammarData.AffixHopping]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarData.AffixHopping]))) -}
bd101cefc51669d2e9cbe89bdbe27552
  $fReadComplementizerInitial ::
    GHC.Read.Read GrammarData.ComplementizerInitial
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.ComplementizerInitial
                  GrammarData.$fReadComplementizerInitial_$s$dmreadsPrec
                  GrammarData.$fReadComplementizerInitial_$sreadListDefault
                  GrammarData.$fReadComplementizerInitial_$creadPrec
                  GrammarData.$fReadComplementizerInitial_$creadListPrec -}
bd101cefc51669d2e9cbe89bdbe27552
  $fReadComplementizerInitial1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarData.ComplementizerInitial]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarData.ComplementizerInitial]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarData.ComplementizerInitial
                   GrammarData.$fReadComplementizerInitial2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarData.ComplementizerInitial>_R))
                   @ b
                   eta1) -}
bd101cefc51669d2e9cbe89bdbe27552
  $fReadComplementizerInitial10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.ComplementizerInitial
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.ComplementizerInitial
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.CompInitial) -}
265531d8bdd5f29731b5fa88b84d318e
  $fReadComplementizerInitial11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "CompInitial"#) -}
bd101cefc51669d2e9cbe89bdbe27552
  $fReadComplementizerInitial2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP
         GrammarData.ComplementizerInitial
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarData.ComplementizerInitial
                   GrammarData.$fReadComplementizerInitial3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarData.ComplementizerInitial>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarData.ComplementizerInitial>_R)))) -}
bd101cefc51669d2e9cbe89bdbe27552
  $fReadComplementizerInitial3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.ComplementizerInitial
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarData.ComplementizerInitial
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarData.ComplementizerInitial
                   GrammarData.$fReadComplementizerInitial4
                   eta
                   @ b
                   eta1) -}
bd101cefc51669d2e9cbe89bdbe27552
  $fReadComplementizerInitial4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GrammarData.ComplementizerInitial)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GrammarData.ComplementizerInitial)
                   GrammarData.$fReadComplementizerInitial9
                   GrammarData.$fReadComplementizerInitial5) -}
bd101cefc51669d2e9cbe89bdbe27552
  $fReadComplementizerInitial5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GrammarData.ComplementizerInitial)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GrammarData.ComplementizerInitial)
                   GrammarData.$fReadComplementizerInitial6
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           GrammarData.ComplementizerInitial))) -}
bd101cefc51669d2e9cbe89bdbe27552
  $fReadComplementizerInitial6 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GrammarData.ComplementizerInitial)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadComplementizerInitial8,
                  GrammarData.$fReadComplementizerInitial7
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.ComplementizerInitial>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.ComplementizerInitial>_R))))) -}
bd101cefc51669d2e9cbe89bdbe27552
  $fReadComplementizerInitial7 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.ComplementizerInitial
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.ComplementizerInitial
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.CompFinal) -}
744610e6f0856ffbe3be6c2fa90f3945
  $fReadComplementizerInitial8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "CompFinal"#) -}
bd101cefc51669d2e9cbe89bdbe27552
  $fReadComplementizerInitial9 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GrammarData.ComplementizerInitial)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadComplementizerInitial11,
                  GrammarData.$fReadComplementizerInitial10
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.ComplementizerInitial>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.ComplementizerInitial>_R))))) -}
bd101cefc51669d2e9cbe89bdbe27552
  $fReadComplementizerInitial_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [GrammarData.ComplementizerInitial]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadComplementizerInitial1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarData.ComplementizerInitial]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarData.ComplementizerInitial]>_R))) -}
bd101cefc51669d2e9cbe89bdbe27552
  $fReadComplementizerInitial_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      GrammarData.ComplementizerInitial
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadComplementizerInitial2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarData.ComplementizerInitial>_R)) -}
bd101cefc51669d2e9cbe89bdbe27552
  $fReadComplementizerInitial_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS
         GrammarData.ComplementizerInitial
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarData.ComplementizerInitial
                   GrammarData.$fReadComplementizerInitial_$creadPrec
                   eta) -}
bd101cefc51669d2e9cbe89bdbe27552
  $fReadComplementizerInitial_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS
      [GrammarData.ComplementizerInitial]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarData.ComplementizerInitial]
                   ((GrammarData.$fReadComplementizerInitial_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarData.ComplementizerInitial]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarData.ComplementizerInitial]>_R)
                      @ [GrammarData.ComplementizerInitial]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarData.ComplementizerInitial]))) -}
f50dc15d9604ea3311686cfae7fe1d21
  $fReadItoCMovement :: GHC.Read.Read GrammarData.ItoCMovement
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.ItoCMovement
                  GrammarData.$fReadItoCMovement_$s$dmreadsPrec
                  GrammarData.$fReadItoCMovement_$sreadListDefault
                  GrammarData.$fReadItoCMovement_$creadPrec
                  GrammarData.$fReadItoCMovement_$creadListPrec -}
f50dc15d9604ea3311686cfae7fe1d21
  $fReadItoCMovement1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarData.ItoCMovement] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarData.ItoCMovement]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarData.ItoCMovement
                   GrammarData.$fReadItoCMovement2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarData.ItoCMovement>_R))
                   @ b
                   eta1) -}
f50dc15d9604ea3311686cfae7fe1d21
  $fReadItoCMovement10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.ItoCMovement -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.ItoCMovement
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.NoItoCMove) -}
78baadc9724345d66251bc2efce5123d
  $fReadItoCMovement11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NoItoCMove"#) -}
f50dc15d9604ea3311686cfae7fe1d21
  $fReadItoCMovement2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarData.ItoCMovement
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarData.ItoCMovement
                   GrammarData.$fReadItoCMovement3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarData.ItoCMovement>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarData.ItoCMovement>_R)))) -}
f50dc15d9604ea3311686cfae7fe1d21
  $fReadItoCMovement3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.ItoCMovement -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarData.ItoCMovement
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarData.ItoCMovement
                   GrammarData.$fReadItoCMovement4
                   eta
                   @ b
                   eta1) -}
f50dc15d9604ea3311686cfae7fe1d21
  $fReadItoCMovement4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.ItoCMovement)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.ItoCMovement)
                   GrammarData.$fReadItoCMovement9
                   GrammarData.$fReadItoCMovement5) -}
f50dc15d9604ea3311686cfae7fe1d21
  $fReadItoCMovement5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.ItoCMovement)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.ItoCMovement)
                   GrammarData.$fReadItoCMovement6
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           GrammarData.ItoCMovement))) -}
f50dc15d9604ea3311686cfae7fe1d21
  $fReadItoCMovement6 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.ItoCMovement)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadItoCMovement8,
                  GrammarData.$fReadItoCMovement7
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.ItoCMovement>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.ItoCMovement>_R))))) -}
f50dc15d9604ea3311686cfae7fe1d21
  $fReadItoCMovement7 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.ItoCMovement -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.ItoCMovement
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.OblItoCMove) -}
b42c47605e054fef1624cef4846a626d
  $fReadItoCMovement8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OblItoCMove"#) -}
f50dc15d9604ea3311686cfae7fe1d21
  $fReadItoCMovement9 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.ItoCMovement)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadItoCMovement11,
                  GrammarData.$fReadItoCMovement10
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.ItoCMovement>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.ItoCMovement>_R))))) -}
f50dc15d9604ea3311686cfae7fe1d21
  $fReadItoCMovement_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [GrammarData.ItoCMovement]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadItoCMovement1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarData.ItoCMovement]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarData.ItoCMovement]>_R))) -}
f50dc15d9604ea3311686cfae7fe1d21
  $fReadItoCMovement_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.ItoCMovement
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadItoCMovement2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarData.ItoCMovement>_R)) -}
f50dc15d9604ea3311686cfae7fe1d21
  $fReadItoCMovement_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarData.ItoCMovement
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarData.ItoCMovement
                   GrammarData.$fReadItoCMovement_$creadPrec
                   eta) -}
f50dc15d9604ea3311686cfae7fe1d21
  $fReadItoCMovement_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarData.ItoCMovement]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarData.ItoCMovement]
                   ((GrammarData.$fReadItoCMovement_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarData.ItoCMovement]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarData.ItoCMovement]>_R)
                      @ [GrammarData.ItoCMovement]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarData.ItoCMovement]))) -}
bfc1e5db9e1ebde5ee1a2df0cd215115
  $fReadNullSubject :: GHC.Read.Read GrammarData.NullSubject
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.NullSubject
                  GrammarData.$fReadNullSubject_$s$dmreadsPrec
                  GrammarData.$fReadNullSubject_$sreadListDefault
                  GrammarData.$fReadNullSubject_$creadPrec
                  GrammarData.$fReadNullSubject_$creadListPrec -}
bfc1e5db9e1ebde5ee1a2df0cd215115
  $fReadNullSubject1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarData.NullSubject] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarData.NullSubject]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarData.NullSubject
                   GrammarData.$fReadNullSubject2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarData.NullSubject>_R))
                   @ b
                   eta1) -}
bfc1e5db9e1ebde5ee1a2df0cd215115
  $fReadNullSubject10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.NullSubject -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.NullSubject
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.NoNullSub) -}
bcc6033c7ff35fe5bfdbae0ec78d25a7
  $fReadNullSubject11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NoNullSub"#) -}
bfc1e5db9e1ebde5ee1a2df0cd215115
  $fReadNullSubject2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarData.NullSubject
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarData.NullSubject
                   GrammarData.$fReadNullSubject3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarData.NullSubject>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarData.NullSubject>_R)))) -}
bfc1e5db9e1ebde5ee1a2df0cd215115
  $fReadNullSubject3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.NullSubject -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarData.NullSubject
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarData.NullSubject
                   GrammarData.$fReadNullSubject4
                   eta
                   @ b
                   eta1) -}
bfc1e5db9e1ebde5ee1a2df0cd215115
  $fReadNullSubject4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.NullSubject)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.NullSubject)
                   GrammarData.$fReadNullSubject9
                   GrammarData.$fReadNullSubject5) -}
bfc1e5db9e1ebde5ee1a2df0cd215115
  $fReadNullSubject5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.NullSubject)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.NullSubject)
                   GrammarData.$fReadNullSubject6
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           GrammarData.NullSubject))) -}
bfc1e5db9e1ebde5ee1a2df0cd215115
  $fReadNullSubject6 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.NullSubject)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadNullSubject8,
                  GrammarData.$fReadNullSubject7
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.NullSubject>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.NullSubject>_R))))) -}
bfc1e5db9e1ebde5ee1a2df0cd215115
  $fReadNullSubject7 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.NullSubject -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.NullSubject
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.OptNullSub) -}
a868ddf9269474edc58aa04942c54180
  $fReadNullSubject8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OptNullSub"#) -}
bfc1e5db9e1ebde5ee1a2df0cd215115
  $fReadNullSubject9 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.NullSubject)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadNullSubject11,
                  GrammarData.$fReadNullSubject10
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.NullSubject>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.NullSubject>_R))))) -}
bfc1e5db9e1ebde5ee1a2df0cd215115
  $fReadNullSubject_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [GrammarData.NullSubject]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadNullSubject1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarData.NullSubject]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarData.NullSubject]>_R))) -}
bfc1e5db9e1ebde5ee1a2df0cd215115
  $fReadNullSubject_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.NullSubject
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadNullSubject2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarData.NullSubject>_R)) -}
bfc1e5db9e1ebde5ee1a2df0cd215115
  $fReadNullSubject_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarData.NullSubject
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarData.NullSubject
                   GrammarData.$fReadNullSubject_$creadPrec
                   eta) -}
bfc1e5db9e1ebde5ee1a2df0cd215115
  $fReadNullSubject_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarData.NullSubject]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarData.NullSubject]
                   ((GrammarData.$fReadNullSubject_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarData.NullSubject]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarData.NullSubject]>_R)
                      @ [GrammarData.NullSubject]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarData.NullSubject]))) -}
f1cc99e06e27728b550e5649fb89e933
  $fReadNullTopic :: GHC.Read.Read GrammarData.NullTopic
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.NullTopic
                  GrammarData.$fReadNullTopic_$s$dmreadsPrec
                  GrammarData.$fReadNullTopic_$sreadListDefault
                  GrammarData.$fReadNullTopic_$creadPrec
                  GrammarData.$fReadNullTopic_$creadListPrec -}
f1cc99e06e27728b550e5649fb89e933
  $fReadNullTopic1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarData.NullTopic] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarData.NullTopic]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarData.NullTopic
                   GrammarData.$fReadNullTopic2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarData.NullTopic>_R))
                   @ b
                   eta1) -}
f1cc99e06e27728b550e5649fb89e933
  $fReadNullTopic10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.NullTopic -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.NullTopic -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.NoNullTop) -}
e277df4526ce42e0c287713ac9230134
  $fReadNullTopic11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NoNullTop"#) -}
f1cc99e06e27728b550e5649fb89e933
  $fReadNullTopic2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarData.NullTopic
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarData.NullTopic
                   GrammarData.$fReadNullTopic3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarData.NullTopic>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarData.NullTopic>_R)))) -}
f1cc99e06e27728b550e5649fb89e933
  $fReadNullTopic3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.NullTopic -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarData.NullTopic
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarData.NullTopic
                   GrammarData.$fReadNullTopic4
                   eta
                   @ b
                   eta1) -}
f1cc99e06e27728b550e5649fb89e933
  $fReadNullTopic4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.NullTopic)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.NullTopic)
                   GrammarData.$fReadNullTopic9
                   GrammarData.$fReadNullTopic5) -}
f1cc99e06e27728b550e5649fb89e933
  $fReadNullTopic5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.NullTopic)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.NullTopic)
                   GrammarData.$fReadNullTopic6
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           GrammarData.NullTopic))) -}
f1cc99e06e27728b550e5649fb89e933
  $fReadNullTopic6 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.NullTopic)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadNullTopic8,
                  GrammarData.$fReadNullTopic7
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.NullTopic>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.NullTopic>_R))))) -}
f1cc99e06e27728b550e5649fb89e933
  $fReadNullTopic7 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.NullTopic -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.NullTopic -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.OptNullTop) -}
f9de96e04d2454db67104c0df3f0284c
  $fReadNullTopic8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OptNullTop"#) -}
f1cc99e06e27728b550e5649fb89e933
  $fReadNullTopic9 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.NullTopic)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadNullTopic11,
                  GrammarData.$fReadNullTopic10
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.NullTopic>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.NullTopic>_R))))) -}
f1cc99e06e27728b550e5649fb89e933
  $fReadNullTopic_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [GrammarData.NullTopic]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadNullTopic1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarData.NullTopic]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarData.NullTopic]>_R))) -}
f1cc99e06e27728b550e5649fb89e933
  $fReadNullTopic_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.NullTopic
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadNullTopic2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarData.NullTopic>_R)) -}
f1cc99e06e27728b550e5649fb89e933
  $fReadNullTopic_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarData.NullTopic
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarData.NullTopic
                   GrammarData.$fReadNullTopic_$creadPrec
                   eta) -}
f1cc99e06e27728b550e5649fb89e933
  $fReadNullTopic_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarData.NullTopic]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarData.NullTopic]
                   ((GrammarData.$fReadNullTopic_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarData.NullTopic]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarData.NullTopic]>_R)
                      @ [GrammarData.NullTopic]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarData.NullTopic]))) -}
3990d98c3efc6fe781e2cd9838fc9785
  $fReadObjectFinal :: GHC.Read.Read GrammarData.ObjectFinal
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.ObjectFinal
                  GrammarData.$fReadObjectFinal_$s$dmreadsPrec
                  GrammarData.$fReadObjectFinal_$sreadListDefault
                  GrammarData.$fReadObjectFinal_$creadPrec
                  GrammarData.$fReadObjectFinal_$creadListPrec -}
3990d98c3efc6fe781e2cd9838fc9785
  $fReadObjectFinal1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarData.ObjectFinal] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarData.ObjectFinal]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarData.ObjectFinal
                   GrammarData.$fReadObjectFinal2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarData.ObjectFinal>_R))
                   @ b
                   eta1) -}
3990d98c3efc6fe781e2cd9838fc9785
  $fReadObjectFinal10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.ObjectFinal -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.ObjectFinal
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.ObjFinal) -}
dbf8754b60e84a319c9d5eeaaaa381bd
  $fReadObjectFinal11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ObjFinal"#) -}
3990d98c3efc6fe781e2cd9838fc9785
  $fReadObjectFinal2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarData.ObjectFinal
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarData.ObjectFinal
                   GrammarData.$fReadObjectFinal3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarData.ObjectFinal>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarData.ObjectFinal>_R)))) -}
3990d98c3efc6fe781e2cd9838fc9785
  $fReadObjectFinal3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.ObjectFinal -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarData.ObjectFinal
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarData.ObjectFinal
                   GrammarData.$fReadObjectFinal4
                   eta
                   @ b
                   eta1) -}
3990d98c3efc6fe781e2cd9838fc9785
  $fReadObjectFinal4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.ObjectFinal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.ObjectFinal)
                   GrammarData.$fReadObjectFinal9
                   GrammarData.$fReadObjectFinal5) -}
3990d98c3efc6fe781e2cd9838fc9785
  $fReadObjectFinal5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.ObjectFinal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.ObjectFinal)
                   GrammarData.$fReadObjectFinal6
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           GrammarData.ObjectFinal))) -}
3990d98c3efc6fe781e2cd9838fc9785
  $fReadObjectFinal6 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.ObjectFinal)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadObjectFinal8,
                  GrammarData.$fReadObjectFinal7
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.ObjectFinal>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.ObjectFinal>_R))))) -}
3990d98c3efc6fe781e2cd9838fc9785
  $fReadObjectFinal7 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.ObjectFinal -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.ObjectFinal
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.ObjInitial) -}
6e7bd8171e8405f53aeb39f5aaa8e7c4
  $fReadObjectFinal8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ObjInitial"#) -}
3990d98c3efc6fe781e2cd9838fc9785
  $fReadObjectFinal9 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.ObjectFinal)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadObjectFinal11,
                  GrammarData.$fReadObjectFinal10
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.ObjectFinal>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.ObjectFinal>_R))))) -}
3990d98c3efc6fe781e2cd9838fc9785
  $fReadObjectFinal_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [GrammarData.ObjectFinal]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadObjectFinal1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarData.ObjectFinal]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarData.ObjectFinal]>_R))) -}
3990d98c3efc6fe781e2cd9838fc9785
  $fReadObjectFinal_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.ObjectFinal
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadObjectFinal2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarData.ObjectFinal>_R)) -}
3990d98c3efc6fe781e2cd9838fc9785
  $fReadObjectFinal_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarData.ObjectFinal
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarData.ObjectFinal
                   GrammarData.$fReadObjectFinal_$creadPrec
                   eta) -}
3990d98c3efc6fe781e2cd9838fc9785
  $fReadObjectFinal_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarData.ObjectFinal]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarData.ObjectFinal]
                   ((GrammarData.$fReadObjectFinal_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarData.ObjectFinal]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarData.ObjectFinal]>_R)
                      @ [GrammarData.ObjectFinal]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarData.ObjectFinal]))) -}
2d6043879706e488d30d1b55f6de040c
  $fReadObligatoryTopic :: GHC.Read.Read GrammarData.ObligatoryTopic
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.ObligatoryTopic
                  GrammarData.$fReadObligatoryTopic_$s$dmreadsPrec
                  GrammarData.$fReadObligatoryTopic_$sreadListDefault
                  GrammarData.$fReadObligatoryTopic_$creadPrec
                  GrammarData.$fReadObligatoryTopic_$creadListPrec -}
2d6043879706e488d30d1b55f6de040c
  $fReadObligatoryTopic1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarData.ObligatoryTopic] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarData.ObligatoryTopic]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarData.ObligatoryTopic
                   GrammarData.$fReadObligatoryTopic2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarData.ObligatoryTopic>_R))
                   @ b
                   eta1) -}
2d6043879706e488d30d1b55f6de040c
  $fReadObligatoryTopic10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.ObligatoryTopic -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.ObligatoryTopic
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.OblTopic) -}
9ced7614730da364b9e9ad8bc876457d
  $fReadObligatoryTopic11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OblTopic"#) -}
2d6043879706e488d30d1b55f6de040c
  $fReadObligatoryTopic2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarData.ObligatoryTopic
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarData.ObligatoryTopic
                   GrammarData.$fReadObligatoryTopic3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarData.ObligatoryTopic>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarData.ObligatoryTopic>_R)))) -}
2d6043879706e488d30d1b55f6de040c
  $fReadObligatoryTopic3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.ObligatoryTopic -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarData.ObligatoryTopic
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarData.ObligatoryTopic
                   GrammarData.$fReadObligatoryTopic4
                   eta
                   @ b
                   eta1) -}
2d6043879706e488d30d1b55f6de040c
  $fReadObligatoryTopic4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GrammarData.ObligatoryTopic)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GrammarData.ObligatoryTopic)
                   GrammarData.$fReadObligatoryTopic9
                   GrammarData.$fReadObligatoryTopic5) -}
2d6043879706e488d30d1b55f6de040c
  $fReadObligatoryTopic5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GrammarData.ObligatoryTopic)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GrammarData.ObligatoryTopic)
                   GrammarData.$fReadObligatoryTopic6
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           GrammarData.ObligatoryTopic))) -}
2d6043879706e488d30d1b55f6de040c
  $fReadObligatoryTopic6 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GrammarData.ObligatoryTopic)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadObligatoryTopic8,
                  GrammarData.$fReadObligatoryTopic7
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.ObligatoryTopic>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.ObligatoryTopic>_R))))) -}
2d6043879706e488d30d1b55f6de040c
  $fReadObligatoryTopic7 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.ObligatoryTopic -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.ObligatoryTopic
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.OptTopic) -}
3bd8f3272e1e4eed54df5e5e2179bb0a
  $fReadObligatoryTopic8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OptTopic"#) -}
2d6043879706e488d30d1b55f6de040c
  $fReadObligatoryTopic9 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GrammarData.ObligatoryTopic)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadObligatoryTopic11,
                  GrammarData.$fReadObligatoryTopic10
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.ObligatoryTopic>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.ObligatoryTopic>_R))))) -}
2d6043879706e488d30d1b55f6de040c
  $fReadObligatoryTopic_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [GrammarData.ObligatoryTopic]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadObligatoryTopic1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarData.ObligatoryTopic]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarData.ObligatoryTopic]>_R))) -}
2d6043879706e488d30d1b55f6de040c
  $fReadObligatoryTopic_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      GrammarData.ObligatoryTopic
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadObligatoryTopic2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarData.ObligatoryTopic>_R)) -}
2d6043879706e488d30d1b55f6de040c
  $fReadObligatoryTopic_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarData.ObligatoryTopic
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarData.ObligatoryTopic
                   GrammarData.$fReadObligatoryTopic_$creadPrec
                   eta) -}
2d6043879706e488d30d1b55f6de040c
  $fReadObligatoryTopic_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarData.ObligatoryTopic]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarData.ObligatoryTopic]
                   ((GrammarData.$fReadObligatoryTopic_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarData.ObligatoryTopic]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarData.ObligatoryTopic]>_R)
                      @ [GrammarData.ObligatoryTopic]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarData.ObligatoryTopic]))) -}
afa5566910055efae0db5c38d7168c87
  $fReadPiedPiping :: GHC.Read.Read GrammarData.PiedPiping
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.PiedPiping
                  GrammarData.$fReadPiedPiping_$s$dmreadsPrec
                  GrammarData.$fReadPiedPiping_$sreadListDefault
                  GrammarData.$fReadPiedPiping_$creadPrec
                  GrammarData.$fReadPiedPiping_$creadListPrec -}
afa5566910055efae0db5c38d7168c87
  $fReadPiedPiping1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarData.PiedPiping] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarData.PiedPiping]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarData.PiedPiping
                   GrammarData.$fReadPiedPiping2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarData.PiedPiping>_R))
                   @ b
                   eta1) -}
afa5566910055efae0db5c38d7168c87
  $fReadPiedPiping10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.PiedPiping -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.PiedPiping
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.PiedPipe) -}
12d292ad9acc9fed25fd415f095e46fa
  $fReadPiedPiping11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PiedPipe"#) -}
afa5566910055efae0db5c38d7168c87
  $fReadPiedPiping2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarData.PiedPiping
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarData.PiedPiping
                   GrammarData.$fReadPiedPiping3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarData.PiedPiping>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarData.PiedPiping>_R)))) -}
afa5566910055efae0db5c38d7168c87
  $fReadPiedPiping3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.PiedPiping -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarData.PiedPiping
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarData.PiedPiping
                   GrammarData.$fReadPiedPiping4
                   eta
                   @ b
                   eta1) -}
afa5566910055efae0db5c38d7168c87
  $fReadPiedPiping4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.PiedPiping)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.PiedPiping)
                   GrammarData.$fReadPiedPiping9
                   GrammarData.$fReadPiedPiping5) -}
afa5566910055efae0db5c38d7168c87
  $fReadPiedPiping5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.PiedPiping)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.PiedPiping)
                   GrammarData.$fReadPiedPiping6
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           GrammarData.PiedPiping))) -}
afa5566910055efae0db5c38d7168c87
  $fReadPiedPiping6 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.PiedPiping)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadPiedPiping8,
                  GrammarData.$fReadPiedPiping7
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.PiedPiping>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.PiedPiping>_R))))) -}
afa5566910055efae0db5c38d7168c87
  $fReadPiedPiping7 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.PiedPiping -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.PiedPiping
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.PrepStrand) -}
47cbe2b22bcb64beecd47322ca13f145
  $fReadPiedPiping8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PrepStrand"#) -}
afa5566910055efae0db5c38d7168c87
  $fReadPiedPiping9 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.PiedPiping)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadPiedPiping11,
                  GrammarData.$fReadPiedPiping10
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.PiedPiping>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.PiedPiping>_R))))) -}
afa5566910055efae0db5c38d7168c87
  $fReadPiedPiping_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [GrammarData.PiedPiping]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadPiedPiping1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarData.PiedPiping]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarData.PiedPiping]>_R))) -}
afa5566910055efae0db5c38d7168c87
  $fReadPiedPiping_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.PiedPiping
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadPiedPiping2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarData.PiedPiping>_R)) -}
afa5566910055efae0db5c38d7168c87
  $fReadPiedPiping_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarData.PiedPiping
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarData.PiedPiping
                   GrammarData.$fReadPiedPiping_$creadPrec
                   eta) -}
afa5566910055efae0db5c38d7168c87
  $fReadPiedPiping_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarData.PiedPiping]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarData.PiedPiping]
                   ((GrammarData.$fReadPiedPiping_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarData.PiedPiping]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarData.PiedPiping]>_R)
                      @ [GrammarData.PiedPiping]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarData.PiedPiping]))) -}
51189b9950c56b3e0908d62c4348d762
  $fReadQuestionInversion ::
    GHC.Read.Read GrammarData.QuestionInversion
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.QuestionInversion
                  GrammarData.$fReadQuestionInversion_$s$dmreadsPrec
                  GrammarData.$fReadQuestionInversion_$sreadListDefault
                  GrammarData.$fReadQuestionInversion_$creadPrec
                  GrammarData.$fReadQuestionInversion_$creadListPrec -}
51189b9950c56b3e0908d62c4348d762
  $fReadQuestionInversion1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarData.QuestionInversion]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarData.QuestionInversion]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarData.QuestionInversion
                   GrammarData.$fReadQuestionInversion2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarData.QuestionInversion>_R))
                   @ b
                   eta1) -}
51189b9950c56b3e0908d62c4348d762
  $fReadQuestionInversion10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.QuestionInversion -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.QuestionInversion
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.NoQuesInv) -}
4c0f0bfe3ba9e850e36211e9f297dc04
  $fReadQuestionInversion11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NoQuesInv"#) -}
51189b9950c56b3e0908d62c4348d762
  $fReadQuestionInversion2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarData.QuestionInversion
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarData.QuestionInversion
                   GrammarData.$fReadQuestionInversion3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarData.QuestionInversion>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarData.QuestionInversion>_R)))) -}
51189b9950c56b3e0908d62c4348d762
  $fReadQuestionInversion3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.QuestionInversion -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarData.QuestionInversion
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarData.QuestionInversion
                   GrammarData.$fReadQuestionInversion4
                   eta
                   @ b
                   eta1) -}
51189b9950c56b3e0908d62c4348d762
  $fReadQuestionInversion4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GrammarData.QuestionInversion)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GrammarData.QuestionInversion)
                   GrammarData.$fReadQuestionInversion9
                   GrammarData.$fReadQuestionInversion5) -}
51189b9950c56b3e0908d62c4348d762
  $fReadQuestionInversion5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GrammarData.QuestionInversion)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GrammarData.QuestionInversion)
                   GrammarData.$fReadQuestionInversion6
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           GrammarData.QuestionInversion))) -}
51189b9950c56b3e0908d62c4348d762
  $fReadQuestionInversion6 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GrammarData.QuestionInversion)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadQuestionInversion8,
                  GrammarData.$fReadQuestionInversion7
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.QuestionInversion>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.QuestionInversion>_R))))) -}
51189b9950c56b3e0908d62c4348d762
  $fReadQuestionInversion7 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.QuestionInversion -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.QuestionInversion
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.OblQuesInv) -}
345f97f11d48d1dafc78d775b891fe14
  $fReadQuestionInversion8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OblQuesInv"#) -}
51189b9950c56b3e0908d62c4348d762
  $fReadQuestionInversion9 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GrammarData.QuestionInversion)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadQuestionInversion11,
                  GrammarData.$fReadQuestionInversion10
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.QuestionInversion>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.QuestionInversion>_R))))) -}
51189b9950c56b3e0908d62c4348d762
  $fReadQuestionInversion_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [GrammarData.QuestionInversion]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadQuestionInversion1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarData.QuestionInversion]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarData.QuestionInversion]>_R))) -}
51189b9950c56b3e0908d62c4348d762
  $fReadQuestionInversion_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      GrammarData.QuestionInversion
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadQuestionInversion2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarData.QuestionInversion>_R)) -}
51189b9950c56b3e0908d62c4348d762
  $fReadQuestionInversion_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarData.QuestionInversion
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarData.QuestionInversion
                   GrammarData.$fReadQuestionInversion_$creadPrec
                   eta) -}
51189b9950c56b3e0908d62c4348d762
  $fReadQuestionInversion_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarData.QuestionInversion]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarData.QuestionInversion]
                   ((GrammarData.$fReadQuestionInversion_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarData.QuestionInversion]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarData.QuestionInversion]>_R)
                      @ [GrammarData.QuestionInversion]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarData.QuestionInversion]))) -}
169a6ff198e8a1d23640120a6af7d71f
  $fReadSubjectInitial :: GHC.Read.Read GrammarData.SubjectInitial
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.SubjectInitial
                  GrammarData.$fReadSubjectInitial_$s$dmreadsPrec
                  GrammarData.$fReadSubjectInitial_$sreadListDefault
                  GrammarData.$fReadSubjectInitial_$creadPrec
                  GrammarData.$fReadSubjectInitial_$creadListPrec -}
169a6ff198e8a1d23640120a6af7d71f
  $fReadSubjectInitial1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarData.SubjectInitial] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarData.SubjectInitial]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarData.SubjectInitial
                   GrammarData.$fReadSubjectInitial2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarData.SubjectInitial>_R))
                   @ b
                   eta1) -}
169a6ff198e8a1d23640120a6af7d71f
  $fReadSubjectInitial10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.SubjectInitial -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.SubjectInitial
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.SubInitial) -}
b4a2c8e7732505bf956d04af50d1e8b6
  $fReadSubjectInitial11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SubInitial"#) -}
169a6ff198e8a1d23640120a6af7d71f
  $fReadSubjectInitial2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarData.SubjectInitial
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarData.SubjectInitial
                   GrammarData.$fReadSubjectInitial3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarData.SubjectInitial>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarData.SubjectInitial>_R)))) -}
169a6ff198e8a1d23640120a6af7d71f
  $fReadSubjectInitial3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.SubjectInitial -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarData.SubjectInitial
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarData.SubjectInitial
                   GrammarData.$fReadSubjectInitial4
                   eta
                   @ b
                   eta1) -}
169a6ff198e8a1d23640120a6af7d71f
  $fReadSubjectInitial4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GrammarData.SubjectInitial)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GrammarData.SubjectInitial)
                   GrammarData.$fReadSubjectInitial9
                   GrammarData.$fReadSubjectInitial5) -}
169a6ff198e8a1d23640120a6af7d71f
  $fReadSubjectInitial5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GrammarData.SubjectInitial)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GrammarData.SubjectInitial)
                   GrammarData.$fReadSubjectInitial6
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           GrammarData.SubjectInitial))) -}
169a6ff198e8a1d23640120a6af7d71f
  $fReadSubjectInitial6 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GrammarData.SubjectInitial)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadSubjectInitial8,
                  GrammarData.$fReadSubjectInitial7
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.SubjectInitial>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.SubjectInitial>_R))))) -}
169a6ff198e8a1d23640120a6af7d71f
  $fReadSubjectInitial7 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.SubjectInitial -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.SubjectInitial
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.SubFinal) -}
e109e876b691de770aee5a40053ea15b
  $fReadSubjectInitial8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SubFinal"#) -}
169a6ff198e8a1d23640120a6af7d71f
  $fReadSubjectInitial9 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GrammarData.SubjectInitial)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadSubjectInitial11,
                  GrammarData.$fReadSubjectInitial10
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.SubjectInitial>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.SubjectInitial>_R))))) -}
169a6ff198e8a1d23640120a6af7d71f
  $fReadSubjectInitial_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [GrammarData.SubjectInitial]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadSubjectInitial1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarData.SubjectInitial]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarData.SubjectInitial]>_R))) -}
169a6ff198e8a1d23640120a6af7d71f
  $fReadSubjectInitial_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.SubjectInitial
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadSubjectInitial2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarData.SubjectInitial>_R)) -}
169a6ff198e8a1d23640120a6af7d71f
  $fReadSubjectInitial_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarData.SubjectInitial
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarData.SubjectInitial
                   GrammarData.$fReadSubjectInitial_$creadPrec
                   eta) -}
169a6ff198e8a1d23640120a6af7d71f
  $fReadSubjectInitial_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarData.SubjectInitial]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarData.SubjectInitial]
                   ((GrammarData.$fReadSubjectInitial_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarData.SubjectInitial]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarData.SubjectInitial]>_R)
                      @ [GrammarData.SubjectInitial]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarData.SubjectInitial]))) -}
b20cd44ec2d9abc53df9580ade6dee08
  $fReadTopicMarking :: GHC.Read.Read GrammarData.TopicMarking
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.TopicMarking
                  GrammarData.$fReadTopicMarking_$s$dmreadsPrec
                  GrammarData.$fReadTopicMarking_$sreadListDefault
                  GrammarData.$fReadTopicMarking_$creadPrec
                  GrammarData.$fReadTopicMarking_$creadListPrec -}
b20cd44ec2d9abc53df9580ade6dee08
  $fReadTopicMarking1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarData.TopicMarking] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarData.TopicMarking]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarData.TopicMarking
                   GrammarData.$fReadTopicMarking2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarData.TopicMarking>_R))
                   @ b
                   eta1) -}
b20cd44ec2d9abc53df9580ade6dee08
  $fReadTopicMarking10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.TopicMarking -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.TopicMarking
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.NoTopMark) -}
a14e92fdf12b45dc682641b089c45ee9
  $fReadTopicMarking11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NoTopMark"#) -}
b20cd44ec2d9abc53df9580ade6dee08
  $fReadTopicMarking2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarData.TopicMarking
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarData.TopicMarking
                   GrammarData.$fReadTopicMarking3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarData.TopicMarking>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarData.TopicMarking>_R)))) -}
b20cd44ec2d9abc53df9580ade6dee08
  $fReadTopicMarking3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.TopicMarking -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarData.TopicMarking
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarData.TopicMarking
                   GrammarData.$fReadTopicMarking4
                   eta
                   @ b
                   eta1) -}
b20cd44ec2d9abc53df9580ade6dee08
  $fReadTopicMarking4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.TopicMarking)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.TopicMarking)
                   GrammarData.$fReadTopicMarking9
                   GrammarData.$fReadTopicMarking5) -}
b20cd44ec2d9abc53df9580ade6dee08
  $fReadTopicMarking5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.TopicMarking)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.TopicMarking)
                   GrammarData.$fReadTopicMarking6
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           GrammarData.TopicMarking))) -}
b20cd44ec2d9abc53df9580ade6dee08
  $fReadTopicMarking6 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.TopicMarking)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadTopicMarking8,
                  GrammarData.$fReadTopicMarking7
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.TopicMarking>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.TopicMarking>_R))))) -}
b20cd44ec2d9abc53df9580ade6dee08
  $fReadTopicMarking7 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.TopicMarking -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.TopicMarking
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.OblTopMark) -}
62ab85cf232b90d3101395bb7d845c16
  $fReadTopicMarking8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OblTopMark"#) -}
b20cd44ec2d9abc53df9580ade6dee08
  $fReadTopicMarking9 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.TopicMarking)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadTopicMarking11,
                  GrammarData.$fReadTopicMarking10
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.TopicMarking>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.TopicMarking>_R))))) -}
b20cd44ec2d9abc53df9580ade6dee08
  $fReadTopicMarking_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [GrammarData.TopicMarking]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadTopicMarking1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarData.TopicMarking]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarData.TopicMarking]>_R))) -}
b20cd44ec2d9abc53df9580ade6dee08
  $fReadTopicMarking_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.TopicMarking
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadTopicMarking2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarData.TopicMarking>_R)) -}
b20cd44ec2d9abc53df9580ade6dee08
  $fReadTopicMarking_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarData.TopicMarking
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarData.TopicMarking
                   GrammarData.$fReadTopicMarking_$creadPrec
                   eta) -}
b20cd44ec2d9abc53df9580ade6dee08
  $fReadTopicMarking_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarData.TopicMarking]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarData.TopicMarking]
                   ((GrammarData.$fReadTopicMarking_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarData.TopicMarking]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarData.TopicMarking]>_R)
                      @ [GrammarData.TopicMarking]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarData.TopicMarking]))) -}
ee0bc87f2bf330c19fbe37b3de89b731
  $fReadVtoIMovement :: GHC.Read.Read GrammarData.VtoIMovement
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.VtoIMovement
                  GrammarData.$fReadVtoIMovement_$s$dmreadsPrec
                  GrammarData.$fReadVtoIMovement_$sreadListDefault
                  GrammarData.$fReadVtoIMovement_$creadPrec
                  GrammarData.$fReadVtoIMovement_$creadListPrec -}
ee0bc87f2bf330c19fbe37b3de89b731
  $fReadVtoIMovement1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarData.VtoIMovement] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarData.VtoIMovement]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarData.VtoIMovement
                   GrammarData.$fReadVtoIMovement2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarData.VtoIMovement>_R))
                   @ b
                   eta1) -}
ee0bc87f2bf330c19fbe37b3de89b731
  $fReadVtoIMovement10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.VtoIMovement -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.VtoIMovement
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.NoVtoIMove) -}
a8614d64a7e94ccb6119772e5886dfb8
  $fReadVtoIMovement11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NoVtoIMove"#) -}
ee0bc87f2bf330c19fbe37b3de89b731
  $fReadVtoIMovement2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarData.VtoIMovement
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarData.VtoIMovement
                   GrammarData.$fReadVtoIMovement3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarData.VtoIMovement>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarData.VtoIMovement>_R)))) -}
ee0bc87f2bf330c19fbe37b3de89b731
  $fReadVtoIMovement3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.VtoIMovement -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarData.VtoIMovement
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarData.VtoIMovement
                   GrammarData.$fReadVtoIMovement4
                   eta
                   @ b
                   eta1) -}
ee0bc87f2bf330c19fbe37b3de89b731
  $fReadVtoIMovement4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.VtoIMovement)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.VtoIMovement)
                   GrammarData.$fReadVtoIMovement9
                   GrammarData.$fReadVtoIMovement5) -}
ee0bc87f2bf330c19fbe37b3de89b731
  $fReadVtoIMovement5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.VtoIMovement)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.VtoIMovement)
                   GrammarData.$fReadVtoIMovement6
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           GrammarData.VtoIMovement))) -}
ee0bc87f2bf330c19fbe37b3de89b731
  $fReadVtoIMovement6 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.VtoIMovement)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadVtoIMovement8,
                  GrammarData.$fReadVtoIMovement7
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.VtoIMovement>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.VtoIMovement>_R))))) -}
ee0bc87f2bf330c19fbe37b3de89b731
  $fReadVtoIMovement7 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.VtoIMovement -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.VtoIMovement
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.OblVtoIMove) -}
57370c03737659261a4075b846dcbed8
  $fReadVtoIMovement8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OblVtoIMove"#) -}
ee0bc87f2bf330c19fbe37b3de89b731
  $fReadVtoIMovement9 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.VtoIMovement)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadVtoIMovement11,
                  GrammarData.$fReadVtoIMovement10
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.VtoIMovement>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.VtoIMovement>_R))))) -}
ee0bc87f2bf330c19fbe37b3de89b731
  $fReadVtoIMovement_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [GrammarData.VtoIMovement]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadVtoIMovement1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarData.VtoIMovement]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarData.VtoIMovement]>_R))) -}
ee0bc87f2bf330c19fbe37b3de89b731
  $fReadVtoIMovement_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.VtoIMovement
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadVtoIMovement2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarData.VtoIMovement>_R)) -}
ee0bc87f2bf330c19fbe37b3de89b731
  $fReadVtoIMovement_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarData.VtoIMovement
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarData.VtoIMovement
                   GrammarData.$fReadVtoIMovement_$creadPrec
                   eta) -}
ee0bc87f2bf330c19fbe37b3de89b731
  $fReadVtoIMovement_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarData.VtoIMovement]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarData.VtoIMovement]
                   ((GrammarData.$fReadVtoIMovement_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarData.VtoIMovement]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarData.VtoIMovement]>_R)
                      @ [GrammarData.VtoIMovement]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarData.VtoIMovement]))) -}
85e0e6313386cebdafa66f96c67aa72a
  $fReadWHMovementObligatory ::
    GHC.Read.Read GrammarData.WHMovementObligatory
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.WHMovementObligatory
                  GrammarData.$fReadWHMovementObligatory_$s$dmreadsPrec
                  GrammarData.$fReadWHMovementObligatory_$sreadListDefault
                  GrammarData.$fReadWHMovementObligatory_$creadPrec
                  GrammarData.$fReadWHMovementObligatory_$creadListPrec -}
85e0e6313386cebdafa66f96c67aa72a
  $fReadWHMovementObligatory1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarData.WHMovementObligatory]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarData.WHMovementObligatory]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarData.WHMovementObligatory
                   GrammarData.$fReadWHMovementObligatory2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarData.WHMovementObligatory>_R))
                   @ b
                   eta1) -}
85e0e6313386cebdafa66f96c67aa72a
  $fReadWHMovementObligatory10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.WHMovementObligatory
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.WHMovementObligatory
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.NoWHMove) -}
bc8a2fac9128eccab2c33a9889aaa4e0
  $fReadWHMovementObligatory11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NoWHMove"#) -}
85e0e6313386cebdafa66f96c67aa72a
  $fReadWHMovementObligatory2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP
         GrammarData.WHMovementObligatory
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarData.WHMovementObligatory
                   GrammarData.$fReadWHMovementObligatory3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarData.WHMovementObligatory>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarData.WHMovementObligatory>_R)))) -}
85e0e6313386cebdafa66f96c67aa72a
  $fReadWHMovementObligatory3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.WHMovementObligatory
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarData.WHMovementObligatory
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarData.WHMovementObligatory
                   GrammarData.$fReadWHMovementObligatory4
                   eta
                   @ b
                   eta1) -}
85e0e6313386cebdafa66f96c67aa72a
  $fReadWHMovementObligatory4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GrammarData.WHMovementObligatory)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GrammarData.WHMovementObligatory)
                   GrammarData.$fReadWHMovementObligatory9
                   GrammarData.$fReadWHMovementObligatory5) -}
85e0e6313386cebdafa66f96c67aa72a
  $fReadWHMovementObligatory5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GrammarData.WHMovementObligatory)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GrammarData.WHMovementObligatory)
                   GrammarData.$fReadWHMovementObligatory6
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           GrammarData.WHMovementObligatory))) -}
85e0e6313386cebdafa66f96c67aa72a
  $fReadWHMovementObligatory6 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GrammarData.WHMovementObligatory)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadWHMovementObligatory8,
                  GrammarData.$fReadWHMovementObligatory7
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.WHMovementObligatory>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.WHMovementObligatory>_R))))) -}
85e0e6313386cebdafa66f96c67aa72a
  $fReadWHMovementObligatory7 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.WHMovementObligatory
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.WHMovementObligatory
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.OblWHMove) -}
fc5b78fd56426e8a8293c6f9da661591
  $fReadWHMovementObligatory8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OblWHMove"#) -}
85e0e6313386cebdafa66f96c67aa72a
  $fReadWHMovementObligatory9 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GrammarData.WHMovementObligatory)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadWHMovementObligatory11,
                  GrammarData.$fReadWHMovementObligatory10
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.WHMovementObligatory>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.WHMovementObligatory>_R))))) -}
85e0e6313386cebdafa66f96c67aa72a
  $fReadWHMovementObligatory_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [GrammarData.WHMovementObligatory]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadWHMovementObligatory1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarData.WHMovementObligatory]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarData.WHMovementObligatory]>_R))) -}
85e0e6313386cebdafa66f96c67aa72a
  $fReadWHMovementObligatory_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      GrammarData.WHMovementObligatory
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadWHMovementObligatory2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarData.WHMovementObligatory>_R)) -}
85e0e6313386cebdafa66f96c67aa72a
  $fReadWHMovementObligatory_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS
         GrammarData.WHMovementObligatory
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarData.WHMovementObligatory
                   GrammarData.$fReadWHMovementObligatory_$creadPrec
                   eta) -}
85e0e6313386cebdafa66f96c67aa72a
  $fReadWHMovementObligatory_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS
      [GrammarData.WHMovementObligatory]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarData.WHMovementObligatory]
                   ((GrammarData.$fReadWHMovementObligatory_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarData.WHMovementObligatory]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarData.WHMovementObligatory]>_R)
                      @ [GrammarData.WHMovementObligatory]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarData.WHMovementObligatory]))) -}
64df7cc6c7fa11aa276601186742ba94
  $fShowAffixHopping :: GHC.Show.Show GrammarData.AffixHopping
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.AffixHopping
                  GrammarData.$fShowAffixHopping_$cshowsPrec
                  GrammarData.$fShowAffixHopping_$cshow
                  GrammarData.$fShowAffixHopping_$cshowList -}
64df7cc6c7fa11aa276601186742ba94
  $fShowAffixHopping1 :: GrammarData.AffixHopping -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarData.AffixHopping eta :: GHC.Base.String ->
                 case ds of wild {
                   GrammarData.NoAffixHop
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c2 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c2
                           n
                           GrammarData.$fReadAffixHopping11)
                        eta
                   GrammarData.OblAffixHop
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c2 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c2
                           n
                           GrammarData.$fReadAffixHopping8)
                        eta }) -}
64df7cc6c7fa11aa276601186742ba94
  $fShowAffixHopping_$cshow ::
    GrammarData.AffixHopping -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarData.AffixHopping ->
                 case x of wild {
                   GrammarData.NoAffixHop -> GrammarData.$fReadAffixHopping11
                   GrammarData.OblAffixHop -> GrammarData.$fReadAffixHopping8 }) -}
64df7cc6c7fa11aa276601186742ba94
  $fShowAffixHopping_$cshowList ::
    [GrammarData.AffixHopping] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarData.AffixHopping
                   GrammarData.$fShowAffixHopping1) -}
64df7cc6c7fa11aa276601186742ba94
  $fShowAffixHopping_$cshowsPrec ::
    GHC.Types.Int -> GrammarData.AffixHopping -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   ds1 :: GrammarData.AffixHopping
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   GrammarData.NoAffixHop
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c2 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c2
                           n
                           GrammarData.$fReadAffixHopping11)
                        eta
                   GrammarData.OblAffixHop
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c2 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c2
                           n
                           GrammarData.$fReadAffixHopping8)
                        eta }) -}
2b353fa9d69c4b806de27403b3b905b6
  $fShowBar :: GHC.Show.Show GrammarData.Bar
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.Bar
                  GrammarData.$fShowBar_$cshowsPrec
                  GrammarData.$fShowBar_$cshow
                  GrammarData.$fShowBar_$cshowList -}
2b353fa9d69c4b806de27403b3b905b6
  $fShowBar1 :: GrammarData.Bar -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: GrammarData.Bar ->
                 GrammarData.$w$cshowsPrec 0 w) -}
2b353fa9d69c4b806de27403b3b905b6
  $fShowBar_$cshow :: GrammarData.Bar -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarData.Bar ->
                 GrammarData.$fShowBar_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
2b353fa9d69c4b806de27403b3b905b6
  $fShowBar_$cshowList :: [GrammarData.Bar] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarData.Bar
                   GrammarData.$fShowBar1) -}
2b353fa9d69c4b806de27403b3b905b6
  $fShowBar_$cshowsPrec ::
    GHC.Types.Int -> GrammarData.Bar -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><S,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: GrammarData.Bar ->
                 case w of ww { GHC.Types.I# ww1 ->
                 GrammarData.$w$cshowsPrec ww1 w1 }) -}
bd101cefc51669d2e9cbe89bdbe27552
  $fShowComplementizerInitial ::
    GHC.Show.Show GrammarData.ComplementizerInitial
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.ComplementizerInitial
                  GrammarData.$fShowComplementizerInitial_$cshowsPrec
                  GrammarData.$fShowComplementizerInitial_$cshow
                  GrammarData.$fShowComplementizerInitial_$cshowList -}
bd101cefc51669d2e9cbe89bdbe27552
  $fShowComplementizerInitial1 ::
    GrammarData.ComplementizerInitial -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarData.ComplementizerInitial
                   eta :: GHC.Base.String ->
                 case ds of wild {
                   GrammarData.CompInitial
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c2 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c2
                           n
                           GrammarData.$fReadComplementizerInitial11)
                        eta
                   GrammarData.CompFinal
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c2 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c2
                           n
                           GrammarData.$fReadComplementizerInitial8)
                        eta }) -}
bd101cefc51669d2e9cbe89bdbe27552
  $fShowComplementizerInitial_$cshow ::
    GrammarData.ComplementizerInitial -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarData.ComplementizerInitial ->
                 case x of wild {
                   GrammarData.CompInitial
                   -> GrammarData.$fReadComplementizerInitial11
                   GrammarData.CompFinal
                   -> GrammarData.$fReadComplementizerInitial8 }) -}
bd101cefc51669d2e9cbe89bdbe27552
  $fShowComplementizerInitial_$cshowList ::
    [GrammarData.ComplementizerInitial] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarData.ComplementizerInitial
                   GrammarData.$fShowComplementizerInitial1) -}
bd101cefc51669d2e9cbe89bdbe27552
  $fShowComplementizerInitial_$cshowsPrec ::
    GHC.Types.Int
    -> GrammarData.ComplementizerInitial -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   ds1 :: GrammarData.ComplementizerInitial
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   GrammarData.CompInitial
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c2 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c2
                           n
                           GrammarData.$fReadComplementizerInitial11)
                        eta
                   GrammarData.CompFinal
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c2 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c2
                           n
                           GrammarData.$fReadComplementizerInitial8)
                        eta }) -}
a6eb7d97a517f02cf0be122f225433af
  $fShowGrammar :: GHC.Show.Show GrammarData.Grammar
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.Grammar
                  GrammarData.$fShowGrammar_$cshowsPrec
                  GrammarData.$fShowGrammar_$cshow
                  GrammarData.$fShowGrammar_$cshowList -}
a6eb7d97a517f02cf0be122f225433af
  $fShowGrammar1 :: GrammarData.Grammar -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: GrammarData.Grammar w1 :: GHC.Base.String ->
                 case w of ww { GrammarData.Grammar ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ->
                 GrammarData.$w$cshowsPrec1
                   0
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   w1 }) -}
a6eb7d97a517f02cf0be122f225433af
  $fShowGrammar_$cshow :: GrammarData.Grammar -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarData.Grammar ->
                 GrammarData.$fShowGrammar_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
a6eb7d97a517f02cf0be122f225433af
  $fShowGrammar_$cshowList :: [GrammarData.Grammar] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarData.Grammar
                   GrammarData.$fShowGrammar1) -}
a6eb7d97a517f02cf0be122f225433af
  $fShowGrammar_$cshowsPrec ::
    GHC.Types.Int -> GrammarData.Grammar -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <S,1*U(U)><S,1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int
                   w1 :: GrammarData.Grammar
                   w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { GrammarData.Grammar ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ->
                 GrammarData.$w$cshowsPrec1
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   w2 } }) -}
0b723dd66110bae4a164ef4cfb3bebd4
  $fShowIlloc :: GHC.Show.Show GrammarData.Illoc
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.Illoc
                  GrammarData.$fShowIlloc_$cshowsPrec
                  GrammarData.$fShowIlloc_$cshow
                  GrammarData.$fShowIlloc_$cshowList -}
5f2ace8a4da9557ec3f09b2841ae654d
  $fShowIlloc1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Imper"#) -}
b413e8a08636f11a98b4e906eb0bf3ee
  $fShowIlloc2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Decl"#) -}
b5d97922236ae0d42bb58779177f9152
  $fShowIlloc3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Ques"#) -}
c8c191a97a1d7bb4b4197fe788096d97
  $fShowIlloc4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Null"#) -}
0b723dd66110bae4a164ef4cfb3bebd4
  $fShowIlloc_$cshow :: GrammarData.Illoc -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarData.Illoc ->
                 GrammarData.$fShowIlloc_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
0b723dd66110bae4a164ef4cfb3bebd4
  $fShowIlloc_$cshowList :: [GrammarData.Illoc] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarData.Illoc
                   GrammarData.$w$cshowsPrec2) -}
0b723dd66110bae4a164ef4cfb3bebd4
  $fShowIlloc_$cshowsPrec ::
    GHC.Types.Int -> GrammarData.Illoc -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: GrammarData.Illoc
                   w2 :: GHC.Base.String ->
                 GrammarData.$w$cshowsPrec2 w1 w2) -}
f50dc15d9604ea3311686cfae7fe1d21
  $fShowItoCMovement :: GHC.Show.Show GrammarData.ItoCMovement
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.ItoCMovement
                  GrammarData.$fShowItoCMovement_$cshowsPrec
                  GrammarData.$fShowItoCMovement_$cshow
                  GrammarData.$fShowItoCMovement_$cshowList -}
f50dc15d9604ea3311686cfae7fe1d21
  $fShowItoCMovement1 :: GrammarData.ItoCMovement -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarData.ItoCMovement eta :: GHC.Base.String ->
                 case ds of wild {
                   GrammarData.NoItoCMove
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c2 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c2
                           n
                           GrammarData.$fReadItoCMovement11)
                        eta
                   GrammarData.OblItoCMove
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c2 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c2
                           n
                           GrammarData.$fReadItoCMovement8)
                        eta }) -}
f50dc15d9604ea3311686cfae7fe1d21
  $fShowItoCMovement_$cshow ::
    GrammarData.ItoCMovement -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarData.ItoCMovement ->
                 case x of wild {
                   GrammarData.NoItoCMove -> GrammarData.$fReadItoCMovement11
                   GrammarData.OblItoCMove -> GrammarData.$fReadItoCMovement8 }) -}
f50dc15d9604ea3311686cfae7fe1d21
  $fShowItoCMovement_$cshowList ::
    [GrammarData.ItoCMovement] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarData.ItoCMovement
                   GrammarData.$fShowItoCMovement1) -}
f50dc15d9604ea3311686cfae7fe1d21
  $fShowItoCMovement_$cshowsPrec ::
    GHC.Types.Int -> GrammarData.ItoCMovement -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   ds1 :: GrammarData.ItoCMovement
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   GrammarData.NoItoCMove
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c2 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c2
                           n
                           GrammarData.$fReadItoCMovement11)
                        eta
                   GrammarData.OblItoCMove
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c2 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c2
                           n
                           GrammarData.$fReadItoCMovement8)
                        eta }) -}
2ef30aa6b29e534627151abc07bccbb5
  $fShowLeaf :: GHC.Show.Show GrammarData.Leaf
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.Leaf
                  GrammarData.$fShowLeaf_$cshowsPrec
                  GrammarData.$fShowLeaf_$cshow
                  GrammarData.$fShowLeaf_$cshowList -}
2ef30aa6b29e534627151abc07bccbb5
  $fShowLeaf1 :: GrammarData.Leaf -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: GrammarData.Leaf w1 :: GHC.Base.String ->
                 GrammarData.$w$cshowsPrec3 0 w w1) -}
a6317cb2058a5c1b007ce60de029609b
  $fShowLeaf10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Adv"#) -}
cbd69b38a4a0856be26b3e86b0df90ca
  $fShowLeaf11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Adj"#) -}
f8a7cd9b5c465165bed0f76c2618f25b
  $fShowLeaf12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Adpo"#) -}
829b02f4cdad097cce73053a7a5d5d86
  $fShowLeaf13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Noun"#) -}
0d9781f2e595626639a0810bde928c97
  $fShowLeaf14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Det"#) -}
cb2cb77baa49ae9bd9b1bcc3322e6726
  $fShowLeaf15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Verb"#) -}
0e813305251ea5c9a6bc195a642fcfcc
  $fShowLeaf16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Infl"#) -}
1c5c59858b2a65941e3a6ef909d32505
  $fShowLeaf17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Comp"#) -}
4e001459fa72c7c9ccead37d611318b8
  $fShowLeaf18 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "leafLC = "#) -}
9732c8226c2bc5fb2396fc6d87c31db9
  $fShowLeaf19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "LeafNull "#) -}
be295af21bb5df80fd738790fa6b0883
  $fShowLeaf2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Leaf {"#) -}
31086f0cc177a1907fe569aabbfc54bd
  $fShowLeaf3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "LeafAffix"#) -}
5b1cdb314901de550713f1710bcbc77c
  $fShowLeaf4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "LeafWord"#) -}
08910a6bc64e7c0ea3bd858d6c14dbaa
  $fShowLeaf5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "}"#) -}
dd78fa95c65072c9c775dd1ea00536e1
  $fShowLeaf6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "leafStr = "#) -}
5c3a3a673ac80bcd41937bb663b9ad2a
  $fShowLeaf7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "leafT = "#) -}
0bea6130af8480766e02a03c3648f699
  $fShowLeaf8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "leafIl = "#) -}
6c3c8bdf02c2741c4303a60d1e502bdd
  $fShowLeaf9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ", "#) -}
19cdce3f97e68ed82a91b2a7c4c3ff7b
  $fShowLeafType :: GHC.Show.Show GrammarData.LeafType
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.LeafType
                  GrammarData.$fShowLeafType_$cshowsPrec
                  GrammarData.$fShowLeafType_$cshow
                  GrammarData.$fShowLeafType_$cshowList -}
19cdce3f97e68ed82a91b2a7c4c3ff7b
  $fShowLeafType1 :: GrammarData.LeafType -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarData.LeafType eta :: GHC.Base.String ->
                 case ds of wild {
                   GrammarData.LeafWord
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c2 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c2 n GrammarData.$fShowLeaf4)
                        eta
                   GrammarData.LeafAffix
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c2 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c2 n GrammarData.$fShowLeaf3)
                        eta }) -}
19cdce3f97e68ed82a91b2a7c4c3ff7b
  $fShowLeafType_$cshow :: GrammarData.LeafType -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarData.LeafType ->
                 case x of wild {
                   GrammarData.LeafWord -> GrammarData.$fShowLeaf4
                   GrammarData.LeafAffix -> GrammarData.$fShowLeaf3 }) -}
19cdce3f97e68ed82a91b2a7c4c3ff7b
  $fShowLeafType_$cshowList ::
    [GrammarData.LeafType] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarData.LeafType
                   GrammarData.$fShowLeafType1) -}
19cdce3f97e68ed82a91b2a7c4c3ff7b
  $fShowLeafType_$cshowsPrec ::
    GHC.Types.Int -> GrammarData.LeafType -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   ds1 :: GrammarData.LeafType
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   GrammarData.LeafWord
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c2 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c2 n GrammarData.$fShowLeaf4)
                        eta
                   GrammarData.LeafAffix
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c2 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c2 n GrammarData.$fShowLeaf3)
                        eta }) -}
2ef30aa6b29e534627151abc07bccbb5
  $fShowLeaf_$cshow :: GrammarData.Leaf -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarData.Leaf ->
                 GrammarData.$fShowLeaf_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
2ef30aa6b29e534627151abc07bccbb5
  $fShowLeaf_$cshowList :: [GrammarData.Leaf] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarData.Leaf
                   GrammarData.$fShowLeaf1) -}
2ef30aa6b29e534627151abc07bccbb5
  $fShowLeaf_$cshowsPrec ::
    GHC.Types.Int -> GrammarData.Leaf -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S,1*U><L,U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int
                   w1 :: GrammarData.Leaf
                   w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 GrammarData.$w$cshowsPrec3 ww1 w1 w2 }) -}
18ee0e7b552f6ff0d4e216ac9d914b33
  $fShowLexCat :: GHC.Show.Show GrammarData.LexCat
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.LexCat
                  GrammarData.$fShowLexCat_$cshowsPrec
                  GrammarData.$fShowLexCat_$cshow
                  GrammarData.$fShowLexCat_$cshowList -}
18ee0e7b552f6ff0d4e216ac9d914b33
  $fShowLexCat_$cshow :: GrammarData.LexCat -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarData.LexCat ->
                 GrammarData.$fShowLexCat_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
18ee0e7b552f6ff0d4e216ac9d914b33
  $fShowLexCat_$cshowList :: [GrammarData.LexCat] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarData.LexCat
                   GrammarData.$w$cshowsPrec4) -}
18ee0e7b552f6ff0d4e216ac9d914b33
  $fShowLexCat_$cshowsPrec ::
    GHC.Types.Int -> GrammarData.LexCat -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: GrammarData.LexCat
                   w2 :: GHC.Base.String ->
                 GrammarData.$w$cshowsPrec4 w1 w2) -}
bfc1e5db9e1ebde5ee1a2df0cd215115
  $fShowNullSubject :: GHC.Show.Show GrammarData.NullSubject
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.NullSubject
                  GrammarData.$fShowNullSubject_$cshowsPrec
                  GrammarData.$fShowNullSubject_$cshow
                  GrammarData.$fShowNullSubject_$cshowList -}
bfc1e5db9e1ebde5ee1a2df0cd215115
  $fShowNullSubject1 :: GrammarData.NullSubject -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarData.NullSubject eta :: GHC.Base.String ->
                 case ds of wild {
                   GrammarData.NoNullSub
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c2 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c2
                           n
                           GrammarData.$fReadNullSubject11)
                        eta
                   GrammarData.OptNullSub
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c2 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c2
                           n
                           GrammarData.$fReadNullSubject8)
                        eta }) -}
bfc1e5db9e1ebde5ee1a2df0cd215115
  $fShowNullSubject_$cshow ::
    GrammarData.NullSubject -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarData.NullSubject ->
                 case x of wild {
                   GrammarData.NoNullSub -> GrammarData.$fReadNullSubject11
                   GrammarData.OptNullSub -> GrammarData.$fReadNullSubject8 }) -}
bfc1e5db9e1ebde5ee1a2df0cd215115
  $fShowNullSubject_$cshowList ::
    [GrammarData.NullSubject] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarData.NullSubject
                   GrammarData.$fShowNullSubject1) -}
bfc1e5db9e1ebde5ee1a2df0cd215115
  $fShowNullSubject_$cshowsPrec ::
    GHC.Types.Int -> GrammarData.NullSubject -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   ds1 :: GrammarData.NullSubject
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   GrammarData.NoNullSub
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c2 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c2
                           n
                           GrammarData.$fReadNullSubject11)
                        eta
                   GrammarData.OptNullSub
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c2 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c2
                           n
                           GrammarData.$fReadNullSubject8)
                        eta }) -}
f1cc99e06e27728b550e5649fb89e933
  $fShowNullTopic :: GHC.Show.Show GrammarData.NullTopic
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.NullTopic
                  GrammarData.$fShowNullTopic_$cshowsPrec
                  GrammarData.$fShowNullTopic_$cshow
                  GrammarData.$fShowNullTopic_$cshowList -}
f1cc99e06e27728b550e5649fb89e933
  $fShowNullTopic1 :: GrammarData.NullTopic -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarData.NullTopic eta :: GHC.Base.String ->
                 case ds of wild {
                   GrammarData.NoNullTop
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c2 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c2
                           n
                           GrammarData.$fReadNullTopic11)
                        eta
                   GrammarData.OptNullTop
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c2 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c2
                           n
                           GrammarData.$fReadNullTopic8)
                        eta }) -}
f1cc99e06e27728b550e5649fb89e933
  $fShowNullTopic_$cshow :: GrammarData.NullTopic -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarData.NullTopic ->
                 case x of wild {
                   GrammarData.NoNullTop -> GrammarData.$fReadNullTopic11
                   GrammarData.OptNullTop -> GrammarData.$fReadNullTopic8 }) -}
f1cc99e06e27728b550e5649fb89e933
  $fShowNullTopic_$cshowList ::
    [GrammarData.NullTopic] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarData.NullTopic
                   GrammarData.$fShowNullTopic1) -}
f1cc99e06e27728b550e5649fb89e933
  $fShowNullTopic_$cshowsPrec ::
    GHC.Types.Int -> GrammarData.NullTopic -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   ds1 :: GrammarData.NullTopic
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   GrammarData.NoNullTop
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c2 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c2
                           n
                           GrammarData.$fReadNullTopic11)
                        eta
                   GrammarData.OptNullTop
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c2 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c2
                           n
                           GrammarData.$fReadNullTopic8)
                        eta }) -}
3990d98c3efc6fe781e2cd9838fc9785
  $fShowObjectFinal :: GHC.Show.Show GrammarData.ObjectFinal
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.ObjectFinal
                  GrammarData.$fShowObjectFinal_$cshowsPrec
                  GrammarData.$fShowObjectFinal_$cshow
                  GrammarData.$fShowObjectFinal_$cshowList -}
3990d98c3efc6fe781e2cd9838fc9785
  $fShowObjectFinal1 :: GrammarData.ObjectFinal -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarData.ObjectFinal eta :: GHC.Base.String ->
                 case ds of wild {
                   GrammarData.ObjFinal
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c2 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c2
                           n
                           GrammarData.$fReadObjectFinal11)
                        eta
                   GrammarData.ObjInitial
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c2 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c2
                           n
                           GrammarData.$fReadObjectFinal8)
                        eta }) -}
3990d98c3efc6fe781e2cd9838fc9785
  $fShowObjectFinal_$cshow ::
    GrammarData.ObjectFinal -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarData.ObjectFinal ->
                 case x of wild {
                   GrammarData.ObjFinal -> GrammarData.$fReadObjectFinal11
                   GrammarData.ObjInitial -> GrammarData.$fReadObjectFinal8 }) -}
3990d98c3efc6fe781e2cd9838fc9785
  $fShowObjectFinal_$cshowList ::
    [GrammarData.ObjectFinal] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarData.ObjectFinal
                   GrammarData.$fShowObjectFinal1) -}
3990d98c3efc6fe781e2cd9838fc9785
  $fShowObjectFinal_$cshowsPrec ::
    GHC.Types.Int -> GrammarData.ObjectFinal -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   ds1 :: GrammarData.ObjectFinal
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   GrammarData.ObjFinal
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c2 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c2
                           n
                           GrammarData.$fReadObjectFinal11)
                        eta
                   GrammarData.ObjInitial
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c2 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c2
                           n
                           GrammarData.$fReadObjectFinal8)
                        eta }) -}
2d6043879706e488d30d1b55f6de040c
  $fShowObligatoryTopic :: GHC.Show.Show GrammarData.ObligatoryTopic
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.ObligatoryTopic
                  GrammarData.$fShowObligatoryTopic_$cshowsPrec
                  GrammarData.$fShowObligatoryTopic_$cshow
                  GrammarData.$fShowObligatoryTopic_$cshowList -}
2d6043879706e488d30d1b55f6de040c
  $fShowObligatoryTopic1 ::
    GrammarData.ObligatoryTopic -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarData.ObligatoryTopic eta :: GHC.Base.String ->
                 case ds of wild {
                   GrammarData.OblTopic
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c2 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c2
                           n
                           GrammarData.$fReadObligatoryTopic11)
                        eta
                   GrammarData.OptTopic
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c2 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c2
                           n
                           GrammarData.$fReadObligatoryTopic8)
                        eta }) -}
2d6043879706e488d30d1b55f6de040c
  $fShowObligatoryTopic_$cshow ::
    GrammarData.ObligatoryTopic -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarData.ObligatoryTopic ->
                 case x of wild {
                   GrammarData.OblTopic -> GrammarData.$fReadObligatoryTopic11
                   GrammarData.OptTopic -> GrammarData.$fReadObligatoryTopic8 }) -}
2d6043879706e488d30d1b55f6de040c
  $fShowObligatoryTopic_$cshowList ::
    [GrammarData.ObligatoryTopic] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarData.ObligatoryTopic
                   GrammarData.$fShowObligatoryTopic1) -}
2d6043879706e488d30d1b55f6de040c
  $fShowObligatoryTopic_$cshowsPrec ::
    GHC.Types.Int -> GrammarData.ObligatoryTopic -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   ds1 :: GrammarData.ObligatoryTopic
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   GrammarData.OblTopic
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c2 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c2
                           n
                           GrammarData.$fReadObligatoryTopic11)
                        eta
                   GrammarData.OptTopic
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c2 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c2
                           n
                           GrammarData.$fReadObligatoryTopic8)
                        eta }) -}
2b353fa9d69c4b806de27403b3b905b6
  $fShowPhrase :: GHC.Show.Show GrammarData.Phrase
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.Phrase
                  GrammarData.$fShowPhrase_$cshowsPrec
                  GrammarData.$fShowPhrase_$cshow
                  GrammarData.$fShowPhrase_$cshowList -}
2b353fa9d69c4b806de27403b3b905b6
  $fShowPhrase1 :: GrammarData.Phrase -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GrammarData.$fShowPhrase_$cshowsPrec
                   GrammarData.$fShowPhrase2) -}
9c902e91da4fbff14d137c765fe242ab
  $fShowPhrase2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0) -}
2b353fa9d69c4b806de27403b3b905b6
  $fShowPhrase_$cshow :: GrammarData.Phrase -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarData.Phrase ->
                 GrammarData.$fShowPhrase_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
2b353fa9d69c4b806de27403b3b905b6
  $fShowPhrase_$cshowList :: [GrammarData.Phrase] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarData.Phrase
                   GrammarData.$fShowPhrase1) -}
2b353fa9d69c4b806de27403b3b905b6
  $fShowPhrase_$cshowsPrec ::
    GHC.Types.Int -> GrammarData.Phrase -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U(U)><S,1*U> -}
afa5566910055efae0db5c38d7168c87
  $fShowPiedPiping :: GHC.Show.Show GrammarData.PiedPiping
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.PiedPiping
                  GrammarData.$fShowPiedPiping_$cshowsPrec
                  GrammarData.$fShowPiedPiping_$cshow
                  GrammarData.$fShowPiedPiping_$cshowList -}
afa5566910055efae0db5c38d7168c87
  $fShowPiedPiping1 :: GrammarData.PiedPiping -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarData.PiedPiping eta :: GHC.Base.String ->
                 case ds of wild {
                   GrammarData.PiedPipe
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c2 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c2
                           n
                           GrammarData.$fReadPiedPiping11)
                        eta
                   GrammarData.PrepStrand
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c2 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c2
                           n
                           GrammarData.$fReadPiedPiping8)
                        eta }) -}
afa5566910055efae0db5c38d7168c87
  $fShowPiedPiping_$cshow ::
    GrammarData.PiedPiping -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarData.PiedPiping ->
                 case x of wild {
                   GrammarData.PiedPipe -> GrammarData.$fReadPiedPiping11
                   GrammarData.PrepStrand -> GrammarData.$fReadPiedPiping8 }) -}
afa5566910055efae0db5c38d7168c87
  $fShowPiedPiping_$cshowList ::
    [GrammarData.PiedPiping] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarData.PiedPiping
                   GrammarData.$fShowPiedPiping1) -}
afa5566910055efae0db5c38d7168c87
  $fShowPiedPiping_$cshowsPrec ::
    GHC.Types.Int -> GrammarData.PiedPiping -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   ds1 :: GrammarData.PiedPiping
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   GrammarData.PiedPipe
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c2 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c2
                           n
                           GrammarData.$fReadPiedPiping11)
                        eta
                   GrammarData.PrepStrand
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c2 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c2
                           n
                           GrammarData.$fReadPiedPiping8)
                        eta }) -}
51189b9950c56b3e0908d62c4348d762
  $fShowQuestionInversion ::
    GHC.Show.Show GrammarData.QuestionInversion
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.QuestionInversion
                  GrammarData.$fShowQuestionInversion_$cshowsPrec
                  GrammarData.$fShowQuestionInversion_$cshow
                  GrammarData.$fShowQuestionInversion_$cshowList -}
51189b9950c56b3e0908d62c4348d762
  $fShowQuestionInversion1 ::
    GrammarData.QuestionInversion -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarData.QuestionInversion eta :: GHC.Base.String ->
                 case ds of wild {
                   GrammarData.NoQuesInv
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c2 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c2
                           n
                           GrammarData.$fReadQuestionInversion11)
                        eta
                   GrammarData.OblQuesInv
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c2 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c2
                           n
                           GrammarData.$fReadQuestionInversion8)
                        eta }) -}
51189b9950c56b3e0908d62c4348d762
  $fShowQuestionInversion_$cshow ::
    GrammarData.QuestionInversion -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarData.QuestionInversion ->
                 case x of wild {
                   GrammarData.NoQuesInv -> GrammarData.$fReadQuestionInversion11
                   GrammarData.OblQuesInv
                   -> GrammarData.$fReadQuestionInversion8 }) -}
51189b9950c56b3e0908d62c4348d762
  $fShowQuestionInversion_$cshowList ::
    [GrammarData.QuestionInversion] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarData.QuestionInversion
                   GrammarData.$fShowQuestionInversion1) -}
51189b9950c56b3e0908d62c4348d762
  $fShowQuestionInversion_$cshowsPrec ::
    GHC.Types.Int -> GrammarData.QuestionInversion -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   ds1 :: GrammarData.QuestionInversion
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   GrammarData.NoQuesInv
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c2 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c2
                           n
                           GrammarData.$fReadQuestionInversion11)
                        eta
                   GrammarData.OblQuesInv
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c2 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c2
                           n
                           GrammarData.$fReadQuestionInversion8)
                        eta }) -}
169a6ff198e8a1d23640120a6af7d71f
  $fShowSubjectInitial :: GHC.Show.Show GrammarData.SubjectInitial
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.SubjectInitial
                  GrammarData.$fShowSubjectInitial_$cshowsPrec
                  GrammarData.$fShowSubjectInitial_$cshow
                  GrammarData.$fShowSubjectInitial_$cshowList -}
169a6ff198e8a1d23640120a6af7d71f
  $fShowSubjectInitial1 ::
    GrammarData.SubjectInitial -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarData.SubjectInitial eta :: GHC.Base.String ->
                 case ds of wild {
                   GrammarData.SubInitial
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c2 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c2
                           n
                           GrammarData.$fReadSubjectInitial11)
                        eta
                   GrammarData.SubFinal
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c2 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c2
                           n
                           GrammarData.$fReadSubjectInitial8)
                        eta }) -}
169a6ff198e8a1d23640120a6af7d71f
  $fShowSubjectInitial_$cshow ::
    GrammarData.SubjectInitial -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarData.SubjectInitial ->
                 case x of wild {
                   GrammarData.SubInitial -> GrammarData.$fReadSubjectInitial11
                   GrammarData.SubFinal -> GrammarData.$fReadSubjectInitial8 }) -}
169a6ff198e8a1d23640120a6af7d71f
  $fShowSubjectInitial_$cshowList ::
    [GrammarData.SubjectInitial] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarData.SubjectInitial
                   GrammarData.$fShowSubjectInitial1) -}
169a6ff198e8a1d23640120a6af7d71f
  $fShowSubjectInitial_$cshowsPrec ::
    GHC.Types.Int -> GrammarData.SubjectInitial -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   ds1 :: GrammarData.SubjectInitial
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   GrammarData.SubInitial
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c2 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c2
                           n
                           GrammarData.$fReadSubjectInitial11)
                        eta
                   GrammarData.SubFinal
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c2 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c2
                           n
                           GrammarData.$fReadSubjectInitial8)
                        eta }) -}
b20cd44ec2d9abc53df9580ade6dee08
  $fShowTopicMarking :: GHC.Show.Show GrammarData.TopicMarking
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.TopicMarking
                  GrammarData.$fShowTopicMarking_$cshowsPrec
                  GrammarData.$fShowTopicMarking_$cshow
                  GrammarData.$fShowTopicMarking_$cshowList -}
b20cd44ec2d9abc53df9580ade6dee08
  $fShowTopicMarking1 :: GrammarData.TopicMarking -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarData.TopicMarking eta :: GHC.Base.String ->
                 case ds of wild {
                   GrammarData.NoTopMark
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c2 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c2
                           n
                           GrammarData.$fReadTopicMarking11)
                        eta
                   GrammarData.OblTopMark
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c2 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c2
                           n
                           GrammarData.$fReadTopicMarking8)
                        eta }) -}
b20cd44ec2d9abc53df9580ade6dee08
  $fShowTopicMarking_$cshow ::
    GrammarData.TopicMarking -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarData.TopicMarking ->
                 case x of wild {
                   GrammarData.NoTopMark -> GrammarData.$fReadTopicMarking11
                   GrammarData.OblTopMark -> GrammarData.$fReadTopicMarking8 }) -}
b20cd44ec2d9abc53df9580ade6dee08
  $fShowTopicMarking_$cshowList ::
    [GrammarData.TopicMarking] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarData.TopicMarking
                   GrammarData.$fShowTopicMarking1) -}
b20cd44ec2d9abc53df9580ade6dee08
  $fShowTopicMarking_$cshowsPrec ::
    GHC.Types.Int -> GrammarData.TopicMarking -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   ds1 :: GrammarData.TopicMarking
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   GrammarData.NoTopMark
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c2 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c2
                           n
                           GrammarData.$fReadTopicMarking11)
                        eta
                   GrammarData.OblTopMark
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c2 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c2
                           n
                           GrammarData.$fReadTopicMarking8)
                        eta }) -}
ee0bc87f2bf330c19fbe37b3de89b731
  $fShowVtoIMovement :: GHC.Show.Show GrammarData.VtoIMovement
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.VtoIMovement
                  GrammarData.$fShowVtoIMovement_$cshowsPrec
                  GrammarData.$fShowVtoIMovement_$cshow
                  GrammarData.$fShowVtoIMovement_$cshowList -}
ee0bc87f2bf330c19fbe37b3de89b731
  $fShowVtoIMovement1 :: GrammarData.VtoIMovement -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarData.VtoIMovement eta :: GHC.Base.String ->
                 case ds of wild {
                   GrammarData.NoVtoIMove
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c2 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c2
                           n
                           GrammarData.$fReadVtoIMovement11)
                        eta
                   GrammarData.OblVtoIMove
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c2 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c2
                           n
                           GrammarData.$fReadVtoIMovement8)
                        eta }) -}
ee0bc87f2bf330c19fbe37b3de89b731
  $fShowVtoIMovement_$cshow ::
    GrammarData.VtoIMovement -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarData.VtoIMovement ->
                 case x of wild {
                   GrammarData.NoVtoIMove -> GrammarData.$fReadVtoIMovement11
                   GrammarData.OblVtoIMove -> GrammarData.$fReadVtoIMovement8 }) -}
ee0bc87f2bf330c19fbe37b3de89b731
  $fShowVtoIMovement_$cshowList ::
    [GrammarData.VtoIMovement] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarData.VtoIMovement
                   GrammarData.$fShowVtoIMovement1) -}
ee0bc87f2bf330c19fbe37b3de89b731
  $fShowVtoIMovement_$cshowsPrec ::
    GHC.Types.Int -> GrammarData.VtoIMovement -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   ds1 :: GrammarData.VtoIMovement
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   GrammarData.NoVtoIMove
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c2 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c2
                           n
                           GrammarData.$fReadVtoIMovement11)
                        eta
                   GrammarData.OblVtoIMove
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c2 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c2
                           n
                           GrammarData.$fReadVtoIMovement8)
                        eta }) -}
85e0e6313386cebdafa66f96c67aa72a
  $fShowWHMovementObligatory ::
    GHC.Show.Show GrammarData.WHMovementObligatory
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.WHMovementObligatory
                  GrammarData.$fShowWHMovementObligatory_$cshowsPrec
                  GrammarData.$fShowWHMovementObligatory_$cshow
                  GrammarData.$fShowWHMovementObligatory_$cshowList -}
85e0e6313386cebdafa66f96c67aa72a
  $fShowWHMovementObligatory1 ::
    GrammarData.WHMovementObligatory -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarData.WHMovementObligatory eta :: GHC.Base.String ->
                 case ds of wild {
                   GrammarData.NoWHMove
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c2 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c2
                           n
                           GrammarData.$fReadWHMovementObligatory11)
                        eta
                   GrammarData.OblWHMove
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c2 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c2
                           n
                           GrammarData.$fReadWHMovementObligatory8)
                        eta }) -}
85e0e6313386cebdafa66f96c67aa72a
  $fShowWHMovementObligatory_$cshow ::
    GrammarData.WHMovementObligatory -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarData.WHMovementObligatory ->
                 case x of wild {
                   GrammarData.NoWHMove -> GrammarData.$fReadWHMovementObligatory11
                   GrammarData.OblWHMove
                   -> GrammarData.$fReadWHMovementObligatory8 }) -}
85e0e6313386cebdafa66f96c67aa72a
  $fShowWHMovementObligatory_$cshowList ::
    [GrammarData.WHMovementObligatory] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarData.WHMovementObligatory
                   GrammarData.$fShowWHMovementObligatory1) -}
85e0e6313386cebdafa66f96c67aa72a
  $fShowWHMovementObligatory_$cshowsPrec ::
    GHC.Types.Int -> GrammarData.WHMovementObligatory -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   ds1 :: GrammarData.WHMovementObligatory
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   GrammarData.NoWHMove
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c2 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c2
                           n
                           GrammarData.$fReadWHMovementObligatory11)
                        eta
                   GrammarData.OblWHMove
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c2 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c2
                           n
                           GrammarData.$fReadWHMovementObligatory8)
                        eta }) -}
2b353fa9d69c4b806de27403b3b905b6
  $w$cshowsPrec :: GHC.Prim.Int# -> GrammarData.Bar -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0] -}
dc249f5733835f86a6ba328749c0cb7f
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> GrammarData.SubjectInitial
    -> GrammarData.ObjectFinal
    -> GrammarData.ComplementizerInitial
    -> GrammarData.VtoIMovement
    -> GrammarData.AffixHopping
    -> GrammarData.NullSubject
    -> GrammarData.ObligatoryTopic
    -> GrammarData.NullTopic
    -> GrammarData.TopicMarking
    -> GrammarData.ItoCMovement
    -> GrammarData.WHMovementObligatory
    -> GrammarData.PiedPiping
    -> GrammarData.QuestionInversion
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 15,
     Strictness: <L,U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,U>,
     Inline: [0] -}
0b723dd66110bae4a164ef4cfb3bebd4
  $w$cshowsPrec2 ::
    GrammarData.Illoc -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: GrammarData.Illoc w1 :: GHC.Base.String ->
                 case w of wild {
                   GrammarData.Null
                   -> GHC.Base.++ @ GHC.Types.Char GrammarData.$fShowIlloc4 w1
                   GrammarData.Ques
                   -> GHC.Base.++ @ GHC.Types.Char GrammarData.$fShowIlloc3 w1
                   GrammarData.Decl
                   -> GHC.Base.++ @ GHC.Types.Char GrammarData.$fShowIlloc2 w1
                   GrammarData.Imper
                   -> GHC.Base.++ @ GHC.Types.Char GrammarData.$fShowIlloc1 w1 }) -}
2ef30aa6b29e534627151abc07bccbb5
  $w$cshowsPrec3 ::
    GHC.Prim.Int#
    -> GrammarData.Leaf -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><S,1*U><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   w :: GrammarData.Leaf
                   w1 :: GHC.Base.String ->
                 case w of wild {
                   GrammarData.LeafNull b1
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11) of wild1 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             GrammarData.$fShowLeaf19
                             (GrammarData.$w$cshowsPrec2 b1 w1)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                GrammarData.$fShowLeaf19
                                (GrammarData.$w$cshowsPrec2
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w1))) }
                   GrammarData.Leaf b1 b2 b3 b4
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                          {- Arity: 1, Strictness: <L,1*U> -}
                        = \ x :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            GrammarData.$fShowLeaf18
                            (GrammarData.$w$cshowsPrec4
                               b1
                               (GHC.Base.++
                                  @ GHC.Types.Char
                                  GrammarData.$fShowLeaf9
                                  (GHC.Base.++
                                     @ GHC.Types.Char
                                     GrammarData.$fShowLeaf8
                                     (GrammarData.$w$cshowsPrec2
                                        b2
                                        (GHC.Base.++
                                           @ GHC.Types.Char
                                           GrammarData.$fShowLeaf9
                                           (GHC.Base.++
                                              @ GHC.Types.Char
                                              GrammarData.$fShowLeaf7
                                              (let {
                                                 eta :: GHC.Base.String
                                                 = GHC.Base.++
                                                     @ GHC.Types.Char
                                                     GrammarData.$fShowLeaf9
                                                     (GHC.Base.++
                                                        @ GHC.Types.Char
                                                        GrammarData.$fShowLeaf6
                                                        (GHC.Types.:
                                                           @ GHC.Types.Char
                                                           GHC.Show.shows6
                                                           (GHC.Show.showLitString
                                                              b4
                                                              (GHC.Types.:
                                                                 @ GHC.Types.Char
                                                                 GHC.Show.shows6
                                                                 (GHC.Base.++
                                                                    @ GHC.Types.Char
                                                                    GrammarData.$fShowLeaf5
                                                                    x)))))
                                               } in
                                               case b3 of wild1 {
                                                 GrammarData.LeafWord
                                                 -> GHC.Base.++
                                                      @ GHC.Types.Char
                                                      GrammarData.$fShowLeaf4
                                                      eta
                                                 GrammarData.LeafAffix
                                                 -> GHC.Base.++
                                                      @ GHC.Types.Char
                                                      GrammarData.$fShowLeaf3
                                                      eta })))))))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11) of wild1 {
                        GHC.Types.False
                        -> GHC.Base.++ @ GHC.Types.Char GrammarData.$fShowLeaf2 (g w1)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                GrammarData.$fShowLeaf2
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w1))) } }) -}
18ee0e7b552f6ff0d4e216ac9d914b33
  $w$cshowsPrec4 ::
    GrammarData.LexCat -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: GrammarData.LexCat w1 :: GHC.Base.String ->
                 case w of wild {
                   GrammarData.Comp
                   -> GHC.Base.++ @ GHC.Types.Char GrammarData.$fShowLeaf17 w1
                   GrammarData.Infl
                   -> GHC.Base.++ @ GHC.Types.Char GrammarData.$fShowLeaf16 w1
                   GrammarData.Verb
                   -> GHC.Base.++ @ GHC.Types.Char GrammarData.$fShowLeaf15 w1
                   GrammarData.Det
                   -> GHC.Base.++ @ GHC.Types.Char GrammarData.$fShowLeaf14 w1
                   GrammarData.Noun
                   -> GHC.Base.++ @ GHC.Types.Char GrammarData.$fShowLeaf13 w1
                   GrammarData.Adpo
                   -> GHC.Base.++ @ GHC.Types.Char GrammarData.$fShowLeaf12 w1
                   GrammarData.Adj
                   -> GHC.Base.++ @ GHC.Types.Char GrammarData.$fShowLeaf11 w1
                   GrammarData.Adv
                   -> GHC.Base.++ @ GHC.Types.Char GrammarData.$fShowLeaf10 w1 }) -}
64df7cc6c7fa11aa276601186742ba94
  $w$ctoEnum :: GHC.Prim.Int# -> GrammarData.AffixHopping
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 0) of wild {
                   GHC.Types.False -> GrammarData.$fEnumAffixHopping1 ww
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ww 1) of wild1 {
                        GHC.Types.False -> GrammarData.$fEnumAffixHopping1 ww
                        GHC.Types.True
                        -> GHC.Prim.tagToEnum# @ GrammarData.AffixHopping ww } }) -}
bd101cefc51669d2e9cbe89bdbe27552
  $w$ctoEnum1 :: GHC.Prim.Int# -> GrammarData.ComplementizerInitial
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 0) of wild {
                   GHC.Types.False -> GrammarData.$fEnumComplementizerInitial1 ww
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ww 1) of wild1 {
                        GHC.Types.False -> GrammarData.$fEnumComplementizerInitial1 ww
                        GHC.Types.True
                        -> GHC.Prim.tagToEnum#
                             @ GrammarData.ComplementizerInitial
                             ww } }) -}
afa5566910055efae0db5c38d7168c87
  $w$ctoEnum10 :: GHC.Prim.Int# -> GrammarData.PiedPiping
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 0) of wild {
                   GHC.Types.False -> GrammarData.$fEnumPiedPiping1 ww
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ww 1) of wild1 {
                        GHC.Types.False -> GrammarData.$fEnumPiedPiping1 ww
                        GHC.Types.True
                        -> GHC.Prim.tagToEnum# @ GrammarData.PiedPiping ww } }) -}
51189b9950c56b3e0908d62c4348d762
  $w$ctoEnum11 :: GHC.Prim.Int# -> GrammarData.QuestionInversion
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 0) of wild {
                   GHC.Types.False -> GrammarData.$fEnumQuestionInversion1 ww
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ww 1) of wild1 {
                        GHC.Types.False -> GrammarData.$fEnumQuestionInversion1 ww
                        GHC.Types.True
                        -> GHC.Prim.tagToEnum# @ GrammarData.QuestionInversion ww } }) -}
169a6ff198e8a1d23640120a6af7d71f
  $w$ctoEnum12 :: GHC.Prim.Int# -> GrammarData.SubjectInitial
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 0) of wild {
                   GHC.Types.False -> GrammarData.$fEnumSubjectInitial1 ww
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ww 1) of wild1 {
                        GHC.Types.False -> GrammarData.$fEnumSubjectInitial1 ww
                        GHC.Types.True
                        -> GHC.Prim.tagToEnum# @ GrammarData.SubjectInitial ww } }) -}
b20cd44ec2d9abc53df9580ade6dee08
  $w$ctoEnum13 :: GHC.Prim.Int# -> GrammarData.TopicMarking
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 0) of wild {
                   GHC.Types.False -> GrammarData.$fEnumTopicMarking1 ww
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ww 1) of wild1 {
                        GHC.Types.False -> GrammarData.$fEnumTopicMarking1 ww
                        GHC.Types.True
                        -> GHC.Prim.tagToEnum# @ GrammarData.TopicMarking ww } }) -}
ee0bc87f2bf330c19fbe37b3de89b731
  $w$ctoEnum14 :: GHC.Prim.Int# -> GrammarData.VtoIMovement
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 0) of wild {
                   GHC.Types.False -> GrammarData.$fEnumVtoIMovement1 ww
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ww 1) of wild1 {
                        GHC.Types.False -> GrammarData.$fEnumVtoIMovement1 ww
                        GHC.Types.True
                        -> GHC.Prim.tagToEnum# @ GrammarData.VtoIMovement ww } }) -}
85e0e6313386cebdafa66f96c67aa72a
  $w$ctoEnum15 :: GHC.Prim.Int# -> GrammarData.WHMovementObligatory
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 0) of wild {
                   GHC.Types.False -> GrammarData.$fEnumWHMovementObligatory1 ww
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ww 1) of wild1 {
                        GHC.Types.False -> GrammarData.$fEnumWHMovementObligatory1 ww
                        GHC.Types.True
                        -> GHC.Prim.tagToEnum#
                             @ GrammarData.WHMovementObligatory
                             ww } }) -}
0b723dd66110bae4a164ef4cfb3bebd4
  $w$ctoEnum2 :: GHC.Prim.Int# -> GrammarData.Illoc
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 0) of wild {
                   GHC.Types.False -> GrammarData.$fEnumIlloc5 ww
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ww 3) of wild1 {
                        GHC.Types.False -> GrammarData.$fEnumIlloc5 ww
                        GHC.Types.True
                        -> GHC.Prim.tagToEnum# @ GrammarData.Illoc ww } }) -}
f50dc15d9604ea3311686cfae7fe1d21
  $w$ctoEnum3 :: GHC.Prim.Int# -> GrammarData.ItoCMovement
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 0) of wild {
                   GHC.Types.False -> GrammarData.$fEnumItoCMovement1 ww
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ww 1) of wild1 {
                        GHC.Types.False -> GrammarData.$fEnumItoCMovement1 ww
                        GHC.Types.True
                        -> GHC.Prim.tagToEnum# @ GrammarData.ItoCMovement ww } }) -}
19cdce3f97e68ed82a91b2a7c4c3ff7b
  $w$ctoEnum4 :: GHC.Prim.Int# -> GrammarData.LeafType
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 0) of wild {
                   GHC.Types.False -> GrammarData.$fEnumLeafType1 ww
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ww 1) of wild1 {
                        GHC.Types.False -> GrammarData.$fEnumLeafType1 ww
                        GHC.Types.True
                        -> GHC.Prim.tagToEnum# @ GrammarData.LeafType ww } }) -}
18ee0e7b552f6ff0d4e216ac9d914b33
  $w$ctoEnum5 :: GHC.Prim.Int# -> GrammarData.LexCat
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 0) of wild {
                   GHC.Types.False -> GrammarData.$fEnumLexCat9 ww
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ww 7) of wild1 {
                        GHC.Types.False -> GrammarData.$fEnumLexCat9 ww
                        GHC.Types.True
                        -> GHC.Prim.tagToEnum# @ GrammarData.LexCat ww } }) -}
bfc1e5db9e1ebde5ee1a2df0cd215115
  $w$ctoEnum6 :: GHC.Prim.Int# -> GrammarData.NullSubject
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 0) of wild {
                   GHC.Types.False -> GrammarData.$fEnumNullSubject1 ww
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ww 1) of wild1 {
                        GHC.Types.False -> GrammarData.$fEnumNullSubject1 ww
                        GHC.Types.True
                        -> GHC.Prim.tagToEnum# @ GrammarData.NullSubject ww } }) -}
f1cc99e06e27728b550e5649fb89e933
  $w$ctoEnum7 :: GHC.Prim.Int# -> GrammarData.NullTopic
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 0) of wild {
                   GHC.Types.False -> GrammarData.$fEnumNullTopic1 ww
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ww 1) of wild1 {
                        GHC.Types.False -> GrammarData.$fEnumNullTopic1 ww
                        GHC.Types.True
                        -> GHC.Prim.tagToEnum# @ GrammarData.NullTopic ww } }) -}
3990d98c3efc6fe781e2cd9838fc9785
  $w$ctoEnum8 :: GHC.Prim.Int# -> GrammarData.ObjectFinal
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 0) of wild {
                   GHC.Types.False -> GrammarData.$fEnumObjectFinal1 ww
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ww 1) of wild1 {
                        GHC.Types.False -> GrammarData.$fEnumObjectFinal1 ww
                        GHC.Types.True
                        -> GHC.Prim.tagToEnum# @ GrammarData.ObjectFinal ww } }) -}
2d6043879706e488d30d1b55f6de040c
  $w$ctoEnum9 :: GHC.Prim.Int# -> GrammarData.ObligatoryTopic
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 0) of wild {
                   GHC.Types.False -> GrammarData.$fEnumObligatoryTopic1 ww
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ww 1) of wild1 {
                        GHC.Types.False -> GrammarData.$fEnumObligatoryTopic1 ww
                        GHC.Types.True
                        -> GHC.Prim.tagToEnum# @ GrammarData.ObligatoryTopic ww } }) -}
64df7cc6c7fa11aa276601186742ba94
  data AffixHopping = NoAffixHop | OblAffixHop
    Promotable
2b353fa9d69c4b806de27403b3b905b6
  data Bar
    = XBarA {barLC :: GrammarData.LexCat,
             barIl :: GrammarData.Illoc,
             adjunct :: GrammarData.Phrase,
             barBar :: GrammarData.Bar}
    | XBarC {barLC :: GrammarData.LexCat,
             barIl :: GrammarData.Illoc,
             leaf :: GrammarData.Leaf,
             compliment :: GrammarData.Phrase}
bd101cefc51669d2e9cbe89bdbe27552
  data ComplementizerInitial = CompInitial | CompFinal
    Promotable
a6eb7d97a517f02cf0be122f225433af
  data Grammar
    = Grammar {getSI :: GrammarData.SubjectInitial,
               getOF :: GrammarData.ObjectFinal,
               getCI :: GrammarData.ComplementizerInitial,
               getVtoI :: GrammarData.VtoIMovement,
               getAH :: GrammarData.AffixHopping,
               getNS :: GrammarData.NullSubject,
               getObT :: GrammarData.ObligatoryTopic,
               getNT :: GrammarData.NullTopic,
               getTM :: GrammarData.TopicMarking,
               getItoC :: GrammarData.ItoCMovement,
               getWHM :: GrammarData.WHMovementObligatory,
               getPP :: GrammarData.PiedPiping,
               getQI :: GrammarData.QuestionInversion}
    Promotable
0b723dd66110bae4a164ef4cfb3bebd4
  data Illoc = Null | Ques | Decl | Imper
    Promotable
f50dc15d9604ea3311686cfae7fe1d21
  data ItoCMovement = NoItoCMove | OblItoCMove
    Promotable
2ef30aa6b29e534627151abc07bccbb5
  data Leaf
    = LeafNull GrammarData.Illoc
    | Leaf {leafLC :: GrammarData.LexCat,
            leafIl :: GrammarData.Illoc,
            leafT :: GrammarData.LeafType,
            leafStr :: GHC.Base.String}
19cdce3f97e68ed82a91b2a7c4c3ff7b
  data LeafType = LeafWord | LeafAffix
    Promotable
18ee0e7b552f6ff0d4e216ac9d914b33
  data LexCat = Comp | Infl | Verb | Det | Noun | Adpo | Adj | Adv
    Promotable
bfc1e5db9e1ebde5ee1a2df0cd215115
  data NullSubject = NoNullSub | OptNullSub
    Promotable
f1cc99e06e27728b550e5649fb89e933
  data NullTopic = NoNullTop | OptNullTop
    Promotable
3990d98c3efc6fe781e2cd9838fc9785
  data ObjectFinal = ObjFinal | ObjInitial
    Promotable
2d6043879706e488d30d1b55f6de040c
  data ObligatoryTopic = OblTopic | OptTopic
    Promotable
2b353fa9d69c4b806de27403b3b905b6
  data Phrase
    = XPNull
    | XP {phraseLC :: GrammarData.LexCat,
          phraseIl :: GrammarData.Illoc,
          specifier :: GrammarData.Phrase,
          phraseBar :: GrammarData.Bar}
afa5566910055efae0db5c38d7168c87
  data PiedPiping = PiedPipe | PrepStrand
    Promotable
51189b9950c56b3e0908d62c4348d762
  data QuestionInversion = NoQuesInv | OblQuesInv
    Promotable
169a6ff198e8a1d23640120a6af7d71f
  data SubjectInitial = SubInitial | SubFinal
    Promotable
b20cd44ec2d9abc53df9580ade6dee08
  data TopicMarking = NoTopMark | OblTopMark
    Promotable
ee0bc87f2bf330c19fbe37b3de89b731
  data VtoIMovement = NoVtoIMove | OblVtoIMove
    Promotable
85e0e6313386cebdafa66f96c67aa72a
  data WHMovementObligatory = NoWHMove | OblWHMove
    Promotable
891a7dd02d848f7c318d34d42bcc6af0
  adjunct :: GrammarData.Bar -> GrammarData.Phrase
  RecSel GrammarData.Bar
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarData.Bar ->
                 case ds of wild {
                   GrammarData.XBarA ds1 ds2 ds3 ds4 -> ds3
                   GrammarData.XBarC ipv ipv1 ipv2 ipv3 -> GrammarData.adjunct1 }) -}
07646737a9957464877f56511669c90d
  adjunct1 :: GrammarData.Phrase
  {- Strictness: b -}
7a2bb8c7141c026479ed69c9c7123da1
  barBar :: GrammarData.Bar -> GrammarData.Bar
  RecSel GrammarData.Bar
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarData.Bar ->
                 case ds of wild {
                   GrammarData.XBarA ds1 ds2 ds3 ds4 -> ds4
                   GrammarData.XBarC ipv ipv1 ipv2 ipv3 -> GrammarData.barBar1 }) -}
b850f4eafb8b1b2fc8147e2f26821f86
  barBar1 :: GrammarData.Bar
  {- Strictness: b -}
18cb0ba44bb1ce770a2f93a329a90b64
  barIl :: GrammarData.Bar -> GrammarData.Illoc
  RecSel GrammarData.Bar
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarData.Bar ->
                 case ds of wild {
                   GrammarData.XBarA ds1 ds2 ds3 ds4 -> ds2
                   GrammarData.XBarC ds1 ds2 ds3 ds4 -> ds2 }) -}
afdfa55521cb8d20a87a310ed62c00f9
  barLC :: GrammarData.Bar -> GrammarData.LexCat
  RecSel GrammarData.Bar
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarData.Bar ->
                 case ds of wild {
                   GrammarData.XBarA ds1 ds2 ds3 ds4 -> ds1
                   GrammarData.XBarC ds1 ds2 ds3 ds4 -> ds1 }) -}
9ee5c7bbbaaa0b308c3eb82feb461b09
  compliment :: GrammarData.Bar -> GrammarData.Phrase
  RecSel GrammarData.Bar
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarData.Bar ->
                 case ds of wild {
                   GrammarData.XBarA ipv ipv1 ipv2 ipv3 -> GrammarData.compliment1
                   GrammarData.XBarC ds1 ds2 ds3 ds4 -> ds4 }) -}
07a9707abe694b281a416fdb86e78848
  compliment1 :: GrammarData.Phrase
  {- Strictness: b -}
9753dfdbbca2d12f545ab2cea3bb579f
  getAH :: GrammarData.Grammar -> GrammarData.AffixHopping
  RecSel GrammarData.Grammar
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSLLLLLLLL),1*U(A,A,A,A,1*U,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarData.Grammar ->
                 case ds of wild { GrammarData.Grammar ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ->
                 ds5 }) -}
ff021f96db0caa8effad2d5dfe40c571
  getCI :: GrammarData.Grammar -> GrammarData.ComplementizerInitial
  RecSel GrammarData.Grammar
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLLLLLLLLL),1*U(A,A,1*U,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarData.Grammar ->
                 case ds of wild { GrammarData.Grammar ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ->
                 ds3 }) -}
759d3910d21eb7c165a4e776881945f5
  getItoC :: GrammarData.Grammar -> GrammarData.ItoCMovement
  RecSel GrammarData.Grammar
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLSLLL),1*U(A,A,A,A,A,A,A,A,A,1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarData.Grammar ->
                 case ds of wild { GrammarData.Grammar ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ->
                 ds10 }) -}
f2396774601109895b79e1023057f2cf
  getNS :: GrammarData.Grammar -> GrammarData.NullSubject
  RecSel GrammarData.Grammar
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLSLLLLLLL),1*U(A,A,A,A,A,1*U,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarData.Grammar ->
                 case ds of wild { GrammarData.Grammar ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ->
                 ds6 }) -}
ff1cc794012943889c9881d8ce65c2ca
  getNT :: GrammarData.Grammar -> GrammarData.NullTopic
  RecSel GrammarData.Grammar
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLSLLLLL),1*U(A,A,A,A,A,A,A,1*U,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarData.Grammar ->
                 case ds of wild { GrammarData.Grammar ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ->
                 ds8 }) -}
8debed396b09068d8be0e18e28bb5475
  getOF :: GrammarData.Grammar -> GrammarData.ObjectFinal
  RecSel GrammarData.Grammar
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLLLLLLLLL),1*U(A,1*U,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarData.Grammar ->
                 case ds of wild { GrammarData.Grammar ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ->
                 ds2 }) -}
2084515e5acff604307193a5f31a77c2
  getObT :: GrammarData.Grammar -> GrammarData.ObligatoryTopic
  RecSel GrammarData.Grammar
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLSLLLLLL),1*U(A,A,A,A,A,A,1*U,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarData.Grammar ->
                 case ds of wild { GrammarData.Grammar ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ->
                 ds7 }) -}
a79f096cbeb5327b732103a4b54c1899
  getPP :: GrammarData.Grammar -> GrammarData.PiedPiping
  RecSel GrammarData.Grammar
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLSL),1*U(A,A,A,A,A,A,A,A,A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarData.Grammar ->
                 case ds of wild { GrammarData.Grammar ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ->
                 ds12 }) -}
88779aeb021eb3625e814f781eed29bc
  getQI :: GrammarData.Grammar -> GrammarData.QuestionInversion
  RecSel GrammarData.Grammar
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLS),1*U(A,A,A,A,A,A,A,A,A,A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarData.Grammar ->
                 case ds of wild { GrammarData.Grammar ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ->
                 ds13 }) -}
2063e83cbb2593942482a0ea77c700fc
  getSI :: GrammarData.Grammar -> GrammarData.SubjectInitial
  RecSel GrammarData.Grammar
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLLLLLLLLL),1*U(1*U,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarData.Grammar ->
                 case ds of wild { GrammarData.Grammar ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ->
                 ds1 }) -}
8ea6f03a9d864e883a265f9761cb3389
  getTM :: GrammarData.Grammar -> GrammarData.TopicMarking
  RecSel GrammarData.Grammar
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLSLLLL),1*U(A,A,A,A,A,A,A,A,1*U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarData.Grammar ->
                 case ds of wild { GrammarData.Grammar ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ->
                 ds9 }) -}
9f37009f589e611e863d77ed2df4417b
  getVtoI :: GrammarData.Grammar -> GrammarData.VtoIMovement
  RecSel GrammarData.Grammar
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLLLLLLLLL),1*U(A,A,A,1*U,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarData.Grammar ->
                 case ds of wild { GrammarData.Grammar ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ->
                 ds4 }) -}
67748aefb2473f6fed4d8824719ed382
  getWHM :: GrammarData.Grammar -> GrammarData.WHMovementObligatory
  RecSel GrammarData.Grammar
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLSLL),1*U(A,A,A,A,A,A,A,A,A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarData.Grammar ->
                 case ds of wild { GrammarData.Grammar ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ->
                 ds11 }) -}
c61b5ee4d422f1bcfdb511ca48d37c58
  leaf :: GrammarData.Bar -> GrammarData.Leaf
  RecSel GrammarData.Bar
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarData.Bar ->
                 case ds of wild {
                   GrammarData.XBarA ipv ipv1 ipv2 ipv3 -> GrammarData.leaf1
                   GrammarData.XBarC ds1 ds2 ds3 ds4 -> ds3 }) -}
f2b0efef4ae46800fa7764f054cecba7
  leaf1 :: GrammarData.Leaf
  {- Strictness: b -}
0421fa80256eeeaa19516f3c03c3132d
  leafIl :: GrammarData.Leaf -> GrammarData.Illoc
  RecSel GrammarData.Leaf
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarData.Leaf ->
                 case ds of wild {
                   GrammarData.LeafNull ipv -> GrammarData.leafIl1
                   GrammarData.Leaf ds1 ds2 ds3 ds4 -> ds2 }) -}
42b03a9e64744b9a50f40c6b9276765b
  leafIl1 :: GrammarData.Illoc
  {- Strictness: b -}
73e9cfa428864c60cb270e0945c72774
  leafLC :: GrammarData.Leaf -> GrammarData.LexCat
  RecSel GrammarData.Leaf
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarData.Leaf ->
                 case ds of wild {
                   GrammarData.LeafNull ipv -> GrammarData.leafLC1
                   GrammarData.Leaf ds1 ds2 ds3 ds4 -> ds1 }) -}
3f821ee51e3eb8b4d48e8a673a1541b9
  leafLC1 :: GrammarData.LexCat
  {- Strictness: b -}
ccf140b139913b7f09221d055bfb6f9f
  leafStr :: GrammarData.Leaf -> GHC.Base.String
  RecSel GrammarData.Leaf
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarData.Leaf ->
                 case ds of wild {
                   GrammarData.LeafNull ipv -> GrammarData.leafStr1
                   GrammarData.Leaf ds1 ds2 ds3 ds4 -> ds4 }) -}
c7d4170496eccc39a945c1a014ea1c24
  leafStr1 :: GHC.Base.String
  {- Strictness: b -}
2a771e60d9ac90b7f04f8ea238518f55
  leafT :: GrammarData.Leaf -> GrammarData.LeafType
  RecSel GrammarData.Leaf
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarData.Leaf ->
                 case ds of wild {
                   GrammarData.LeafNull ipv -> GrammarData.leafT1
                   GrammarData.Leaf ds1 ds2 ds3 ds4 -> ds3 }) -}
473b3444669bbe5e39f0b5f033b362de
  leafT1 :: GrammarData.LeafType
  {- Strictness: b -}
b83e935082a2db4bd160823e0ca5cbd2
  phraseBar :: GrammarData.Phrase -> GrammarData.Bar
  RecSel GrammarData.Phrase
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarData.Phrase ->
                 case ds of wild {
                   GrammarData.XPNull -> GrammarData.phraseBar1
                   GrammarData.XP ds1 ds2 ds3 ds4 -> ds4 }) -}
0a150436b620d65f22ec1a9c7bc7b2b0
  phraseBar1 :: GrammarData.Bar
  {- Strictness: b -}
2c43be2c443adb21d36631683d9e3e61
  phraseIl :: GrammarData.Phrase -> GrammarData.Illoc
  RecSel GrammarData.Phrase
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarData.Phrase ->
                 case ds of wild {
                   GrammarData.XPNull -> GrammarData.phraseIl1
                   GrammarData.XP ds1 ds2 ds3 ds4 -> ds2 }) -}
67986ad9d5b2a710a806f7641aa8611d
  phraseIl1 :: GrammarData.Illoc
  {- Strictness: b -}
be74283e4695633f957545d36d793853
  phraseLC :: GrammarData.Phrase -> GrammarData.LexCat
  RecSel GrammarData.Phrase
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarData.Phrase ->
                 case ds of wild {
                   GrammarData.XPNull -> GrammarData.phraseLC1
                   GrammarData.XP ds1 ds2 ds3 ds4 -> ds1 }) -}
9383039ee8b0dcdc8b56532f042f0641
  phraseLC1 :: GrammarData.LexCat
  {- Strictness: b -}
eccbdc7df52069ad5c01524f6c1470a8
  specifier :: GrammarData.Phrase -> GrammarData.Phrase
  RecSel GrammarData.Phrase
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarData.Phrase ->
                 case ds of wild {
                   GrammarData.XPNull -> GrammarData.specifier1
                   GrammarData.XP ds1 ds2 ds3 ds4 -> ds3 }) -}
ea5fb55360300bbff5df2b9d2accb791
  specifier1 :: GrammarData.Phrase
  {- Strictness: b -}
instance GHC.Enum.Enum [GrammarData.AffixHopping]
  = GrammarData.$fEnumAffixHopping
instance GHC.Enum.Enum [GrammarData.ComplementizerInitial]
  = GrammarData.$fEnumComplementizerInitial
instance GHC.Enum.Enum [GrammarData.Illoc]
  = GrammarData.$fEnumIlloc
instance GHC.Enum.Enum [GrammarData.ItoCMovement]
  = GrammarData.$fEnumItoCMovement
instance GHC.Enum.Enum [GrammarData.LeafType]
  = GrammarData.$fEnumLeafType
instance GHC.Enum.Enum [GrammarData.LexCat]
  = GrammarData.$fEnumLexCat
instance GHC.Enum.Enum [GrammarData.NullSubject]
  = GrammarData.$fEnumNullSubject
instance GHC.Enum.Enum [GrammarData.NullTopic]
  = GrammarData.$fEnumNullTopic
instance GHC.Enum.Enum [GrammarData.ObjectFinal]
  = GrammarData.$fEnumObjectFinal
instance GHC.Enum.Enum [GrammarData.ObligatoryTopic]
  = GrammarData.$fEnumObligatoryTopic
instance GHC.Enum.Enum [GrammarData.PiedPiping]
  = GrammarData.$fEnumPiedPiping
instance GHC.Enum.Enum [GrammarData.QuestionInversion]
  = GrammarData.$fEnumQuestionInversion
instance GHC.Enum.Enum [GrammarData.SubjectInitial]
  = GrammarData.$fEnumSubjectInitial
instance GHC.Enum.Enum [GrammarData.TopicMarking]
  = GrammarData.$fEnumTopicMarking
instance GHC.Enum.Enum [GrammarData.VtoIMovement]
  = GrammarData.$fEnumVtoIMovement
instance GHC.Enum.Enum [GrammarData.WHMovementObligatory]
  = GrammarData.$fEnumWHMovementObligatory
instance GHC.Classes.Eq [GrammarData.AffixHopping]
  = GrammarData.$fEqAffixHopping
instance GHC.Classes.Eq [GrammarData.Bar] = GrammarData.$fEqBar
instance GHC.Classes.Eq [GrammarData.ComplementizerInitial]
  = GrammarData.$fEqComplementizerInitial
instance GHC.Classes.Eq [GrammarData.Illoc] = GrammarData.$fEqIlloc
instance GHC.Classes.Eq [GrammarData.ItoCMovement]
  = GrammarData.$fEqItoCMovement
instance GHC.Classes.Eq [GrammarData.Leaf] = GrammarData.$fEqLeaf
instance GHC.Classes.Eq [GrammarData.LeafType]
  = GrammarData.$fEqLeafType
instance GHC.Classes.Eq [GrammarData.LexCat]
  = GrammarData.$fEqLexCat
instance GHC.Classes.Eq [GrammarData.NullSubject]
  = GrammarData.$fEqNullSubject
instance GHC.Classes.Eq [GrammarData.NullTopic]
  = GrammarData.$fEqNullTopic
instance GHC.Classes.Eq [GrammarData.ObjectFinal]
  = GrammarData.$fEqObjectFinal
instance GHC.Classes.Eq [GrammarData.ObligatoryTopic]
  = GrammarData.$fEqObligatoryTopic
instance GHC.Classes.Eq [GrammarData.Phrase]
  = GrammarData.$fEqPhrase
instance GHC.Classes.Eq [GrammarData.PiedPiping]
  = GrammarData.$fEqPiedPiping
instance GHC.Classes.Eq [GrammarData.QuestionInversion]
  = GrammarData.$fEqQuestionInversion
instance GHC.Classes.Eq [GrammarData.SubjectInitial]
  = GrammarData.$fEqSubjectInitial
instance GHC.Classes.Eq [GrammarData.TopicMarking]
  = GrammarData.$fEqTopicMarking
instance GHC.Classes.Eq [GrammarData.VtoIMovement]
  = GrammarData.$fEqVtoIMovement
instance GHC.Classes.Eq [GrammarData.WHMovementObligatory]
  = GrammarData.$fEqWHMovementObligatory
instance GHC.Read.Read [GrammarData.AffixHopping]
  = GrammarData.$fReadAffixHopping
instance GHC.Read.Read [GrammarData.ComplementizerInitial]
  = GrammarData.$fReadComplementizerInitial
instance GHC.Read.Read [GrammarData.ItoCMovement]
  = GrammarData.$fReadItoCMovement
instance GHC.Read.Read [GrammarData.NullSubject]
  = GrammarData.$fReadNullSubject
instance GHC.Read.Read [GrammarData.NullTopic]
  = GrammarData.$fReadNullTopic
instance GHC.Read.Read [GrammarData.ObjectFinal]
  = GrammarData.$fReadObjectFinal
instance GHC.Read.Read [GrammarData.ObligatoryTopic]
  = GrammarData.$fReadObligatoryTopic
instance GHC.Read.Read [GrammarData.PiedPiping]
  = GrammarData.$fReadPiedPiping
instance GHC.Read.Read [GrammarData.QuestionInversion]
  = GrammarData.$fReadQuestionInversion
instance GHC.Read.Read [GrammarData.SubjectInitial]
  = GrammarData.$fReadSubjectInitial
instance GHC.Read.Read [GrammarData.TopicMarking]
  = GrammarData.$fReadTopicMarking
instance GHC.Read.Read [GrammarData.VtoIMovement]
  = GrammarData.$fReadVtoIMovement
instance GHC.Read.Read [GrammarData.WHMovementObligatory]
  = GrammarData.$fReadWHMovementObligatory
instance GHC.Show.Show [GrammarData.AffixHopping]
  = GrammarData.$fShowAffixHopping
instance GHC.Show.Show [GrammarData.Bar] = GrammarData.$fShowBar
instance GHC.Show.Show [GrammarData.ComplementizerInitial]
  = GrammarData.$fShowComplementizerInitial
instance GHC.Show.Show [GrammarData.Grammar]
  = GrammarData.$fShowGrammar
instance GHC.Show.Show [GrammarData.Illoc]
  = GrammarData.$fShowIlloc
instance GHC.Show.Show [GrammarData.ItoCMovement]
  = GrammarData.$fShowItoCMovement
instance GHC.Show.Show [GrammarData.Leaf] = GrammarData.$fShowLeaf
instance GHC.Show.Show [GrammarData.LeafType]
  = GrammarData.$fShowLeafType
instance GHC.Show.Show [GrammarData.LexCat]
  = GrammarData.$fShowLexCat
instance GHC.Show.Show [GrammarData.NullSubject]
  = GrammarData.$fShowNullSubject
instance GHC.Show.Show [GrammarData.NullTopic]
  = GrammarData.$fShowNullTopic
instance GHC.Show.Show [GrammarData.ObjectFinal]
  = GrammarData.$fShowObjectFinal
instance GHC.Show.Show [GrammarData.ObligatoryTopic]
  = GrammarData.$fShowObligatoryTopic
instance GHC.Show.Show [GrammarData.Phrase]
  = GrammarData.$fShowPhrase
instance GHC.Show.Show [GrammarData.PiedPiping]
  = GrammarData.$fShowPiedPiping
instance GHC.Show.Show [GrammarData.QuestionInversion]
  = GrammarData.$fShowQuestionInversion
instance GHC.Show.Show [GrammarData.SubjectInitial]
  = GrammarData.$fShowSubjectInitial
instance GHC.Show.Show [GrammarData.TopicMarking]
  = GrammarData.$fShowTopicMarking
instance GHC.Show.Show [GrammarData.VtoIMovement]
  = GrammarData.$fShowVtoIMovement
instance GHC.Show.Show [GrammarData.WHMovementObligatory]
  = GrammarData.$fShowWHMovementObligatory
"SPEC/GrammarData $dmreadsPrec @ AffixHopping" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                           GrammarData.AffixHopping
  GHC.Read.$dmreadsPrec @ GrammarData.AffixHopping $dRead
  = GrammarData.$fReadAffixHopping_$s$dmreadsPrec
"SPEC/GrammarData $dmreadsPrec @ ComplementizerInitial" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                                    GrammarData.ComplementizerInitial
  GHC.Read.$dmreadsPrec @ GrammarData.ComplementizerInitial $dRead
  = GrammarData.$fReadComplementizerInitial_$s$dmreadsPrec
"SPEC/GrammarData $dmreadsPrec @ ItoCMovement" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                           GrammarData.ItoCMovement
  GHC.Read.$dmreadsPrec @ GrammarData.ItoCMovement $dRead
  = GrammarData.$fReadItoCMovement_$s$dmreadsPrec
"SPEC/GrammarData $dmreadsPrec @ NullSubject" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                          GrammarData.NullSubject
  GHC.Read.$dmreadsPrec @ GrammarData.NullSubject $dRead
  = GrammarData.$fReadNullSubject_$s$dmreadsPrec
"SPEC/GrammarData $dmreadsPrec @ NullTopic" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                        GrammarData.NullTopic
  GHC.Read.$dmreadsPrec @ GrammarData.NullTopic $dRead
  = GrammarData.$fReadNullTopic_$s$dmreadsPrec
"SPEC/GrammarData $dmreadsPrec @ ObjectFinal" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                          GrammarData.ObjectFinal
  GHC.Read.$dmreadsPrec @ GrammarData.ObjectFinal $dRead
  = GrammarData.$fReadObjectFinal_$s$dmreadsPrec
"SPEC/GrammarData $dmreadsPrec @ ObligatoryTopic" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                              GrammarData.ObligatoryTopic
  GHC.Read.$dmreadsPrec @ GrammarData.ObligatoryTopic $dRead
  = GrammarData.$fReadObligatoryTopic_$s$dmreadsPrec
"SPEC/GrammarData $dmreadsPrec @ PiedPiping" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                         GrammarData.PiedPiping
  GHC.Read.$dmreadsPrec @ GrammarData.PiedPiping $dRead
  = GrammarData.$fReadPiedPiping_$s$dmreadsPrec
"SPEC/GrammarData $dmreadsPrec @ QuestionInversion" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                                GrammarData.QuestionInversion
  GHC.Read.$dmreadsPrec @ GrammarData.QuestionInversion $dRead
  = GrammarData.$fReadQuestionInversion_$s$dmreadsPrec
"SPEC/GrammarData $dmreadsPrec @ SubjectInitial" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                             GrammarData.SubjectInitial
  GHC.Read.$dmreadsPrec @ GrammarData.SubjectInitial $dRead
  = GrammarData.$fReadSubjectInitial_$s$dmreadsPrec
"SPEC/GrammarData $dmreadsPrec @ TopicMarking" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                           GrammarData.TopicMarking
  GHC.Read.$dmreadsPrec @ GrammarData.TopicMarking $dRead
  = GrammarData.$fReadTopicMarking_$s$dmreadsPrec
"SPEC/GrammarData $dmreadsPrec @ VtoIMovement" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                           GrammarData.VtoIMovement
  GHC.Read.$dmreadsPrec @ GrammarData.VtoIMovement $dRead
  = GrammarData.$fReadVtoIMovement_$s$dmreadsPrec
"SPEC/GrammarData $dmreadsPrec @ WHMovementObligatory" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                                   GrammarData.WHMovementObligatory
  GHC.Read.$dmreadsPrec @ GrammarData.WHMovementObligatory $dRead
  = GrammarData.$fReadWHMovementObligatory_$s$dmreadsPrec
"SPEC/GrammarData readListDefault @ AffixHopping" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                              GrammarData.AffixHopping
  GHC.Read.readListDefault @ GrammarData.AffixHopping $dRead
  = GrammarData.$fReadAffixHopping_$sreadListDefault
"SPEC/GrammarData readListDefault @ ComplementizerInitial" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                                       GrammarData.ComplementizerInitial
  GHC.Read.readListDefault @ GrammarData.ComplementizerInitial $dRead
  = GrammarData.$fReadComplementizerInitial_$sreadListDefault
"SPEC/GrammarData readListDefault @ ItoCMovement" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                              GrammarData.ItoCMovement
  GHC.Read.readListDefault @ GrammarData.ItoCMovement $dRead
  = GrammarData.$fReadItoCMovement_$sreadListDefault
"SPEC/GrammarData readListDefault @ NullSubject" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                             GrammarData.NullSubject
  GHC.Read.readListDefault @ GrammarData.NullSubject $dRead
  = GrammarData.$fReadNullSubject_$sreadListDefault
"SPEC/GrammarData readListDefault @ NullTopic" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                           GrammarData.NullTopic
  GHC.Read.readListDefault @ GrammarData.NullTopic $dRead
  = GrammarData.$fReadNullTopic_$sreadListDefault
"SPEC/GrammarData readListDefault @ ObjectFinal" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                             GrammarData.ObjectFinal
  GHC.Read.readListDefault @ GrammarData.ObjectFinal $dRead
  = GrammarData.$fReadObjectFinal_$sreadListDefault
"SPEC/GrammarData readListDefault @ ObligatoryTopic" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                                 GrammarData.ObligatoryTopic
  GHC.Read.readListDefault @ GrammarData.ObligatoryTopic $dRead
  = GrammarData.$fReadObligatoryTopic_$sreadListDefault
"SPEC/GrammarData readListDefault @ PiedPiping" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                            GrammarData.PiedPiping
  GHC.Read.readListDefault @ GrammarData.PiedPiping $dRead
  = GrammarData.$fReadPiedPiping_$sreadListDefault
"SPEC/GrammarData readListDefault @ QuestionInversion" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                                   GrammarData.QuestionInversion
  GHC.Read.readListDefault @ GrammarData.QuestionInversion $dRead
  = GrammarData.$fReadQuestionInversion_$sreadListDefault
"SPEC/GrammarData readListDefault @ SubjectInitial" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                                GrammarData.SubjectInitial
  GHC.Read.readListDefault @ GrammarData.SubjectInitial $dRead
  = GrammarData.$fReadSubjectInitial_$sreadListDefault
"SPEC/GrammarData readListDefault @ TopicMarking" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                              GrammarData.TopicMarking
  GHC.Read.readListDefault @ GrammarData.TopicMarking $dRead
  = GrammarData.$fReadTopicMarking_$sreadListDefault
"SPEC/GrammarData readListDefault @ VtoIMovement" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                              GrammarData.VtoIMovement
  GHC.Read.readListDefault @ GrammarData.VtoIMovement $dRead
  = GrammarData.$fReadVtoIMovement_$sreadListDefault
"SPEC/GrammarData readListDefault @ WHMovementObligatory" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                                      GrammarData.WHMovementObligatory
  GHC.Read.readListDefault @ GrammarData.WHMovementObligatory $dRead
  = GrammarData.$fReadWHMovementObligatory_$sreadListDefault
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

