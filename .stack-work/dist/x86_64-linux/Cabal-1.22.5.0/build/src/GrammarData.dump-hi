
==================== FINAL INTERFACE ====================
2016-12-06 20:49:02.494678 UTC

interface conla_1eA9qWUPH9nBowcXqqaV8r:GrammarData 7103
  interface hash: 84cfd2361791c1335c171d990456c943
  ABI hash: 3ac8f2b878a3acac75da28c3be99b3ac
  export-list hash: fca5595c19286020653fdf4f375d962b
  orphan hash: 8a9c341e4a66f197947c3afd89ca02a7
  flag hash: 962af636f8e927040c7daa9c21457292
  sig of: Nothing
  used TH splices: False
  where
exports:
  GrammarData.AffixHopping{GrammarData.NoAffixHop GrammarData.OblAffixHop}
  GrammarData.Bar{GrammarData.XBarA GrammarData.XBarC GrammarData.adjunct GrammarData.barBar GrammarData.barIl GrammarData.barLC GrammarData.compliment GrammarData.leaf}
  GrammarData.ComplementizerInitial{GrammarData.CompFinal GrammarData.CompInitial}
  GrammarData.Grammar{GrammarData.Grammar GrammarData.getAH GrammarData.getCI GrammarData.getItoC GrammarData.getNS GrammarData.getNT GrammarData.getOF GrammarData.getObT GrammarData.getPP GrammarData.getQI GrammarData.getSI GrammarData.getTM GrammarData.getVtoI GrammarData.getWHM}
  GrammarData.Illoc{GrammarData.Decl GrammarData.Imper GrammarData.Null GrammarData.Ques}
  GrammarData.ItoCMovement{GrammarData.NoItoCMove GrammarData.OblItoCMove}
  GrammarData.Leaf{GrammarData.Leaf GrammarData.LeafInfl GrammarData.LeafNull GrammarData.leafIl GrammarData.leafInfl GrammarData.leafLC GrammarData.leafStr}
  GrammarData.NullSubject{GrammarData.NoNullSub GrammarData.OptNullSub}
  GrammarData.NullTopic{GrammarData.NoNullTop GrammarData.OptNullTop}
  GrammarData.ObjectFinal{GrammarData.ObjFinal GrammarData.ObjInitial}
  GrammarData.ObligatoryTopic{GrammarData.OblTopic GrammarData.OptTopic}
  GrammarData.Phrase{GrammarData.XP GrammarData.XPNull GrammarData.phraseBar GrammarData.phraseIl GrammarData.phraseLC GrammarData.specifier}
  GrammarData.PiedPiping{GrammarData.PiedPipe GrammarData.PrepStrand}
  GrammarData.QuestionInversion{GrammarData.NoQuesInv GrammarData.OblQuesInv}
  GrammarData.SubjectInitial{GrammarData.SubFinal GrammarData.SubInitial}
  GrammarData.TopicMarking{GrammarData.NoTopMark GrammarData.OblTopMark}
  GrammarData.VtoIMovement{GrammarData.NoVtoIMove GrammarData.OblVtoIMove}
  GrammarData.WHMovementObligatory{GrammarData.NoWHMove GrammarData.OblWHMove}
module dependencies: InflectionData OtherData PhonemeData
package dependencies: base-4.8.2.0* ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         conla_1eA9qWUPH9nBowcXqqaV8r:InflectionData
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Monoid
                         base-4.8.2.0:Data.Type.Equality base-4.8.2.0:GHC.Generics
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.Enum debc6de3086023a15993ab0cecffb90b
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:GHC.Read b423b4506a014855edbd329b567629f3
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  InflectionData 3d10fd8ebdfb88f2d9b18403b3318120
  exports: bbf9a431e828cdbe291def24777d4f2e
  Animacy 3fb8f806ac431419336914d62e0692e1
  Aspect 3260581e2888098e95013c9746eb2927
  Case ed810d7ab6970052c9ee31d75d4a74f7
  Definiteness f57cbd9dbed35919833216936d0e066e
  Evidentiality 8c39249ddb7859f10b018a2526e04a45
  Express ce522c1d99b503cc50c6a04abbeb7ec2
  Gender 8b595aff125f95a2b35fe330b0ba7fad
  Honorific 38ff9a9c45f96d99123b457fda219bfb
  LexCat b0a24ad20939906e8d87ed3073f32603
  Mood 170a49091e965c69ca2b81c9942aa234
  Number c1e8fbfb7380effdacb7c7c192e40bf5
  Person 02346c3aafaeac9909a5db7a01e8ca09
  Polarity ad1fe4829d26ee371daeb2b0168138e4
  Specificity a4a6522da9f32c4a22fdcdb048233e77
  Tense b64289664290fdc9c5510c85a7afdd78
  Topic 91b970df1d2f65a770d84bd1b0e168b5
  Transitivity c432d94948e8418512e7b069e8d02e7a
  Voice 1f59333afb1b3b92a8af1e5489e1e630
  Volition 91017ab7ea71228801f74c069cd5baf7
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
da5bcd429ecfbb71b847767f8ed9569d
  $fEnumAffixHopping :: GHC.Enum.Enum GrammarData.AffixHopping
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.AffixHopping
                  GrammarData.$fEnumAffixHopping_$csucc
                  GrammarData.$fEnumAffixHopping_$cpred
                  GrammarData.$fEnumAffixHopping_$ctoEnum
                  GrammarData.$fEnumAffixHopping_$cfromEnum
                  GrammarData.$fEnumAffixHopping_$cenumFrom
                  GrammarData.$fEnumAffixHopping_$cenumFromThen
                  GrammarData.$fEnumAffixHopping_$cenumFromTo
                  GrammarData.$fEnumAffixHopping_$cenumFromThenTo -}
da5bcd429ecfbb71b847767f8ed9569d
  $fEnumAffixHopping1 :: GHC.Prim.Int# -> GrammarData.AffixHopping
  {- Arity: 1, Strictness: <L,U>b -}
da5bcd429ecfbb71b847767f8ed9569d
  $fEnumAffixHopping2 :: [GrammarData.AffixHopping]
  {- Unfolding: (GrammarData.$fEnumAffixHopping_go2 1) -}
da5bcd429ecfbb71b847767f8ed9569d
  $fEnumAffixHopping3 :: [GrammarData.AffixHopping]
  {- Unfolding: (GrammarData.$fEnumAffixHopping_go3 0) -}
da5bcd429ecfbb71b847767f8ed9569d
  $fEnumAffixHopping4 :: GrammarData.AffixHopping
  {- Strictness: b -}
da5bcd429ecfbb71b847767f8ed9569d
  $fEnumAffixHopping5 :: GrammarData.AffixHopping
  {- Strictness: b -}
da5bcd429ecfbb71b847767f8ed9569d
  $fEnumAffixHopping_$cenumFrom ::
    GrammarData.AffixHopping -> [GrammarData.AffixHopping]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ a13 :: GrammarData.AffixHopping ->
                 case a13 of wild {
                   GrammarData.NoAffixHop -> GrammarData.$fEnumAffixHopping3
                   GrammarData.OblAffixHop -> GrammarData.$fEnumAffixHopping2 }) -}
da5bcd429ecfbb71b847767f8ed9569d
  $fEnumAffixHopping_$cenumFromThen ::
    GrammarData.AffixHopping
    -> GrammarData.AffixHopping -> [GrammarData.AffixHopping]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a13 :: GrammarData.AffixHopping
                   b :: GrammarData.AffixHopping ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.AffixHopping]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ a# :: GHC.Prim.Int#[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int# -> [GrammarData.AffixHopping]
                         {- Arity: 1, Strictness: <L,U> -}
                       = \ b# :: GHC.Prim.Int#[OneShot] ->
                         let {
                           $j2 :: GHC.Prim.Int# -> [GrammarData.AffixHopping]
                             {- Arity: 1, Strictness: <L,U> -}
                           = \ y :: GHC.Prim.Int#[OneShot] ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# b# a#) of wild {
                               GHC.Types.False
                               -> GHC.Enum.efdtIntDnFB
                                    @ [GrammarData.AffixHopping]
                                    GrammarData.$fEnumAffixHopping_c1
                                    (GHC.Types.[] @ GrammarData.AffixHopping)
                                    a#
                                    b#
                                    y
                               GHC.Types.True
                               -> GHC.Enum.efdtIntUpFB
                                    @ [GrammarData.AffixHopping]
                                    GrammarData.$fEnumAffixHopping_c1
                                    (GHC.Types.[] @ GrammarData.AffixHopping)
                                    a#
                                    b#
                                    y }
                         } in
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.># a# b#) of wild {
                           GHC.Types.False -> $j2 1 GHC.Types.True -> $j2 0 }
                     } in
                     case b of wild {
                       GrammarData.NoAffixHop -> $j1 0 GrammarData.OblAffixHop -> $j1 1 }
                 } in
                 case a13 of wild {
                   GrammarData.NoAffixHop -> $j 0
                   GrammarData.OblAffixHop -> $j 1 }) -}
da5bcd429ecfbb71b847767f8ed9569d
  $fEnumAffixHopping_$cenumFromThenTo ::
    GrammarData.AffixHopping
    -> GrammarData.AffixHopping
    -> GrammarData.AffixHopping
    -> [GrammarData.AffixHopping]
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U>,
     Unfolding: (\ x1 :: GrammarData.AffixHopping
                   x2 :: GrammarData.AffixHopping
                   y :: GrammarData.AffixHopping ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.AffixHopping]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ x4 :: GHC.Prim.Int#[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int# -> [GrammarData.AffixHopping]
                         {- Arity: 1, Strictness: <L,U> -}
                       = \ x5 :: GHC.Prim.Int#[OneShot] ->
                         case y of wild {
                           GrammarData.NoAffixHop
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [GrammarData.AffixHopping]
                                     GrammarData.$fEnumAffixHopping_c
                                     (GHC.Types.[] @ GrammarData.AffixHopping)
                                     x4
                                     x5
                                     0
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [GrammarData.AffixHopping]
                                     GrammarData.$fEnumAffixHopping_c
                                     (GHC.Types.[] @ GrammarData.AffixHopping)
                                     x4
                                     x5
                                     0 }
                           GrammarData.OblAffixHop
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [GrammarData.AffixHopping]
                                     GrammarData.$fEnumAffixHopping_c
                                     (GHC.Types.[] @ GrammarData.AffixHopping)
                                     x4
                                     x5
                                     1
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [GrammarData.AffixHopping]
                                     GrammarData.$fEnumAffixHopping_c
                                     (GHC.Types.[] @ GrammarData.AffixHopping)
                                     x4
                                     x5
                                     1 } }
                     } in
                     case x2 of wild {
                       GrammarData.NoAffixHop -> $j1 0 GrammarData.OblAffixHop -> $j1 1 }
                 } in
                 case x1 of wild {
                   GrammarData.NoAffixHop -> $j 0
                   GrammarData.OblAffixHop -> $j 1 }) -}
da5bcd429ecfbb71b847767f8ed9569d
  $fEnumAffixHopping_$cenumFromTo ::
    GrammarData.AffixHopping
    -> GrammarData.AffixHopping -> [GrammarData.AffixHopping]
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ x :: GrammarData.AffixHopping
                   y :: GrammarData.AffixHopping ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.AffixHopping]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ x1 :: GHC.Prim.Int#[OneShot] ->
                     case y of wild {
                       GrammarData.NoAffixHop
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 0) of wild1 {
                            GHC.Types.False -> GrammarData.$fEnumAffixHopping_go1 x1
                            GHC.Types.True -> GHC.Types.[] @ GrammarData.AffixHopping }
                       GrammarData.OblAffixHop
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 1) of wild1 {
                            GHC.Types.False -> GrammarData.$fEnumAffixHopping_go x1
                            GHC.Types.True -> GHC.Types.[] @ GrammarData.AffixHopping } }
                 } in
                 case x of wild {
                   GrammarData.NoAffixHop -> $j 0
                   GrammarData.OblAffixHop -> $j 1 }) -}
da5bcd429ecfbb71b847767f8ed9569d
  $fEnumAffixHopping_$cfromEnum ::
    GrammarData.AffixHopping -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.AffixHopping ->
                 case a13 of wild {
                   GrammarData.NoAffixHop -> GHC.Types.I# 0
                   GrammarData.OblAffixHop -> GHC.Types.I# 1 }) -}
da5bcd429ecfbb71b847767f8ed9569d
  $fEnumAffixHopping_$cpred ::
    GrammarData.AffixHopping -> GrammarData.AffixHopping
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.AffixHopping ->
                 case a13 of wild {
                   GrammarData.NoAffixHop -> GrammarData.$fEnumAffixHopping4
                   GrammarData.OblAffixHop -> GrammarData.NoAffixHop }) -}
da5bcd429ecfbb71b847767f8ed9569d
  $fEnumAffixHopping_$csucc ::
    GrammarData.AffixHopping -> GrammarData.AffixHopping
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.AffixHopping ->
                 case a13 of wild {
                   GrammarData.NoAffixHop -> GrammarData.OblAffixHop
                   GrammarData.OblAffixHop -> GrammarData.$fEnumAffixHopping5 }) -}
da5bcd429ecfbb71b847767f8ed9569d
  $fEnumAffixHopping_$ctoEnum ::
    GHC.Types.Int -> GrammarData.AffixHopping
  {- Arity: 1, Strictness: <S,1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: GHC.Types.Int ->
                 case w of ww { GHC.Types.I# ww1 -> GrammarData.$w$ctoEnum ww1 }) -}
da5bcd429ecfbb71b847767f8ed9569d
  $fEnumAffixHopping_c ::
    GHC.Types.Int
    -> [GrammarData.AffixHopping] -> [GrammarData.AffixHopping]
  {- Arity: 2, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int ys :: [GrammarData.AffixHopping] ->
                 GHC.Types.:
                   @ GrammarData.AffixHopping
                   (GrammarData.$fEnumAffixHopping_$ctoEnum x)
                   ys) -}
da5bcd429ecfbb71b847767f8ed9569d
  $fEnumAffixHopping_c1 ::
    GHC.Types.Int
    -> [GrammarData.AffixHopping] -> [GrammarData.AffixHopping]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int ys :: [GrammarData.AffixHopping] ->
                 GHC.Types.:
                   @ GrammarData.AffixHopping
                   (case x of wild { GHC.Types.I# a13 ->
                    GHC.Prim.tagToEnum# @ GrammarData.AffixHopping a13 })
                   ys) -}
da5bcd429ecfbb71b847767f8ed9569d
  $fEnumAffixHopping_go ::
    GHC.Prim.Int# -> [GrammarData.AffixHopping]
  {- Arity: 1, Strictness: <L,U> -}
da5bcd429ecfbb71b847767f8ed9569d
  $fEnumAffixHopping_go1 ::
    GHC.Prim.Int# -> [GrammarData.AffixHopping]
  {- Arity: 1, Strictness: <L,U> -}
da5bcd429ecfbb71b847767f8ed9569d
  $fEnumAffixHopping_go2 ::
    GHC.Prim.Int# -> [GrammarData.AffixHopping]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
da5bcd429ecfbb71b847767f8ed9569d
  $fEnumAffixHopping_go3 ::
    GHC.Prim.Int# -> [GrammarData.AffixHopping]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
b8946e12084618f63d7bf871f8615ccb
  $fEnumComplementizerInitial ::
    GHC.Enum.Enum GrammarData.ComplementizerInitial
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.ComplementizerInitial
                  GrammarData.$fEnumComplementizerInitial_$csucc
                  GrammarData.$fEnumComplementizerInitial_$cpred
                  GrammarData.$fEnumComplementizerInitial_$ctoEnum
                  GrammarData.$fEnumComplementizerInitial_$cfromEnum
                  GrammarData.$fEnumComplementizerInitial_$cenumFrom
                  GrammarData.$fEnumComplementizerInitial_$cenumFromThen
                  GrammarData.$fEnumComplementizerInitial_$cenumFromTo
                  GrammarData.$fEnumComplementizerInitial_$cenumFromThenTo -}
b8946e12084618f63d7bf871f8615ccb
  $fEnumComplementizerInitial1 ::
    GHC.Prim.Int# -> GrammarData.ComplementizerInitial
  {- Arity: 1, Strictness: <L,U>b -}
b8946e12084618f63d7bf871f8615ccb
  $fEnumComplementizerInitial2 :: [GrammarData.ComplementizerInitial]
  {- Unfolding: (GrammarData.$fEnumComplementizerInitial_go2 1) -}
b8946e12084618f63d7bf871f8615ccb
  $fEnumComplementizerInitial3 :: [GrammarData.ComplementizerInitial]
  {- Unfolding: (GrammarData.$fEnumComplementizerInitial_go3 0) -}
b8946e12084618f63d7bf871f8615ccb
  $fEnumComplementizerInitial4 :: GrammarData.ComplementizerInitial
  {- Strictness: b -}
b8946e12084618f63d7bf871f8615ccb
  $fEnumComplementizerInitial5 :: GrammarData.ComplementizerInitial
  {- Strictness: b -}
b8946e12084618f63d7bf871f8615ccb
  $fEnumComplementizerInitial_$cenumFrom ::
    GrammarData.ComplementizerInitial
    -> [GrammarData.ComplementizerInitial]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ a13 :: GrammarData.ComplementizerInitial ->
                 case a13 of wild {
                   GrammarData.CompInitial -> GrammarData.$fEnumComplementizerInitial3
                   GrammarData.CompFinal
                   -> GrammarData.$fEnumComplementizerInitial2 }) -}
b8946e12084618f63d7bf871f8615ccb
  $fEnumComplementizerInitial_$cenumFromThen ::
    GrammarData.ComplementizerInitial
    -> GrammarData.ComplementizerInitial
    -> [GrammarData.ComplementizerInitial]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a13 :: GrammarData.ComplementizerInitial
                   b :: GrammarData.ComplementizerInitial ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.ComplementizerInitial]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ a# :: GHC.Prim.Int#[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int# -> [GrammarData.ComplementizerInitial]
                         {- Arity: 1, Strictness: <L,U> -}
                       = \ b# :: GHC.Prim.Int#[OneShot] ->
                         let {
                           $j2 :: GHC.Prim.Int# -> [GrammarData.ComplementizerInitial]
                             {- Arity: 1, Strictness: <L,U> -}
                           = \ y :: GHC.Prim.Int#[OneShot] ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# b# a#) of wild {
                               GHC.Types.False
                               -> GHC.Enum.efdtIntDnFB
                                    @ [GrammarData.ComplementizerInitial]
                                    GrammarData.$fEnumComplementizerInitial_c1
                                    (GHC.Types.[] @ GrammarData.ComplementizerInitial)
                                    a#
                                    b#
                                    y
                               GHC.Types.True
                               -> GHC.Enum.efdtIntUpFB
                                    @ [GrammarData.ComplementizerInitial]
                                    GrammarData.$fEnumComplementizerInitial_c1
                                    (GHC.Types.[] @ GrammarData.ComplementizerInitial)
                                    a#
                                    b#
                                    y }
                         } in
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.># a# b#) of wild {
                           GHC.Types.False -> $j2 1 GHC.Types.True -> $j2 0 }
                     } in
                     case b of wild {
                       GrammarData.CompInitial -> $j1 0 GrammarData.CompFinal -> $j1 1 }
                 } in
                 case a13 of wild {
                   GrammarData.CompInitial -> $j 0 GrammarData.CompFinal -> $j 1 }) -}
b8946e12084618f63d7bf871f8615ccb
  $fEnumComplementizerInitial_$cenumFromThenTo ::
    GrammarData.ComplementizerInitial
    -> GrammarData.ComplementizerInitial
    -> GrammarData.ComplementizerInitial
    -> [GrammarData.ComplementizerInitial]
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U>,
     Unfolding: (\ x1 :: GrammarData.ComplementizerInitial
                   x2 :: GrammarData.ComplementizerInitial
                   y :: GrammarData.ComplementizerInitial ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.ComplementizerInitial]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ x4 :: GHC.Prim.Int#[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int# -> [GrammarData.ComplementizerInitial]
                         {- Arity: 1, Strictness: <L,U> -}
                       = \ x5 :: GHC.Prim.Int#[OneShot] ->
                         case y of wild {
                           GrammarData.CompInitial
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [GrammarData.ComplementizerInitial]
                                     GrammarData.$fEnumComplementizerInitial_c
                                     (GHC.Types.[] @ GrammarData.ComplementizerInitial)
                                     x4
                                     x5
                                     0
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [GrammarData.ComplementizerInitial]
                                     GrammarData.$fEnumComplementizerInitial_c
                                     (GHC.Types.[] @ GrammarData.ComplementizerInitial)
                                     x4
                                     x5
                                     0 }
                           GrammarData.CompFinal
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [GrammarData.ComplementizerInitial]
                                     GrammarData.$fEnumComplementizerInitial_c
                                     (GHC.Types.[] @ GrammarData.ComplementizerInitial)
                                     x4
                                     x5
                                     1
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [GrammarData.ComplementizerInitial]
                                     GrammarData.$fEnumComplementizerInitial_c
                                     (GHC.Types.[] @ GrammarData.ComplementizerInitial)
                                     x4
                                     x5
                                     1 } }
                     } in
                     case x2 of wild {
                       GrammarData.CompInitial -> $j1 0 GrammarData.CompFinal -> $j1 1 }
                 } in
                 case x1 of wild {
                   GrammarData.CompInitial -> $j 0 GrammarData.CompFinal -> $j 1 }) -}
b8946e12084618f63d7bf871f8615ccb
  $fEnumComplementizerInitial_$cenumFromTo ::
    GrammarData.ComplementizerInitial
    -> GrammarData.ComplementizerInitial
    -> [GrammarData.ComplementizerInitial]
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ x :: GrammarData.ComplementizerInitial
                   y :: GrammarData.ComplementizerInitial ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.ComplementizerInitial]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ x1 :: GHC.Prim.Int#[OneShot] ->
                     case y of wild {
                       GrammarData.CompInitial
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 0) of wild1 {
                            GHC.Types.False -> GrammarData.$fEnumComplementizerInitial_go1 x1
                            GHC.Types.True
                            -> GHC.Types.[] @ GrammarData.ComplementizerInitial }
                       GrammarData.CompFinal
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 1) of wild1 {
                            GHC.Types.False -> GrammarData.$fEnumComplementizerInitial_go x1
                            GHC.Types.True
                            -> GHC.Types.[] @ GrammarData.ComplementizerInitial } }
                 } in
                 case x of wild {
                   GrammarData.CompInitial -> $j 0 GrammarData.CompFinal -> $j 1 }) -}
b8946e12084618f63d7bf871f8615ccb
  $fEnumComplementizerInitial_$cfromEnum ::
    GrammarData.ComplementizerInitial -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.ComplementizerInitial ->
                 case a13 of wild {
                   GrammarData.CompInitial -> GHC.Types.I# 0
                   GrammarData.CompFinal -> GHC.Types.I# 1 }) -}
b8946e12084618f63d7bf871f8615ccb
  $fEnumComplementizerInitial_$cpred ::
    GrammarData.ComplementizerInitial
    -> GrammarData.ComplementizerInitial
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.ComplementizerInitial ->
                 case a13 of wild {
                   GrammarData.CompInitial -> GrammarData.$fEnumComplementizerInitial4
                   GrammarData.CompFinal -> GrammarData.CompInitial }) -}
b8946e12084618f63d7bf871f8615ccb
  $fEnumComplementizerInitial_$csucc ::
    GrammarData.ComplementizerInitial
    -> GrammarData.ComplementizerInitial
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.ComplementizerInitial ->
                 case a13 of wild {
                   GrammarData.CompInitial -> GrammarData.CompFinal
                   GrammarData.CompFinal
                   -> GrammarData.$fEnumComplementizerInitial5 }) -}
b8946e12084618f63d7bf871f8615ccb
  $fEnumComplementizerInitial_$ctoEnum ::
    GHC.Types.Int -> GrammarData.ComplementizerInitial
  {- Arity: 1, Strictness: <S,1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: GHC.Types.Int ->
                 case w of ww { GHC.Types.I# ww1 ->
                 GrammarData.$w$ctoEnum1 ww1 }) -}
b8946e12084618f63d7bf871f8615ccb
  $fEnumComplementizerInitial_c ::
    GHC.Types.Int
    -> [GrammarData.ComplementizerInitial]
    -> [GrammarData.ComplementizerInitial]
  {- Arity: 2, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int ys :: [GrammarData.ComplementizerInitial] ->
                 GHC.Types.:
                   @ GrammarData.ComplementizerInitial
                   (GrammarData.$fEnumComplementizerInitial_$ctoEnum x)
                   ys) -}
b8946e12084618f63d7bf871f8615ccb
  $fEnumComplementizerInitial_c1 ::
    GHC.Types.Int
    -> [GrammarData.ComplementizerInitial]
    -> [GrammarData.ComplementizerInitial]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int ys :: [GrammarData.ComplementizerInitial] ->
                 GHC.Types.:
                   @ GrammarData.ComplementizerInitial
                   (case x of wild { GHC.Types.I# a13 ->
                    GHC.Prim.tagToEnum# @ GrammarData.ComplementizerInitial a13 })
                   ys) -}
b8946e12084618f63d7bf871f8615ccb
  $fEnumComplementizerInitial_go ::
    GHC.Prim.Int# -> [GrammarData.ComplementizerInitial]
  {- Arity: 1, Strictness: <L,U> -}
b8946e12084618f63d7bf871f8615ccb
  $fEnumComplementizerInitial_go1 ::
    GHC.Prim.Int# -> [GrammarData.ComplementizerInitial]
  {- Arity: 1, Strictness: <L,U> -}
b8946e12084618f63d7bf871f8615ccb
  $fEnumComplementizerInitial_go2 ::
    GHC.Prim.Int# -> [GrammarData.ComplementizerInitial]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
b8946e12084618f63d7bf871f8615ccb
  $fEnumComplementizerInitial_go3 ::
    GHC.Prim.Int# -> [GrammarData.ComplementizerInitial]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
0b723dd66110bae4a164ef4cfb3bebd4
  $fEnumIlloc :: GHC.Enum.Enum GrammarData.Illoc
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.Illoc
                  GrammarData.$fEnumIlloc_$csucc
                  GrammarData.$fEnumIlloc_$cpred
                  GrammarData.$fEnumIlloc_$ctoEnum
                  GrammarData.$fEnumIlloc_$cfromEnum
                  GrammarData.$fEnumIlloc_$cenumFrom
                  GrammarData.$fEnumIlloc_$cenumFromThen
                  GrammarData.$fEnumIlloc_$cenumFromTo
                  GrammarData.$fEnumIlloc_$cenumFromThenTo -}
0b723dd66110bae4a164ef4cfb3bebd4
  $fEnumIlloc1 :: [GrammarData.Illoc]
  {- Unfolding: (GrammarData.$fEnumIlloc_go4 3) -}
0b723dd66110bae4a164ef4cfb3bebd4
  $fEnumIlloc2 :: [GrammarData.Illoc]
  {- Unfolding: (GrammarData.$fEnumIlloc_go5 2) -}
0b723dd66110bae4a164ef4cfb3bebd4
  $fEnumIlloc3 :: [GrammarData.Illoc]
  {- Unfolding: (GrammarData.$fEnumIlloc_go6 1) -}
0b723dd66110bae4a164ef4cfb3bebd4
  $fEnumIlloc4 :: [GrammarData.Illoc]
  {- Unfolding: (GrammarData.$fEnumIlloc_go7 0) -}
0b723dd66110bae4a164ef4cfb3bebd4
  $fEnumIlloc5 :: GHC.Prim.Int# -> GrammarData.Illoc
  {- Arity: 1, Strictness: <L,U>b -}
0b723dd66110bae4a164ef4cfb3bebd4
  $fEnumIlloc6 :: GrammarData.Illoc
  {- Strictness: b -}
0b723dd66110bae4a164ef4cfb3bebd4
  $fEnumIlloc7 :: GrammarData.Illoc
  {- Strictness: b -}
0b723dd66110bae4a164ef4cfb3bebd4
  $fEnumIlloc_$cenumFrom :: GrammarData.Illoc -> [GrammarData.Illoc]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ a13 :: GrammarData.Illoc ->
                 case a13 of wild {
                   GrammarData.Null -> GrammarData.$fEnumIlloc4
                   GrammarData.Ques -> GrammarData.$fEnumIlloc3
                   GrammarData.Decl -> GrammarData.$fEnumIlloc2
                   GrammarData.Imper -> GrammarData.$fEnumIlloc1 }) -}
0b723dd66110bae4a164ef4cfb3bebd4
  $fEnumIlloc_$cenumFromThen ::
    GrammarData.Illoc -> GrammarData.Illoc -> [GrammarData.Illoc]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a13 :: GrammarData.Illoc b :: GrammarData.Illoc ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.Illoc]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ a# :: GHC.Prim.Int#[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int# -> [GrammarData.Illoc]
                         {- Arity: 1, Strictness: <L,U> -}
                       = \ b# :: GHC.Prim.Int#[OneShot] ->
                         let {
                           $j2 :: GHC.Prim.Int# -> [GrammarData.Illoc]
                             {- Arity: 1, Strictness: <L,U> -}
                           = \ y :: GHC.Prim.Int#[OneShot] ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# b# a#) of wild {
                               GHC.Types.False
                               -> GHC.Enum.efdtIntDnFB
                                    @ [GrammarData.Illoc]
                                    GrammarData.$fEnumIlloc_c
                                    (GHC.Types.[] @ GrammarData.Illoc)
                                    a#
                                    b#
                                    y
                               GHC.Types.True
                               -> GHC.Enum.efdtIntUpFB
                                    @ [GrammarData.Illoc]
                                    GrammarData.$fEnumIlloc_c
                                    (GHC.Types.[] @ GrammarData.Illoc)
                                    a#
                                    b#
                                    y }
                         } in
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.># a# b#) of wild {
                           GHC.Types.False -> $j2 3 GHC.Types.True -> $j2 0 }
                     } in
                     case b of wild {
                       GrammarData.Null -> $j1 0
                       GrammarData.Ques -> $j1 1
                       GrammarData.Decl -> $j1 2
                       GrammarData.Imper -> $j1 3 }
                 } in
                 case a13 of wild {
                   GrammarData.Null -> $j 0
                   GrammarData.Ques -> $j 1
                   GrammarData.Decl -> $j 2
                   GrammarData.Imper -> $j 3 }) -}
0b723dd66110bae4a164ef4cfb3bebd4
  $fEnumIlloc_$cenumFromThenTo ::
    GrammarData.Illoc
    -> GrammarData.Illoc -> GrammarData.Illoc -> [GrammarData.Illoc]
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U> -}
0b723dd66110bae4a164ef4cfb3bebd4
  $fEnumIlloc_$cenumFromTo ::
    GrammarData.Illoc -> GrammarData.Illoc -> [GrammarData.Illoc]
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ x :: GrammarData.Illoc y :: GrammarData.Illoc ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.Illoc]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ x1 :: GHC.Prim.Int#[OneShot] ->
                     case y of wild {
                       GrammarData.Null
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 0) of wild1 {
                            GHC.Types.False -> GrammarData.$fEnumIlloc_go3 x1
                            GHC.Types.True -> GHC.Types.[] @ GrammarData.Illoc }
                       GrammarData.Ques
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 1) of wild1 {
                            GHC.Types.False -> GrammarData.$fEnumIlloc_go2 x1
                            GHC.Types.True -> GHC.Types.[] @ GrammarData.Illoc }
                       GrammarData.Decl
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 2) of wild1 {
                            GHC.Types.False -> GrammarData.$fEnumIlloc_go1 x1
                            GHC.Types.True -> GHC.Types.[] @ GrammarData.Illoc }
                       GrammarData.Imper
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 3) of wild1 {
                            GHC.Types.False -> GrammarData.$fEnumIlloc_go x1
                            GHC.Types.True -> GHC.Types.[] @ GrammarData.Illoc } }
                 } in
                 case x of wild {
                   GrammarData.Null -> $j 0
                   GrammarData.Ques -> $j 1
                   GrammarData.Decl -> $j 2
                   GrammarData.Imper -> $j 3 }) -}
0b723dd66110bae4a164ef4cfb3bebd4
  $fEnumIlloc_$cfromEnum :: GrammarData.Illoc -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.Illoc ->
                 case a13 of wild {
                   GrammarData.Null -> GHC.Types.I# 0
                   GrammarData.Ques -> GHC.Types.I# 1
                   GrammarData.Decl -> GHC.Types.I# 2
                   GrammarData.Imper -> GHC.Types.I# 3 }) -}
0b723dd66110bae4a164ef4cfb3bebd4
  $fEnumIlloc_$cpred :: GrammarData.Illoc -> GrammarData.Illoc
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.Illoc ->
                 case a13 of wild {
                   GrammarData.Null -> GrammarData.$fEnumIlloc6
                   GrammarData.Ques -> GrammarData.Null
                   GrammarData.Decl -> GrammarData.Ques
                   GrammarData.Imper -> GrammarData.Decl }) -}
0b723dd66110bae4a164ef4cfb3bebd4
  $fEnumIlloc_$csucc :: GrammarData.Illoc -> GrammarData.Illoc
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.Illoc ->
                 case a13 of wild {
                   GrammarData.Null -> GrammarData.Ques
                   GrammarData.Ques -> GrammarData.Decl
                   GrammarData.Decl -> GrammarData.Imper
                   GrammarData.Imper -> GrammarData.$fEnumIlloc7 }) -}
0b723dd66110bae4a164ef4cfb3bebd4
  $fEnumIlloc_$ctoEnum :: GHC.Types.Int -> GrammarData.Illoc
  {- Arity: 1, Strictness: <S,1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: GHC.Types.Int ->
                 case w of ww { GHC.Types.I# ww1 ->
                 GrammarData.$w$ctoEnum2 ww1 }) -}
0b723dd66110bae4a164ef4cfb3bebd4
  $fEnumIlloc_c ::
    GHC.Types.Int -> [GrammarData.Illoc] -> [GrammarData.Illoc]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int ys :: [GrammarData.Illoc] ->
                 GHC.Types.:
                   @ GrammarData.Illoc
                   (case x of wild { GHC.Types.I# a13 ->
                    GHC.Prim.tagToEnum# @ GrammarData.Illoc a13 })
                   ys) -}
0b723dd66110bae4a164ef4cfb3bebd4
  $fEnumIlloc_go :: GHC.Prim.Int# -> [GrammarData.Illoc]
  {- Arity: 1, Strictness: <L,U> -}
0b723dd66110bae4a164ef4cfb3bebd4
  $fEnumIlloc_go1 :: GHC.Prim.Int# -> [GrammarData.Illoc]
  {- Arity: 1, Strictness: <L,U> -}
0b723dd66110bae4a164ef4cfb3bebd4
  $fEnumIlloc_go2 :: GHC.Prim.Int# -> [GrammarData.Illoc]
  {- Arity: 1, Strictness: <L,U> -}
0b723dd66110bae4a164ef4cfb3bebd4
  $fEnumIlloc_go3 :: GHC.Prim.Int# -> [GrammarData.Illoc]
  {- Arity: 1, Strictness: <L,U> -}
0b723dd66110bae4a164ef4cfb3bebd4
  $fEnumIlloc_go4 :: GHC.Prim.Int# -> [GrammarData.Illoc]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
0b723dd66110bae4a164ef4cfb3bebd4
  $fEnumIlloc_go5 :: GHC.Prim.Int# -> [GrammarData.Illoc]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
0b723dd66110bae4a164ef4cfb3bebd4
  $fEnumIlloc_go6 :: GHC.Prim.Int# -> [GrammarData.Illoc]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
0b723dd66110bae4a164ef4cfb3bebd4
  $fEnumIlloc_go7 :: GHC.Prim.Int# -> [GrammarData.Illoc]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
be5e38a33a1f6f8dedf69a22bff6d6f1
  $fEnumItoCMovement :: GHC.Enum.Enum GrammarData.ItoCMovement
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.ItoCMovement
                  GrammarData.$fEnumItoCMovement_$csucc
                  GrammarData.$fEnumItoCMovement_$cpred
                  GrammarData.$fEnumItoCMovement_$ctoEnum
                  GrammarData.$fEnumItoCMovement_$cfromEnum
                  GrammarData.$fEnumItoCMovement_$cenumFrom
                  GrammarData.$fEnumItoCMovement_$cenumFromThen
                  GrammarData.$fEnumItoCMovement_$cenumFromTo
                  GrammarData.$fEnumItoCMovement_$cenumFromThenTo -}
be5e38a33a1f6f8dedf69a22bff6d6f1
  $fEnumItoCMovement1 :: GHC.Prim.Int# -> GrammarData.ItoCMovement
  {- Arity: 1, Strictness: <L,U>b -}
be5e38a33a1f6f8dedf69a22bff6d6f1
  $fEnumItoCMovement2 :: [GrammarData.ItoCMovement]
  {- Unfolding: (GrammarData.$fEnumItoCMovement_go2 1) -}
be5e38a33a1f6f8dedf69a22bff6d6f1
  $fEnumItoCMovement3 :: [GrammarData.ItoCMovement]
  {- Unfolding: (GrammarData.$fEnumItoCMovement_go3 0) -}
be5e38a33a1f6f8dedf69a22bff6d6f1
  $fEnumItoCMovement4 :: GrammarData.ItoCMovement
  {- Strictness: b -}
be5e38a33a1f6f8dedf69a22bff6d6f1
  $fEnumItoCMovement5 :: GrammarData.ItoCMovement
  {- Strictness: b -}
be5e38a33a1f6f8dedf69a22bff6d6f1
  $fEnumItoCMovement_$cenumFrom ::
    GrammarData.ItoCMovement -> [GrammarData.ItoCMovement]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ a13 :: GrammarData.ItoCMovement ->
                 case a13 of wild {
                   GrammarData.NoItoCMove -> GrammarData.$fEnumItoCMovement3
                   GrammarData.OblItoCMove -> GrammarData.$fEnumItoCMovement2 }) -}
be5e38a33a1f6f8dedf69a22bff6d6f1
  $fEnumItoCMovement_$cenumFromThen ::
    GrammarData.ItoCMovement
    -> GrammarData.ItoCMovement -> [GrammarData.ItoCMovement]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a13 :: GrammarData.ItoCMovement
                   b :: GrammarData.ItoCMovement ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.ItoCMovement]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ a# :: GHC.Prim.Int#[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int# -> [GrammarData.ItoCMovement]
                         {- Arity: 1, Strictness: <L,U> -}
                       = \ b# :: GHC.Prim.Int#[OneShot] ->
                         let {
                           $j2 :: GHC.Prim.Int# -> [GrammarData.ItoCMovement]
                             {- Arity: 1, Strictness: <L,U> -}
                           = \ y :: GHC.Prim.Int#[OneShot] ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# b# a#) of wild {
                               GHC.Types.False
                               -> GHC.Enum.efdtIntDnFB
                                    @ [GrammarData.ItoCMovement]
                                    GrammarData.$fEnumItoCMovement_c1
                                    (GHC.Types.[] @ GrammarData.ItoCMovement)
                                    a#
                                    b#
                                    y
                               GHC.Types.True
                               -> GHC.Enum.efdtIntUpFB
                                    @ [GrammarData.ItoCMovement]
                                    GrammarData.$fEnumItoCMovement_c1
                                    (GHC.Types.[] @ GrammarData.ItoCMovement)
                                    a#
                                    b#
                                    y }
                         } in
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.># a# b#) of wild {
                           GHC.Types.False -> $j2 1 GHC.Types.True -> $j2 0 }
                     } in
                     case b of wild {
                       GrammarData.NoItoCMove -> $j1 0 GrammarData.OblItoCMove -> $j1 1 }
                 } in
                 case a13 of wild {
                   GrammarData.NoItoCMove -> $j 0
                   GrammarData.OblItoCMove -> $j 1 }) -}
be5e38a33a1f6f8dedf69a22bff6d6f1
  $fEnumItoCMovement_$cenumFromThenTo ::
    GrammarData.ItoCMovement
    -> GrammarData.ItoCMovement
    -> GrammarData.ItoCMovement
    -> [GrammarData.ItoCMovement]
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U>,
     Unfolding: (\ x1 :: GrammarData.ItoCMovement
                   x2 :: GrammarData.ItoCMovement
                   y :: GrammarData.ItoCMovement ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.ItoCMovement]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ x4 :: GHC.Prim.Int#[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int# -> [GrammarData.ItoCMovement]
                         {- Arity: 1, Strictness: <L,U> -}
                       = \ x5 :: GHC.Prim.Int#[OneShot] ->
                         case y of wild {
                           GrammarData.NoItoCMove
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [GrammarData.ItoCMovement]
                                     GrammarData.$fEnumItoCMovement_c
                                     (GHC.Types.[] @ GrammarData.ItoCMovement)
                                     x4
                                     x5
                                     0
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [GrammarData.ItoCMovement]
                                     GrammarData.$fEnumItoCMovement_c
                                     (GHC.Types.[] @ GrammarData.ItoCMovement)
                                     x4
                                     x5
                                     0 }
                           GrammarData.OblItoCMove
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [GrammarData.ItoCMovement]
                                     GrammarData.$fEnumItoCMovement_c
                                     (GHC.Types.[] @ GrammarData.ItoCMovement)
                                     x4
                                     x5
                                     1
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [GrammarData.ItoCMovement]
                                     GrammarData.$fEnumItoCMovement_c
                                     (GHC.Types.[] @ GrammarData.ItoCMovement)
                                     x4
                                     x5
                                     1 } }
                     } in
                     case x2 of wild {
                       GrammarData.NoItoCMove -> $j1 0 GrammarData.OblItoCMove -> $j1 1 }
                 } in
                 case x1 of wild {
                   GrammarData.NoItoCMove -> $j 0
                   GrammarData.OblItoCMove -> $j 1 }) -}
be5e38a33a1f6f8dedf69a22bff6d6f1
  $fEnumItoCMovement_$cenumFromTo ::
    GrammarData.ItoCMovement
    -> GrammarData.ItoCMovement -> [GrammarData.ItoCMovement]
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ x :: GrammarData.ItoCMovement
                   y :: GrammarData.ItoCMovement ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.ItoCMovement]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ x1 :: GHC.Prim.Int#[OneShot] ->
                     case y of wild {
                       GrammarData.NoItoCMove
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 0) of wild1 {
                            GHC.Types.False -> GrammarData.$fEnumItoCMovement_go1 x1
                            GHC.Types.True -> GHC.Types.[] @ GrammarData.ItoCMovement }
                       GrammarData.OblItoCMove
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 1) of wild1 {
                            GHC.Types.False -> GrammarData.$fEnumItoCMovement_go x1
                            GHC.Types.True -> GHC.Types.[] @ GrammarData.ItoCMovement } }
                 } in
                 case x of wild {
                   GrammarData.NoItoCMove -> $j 0
                   GrammarData.OblItoCMove -> $j 1 }) -}
be5e38a33a1f6f8dedf69a22bff6d6f1
  $fEnumItoCMovement_$cfromEnum ::
    GrammarData.ItoCMovement -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.ItoCMovement ->
                 case a13 of wild {
                   GrammarData.NoItoCMove -> GHC.Types.I# 0
                   GrammarData.OblItoCMove -> GHC.Types.I# 1 }) -}
be5e38a33a1f6f8dedf69a22bff6d6f1
  $fEnumItoCMovement_$cpred ::
    GrammarData.ItoCMovement -> GrammarData.ItoCMovement
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.ItoCMovement ->
                 case a13 of wild {
                   GrammarData.NoItoCMove -> GrammarData.$fEnumItoCMovement4
                   GrammarData.OblItoCMove -> GrammarData.NoItoCMove }) -}
be5e38a33a1f6f8dedf69a22bff6d6f1
  $fEnumItoCMovement_$csucc ::
    GrammarData.ItoCMovement -> GrammarData.ItoCMovement
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.ItoCMovement ->
                 case a13 of wild {
                   GrammarData.NoItoCMove -> GrammarData.OblItoCMove
                   GrammarData.OblItoCMove -> GrammarData.$fEnumItoCMovement5 }) -}
be5e38a33a1f6f8dedf69a22bff6d6f1
  $fEnumItoCMovement_$ctoEnum ::
    GHC.Types.Int -> GrammarData.ItoCMovement
  {- Arity: 1, Strictness: <S,1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: GHC.Types.Int ->
                 case w of ww { GHC.Types.I# ww1 ->
                 GrammarData.$w$ctoEnum3 ww1 }) -}
be5e38a33a1f6f8dedf69a22bff6d6f1
  $fEnumItoCMovement_c ::
    GHC.Types.Int
    -> [GrammarData.ItoCMovement] -> [GrammarData.ItoCMovement]
  {- Arity: 2, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int ys :: [GrammarData.ItoCMovement] ->
                 GHC.Types.:
                   @ GrammarData.ItoCMovement
                   (GrammarData.$fEnumItoCMovement_$ctoEnum x)
                   ys) -}
be5e38a33a1f6f8dedf69a22bff6d6f1
  $fEnumItoCMovement_c1 ::
    GHC.Types.Int
    -> [GrammarData.ItoCMovement] -> [GrammarData.ItoCMovement]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int ys :: [GrammarData.ItoCMovement] ->
                 GHC.Types.:
                   @ GrammarData.ItoCMovement
                   (case x of wild { GHC.Types.I# a13 ->
                    GHC.Prim.tagToEnum# @ GrammarData.ItoCMovement a13 })
                   ys) -}
be5e38a33a1f6f8dedf69a22bff6d6f1
  $fEnumItoCMovement_go ::
    GHC.Prim.Int# -> [GrammarData.ItoCMovement]
  {- Arity: 1, Strictness: <L,U> -}
be5e38a33a1f6f8dedf69a22bff6d6f1
  $fEnumItoCMovement_go1 ::
    GHC.Prim.Int# -> [GrammarData.ItoCMovement]
  {- Arity: 1, Strictness: <L,U> -}
be5e38a33a1f6f8dedf69a22bff6d6f1
  $fEnumItoCMovement_go2 ::
    GHC.Prim.Int# -> [GrammarData.ItoCMovement]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
be5e38a33a1f6f8dedf69a22bff6d6f1
  $fEnumItoCMovement_go3 ::
    GHC.Prim.Int# -> [GrammarData.ItoCMovement]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
1b4b07b4babd1eb036e98b6d73553688
  $fEnumNullSubject :: GHC.Enum.Enum GrammarData.NullSubject
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.NullSubject
                  GrammarData.$fEnumNullSubject_$csucc
                  GrammarData.$fEnumNullSubject_$cpred
                  GrammarData.$fEnumNullSubject_$ctoEnum
                  GrammarData.$fEnumNullSubject_$cfromEnum
                  GrammarData.$fEnumNullSubject_$cenumFrom
                  GrammarData.$fEnumNullSubject_$cenumFromThen
                  GrammarData.$fEnumNullSubject_$cenumFromTo
                  GrammarData.$fEnumNullSubject_$cenumFromThenTo -}
1b4b07b4babd1eb036e98b6d73553688
  $fEnumNullSubject1 :: GHC.Prim.Int# -> GrammarData.NullSubject
  {- Arity: 1, Strictness: <L,U>b -}
1b4b07b4babd1eb036e98b6d73553688
  $fEnumNullSubject2 :: [GrammarData.NullSubject]
  {- Unfolding: (GrammarData.$fEnumNullSubject_go2 1) -}
1b4b07b4babd1eb036e98b6d73553688
  $fEnumNullSubject3 :: [GrammarData.NullSubject]
  {- Unfolding: (GrammarData.$fEnumNullSubject_go3 0) -}
1b4b07b4babd1eb036e98b6d73553688
  $fEnumNullSubject4 :: GrammarData.NullSubject
  {- Strictness: b -}
1b4b07b4babd1eb036e98b6d73553688
  $fEnumNullSubject5 :: GrammarData.NullSubject
  {- Strictness: b -}
1b4b07b4babd1eb036e98b6d73553688
  $fEnumNullSubject_$cenumFrom ::
    GrammarData.NullSubject -> [GrammarData.NullSubject]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ a13 :: GrammarData.NullSubject ->
                 case a13 of wild {
                   GrammarData.NoNullSub -> GrammarData.$fEnumNullSubject3
                   GrammarData.OptNullSub -> GrammarData.$fEnumNullSubject2 }) -}
1b4b07b4babd1eb036e98b6d73553688
  $fEnumNullSubject_$cenumFromThen ::
    GrammarData.NullSubject
    -> GrammarData.NullSubject -> [GrammarData.NullSubject]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a13 :: GrammarData.NullSubject
                   b :: GrammarData.NullSubject ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.NullSubject]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ a# :: GHC.Prim.Int#[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int# -> [GrammarData.NullSubject]
                         {- Arity: 1, Strictness: <L,U> -}
                       = \ b# :: GHC.Prim.Int#[OneShot] ->
                         let {
                           $j2 :: GHC.Prim.Int# -> [GrammarData.NullSubject]
                             {- Arity: 1, Strictness: <L,U> -}
                           = \ y :: GHC.Prim.Int#[OneShot] ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# b# a#) of wild {
                               GHC.Types.False
                               -> GHC.Enum.efdtIntDnFB
                                    @ [GrammarData.NullSubject]
                                    GrammarData.$fEnumNullSubject_c1
                                    (GHC.Types.[] @ GrammarData.NullSubject)
                                    a#
                                    b#
                                    y
                               GHC.Types.True
                               -> GHC.Enum.efdtIntUpFB
                                    @ [GrammarData.NullSubject]
                                    GrammarData.$fEnumNullSubject_c1
                                    (GHC.Types.[] @ GrammarData.NullSubject)
                                    a#
                                    b#
                                    y }
                         } in
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.># a# b#) of wild {
                           GHC.Types.False -> $j2 1 GHC.Types.True -> $j2 0 }
                     } in
                     case b of wild {
                       GrammarData.NoNullSub -> $j1 0 GrammarData.OptNullSub -> $j1 1 }
                 } in
                 case a13 of wild {
                   GrammarData.NoNullSub -> $j 0 GrammarData.OptNullSub -> $j 1 }) -}
1b4b07b4babd1eb036e98b6d73553688
  $fEnumNullSubject_$cenumFromThenTo ::
    GrammarData.NullSubject
    -> GrammarData.NullSubject
    -> GrammarData.NullSubject
    -> [GrammarData.NullSubject]
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U>,
     Unfolding: (\ x1 :: GrammarData.NullSubject
                   x2 :: GrammarData.NullSubject
                   y :: GrammarData.NullSubject ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.NullSubject]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ x4 :: GHC.Prim.Int#[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int# -> [GrammarData.NullSubject]
                         {- Arity: 1, Strictness: <L,U> -}
                       = \ x5 :: GHC.Prim.Int#[OneShot] ->
                         case y of wild {
                           GrammarData.NoNullSub
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [GrammarData.NullSubject]
                                     GrammarData.$fEnumNullSubject_c
                                     (GHC.Types.[] @ GrammarData.NullSubject)
                                     x4
                                     x5
                                     0
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [GrammarData.NullSubject]
                                     GrammarData.$fEnumNullSubject_c
                                     (GHC.Types.[] @ GrammarData.NullSubject)
                                     x4
                                     x5
                                     0 }
                           GrammarData.OptNullSub
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [GrammarData.NullSubject]
                                     GrammarData.$fEnumNullSubject_c
                                     (GHC.Types.[] @ GrammarData.NullSubject)
                                     x4
                                     x5
                                     1
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [GrammarData.NullSubject]
                                     GrammarData.$fEnumNullSubject_c
                                     (GHC.Types.[] @ GrammarData.NullSubject)
                                     x4
                                     x5
                                     1 } }
                     } in
                     case x2 of wild {
                       GrammarData.NoNullSub -> $j1 0 GrammarData.OptNullSub -> $j1 1 }
                 } in
                 case x1 of wild {
                   GrammarData.NoNullSub -> $j 0 GrammarData.OptNullSub -> $j 1 }) -}
1b4b07b4babd1eb036e98b6d73553688
  $fEnumNullSubject_$cenumFromTo ::
    GrammarData.NullSubject
    -> GrammarData.NullSubject -> [GrammarData.NullSubject]
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ x :: GrammarData.NullSubject
                   y :: GrammarData.NullSubject ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.NullSubject]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ x1 :: GHC.Prim.Int#[OneShot] ->
                     case y of wild {
                       GrammarData.NoNullSub
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 0) of wild1 {
                            GHC.Types.False -> GrammarData.$fEnumNullSubject_go1 x1
                            GHC.Types.True -> GHC.Types.[] @ GrammarData.NullSubject }
                       GrammarData.OptNullSub
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 1) of wild1 {
                            GHC.Types.False -> GrammarData.$fEnumNullSubject_go x1
                            GHC.Types.True -> GHC.Types.[] @ GrammarData.NullSubject } }
                 } in
                 case x of wild {
                   GrammarData.NoNullSub -> $j 0 GrammarData.OptNullSub -> $j 1 }) -}
1b4b07b4babd1eb036e98b6d73553688
  $fEnumNullSubject_$cfromEnum ::
    GrammarData.NullSubject -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.NullSubject ->
                 case a13 of wild {
                   GrammarData.NoNullSub -> GHC.Types.I# 0
                   GrammarData.OptNullSub -> GHC.Types.I# 1 }) -}
1b4b07b4babd1eb036e98b6d73553688
  $fEnumNullSubject_$cpred ::
    GrammarData.NullSubject -> GrammarData.NullSubject
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.NullSubject ->
                 case a13 of wild {
                   GrammarData.NoNullSub -> GrammarData.$fEnumNullSubject4
                   GrammarData.OptNullSub -> GrammarData.NoNullSub }) -}
1b4b07b4babd1eb036e98b6d73553688
  $fEnumNullSubject_$csucc ::
    GrammarData.NullSubject -> GrammarData.NullSubject
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.NullSubject ->
                 case a13 of wild {
                   GrammarData.NoNullSub -> GrammarData.OptNullSub
                   GrammarData.OptNullSub -> GrammarData.$fEnumNullSubject5 }) -}
1b4b07b4babd1eb036e98b6d73553688
  $fEnumNullSubject_$ctoEnum ::
    GHC.Types.Int -> GrammarData.NullSubject
  {- Arity: 1, Strictness: <S,1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: GHC.Types.Int ->
                 case w of ww { GHC.Types.I# ww1 ->
                 GrammarData.$w$ctoEnum4 ww1 }) -}
1b4b07b4babd1eb036e98b6d73553688
  $fEnumNullSubject_c ::
    GHC.Types.Int
    -> [GrammarData.NullSubject] -> [GrammarData.NullSubject]
  {- Arity: 2, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int ys :: [GrammarData.NullSubject] ->
                 GHC.Types.:
                   @ GrammarData.NullSubject
                   (GrammarData.$fEnumNullSubject_$ctoEnum x)
                   ys) -}
1b4b07b4babd1eb036e98b6d73553688
  $fEnumNullSubject_c1 ::
    GHC.Types.Int
    -> [GrammarData.NullSubject] -> [GrammarData.NullSubject]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int ys :: [GrammarData.NullSubject] ->
                 GHC.Types.:
                   @ GrammarData.NullSubject
                   (case x of wild { GHC.Types.I# a13 ->
                    GHC.Prim.tagToEnum# @ GrammarData.NullSubject a13 })
                   ys) -}
1b4b07b4babd1eb036e98b6d73553688
  $fEnumNullSubject_go :: GHC.Prim.Int# -> [GrammarData.NullSubject]
  {- Arity: 1, Strictness: <L,U> -}
1b4b07b4babd1eb036e98b6d73553688
  $fEnumNullSubject_go1 :: GHC.Prim.Int# -> [GrammarData.NullSubject]
  {- Arity: 1, Strictness: <L,U> -}
1b4b07b4babd1eb036e98b6d73553688
  $fEnumNullSubject_go2 :: GHC.Prim.Int# -> [GrammarData.NullSubject]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
1b4b07b4babd1eb036e98b6d73553688
  $fEnumNullSubject_go3 :: GHC.Prim.Int# -> [GrammarData.NullSubject]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
46091d0005c8b4e70b593eb7aef83709
  $fEnumNullTopic :: GHC.Enum.Enum GrammarData.NullTopic
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.NullTopic
                  GrammarData.$fEnumNullTopic_$csucc
                  GrammarData.$fEnumNullTopic_$cpred
                  GrammarData.$fEnumNullTopic_$ctoEnum
                  GrammarData.$fEnumNullTopic_$cfromEnum
                  GrammarData.$fEnumNullTopic_$cenumFrom
                  GrammarData.$fEnumNullTopic_$cenumFromThen
                  GrammarData.$fEnumNullTopic_$cenumFromTo
                  GrammarData.$fEnumNullTopic_$cenumFromThenTo -}
46091d0005c8b4e70b593eb7aef83709
  $fEnumNullTopic1 :: GHC.Prim.Int# -> GrammarData.NullTopic
  {- Arity: 1, Strictness: <L,U>b -}
46091d0005c8b4e70b593eb7aef83709
  $fEnumNullTopic2 :: [GrammarData.NullTopic]
  {- Unfolding: (GrammarData.$fEnumNullTopic_go2 1) -}
46091d0005c8b4e70b593eb7aef83709
  $fEnumNullTopic3 :: [GrammarData.NullTopic]
  {- Unfolding: (GrammarData.$fEnumNullTopic_go3 0) -}
46091d0005c8b4e70b593eb7aef83709
  $fEnumNullTopic4 :: GrammarData.NullTopic
  {- Strictness: b -}
46091d0005c8b4e70b593eb7aef83709
  $fEnumNullTopic5 :: GrammarData.NullTopic
  {- Strictness: b -}
46091d0005c8b4e70b593eb7aef83709
  $fEnumNullTopic_$cenumFrom ::
    GrammarData.NullTopic -> [GrammarData.NullTopic]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ a13 :: GrammarData.NullTopic ->
                 case a13 of wild {
                   GrammarData.NoNullTop -> GrammarData.$fEnumNullTopic3
                   GrammarData.OptNullTop -> GrammarData.$fEnumNullTopic2 }) -}
46091d0005c8b4e70b593eb7aef83709
  $fEnumNullTopic_$cenumFromThen ::
    GrammarData.NullTopic
    -> GrammarData.NullTopic -> [GrammarData.NullTopic]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a13 :: GrammarData.NullTopic
                   b :: GrammarData.NullTopic ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.NullTopic]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ a# :: GHC.Prim.Int#[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int# -> [GrammarData.NullTopic]
                         {- Arity: 1, Strictness: <L,U> -}
                       = \ b# :: GHC.Prim.Int#[OneShot] ->
                         let {
                           $j2 :: GHC.Prim.Int# -> [GrammarData.NullTopic]
                             {- Arity: 1, Strictness: <L,U> -}
                           = \ y :: GHC.Prim.Int#[OneShot] ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# b# a#) of wild {
                               GHC.Types.False
                               -> GHC.Enum.efdtIntDnFB
                                    @ [GrammarData.NullTopic]
                                    GrammarData.$fEnumNullTopic_c1
                                    (GHC.Types.[] @ GrammarData.NullTopic)
                                    a#
                                    b#
                                    y
                               GHC.Types.True
                               -> GHC.Enum.efdtIntUpFB
                                    @ [GrammarData.NullTopic]
                                    GrammarData.$fEnumNullTopic_c1
                                    (GHC.Types.[] @ GrammarData.NullTopic)
                                    a#
                                    b#
                                    y }
                         } in
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.># a# b#) of wild {
                           GHC.Types.False -> $j2 1 GHC.Types.True -> $j2 0 }
                     } in
                     case b of wild {
                       GrammarData.NoNullTop -> $j1 0 GrammarData.OptNullTop -> $j1 1 }
                 } in
                 case a13 of wild {
                   GrammarData.NoNullTop -> $j 0 GrammarData.OptNullTop -> $j 1 }) -}
46091d0005c8b4e70b593eb7aef83709
  $fEnumNullTopic_$cenumFromThenTo ::
    GrammarData.NullTopic
    -> GrammarData.NullTopic
    -> GrammarData.NullTopic
    -> [GrammarData.NullTopic]
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U>,
     Unfolding: (\ x1 :: GrammarData.NullTopic
                   x2 :: GrammarData.NullTopic
                   y :: GrammarData.NullTopic ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.NullTopic]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ x4 :: GHC.Prim.Int#[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int# -> [GrammarData.NullTopic]
                         {- Arity: 1, Strictness: <L,U> -}
                       = \ x5 :: GHC.Prim.Int#[OneShot] ->
                         case y of wild {
                           GrammarData.NoNullTop
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [GrammarData.NullTopic]
                                     GrammarData.$fEnumNullTopic_c
                                     (GHC.Types.[] @ GrammarData.NullTopic)
                                     x4
                                     x5
                                     0
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [GrammarData.NullTopic]
                                     GrammarData.$fEnumNullTopic_c
                                     (GHC.Types.[] @ GrammarData.NullTopic)
                                     x4
                                     x5
                                     0 }
                           GrammarData.OptNullTop
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [GrammarData.NullTopic]
                                     GrammarData.$fEnumNullTopic_c
                                     (GHC.Types.[] @ GrammarData.NullTopic)
                                     x4
                                     x5
                                     1
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [GrammarData.NullTopic]
                                     GrammarData.$fEnumNullTopic_c
                                     (GHC.Types.[] @ GrammarData.NullTopic)
                                     x4
                                     x5
                                     1 } }
                     } in
                     case x2 of wild {
                       GrammarData.NoNullTop -> $j1 0 GrammarData.OptNullTop -> $j1 1 }
                 } in
                 case x1 of wild {
                   GrammarData.NoNullTop -> $j 0 GrammarData.OptNullTop -> $j 1 }) -}
46091d0005c8b4e70b593eb7aef83709
  $fEnumNullTopic_$cenumFromTo ::
    GrammarData.NullTopic
    -> GrammarData.NullTopic -> [GrammarData.NullTopic]
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ x :: GrammarData.NullTopic
                   y :: GrammarData.NullTopic ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.NullTopic]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ x1 :: GHC.Prim.Int#[OneShot] ->
                     case y of wild {
                       GrammarData.NoNullTop
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 0) of wild1 {
                            GHC.Types.False -> GrammarData.$fEnumNullTopic_go1 x1
                            GHC.Types.True -> GHC.Types.[] @ GrammarData.NullTopic }
                       GrammarData.OptNullTop
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 1) of wild1 {
                            GHC.Types.False -> GrammarData.$fEnumNullTopic_go x1
                            GHC.Types.True -> GHC.Types.[] @ GrammarData.NullTopic } }
                 } in
                 case x of wild {
                   GrammarData.NoNullTop -> $j 0 GrammarData.OptNullTop -> $j 1 }) -}
46091d0005c8b4e70b593eb7aef83709
  $fEnumNullTopic_$cfromEnum ::
    GrammarData.NullTopic -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.NullTopic ->
                 case a13 of wild {
                   GrammarData.NoNullTop -> GHC.Types.I# 0
                   GrammarData.OptNullTop -> GHC.Types.I# 1 }) -}
46091d0005c8b4e70b593eb7aef83709
  $fEnumNullTopic_$cpred ::
    GrammarData.NullTopic -> GrammarData.NullTopic
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.NullTopic ->
                 case a13 of wild {
                   GrammarData.NoNullTop -> GrammarData.$fEnumNullTopic4
                   GrammarData.OptNullTop -> GrammarData.NoNullTop }) -}
46091d0005c8b4e70b593eb7aef83709
  $fEnumNullTopic_$csucc ::
    GrammarData.NullTopic -> GrammarData.NullTopic
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.NullTopic ->
                 case a13 of wild {
                   GrammarData.NoNullTop -> GrammarData.OptNullTop
                   GrammarData.OptNullTop -> GrammarData.$fEnumNullTopic5 }) -}
46091d0005c8b4e70b593eb7aef83709
  $fEnumNullTopic_$ctoEnum :: GHC.Types.Int -> GrammarData.NullTopic
  {- Arity: 1, Strictness: <S,1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: GHC.Types.Int ->
                 case w of ww { GHC.Types.I# ww1 ->
                 GrammarData.$w$ctoEnum5 ww1 }) -}
46091d0005c8b4e70b593eb7aef83709
  $fEnumNullTopic_c ::
    GHC.Types.Int -> [GrammarData.NullTopic] -> [GrammarData.NullTopic]
  {- Arity: 2, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int ys :: [GrammarData.NullTopic] ->
                 GHC.Types.:
                   @ GrammarData.NullTopic
                   (GrammarData.$fEnumNullTopic_$ctoEnum x)
                   ys) -}
46091d0005c8b4e70b593eb7aef83709
  $fEnumNullTopic_c1 ::
    GHC.Types.Int -> [GrammarData.NullTopic] -> [GrammarData.NullTopic]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int ys :: [GrammarData.NullTopic] ->
                 GHC.Types.:
                   @ GrammarData.NullTopic
                   (case x of wild { GHC.Types.I# a13 ->
                    GHC.Prim.tagToEnum# @ GrammarData.NullTopic a13 })
                   ys) -}
46091d0005c8b4e70b593eb7aef83709
  $fEnumNullTopic_go :: GHC.Prim.Int# -> [GrammarData.NullTopic]
  {- Arity: 1, Strictness: <L,U> -}
46091d0005c8b4e70b593eb7aef83709
  $fEnumNullTopic_go1 :: GHC.Prim.Int# -> [GrammarData.NullTopic]
  {- Arity: 1, Strictness: <L,U> -}
46091d0005c8b4e70b593eb7aef83709
  $fEnumNullTopic_go2 :: GHC.Prim.Int# -> [GrammarData.NullTopic]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
46091d0005c8b4e70b593eb7aef83709
  $fEnumNullTopic_go3 :: GHC.Prim.Int# -> [GrammarData.NullTopic]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
c2c0ea9981f3d6eed112f850f7ea6beb
  $fEnumObjectFinal :: GHC.Enum.Enum GrammarData.ObjectFinal
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.ObjectFinal
                  GrammarData.$fEnumObjectFinal_$csucc
                  GrammarData.$fEnumObjectFinal_$cpred
                  GrammarData.$fEnumObjectFinal_$ctoEnum
                  GrammarData.$fEnumObjectFinal_$cfromEnum
                  GrammarData.$fEnumObjectFinal_$cenumFrom
                  GrammarData.$fEnumObjectFinal_$cenumFromThen
                  GrammarData.$fEnumObjectFinal_$cenumFromTo
                  GrammarData.$fEnumObjectFinal_$cenumFromThenTo -}
c2c0ea9981f3d6eed112f850f7ea6beb
  $fEnumObjectFinal1 :: GHC.Prim.Int# -> GrammarData.ObjectFinal
  {- Arity: 1, Strictness: <L,U>b -}
c2c0ea9981f3d6eed112f850f7ea6beb
  $fEnumObjectFinal2 :: [GrammarData.ObjectFinal]
  {- Unfolding: (GrammarData.$fEnumObjectFinal_go2 1) -}
c2c0ea9981f3d6eed112f850f7ea6beb
  $fEnumObjectFinal3 :: [GrammarData.ObjectFinal]
  {- Unfolding: (GrammarData.$fEnumObjectFinal_go3 0) -}
c2c0ea9981f3d6eed112f850f7ea6beb
  $fEnumObjectFinal4 :: GrammarData.ObjectFinal
  {- Strictness: b -}
c2c0ea9981f3d6eed112f850f7ea6beb
  $fEnumObjectFinal5 :: GrammarData.ObjectFinal
  {- Strictness: b -}
c2c0ea9981f3d6eed112f850f7ea6beb
  $fEnumObjectFinal_$cenumFrom ::
    GrammarData.ObjectFinal -> [GrammarData.ObjectFinal]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ a13 :: GrammarData.ObjectFinal ->
                 case a13 of wild {
                   GrammarData.ObjFinal -> GrammarData.$fEnumObjectFinal3
                   GrammarData.ObjInitial -> GrammarData.$fEnumObjectFinal2 }) -}
c2c0ea9981f3d6eed112f850f7ea6beb
  $fEnumObjectFinal_$cenumFromThen ::
    GrammarData.ObjectFinal
    -> GrammarData.ObjectFinal -> [GrammarData.ObjectFinal]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a13 :: GrammarData.ObjectFinal
                   b :: GrammarData.ObjectFinal ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.ObjectFinal]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ a# :: GHC.Prim.Int#[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int# -> [GrammarData.ObjectFinal]
                         {- Arity: 1, Strictness: <L,U> -}
                       = \ b# :: GHC.Prim.Int#[OneShot] ->
                         let {
                           $j2 :: GHC.Prim.Int# -> [GrammarData.ObjectFinal]
                             {- Arity: 1, Strictness: <L,U> -}
                           = \ y :: GHC.Prim.Int#[OneShot] ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# b# a#) of wild {
                               GHC.Types.False
                               -> GHC.Enum.efdtIntDnFB
                                    @ [GrammarData.ObjectFinal]
                                    GrammarData.$fEnumObjectFinal_c1
                                    (GHC.Types.[] @ GrammarData.ObjectFinal)
                                    a#
                                    b#
                                    y
                               GHC.Types.True
                               -> GHC.Enum.efdtIntUpFB
                                    @ [GrammarData.ObjectFinal]
                                    GrammarData.$fEnumObjectFinal_c1
                                    (GHC.Types.[] @ GrammarData.ObjectFinal)
                                    a#
                                    b#
                                    y }
                         } in
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.># a# b#) of wild {
                           GHC.Types.False -> $j2 1 GHC.Types.True -> $j2 0 }
                     } in
                     case b of wild {
                       GrammarData.ObjFinal -> $j1 0 GrammarData.ObjInitial -> $j1 1 }
                 } in
                 case a13 of wild {
                   GrammarData.ObjFinal -> $j 0 GrammarData.ObjInitial -> $j 1 }) -}
c2c0ea9981f3d6eed112f850f7ea6beb
  $fEnumObjectFinal_$cenumFromThenTo ::
    GrammarData.ObjectFinal
    -> GrammarData.ObjectFinal
    -> GrammarData.ObjectFinal
    -> [GrammarData.ObjectFinal]
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U>,
     Unfolding: (\ x1 :: GrammarData.ObjectFinal
                   x2 :: GrammarData.ObjectFinal
                   y :: GrammarData.ObjectFinal ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.ObjectFinal]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ x4 :: GHC.Prim.Int#[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int# -> [GrammarData.ObjectFinal]
                         {- Arity: 1, Strictness: <L,U> -}
                       = \ x5 :: GHC.Prim.Int#[OneShot] ->
                         case y of wild {
                           GrammarData.ObjFinal
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [GrammarData.ObjectFinal]
                                     GrammarData.$fEnumObjectFinal_c
                                     (GHC.Types.[] @ GrammarData.ObjectFinal)
                                     x4
                                     x5
                                     0
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [GrammarData.ObjectFinal]
                                     GrammarData.$fEnumObjectFinal_c
                                     (GHC.Types.[] @ GrammarData.ObjectFinal)
                                     x4
                                     x5
                                     0 }
                           GrammarData.ObjInitial
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [GrammarData.ObjectFinal]
                                     GrammarData.$fEnumObjectFinal_c
                                     (GHC.Types.[] @ GrammarData.ObjectFinal)
                                     x4
                                     x5
                                     1
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [GrammarData.ObjectFinal]
                                     GrammarData.$fEnumObjectFinal_c
                                     (GHC.Types.[] @ GrammarData.ObjectFinal)
                                     x4
                                     x5
                                     1 } }
                     } in
                     case x2 of wild {
                       GrammarData.ObjFinal -> $j1 0 GrammarData.ObjInitial -> $j1 1 }
                 } in
                 case x1 of wild {
                   GrammarData.ObjFinal -> $j 0 GrammarData.ObjInitial -> $j 1 }) -}
c2c0ea9981f3d6eed112f850f7ea6beb
  $fEnumObjectFinal_$cenumFromTo ::
    GrammarData.ObjectFinal
    -> GrammarData.ObjectFinal -> [GrammarData.ObjectFinal]
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ x :: GrammarData.ObjectFinal
                   y :: GrammarData.ObjectFinal ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.ObjectFinal]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ x1 :: GHC.Prim.Int#[OneShot] ->
                     case y of wild {
                       GrammarData.ObjFinal
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 0) of wild1 {
                            GHC.Types.False -> GrammarData.$fEnumObjectFinal_go1 x1
                            GHC.Types.True -> GHC.Types.[] @ GrammarData.ObjectFinal }
                       GrammarData.ObjInitial
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 1) of wild1 {
                            GHC.Types.False -> GrammarData.$fEnumObjectFinal_go x1
                            GHC.Types.True -> GHC.Types.[] @ GrammarData.ObjectFinal } }
                 } in
                 case x of wild {
                   GrammarData.ObjFinal -> $j 0 GrammarData.ObjInitial -> $j 1 }) -}
c2c0ea9981f3d6eed112f850f7ea6beb
  $fEnumObjectFinal_$cfromEnum ::
    GrammarData.ObjectFinal -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.ObjectFinal ->
                 case a13 of wild {
                   GrammarData.ObjFinal -> GHC.Types.I# 0
                   GrammarData.ObjInitial -> GHC.Types.I# 1 }) -}
c2c0ea9981f3d6eed112f850f7ea6beb
  $fEnumObjectFinal_$cpred ::
    GrammarData.ObjectFinal -> GrammarData.ObjectFinal
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.ObjectFinal ->
                 case a13 of wild {
                   GrammarData.ObjFinal -> GrammarData.$fEnumObjectFinal4
                   GrammarData.ObjInitial -> GrammarData.ObjFinal }) -}
c2c0ea9981f3d6eed112f850f7ea6beb
  $fEnumObjectFinal_$csucc ::
    GrammarData.ObjectFinal -> GrammarData.ObjectFinal
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.ObjectFinal ->
                 case a13 of wild {
                   GrammarData.ObjFinal -> GrammarData.ObjInitial
                   GrammarData.ObjInitial -> GrammarData.$fEnumObjectFinal5 }) -}
c2c0ea9981f3d6eed112f850f7ea6beb
  $fEnumObjectFinal_$ctoEnum ::
    GHC.Types.Int -> GrammarData.ObjectFinal
  {- Arity: 1, Strictness: <S,1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: GHC.Types.Int ->
                 case w of ww { GHC.Types.I# ww1 ->
                 GrammarData.$w$ctoEnum6 ww1 }) -}
c2c0ea9981f3d6eed112f850f7ea6beb
  $fEnumObjectFinal_c ::
    GHC.Types.Int
    -> [GrammarData.ObjectFinal] -> [GrammarData.ObjectFinal]
  {- Arity: 2, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int ys :: [GrammarData.ObjectFinal] ->
                 GHC.Types.:
                   @ GrammarData.ObjectFinal
                   (GrammarData.$fEnumObjectFinal_$ctoEnum x)
                   ys) -}
c2c0ea9981f3d6eed112f850f7ea6beb
  $fEnumObjectFinal_c1 ::
    GHC.Types.Int
    -> [GrammarData.ObjectFinal] -> [GrammarData.ObjectFinal]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int ys :: [GrammarData.ObjectFinal] ->
                 GHC.Types.:
                   @ GrammarData.ObjectFinal
                   (case x of wild { GHC.Types.I# a13 ->
                    GHC.Prim.tagToEnum# @ GrammarData.ObjectFinal a13 })
                   ys) -}
c2c0ea9981f3d6eed112f850f7ea6beb
  $fEnumObjectFinal_go :: GHC.Prim.Int# -> [GrammarData.ObjectFinal]
  {- Arity: 1, Strictness: <L,U> -}
c2c0ea9981f3d6eed112f850f7ea6beb
  $fEnumObjectFinal_go1 :: GHC.Prim.Int# -> [GrammarData.ObjectFinal]
  {- Arity: 1, Strictness: <L,U> -}
c2c0ea9981f3d6eed112f850f7ea6beb
  $fEnumObjectFinal_go2 :: GHC.Prim.Int# -> [GrammarData.ObjectFinal]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
c2c0ea9981f3d6eed112f850f7ea6beb
  $fEnumObjectFinal_go3 :: GHC.Prim.Int# -> [GrammarData.ObjectFinal]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
69babcc57bbc447bbcd2b156d19a1d60
  $fEnumObligatoryTopic :: GHC.Enum.Enum GrammarData.ObligatoryTopic
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.ObligatoryTopic
                  GrammarData.$fEnumObligatoryTopic_$csucc
                  GrammarData.$fEnumObligatoryTopic_$cpred
                  GrammarData.$fEnumObligatoryTopic_$ctoEnum
                  GrammarData.$fEnumObligatoryTopic_$cfromEnum
                  GrammarData.$fEnumObligatoryTopic_$cenumFrom
                  GrammarData.$fEnumObligatoryTopic_$cenumFromThen
                  GrammarData.$fEnumObligatoryTopic_$cenumFromTo
                  GrammarData.$fEnumObligatoryTopic_$cenumFromThenTo -}
69babcc57bbc447bbcd2b156d19a1d60
  $fEnumObligatoryTopic1 ::
    GHC.Prim.Int# -> GrammarData.ObligatoryTopic
  {- Arity: 1, Strictness: <L,U>b -}
69babcc57bbc447bbcd2b156d19a1d60
  $fEnumObligatoryTopic2 :: [GrammarData.ObligatoryTopic]
  {- Unfolding: (GrammarData.$fEnumObligatoryTopic_go2 1) -}
69babcc57bbc447bbcd2b156d19a1d60
  $fEnumObligatoryTopic3 :: [GrammarData.ObligatoryTopic]
  {- Unfolding: (GrammarData.$fEnumObligatoryTopic_go3 0) -}
69babcc57bbc447bbcd2b156d19a1d60
  $fEnumObligatoryTopic4 :: GrammarData.ObligatoryTopic
  {- Strictness: b -}
69babcc57bbc447bbcd2b156d19a1d60
  $fEnumObligatoryTopic5 :: GrammarData.ObligatoryTopic
  {- Strictness: b -}
69babcc57bbc447bbcd2b156d19a1d60
  $fEnumObligatoryTopic_$cenumFrom ::
    GrammarData.ObligatoryTopic -> [GrammarData.ObligatoryTopic]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ a13 :: GrammarData.ObligatoryTopic ->
                 case a13 of wild {
                   GrammarData.OblTopic -> GrammarData.$fEnumObligatoryTopic3
                   GrammarData.OptTopic -> GrammarData.$fEnumObligatoryTopic2 }) -}
69babcc57bbc447bbcd2b156d19a1d60
  $fEnumObligatoryTopic_$cenumFromThen ::
    GrammarData.ObligatoryTopic
    -> GrammarData.ObligatoryTopic -> [GrammarData.ObligatoryTopic]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a13 :: GrammarData.ObligatoryTopic
                   b :: GrammarData.ObligatoryTopic ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.ObligatoryTopic]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ a# :: GHC.Prim.Int#[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int# -> [GrammarData.ObligatoryTopic]
                         {- Arity: 1, Strictness: <L,U> -}
                       = \ b# :: GHC.Prim.Int#[OneShot] ->
                         let {
                           $j2 :: GHC.Prim.Int# -> [GrammarData.ObligatoryTopic]
                             {- Arity: 1, Strictness: <L,U> -}
                           = \ y :: GHC.Prim.Int#[OneShot] ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# b# a#) of wild {
                               GHC.Types.False
                               -> GHC.Enum.efdtIntDnFB
                                    @ [GrammarData.ObligatoryTopic]
                                    GrammarData.$fEnumObligatoryTopic_c1
                                    (GHC.Types.[] @ GrammarData.ObligatoryTopic)
                                    a#
                                    b#
                                    y
                               GHC.Types.True
                               -> GHC.Enum.efdtIntUpFB
                                    @ [GrammarData.ObligatoryTopic]
                                    GrammarData.$fEnumObligatoryTopic_c1
                                    (GHC.Types.[] @ GrammarData.ObligatoryTopic)
                                    a#
                                    b#
                                    y }
                         } in
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.># a# b#) of wild {
                           GHC.Types.False -> $j2 1 GHC.Types.True -> $j2 0 }
                     } in
                     case b of wild {
                       GrammarData.OblTopic -> $j1 0 GrammarData.OptTopic -> $j1 1 }
                 } in
                 case a13 of wild {
                   GrammarData.OblTopic -> $j 0 GrammarData.OptTopic -> $j 1 }) -}
69babcc57bbc447bbcd2b156d19a1d60
  $fEnumObligatoryTopic_$cenumFromThenTo ::
    GrammarData.ObligatoryTopic
    -> GrammarData.ObligatoryTopic
    -> GrammarData.ObligatoryTopic
    -> [GrammarData.ObligatoryTopic]
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U>,
     Unfolding: (\ x1 :: GrammarData.ObligatoryTopic
                   x2 :: GrammarData.ObligatoryTopic
                   y :: GrammarData.ObligatoryTopic ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.ObligatoryTopic]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ x4 :: GHC.Prim.Int#[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int# -> [GrammarData.ObligatoryTopic]
                         {- Arity: 1, Strictness: <L,U> -}
                       = \ x5 :: GHC.Prim.Int#[OneShot] ->
                         case y of wild {
                           GrammarData.OblTopic
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [GrammarData.ObligatoryTopic]
                                     GrammarData.$fEnumObligatoryTopic_c
                                     (GHC.Types.[] @ GrammarData.ObligatoryTopic)
                                     x4
                                     x5
                                     0
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [GrammarData.ObligatoryTopic]
                                     GrammarData.$fEnumObligatoryTopic_c
                                     (GHC.Types.[] @ GrammarData.ObligatoryTopic)
                                     x4
                                     x5
                                     0 }
                           GrammarData.OptTopic
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [GrammarData.ObligatoryTopic]
                                     GrammarData.$fEnumObligatoryTopic_c
                                     (GHC.Types.[] @ GrammarData.ObligatoryTopic)
                                     x4
                                     x5
                                     1
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [GrammarData.ObligatoryTopic]
                                     GrammarData.$fEnumObligatoryTopic_c
                                     (GHC.Types.[] @ GrammarData.ObligatoryTopic)
                                     x4
                                     x5
                                     1 } }
                     } in
                     case x2 of wild {
                       GrammarData.OblTopic -> $j1 0 GrammarData.OptTopic -> $j1 1 }
                 } in
                 case x1 of wild {
                   GrammarData.OblTopic -> $j 0 GrammarData.OptTopic -> $j 1 }) -}
69babcc57bbc447bbcd2b156d19a1d60
  $fEnumObligatoryTopic_$cenumFromTo ::
    GrammarData.ObligatoryTopic
    -> GrammarData.ObligatoryTopic -> [GrammarData.ObligatoryTopic]
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ x :: GrammarData.ObligatoryTopic
                   y :: GrammarData.ObligatoryTopic ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.ObligatoryTopic]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ x1 :: GHC.Prim.Int#[OneShot] ->
                     case y of wild {
                       GrammarData.OblTopic
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 0) of wild1 {
                            GHC.Types.False -> GrammarData.$fEnumObligatoryTopic_go1 x1
                            GHC.Types.True -> GHC.Types.[] @ GrammarData.ObligatoryTopic }
                       GrammarData.OptTopic
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 1) of wild1 {
                            GHC.Types.False -> GrammarData.$fEnumObligatoryTopic_go x1
                            GHC.Types.True -> GHC.Types.[] @ GrammarData.ObligatoryTopic } }
                 } in
                 case x of wild {
                   GrammarData.OblTopic -> $j 0 GrammarData.OptTopic -> $j 1 }) -}
69babcc57bbc447bbcd2b156d19a1d60
  $fEnumObligatoryTopic_$cfromEnum ::
    GrammarData.ObligatoryTopic -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.ObligatoryTopic ->
                 case a13 of wild {
                   GrammarData.OblTopic -> GHC.Types.I# 0
                   GrammarData.OptTopic -> GHC.Types.I# 1 }) -}
69babcc57bbc447bbcd2b156d19a1d60
  $fEnumObligatoryTopic_$cpred ::
    GrammarData.ObligatoryTopic -> GrammarData.ObligatoryTopic
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.ObligatoryTopic ->
                 case a13 of wild {
                   GrammarData.OblTopic -> GrammarData.$fEnumObligatoryTopic4
                   GrammarData.OptTopic -> GrammarData.OblTopic }) -}
69babcc57bbc447bbcd2b156d19a1d60
  $fEnumObligatoryTopic_$csucc ::
    GrammarData.ObligatoryTopic -> GrammarData.ObligatoryTopic
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.ObligatoryTopic ->
                 case a13 of wild {
                   GrammarData.OblTopic -> GrammarData.OptTopic
                   GrammarData.OptTopic -> GrammarData.$fEnumObligatoryTopic5 }) -}
69babcc57bbc447bbcd2b156d19a1d60
  $fEnumObligatoryTopic_$ctoEnum ::
    GHC.Types.Int -> GrammarData.ObligatoryTopic
  {- Arity: 1, Strictness: <S,1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: GHC.Types.Int ->
                 case w of ww { GHC.Types.I# ww1 ->
                 GrammarData.$w$ctoEnum7 ww1 }) -}
69babcc57bbc447bbcd2b156d19a1d60
  $fEnumObligatoryTopic_c ::
    GHC.Types.Int
    -> [GrammarData.ObligatoryTopic] -> [GrammarData.ObligatoryTopic]
  {- Arity: 2, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int ys :: [GrammarData.ObligatoryTopic] ->
                 GHC.Types.:
                   @ GrammarData.ObligatoryTopic
                   (GrammarData.$fEnumObligatoryTopic_$ctoEnum x)
                   ys) -}
69babcc57bbc447bbcd2b156d19a1d60
  $fEnumObligatoryTopic_c1 ::
    GHC.Types.Int
    -> [GrammarData.ObligatoryTopic] -> [GrammarData.ObligatoryTopic]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int ys :: [GrammarData.ObligatoryTopic] ->
                 GHC.Types.:
                   @ GrammarData.ObligatoryTopic
                   (case x of wild { GHC.Types.I# a13 ->
                    GHC.Prim.tagToEnum# @ GrammarData.ObligatoryTopic a13 })
                   ys) -}
69babcc57bbc447bbcd2b156d19a1d60
  $fEnumObligatoryTopic_go ::
    GHC.Prim.Int# -> [GrammarData.ObligatoryTopic]
  {- Arity: 1, Strictness: <L,U> -}
69babcc57bbc447bbcd2b156d19a1d60
  $fEnumObligatoryTopic_go1 ::
    GHC.Prim.Int# -> [GrammarData.ObligatoryTopic]
  {- Arity: 1, Strictness: <L,U> -}
69babcc57bbc447bbcd2b156d19a1d60
  $fEnumObligatoryTopic_go2 ::
    GHC.Prim.Int# -> [GrammarData.ObligatoryTopic]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
69babcc57bbc447bbcd2b156d19a1d60
  $fEnumObligatoryTopic_go3 ::
    GHC.Prim.Int# -> [GrammarData.ObligatoryTopic]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
7ceb67be553ed9e58e992b22465238f0
  $fEnumPiedPiping :: GHC.Enum.Enum GrammarData.PiedPiping
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.PiedPiping
                  GrammarData.$fEnumPiedPiping_$csucc
                  GrammarData.$fEnumPiedPiping_$cpred
                  GrammarData.$fEnumPiedPiping_$ctoEnum
                  GrammarData.$fEnumPiedPiping_$cfromEnum
                  GrammarData.$fEnumPiedPiping_$cenumFrom
                  GrammarData.$fEnumPiedPiping_$cenumFromThen
                  GrammarData.$fEnumPiedPiping_$cenumFromTo
                  GrammarData.$fEnumPiedPiping_$cenumFromThenTo -}
7ceb67be553ed9e58e992b22465238f0
  $fEnumPiedPiping1 :: GHC.Prim.Int# -> GrammarData.PiedPiping
  {- Arity: 1, Strictness: <L,U>b -}
7ceb67be553ed9e58e992b22465238f0
  $fEnumPiedPiping2 :: [GrammarData.PiedPiping]
  {- Unfolding: (GrammarData.$fEnumPiedPiping_go2 1) -}
7ceb67be553ed9e58e992b22465238f0
  $fEnumPiedPiping3 :: [GrammarData.PiedPiping]
  {- Unfolding: (GrammarData.$fEnumPiedPiping_go3 0) -}
7ceb67be553ed9e58e992b22465238f0
  $fEnumPiedPiping4 :: GrammarData.PiedPiping
  {- Strictness: b -}
7ceb67be553ed9e58e992b22465238f0
  $fEnumPiedPiping5 :: GrammarData.PiedPiping
  {- Strictness: b -}
7ceb67be553ed9e58e992b22465238f0
  $fEnumPiedPiping_$cenumFrom ::
    GrammarData.PiedPiping -> [GrammarData.PiedPiping]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ a13 :: GrammarData.PiedPiping ->
                 case a13 of wild {
                   GrammarData.PiedPipe -> GrammarData.$fEnumPiedPiping3
                   GrammarData.PrepStrand -> GrammarData.$fEnumPiedPiping2 }) -}
7ceb67be553ed9e58e992b22465238f0
  $fEnumPiedPiping_$cenumFromThen ::
    GrammarData.PiedPiping
    -> GrammarData.PiedPiping -> [GrammarData.PiedPiping]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a13 :: GrammarData.PiedPiping
                   b :: GrammarData.PiedPiping ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.PiedPiping]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ a# :: GHC.Prim.Int#[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int# -> [GrammarData.PiedPiping]
                         {- Arity: 1, Strictness: <L,U> -}
                       = \ b# :: GHC.Prim.Int#[OneShot] ->
                         let {
                           $j2 :: GHC.Prim.Int# -> [GrammarData.PiedPiping]
                             {- Arity: 1, Strictness: <L,U> -}
                           = \ y :: GHC.Prim.Int#[OneShot] ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# b# a#) of wild {
                               GHC.Types.False
                               -> GHC.Enum.efdtIntDnFB
                                    @ [GrammarData.PiedPiping]
                                    GrammarData.$fEnumPiedPiping_c1
                                    (GHC.Types.[] @ GrammarData.PiedPiping)
                                    a#
                                    b#
                                    y
                               GHC.Types.True
                               -> GHC.Enum.efdtIntUpFB
                                    @ [GrammarData.PiedPiping]
                                    GrammarData.$fEnumPiedPiping_c1
                                    (GHC.Types.[] @ GrammarData.PiedPiping)
                                    a#
                                    b#
                                    y }
                         } in
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.># a# b#) of wild {
                           GHC.Types.False -> $j2 1 GHC.Types.True -> $j2 0 }
                     } in
                     case b of wild {
                       GrammarData.PiedPipe -> $j1 0 GrammarData.PrepStrand -> $j1 1 }
                 } in
                 case a13 of wild {
                   GrammarData.PiedPipe -> $j 0 GrammarData.PrepStrand -> $j 1 }) -}
7ceb67be553ed9e58e992b22465238f0
  $fEnumPiedPiping_$cenumFromThenTo ::
    GrammarData.PiedPiping
    -> GrammarData.PiedPiping
    -> GrammarData.PiedPiping
    -> [GrammarData.PiedPiping]
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U>,
     Unfolding: (\ x1 :: GrammarData.PiedPiping
                   x2 :: GrammarData.PiedPiping
                   y :: GrammarData.PiedPiping ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.PiedPiping]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ x4 :: GHC.Prim.Int#[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int# -> [GrammarData.PiedPiping]
                         {- Arity: 1, Strictness: <L,U> -}
                       = \ x5 :: GHC.Prim.Int#[OneShot] ->
                         case y of wild {
                           GrammarData.PiedPipe
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [GrammarData.PiedPiping]
                                     GrammarData.$fEnumPiedPiping_c
                                     (GHC.Types.[] @ GrammarData.PiedPiping)
                                     x4
                                     x5
                                     0
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [GrammarData.PiedPiping]
                                     GrammarData.$fEnumPiedPiping_c
                                     (GHC.Types.[] @ GrammarData.PiedPiping)
                                     x4
                                     x5
                                     0 }
                           GrammarData.PrepStrand
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [GrammarData.PiedPiping]
                                     GrammarData.$fEnumPiedPiping_c
                                     (GHC.Types.[] @ GrammarData.PiedPiping)
                                     x4
                                     x5
                                     1
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [GrammarData.PiedPiping]
                                     GrammarData.$fEnumPiedPiping_c
                                     (GHC.Types.[] @ GrammarData.PiedPiping)
                                     x4
                                     x5
                                     1 } }
                     } in
                     case x2 of wild {
                       GrammarData.PiedPipe -> $j1 0 GrammarData.PrepStrand -> $j1 1 }
                 } in
                 case x1 of wild {
                   GrammarData.PiedPipe -> $j 0 GrammarData.PrepStrand -> $j 1 }) -}
7ceb67be553ed9e58e992b22465238f0
  $fEnumPiedPiping_$cenumFromTo ::
    GrammarData.PiedPiping
    -> GrammarData.PiedPiping -> [GrammarData.PiedPiping]
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ x :: GrammarData.PiedPiping
                   y :: GrammarData.PiedPiping ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.PiedPiping]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ x1 :: GHC.Prim.Int#[OneShot] ->
                     case y of wild {
                       GrammarData.PiedPipe
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 0) of wild1 {
                            GHC.Types.False -> GrammarData.$fEnumPiedPiping_go1 x1
                            GHC.Types.True -> GHC.Types.[] @ GrammarData.PiedPiping }
                       GrammarData.PrepStrand
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 1) of wild1 {
                            GHC.Types.False -> GrammarData.$fEnumPiedPiping_go x1
                            GHC.Types.True -> GHC.Types.[] @ GrammarData.PiedPiping } }
                 } in
                 case x of wild {
                   GrammarData.PiedPipe -> $j 0 GrammarData.PrepStrand -> $j 1 }) -}
7ceb67be553ed9e58e992b22465238f0
  $fEnumPiedPiping_$cfromEnum ::
    GrammarData.PiedPiping -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.PiedPiping ->
                 case a13 of wild {
                   GrammarData.PiedPipe -> GHC.Types.I# 0
                   GrammarData.PrepStrand -> GHC.Types.I# 1 }) -}
7ceb67be553ed9e58e992b22465238f0
  $fEnumPiedPiping_$cpred ::
    GrammarData.PiedPiping -> GrammarData.PiedPiping
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.PiedPiping ->
                 case a13 of wild {
                   GrammarData.PiedPipe -> GrammarData.$fEnumPiedPiping4
                   GrammarData.PrepStrand -> GrammarData.PiedPipe }) -}
7ceb67be553ed9e58e992b22465238f0
  $fEnumPiedPiping_$csucc ::
    GrammarData.PiedPiping -> GrammarData.PiedPiping
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.PiedPiping ->
                 case a13 of wild {
                   GrammarData.PiedPipe -> GrammarData.PrepStrand
                   GrammarData.PrepStrand -> GrammarData.$fEnumPiedPiping5 }) -}
7ceb67be553ed9e58e992b22465238f0
  $fEnumPiedPiping_$ctoEnum ::
    GHC.Types.Int -> GrammarData.PiedPiping
  {- Arity: 1, Strictness: <S,1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: GHC.Types.Int ->
                 case w of ww { GHC.Types.I# ww1 ->
                 GrammarData.$w$ctoEnum8 ww1 }) -}
7ceb67be553ed9e58e992b22465238f0
  $fEnumPiedPiping_c ::
    GHC.Types.Int
    -> [GrammarData.PiedPiping] -> [GrammarData.PiedPiping]
  {- Arity: 2, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int ys :: [GrammarData.PiedPiping] ->
                 GHC.Types.:
                   @ GrammarData.PiedPiping
                   (GrammarData.$fEnumPiedPiping_$ctoEnum x)
                   ys) -}
7ceb67be553ed9e58e992b22465238f0
  $fEnumPiedPiping_c1 ::
    GHC.Types.Int
    -> [GrammarData.PiedPiping] -> [GrammarData.PiedPiping]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int ys :: [GrammarData.PiedPiping] ->
                 GHC.Types.:
                   @ GrammarData.PiedPiping
                   (case x of wild { GHC.Types.I# a13 ->
                    GHC.Prim.tagToEnum# @ GrammarData.PiedPiping a13 })
                   ys) -}
7ceb67be553ed9e58e992b22465238f0
  $fEnumPiedPiping_go :: GHC.Prim.Int# -> [GrammarData.PiedPiping]
  {- Arity: 1, Strictness: <L,U> -}
7ceb67be553ed9e58e992b22465238f0
  $fEnumPiedPiping_go1 :: GHC.Prim.Int# -> [GrammarData.PiedPiping]
  {- Arity: 1, Strictness: <L,U> -}
7ceb67be553ed9e58e992b22465238f0
  $fEnumPiedPiping_go2 :: GHC.Prim.Int# -> [GrammarData.PiedPiping]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
7ceb67be553ed9e58e992b22465238f0
  $fEnumPiedPiping_go3 :: GHC.Prim.Int# -> [GrammarData.PiedPiping]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
9bce092da85110dd69ced0b3f1053c6d
  $fEnumQuestionInversion ::
    GHC.Enum.Enum GrammarData.QuestionInversion
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.QuestionInversion
                  GrammarData.$fEnumQuestionInversion_$csucc
                  GrammarData.$fEnumQuestionInversion_$cpred
                  GrammarData.$fEnumQuestionInversion_$ctoEnum
                  GrammarData.$fEnumQuestionInversion_$cfromEnum
                  GrammarData.$fEnumQuestionInversion_$cenumFrom
                  GrammarData.$fEnumQuestionInversion_$cenumFromThen
                  GrammarData.$fEnumQuestionInversion_$cenumFromTo
                  GrammarData.$fEnumQuestionInversion_$cenumFromThenTo -}
9bce092da85110dd69ced0b3f1053c6d
  $fEnumQuestionInversion1 ::
    GHC.Prim.Int# -> GrammarData.QuestionInversion
  {- Arity: 1, Strictness: <L,U>b -}
9bce092da85110dd69ced0b3f1053c6d
  $fEnumQuestionInversion2 :: [GrammarData.QuestionInversion]
  {- Unfolding: (GrammarData.$fEnumQuestionInversion_go2 1) -}
9bce092da85110dd69ced0b3f1053c6d
  $fEnumQuestionInversion3 :: [GrammarData.QuestionInversion]
  {- Unfolding: (GrammarData.$fEnumQuestionInversion_go3 0) -}
9bce092da85110dd69ced0b3f1053c6d
  $fEnumQuestionInversion4 :: GrammarData.QuestionInversion
  {- Strictness: b -}
9bce092da85110dd69ced0b3f1053c6d
  $fEnumQuestionInversion5 :: GrammarData.QuestionInversion
  {- Strictness: b -}
9bce092da85110dd69ced0b3f1053c6d
  $fEnumQuestionInversion_$cenumFrom ::
    GrammarData.QuestionInversion -> [GrammarData.QuestionInversion]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ a13 :: GrammarData.QuestionInversion ->
                 case a13 of wild {
                   GrammarData.NoQuesInv -> GrammarData.$fEnumQuestionInversion3
                   GrammarData.OblQuesInv
                   -> GrammarData.$fEnumQuestionInversion2 }) -}
9bce092da85110dd69ced0b3f1053c6d
  $fEnumQuestionInversion_$cenumFromThen ::
    GrammarData.QuestionInversion
    -> GrammarData.QuestionInversion -> [GrammarData.QuestionInversion]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a13 :: GrammarData.QuestionInversion
                   b :: GrammarData.QuestionInversion ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.QuestionInversion]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ a# :: GHC.Prim.Int#[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int# -> [GrammarData.QuestionInversion]
                         {- Arity: 1, Strictness: <L,U> -}
                       = \ b# :: GHC.Prim.Int#[OneShot] ->
                         let {
                           $j2 :: GHC.Prim.Int# -> [GrammarData.QuestionInversion]
                             {- Arity: 1, Strictness: <L,U> -}
                           = \ y :: GHC.Prim.Int#[OneShot] ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# b# a#) of wild {
                               GHC.Types.False
                               -> GHC.Enum.efdtIntDnFB
                                    @ [GrammarData.QuestionInversion]
                                    GrammarData.$fEnumQuestionInversion_c1
                                    (GHC.Types.[] @ GrammarData.QuestionInversion)
                                    a#
                                    b#
                                    y
                               GHC.Types.True
                               -> GHC.Enum.efdtIntUpFB
                                    @ [GrammarData.QuestionInversion]
                                    GrammarData.$fEnumQuestionInversion_c1
                                    (GHC.Types.[] @ GrammarData.QuestionInversion)
                                    a#
                                    b#
                                    y }
                         } in
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.># a# b#) of wild {
                           GHC.Types.False -> $j2 1 GHC.Types.True -> $j2 0 }
                     } in
                     case b of wild {
                       GrammarData.NoQuesInv -> $j1 0 GrammarData.OblQuesInv -> $j1 1 }
                 } in
                 case a13 of wild {
                   GrammarData.NoQuesInv -> $j 0 GrammarData.OblQuesInv -> $j 1 }) -}
9bce092da85110dd69ced0b3f1053c6d
  $fEnumQuestionInversion_$cenumFromThenTo ::
    GrammarData.QuestionInversion
    -> GrammarData.QuestionInversion
    -> GrammarData.QuestionInversion
    -> [GrammarData.QuestionInversion]
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U>,
     Unfolding: (\ x1 :: GrammarData.QuestionInversion
                   x2 :: GrammarData.QuestionInversion
                   y :: GrammarData.QuestionInversion ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.QuestionInversion]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ x4 :: GHC.Prim.Int#[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int# -> [GrammarData.QuestionInversion]
                         {- Arity: 1, Strictness: <L,U> -}
                       = \ x5 :: GHC.Prim.Int#[OneShot] ->
                         case y of wild {
                           GrammarData.NoQuesInv
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [GrammarData.QuestionInversion]
                                     GrammarData.$fEnumQuestionInversion_c
                                     (GHC.Types.[] @ GrammarData.QuestionInversion)
                                     x4
                                     x5
                                     0
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [GrammarData.QuestionInversion]
                                     GrammarData.$fEnumQuestionInversion_c
                                     (GHC.Types.[] @ GrammarData.QuestionInversion)
                                     x4
                                     x5
                                     0 }
                           GrammarData.OblQuesInv
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [GrammarData.QuestionInversion]
                                     GrammarData.$fEnumQuestionInversion_c
                                     (GHC.Types.[] @ GrammarData.QuestionInversion)
                                     x4
                                     x5
                                     1
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [GrammarData.QuestionInversion]
                                     GrammarData.$fEnumQuestionInversion_c
                                     (GHC.Types.[] @ GrammarData.QuestionInversion)
                                     x4
                                     x5
                                     1 } }
                     } in
                     case x2 of wild {
                       GrammarData.NoQuesInv -> $j1 0 GrammarData.OblQuesInv -> $j1 1 }
                 } in
                 case x1 of wild {
                   GrammarData.NoQuesInv -> $j 0 GrammarData.OblQuesInv -> $j 1 }) -}
9bce092da85110dd69ced0b3f1053c6d
  $fEnumQuestionInversion_$cenumFromTo ::
    GrammarData.QuestionInversion
    -> GrammarData.QuestionInversion -> [GrammarData.QuestionInversion]
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ x :: GrammarData.QuestionInversion
                   y :: GrammarData.QuestionInversion ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.QuestionInversion]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ x1 :: GHC.Prim.Int#[OneShot] ->
                     case y of wild {
                       GrammarData.NoQuesInv
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 0) of wild1 {
                            GHC.Types.False -> GrammarData.$fEnumQuestionInversion_go1 x1
                            GHC.Types.True -> GHC.Types.[] @ GrammarData.QuestionInversion }
                       GrammarData.OblQuesInv
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 1) of wild1 {
                            GHC.Types.False -> GrammarData.$fEnumQuestionInversion_go x1
                            GHC.Types.True -> GHC.Types.[] @ GrammarData.QuestionInversion } }
                 } in
                 case x of wild {
                   GrammarData.NoQuesInv -> $j 0 GrammarData.OblQuesInv -> $j 1 }) -}
9bce092da85110dd69ced0b3f1053c6d
  $fEnumQuestionInversion_$cfromEnum ::
    GrammarData.QuestionInversion -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.QuestionInversion ->
                 case a13 of wild {
                   GrammarData.NoQuesInv -> GHC.Types.I# 0
                   GrammarData.OblQuesInv -> GHC.Types.I# 1 }) -}
9bce092da85110dd69ced0b3f1053c6d
  $fEnumQuestionInversion_$cpred ::
    GrammarData.QuestionInversion -> GrammarData.QuestionInversion
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.QuestionInversion ->
                 case a13 of wild {
                   GrammarData.NoQuesInv -> GrammarData.$fEnumQuestionInversion4
                   GrammarData.OblQuesInv -> GrammarData.NoQuesInv }) -}
9bce092da85110dd69ced0b3f1053c6d
  $fEnumQuestionInversion_$csucc ::
    GrammarData.QuestionInversion -> GrammarData.QuestionInversion
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.QuestionInversion ->
                 case a13 of wild {
                   GrammarData.NoQuesInv -> GrammarData.OblQuesInv
                   GrammarData.OblQuesInv
                   -> GrammarData.$fEnumQuestionInversion5 }) -}
9bce092da85110dd69ced0b3f1053c6d
  $fEnumQuestionInversion_$ctoEnum ::
    GHC.Types.Int -> GrammarData.QuestionInversion
  {- Arity: 1, Strictness: <S,1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: GHC.Types.Int ->
                 case w of ww { GHC.Types.I# ww1 ->
                 GrammarData.$w$ctoEnum9 ww1 }) -}
9bce092da85110dd69ced0b3f1053c6d
  $fEnumQuestionInversion_c ::
    GHC.Types.Int
    -> [GrammarData.QuestionInversion]
    -> [GrammarData.QuestionInversion]
  {- Arity: 2, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int ys :: [GrammarData.QuestionInversion] ->
                 GHC.Types.:
                   @ GrammarData.QuestionInversion
                   (GrammarData.$fEnumQuestionInversion_$ctoEnum x)
                   ys) -}
9bce092da85110dd69ced0b3f1053c6d
  $fEnumQuestionInversion_c1 ::
    GHC.Types.Int
    -> [GrammarData.QuestionInversion]
    -> [GrammarData.QuestionInversion]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int ys :: [GrammarData.QuestionInversion] ->
                 GHC.Types.:
                   @ GrammarData.QuestionInversion
                   (case x of wild { GHC.Types.I# a13 ->
                    GHC.Prim.tagToEnum# @ GrammarData.QuestionInversion a13 })
                   ys) -}
9bce092da85110dd69ced0b3f1053c6d
  $fEnumQuestionInversion_go ::
    GHC.Prim.Int# -> [GrammarData.QuestionInversion]
  {- Arity: 1, Strictness: <L,U> -}
9bce092da85110dd69ced0b3f1053c6d
  $fEnumQuestionInversion_go1 ::
    GHC.Prim.Int# -> [GrammarData.QuestionInversion]
  {- Arity: 1, Strictness: <L,U> -}
9bce092da85110dd69ced0b3f1053c6d
  $fEnumQuestionInversion_go2 ::
    GHC.Prim.Int# -> [GrammarData.QuestionInversion]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
9bce092da85110dd69ced0b3f1053c6d
  $fEnumQuestionInversion_go3 ::
    GHC.Prim.Int# -> [GrammarData.QuestionInversion]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
36a159f3ad56cebecc6962b0f39e356c
  $fEnumSubjectInitial :: GHC.Enum.Enum GrammarData.SubjectInitial
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.SubjectInitial
                  GrammarData.$fEnumSubjectInitial_$csucc
                  GrammarData.$fEnumSubjectInitial_$cpred
                  GrammarData.$fEnumSubjectInitial_$ctoEnum
                  GrammarData.$fEnumSubjectInitial_$cfromEnum
                  GrammarData.$fEnumSubjectInitial_$cenumFrom
                  GrammarData.$fEnumSubjectInitial_$cenumFromThen
                  GrammarData.$fEnumSubjectInitial_$cenumFromTo
                  GrammarData.$fEnumSubjectInitial_$cenumFromThenTo -}
36a159f3ad56cebecc6962b0f39e356c
  $fEnumSubjectInitial1 ::
    GHC.Prim.Int# -> GrammarData.SubjectInitial
  {- Arity: 1, Strictness: <L,U>b -}
36a159f3ad56cebecc6962b0f39e356c
  $fEnumSubjectInitial2 :: [GrammarData.SubjectInitial]
  {- Unfolding: (GrammarData.$fEnumSubjectInitial_go2 1) -}
36a159f3ad56cebecc6962b0f39e356c
  $fEnumSubjectInitial3 :: [GrammarData.SubjectInitial]
  {- Unfolding: (GrammarData.$fEnumSubjectInitial_go3 0) -}
36a159f3ad56cebecc6962b0f39e356c
  $fEnumSubjectInitial4 :: GrammarData.SubjectInitial
  {- Strictness: b -}
36a159f3ad56cebecc6962b0f39e356c
  $fEnumSubjectInitial5 :: GrammarData.SubjectInitial
  {- Strictness: b -}
36a159f3ad56cebecc6962b0f39e356c
  $fEnumSubjectInitial_$cenumFrom ::
    GrammarData.SubjectInitial -> [GrammarData.SubjectInitial]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ a13 :: GrammarData.SubjectInitial ->
                 case a13 of wild {
                   GrammarData.SubInitial -> GrammarData.$fEnumSubjectInitial3
                   GrammarData.SubFinal -> GrammarData.$fEnumSubjectInitial2 }) -}
36a159f3ad56cebecc6962b0f39e356c
  $fEnumSubjectInitial_$cenumFromThen ::
    GrammarData.SubjectInitial
    -> GrammarData.SubjectInitial -> [GrammarData.SubjectInitial]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a13 :: GrammarData.SubjectInitial
                   b :: GrammarData.SubjectInitial ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.SubjectInitial]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ a# :: GHC.Prim.Int#[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int# -> [GrammarData.SubjectInitial]
                         {- Arity: 1, Strictness: <L,U> -}
                       = \ b# :: GHC.Prim.Int#[OneShot] ->
                         let {
                           $j2 :: GHC.Prim.Int# -> [GrammarData.SubjectInitial]
                             {- Arity: 1, Strictness: <L,U> -}
                           = \ y :: GHC.Prim.Int#[OneShot] ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# b# a#) of wild {
                               GHC.Types.False
                               -> GHC.Enum.efdtIntDnFB
                                    @ [GrammarData.SubjectInitial]
                                    GrammarData.$fEnumSubjectInitial_c1
                                    (GHC.Types.[] @ GrammarData.SubjectInitial)
                                    a#
                                    b#
                                    y
                               GHC.Types.True
                               -> GHC.Enum.efdtIntUpFB
                                    @ [GrammarData.SubjectInitial]
                                    GrammarData.$fEnumSubjectInitial_c1
                                    (GHC.Types.[] @ GrammarData.SubjectInitial)
                                    a#
                                    b#
                                    y }
                         } in
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.># a# b#) of wild {
                           GHC.Types.False -> $j2 1 GHC.Types.True -> $j2 0 }
                     } in
                     case b of wild {
                       GrammarData.SubInitial -> $j1 0 GrammarData.SubFinal -> $j1 1 }
                 } in
                 case a13 of wild {
                   GrammarData.SubInitial -> $j 0 GrammarData.SubFinal -> $j 1 }) -}
36a159f3ad56cebecc6962b0f39e356c
  $fEnumSubjectInitial_$cenumFromThenTo ::
    GrammarData.SubjectInitial
    -> GrammarData.SubjectInitial
    -> GrammarData.SubjectInitial
    -> [GrammarData.SubjectInitial]
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U>,
     Unfolding: (\ x1 :: GrammarData.SubjectInitial
                   x2 :: GrammarData.SubjectInitial
                   y :: GrammarData.SubjectInitial ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.SubjectInitial]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ x4 :: GHC.Prim.Int#[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int# -> [GrammarData.SubjectInitial]
                         {- Arity: 1, Strictness: <L,U> -}
                       = \ x5 :: GHC.Prim.Int#[OneShot] ->
                         case y of wild {
                           GrammarData.SubInitial
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [GrammarData.SubjectInitial]
                                     GrammarData.$fEnumSubjectInitial_c
                                     (GHC.Types.[] @ GrammarData.SubjectInitial)
                                     x4
                                     x5
                                     0
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [GrammarData.SubjectInitial]
                                     GrammarData.$fEnumSubjectInitial_c
                                     (GHC.Types.[] @ GrammarData.SubjectInitial)
                                     x4
                                     x5
                                     0 }
                           GrammarData.SubFinal
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [GrammarData.SubjectInitial]
                                     GrammarData.$fEnumSubjectInitial_c
                                     (GHC.Types.[] @ GrammarData.SubjectInitial)
                                     x4
                                     x5
                                     1
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [GrammarData.SubjectInitial]
                                     GrammarData.$fEnumSubjectInitial_c
                                     (GHC.Types.[] @ GrammarData.SubjectInitial)
                                     x4
                                     x5
                                     1 } }
                     } in
                     case x2 of wild {
                       GrammarData.SubInitial -> $j1 0 GrammarData.SubFinal -> $j1 1 }
                 } in
                 case x1 of wild {
                   GrammarData.SubInitial -> $j 0 GrammarData.SubFinal -> $j 1 }) -}
36a159f3ad56cebecc6962b0f39e356c
  $fEnumSubjectInitial_$cenumFromTo ::
    GrammarData.SubjectInitial
    -> GrammarData.SubjectInitial -> [GrammarData.SubjectInitial]
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ x :: GrammarData.SubjectInitial
                   y :: GrammarData.SubjectInitial ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.SubjectInitial]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ x1 :: GHC.Prim.Int#[OneShot] ->
                     case y of wild {
                       GrammarData.SubInitial
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 0) of wild1 {
                            GHC.Types.False -> GrammarData.$fEnumSubjectInitial_go1 x1
                            GHC.Types.True -> GHC.Types.[] @ GrammarData.SubjectInitial }
                       GrammarData.SubFinal
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 1) of wild1 {
                            GHC.Types.False -> GrammarData.$fEnumSubjectInitial_go x1
                            GHC.Types.True -> GHC.Types.[] @ GrammarData.SubjectInitial } }
                 } in
                 case x of wild {
                   GrammarData.SubInitial -> $j 0 GrammarData.SubFinal -> $j 1 }) -}
36a159f3ad56cebecc6962b0f39e356c
  $fEnumSubjectInitial_$cfromEnum ::
    GrammarData.SubjectInitial -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.SubjectInitial ->
                 case a13 of wild {
                   GrammarData.SubInitial -> GHC.Types.I# 0
                   GrammarData.SubFinal -> GHC.Types.I# 1 }) -}
36a159f3ad56cebecc6962b0f39e356c
  $fEnumSubjectInitial_$cpred ::
    GrammarData.SubjectInitial -> GrammarData.SubjectInitial
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.SubjectInitial ->
                 case a13 of wild {
                   GrammarData.SubInitial -> GrammarData.$fEnumSubjectInitial4
                   GrammarData.SubFinal -> GrammarData.SubInitial }) -}
36a159f3ad56cebecc6962b0f39e356c
  $fEnumSubjectInitial_$csucc ::
    GrammarData.SubjectInitial -> GrammarData.SubjectInitial
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.SubjectInitial ->
                 case a13 of wild {
                   GrammarData.SubInitial -> GrammarData.SubFinal
                   GrammarData.SubFinal -> GrammarData.$fEnumSubjectInitial5 }) -}
36a159f3ad56cebecc6962b0f39e356c
  $fEnumSubjectInitial_$ctoEnum ::
    GHC.Types.Int -> GrammarData.SubjectInitial
  {- Arity: 1, Strictness: <S,1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: GHC.Types.Int ->
                 case w of ww { GHC.Types.I# ww1 ->
                 GrammarData.$w$ctoEnum10 ww1 }) -}
36a159f3ad56cebecc6962b0f39e356c
  $fEnumSubjectInitial_c ::
    GHC.Types.Int
    -> [GrammarData.SubjectInitial] -> [GrammarData.SubjectInitial]
  {- Arity: 2, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int ys :: [GrammarData.SubjectInitial] ->
                 GHC.Types.:
                   @ GrammarData.SubjectInitial
                   (GrammarData.$fEnumSubjectInitial_$ctoEnum x)
                   ys) -}
36a159f3ad56cebecc6962b0f39e356c
  $fEnumSubjectInitial_c1 ::
    GHC.Types.Int
    -> [GrammarData.SubjectInitial] -> [GrammarData.SubjectInitial]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int ys :: [GrammarData.SubjectInitial] ->
                 GHC.Types.:
                   @ GrammarData.SubjectInitial
                   (case x of wild { GHC.Types.I# a13 ->
                    GHC.Prim.tagToEnum# @ GrammarData.SubjectInitial a13 })
                   ys) -}
36a159f3ad56cebecc6962b0f39e356c
  $fEnumSubjectInitial_go ::
    GHC.Prim.Int# -> [GrammarData.SubjectInitial]
  {- Arity: 1, Strictness: <L,U> -}
36a159f3ad56cebecc6962b0f39e356c
  $fEnumSubjectInitial_go1 ::
    GHC.Prim.Int# -> [GrammarData.SubjectInitial]
  {- Arity: 1, Strictness: <L,U> -}
36a159f3ad56cebecc6962b0f39e356c
  $fEnumSubjectInitial_go2 ::
    GHC.Prim.Int# -> [GrammarData.SubjectInitial]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
36a159f3ad56cebecc6962b0f39e356c
  $fEnumSubjectInitial_go3 ::
    GHC.Prim.Int# -> [GrammarData.SubjectInitial]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
c96d706f7e96f794b269594d2525904c
  $fEnumTopicMarking :: GHC.Enum.Enum GrammarData.TopicMarking
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.TopicMarking
                  GrammarData.$fEnumTopicMarking_$csucc
                  GrammarData.$fEnumTopicMarking_$cpred
                  GrammarData.$fEnumTopicMarking_$ctoEnum
                  GrammarData.$fEnumTopicMarking_$cfromEnum
                  GrammarData.$fEnumTopicMarking_$cenumFrom
                  GrammarData.$fEnumTopicMarking_$cenumFromThen
                  GrammarData.$fEnumTopicMarking_$cenumFromTo
                  GrammarData.$fEnumTopicMarking_$cenumFromThenTo -}
c96d706f7e96f794b269594d2525904c
  $fEnumTopicMarking1 :: GHC.Prim.Int# -> GrammarData.TopicMarking
  {- Arity: 1, Strictness: <L,U>b -}
c96d706f7e96f794b269594d2525904c
  $fEnumTopicMarking2 :: [GrammarData.TopicMarking]
  {- Unfolding: (GrammarData.$fEnumTopicMarking_go2 1) -}
c96d706f7e96f794b269594d2525904c
  $fEnumTopicMarking3 :: [GrammarData.TopicMarking]
  {- Unfolding: (GrammarData.$fEnumTopicMarking_go3 0) -}
c96d706f7e96f794b269594d2525904c
  $fEnumTopicMarking4 :: GrammarData.TopicMarking
  {- Strictness: b -}
c96d706f7e96f794b269594d2525904c
  $fEnumTopicMarking5 :: GrammarData.TopicMarking
  {- Strictness: b -}
c96d706f7e96f794b269594d2525904c
  $fEnumTopicMarking_$cenumFrom ::
    GrammarData.TopicMarking -> [GrammarData.TopicMarking]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ a13 :: GrammarData.TopicMarking ->
                 case a13 of wild {
                   GrammarData.NoTopMark -> GrammarData.$fEnumTopicMarking3
                   GrammarData.OblTopMark -> GrammarData.$fEnumTopicMarking2 }) -}
c96d706f7e96f794b269594d2525904c
  $fEnumTopicMarking_$cenumFromThen ::
    GrammarData.TopicMarking
    -> GrammarData.TopicMarking -> [GrammarData.TopicMarking]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a13 :: GrammarData.TopicMarking
                   b :: GrammarData.TopicMarking ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.TopicMarking]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ a# :: GHC.Prim.Int#[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int# -> [GrammarData.TopicMarking]
                         {- Arity: 1, Strictness: <L,U> -}
                       = \ b# :: GHC.Prim.Int#[OneShot] ->
                         let {
                           $j2 :: GHC.Prim.Int# -> [GrammarData.TopicMarking]
                             {- Arity: 1, Strictness: <L,U> -}
                           = \ y :: GHC.Prim.Int#[OneShot] ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# b# a#) of wild {
                               GHC.Types.False
                               -> GHC.Enum.efdtIntDnFB
                                    @ [GrammarData.TopicMarking]
                                    GrammarData.$fEnumTopicMarking_c1
                                    (GHC.Types.[] @ GrammarData.TopicMarking)
                                    a#
                                    b#
                                    y
                               GHC.Types.True
                               -> GHC.Enum.efdtIntUpFB
                                    @ [GrammarData.TopicMarking]
                                    GrammarData.$fEnumTopicMarking_c1
                                    (GHC.Types.[] @ GrammarData.TopicMarking)
                                    a#
                                    b#
                                    y }
                         } in
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.># a# b#) of wild {
                           GHC.Types.False -> $j2 1 GHC.Types.True -> $j2 0 }
                     } in
                     case b of wild {
                       GrammarData.NoTopMark -> $j1 0 GrammarData.OblTopMark -> $j1 1 }
                 } in
                 case a13 of wild {
                   GrammarData.NoTopMark -> $j 0 GrammarData.OblTopMark -> $j 1 }) -}
c96d706f7e96f794b269594d2525904c
  $fEnumTopicMarking_$cenumFromThenTo ::
    GrammarData.TopicMarking
    -> GrammarData.TopicMarking
    -> GrammarData.TopicMarking
    -> [GrammarData.TopicMarking]
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U>,
     Unfolding: (\ x1 :: GrammarData.TopicMarking
                   x2 :: GrammarData.TopicMarking
                   y :: GrammarData.TopicMarking ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.TopicMarking]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ x4 :: GHC.Prim.Int#[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int# -> [GrammarData.TopicMarking]
                         {- Arity: 1, Strictness: <L,U> -}
                       = \ x5 :: GHC.Prim.Int#[OneShot] ->
                         case y of wild {
                           GrammarData.NoTopMark
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [GrammarData.TopicMarking]
                                     GrammarData.$fEnumTopicMarking_c
                                     (GHC.Types.[] @ GrammarData.TopicMarking)
                                     x4
                                     x5
                                     0
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [GrammarData.TopicMarking]
                                     GrammarData.$fEnumTopicMarking_c
                                     (GHC.Types.[] @ GrammarData.TopicMarking)
                                     x4
                                     x5
                                     0 }
                           GrammarData.OblTopMark
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [GrammarData.TopicMarking]
                                     GrammarData.$fEnumTopicMarking_c
                                     (GHC.Types.[] @ GrammarData.TopicMarking)
                                     x4
                                     x5
                                     1
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [GrammarData.TopicMarking]
                                     GrammarData.$fEnumTopicMarking_c
                                     (GHC.Types.[] @ GrammarData.TopicMarking)
                                     x4
                                     x5
                                     1 } }
                     } in
                     case x2 of wild {
                       GrammarData.NoTopMark -> $j1 0 GrammarData.OblTopMark -> $j1 1 }
                 } in
                 case x1 of wild {
                   GrammarData.NoTopMark -> $j 0 GrammarData.OblTopMark -> $j 1 }) -}
c96d706f7e96f794b269594d2525904c
  $fEnumTopicMarking_$cenumFromTo ::
    GrammarData.TopicMarking
    -> GrammarData.TopicMarking -> [GrammarData.TopicMarking]
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ x :: GrammarData.TopicMarking
                   y :: GrammarData.TopicMarking ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.TopicMarking]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ x1 :: GHC.Prim.Int#[OneShot] ->
                     case y of wild {
                       GrammarData.NoTopMark
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 0) of wild1 {
                            GHC.Types.False -> GrammarData.$fEnumTopicMarking_go1 x1
                            GHC.Types.True -> GHC.Types.[] @ GrammarData.TopicMarking }
                       GrammarData.OblTopMark
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 1) of wild1 {
                            GHC.Types.False -> GrammarData.$fEnumTopicMarking_go x1
                            GHC.Types.True -> GHC.Types.[] @ GrammarData.TopicMarking } }
                 } in
                 case x of wild {
                   GrammarData.NoTopMark -> $j 0 GrammarData.OblTopMark -> $j 1 }) -}
c96d706f7e96f794b269594d2525904c
  $fEnumTopicMarking_$cfromEnum ::
    GrammarData.TopicMarking -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.TopicMarking ->
                 case a13 of wild {
                   GrammarData.NoTopMark -> GHC.Types.I# 0
                   GrammarData.OblTopMark -> GHC.Types.I# 1 }) -}
c96d706f7e96f794b269594d2525904c
  $fEnumTopicMarking_$cpred ::
    GrammarData.TopicMarking -> GrammarData.TopicMarking
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.TopicMarking ->
                 case a13 of wild {
                   GrammarData.NoTopMark -> GrammarData.$fEnumTopicMarking4
                   GrammarData.OblTopMark -> GrammarData.NoTopMark }) -}
c96d706f7e96f794b269594d2525904c
  $fEnumTopicMarking_$csucc ::
    GrammarData.TopicMarking -> GrammarData.TopicMarking
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.TopicMarking ->
                 case a13 of wild {
                   GrammarData.NoTopMark -> GrammarData.OblTopMark
                   GrammarData.OblTopMark -> GrammarData.$fEnumTopicMarking5 }) -}
c96d706f7e96f794b269594d2525904c
  $fEnumTopicMarking_$ctoEnum ::
    GHC.Types.Int -> GrammarData.TopicMarking
  {- Arity: 1, Strictness: <S,1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: GHC.Types.Int ->
                 case w of ww { GHC.Types.I# ww1 ->
                 GrammarData.$w$ctoEnum11 ww1 }) -}
c96d706f7e96f794b269594d2525904c
  $fEnumTopicMarking_c ::
    GHC.Types.Int
    -> [GrammarData.TopicMarking] -> [GrammarData.TopicMarking]
  {- Arity: 2, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int ys :: [GrammarData.TopicMarking] ->
                 GHC.Types.:
                   @ GrammarData.TopicMarking
                   (GrammarData.$fEnumTopicMarking_$ctoEnum x)
                   ys) -}
c96d706f7e96f794b269594d2525904c
  $fEnumTopicMarking_c1 ::
    GHC.Types.Int
    -> [GrammarData.TopicMarking] -> [GrammarData.TopicMarking]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int ys :: [GrammarData.TopicMarking] ->
                 GHC.Types.:
                   @ GrammarData.TopicMarking
                   (case x of wild { GHC.Types.I# a13 ->
                    GHC.Prim.tagToEnum# @ GrammarData.TopicMarking a13 })
                   ys) -}
c96d706f7e96f794b269594d2525904c
  $fEnumTopicMarking_go ::
    GHC.Prim.Int# -> [GrammarData.TopicMarking]
  {- Arity: 1, Strictness: <L,U> -}
c96d706f7e96f794b269594d2525904c
  $fEnumTopicMarking_go1 ::
    GHC.Prim.Int# -> [GrammarData.TopicMarking]
  {- Arity: 1, Strictness: <L,U> -}
c96d706f7e96f794b269594d2525904c
  $fEnumTopicMarking_go2 ::
    GHC.Prim.Int# -> [GrammarData.TopicMarking]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
c96d706f7e96f794b269594d2525904c
  $fEnumTopicMarking_go3 ::
    GHC.Prim.Int# -> [GrammarData.TopicMarking]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
e395809ab97655f1b03dc514ea8c035c
  $fEnumVtoIMovement :: GHC.Enum.Enum GrammarData.VtoIMovement
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.VtoIMovement
                  GrammarData.$fEnumVtoIMovement_$csucc
                  GrammarData.$fEnumVtoIMovement_$cpred
                  GrammarData.$fEnumVtoIMovement_$ctoEnum
                  GrammarData.$fEnumVtoIMovement_$cfromEnum
                  GrammarData.$fEnumVtoIMovement_$cenumFrom
                  GrammarData.$fEnumVtoIMovement_$cenumFromThen
                  GrammarData.$fEnumVtoIMovement_$cenumFromTo
                  GrammarData.$fEnumVtoIMovement_$cenumFromThenTo -}
e395809ab97655f1b03dc514ea8c035c
  $fEnumVtoIMovement1 :: GHC.Prim.Int# -> GrammarData.VtoIMovement
  {- Arity: 1, Strictness: <L,U>b -}
e395809ab97655f1b03dc514ea8c035c
  $fEnumVtoIMovement2 :: [GrammarData.VtoIMovement]
  {- Unfolding: (GrammarData.$fEnumVtoIMovement_go2 1) -}
e395809ab97655f1b03dc514ea8c035c
  $fEnumVtoIMovement3 :: [GrammarData.VtoIMovement]
  {- Unfolding: (GrammarData.$fEnumVtoIMovement_go3 0) -}
e395809ab97655f1b03dc514ea8c035c
  $fEnumVtoIMovement4 :: GrammarData.VtoIMovement
  {- Strictness: b -}
e395809ab97655f1b03dc514ea8c035c
  $fEnumVtoIMovement5 :: GrammarData.VtoIMovement
  {- Strictness: b -}
e395809ab97655f1b03dc514ea8c035c
  $fEnumVtoIMovement_$cenumFrom ::
    GrammarData.VtoIMovement -> [GrammarData.VtoIMovement]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ a13 :: GrammarData.VtoIMovement ->
                 case a13 of wild {
                   GrammarData.NoVtoIMove -> GrammarData.$fEnumVtoIMovement3
                   GrammarData.OblVtoIMove -> GrammarData.$fEnumVtoIMovement2 }) -}
e395809ab97655f1b03dc514ea8c035c
  $fEnumVtoIMovement_$cenumFromThen ::
    GrammarData.VtoIMovement
    -> GrammarData.VtoIMovement -> [GrammarData.VtoIMovement]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a13 :: GrammarData.VtoIMovement
                   b :: GrammarData.VtoIMovement ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.VtoIMovement]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ a# :: GHC.Prim.Int#[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int# -> [GrammarData.VtoIMovement]
                         {- Arity: 1, Strictness: <L,U> -}
                       = \ b# :: GHC.Prim.Int#[OneShot] ->
                         let {
                           $j2 :: GHC.Prim.Int# -> [GrammarData.VtoIMovement]
                             {- Arity: 1, Strictness: <L,U> -}
                           = \ y :: GHC.Prim.Int#[OneShot] ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# b# a#) of wild {
                               GHC.Types.False
                               -> GHC.Enum.efdtIntDnFB
                                    @ [GrammarData.VtoIMovement]
                                    GrammarData.$fEnumVtoIMovement_c1
                                    (GHC.Types.[] @ GrammarData.VtoIMovement)
                                    a#
                                    b#
                                    y
                               GHC.Types.True
                               -> GHC.Enum.efdtIntUpFB
                                    @ [GrammarData.VtoIMovement]
                                    GrammarData.$fEnumVtoIMovement_c1
                                    (GHC.Types.[] @ GrammarData.VtoIMovement)
                                    a#
                                    b#
                                    y }
                         } in
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.># a# b#) of wild {
                           GHC.Types.False -> $j2 1 GHC.Types.True -> $j2 0 }
                     } in
                     case b of wild {
                       GrammarData.NoVtoIMove -> $j1 0 GrammarData.OblVtoIMove -> $j1 1 }
                 } in
                 case a13 of wild {
                   GrammarData.NoVtoIMove -> $j 0
                   GrammarData.OblVtoIMove -> $j 1 }) -}
e395809ab97655f1b03dc514ea8c035c
  $fEnumVtoIMovement_$cenumFromThenTo ::
    GrammarData.VtoIMovement
    -> GrammarData.VtoIMovement
    -> GrammarData.VtoIMovement
    -> [GrammarData.VtoIMovement]
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U>,
     Unfolding: (\ x1 :: GrammarData.VtoIMovement
                   x2 :: GrammarData.VtoIMovement
                   y :: GrammarData.VtoIMovement ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.VtoIMovement]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ x4 :: GHC.Prim.Int#[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int# -> [GrammarData.VtoIMovement]
                         {- Arity: 1, Strictness: <L,U> -}
                       = \ x5 :: GHC.Prim.Int#[OneShot] ->
                         case y of wild {
                           GrammarData.NoVtoIMove
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [GrammarData.VtoIMovement]
                                     GrammarData.$fEnumVtoIMovement_c
                                     (GHC.Types.[] @ GrammarData.VtoIMovement)
                                     x4
                                     x5
                                     0
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [GrammarData.VtoIMovement]
                                     GrammarData.$fEnumVtoIMovement_c
                                     (GHC.Types.[] @ GrammarData.VtoIMovement)
                                     x4
                                     x5
                                     0 }
                           GrammarData.OblVtoIMove
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [GrammarData.VtoIMovement]
                                     GrammarData.$fEnumVtoIMovement_c
                                     (GHC.Types.[] @ GrammarData.VtoIMovement)
                                     x4
                                     x5
                                     1
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [GrammarData.VtoIMovement]
                                     GrammarData.$fEnumVtoIMovement_c
                                     (GHC.Types.[] @ GrammarData.VtoIMovement)
                                     x4
                                     x5
                                     1 } }
                     } in
                     case x2 of wild {
                       GrammarData.NoVtoIMove -> $j1 0 GrammarData.OblVtoIMove -> $j1 1 }
                 } in
                 case x1 of wild {
                   GrammarData.NoVtoIMove -> $j 0
                   GrammarData.OblVtoIMove -> $j 1 }) -}
e395809ab97655f1b03dc514ea8c035c
  $fEnumVtoIMovement_$cenumFromTo ::
    GrammarData.VtoIMovement
    -> GrammarData.VtoIMovement -> [GrammarData.VtoIMovement]
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ x :: GrammarData.VtoIMovement
                   y :: GrammarData.VtoIMovement ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.VtoIMovement]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ x1 :: GHC.Prim.Int#[OneShot] ->
                     case y of wild {
                       GrammarData.NoVtoIMove
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 0) of wild1 {
                            GHC.Types.False -> GrammarData.$fEnumVtoIMovement_go1 x1
                            GHC.Types.True -> GHC.Types.[] @ GrammarData.VtoIMovement }
                       GrammarData.OblVtoIMove
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 1) of wild1 {
                            GHC.Types.False -> GrammarData.$fEnumVtoIMovement_go x1
                            GHC.Types.True -> GHC.Types.[] @ GrammarData.VtoIMovement } }
                 } in
                 case x of wild {
                   GrammarData.NoVtoIMove -> $j 0
                   GrammarData.OblVtoIMove -> $j 1 }) -}
e395809ab97655f1b03dc514ea8c035c
  $fEnumVtoIMovement_$cfromEnum ::
    GrammarData.VtoIMovement -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.VtoIMovement ->
                 case a13 of wild {
                   GrammarData.NoVtoIMove -> GHC.Types.I# 0
                   GrammarData.OblVtoIMove -> GHC.Types.I# 1 }) -}
e395809ab97655f1b03dc514ea8c035c
  $fEnumVtoIMovement_$cpred ::
    GrammarData.VtoIMovement -> GrammarData.VtoIMovement
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.VtoIMovement ->
                 case a13 of wild {
                   GrammarData.NoVtoIMove -> GrammarData.$fEnumVtoIMovement4
                   GrammarData.OblVtoIMove -> GrammarData.NoVtoIMove }) -}
e395809ab97655f1b03dc514ea8c035c
  $fEnumVtoIMovement_$csucc ::
    GrammarData.VtoIMovement -> GrammarData.VtoIMovement
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.VtoIMovement ->
                 case a13 of wild {
                   GrammarData.NoVtoIMove -> GrammarData.OblVtoIMove
                   GrammarData.OblVtoIMove -> GrammarData.$fEnumVtoIMovement5 }) -}
e395809ab97655f1b03dc514ea8c035c
  $fEnumVtoIMovement_$ctoEnum ::
    GHC.Types.Int -> GrammarData.VtoIMovement
  {- Arity: 1, Strictness: <S,1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: GHC.Types.Int ->
                 case w of ww { GHC.Types.I# ww1 ->
                 GrammarData.$w$ctoEnum12 ww1 }) -}
e395809ab97655f1b03dc514ea8c035c
  $fEnumVtoIMovement_c ::
    GHC.Types.Int
    -> [GrammarData.VtoIMovement] -> [GrammarData.VtoIMovement]
  {- Arity: 2, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int ys :: [GrammarData.VtoIMovement] ->
                 GHC.Types.:
                   @ GrammarData.VtoIMovement
                   (GrammarData.$fEnumVtoIMovement_$ctoEnum x)
                   ys) -}
e395809ab97655f1b03dc514ea8c035c
  $fEnumVtoIMovement_c1 ::
    GHC.Types.Int
    -> [GrammarData.VtoIMovement] -> [GrammarData.VtoIMovement]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int ys :: [GrammarData.VtoIMovement] ->
                 GHC.Types.:
                   @ GrammarData.VtoIMovement
                   (case x of wild { GHC.Types.I# a13 ->
                    GHC.Prim.tagToEnum# @ GrammarData.VtoIMovement a13 })
                   ys) -}
e395809ab97655f1b03dc514ea8c035c
  $fEnumVtoIMovement_go ::
    GHC.Prim.Int# -> [GrammarData.VtoIMovement]
  {- Arity: 1, Strictness: <L,U> -}
e395809ab97655f1b03dc514ea8c035c
  $fEnumVtoIMovement_go1 ::
    GHC.Prim.Int# -> [GrammarData.VtoIMovement]
  {- Arity: 1, Strictness: <L,U> -}
e395809ab97655f1b03dc514ea8c035c
  $fEnumVtoIMovement_go2 ::
    GHC.Prim.Int# -> [GrammarData.VtoIMovement]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
e395809ab97655f1b03dc514ea8c035c
  $fEnumVtoIMovement_go3 ::
    GHC.Prim.Int# -> [GrammarData.VtoIMovement]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
e7236c5b74ef163c5dcac13e97f6961e
  $fEnumWHMovementObligatory ::
    GHC.Enum.Enum GrammarData.WHMovementObligatory
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.WHMovementObligatory
                  GrammarData.$fEnumWHMovementObligatory_$csucc
                  GrammarData.$fEnumWHMovementObligatory_$cpred
                  GrammarData.$fEnumWHMovementObligatory_$ctoEnum
                  GrammarData.$fEnumWHMovementObligatory_$cfromEnum
                  GrammarData.$fEnumWHMovementObligatory_$cenumFrom
                  GrammarData.$fEnumWHMovementObligatory_$cenumFromThen
                  GrammarData.$fEnumWHMovementObligatory_$cenumFromTo
                  GrammarData.$fEnumWHMovementObligatory_$cenumFromThenTo -}
e7236c5b74ef163c5dcac13e97f6961e
  $fEnumWHMovementObligatory1 ::
    GHC.Prim.Int# -> GrammarData.WHMovementObligatory
  {- Arity: 1, Strictness: <L,U>b -}
e7236c5b74ef163c5dcac13e97f6961e
  $fEnumWHMovementObligatory2 :: [GrammarData.WHMovementObligatory]
  {- Unfolding: (GrammarData.$fEnumWHMovementObligatory_go2 1) -}
e7236c5b74ef163c5dcac13e97f6961e
  $fEnumWHMovementObligatory3 :: [GrammarData.WHMovementObligatory]
  {- Unfolding: (GrammarData.$fEnumWHMovementObligatory_go3 0) -}
e7236c5b74ef163c5dcac13e97f6961e
  $fEnumWHMovementObligatory4 :: GrammarData.WHMovementObligatory
  {- Strictness: b -}
e7236c5b74ef163c5dcac13e97f6961e
  $fEnumWHMovementObligatory5 :: GrammarData.WHMovementObligatory
  {- Strictness: b -}
e7236c5b74ef163c5dcac13e97f6961e
  $fEnumWHMovementObligatory_$cenumFrom ::
    GrammarData.WHMovementObligatory
    -> [GrammarData.WHMovementObligatory]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ a13 :: GrammarData.WHMovementObligatory ->
                 case a13 of wild {
                   GrammarData.NoWHMove -> GrammarData.$fEnumWHMovementObligatory3
                   GrammarData.OblWHMove
                   -> GrammarData.$fEnumWHMovementObligatory2 }) -}
e7236c5b74ef163c5dcac13e97f6961e
  $fEnumWHMovementObligatory_$cenumFromThen ::
    GrammarData.WHMovementObligatory
    -> GrammarData.WHMovementObligatory
    -> [GrammarData.WHMovementObligatory]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a13 :: GrammarData.WHMovementObligatory
                   b :: GrammarData.WHMovementObligatory ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.WHMovementObligatory]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ a# :: GHC.Prim.Int#[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int# -> [GrammarData.WHMovementObligatory]
                         {- Arity: 1, Strictness: <L,U> -}
                       = \ b# :: GHC.Prim.Int#[OneShot] ->
                         let {
                           $j2 :: GHC.Prim.Int# -> [GrammarData.WHMovementObligatory]
                             {- Arity: 1, Strictness: <L,U> -}
                           = \ y :: GHC.Prim.Int#[OneShot] ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# b# a#) of wild {
                               GHC.Types.False
                               -> GHC.Enum.efdtIntDnFB
                                    @ [GrammarData.WHMovementObligatory]
                                    GrammarData.$fEnumWHMovementObligatory_c1
                                    (GHC.Types.[] @ GrammarData.WHMovementObligatory)
                                    a#
                                    b#
                                    y
                               GHC.Types.True
                               -> GHC.Enum.efdtIntUpFB
                                    @ [GrammarData.WHMovementObligatory]
                                    GrammarData.$fEnumWHMovementObligatory_c1
                                    (GHC.Types.[] @ GrammarData.WHMovementObligatory)
                                    a#
                                    b#
                                    y }
                         } in
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.># a# b#) of wild {
                           GHC.Types.False -> $j2 1 GHC.Types.True -> $j2 0 }
                     } in
                     case b of wild {
                       GrammarData.NoWHMove -> $j1 0 GrammarData.OblWHMove -> $j1 1 }
                 } in
                 case a13 of wild {
                   GrammarData.NoWHMove -> $j 0 GrammarData.OblWHMove -> $j 1 }) -}
e7236c5b74ef163c5dcac13e97f6961e
  $fEnumWHMovementObligatory_$cenumFromThenTo ::
    GrammarData.WHMovementObligatory
    -> GrammarData.WHMovementObligatory
    -> GrammarData.WHMovementObligatory
    -> [GrammarData.WHMovementObligatory]
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U>,
     Unfolding: (\ x1 :: GrammarData.WHMovementObligatory
                   x2 :: GrammarData.WHMovementObligatory
                   y :: GrammarData.WHMovementObligatory ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.WHMovementObligatory]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ x4 :: GHC.Prim.Int#[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int# -> [GrammarData.WHMovementObligatory]
                         {- Arity: 1, Strictness: <L,U> -}
                       = \ x5 :: GHC.Prim.Int#[OneShot] ->
                         case y of wild {
                           GrammarData.NoWHMove
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [GrammarData.WHMovementObligatory]
                                     GrammarData.$fEnumWHMovementObligatory_c
                                     (GHC.Types.[] @ GrammarData.WHMovementObligatory)
                                     x4
                                     x5
                                     0
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [GrammarData.WHMovementObligatory]
                                     GrammarData.$fEnumWHMovementObligatory_c
                                     (GHC.Types.[] @ GrammarData.WHMovementObligatory)
                                     x4
                                     x5
                                     0 }
                           GrammarData.OblWHMove
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [GrammarData.WHMovementObligatory]
                                     GrammarData.$fEnumWHMovementObligatory_c
                                     (GHC.Types.[] @ GrammarData.WHMovementObligatory)
                                     x4
                                     x5
                                     1
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [GrammarData.WHMovementObligatory]
                                     GrammarData.$fEnumWHMovementObligatory_c
                                     (GHC.Types.[] @ GrammarData.WHMovementObligatory)
                                     x4
                                     x5
                                     1 } }
                     } in
                     case x2 of wild {
                       GrammarData.NoWHMove -> $j1 0 GrammarData.OblWHMove -> $j1 1 }
                 } in
                 case x1 of wild {
                   GrammarData.NoWHMove -> $j 0 GrammarData.OblWHMove -> $j 1 }) -}
e7236c5b74ef163c5dcac13e97f6961e
  $fEnumWHMovementObligatory_$cenumFromTo ::
    GrammarData.WHMovementObligatory
    -> GrammarData.WHMovementObligatory
    -> [GrammarData.WHMovementObligatory]
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ x :: GrammarData.WHMovementObligatory
                   y :: GrammarData.WHMovementObligatory ->
                 let {
                   $j :: GHC.Prim.Int# -> [GrammarData.WHMovementObligatory]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ x1 :: GHC.Prim.Int#[OneShot] ->
                     case y of wild {
                       GrammarData.NoWHMove
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 0) of wild1 {
                            GHC.Types.False -> GrammarData.$fEnumWHMovementObligatory_go1 x1
                            GHC.Types.True -> GHC.Types.[] @ GrammarData.WHMovementObligatory }
                       GrammarData.OblWHMove
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 1) of wild1 {
                            GHC.Types.False -> GrammarData.$fEnumWHMovementObligatory_go x1
                            GHC.Types.True
                            -> GHC.Types.[] @ GrammarData.WHMovementObligatory } }
                 } in
                 case x of wild {
                   GrammarData.NoWHMove -> $j 0 GrammarData.OblWHMove -> $j 1 }) -}
e7236c5b74ef163c5dcac13e97f6961e
  $fEnumWHMovementObligatory_$cfromEnum ::
    GrammarData.WHMovementObligatory -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.WHMovementObligatory ->
                 case a13 of wild {
                   GrammarData.NoWHMove -> GHC.Types.I# 0
                   GrammarData.OblWHMove -> GHC.Types.I# 1 }) -}
e7236c5b74ef163c5dcac13e97f6961e
  $fEnumWHMovementObligatory_$cpred ::
    GrammarData.WHMovementObligatory
    -> GrammarData.WHMovementObligatory
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.WHMovementObligatory ->
                 case a13 of wild {
                   GrammarData.NoWHMove -> GrammarData.$fEnumWHMovementObligatory4
                   GrammarData.OblWHMove -> GrammarData.NoWHMove }) -}
e7236c5b74ef163c5dcac13e97f6961e
  $fEnumWHMovementObligatory_$csucc ::
    GrammarData.WHMovementObligatory
    -> GrammarData.WHMovementObligatory
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a13 :: GrammarData.WHMovementObligatory ->
                 case a13 of wild {
                   GrammarData.NoWHMove -> GrammarData.OblWHMove
                   GrammarData.OblWHMove
                   -> GrammarData.$fEnumWHMovementObligatory5 }) -}
e7236c5b74ef163c5dcac13e97f6961e
  $fEnumWHMovementObligatory_$ctoEnum ::
    GHC.Types.Int -> GrammarData.WHMovementObligatory
  {- Arity: 1, Strictness: <S,1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: GHC.Types.Int ->
                 case w of ww { GHC.Types.I# ww1 ->
                 GrammarData.$w$ctoEnum13 ww1 }) -}
e7236c5b74ef163c5dcac13e97f6961e
  $fEnumWHMovementObligatory_c ::
    GHC.Types.Int
    -> [GrammarData.WHMovementObligatory]
    -> [GrammarData.WHMovementObligatory]
  {- Arity: 2, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int ys :: [GrammarData.WHMovementObligatory] ->
                 GHC.Types.:
                   @ GrammarData.WHMovementObligatory
                   (GrammarData.$fEnumWHMovementObligatory_$ctoEnum x)
                   ys) -}
e7236c5b74ef163c5dcac13e97f6961e
  $fEnumWHMovementObligatory_c1 ::
    GHC.Types.Int
    -> [GrammarData.WHMovementObligatory]
    -> [GrammarData.WHMovementObligatory]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int ys :: [GrammarData.WHMovementObligatory] ->
                 GHC.Types.:
                   @ GrammarData.WHMovementObligatory
                   (case x of wild { GHC.Types.I# a13 ->
                    GHC.Prim.tagToEnum# @ GrammarData.WHMovementObligatory a13 })
                   ys) -}
e7236c5b74ef163c5dcac13e97f6961e
  $fEnumWHMovementObligatory_go ::
    GHC.Prim.Int# -> [GrammarData.WHMovementObligatory]
  {- Arity: 1, Strictness: <L,U> -}
e7236c5b74ef163c5dcac13e97f6961e
  $fEnumWHMovementObligatory_go1 ::
    GHC.Prim.Int# -> [GrammarData.WHMovementObligatory]
  {- Arity: 1, Strictness: <L,U> -}
e7236c5b74ef163c5dcac13e97f6961e
  $fEnumWHMovementObligatory_go2 ::
    GHC.Prim.Int# -> [GrammarData.WHMovementObligatory]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
e7236c5b74ef163c5dcac13e97f6961e
  $fEnumWHMovementObligatory_go3 ::
    GHC.Prim.Int# -> [GrammarData.WHMovementObligatory]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
da5bcd429ecfbb71b847767f8ed9569d
  $fEqAffixHopping :: GHC.Classes.Eq GrammarData.AffixHopping
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.AffixHopping
                  GrammarData.$fEqAffixHopping_$c==
                  GrammarData.$fEqAffixHopping_$c/= -}
da5bcd429ecfbb71b847767f8ed9569d
  $fEqAffixHopping_$c/= ::
    GrammarData.AffixHopping
    -> GrammarData.AffixHopping -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a13 :: GrammarData.AffixHopping b :: GrammarData.AffixHopping ->
                 case a13 of wild {
                   GrammarData.NoAffixHop
                   -> case b of wild1 {
                        GrammarData.NoAffixHop -> GHC.Types.False
                        GrammarData.OblAffixHop -> GHC.Types.True }
                   GrammarData.OblAffixHop
                   -> case b of wild1 {
                        GrammarData.NoAffixHop -> GHC.Types.True
                        GrammarData.OblAffixHop -> GHC.Types.False } }) -}
da5bcd429ecfbb71b847767f8ed9569d
  $fEqAffixHopping_$c== ::
    GrammarData.AffixHopping
    -> GrammarData.AffixHopping -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarData.AffixHopping
                   ds1 :: GrammarData.AffixHopping ->
                 case ds of wild {
                   GrammarData.NoAffixHop
                   -> case ds1 of wild1 {
                        GrammarData.NoAffixHop -> GHC.Types.True
                        GrammarData.OblAffixHop -> GHC.Types.False }
                   GrammarData.OblAffixHop
                   -> case ds1 of wild1 {
                        GrammarData.NoAffixHop -> GHC.Types.False
                        GrammarData.OblAffixHop -> GHC.Types.True } }) -}
04a49f52bfdb87c5c968d67f70ef7770
  $fEqBar :: GHC.Classes.Eq GrammarData.Bar
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.Bar
                  GrammarData.$fEqBar_$c==
                  GrammarData.$fEqBar_$c/= -}
04a49f52bfdb87c5c968d67f70ef7770
  $fEqBar_$c/= ::
    GrammarData.Bar -> GrammarData.Bar -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a13 :: GrammarData.Bar b :: GrammarData.Bar ->
                 case GrammarData.$fEqBar_$c== a13 b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
04a49f52bfdb87c5c968d67f70ef7770
  $fEqBar_$c== ::
    GrammarData.Bar -> GrammarData.Bar -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
b8946e12084618f63d7bf871f8615ccb
  $fEqComplementizerInitial ::
    GHC.Classes.Eq GrammarData.ComplementizerInitial
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.ComplementizerInitial
                  GrammarData.$fEqComplementizerInitial_$c==
                  GrammarData.$fEqComplementizerInitial_$c/= -}
b8946e12084618f63d7bf871f8615ccb
  $fEqComplementizerInitial_$c/= ::
    GrammarData.ComplementizerInitial
    -> GrammarData.ComplementizerInitial -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a13 :: GrammarData.ComplementizerInitial
                   b :: GrammarData.ComplementizerInitial ->
                 case a13 of wild {
                   GrammarData.CompInitial
                   -> case b of wild1 {
                        GrammarData.CompInitial -> GHC.Types.False
                        GrammarData.CompFinal -> GHC.Types.True }
                   GrammarData.CompFinal
                   -> case b of wild1 {
                        GrammarData.CompInitial -> GHC.Types.True
                        GrammarData.CompFinal -> GHC.Types.False } }) -}
b8946e12084618f63d7bf871f8615ccb
  $fEqComplementizerInitial_$c== ::
    GrammarData.ComplementizerInitial
    -> GrammarData.ComplementizerInitial -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarData.ComplementizerInitial
                   ds1 :: GrammarData.ComplementizerInitial ->
                 case ds of wild {
                   GrammarData.CompInitial
                   -> case ds1 of wild1 {
                        GrammarData.CompInitial -> GHC.Types.True
                        GrammarData.CompFinal -> GHC.Types.False }
                   GrammarData.CompFinal
                   -> case ds1 of wild1 {
                        GrammarData.CompInitial -> GHC.Types.False
                        GrammarData.CompFinal -> GHC.Types.True } }) -}
0b723dd66110bae4a164ef4cfb3bebd4
  $fEqIlloc :: GHC.Classes.Eq GrammarData.Illoc
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.Illoc
                  GrammarData.$fEqIlloc_$c==
                  GrammarData.$fEqIlloc_$c/= -}
0b723dd66110bae4a164ef4cfb3bebd4
  $fEqIlloc_$c/= ::
    GrammarData.Illoc -> GrammarData.Illoc -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a13 :: GrammarData.Illoc b :: GrammarData.Illoc ->
                 case a13 of wild {
                   GrammarData.Null
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarData.Null -> GHC.Types.False }
                   GrammarData.Ques
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarData.Ques -> GHC.Types.False }
                   GrammarData.Decl
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarData.Decl -> GHC.Types.False }
                   GrammarData.Imper
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        GrammarData.Imper -> GHC.Types.False } }) -}
0b723dd66110bae4a164ef4cfb3bebd4
  $fEqIlloc_$c== ::
    GrammarData.Illoc -> GrammarData.Illoc -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: GrammarData.Illoc ds1 :: GrammarData.Illoc ->
                 case ds of wild {
                   GrammarData.Null
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarData.Null -> GHC.Types.True }
                   GrammarData.Ques
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarData.Ques -> GHC.Types.True }
                   GrammarData.Decl
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarData.Decl -> GHC.Types.True }
                   GrammarData.Imper
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarData.Imper -> GHC.Types.True } }) -}
be5e38a33a1f6f8dedf69a22bff6d6f1
  $fEqItoCMovement :: GHC.Classes.Eq GrammarData.ItoCMovement
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.ItoCMovement
                  GrammarData.$fEqItoCMovement_$c==
                  GrammarData.$fEqItoCMovement_$c/= -}
be5e38a33a1f6f8dedf69a22bff6d6f1
  $fEqItoCMovement_$c/= ::
    GrammarData.ItoCMovement
    -> GrammarData.ItoCMovement -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a13 :: GrammarData.ItoCMovement b :: GrammarData.ItoCMovement ->
                 case a13 of wild {
                   GrammarData.NoItoCMove
                   -> case b of wild1 {
                        GrammarData.NoItoCMove -> GHC.Types.False
                        GrammarData.OblItoCMove -> GHC.Types.True }
                   GrammarData.OblItoCMove
                   -> case b of wild1 {
                        GrammarData.NoItoCMove -> GHC.Types.True
                        GrammarData.OblItoCMove -> GHC.Types.False } }) -}
be5e38a33a1f6f8dedf69a22bff6d6f1
  $fEqItoCMovement_$c== ::
    GrammarData.ItoCMovement
    -> GrammarData.ItoCMovement -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarData.ItoCMovement
                   ds1 :: GrammarData.ItoCMovement ->
                 case ds of wild {
                   GrammarData.NoItoCMove
                   -> case ds1 of wild1 {
                        GrammarData.NoItoCMove -> GHC.Types.True
                        GrammarData.OblItoCMove -> GHC.Types.False }
                   GrammarData.OblItoCMove
                   -> case ds1 of wild1 {
                        GrammarData.NoItoCMove -> GHC.Types.False
                        GrammarData.OblItoCMove -> GHC.Types.True } }) -}
0c62203b93e11b844f77275212ff8c48
  $fEqLeaf :: GHC.Classes.Eq GrammarData.Leaf
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.Leaf
                  GrammarData.$fEqLeaf_$c==
                  GrammarData.$fEqLeaf_$c/= -}
0c62203b93e11b844f77275212ff8c48
  $fEqLeaf_$c/= ::
    GrammarData.Leaf -> GrammarData.Leaf -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a13 :: GrammarData.Leaf b :: GrammarData.Leaf ->
                 case GrammarData.$fEqLeaf_$c== a13 b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
0c62203b93e11b844f77275212ff8c48
  $fEqLeaf_$c== ::
    GrammarData.Leaf -> GrammarData.Leaf -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: GrammarData.Leaf ds1 :: GrammarData.Leaf ->
                 case ds of wild {
                   GrammarData.LeafNull a13
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarData.LeafNull b1 -> GrammarData.$fEqIlloc_$c== a13 b1 }
                   GrammarData.LeafInfl a13 a14
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarData.LeafInfl b1 b2
                        -> case a13 of x1 { DEFAULT ->
                           case b1 of x2 { DEFAULT ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==#
                                     (GHC.Prim.dataToTag# @ InflectionData.LexCat x1)
                                     (GHC.Prim.dataToTag# @ InflectionData.LexCat x2)) of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> InflectionData.$fEq(,,,,,,,,,,,,,,,,)_$s$c== a14 b2 } } } }
                   GrammarData.Leaf a13 a14 a15
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarData.Leaf b1 b2 b3
                        -> case a13 of x1 { DEFAULT ->
                           case b1 of x2 { DEFAULT ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==#
                                     (GHC.Prim.dataToTag# @ InflectionData.LexCat x1)
                                     (GHC.Prim.dataToTag# @ InflectionData.LexCat x2)) of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> case a14 of wild3 {
                                  GrammarData.Null
                                  -> case b2 of wild4 {
                                       DEFAULT -> GHC.Types.False
                                       GrammarData.Null -> GHC.Base.eqString a15 b3 }
                                  GrammarData.Ques
                                  -> case b2 of wild4 {
                                       DEFAULT -> GHC.Types.False
                                       GrammarData.Ques -> GHC.Base.eqString a15 b3 }
                                  GrammarData.Decl
                                  -> case b2 of wild4 {
                                       DEFAULT -> GHC.Types.False
                                       GrammarData.Decl -> GHC.Base.eqString a15 b3 }
                                  GrammarData.Imper
                                  -> case b2 of wild4 {
                                       DEFAULT -> GHC.Types.False
                                       GrammarData.Imper
                                       -> GHC.Base.eqString a15 b3 } } } } } } }) -}
1b4b07b4babd1eb036e98b6d73553688
  $fEqNullSubject :: GHC.Classes.Eq GrammarData.NullSubject
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.NullSubject
                  GrammarData.$fEqNullSubject_$c==
                  GrammarData.$fEqNullSubject_$c/= -}
1b4b07b4babd1eb036e98b6d73553688
  $fEqNullSubject_$c/= ::
    GrammarData.NullSubject
    -> GrammarData.NullSubject -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a13 :: GrammarData.NullSubject b :: GrammarData.NullSubject ->
                 case a13 of wild {
                   GrammarData.NoNullSub
                   -> case b of wild1 {
                        GrammarData.NoNullSub -> GHC.Types.False
                        GrammarData.OptNullSub -> GHC.Types.True }
                   GrammarData.OptNullSub
                   -> case b of wild1 {
                        GrammarData.NoNullSub -> GHC.Types.True
                        GrammarData.OptNullSub -> GHC.Types.False } }) -}
1b4b07b4babd1eb036e98b6d73553688
  $fEqNullSubject_$c== ::
    GrammarData.NullSubject
    -> GrammarData.NullSubject -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarData.NullSubject ds1 :: GrammarData.NullSubject ->
                 case ds of wild {
                   GrammarData.NoNullSub
                   -> case ds1 of wild1 {
                        GrammarData.NoNullSub -> GHC.Types.True
                        GrammarData.OptNullSub -> GHC.Types.False }
                   GrammarData.OptNullSub
                   -> case ds1 of wild1 {
                        GrammarData.NoNullSub -> GHC.Types.False
                        GrammarData.OptNullSub -> GHC.Types.True } }) -}
46091d0005c8b4e70b593eb7aef83709
  $fEqNullTopic :: GHC.Classes.Eq GrammarData.NullTopic
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.NullTopic
                  GrammarData.$fEqNullTopic_$c==
                  GrammarData.$fEqNullTopic_$c/= -}
46091d0005c8b4e70b593eb7aef83709
  $fEqNullTopic_$c/= ::
    GrammarData.NullTopic -> GrammarData.NullTopic -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a13 :: GrammarData.NullTopic b :: GrammarData.NullTopic ->
                 case a13 of wild {
                   GrammarData.NoNullTop
                   -> case b of wild1 {
                        GrammarData.NoNullTop -> GHC.Types.False
                        GrammarData.OptNullTop -> GHC.Types.True }
                   GrammarData.OptNullTop
                   -> case b of wild1 {
                        GrammarData.NoNullTop -> GHC.Types.True
                        GrammarData.OptNullTop -> GHC.Types.False } }) -}
46091d0005c8b4e70b593eb7aef83709
  $fEqNullTopic_$c== ::
    GrammarData.NullTopic -> GrammarData.NullTopic -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarData.NullTopic ds1 :: GrammarData.NullTopic ->
                 case ds of wild {
                   GrammarData.NoNullTop
                   -> case ds1 of wild1 {
                        GrammarData.NoNullTop -> GHC.Types.True
                        GrammarData.OptNullTop -> GHC.Types.False }
                   GrammarData.OptNullTop
                   -> case ds1 of wild1 {
                        GrammarData.NoNullTop -> GHC.Types.False
                        GrammarData.OptNullTop -> GHC.Types.True } }) -}
c2c0ea9981f3d6eed112f850f7ea6beb
  $fEqObjectFinal :: GHC.Classes.Eq GrammarData.ObjectFinal
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.ObjectFinal
                  GrammarData.$fEqObjectFinal_$c==
                  GrammarData.$fEqObjectFinal_$c/= -}
c2c0ea9981f3d6eed112f850f7ea6beb
  $fEqObjectFinal_$c/= ::
    GrammarData.ObjectFinal
    -> GrammarData.ObjectFinal -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a13 :: GrammarData.ObjectFinal b :: GrammarData.ObjectFinal ->
                 case a13 of wild {
                   GrammarData.ObjFinal
                   -> case b of wild1 {
                        GrammarData.ObjFinal -> GHC.Types.False
                        GrammarData.ObjInitial -> GHC.Types.True }
                   GrammarData.ObjInitial
                   -> case b of wild1 {
                        GrammarData.ObjFinal -> GHC.Types.True
                        GrammarData.ObjInitial -> GHC.Types.False } }) -}
c2c0ea9981f3d6eed112f850f7ea6beb
  $fEqObjectFinal_$c== ::
    GrammarData.ObjectFinal
    -> GrammarData.ObjectFinal -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarData.ObjectFinal ds1 :: GrammarData.ObjectFinal ->
                 case ds of wild {
                   GrammarData.ObjFinal
                   -> case ds1 of wild1 {
                        GrammarData.ObjFinal -> GHC.Types.True
                        GrammarData.ObjInitial -> GHC.Types.False }
                   GrammarData.ObjInitial
                   -> case ds1 of wild1 {
                        GrammarData.ObjFinal -> GHC.Types.False
                        GrammarData.ObjInitial -> GHC.Types.True } }) -}
69babcc57bbc447bbcd2b156d19a1d60
  $fEqObligatoryTopic :: GHC.Classes.Eq GrammarData.ObligatoryTopic
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.ObligatoryTopic
                  GrammarData.$fEqObligatoryTopic_$c==
                  GrammarData.$fEqObligatoryTopic_$c/= -}
69babcc57bbc447bbcd2b156d19a1d60
  $fEqObligatoryTopic_$c/= ::
    GrammarData.ObligatoryTopic
    -> GrammarData.ObligatoryTopic -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a13 :: GrammarData.ObligatoryTopic
                   b :: GrammarData.ObligatoryTopic ->
                 case a13 of wild {
                   GrammarData.OblTopic
                   -> case b of wild1 {
                        GrammarData.OblTopic -> GHC.Types.False
                        GrammarData.OptTopic -> GHC.Types.True }
                   GrammarData.OptTopic
                   -> case b of wild1 {
                        GrammarData.OblTopic -> GHC.Types.True
                        GrammarData.OptTopic -> GHC.Types.False } }) -}
69babcc57bbc447bbcd2b156d19a1d60
  $fEqObligatoryTopic_$c== ::
    GrammarData.ObligatoryTopic
    -> GrammarData.ObligatoryTopic -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarData.ObligatoryTopic
                   ds1 :: GrammarData.ObligatoryTopic ->
                 case ds of wild {
                   GrammarData.OblTopic
                   -> case ds1 of wild1 {
                        GrammarData.OblTopic -> GHC.Types.True
                        GrammarData.OptTopic -> GHC.Types.False }
                   GrammarData.OptTopic
                   -> case ds1 of wild1 {
                        GrammarData.OblTopic -> GHC.Types.False
                        GrammarData.OptTopic -> GHC.Types.True } }) -}
04a49f52bfdb87c5c968d67f70ef7770
  $fEqPhrase :: GHC.Classes.Eq GrammarData.Phrase
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.Phrase
                  GrammarData.$fEqPhrase_$c==
                  GrammarData.$fEqPhrase_$c/= -}
04a49f52bfdb87c5c968d67f70ef7770
  $fEqPhrase_$c/= ::
    GrammarData.Phrase -> GrammarData.Phrase -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a13 :: GrammarData.Phrase b :: GrammarData.Phrase ->
                 case GrammarData.$fEqPhrase_$c== a13 b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
04a49f52bfdb87c5c968d67f70ef7770
  $fEqPhrase_$c== ::
    GrammarData.Phrase -> GrammarData.Phrase -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
7ceb67be553ed9e58e992b22465238f0
  $fEqPiedPiping :: GHC.Classes.Eq GrammarData.PiedPiping
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.PiedPiping
                  GrammarData.$fEqPiedPiping_$c==
                  GrammarData.$fEqPiedPiping_$c/= -}
7ceb67be553ed9e58e992b22465238f0
  $fEqPiedPiping_$c/= ::
    GrammarData.PiedPiping -> GrammarData.PiedPiping -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a13 :: GrammarData.PiedPiping b :: GrammarData.PiedPiping ->
                 case a13 of wild {
                   GrammarData.PiedPipe
                   -> case b of wild1 {
                        GrammarData.PiedPipe -> GHC.Types.False
                        GrammarData.PrepStrand -> GHC.Types.True }
                   GrammarData.PrepStrand
                   -> case b of wild1 {
                        GrammarData.PiedPipe -> GHC.Types.True
                        GrammarData.PrepStrand -> GHC.Types.False } }) -}
7ceb67be553ed9e58e992b22465238f0
  $fEqPiedPiping_$c== ::
    GrammarData.PiedPiping -> GrammarData.PiedPiping -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarData.PiedPiping ds1 :: GrammarData.PiedPiping ->
                 case ds of wild {
                   GrammarData.PiedPipe
                   -> case ds1 of wild1 {
                        GrammarData.PiedPipe -> GHC.Types.True
                        GrammarData.PrepStrand -> GHC.Types.False }
                   GrammarData.PrepStrand
                   -> case ds1 of wild1 {
                        GrammarData.PiedPipe -> GHC.Types.False
                        GrammarData.PrepStrand -> GHC.Types.True } }) -}
9bce092da85110dd69ced0b3f1053c6d
  $fEqQuestionInversion ::
    GHC.Classes.Eq GrammarData.QuestionInversion
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.QuestionInversion
                  GrammarData.$fEqQuestionInversion_$c==
                  GrammarData.$fEqQuestionInversion_$c/= -}
9bce092da85110dd69ced0b3f1053c6d
  $fEqQuestionInversion_$c/= ::
    GrammarData.QuestionInversion
    -> GrammarData.QuestionInversion -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a13 :: GrammarData.QuestionInversion
                   b :: GrammarData.QuestionInversion ->
                 case a13 of wild {
                   GrammarData.NoQuesInv
                   -> case b of wild1 {
                        GrammarData.NoQuesInv -> GHC.Types.False
                        GrammarData.OblQuesInv -> GHC.Types.True }
                   GrammarData.OblQuesInv
                   -> case b of wild1 {
                        GrammarData.NoQuesInv -> GHC.Types.True
                        GrammarData.OblQuesInv -> GHC.Types.False } }) -}
9bce092da85110dd69ced0b3f1053c6d
  $fEqQuestionInversion_$c== ::
    GrammarData.QuestionInversion
    -> GrammarData.QuestionInversion -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarData.QuestionInversion
                   ds1 :: GrammarData.QuestionInversion ->
                 case ds of wild {
                   GrammarData.NoQuesInv
                   -> case ds1 of wild1 {
                        GrammarData.NoQuesInv -> GHC.Types.True
                        GrammarData.OblQuesInv -> GHC.Types.False }
                   GrammarData.OblQuesInv
                   -> case ds1 of wild1 {
                        GrammarData.NoQuesInv -> GHC.Types.False
                        GrammarData.OblQuesInv -> GHC.Types.True } }) -}
36a159f3ad56cebecc6962b0f39e356c
  $fEqSubjectInitial :: GHC.Classes.Eq GrammarData.SubjectInitial
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.SubjectInitial
                  GrammarData.$fEqSubjectInitial_$c==
                  GrammarData.$fEqSubjectInitial_$c/= -}
36a159f3ad56cebecc6962b0f39e356c
  $fEqSubjectInitial_$c/= ::
    GrammarData.SubjectInitial
    -> GrammarData.SubjectInitial -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a13 :: GrammarData.SubjectInitial
                   b :: GrammarData.SubjectInitial ->
                 case a13 of wild {
                   GrammarData.SubInitial
                   -> case b of wild1 {
                        GrammarData.SubInitial -> GHC.Types.False
                        GrammarData.SubFinal -> GHC.Types.True }
                   GrammarData.SubFinal
                   -> case b of wild1 {
                        GrammarData.SubInitial -> GHC.Types.True
                        GrammarData.SubFinal -> GHC.Types.False } }) -}
36a159f3ad56cebecc6962b0f39e356c
  $fEqSubjectInitial_$c== ::
    GrammarData.SubjectInitial
    -> GrammarData.SubjectInitial -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarData.SubjectInitial
                   ds1 :: GrammarData.SubjectInitial ->
                 case ds of wild {
                   GrammarData.SubInitial
                   -> case ds1 of wild1 {
                        GrammarData.SubInitial -> GHC.Types.True
                        GrammarData.SubFinal -> GHC.Types.False }
                   GrammarData.SubFinal
                   -> case ds1 of wild1 {
                        GrammarData.SubInitial -> GHC.Types.False
                        GrammarData.SubFinal -> GHC.Types.True } }) -}
c96d706f7e96f794b269594d2525904c
  $fEqTopicMarking :: GHC.Classes.Eq GrammarData.TopicMarking
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.TopicMarking
                  GrammarData.$fEqTopicMarking_$c==
                  GrammarData.$fEqTopicMarking_$c/= -}
c96d706f7e96f794b269594d2525904c
  $fEqTopicMarking_$c/= ::
    GrammarData.TopicMarking
    -> GrammarData.TopicMarking -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a13 :: GrammarData.TopicMarking b :: GrammarData.TopicMarking ->
                 case a13 of wild {
                   GrammarData.NoTopMark
                   -> case b of wild1 {
                        GrammarData.NoTopMark -> GHC.Types.False
                        GrammarData.OblTopMark -> GHC.Types.True }
                   GrammarData.OblTopMark
                   -> case b of wild1 {
                        GrammarData.NoTopMark -> GHC.Types.True
                        GrammarData.OblTopMark -> GHC.Types.False } }) -}
c96d706f7e96f794b269594d2525904c
  $fEqTopicMarking_$c== ::
    GrammarData.TopicMarking
    -> GrammarData.TopicMarking -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarData.TopicMarking
                   ds1 :: GrammarData.TopicMarking ->
                 case ds of wild {
                   GrammarData.NoTopMark
                   -> case ds1 of wild1 {
                        GrammarData.NoTopMark -> GHC.Types.True
                        GrammarData.OblTopMark -> GHC.Types.False }
                   GrammarData.OblTopMark
                   -> case ds1 of wild1 {
                        GrammarData.NoTopMark -> GHC.Types.False
                        GrammarData.OblTopMark -> GHC.Types.True } }) -}
e395809ab97655f1b03dc514ea8c035c
  $fEqVtoIMovement :: GHC.Classes.Eq GrammarData.VtoIMovement
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.VtoIMovement
                  GrammarData.$fEqVtoIMovement_$c==
                  GrammarData.$fEqVtoIMovement_$c/= -}
e395809ab97655f1b03dc514ea8c035c
  $fEqVtoIMovement_$c/= ::
    GrammarData.VtoIMovement
    -> GrammarData.VtoIMovement -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a13 :: GrammarData.VtoIMovement b :: GrammarData.VtoIMovement ->
                 case a13 of wild {
                   GrammarData.NoVtoIMove
                   -> case b of wild1 {
                        GrammarData.NoVtoIMove -> GHC.Types.False
                        GrammarData.OblVtoIMove -> GHC.Types.True }
                   GrammarData.OblVtoIMove
                   -> case b of wild1 {
                        GrammarData.NoVtoIMove -> GHC.Types.True
                        GrammarData.OblVtoIMove -> GHC.Types.False } }) -}
e395809ab97655f1b03dc514ea8c035c
  $fEqVtoIMovement_$c== ::
    GrammarData.VtoIMovement
    -> GrammarData.VtoIMovement -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarData.VtoIMovement
                   ds1 :: GrammarData.VtoIMovement ->
                 case ds of wild {
                   GrammarData.NoVtoIMove
                   -> case ds1 of wild1 {
                        GrammarData.NoVtoIMove -> GHC.Types.True
                        GrammarData.OblVtoIMove -> GHC.Types.False }
                   GrammarData.OblVtoIMove
                   -> case ds1 of wild1 {
                        GrammarData.NoVtoIMove -> GHC.Types.False
                        GrammarData.OblVtoIMove -> GHC.Types.True } }) -}
e7236c5b74ef163c5dcac13e97f6961e
  $fEqWHMovementObligatory ::
    GHC.Classes.Eq GrammarData.WHMovementObligatory
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.WHMovementObligatory
                  GrammarData.$fEqWHMovementObligatory_$c==
                  GrammarData.$fEqWHMovementObligatory_$c/= -}
e7236c5b74ef163c5dcac13e97f6961e
  $fEqWHMovementObligatory_$c/= ::
    GrammarData.WHMovementObligatory
    -> GrammarData.WHMovementObligatory -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a13 :: GrammarData.WHMovementObligatory
                   b :: GrammarData.WHMovementObligatory ->
                 case a13 of wild {
                   GrammarData.NoWHMove
                   -> case b of wild1 {
                        GrammarData.NoWHMove -> GHC.Types.False
                        GrammarData.OblWHMove -> GHC.Types.True }
                   GrammarData.OblWHMove
                   -> case b of wild1 {
                        GrammarData.NoWHMove -> GHC.Types.True
                        GrammarData.OblWHMove -> GHC.Types.False } }) -}
e7236c5b74ef163c5dcac13e97f6961e
  $fEqWHMovementObligatory_$c== ::
    GrammarData.WHMovementObligatory
    -> GrammarData.WHMovementObligatory -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarData.WHMovementObligatory
                   ds1 :: GrammarData.WHMovementObligatory ->
                 case ds of wild {
                   GrammarData.NoWHMove
                   -> case ds1 of wild1 {
                        GrammarData.NoWHMove -> GHC.Types.True
                        GrammarData.OblWHMove -> GHC.Types.False }
                   GrammarData.OblWHMove
                   -> case ds1 of wild1 {
                        GrammarData.NoWHMove -> GHC.Types.False
                        GrammarData.OblWHMove -> GHC.Types.True } }) -}
da5bcd429ecfbb71b847767f8ed9569d
  $fReadAffixHopping :: GHC.Read.Read GrammarData.AffixHopping
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.AffixHopping
                  GrammarData.$fReadAffixHopping_$s$dmreadsPrec
                  GrammarData.$fReadAffixHopping_$sreadListDefault
                  GrammarData.$fReadAffixHopping_$creadPrec
                  GrammarData.$fReadAffixHopping_$creadListPrec -}
da5bcd429ecfbb71b847767f8ed9569d
  $fReadAffixHopping1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarData.AffixHopping] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarData.AffixHopping]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarData.AffixHopping
                   GrammarData.$fReadAffixHopping2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarData.AffixHopping>_R))
                   @ b
                   eta1) -}
da5bcd429ecfbb71b847767f8ed9569d
  $fReadAffixHopping10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.AffixHopping -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.AffixHopping
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.NoAffixHop) -}
6c5102b8be4df14f814b349b4bcba4e3
  $fReadAffixHopping11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NoAffixHop"#) -}
da5bcd429ecfbb71b847767f8ed9569d
  $fReadAffixHopping2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarData.AffixHopping
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarData.AffixHopping
                   GrammarData.$fReadAffixHopping3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarData.AffixHopping>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarData.AffixHopping>_R)))) -}
da5bcd429ecfbb71b847767f8ed9569d
  $fReadAffixHopping3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.AffixHopping -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarData.AffixHopping
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarData.AffixHopping
                   GrammarData.$fReadAffixHopping4
                   eta
                   @ b
                   eta1) -}
da5bcd429ecfbb71b847767f8ed9569d
  $fReadAffixHopping4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.AffixHopping)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.AffixHopping)
                   GrammarData.$fReadAffixHopping9
                   GrammarData.$fReadAffixHopping5) -}
da5bcd429ecfbb71b847767f8ed9569d
  $fReadAffixHopping5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.AffixHopping)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.AffixHopping)
                   GrammarData.$fReadAffixHopping6
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           GrammarData.AffixHopping))) -}
da5bcd429ecfbb71b847767f8ed9569d
  $fReadAffixHopping6 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.AffixHopping)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadAffixHopping8,
                  GrammarData.$fReadAffixHopping7
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.AffixHopping>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.AffixHopping>_R))))) -}
da5bcd429ecfbb71b847767f8ed9569d
  $fReadAffixHopping7 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.AffixHopping -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.AffixHopping
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.OblAffixHop) -}
24dc88ddea2b17bc5b964660652a520c
  $fReadAffixHopping8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OblAffixHop"#) -}
da5bcd429ecfbb71b847767f8ed9569d
  $fReadAffixHopping9 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.AffixHopping)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadAffixHopping11,
                  GrammarData.$fReadAffixHopping10
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.AffixHopping>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.AffixHopping>_R))))) -}
da5bcd429ecfbb71b847767f8ed9569d
  $fReadAffixHopping_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [GrammarData.AffixHopping]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadAffixHopping1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarData.AffixHopping]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarData.AffixHopping]>_R))) -}
da5bcd429ecfbb71b847767f8ed9569d
  $fReadAffixHopping_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.AffixHopping
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadAffixHopping2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarData.AffixHopping>_R)) -}
da5bcd429ecfbb71b847767f8ed9569d
  $fReadAffixHopping_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarData.AffixHopping
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarData.AffixHopping
                   GrammarData.$fReadAffixHopping_$creadPrec
                   eta) -}
da5bcd429ecfbb71b847767f8ed9569d
  $fReadAffixHopping_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarData.AffixHopping]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarData.AffixHopping]
                   ((GrammarData.$fReadAffixHopping_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarData.AffixHopping]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarData.AffixHopping]>_R)
                      @ [GrammarData.AffixHopping]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarData.AffixHopping]))) -}
b8946e12084618f63d7bf871f8615ccb
  $fReadComplementizerInitial ::
    GHC.Read.Read GrammarData.ComplementizerInitial
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.ComplementizerInitial
                  GrammarData.$fReadComplementizerInitial_$s$dmreadsPrec
                  GrammarData.$fReadComplementizerInitial_$sreadListDefault
                  GrammarData.$fReadComplementizerInitial_$creadPrec
                  GrammarData.$fReadComplementizerInitial_$creadListPrec -}
b8946e12084618f63d7bf871f8615ccb
  $fReadComplementizerInitial1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarData.ComplementizerInitial]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarData.ComplementizerInitial]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarData.ComplementizerInitial
                   GrammarData.$fReadComplementizerInitial2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarData.ComplementizerInitial>_R))
                   @ b
                   eta1) -}
b8946e12084618f63d7bf871f8615ccb
  $fReadComplementizerInitial10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.ComplementizerInitial
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.ComplementizerInitial
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.CompInitial) -}
265531d8bdd5f29731b5fa88b84d318e
  $fReadComplementizerInitial11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "CompInitial"#) -}
b8946e12084618f63d7bf871f8615ccb
  $fReadComplementizerInitial2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP
         GrammarData.ComplementizerInitial
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarData.ComplementizerInitial
                   GrammarData.$fReadComplementizerInitial3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarData.ComplementizerInitial>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarData.ComplementizerInitial>_R)))) -}
b8946e12084618f63d7bf871f8615ccb
  $fReadComplementizerInitial3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.ComplementizerInitial
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarData.ComplementizerInitial
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarData.ComplementizerInitial
                   GrammarData.$fReadComplementizerInitial4
                   eta
                   @ b
                   eta1) -}
b8946e12084618f63d7bf871f8615ccb
  $fReadComplementizerInitial4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GrammarData.ComplementizerInitial)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GrammarData.ComplementizerInitial)
                   GrammarData.$fReadComplementizerInitial9
                   GrammarData.$fReadComplementizerInitial5) -}
b8946e12084618f63d7bf871f8615ccb
  $fReadComplementizerInitial5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GrammarData.ComplementizerInitial)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GrammarData.ComplementizerInitial)
                   GrammarData.$fReadComplementizerInitial6
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           GrammarData.ComplementizerInitial))) -}
b8946e12084618f63d7bf871f8615ccb
  $fReadComplementizerInitial6 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GrammarData.ComplementizerInitial)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadComplementizerInitial8,
                  GrammarData.$fReadComplementizerInitial7
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.ComplementizerInitial>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.ComplementizerInitial>_R))))) -}
b8946e12084618f63d7bf871f8615ccb
  $fReadComplementizerInitial7 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.ComplementizerInitial
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.ComplementizerInitial
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.CompFinal) -}
744610e6f0856ffbe3be6c2fa90f3945
  $fReadComplementizerInitial8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "CompFinal"#) -}
b8946e12084618f63d7bf871f8615ccb
  $fReadComplementizerInitial9 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GrammarData.ComplementizerInitial)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadComplementizerInitial11,
                  GrammarData.$fReadComplementizerInitial10
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.ComplementizerInitial>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.ComplementizerInitial>_R))))) -}
b8946e12084618f63d7bf871f8615ccb
  $fReadComplementizerInitial_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [GrammarData.ComplementizerInitial]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadComplementizerInitial1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarData.ComplementizerInitial]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarData.ComplementizerInitial]>_R))) -}
b8946e12084618f63d7bf871f8615ccb
  $fReadComplementizerInitial_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      GrammarData.ComplementizerInitial
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadComplementizerInitial2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarData.ComplementizerInitial>_R)) -}
b8946e12084618f63d7bf871f8615ccb
  $fReadComplementizerInitial_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS
         GrammarData.ComplementizerInitial
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarData.ComplementizerInitial
                   GrammarData.$fReadComplementizerInitial_$creadPrec
                   eta) -}
b8946e12084618f63d7bf871f8615ccb
  $fReadComplementizerInitial_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS
      [GrammarData.ComplementizerInitial]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarData.ComplementizerInitial]
                   ((GrammarData.$fReadComplementizerInitial_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarData.ComplementizerInitial]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarData.ComplementizerInitial]>_R)
                      @ [GrammarData.ComplementizerInitial]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarData.ComplementizerInitial]))) -}
be5e38a33a1f6f8dedf69a22bff6d6f1
  $fReadItoCMovement :: GHC.Read.Read GrammarData.ItoCMovement
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.ItoCMovement
                  GrammarData.$fReadItoCMovement_$s$dmreadsPrec
                  GrammarData.$fReadItoCMovement_$sreadListDefault
                  GrammarData.$fReadItoCMovement_$creadPrec
                  GrammarData.$fReadItoCMovement_$creadListPrec -}
be5e38a33a1f6f8dedf69a22bff6d6f1
  $fReadItoCMovement1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarData.ItoCMovement] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarData.ItoCMovement]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarData.ItoCMovement
                   GrammarData.$fReadItoCMovement2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarData.ItoCMovement>_R))
                   @ b
                   eta1) -}
be5e38a33a1f6f8dedf69a22bff6d6f1
  $fReadItoCMovement10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.ItoCMovement -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.ItoCMovement
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.NoItoCMove) -}
78baadc9724345d66251bc2efce5123d
  $fReadItoCMovement11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NoItoCMove"#) -}
be5e38a33a1f6f8dedf69a22bff6d6f1
  $fReadItoCMovement2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarData.ItoCMovement
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarData.ItoCMovement
                   GrammarData.$fReadItoCMovement3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarData.ItoCMovement>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarData.ItoCMovement>_R)))) -}
be5e38a33a1f6f8dedf69a22bff6d6f1
  $fReadItoCMovement3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.ItoCMovement -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarData.ItoCMovement
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarData.ItoCMovement
                   GrammarData.$fReadItoCMovement4
                   eta
                   @ b
                   eta1) -}
be5e38a33a1f6f8dedf69a22bff6d6f1
  $fReadItoCMovement4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.ItoCMovement)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.ItoCMovement)
                   GrammarData.$fReadItoCMovement9
                   GrammarData.$fReadItoCMovement5) -}
be5e38a33a1f6f8dedf69a22bff6d6f1
  $fReadItoCMovement5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.ItoCMovement)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.ItoCMovement)
                   GrammarData.$fReadItoCMovement6
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           GrammarData.ItoCMovement))) -}
be5e38a33a1f6f8dedf69a22bff6d6f1
  $fReadItoCMovement6 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.ItoCMovement)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadItoCMovement8,
                  GrammarData.$fReadItoCMovement7
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.ItoCMovement>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.ItoCMovement>_R))))) -}
be5e38a33a1f6f8dedf69a22bff6d6f1
  $fReadItoCMovement7 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.ItoCMovement -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.ItoCMovement
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.OblItoCMove) -}
b42c47605e054fef1624cef4846a626d
  $fReadItoCMovement8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OblItoCMove"#) -}
be5e38a33a1f6f8dedf69a22bff6d6f1
  $fReadItoCMovement9 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.ItoCMovement)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadItoCMovement11,
                  GrammarData.$fReadItoCMovement10
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.ItoCMovement>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.ItoCMovement>_R))))) -}
be5e38a33a1f6f8dedf69a22bff6d6f1
  $fReadItoCMovement_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [GrammarData.ItoCMovement]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadItoCMovement1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarData.ItoCMovement]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarData.ItoCMovement]>_R))) -}
be5e38a33a1f6f8dedf69a22bff6d6f1
  $fReadItoCMovement_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.ItoCMovement
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadItoCMovement2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarData.ItoCMovement>_R)) -}
be5e38a33a1f6f8dedf69a22bff6d6f1
  $fReadItoCMovement_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarData.ItoCMovement
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarData.ItoCMovement
                   GrammarData.$fReadItoCMovement_$creadPrec
                   eta) -}
be5e38a33a1f6f8dedf69a22bff6d6f1
  $fReadItoCMovement_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarData.ItoCMovement]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarData.ItoCMovement]
                   ((GrammarData.$fReadItoCMovement_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarData.ItoCMovement]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarData.ItoCMovement]>_R)
                      @ [GrammarData.ItoCMovement]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarData.ItoCMovement]))) -}
1b4b07b4babd1eb036e98b6d73553688
  $fReadNullSubject :: GHC.Read.Read GrammarData.NullSubject
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.NullSubject
                  GrammarData.$fReadNullSubject_$s$dmreadsPrec
                  GrammarData.$fReadNullSubject_$sreadListDefault
                  GrammarData.$fReadNullSubject_$creadPrec
                  GrammarData.$fReadNullSubject_$creadListPrec -}
1b4b07b4babd1eb036e98b6d73553688
  $fReadNullSubject1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarData.NullSubject] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarData.NullSubject]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarData.NullSubject
                   GrammarData.$fReadNullSubject2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarData.NullSubject>_R))
                   @ b
                   eta1) -}
1b4b07b4babd1eb036e98b6d73553688
  $fReadNullSubject10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.NullSubject -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.NullSubject
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.NoNullSub) -}
bcc6033c7ff35fe5bfdbae0ec78d25a7
  $fReadNullSubject11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NoNullSub"#) -}
1b4b07b4babd1eb036e98b6d73553688
  $fReadNullSubject2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarData.NullSubject
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarData.NullSubject
                   GrammarData.$fReadNullSubject3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarData.NullSubject>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarData.NullSubject>_R)))) -}
1b4b07b4babd1eb036e98b6d73553688
  $fReadNullSubject3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.NullSubject -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarData.NullSubject
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarData.NullSubject
                   GrammarData.$fReadNullSubject4
                   eta
                   @ b
                   eta1) -}
1b4b07b4babd1eb036e98b6d73553688
  $fReadNullSubject4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.NullSubject)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.NullSubject)
                   GrammarData.$fReadNullSubject9
                   GrammarData.$fReadNullSubject5) -}
1b4b07b4babd1eb036e98b6d73553688
  $fReadNullSubject5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.NullSubject)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.NullSubject)
                   GrammarData.$fReadNullSubject6
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           GrammarData.NullSubject))) -}
1b4b07b4babd1eb036e98b6d73553688
  $fReadNullSubject6 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.NullSubject)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadNullSubject8,
                  GrammarData.$fReadNullSubject7
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.NullSubject>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.NullSubject>_R))))) -}
1b4b07b4babd1eb036e98b6d73553688
  $fReadNullSubject7 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.NullSubject -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.NullSubject
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.OptNullSub) -}
a868ddf9269474edc58aa04942c54180
  $fReadNullSubject8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OptNullSub"#) -}
1b4b07b4babd1eb036e98b6d73553688
  $fReadNullSubject9 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.NullSubject)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadNullSubject11,
                  GrammarData.$fReadNullSubject10
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.NullSubject>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.NullSubject>_R))))) -}
1b4b07b4babd1eb036e98b6d73553688
  $fReadNullSubject_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [GrammarData.NullSubject]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadNullSubject1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarData.NullSubject]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarData.NullSubject]>_R))) -}
1b4b07b4babd1eb036e98b6d73553688
  $fReadNullSubject_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.NullSubject
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadNullSubject2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarData.NullSubject>_R)) -}
1b4b07b4babd1eb036e98b6d73553688
  $fReadNullSubject_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarData.NullSubject
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarData.NullSubject
                   GrammarData.$fReadNullSubject_$creadPrec
                   eta) -}
1b4b07b4babd1eb036e98b6d73553688
  $fReadNullSubject_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarData.NullSubject]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarData.NullSubject]
                   ((GrammarData.$fReadNullSubject_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarData.NullSubject]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarData.NullSubject]>_R)
                      @ [GrammarData.NullSubject]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarData.NullSubject]))) -}
46091d0005c8b4e70b593eb7aef83709
  $fReadNullTopic :: GHC.Read.Read GrammarData.NullTopic
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.NullTopic
                  GrammarData.$fReadNullTopic_$s$dmreadsPrec
                  GrammarData.$fReadNullTopic_$sreadListDefault
                  GrammarData.$fReadNullTopic_$creadPrec
                  GrammarData.$fReadNullTopic_$creadListPrec -}
46091d0005c8b4e70b593eb7aef83709
  $fReadNullTopic1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarData.NullTopic] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarData.NullTopic]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarData.NullTopic
                   GrammarData.$fReadNullTopic2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarData.NullTopic>_R))
                   @ b
                   eta1) -}
46091d0005c8b4e70b593eb7aef83709
  $fReadNullTopic10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.NullTopic -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.NullTopic -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.NoNullTop) -}
e277df4526ce42e0c287713ac9230134
  $fReadNullTopic11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NoNullTop"#) -}
46091d0005c8b4e70b593eb7aef83709
  $fReadNullTopic2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarData.NullTopic
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarData.NullTopic
                   GrammarData.$fReadNullTopic3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarData.NullTopic>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarData.NullTopic>_R)))) -}
46091d0005c8b4e70b593eb7aef83709
  $fReadNullTopic3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.NullTopic -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarData.NullTopic
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarData.NullTopic
                   GrammarData.$fReadNullTopic4
                   eta
                   @ b
                   eta1) -}
46091d0005c8b4e70b593eb7aef83709
  $fReadNullTopic4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.NullTopic)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.NullTopic)
                   GrammarData.$fReadNullTopic9
                   GrammarData.$fReadNullTopic5) -}
46091d0005c8b4e70b593eb7aef83709
  $fReadNullTopic5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.NullTopic)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.NullTopic)
                   GrammarData.$fReadNullTopic6
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           GrammarData.NullTopic))) -}
46091d0005c8b4e70b593eb7aef83709
  $fReadNullTopic6 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.NullTopic)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadNullTopic8,
                  GrammarData.$fReadNullTopic7
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.NullTopic>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.NullTopic>_R))))) -}
46091d0005c8b4e70b593eb7aef83709
  $fReadNullTopic7 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.NullTopic -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.NullTopic -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.OptNullTop) -}
f9de96e04d2454db67104c0df3f0284c
  $fReadNullTopic8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OptNullTop"#) -}
46091d0005c8b4e70b593eb7aef83709
  $fReadNullTopic9 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.NullTopic)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadNullTopic11,
                  GrammarData.$fReadNullTopic10
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.NullTopic>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.NullTopic>_R))))) -}
46091d0005c8b4e70b593eb7aef83709
  $fReadNullTopic_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [GrammarData.NullTopic]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadNullTopic1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarData.NullTopic]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarData.NullTopic]>_R))) -}
46091d0005c8b4e70b593eb7aef83709
  $fReadNullTopic_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.NullTopic
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadNullTopic2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarData.NullTopic>_R)) -}
46091d0005c8b4e70b593eb7aef83709
  $fReadNullTopic_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarData.NullTopic
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarData.NullTopic
                   GrammarData.$fReadNullTopic_$creadPrec
                   eta) -}
46091d0005c8b4e70b593eb7aef83709
  $fReadNullTopic_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarData.NullTopic]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarData.NullTopic]
                   ((GrammarData.$fReadNullTopic_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarData.NullTopic]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarData.NullTopic]>_R)
                      @ [GrammarData.NullTopic]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarData.NullTopic]))) -}
c2c0ea9981f3d6eed112f850f7ea6beb
  $fReadObjectFinal :: GHC.Read.Read GrammarData.ObjectFinal
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.ObjectFinal
                  GrammarData.$fReadObjectFinal_$s$dmreadsPrec
                  GrammarData.$fReadObjectFinal_$sreadListDefault
                  GrammarData.$fReadObjectFinal_$creadPrec
                  GrammarData.$fReadObjectFinal_$creadListPrec -}
c2c0ea9981f3d6eed112f850f7ea6beb
  $fReadObjectFinal1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarData.ObjectFinal] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarData.ObjectFinal]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarData.ObjectFinal
                   GrammarData.$fReadObjectFinal2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarData.ObjectFinal>_R))
                   @ b
                   eta1) -}
c2c0ea9981f3d6eed112f850f7ea6beb
  $fReadObjectFinal10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.ObjectFinal -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.ObjectFinal
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.ObjFinal) -}
dbf8754b60e84a319c9d5eeaaaa381bd
  $fReadObjectFinal11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ObjFinal"#) -}
c2c0ea9981f3d6eed112f850f7ea6beb
  $fReadObjectFinal2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarData.ObjectFinal
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarData.ObjectFinal
                   GrammarData.$fReadObjectFinal3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarData.ObjectFinal>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarData.ObjectFinal>_R)))) -}
c2c0ea9981f3d6eed112f850f7ea6beb
  $fReadObjectFinal3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.ObjectFinal -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarData.ObjectFinal
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarData.ObjectFinal
                   GrammarData.$fReadObjectFinal4
                   eta
                   @ b
                   eta1) -}
c2c0ea9981f3d6eed112f850f7ea6beb
  $fReadObjectFinal4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.ObjectFinal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.ObjectFinal)
                   GrammarData.$fReadObjectFinal9
                   GrammarData.$fReadObjectFinal5) -}
c2c0ea9981f3d6eed112f850f7ea6beb
  $fReadObjectFinal5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.ObjectFinal)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.ObjectFinal)
                   GrammarData.$fReadObjectFinal6
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           GrammarData.ObjectFinal))) -}
c2c0ea9981f3d6eed112f850f7ea6beb
  $fReadObjectFinal6 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.ObjectFinal)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadObjectFinal8,
                  GrammarData.$fReadObjectFinal7
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.ObjectFinal>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.ObjectFinal>_R))))) -}
c2c0ea9981f3d6eed112f850f7ea6beb
  $fReadObjectFinal7 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.ObjectFinal -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.ObjectFinal
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.ObjInitial) -}
6e7bd8171e8405f53aeb39f5aaa8e7c4
  $fReadObjectFinal8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ObjInitial"#) -}
c2c0ea9981f3d6eed112f850f7ea6beb
  $fReadObjectFinal9 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.ObjectFinal)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadObjectFinal11,
                  GrammarData.$fReadObjectFinal10
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.ObjectFinal>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.ObjectFinal>_R))))) -}
c2c0ea9981f3d6eed112f850f7ea6beb
  $fReadObjectFinal_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [GrammarData.ObjectFinal]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadObjectFinal1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarData.ObjectFinal]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarData.ObjectFinal]>_R))) -}
c2c0ea9981f3d6eed112f850f7ea6beb
  $fReadObjectFinal_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.ObjectFinal
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadObjectFinal2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarData.ObjectFinal>_R)) -}
c2c0ea9981f3d6eed112f850f7ea6beb
  $fReadObjectFinal_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarData.ObjectFinal
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarData.ObjectFinal
                   GrammarData.$fReadObjectFinal_$creadPrec
                   eta) -}
c2c0ea9981f3d6eed112f850f7ea6beb
  $fReadObjectFinal_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarData.ObjectFinal]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarData.ObjectFinal]
                   ((GrammarData.$fReadObjectFinal_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarData.ObjectFinal]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarData.ObjectFinal]>_R)
                      @ [GrammarData.ObjectFinal]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarData.ObjectFinal]))) -}
69babcc57bbc447bbcd2b156d19a1d60
  $fReadObligatoryTopic :: GHC.Read.Read GrammarData.ObligatoryTopic
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.ObligatoryTopic
                  GrammarData.$fReadObligatoryTopic_$s$dmreadsPrec
                  GrammarData.$fReadObligatoryTopic_$sreadListDefault
                  GrammarData.$fReadObligatoryTopic_$creadPrec
                  GrammarData.$fReadObligatoryTopic_$creadListPrec -}
69babcc57bbc447bbcd2b156d19a1d60
  $fReadObligatoryTopic1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarData.ObligatoryTopic] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarData.ObligatoryTopic]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarData.ObligatoryTopic
                   GrammarData.$fReadObligatoryTopic2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarData.ObligatoryTopic>_R))
                   @ b
                   eta1) -}
69babcc57bbc447bbcd2b156d19a1d60
  $fReadObligatoryTopic10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.ObligatoryTopic -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.ObligatoryTopic
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.OblTopic) -}
9ced7614730da364b9e9ad8bc876457d
  $fReadObligatoryTopic11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OblTopic"#) -}
69babcc57bbc447bbcd2b156d19a1d60
  $fReadObligatoryTopic2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarData.ObligatoryTopic
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarData.ObligatoryTopic
                   GrammarData.$fReadObligatoryTopic3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarData.ObligatoryTopic>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarData.ObligatoryTopic>_R)))) -}
69babcc57bbc447bbcd2b156d19a1d60
  $fReadObligatoryTopic3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.ObligatoryTopic -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarData.ObligatoryTopic
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarData.ObligatoryTopic
                   GrammarData.$fReadObligatoryTopic4
                   eta
                   @ b
                   eta1) -}
69babcc57bbc447bbcd2b156d19a1d60
  $fReadObligatoryTopic4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GrammarData.ObligatoryTopic)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GrammarData.ObligatoryTopic)
                   GrammarData.$fReadObligatoryTopic9
                   GrammarData.$fReadObligatoryTopic5) -}
69babcc57bbc447bbcd2b156d19a1d60
  $fReadObligatoryTopic5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GrammarData.ObligatoryTopic)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GrammarData.ObligatoryTopic)
                   GrammarData.$fReadObligatoryTopic6
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           GrammarData.ObligatoryTopic))) -}
69babcc57bbc447bbcd2b156d19a1d60
  $fReadObligatoryTopic6 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GrammarData.ObligatoryTopic)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadObligatoryTopic8,
                  GrammarData.$fReadObligatoryTopic7
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.ObligatoryTopic>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.ObligatoryTopic>_R))))) -}
69babcc57bbc447bbcd2b156d19a1d60
  $fReadObligatoryTopic7 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.ObligatoryTopic -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.ObligatoryTopic
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.OptTopic) -}
3bd8f3272e1e4eed54df5e5e2179bb0a
  $fReadObligatoryTopic8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OptTopic"#) -}
69babcc57bbc447bbcd2b156d19a1d60
  $fReadObligatoryTopic9 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GrammarData.ObligatoryTopic)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadObligatoryTopic11,
                  GrammarData.$fReadObligatoryTopic10
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.ObligatoryTopic>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.ObligatoryTopic>_R))))) -}
69babcc57bbc447bbcd2b156d19a1d60
  $fReadObligatoryTopic_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [GrammarData.ObligatoryTopic]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadObligatoryTopic1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarData.ObligatoryTopic]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarData.ObligatoryTopic]>_R))) -}
69babcc57bbc447bbcd2b156d19a1d60
  $fReadObligatoryTopic_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      GrammarData.ObligatoryTopic
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadObligatoryTopic2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarData.ObligatoryTopic>_R)) -}
69babcc57bbc447bbcd2b156d19a1d60
  $fReadObligatoryTopic_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarData.ObligatoryTopic
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarData.ObligatoryTopic
                   GrammarData.$fReadObligatoryTopic_$creadPrec
                   eta) -}
69babcc57bbc447bbcd2b156d19a1d60
  $fReadObligatoryTopic_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarData.ObligatoryTopic]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarData.ObligatoryTopic]
                   ((GrammarData.$fReadObligatoryTopic_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarData.ObligatoryTopic]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarData.ObligatoryTopic]>_R)
                      @ [GrammarData.ObligatoryTopic]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarData.ObligatoryTopic]))) -}
7ceb67be553ed9e58e992b22465238f0
  $fReadPiedPiping :: GHC.Read.Read GrammarData.PiedPiping
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.PiedPiping
                  GrammarData.$fReadPiedPiping_$s$dmreadsPrec
                  GrammarData.$fReadPiedPiping_$sreadListDefault
                  GrammarData.$fReadPiedPiping_$creadPrec
                  GrammarData.$fReadPiedPiping_$creadListPrec -}
7ceb67be553ed9e58e992b22465238f0
  $fReadPiedPiping1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarData.PiedPiping] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarData.PiedPiping]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarData.PiedPiping
                   GrammarData.$fReadPiedPiping2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarData.PiedPiping>_R))
                   @ b
                   eta1) -}
7ceb67be553ed9e58e992b22465238f0
  $fReadPiedPiping10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.PiedPiping -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.PiedPiping
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.PiedPipe) -}
12d292ad9acc9fed25fd415f095e46fa
  $fReadPiedPiping11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PiedPipe"#) -}
7ceb67be553ed9e58e992b22465238f0
  $fReadPiedPiping2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarData.PiedPiping
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarData.PiedPiping
                   GrammarData.$fReadPiedPiping3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarData.PiedPiping>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarData.PiedPiping>_R)))) -}
7ceb67be553ed9e58e992b22465238f0
  $fReadPiedPiping3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.PiedPiping -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarData.PiedPiping
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarData.PiedPiping
                   GrammarData.$fReadPiedPiping4
                   eta
                   @ b
                   eta1) -}
7ceb67be553ed9e58e992b22465238f0
  $fReadPiedPiping4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.PiedPiping)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.PiedPiping)
                   GrammarData.$fReadPiedPiping9
                   GrammarData.$fReadPiedPiping5) -}
7ceb67be553ed9e58e992b22465238f0
  $fReadPiedPiping5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.PiedPiping)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.PiedPiping)
                   GrammarData.$fReadPiedPiping6
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           GrammarData.PiedPiping))) -}
7ceb67be553ed9e58e992b22465238f0
  $fReadPiedPiping6 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.PiedPiping)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadPiedPiping8,
                  GrammarData.$fReadPiedPiping7
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.PiedPiping>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.PiedPiping>_R))))) -}
7ceb67be553ed9e58e992b22465238f0
  $fReadPiedPiping7 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.PiedPiping -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.PiedPiping
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.PrepStrand) -}
47cbe2b22bcb64beecd47322ca13f145
  $fReadPiedPiping8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PrepStrand"#) -}
7ceb67be553ed9e58e992b22465238f0
  $fReadPiedPiping9 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.PiedPiping)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadPiedPiping11,
                  GrammarData.$fReadPiedPiping10
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.PiedPiping>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.PiedPiping>_R))))) -}
7ceb67be553ed9e58e992b22465238f0
  $fReadPiedPiping_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [GrammarData.PiedPiping]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadPiedPiping1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarData.PiedPiping]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarData.PiedPiping]>_R))) -}
7ceb67be553ed9e58e992b22465238f0
  $fReadPiedPiping_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.PiedPiping
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadPiedPiping2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarData.PiedPiping>_R)) -}
7ceb67be553ed9e58e992b22465238f0
  $fReadPiedPiping_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarData.PiedPiping
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarData.PiedPiping
                   GrammarData.$fReadPiedPiping_$creadPrec
                   eta) -}
7ceb67be553ed9e58e992b22465238f0
  $fReadPiedPiping_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarData.PiedPiping]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarData.PiedPiping]
                   ((GrammarData.$fReadPiedPiping_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarData.PiedPiping]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarData.PiedPiping]>_R)
                      @ [GrammarData.PiedPiping]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarData.PiedPiping]))) -}
9bce092da85110dd69ced0b3f1053c6d
  $fReadQuestionInversion ::
    GHC.Read.Read GrammarData.QuestionInversion
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.QuestionInversion
                  GrammarData.$fReadQuestionInversion_$s$dmreadsPrec
                  GrammarData.$fReadQuestionInversion_$sreadListDefault
                  GrammarData.$fReadQuestionInversion_$creadPrec
                  GrammarData.$fReadQuestionInversion_$creadListPrec -}
9bce092da85110dd69ced0b3f1053c6d
  $fReadQuestionInversion1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarData.QuestionInversion]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarData.QuestionInversion]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarData.QuestionInversion
                   GrammarData.$fReadQuestionInversion2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarData.QuestionInversion>_R))
                   @ b
                   eta1) -}
9bce092da85110dd69ced0b3f1053c6d
  $fReadQuestionInversion10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.QuestionInversion -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.QuestionInversion
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.NoQuesInv) -}
4c0f0bfe3ba9e850e36211e9f297dc04
  $fReadQuestionInversion11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NoQuesInv"#) -}
9bce092da85110dd69ced0b3f1053c6d
  $fReadQuestionInversion2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarData.QuestionInversion
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarData.QuestionInversion
                   GrammarData.$fReadQuestionInversion3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarData.QuestionInversion>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarData.QuestionInversion>_R)))) -}
9bce092da85110dd69ced0b3f1053c6d
  $fReadQuestionInversion3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.QuestionInversion -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarData.QuestionInversion
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarData.QuestionInversion
                   GrammarData.$fReadQuestionInversion4
                   eta
                   @ b
                   eta1) -}
9bce092da85110dd69ced0b3f1053c6d
  $fReadQuestionInversion4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GrammarData.QuestionInversion)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GrammarData.QuestionInversion)
                   GrammarData.$fReadQuestionInversion9
                   GrammarData.$fReadQuestionInversion5) -}
9bce092da85110dd69ced0b3f1053c6d
  $fReadQuestionInversion5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GrammarData.QuestionInversion)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GrammarData.QuestionInversion)
                   GrammarData.$fReadQuestionInversion6
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           GrammarData.QuestionInversion))) -}
9bce092da85110dd69ced0b3f1053c6d
  $fReadQuestionInversion6 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GrammarData.QuestionInversion)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadQuestionInversion8,
                  GrammarData.$fReadQuestionInversion7
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.QuestionInversion>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.QuestionInversion>_R))))) -}
9bce092da85110dd69ced0b3f1053c6d
  $fReadQuestionInversion7 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.QuestionInversion -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.QuestionInversion
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.OblQuesInv) -}
345f97f11d48d1dafc78d775b891fe14
  $fReadQuestionInversion8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OblQuesInv"#) -}
9bce092da85110dd69ced0b3f1053c6d
  $fReadQuestionInversion9 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GrammarData.QuestionInversion)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadQuestionInversion11,
                  GrammarData.$fReadQuestionInversion10
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.QuestionInversion>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.QuestionInversion>_R))))) -}
9bce092da85110dd69ced0b3f1053c6d
  $fReadQuestionInversion_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [GrammarData.QuestionInversion]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadQuestionInversion1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarData.QuestionInversion]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarData.QuestionInversion]>_R))) -}
9bce092da85110dd69ced0b3f1053c6d
  $fReadQuestionInversion_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      GrammarData.QuestionInversion
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadQuestionInversion2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarData.QuestionInversion>_R)) -}
9bce092da85110dd69ced0b3f1053c6d
  $fReadQuestionInversion_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarData.QuestionInversion
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarData.QuestionInversion
                   GrammarData.$fReadQuestionInversion_$creadPrec
                   eta) -}
9bce092da85110dd69ced0b3f1053c6d
  $fReadQuestionInversion_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarData.QuestionInversion]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarData.QuestionInversion]
                   ((GrammarData.$fReadQuestionInversion_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarData.QuestionInversion]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarData.QuestionInversion]>_R)
                      @ [GrammarData.QuestionInversion]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarData.QuestionInversion]))) -}
36a159f3ad56cebecc6962b0f39e356c
  $fReadSubjectInitial :: GHC.Read.Read GrammarData.SubjectInitial
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.SubjectInitial
                  GrammarData.$fReadSubjectInitial_$s$dmreadsPrec
                  GrammarData.$fReadSubjectInitial_$sreadListDefault
                  GrammarData.$fReadSubjectInitial_$creadPrec
                  GrammarData.$fReadSubjectInitial_$creadListPrec -}
36a159f3ad56cebecc6962b0f39e356c
  $fReadSubjectInitial1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarData.SubjectInitial] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarData.SubjectInitial]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarData.SubjectInitial
                   GrammarData.$fReadSubjectInitial2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarData.SubjectInitial>_R))
                   @ b
                   eta1) -}
36a159f3ad56cebecc6962b0f39e356c
  $fReadSubjectInitial10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.SubjectInitial -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.SubjectInitial
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.SubInitial) -}
b4a2c8e7732505bf956d04af50d1e8b6
  $fReadSubjectInitial11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SubInitial"#) -}
36a159f3ad56cebecc6962b0f39e356c
  $fReadSubjectInitial2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarData.SubjectInitial
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarData.SubjectInitial
                   GrammarData.$fReadSubjectInitial3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarData.SubjectInitial>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarData.SubjectInitial>_R)))) -}
36a159f3ad56cebecc6962b0f39e356c
  $fReadSubjectInitial3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.SubjectInitial -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarData.SubjectInitial
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarData.SubjectInitial
                   GrammarData.$fReadSubjectInitial4
                   eta
                   @ b
                   eta1) -}
36a159f3ad56cebecc6962b0f39e356c
  $fReadSubjectInitial4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GrammarData.SubjectInitial)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GrammarData.SubjectInitial)
                   GrammarData.$fReadSubjectInitial9
                   GrammarData.$fReadSubjectInitial5) -}
36a159f3ad56cebecc6962b0f39e356c
  $fReadSubjectInitial5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GrammarData.SubjectInitial)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GrammarData.SubjectInitial)
                   GrammarData.$fReadSubjectInitial6
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           GrammarData.SubjectInitial))) -}
36a159f3ad56cebecc6962b0f39e356c
  $fReadSubjectInitial6 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GrammarData.SubjectInitial)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadSubjectInitial8,
                  GrammarData.$fReadSubjectInitial7
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.SubjectInitial>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.SubjectInitial>_R))))) -}
36a159f3ad56cebecc6962b0f39e356c
  $fReadSubjectInitial7 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.SubjectInitial -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.SubjectInitial
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.SubFinal) -}
e109e876b691de770aee5a40053ea15b
  $fReadSubjectInitial8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SubFinal"#) -}
36a159f3ad56cebecc6962b0f39e356c
  $fReadSubjectInitial9 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GrammarData.SubjectInitial)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadSubjectInitial11,
                  GrammarData.$fReadSubjectInitial10
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.SubjectInitial>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.SubjectInitial>_R))))) -}
36a159f3ad56cebecc6962b0f39e356c
  $fReadSubjectInitial_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [GrammarData.SubjectInitial]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadSubjectInitial1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarData.SubjectInitial]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarData.SubjectInitial]>_R))) -}
36a159f3ad56cebecc6962b0f39e356c
  $fReadSubjectInitial_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.SubjectInitial
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadSubjectInitial2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarData.SubjectInitial>_R)) -}
36a159f3ad56cebecc6962b0f39e356c
  $fReadSubjectInitial_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarData.SubjectInitial
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarData.SubjectInitial
                   GrammarData.$fReadSubjectInitial_$creadPrec
                   eta) -}
36a159f3ad56cebecc6962b0f39e356c
  $fReadSubjectInitial_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarData.SubjectInitial]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarData.SubjectInitial]
                   ((GrammarData.$fReadSubjectInitial_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarData.SubjectInitial]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarData.SubjectInitial]>_R)
                      @ [GrammarData.SubjectInitial]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarData.SubjectInitial]))) -}
c96d706f7e96f794b269594d2525904c
  $fReadTopicMarking :: GHC.Read.Read GrammarData.TopicMarking
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.TopicMarking
                  GrammarData.$fReadTopicMarking_$s$dmreadsPrec
                  GrammarData.$fReadTopicMarking_$sreadListDefault
                  GrammarData.$fReadTopicMarking_$creadPrec
                  GrammarData.$fReadTopicMarking_$creadListPrec -}
c96d706f7e96f794b269594d2525904c
  $fReadTopicMarking1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarData.TopicMarking] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarData.TopicMarking]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarData.TopicMarking
                   GrammarData.$fReadTopicMarking2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarData.TopicMarking>_R))
                   @ b
                   eta1) -}
c96d706f7e96f794b269594d2525904c
  $fReadTopicMarking10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.TopicMarking -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.TopicMarking
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.NoTopMark) -}
a14e92fdf12b45dc682641b089c45ee9
  $fReadTopicMarking11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NoTopMark"#) -}
c96d706f7e96f794b269594d2525904c
  $fReadTopicMarking2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarData.TopicMarking
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarData.TopicMarking
                   GrammarData.$fReadTopicMarking3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarData.TopicMarking>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarData.TopicMarking>_R)))) -}
c96d706f7e96f794b269594d2525904c
  $fReadTopicMarking3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.TopicMarking -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarData.TopicMarking
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarData.TopicMarking
                   GrammarData.$fReadTopicMarking4
                   eta
                   @ b
                   eta1) -}
c96d706f7e96f794b269594d2525904c
  $fReadTopicMarking4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.TopicMarking)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.TopicMarking)
                   GrammarData.$fReadTopicMarking9
                   GrammarData.$fReadTopicMarking5) -}
c96d706f7e96f794b269594d2525904c
  $fReadTopicMarking5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.TopicMarking)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.TopicMarking)
                   GrammarData.$fReadTopicMarking6
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           GrammarData.TopicMarking))) -}
c96d706f7e96f794b269594d2525904c
  $fReadTopicMarking6 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.TopicMarking)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadTopicMarking8,
                  GrammarData.$fReadTopicMarking7
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.TopicMarking>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.TopicMarking>_R))))) -}
c96d706f7e96f794b269594d2525904c
  $fReadTopicMarking7 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.TopicMarking -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.TopicMarking
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.OblTopMark) -}
62ab85cf232b90d3101395bb7d845c16
  $fReadTopicMarking8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OblTopMark"#) -}
c96d706f7e96f794b269594d2525904c
  $fReadTopicMarking9 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.TopicMarking)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadTopicMarking11,
                  GrammarData.$fReadTopicMarking10
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.TopicMarking>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.TopicMarking>_R))))) -}
c96d706f7e96f794b269594d2525904c
  $fReadTopicMarking_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [GrammarData.TopicMarking]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadTopicMarking1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarData.TopicMarking]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarData.TopicMarking]>_R))) -}
c96d706f7e96f794b269594d2525904c
  $fReadTopicMarking_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.TopicMarking
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadTopicMarking2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarData.TopicMarking>_R)) -}
c96d706f7e96f794b269594d2525904c
  $fReadTopicMarking_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarData.TopicMarking
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarData.TopicMarking
                   GrammarData.$fReadTopicMarking_$creadPrec
                   eta) -}
c96d706f7e96f794b269594d2525904c
  $fReadTopicMarking_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarData.TopicMarking]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarData.TopicMarking]
                   ((GrammarData.$fReadTopicMarking_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarData.TopicMarking]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarData.TopicMarking]>_R)
                      @ [GrammarData.TopicMarking]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarData.TopicMarking]))) -}
e395809ab97655f1b03dc514ea8c035c
  $fReadVtoIMovement :: GHC.Read.Read GrammarData.VtoIMovement
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.VtoIMovement
                  GrammarData.$fReadVtoIMovement_$s$dmreadsPrec
                  GrammarData.$fReadVtoIMovement_$sreadListDefault
                  GrammarData.$fReadVtoIMovement_$creadPrec
                  GrammarData.$fReadVtoIMovement_$creadListPrec -}
e395809ab97655f1b03dc514ea8c035c
  $fReadVtoIMovement1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarData.VtoIMovement] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarData.VtoIMovement]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarData.VtoIMovement
                   GrammarData.$fReadVtoIMovement2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarData.VtoIMovement>_R))
                   @ b
                   eta1) -}
e395809ab97655f1b03dc514ea8c035c
  $fReadVtoIMovement10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.VtoIMovement -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.VtoIMovement
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.NoVtoIMove) -}
a8614d64a7e94ccb6119772e5886dfb8
  $fReadVtoIMovement11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NoVtoIMove"#) -}
e395809ab97655f1b03dc514ea8c035c
  $fReadVtoIMovement2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarData.VtoIMovement
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarData.VtoIMovement
                   GrammarData.$fReadVtoIMovement3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarData.VtoIMovement>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarData.VtoIMovement>_R)))) -}
e395809ab97655f1b03dc514ea8c035c
  $fReadVtoIMovement3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.VtoIMovement -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarData.VtoIMovement
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarData.VtoIMovement
                   GrammarData.$fReadVtoIMovement4
                   eta
                   @ b
                   eta1) -}
e395809ab97655f1b03dc514ea8c035c
  $fReadVtoIMovement4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.VtoIMovement)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.VtoIMovement)
                   GrammarData.$fReadVtoIMovement9
                   GrammarData.$fReadVtoIMovement5) -}
e395809ab97655f1b03dc514ea8c035c
  $fReadVtoIMovement5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.VtoIMovement)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.VtoIMovement)
                   GrammarData.$fReadVtoIMovement6
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           GrammarData.VtoIMovement))) -}
e395809ab97655f1b03dc514ea8c035c
  $fReadVtoIMovement6 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.VtoIMovement)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadVtoIMovement8,
                  GrammarData.$fReadVtoIMovement7
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.VtoIMovement>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.VtoIMovement>_R))))) -}
e395809ab97655f1b03dc514ea8c035c
  $fReadVtoIMovement7 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.VtoIMovement -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.VtoIMovement
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.OblVtoIMove) -}
57370c03737659261a4075b846dcbed8
  $fReadVtoIMovement8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OblVtoIMove"#) -}
e395809ab97655f1b03dc514ea8c035c
  $fReadVtoIMovement9 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.VtoIMovement)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadVtoIMovement11,
                  GrammarData.$fReadVtoIMovement10
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.VtoIMovement>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.VtoIMovement>_R))))) -}
e395809ab97655f1b03dc514ea8c035c
  $fReadVtoIMovement_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [GrammarData.VtoIMovement]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadVtoIMovement1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarData.VtoIMovement]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarData.VtoIMovement]>_R))) -}
e395809ab97655f1b03dc514ea8c035c
  $fReadVtoIMovement_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec GrammarData.VtoIMovement
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadVtoIMovement2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarData.VtoIMovement>_R)) -}
e395809ab97655f1b03dc514ea8c035c
  $fReadVtoIMovement_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarData.VtoIMovement
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarData.VtoIMovement
                   GrammarData.$fReadVtoIMovement_$creadPrec
                   eta) -}
e395809ab97655f1b03dc514ea8c035c
  $fReadVtoIMovement_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarData.VtoIMovement]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarData.VtoIMovement]
                   ((GrammarData.$fReadVtoIMovement_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarData.VtoIMovement]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarData.VtoIMovement]>_R)
                      @ [GrammarData.VtoIMovement]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarData.VtoIMovement]))) -}
e7236c5b74ef163c5dcac13e97f6961e
  $fReadWHMovementObligatory ::
    GHC.Read.Read GrammarData.WHMovementObligatory
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.WHMovementObligatory
                  GrammarData.$fReadWHMovementObligatory_$s$dmreadsPrec
                  GrammarData.$fReadWHMovementObligatory_$sreadListDefault
                  GrammarData.$fReadWHMovementObligatory_$creadPrec
                  GrammarData.$fReadWHMovementObligatory_$creadListPrec -}
e7236c5b74ef163c5dcac13e97f6961e
  $fReadWHMovementObligatory1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarData.WHMovementObligatory]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarData.WHMovementObligatory]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarData.WHMovementObligatory
                   GrammarData.$fReadWHMovementObligatory2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarData.WHMovementObligatory>_R))
                   @ b
                   eta1) -}
e7236c5b74ef163c5dcac13e97f6961e
  $fReadWHMovementObligatory10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.WHMovementObligatory
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.WHMovementObligatory
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.NoWHMove) -}
bc8a2fac9128eccab2c33a9889aaa4e0
  $fReadWHMovementObligatory11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NoWHMove"#) -}
e7236c5b74ef163c5dcac13e97f6961e
  $fReadWHMovementObligatory2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP
         GrammarData.WHMovementObligatory
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarData.WHMovementObligatory
                   GrammarData.$fReadWHMovementObligatory3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarData.WHMovementObligatory>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarData.WHMovementObligatory>_R)))) -}
e7236c5b74ef163c5dcac13e97f6961e
  $fReadWHMovementObligatory3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.WHMovementObligatory
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarData.WHMovementObligatory
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarData.WHMovementObligatory
                   GrammarData.$fReadWHMovementObligatory4
                   eta
                   @ b
                   eta1) -}
e7236c5b74ef163c5dcac13e97f6961e
  $fReadWHMovementObligatory4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GrammarData.WHMovementObligatory)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GrammarData.WHMovementObligatory)
                   GrammarData.$fReadWHMovementObligatory9
                   GrammarData.$fReadWHMovementObligatory5) -}
e7236c5b74ef163c5dcac13e97f6961e
  $fReadWHMovementObligatory5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GrammarData.WHMovementObligatory)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GrammarData.WHMovementObligatory)
                   GrammarData.$fReadWHMovementObligatory6
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           GrammarData.WHMovementObligatory))) -}
e7236c5b74ef163c5dcac13e97f6961e
  $fReadWHMovementObligatory6 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GrammarData.WHMovementObligatory)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadWHMovementObligatory8,
                  GrammarData.$fReadWHMovementObligatory7
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.WHMovementObligatory>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.WHMovementObligatory>_R))))) -}
e7236c5b74ef163c5dcac13e97f6961e
  $fReadWHMovementObligatory7 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarData.WHMovementObligatory
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarData.WHMovementObligatory
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarData.OblWHMove) -}
fc5b78fd56426e8a8293c6f9da661591
  $fReadWHMovementObligatory8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OblWHMove"#) -}
e7236c5b74ef163c5dcac13e97f6961e
  $fReadWHMovementObligatory9 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GrammarData.WHMovementObligatory)
  {- Strictness: m,
     Unfolding: ((GrammarData.$fReadWHMovementObligatory11,
                  GrammarData.$fReadWHMovementObligatory10
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarData.WHMovementObligatory>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarData.WHMovementObligatory>_R))))) -}
e7236c5b74ef163c5dcac13e97f6961e
  $fReadWHMovementObligatory_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [GrammarData.WHMovementObligatory]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadWHMovementObligatory1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarData.WHMovementObligatory]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarData.WHMovementObligatory]>_R))) -}
e7236c5b74ef163c5dcac13e97f6961e
  $fReadWHMovementObligatory_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      GrammarData.WHMovementObligatory
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarData.$fReadWHMovementObligatory2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarData.WHMovementObligatory>_R)) -}
e7236c5b74ef163c5dcac13e97f6961e
  $fReadWHMovementObligatory_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS
         GrammarData.WHMovementObligatory
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarData.WHMovementObligatory
                   GrammarData.$fReadWHMovementObligatory_$creadPrec
                   eta) -}
e7236c5b74ef163c5dcac13e97f6961e
  $fReadWHMovementObligatory_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS
      [GrammarData.WHMovementObligatory]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarData.WHMovementObligatory]
                   ((GrammarData.$fReadWHMovementObligatory_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarData.WHMovementObligatory]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarData.WHMovementObligatory]>_R)
                      @ [GrammarData.WHMovementObligatory]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarData.WHMovementObligatory]))) -}
da5bcd429ecfbb71b847767f8ed9569d
  $fShowAffixHopping :: GHC.Show.Show GrammarData.AffixHopping
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.AffixHopping
                  GrammarData.$fShowAffixHopping_$cshowsPrec
                  GrammarData.$fShowAffixHopping_$cshow
                  GrammarData.$fShowAffixHopping_$cshowList -}
da5bcd429ecfbb71b847767f8ed9569d
  $fShowAffixHopping1 :: GrammarData.AffixHopping -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarData.AffixHopping eta :: GHC.Base.String ->
                 case ds of wild {
                   GrammarData.NoAffixHop
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c1 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           GrammarData.$fReadAffixHopping11)
                        eta
                   GrammarData.OblAffixHop
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c1 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           GrammarData.$fReadAffixHopping8)
                        eta }) -}
da5bcd429ecfbb71b847767f8ed9569d
  $fShowAffixHopping_$cshow ::
    GrammarData.AffixHopping -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarData.AffixHopping ->
                 case x of wild {
                   GrammarData.NoAffixHop -> GrammarData.$fReadAffixHopping11
                   GrammarData.OblAffixHop -> GrammarData.$fReadAffixHopping8 }) -}
da5bcd429ecfbb71b847767f8ed9569d
  $fShowAffixHopping_$cshowList ::
    [GrammarData.AffixHopping] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarData.AffixHopping
                   GrammarData.$fShowAffixHopping1) -}
da5bcd429ecfbb71b847767f8ed9569d
  $fShowAffixHopping_$cshowsPrec ::
    GHC.Types.Int -> GrammarData.AffixHopping -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   ds1 :: GrammarData.AffixHopping
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   GrammarData.NoAffixHop
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c1 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           GrammarData.$fReadAffixHopping11)
                        eta
                   GrammarData.OblAffixHop
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c1 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           GrammarData.$fReadAffixHopping8)
                        eta }) -}
04a49f52bfdb87c5c968d67f70ef7770
  $fShowBar :: GHC.Show.Show GrammarData.Bar
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.Bar
                  GrammarData.$fShowBar_$cshowsPrec
                  GrammarData.$fShowBar_$cshow
                  GrammarData.$fShowBar_$cshowList -}
04a49f52bfdb87c5c968d67f70ef7770
  $fShowBar1 :: GrammarData.Bar -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: GrammarData.Bar ->
                 GrammarData.$w$cshowsPrec 0 w) -}
04a49f52bfdb87c5c968d67f70ef7770
  $fShowBar_$cshow :: GrammarData.Bar -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarData.Bar ->
                 GrammarData.$fShowBar_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
04a49f52bfdb87c5c968d67f70ef7770
  $fShowBar_$cshowList :: [GrammarData.Bar] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarData.Bar
                   GrammarData.$fShowBar1) -}
04a49f52bfdb87c5c968d67f70ef7770
  $fShowBar_$cshowsPrec ::
    GHC.Types.Int -> GrammarData.Bar -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><S,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: GrammarData.Bar ->
                 case w of ww { GHC.Types.I# ww1 ->
                 GrammarData.$w$cshowsPrec ww1 w1 }) -}
b8946e12084618f63d7bf871f8615ccb
  $fShowComplementizerInitial ::
    GHC.Show.Show GrammarData.ComplementizerInitial
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.ComplementizerInitial
                  GrammarData.$fShowComplementizerInitial_$cshowsPrec
                  GrammarData.$fShowComplementizerInitial_$cshow
                  GrammarData.$fShowComplementizerInitial_$cshowList -}
b8946e12084618f63d7bf871f8615ccb
  $fShowComplementizerInitial1 ::
    GrammarData.ComplementizerInitial -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarData.ComplementizerInitial
                   eta :: GHC.Base.String ->
                 case ds of wild {
                   GrammarData.CompInitial
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c1 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           GrammarData.$fReadComplementizerInitial11)
                        eta
                   GrammarData.CompFinal
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c1 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           GrammarData.$fReadComplementizerInitial8)
                        eta }) -}
b8946e12084618f63d7bf871f8615ccb
  $fShowComplementizerInitial_$cshow ::
    GrammarData.ComplementizerInitial -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarData.ComplementizerInitial ->
                 case x of wild {
                   GrammarData.CompInitial
                   -> GrammarData.$fReadComplementizerInitial11
                   GrammarData.CompFinal
                   -> GrammarData.$fReadComplementizerInitial8 }) -}
b8946e12084618f63d7bf871f8615ccb
  $fShowComplementizerInitial_$cshowList ::
    [GrammarData.ComplementizerInitial] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarData.ComplementizerInitial
                   GrammarData.$fShowComplementizerInitial1) -}
b8946e12084618f63d7bf871f8615ccb
  $fShowComplementizerInitial_$cshowsPrec ::
    GHC.Types.Int
    -> GrammarData.ComplementizerInitial -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   ds1 :: GrammarData.ComplementizerInitial
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   GrammarData.CompInitial
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c1 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           GrammarData.$fReadComplementizerInitial11)
                        eta
                   GrammarData.CompFinal
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c1 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           GrammarData.$fReadComplementizerInitial8)
                        eta }) -}
54b1b32e84410d13fc0ab1d24cef787f
  $fShowGrammar :: GHC.Show.Show GrammarData.Grammar
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.Grammar
                  GrammarData.$fShowGrammar_$cshowsPrec
                  GrammarData.$fShowGrammar_$cshow
                  GrammarData.$fShowGrammar_$cshowList -}
54b1b32e84410d13fc0ab1d24cef787f
  $fShowGrammar1 :: GrammarData.Grammar -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: GrammarData.Grammar w1 :: GHC.Base.String ->
                 case w of ww { GrammarData.Grammar ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ->
                 GrammarData.$w$cshowsPrec1
                   0
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   w1 }) -}
54b1b32e84410d13fc0ab1d24cef787f
  $fShowGrammar_$cshow :: GrammarData.Grammar -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarData.Grammar ->
                 GrammarData.$fShowGrammar_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
54b1b32e84410d13fc0ab1d24cef787f
  $fShowGrammar_$cshowList :: [GrammarData.Grammar] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarData.Grammar
                   GrammarData.$fShowGrammar1) -}
54b1b32e84410d13fc0ab1d24cef787f
  $fShowGrammar_$cshowsPrec ::
    GHC.Types.Int -> GrammarData.Grammar -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <S,1*U(U)><S,1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int
                   w1 :: GrammarData.Grammar
                   w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { GrammarData.Grammar ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ->
                 GrammarData.$w$cshowsPrec1
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   w2 } }) -}
0b723dd66110bae4a164ef4cfb3bebd4
  $fShowIlloc :: GHC.Show.Show GrammarData.Illoc
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.Illoc
                  GrammarData.$fShowIlloc_$cshowsPrec
                  GrammarData.$fShowIlloc_$cshow
                  GrammarData.$fShowIlloc_$cshowList -}
5f2ace8a4da9557ec3f09b2841ae654d
  $fShowIlloc1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Imper"#) -}
b413e8a08636f11a98b4e906eb0bf3ee
  $fShowIlloc2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Decl"#) -}
b5d97922236ae0d42bb58779177f9152
  $fShowIlloc3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Ques"#) -}
c8c191a97a1d7bb4b4197fe788096d97
  $fShowIlloc4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Null"#) -}
0b723dd66110bae4a164ef4cfb3bebd4
  $fShowIlloc_$cshow :: GrammarData.Illoc -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarData.Illoc ->
                 GrammarData.$fShowIlloc_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
0b723dd66110bae4a164ef4cfb3bebd4
  $fShowIlloc_$cshowList :: [GrammarData.Illoc] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarData.Illoc
                   GrammarData.$w$cshowsPrec2) -}
0b723dd66110bae4a164ef4cfb3bebd4
  $fShowIlloc_$cshowsPrec ::
    GHC.Types.Int -> GrammarData.Illoc -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: GrammarData.Illoc
                   w2 :: GHC.Base.String ->
                 GrammarData.$w$cshowsPrec2 w1 w2) -}
be5e38a33a1f6f8dedf69a22bff6d6f1
  $fShowItoCMovement :: GHC.Show.Show GrammarData.ItoCMovement
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.ItoCMovement
                  GrammarData.$fShowItoCMovement_$cshowsPrec
                  GrammarData.$fShowItoCMovement_$cshow
                  GrammarData.$fShowItoCMovement_$cshowList -}
be5e38a33a1f6f8dedf69a22bff6d6f1
  $fShowItoCMovement1 :: GrammarData.ItoCMovement -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarData.ItoCMovement eta :: GHC.Base.String ->
                 case ds of wild {
                   GrammarData.NoItoCMove
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c1 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           GrammarData.$fReadItoCMovement11)
                        eta
                   GrammarData.OblItoCMove
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c1 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           GrammarData.$fReadItoCMovement8)
                        eta }) -}
be5e38a33a1f6f8dedf69a22bff6d6f1
  $fShowItoCMovement_$cshow ::
    GrammarData.ItoCMovement -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarData.ItoCMovement ->
                 case x of wild {
                   GrammarData.NoItoCMove -> GrammarData.$fReadItoCMovement11
                   GrammarData.OblItoCMove -> GrammarData.$fReadItoCMovement8 }) -}
be5e38a33a1f6f8dedf69a22bff6d6f1
  $fShowItoCMovement_$cshowList ::
    [GrammarData.ItoCMovement] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarData.ItoCMovement
                   GrammarData.$fShowItoCMovement1) -}
be5e38a33a1f6f8dedf69a22bff6d6f1
  $fShowItoCMovement_$cshowsPrec ::
    GHC.Types.Int -> GrammarData.ItoCMovement -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   ds1 :: GrammarData.ItoCMovement
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   GrammarData.NoItoCMove
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c1 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           GrammarData.$fReadItoCMovement11)
                        eta
                   GrammarData.OblItoCMove
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c1 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           GrammarData.$fReadItoCMovement8)
                        eta }) -}
0c62203b93e11b844f77275212ff8c48
  $fShowLeaf :: GHC.Show.Show GrammarData.Leaf
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.Leaf
                  GrammarData.$fShowLeaf_$cshowsPrec
                  GrammarData.$fShowLeaf_$cshow
                  GrammarData.$fShowLeaf_$cshowList -}
0c62203b93e11b844f77275212ff8c48
  $fShowLeaf1 :: GrammarData.Leaf -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: GrammarData.Leaf ->
                 GrammarData.$w$cshowsPrec3 0 w) -}
0c62203b93e11b844f77275212ff8c48
  $fShowLeaf_$cshow :: GrammarData.Leaf -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarData.Leaf ->
                 GrammarData.$fShowLeaf_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
0c62203b93e11b844f77275212ff8c48
  $fShowLeaf_$cshowList :: [GrammarData.Leaf] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarData.Leaf
                   GrammarData.$fShowLeaf1) -}
0c62203b93e11b844f77275212ff8c48
  $fShowLeaf_$cshowsPrec ::
    GHC.Types.Int -> GrammarData.Leaf -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><S,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: GrammarData.Leaf ->
                 case w of ww { GHC.Types.I# ww1 ->
                 GrammarData.$w$cshowsPrec3 ww1 w1 }) -}
1b4b07b4babd1eb036e98b6d73553688
  $fShowNullSubject :: GHC.Show.Show GrammarData.NullSubject
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.NullSubject
                  GrammarData.$fShowNullSubject_$cshowsPrec
                  GrammarData.$fShowNullSubject_$cshow
                  GrammarData.$fShowNullSubject_$cshowList -}
1b4b07b4babd1eb036e98b6d73553688
  $fShowNullSubject1 :: GrammarData.NullSubject -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarData.NullSubject eta :: GHC.Base.String ->
                 case ds of wild {
                   GrammarData.NoNullSub
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c1 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           GrammarData.$fReadNullSubject11)
                        eta
                   GrammarData.OptNullSub
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c1 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           GrammarData.$fReadNullSubject8)
                        eta }) -}
1b4b07b4babd1eb036e98b6d73553688
  $fShowNullSubject_$cshow ::
    GrammarData.NullSubject -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarData.NullSubject ->
                 case x of wild {
                   GrammarData.NoNullSub -> GrammarData.$fReadNullSubject11
                   GrammarData.OptNullSub -> GrammarData.$fReadNullSubject8 }) -}
1b4b07b4babd1eb036e98b6d73553688
  $fShowNullSubject_$cshowList ::
    [GrammarData.NullSubject] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarData.NullSubject
                   GrammarData.$fShowNullSubject1) -}
1b4b07b4babd1eb036e98b6d73553688
  $fShowNullSubject_$cshowsPrec ::
    GHC.Types.Int -> GrammarData.NullSubject -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   ds1 :: GrammarData.NullSubject
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   GrammarData.NoNullSub
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c1 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           GrammarData.$fReadNullSubject11)
                        eta
                   GrammarData.OptNullSub
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c1 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           GrammarData.$fReadNullSubject8)
                        eta }) -}
46091d0005c8b4e70b593eb7aef83709
  $fShowNullTopic :: GHC.Show.Show GrammarData.NullTopic
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.NullTopic
                  GrammarData.$fShowNullTopic_$cshowsPrec
                  GrammarData.$fShowNullTopic_$cshow
                  GrammarData.$fShowNullTopic_$cshowList -}
46091d0005c8b4e70b593eb7aef83709
  $fShowNullTopic1 :: GrammarData.NullTopic -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarData.NullTopic eta :: GHC.Base.String ->
                 case ds of wild {
                   GrammarData.NoNullTop
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c1 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           GrammarData.$fReadNullTopic11)
                        eta
                   GrammarData.OptNullTop
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c1 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           GrammarData.$fReadNullTopic8)
                        eta }) -}
46091d0005c8b4e70b593eb7aef83709
  $fShowNullTopic_$cshow :: GrammarData.NullTopic -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarData.NullTopic ->
                 case x of wild {
                   GrammarData.NoNullTop -> GrammarData.$fReadNullTopic11
                   GrammarData.OptNullTop -> GrammarData.$fReadNullTopic8 }) -}
46091d0005c8b4e70b593eb7aef83709
  $fShowNullTopic_$cshowList ::
    [GrammarData.NullTopic] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarData.NullTopic
                   GrammarData.$fShowNullTopic1) -}
46091d0005c8b4e70b593eb7aef83709
  $fShowNullTopic_$cshowsPrec ::
    GHC.Types.Int -> GrammarData.NullTopic -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   ds1 :: GrammarData.NullTopic
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   GrammarData.NoNullTop
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c1 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           GrammarData.$fReadNullTopic11)
                        eta
                   GrammarData.OptNullTop
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c1 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           GrammarData.$fReadNullTopic8)
                        eta }) -}
c2c0ea9981f3d6eed112f850f7ea6beb
  $fShowObjectFinal :: GHC.Show.Show GrammarData.ObjectFinal
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.ObjectFinal
                  GrammarData.$fShowObjectFinal_$cshowsPrec
                  GrammarData.$fShowObjectFinal_$cshow
                  GrammarData.$fShowObjectFinal_$cshowList -}
c2c0ea9981f3d6eed112f850f7ea6beb
  $fShowObjectFinal1 :: GrammarData.ObjectFinal -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarData.ObjectFinal eta :: GHC.Base.String ->
                 case ds of wild {
                   GrammarData.ObjFinal
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c1 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           GrammarData.$fReadObjectFinal11)
                        eta
                   GrammarData.ObjInitial
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c1 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           GrammarData.$fReadObjectFinal8)
                        eta }) -}
c2c0ea9981f3d6eed112f850f7ea6beb
  $fShowObjectFinal_$cshow ::
    GrammarData.ObjectFinal -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarData.ObjectFinal ->
                 case x of wild {
                   GrammarData.ObjFinal -> GrammarData.$fReadObjectFinal11
                   GrammarData.ObjInitial -> GrammarData.$fReadObjectFinal8 }) -}
c2c0ea9981f3d6eed112f850f7ea6beb
  $fShowObjectFinal_$cshowList ::
    [GrammarData.ObjectFinal] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarData.ObjectFinal
                   GrammarData.$fShowObjectFinal1) -}
c2c0ea9981f3d6eed112f850f7ea6beb
  $fShowObjectFinal_$cshowsPrec ::
    GHC.Types.Int -> GrammarData.ObjectFinal -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   ds1 :: GrammarData.ObjectFinal
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   GrammarData.ObjFinal
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c1 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           GrammarData.$fReadObjectFinal11)
                        eta
                   GrammarData.ObjInitial
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c1 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           GrammarData.$fReadObjectFinal8)
                        eta }) -}
69babcc57bbc447bbcd2b156d19a1d60
  $fShowObligatoryTopic :: GHC.Show.Show GrammarData.ObligatoryTopic
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.ObligatoryTopic
                  GrammarData.$fShowObligatoryTopic_$cshowsPrec
                  GrammarData.$fShowObligatoryTopic_$cshow
                  GrammarData.$fShowObligatoryTopic_$cshowList -}
69babcc57bbc447bbcd2b156d19a1d60
  $fShowObligatoryTopic1 ::
    GrammarData.ObligatoryTopic -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarData.ObligatoryTopic eta :: GHC.Base.String ->
                 case ds of wild {
                   GrammarData.OblTopic
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c1 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           GrammarData.$fReadObligatoryTopic11)
                        eta
                   GrammarData.OptTopic
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c1 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           GrammarData.$fReadObligatoryTopic8)
                        eta }) -}
69babcc57bbc447bbcd2b156d19a1d60
  $fShowObligatoryTopic_$cshow ::
    GrammarData.ObligatoryTopic -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarData.ObligatoryTopic ->
                 case x of wild {
                   GrammarData.OblTopic -> GrammarData.$fReadObligatoryTopic11
                   GrammarData.OptTopic -> GrammarData.$fReadObligatoryTopic8 }) -}
69babcc57bbc447bbcd2b156d19a1d60
  $fShowObligatoryTopic_$cshowList ::
    [GrammarData.ObligatoryTopic] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarData.ObligatoryTopic
                   GrammarData.$fShowObligatoryTopic1) -}
69babcc57bbc447bbcd2b156d19a1d60
  $fShowObligatoryTopic_$cshowsPrec ::
    GHC.Types.Int -> GrammarData.ObligatoryTopic -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   ds1 :: GrammarData.ObligatoryTopic
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   GrammarData.OblTopic
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c1 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           GrammarData.$fReadObligatoryTopic11)
                        eta
                   GrammarData.OptTopic
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c1 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           GrammarData.$fReadObligatoryTopic8)
                        eta }) -}
04a49f52bfdb87c5c968d67f70ef7770
  $fShowPhrase :: GHC.Show.Show GrammarData.Phrase
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.Phrase
                  GrammarData.$fShowPhrase_$cshowsPrec
                  GrammarData.$fShowPhrase_$cshow
                  GrammarData.$fShowPhrase_$cshowList -}
04a49f52bfdb87c5c968d67f70ef7770
  $fShowPhrase1 :: GrammarData.Phrase -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GrammarData.$fShowPhrase_$cshowsPrec
                   GrammarData.$fShowPhrase2) -}
9c902e91da4fbff14d137c765fe242ab
  $fShowPhrase2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0) -}
04a49f52bfdb87c5c968d67f70ef7770
  $fShowPhrase_$cshow :: GrammarData.Phrase -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarData.Phrase ->
                 GrammarData.$fShowPhrase_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
04a49f52bfdb87c5c968d67f70ef7770
  $fShowPhrase_$cshowList :: [GrammarData.Phrase] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarData.Phrase
                   GrammarData.$fShowPhrase1) -}
04a49f52bfdb87c5c968d67f70ef7770
  $fShowPhrase_$cshowsPrec ::
    GHC.Types.Int -> GrammarData.Phrase -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U(U)><S,1*U> -}
7ceb67be553ed9e58e992b22465238f0
  $fShowPiedPiping :: GHC.Show.Show GrammarData.PiedPiping
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.PiedPiping
                  GrammarData.$fShowPiedPiping_$cshowsPrec
                  GrammarData.$fShowPiedPiping_$cshow
                  GrammarData.$fShowPiedPiping_$cshowList -}
7ceb67be553ed9e58e992b22465238f0
  $fShowPiedPiping1 :: GrammarData.PiedPiping -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarData.PiedPiping eta :: GHC.Base.String ->
                 case ds of wild {
                   GrammarData.PiedPipe
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c1 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           GrammarData.$fReadPiedPiping11)
                        eta
                   GrammarData.PrepStrand
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c1 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           GrammarData.$fReadPiedPiping8)
                        eta }) -}
7ceb67be553ed9e58e992b22465238f0
  $fShowPiedPiping_$cshow ::
    GrammarData.PiedPiping -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarData.PiedPiping ->
                 case x of wild {
                   GrammarData.PiedPipe -> GrammarData.$fReadPiedPiping11
                   GrammarData.PrepStrand -> GrammarData.$fReadPiedPiping8 }) -}
7ceb67be553ed9e58e992b22465238f0
  $fShowPiedPiping_$cshowList ::
    [GrammarData.PiedPiping] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarData.PiedPiping
                   GrammarData.$fShowPiedPiping1) -}
7ceb67be553ed9e58e992b22465238f0
  $fShowPiedPiping_$cshowsPrec ::
    GHC.Types.Int -> GrammarData.PiedPiping -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   ds1 :: GrammarData.PiedPiping
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   GrammarData.PiedPipe
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c1 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           GrammarData.$fReadPiedPiping11)
                        eta
                   GrammarData.PrepStrand
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c1 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           GrammarData.$fReadPiedPiping8)
                        eta }) -}
9bce092da85110dd69ced0b3f1053c6d
  $fShowQuestionInversion ::
    GHC.Show.Show GrammarData.QuestionInversion
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.QuestionInversion
                  GrammarData.$fShowQuestionInversion_$cshowsPrec
                  GrammarData.$fShowQuestionInversion_$cshow
                  GrammarData.$fShowQuestionInversion_$cshowList -}
9bce092da85110dd69ced0b3f1053c6d
  $fShowQuestionInversion1 ::
    GrammarData.QuestionInversion -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarData.QuestionInversion eta :: GHC.Base.String ->
                 case ds of wild {
                   GrammarData.NoQuesInv
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c1 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           GrammarData.$fReadQuestionInversion11)
                        eta
                   GrammarData.OblQuesInv
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c1 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           GrammarData.$fReadQuestionInversion8)
                        eta }) -}
9bce092da85110dd69ced0b3f1053c6d
  $fShowQuestionInversion_$cshow ::
    GrammarData.QuestionInversion -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarData.QuestionInversion ->
                 case x of wild {
                   GrammarData.NoQuesInv -> GrammarData.$fReadQuestionInversion11
                   GrammarData.OblQuesInv
                   -> GrammarData.$fReadQuestionInversion8 }) -}
9bce092da85110dd69ced0b3f1053c6d
  $fShowQuestionInversion_$cshowList ::
    [GrammarData.QuestionInversion] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarData.QuestionInversion
                   GrammarData.$fShowQuestionInversion1) -}
9bce092da85110dd69ced0b3f1053c6d
  $fShowQuestionInversion_$cshowsPrec ::
    GHC.Types.Int -> GrammarData.QuestionInversion -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   ds1 :: GrammarData.QuestionInversion
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   GrammarData.NoQuesInv
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c1 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           GrammarData.$fReadQuestionInversion11)
                        eta
                   GrammarData.OblQuesInv
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c1 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           GrammarData.$fReadQuestionInversion8)
                        eta }) -}
36a159f3ad56cebecc6962b0f39e356c
  $fShowSubjectInitial :: GHC.Show.Show GrammarData.SubjectInitial
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.SubjectInitial
                  GrammarData.$fShowSubjectInitial_$cshowsPrec
                  GrammarData.$fShowSubjectInitial_$cshow
                  GrammarData.$fShowSubjectInitial_$cshowList -}
36a159f3ad56cebecc6962b0f39e356c
  $fShowSubjectInitial1 ::
    GrammarData.SubjectInitial -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarData.SubjectInitial eta :: GHC.Base.String ->
                 case ds of wild {
                   GrammarData.SubInitial
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c1 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           GrammarData.$fReadSubjectInitial11)
                        eta
                   GrammarData.SubFinal
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c1 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           GrammarData.$fReadSubjectInitial8)
                        eta }) -}
36a159f3ad56cebecc6962b0f39e356c
  $fShowSubjectInitial_$cshow ::
    GrammarData.SubjectInitial -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarData.SubjectInitial ->
                 case x of wild {
                   GrammarData.SubInitial -> GrammarData.$fReadSubjectInitial11
                   GrammarData.SubFinal -> GrammarData.$fReadSubjectInitial8 }) -}
36a159f3ad56cebecc6962b0f39e356c
  $fShowSubjectInitial_$cshowList ::
    [GrammarData.SubjectInitial] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarData.SubjectInitial
                   GrammarData.$fShowSubjectInitial1) -}
36a159f3ad56cebecc6962b0f39e356c
  $fShowSubjectInitial_$cshowsPrec ::
    GHC.Types.Int -> GrammarData.SubjectInitial -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   ds1 :: GrammarData.SubjectInitial
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   GrammarData.SubInitial
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c1 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           GrammarData.$fReadSubjectInitial11)
                        eta
                   GrammarData.SubFinal
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c1 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           GrammarData.$fReadSubjectInitial8)
                        eta }) -}
c96d706f7e96f794b269594d2525904c
  $fShowTopicMarking :: GHC.Show.Show GrammarData.TopicMarking
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.TopicMarking
                  GrammarData.$fShowTopicMarking_$cshowsPrec
                  GrammarData.$fShowTopicMarking_$cshow
                  GrammarData.$fShowTopicMarking_$cshowList -}
c96d706f7e96f794b269594d2525904c
  $fShowTopicMarking1 :: GrammarData.TopicMarking -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarData.TopicMarking eta :: GHC.Base.String ->
                 case ds of wild {
                   GrammarData.NoTopMark
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c1 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           GrammarData.$fReadTopicMarking11)
                        eta
                   GrammarData.OblTopMark
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c1 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           GrammarData.$fReadTopicMarking8)
                        eta }) -}
c96d706f7e96f794b269594d2525904c
  $fShowTopicMarking_$cshow ::
    GrammarData.TopicMarking -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarData.TopicMarking ->
                 case x of wild {
                   GrammarData.NoTopMark -> GrammarData.$fReadTopicMarking11
                   GrammarData.OblTopMark -> GrammarData.$fReadTopicMarking8 }) -}
c96d706f7e96f794b269594d2525904c
  $fShowTopicMarking_$cshowList ::
    [GrammarData.TopicMarking] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarData.TopicMarking
                   GrammarData.$fShowTopicMarking1) -}
c96d706f7e96f794b269594d2525904c
  $fShowTopicMarking_$cshowsPrec ::
    GHC.Types.Int -> GrammarData.TopicMarking -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   ds1 :: GrammarData.TopicMarking
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   GrammarData.NoTopMark
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c1 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           GrammarData.$fReadTopicMarking11)
                        eta
                   GrammarData.OblTopMark
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c1 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           GrammarData.$fReadTopicMarking8)
                        eta }) -}
e395809ab97655f1b03dc514ea8c035c
  $fShowVtoIMovement :: GHC.Show.Show GrammarData.VtoIMovement
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.VtoIMovement
                  GrammarData.$fShowVtoIMovement_$cshowsPrec
                  GrammarData.$fShowVtoIMovement_$cshow
                  GrammarData.$fShowVtoIMovement_$cshowList -}
e395809ab97655f1b03dc514ea8c035c
  $fShowVtoIMovement1 :: GrammarData.VtoIMovement -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarData.VtoIMovement eta :: GHC.Base.String ->
                 case ds of wild {
                   GrammarData.NoVtoIMove
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c1 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           GrammarData.$fReadVtoIMovement11)
                        eta
                   GrammarData.OblVtoIMove
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c1 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           GrammarData.$fReadVtoIMovement8)
                        eta }) -}
e395809ab97655f1b03dc514ea8c035c
  $fShowVtoIMovement_$cshow ::
    GrammarData.VtoIMovement -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarData.VtoIMovement ->
                 case x of wild {
                   GrammarData.NoVtoIMove -> GrammarData.$fReadVtoIMovement11
                   GrammarData.OblVtoIMove -> GrammarData.$fReadVtoIMovement8 }) -}
e395809ab97655f1b03dc514ea8c035c
  $fShowVtoIMovement_$cshowList ::
    [GrammarData.VtoIMovement] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarData.VtoIMovement
                   GrammarData.$fShowVtoIMovement1) -}
e395809ab97655f1b03dc514ea8c035c
  $fShowVtoIMovement_$cshowsPrec ::
    GHC.Types.Int -> GrammarData.VtoIMovement -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   ds1 :: GrammarData.VtoIMovement
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   GrammarData.NoVtoIMove
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c1 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           GrammarData.$fReadVtoIMovement11)
                        eta
                   GrammarData.OblVtoIMove
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c1 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           GrammarData.$fReadVtoIMovement8)
                        eta }) -}
e7236c5b74ef163c5dcac13e97f6961e
  $fShowWHMovementObligatory ::
    GHC.Show.Show GrammarData.WHMovementObligatory
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarData.WHMovementObligatory
                  GrammarData.$fShowWHMovementObligatory_$cshowsPrec
                  GrammarData.$fShowWHMovementObligatory_$cshow
                  GrammarData.$fShowWHMovementObligatory_$cshowList -}
e7236c5b74ef163c5dcac13e97f6961e
  $fShowWHMovementObligatory1 ::
    GrammarData.WHMovementObligatory -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarData.WHMovementObligatory eta :: GHC.Base.String ->
                 case ds of wild {
                   GrammarData.NoWHMove
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c1 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           GrammarData.$fReadWHMovementObligatory11)
                        eta
                   GrammarData.OblWHMove
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c1 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           GrammarData.$fReadWHMovementObligatory8)
                        eta }) -}
e7236c5b74ef163c5dcac13e97f6961e
  $fShowWHMovementObligatory_$cshow ::
    GrammarData.WHMovementObligatory -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarData.WHMovementObligatory ->
                 case x of wild {
                   GrammarData.NoWHMove -> GrammarData.$fReadWHMovementObligatory11
                   GrammarData.OblWHMove
                   -> GrammarData.$fReadWHMovementObligatory8 }) -}
e7236c5b74ef163c5dcac13e97f6961e
  $fShowWHMovementObligatory_$cshowList ::
    [GrammarData.WHMovementObligatory] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarData.WHMovementObligatory
                   GrammarData.$fShowWHMovementObligatory1) -}
e7236c5b74ef163c5dcac13e97f6961e
  $fShowWHMovementObligatory_$cshowsPrec ::
    GHC.Types.Int -> GrammarData.WHMovementObligatory -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   ds1 :: GrammarData.WHMovementObligatory
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   GrammarData.NoWHMove
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c1 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           GrammarData.$fReadWHMovementObligatory11)
                        eta
                   GrammarData.OblWHMove
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c1 :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           GrammarData.$fReadWHMovementObligatory8)
                        eta }) -}
9776a3b2d25ceb7c1ba01a8690fb53c0
  $s$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec10 ::
    [InflectionData.Express InflectionData.Honorific] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: [InflectionData.Express InflectionData.Honorific]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (InflectionData.Express InflectionData.Honorific)
                   (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec7
                      InflectionData.$fShow(,,,,,,,,,,,,,,,,)7)
                   eta
                   eta1) -}
c5f637e8072a9efa3118d56b3b389ef0
  $s$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec11 ::
    [InflectionData.Express InflectionData.Person] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: [InflectionData.Express InflectionData.Person]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (InflectionData.Express InflectionData.Person)
                   (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec8
                      InflectionData.$fShow(,,,,,,,,,,,,,,,,)7)
                   eta
                   eta1) -}
35bda45ad9021ca15ebac9830553659b
  $s$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec12 ::
    [InflectionData.Express InflectionData.Topic] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: [InflectionData.Express InflectionData.Topic]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (InflectionData.Express InflectionData.Topic)
                   (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec9
                      InflectionData.$fShow(,,,,,,,,,,,,,,,,)7)
                   eta
                   eta1) -}
b42418e2503ed2a64ec4144f103eacd0
  $s$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec13 ::
    [InflectionData.Express InflectionData.Specificity]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: [InflectionData.Express InflectionData.Specificity]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (InflectionData.Express InflectionData.Specificity)
                   (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec10
                      InflectionData.$fShow(,,,,,,,,,,,,,,,,)7)
                   eta
                   eta1) -}
f9852fcf8e8f8dd438000f6f3a65da1c
  $s$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec14 ::
    [InflectionData.Express InflectionData.Definiteness]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: [InflectionData.Express InflectionData.Definiteness]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (InflectionData.Express InflectionData.Definiteness)
                   (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec
                      @ InflectionData.Definiteness
                      InflectionData.$fShowDefiniteness
                      InflectionData.$fShow(,,,,,,,,,,,,,,,,)7)
                   eta
                   eta1) -}
1e01526d90466d5a6eaf8f2166781ab0
  $s$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec15 ::
    [InflectionData.Express InflectionData.Number] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: [InflectionData.Express InflectionData.Number]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (InflectionData.Express InflectionData.Number)
                   (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec11
                      InflectionData.$fShow(,,,,,,,,,,,,,,,,)7)
                   eta
                   eta1) -}
6cc7ac2187028f1a28e3a041450b553e
  $s$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec16 ::
    [InflectionData.Express InflectionData.Case] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: [InflectionData.Express InflectionData.Case]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (InflectionData.Express InflectionData.Case)
                   (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec
                      @ InflectionData.Case
                      InflectionData.$fShowCase
                      InflectionData.$fShow(,,,,,,,,,,,,,,,,)7)
                   eta
                   eta1) -}
528f8ce545ef2078ce1f6851e61d4c0c
  $s$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec17 ::
    [InflectionData.Express InflectionData.Animacy] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: [InflectionData.Express InflectionData.Animacy]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (InflectionData.Express InflectionData.Animacy)
                   (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec
                      @ InflectionData.Animacy
                      InflectionData.$fShowAnimacy
                      InflectionData.$fShow(,,,,,,,,,,,,,,,,)7)
                   eta
                   eta1) -}
91ee02d927616152e1bb62d4304833bb
  $s$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec18 ::
    [InflectionData.Express InflectionData.Gender] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: [InflectionData.Express InflectionData.Gender]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (InflectionData.Express InflectionData.Gender)
                   (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec12
                      InflectionData.$fShow(,,,,,,,,,,,,,,,,)7)
                   eta
                   eta1) -}
1ca67ea5fd8dba0e2ea3210519b47d71
  $s$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec1_$s$fShowExpress ::
    GHC.Show.Show (InflectionData.Express InflectionData.Volition)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Volition)
                  InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec1
                  (InflectionData.$fShowExpress_$cshow
                     @ InflectionData.Volition
                     InflectionData.$fShowVolition)
                  GrammarData.$s$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec2 -}
0ae291948ab0d8329d8b0c00b3e4ce8a
  $s$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec1_$s$fShowExpress1 ::
    GHC.Show.Show (InflectionData.Express InflectionData.Transitivity)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Transitivity)
                  InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec2
                  (InflectionData.$fShowExpress_$cshow
                     @ InflectionData.Transitivity
                     InflectionData.$fShowTransitivity)
                  GrammarData.$s$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec3 -}
b333fa2421fb0258012e9d720a4e5e3a
  $s$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec1_$s$fShowExpress10 ::
    GHC.Show.Show (InflectionData.Express InflectionData.Topic)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Topic)
                  InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec9
                  (InflectionData.$fShowExpress_$cshow
                     @ InflectionData.Topic
                     InflectionData.$fShowTopic)
                  GrammarData.$s$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec12 -}
45444f31eb051f995e612ee595b451ac
  $s$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec1_$s$fShowExpress11 ::
    GHC.Show.Show (InflectionData.Express InflectionData.Specificity)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Specificity)
                  InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec10
                  (InflectionData.$fShowExpress_$cshow
                     @ InflectionData.Specificity
                     InflectionData.$fShowSpecificity)
                  GrammarData.$s$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec13 -}
b298a33a7ffcbef9cd91772b6b70f1db
  $s$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec1_$s$fShowExpress12 ::
    GHC.Show.Show (InflectionData.Express InflectionData.Definiteness)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Definiteness)
                  (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec
                     @ InflectionData.Definiteness
                     InflectionData.$fShowDefiniteness)
                  (InflectionData.$fShowExpress_$cshow
                     @ InflectionData.Definiteness
                     InflectionData.$fShowDefiniteness)
                  GrammarData.$s$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec14 -}
84c4f6efc7ca947ceb563b9ad8835f81
  $s$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec1_$s$fShowExpress13 ::
    GHC.Show.Show (InflectionData.Express InflectionData.Number)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Number)
                  InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec11
                  (InflectionData.$fShowExpress_$cshow
                     @ InflectionData.Number
                     InflectionData.$fShowNumber)
                  GrammarData.$s$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec15 -}
ff32638366a3c572daeeb8f2155ede15
  $s$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec1_$s$fShowExpress14 ::
    GHC.Show.Show (InflectionData.Express InflectionData.Case)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Case)
                  (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec
                     @ InflectionData.Case
                     InflectionData.$fShowCase)
                  (InflectionData.$fShowExpress_$cshow
                     @ InflectionData.Case
                     InflectionData.$fShowCase)
                  GrammarData.$s$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec16 -}
9995c35d87cbe47307704f3d5fd1d5dc
  $s$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec1_$s$fShowExpress15 ::
    GHC.Show.Show (InflectionData.Express InflectionData.Animacy)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Animacy)
                  (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec
                     @ InflectionData.Animacy
                     InflectionData.$fShowAnimacy)
                  (InflectionData.$fShowExpress_$cshow
                     @ InflectionData.Animacy
                     InflectionData.$fShowAnimacy)
                  GrammarData.$s$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec17 -}
7b44d80842bee4089f813f55a56f1d14
  $s$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec1_$s$fShowExpress16 ::
    GHC.Show.Show (InflectionData.Express InflectionData.Gender)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Gender)
                  InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec12
                  (InflectionData.$fShowExpress_$cshow
                     @ InflectionData.Gender
                     InflectionData.$fShowGender)
                  GrammarData.$s$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec18 -}
cde82c9d754b7f1fb61e4dad117e609b
  $s$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec1_$s$fShowExpress2 ::
    GHC.Show.Show (InflectionData.Express InflectionData.Evidentiality)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Evidentiality)
                  (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec
                     @ InflectionData.Evidentiality
                     InflectionData.$fShowEvidentiality)
                  (InflectionData.$fShowExpress_$cshow
                     @ InflectionData.Evidentiality
                     InflectionData.$fShowEvidentiality)
                  GrammarData.$s$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec4 -}
f6c56c46f5f187811fc5348682d85bea
  $s$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec1_$s$fShowExpress3 ::
    GHC.Show.Show (InflectionData.Express InflectionData.Voice)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Voice)
                  InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec3
                  (InflectionData.$fShowExpress_$cshow
                     @ InflectionData.Voice
                     InflectionData.$fShowVoice)
                  GrammarData.$s$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec5 -}
27ec112cb4dcd1f5ceccf4a0314dc770
  $s$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec1_$s$fShowExpress4 ::
    GHC.Show.Show (InflectionData.Express InflectionData.Mood)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Mood)
                  InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec4
                  (InflectionData.$fShowExpress_$cshow
                     @ InflectionData.Mood
                     InflectionData.$fShowMood)
                  GrammarData.$s$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec6 -}
b0904dfbbe551f4e0b5a863f8b32c386
  $s$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec1_$s$fShowExpress5 ::
    GHC.Show.Show (InflectionData.Express InflectionData.Aspect)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Aspect)
                  (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec
                     @ InflectionData.Aspect
                     InflectionData.$fShowAspect)
                  (InflectionData.$fShowExpress_$cshow
                     @ InflectionData.Aspect
                     InflectionData.$fShowAspect)
                  GrammarData.$s$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec7 -}
3a8041fc9e2b2438bfc2c5304a5d98e4
  $s$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec1_$s$fShowExpress6 ::
    GHC.Show.Show (InflectionData.Express InflectionData.Tense)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Tense)
                  InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec5
                  (InflectionData.$fShowExpress_$cshow
                     @ InflectionData.Tense
                     InflectionData.$fShowTense)
                  GrammarData.$s$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec8 -}
d91abdd248038d5b5be6d1d9c7f6adb2
  $s$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec1_$s$fShowExpress7 ::
    GHC.Show.Show (InflectionData.Express InflectionData.Polarity)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Polarity)
                  InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec6
                  (InflectionData.$fShowExpress_$cshow
                     @ InflectionData.Polarity
                     InflectionData.$fShowPolarity)
                  GrammarData.$s$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec9 -}
d6aaf563d44d9d659c0fd0224409728a
  $s$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec1_$s$fShowExpress8 ::
    GHC.Show.Show (InflectionData.Express InflectionData.Honorific)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Honorific)
                  InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec7
                  (InflectionData.$fShowExpress_$cshow
                     @ InflectionData.Honorific
                     InflectionData.$fShowHonorific)
                  GrammarData.$s$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec10 -}
93b0fa5c07c7adeb2aeba8df695b615e
  $s$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec1_$s$fShowExpress9 ::
    GHC.Show.Show (InflectionData.Express InflectionData.Person)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Person)
                  InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec8
                  (InflectionData.$fShowExpress_$cshow
                     @ InflectionData.Person
                     InflectionData.$fShowPerson)
                  GrammarData.$s$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec11 -}
716edc8c9fd2ff198b67fc851dbbbe8f
  $s$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec2 ::
    [InflectionData.Express InflectionData.Volition] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: [InflectionData.Express InflectionData.Volition]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (InflectionData.Express InflectionData.Volition)
                   (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec1
                      InflectionData.$fShow(,,,,,,,,,,,,,,,,)7)
                   eta
                   eta1) -}
1d610e355195b936f373fc5ec08b0776
  $s$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec3 ::
    [InflectionData.Express InflectionData.Transitivity]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: [InflectionData.Express InflectionData.Transitivity]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (InflectionData.Express InflectionData.Transitivity)
                   (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec2
                      InflectionData.$fShow(,,,,,,,,,,,,,,,,)7)
                   eta
                   eta1) -}
3933cfdcf888463ac001a1b3b0ed8a3a
  $s$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec4 ::
    [InflectionData.Express InflectionData.Evidentiality]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: [InflectionData.Express InflectionData.Evidentiality]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (InflectionData.Express InflectionData.Evidentiality)
                   (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec
                      @ InflectionData.Evidentiality
                      InflectionData.$fShowEvidentiality
                      InflectionData.$fShow(,,,,,,,,,,,,,,,,)7)
                   eta
                   eta1) -}
c1f7325a803924f85c1bfcb4e481ce6a
  $s$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec5 ::
    [InflectionData.Express InflectionData.Voice] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: [InflectionData.Express InflectionData.Voice]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (InflectionData.Express InflectionData.Voice)
                   (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec3
                      InflectionData.$fShow(,,,,,,,,,,,,,,,,)7)
                   eta
                   eta1) -}
2bfe095be729e333db0d9b42b6972620
  $s$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec6 ::
    [InflectionData.Express InflectionData.Mood] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: [InflectionData.Express InflectionData.Mood]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (InflectionData.Express InflectionData.Mood)
                   (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec4
                      InflectionData.$fShow(,,,,,,,,,,,,,,,,)7)
                   eta
                   eta1) -}
e8bb4364448e3f6bc42c30d60c74d2a1
  $s$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec7 ::
    [InflectionData.Express InflectionData.Aspect] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: [InflectionData.Express InflectionData.Aspect]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (InflectionData.Express InflectionData.Aspect)
                   (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec
                      @ InflectionData.Aspect
                      InflectionData.$fShowAspect
                      InflectionData.$fShow(,,,,,,,,,,,,,,,,)7)
                   eta
                   eta1) -}
94c67fe4275a9f1ffc50ec153f87fa3a
  $s$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec8 ::
    [InflectionData.Express InflectionData.Tense] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: [InflectionData.Express InflectionData.Tense]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (InflectionData.Express InflectionData.Tense)
                   (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec5
                      InflectionData.$fShow(,,,,,,,,,,,,,,,,)7)
                   eta
                   eta1) -}
f072344e77eeb725878060282b4dc83e
  $s$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec9 ::
    [InflectionData.Express InflectionData.Polarity] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: [InflectionData.Express InflectionData.Polarity]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (InflectionData.Express InflectionData.Polarity)
                   (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec6
                      InflectionData.$fShow(,,,,,,,,,,,,,,,,)7)
                   eta
                   eta1) -}
04a49f52bfdb87c5c968d67f70ef7770
  $w$cshowsPrec :: GHC.Prim.Int# -> GrammarData.Bar -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0] -}
05c528fd36e6fa402da1ba5657c7bc2f
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> GrammarData.SubjectInitial
    -> GrammarData.ObjectFinal
    -> GrammarData.ComplementizerInitial
    -> GrammarData.VtoIMovement
    -> GrammarData.AffixHopping
    -> GrammarData.NullSubject
    -> GrammarData.ObligatoryTopic
    -> GrammarData.NullTopic
    -> GrammarData.TopicMarking
    -> GrammarData.ItoCMovement
    -> GrammarData.WHMovementObligatory
    -> GrammarData.PiedPiping
    -> GrammarData.QuestionInversion
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 15,
     Strictness: <L,U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,U>,
     Inline: [0] -}
0b723dd66110bae4a164ef4cfb3bebd4
  $w$cshowsPrec2 ::
    GrammarData.Illoc -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: GrammarData.Illoc w1 :: GHC.Base.String ->
                 case w of wild {
                   GrammarData.Null
                   -> GHC.Base.++ @ GHC.Types.Char GrammarData.$fShowIlloc4 w1
                   GrammarData.Ques
                   -> GHC.Base.++ @ GHC.Types.Char GrammarData.$fShowIlloc3 w1
                   GrammarData.Decl
                   -> GHC.Base.++ @ GHC.Types.Char GrammarData.$fShowIlloc2 w1
                   GrammarData.Imper
                   -> GHC.Base.++ @ GHC.Types.Char GrammarData.$fShowIlloc1 w1 }) -}
0c62203b93e11b844f77275212ff8c48
  $w$cshowsPrec3 ::
    GHC.Prim.Int# -> GrammarData.Leaf -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0] -}
da5bcd429ecfbb71b847767f8ed9569d
  $w$ctoEnum :: GHC.Prim.Int# -> GrammarData.AffixHopping
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 0) of wild {
                   GHC.Types.False -> GrammarData.$fEnumAffixHopping1 ww
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ww 1) of wild1 {
                        GHC.Types.False -> GrammarData.$fEnumAffixHopping1 ww
                        GHC.Types.True
                        -> GHC.Prim.tagToEnum# @ GrammarData.AffixHopping ww } }) -}
b8946e12084618f63d7bf871f8615ccb
  $w$ctoEnum1 :: GHC.Prim.Int# -> GrammarData.ComplementizerInitial
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 0) of wild {
                   GHC.Types.False -> GrammarData.$fEnumComplementizerInitial1 ww
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ww 1) of wild1 {
                        GHC.Types.False -> GrammarData.$fEnumComplementizerInitial1 ww
                        GHC.Types.True
                        -> GHC.Prim.tagToEnum#
                             @ GrammarData.ComplementizerInitial
                             ww } }) -}
36a159f3ad56cebecc6962b0f39e356c
  $w$ctoEnum10 :: GHC.Prim.Int# -> GrammarData.SubjectInitial
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 0) of wild {
                   GHC.Types.False -> GrammarData.$fEnumSubjectInitial1 ww
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ww 1) of wild1 {
                        GHC.Types.False -> GrammarData.$fEnumSubjectInitial1 ww
                        GHC.Types.True
                        -> GHC.Prim.tagToEnum# @ GrammarData.SubjectInitial ww } }) -}
c96d706f7e96f794b269594d2525904c
  $w$ctoEnum11 :: GHC.Prim.Int# -> GrammarData.TopicMarking
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 0) of wild {
                   GHC.Types.False -> GrammarData.$fEnumTopicMarking1 ww
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ww 1) of wild1 {
                        GHC.Types.False -> GrammarData.$fEnumTopicMarking1 ww
                        GHC.Types.True
                        -> GHC.Prim.tagToEnum# @ GrammarData.TopicMarking ww } }) -}
e395809ab97655f1b03dc514ea8c035c
  $w$ctoEnum12 :: GHC.Prim.Int# -> GrammarData.VtoIMovement
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 0) of wild {
                   GHC.Types.False -> GrammarData.$fEnumVtoIMovement1 ww
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ww 1) of wild1 {
                        GHC.Types.False -> GrammarData.$fEnumVtoIMovement1 ww
                        GHC.Types.True
                        -> GHC.Prim.tagToEnum# @ GrammarData.VtoIMovement ww } }) -}
e7236c5b74ef163c5dcac13e97f6961e
  $w$ctoEnum13 :: GHC.Prim.Int# -> GrammarData.WHMovementObligatory
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 0) of wild {
                   GHC.Types.False -> GrammarData.$fEnumWHMovementObligatory1 ww
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ww 1) of wild1 {
                        GHC.Types.False -> GrammarData.$fEnumWHMovementObligatory1 ww
                        GHC.Types.True
                        -> GHC.Prim.tagToEnum#
                             @ GrammarData.WHMovementObligatory
                             ww } }) -}
0b723dd66110bae4a164ef4cfb3bebd4
  $w$ctoEnum2 :: GHC.Prim.Int# -> GrammarData.Illoc
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 0) of wild {
                   GHC.Types.False -> GrammarData.$fEnumIlloc5 ww
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ww 3) of wild1 {
                        GHC.Types.False -> GrammarData.$fEnumIlloc5 ww
                        GHC.Types.True
                        -> GHC.Prim.tagToEnum# @ GrammarData.Illoc ww } }) -}
be5e38a33a1f6f8dedf69a22bff6d6f1
  $w$ctoEnum3 :: GHC.Prim.Int# -> GrammarData.ItoCMovement
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 0) of wild {
                   GHC.Types.False -> GrammarData.$fEnumItoCMovement1 ww
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ww 1) of wild1 {
                        GHC.Types.False -> GrammarData.$fEnumItoCMovement1 ww
                        GHC.Types.True
                        -> GHC.Prim.tagToEnum# @ GrammarData.ItoCMovement ww } }) -}
1b4b07b4babd1eb036e98b6d73553688
  $w$ctoEnum4 :: GHC.Prim.Int# -> GrammarData.NullSubject
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 0) of wild {
                   GHC.Types.False -> GrammarData.$fEnumNullSubject1 ww
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ww 1) of wild1 {
                        GHC.Types.False -> GrammarData.$fEnumNullSubject1 ww
                        GHC.Types.True
                        -> GHC.Prim.tagToEnum# @ GrammarData.NullSubject ww } }) -}
46091d0005c8b4e70b593eb7aef83709
  $w$ctoEnum5 :: GHC.Prim.Int# -> GrammarData.NullTopic
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 0) of wild {
                   GHC.Types.False -> GrammarData.$fEnumNullTopic1 ww
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ww 1) of wild1 {
                        GHC.Types.False -> GrammarData.$fEnumNullTopic1 ww
                        GHC.Types.True
                        -> GHC.Prim.tagToEnum# @ GrammarData.NullTopic ww } }) -}
c2c0ea9981f3d6eed112f850f7ea6beb
  $w$ctoEnum6 :: GHC.Prim.Int# -> GrammarData.ObjectFinal
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 0) of wild {
                   GHC.Types.False -> GrammarData.$fEnumObjectFinal1 ww
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ww 1) of wild1 {
                        GHC.Types.False -> GrammarData.$fEnumObjectFinal1 ww
                        GHC.Types.True
                        -> GHC.Prim.tagToEnum# @ GrammarData.ObjectFinal ww } }) -}
69babcc57bbc447bbcd2b156d19a1d60
  $w$ctoEnum7 :: GHC.Prim.Int# -> GrammarData.ObligatoryTopic
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 0) of wild {
                   GHC.Types.False -> GrammarData.$fEnumObligatoryTopic1 ww
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ww 1) of wild1 {
                        GHC.Types.False -> GrammarData.$fEnumObligatoryTopic1 ww
                        GHC.Types.True
                        -> GHC.Prim.tagToEnum# @ GrammarData.ObligatoryTopic ww } }) -}
7ceb67be553ed9e58e992b22465238f0
  $w$ctoEnum8 :: GHC.Prim.Int# -> GrammarData.PiedPiping
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 0) of wild {
                   GHC.Types.False -> GrammarData.$fEnumPiedPiping1 ww
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ww 1) of wild1 {
                        GHC.Types.False -> GrammarData.$fEnumPiedPiping1 ww
                        GHC.Types.True
                        -> GHC.Prim.tagToEnum# @ GrammarData.PiedPiping ww } }) -}
9bce092da85110dd69ced0b3f1053c6d
  $w$ctoEnum9 :: GHC.Prim.Int# -> GrammarData.QuestionInversion
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 0) of wild {
                   GHC.Types.False -> GrammarData.$fEnumQuestionInversion1 ww
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ww 1) of wild1 {
                        GHC.Types.False -> GrammarData.$fEnumQuestionInversion1 ww
                        GHC.Types.True
                        -> GHC.Prim.tagToEnum# @ GrammarData.QuestionInversion ww } }) -}
da5bcd429ecfbb71b847767f8ed9569d
  data AffixHopping = NoAffixHop | OblAffixHop
    Promotable
04a49f52bfdb87c5c968d67f70ef7770
  data Bar
    = XBarA {barLC :: InflectionData.LexCat,
             barIl :: GrammarData.Illoc,
             adjunct :: GrammarData.Phrase,
             barBar :: GrammarData.Bar}
    | XBarC {barLC :: InflectionData.LexCat,
             barIl :: GrammarData.Illoc,
             leaf :: GrammarData.Leaf,
             compliment :: GrammarData.Phrase}
b8946e12084618f63d7bf871f8615ccb
  data ComplementizerInitial = CompInitial | CompFinal
    Promotable
54b1b32e84410d13fc0ab1d24cef787f
  data Grammar
    = Grammar {getSI :: GrammarData.SubjectInitial,
               getOF :: GrammarData.ObjectFinal,
               getCI :: GrammarData.ComplementizerInitial,
               getVtoI :: GrammarData.VtoIMovement,
               getAH :: GrammarData.AffixHopping,
               getNS :: GrammarData.NullSubject,
               getObT :: GrammarData.ObligatoryTopic,
               getNT :: GrammarData.NullTopic,
               getTM :: GrammarData.TopicMarking,
               getItoC :: GrammarData.ItoCMovement,
               getWHM :: GrammarData.WHMovementObligatory,
               getPP :: GrammarData.PiedPiping,
               getQI :: GrammarData.QuestionInversion}
    Promotable
0b723dd66110bae4a164ef4cfb3bebd4
  data Illoc = Null | Ques | Decl | Imper
    Promotable
be5e38a33a1f6f8dedf69a22bff6d6f1
  data ItoCMovement = NoItoCMove | OblItoCMove
    Promotable
0c62203b93e11b844f77275212ff8c48
  data Leaf
    = LeafNull GrammarData.Illoc
    | LeafInfl {leafLC :: InflectionData.LexCat,
                leafInfl :: (InflectionData.Express InflectionData.Gender,
                             InflectionData.Express InflectionData.Animacy,
                             InflectionData.Express InflectionData.Case,
                             InflectionData.Express InflectionData.Number,
                             InflectionData.Express InflectionData.Definiteness,
                             InflectionData.Express InflectionData.Specificity,
                             InflectionData.Express InflectionData.Topic,
                             InflectionData.Express InflectionData.Person,
                             InflectionData.Express InflectionData.Honorific,
                             InflectionData.Express InflectionData.Polarity,
                             InflectionData.Express InflectionData.Tense,
                             InflectionData.Express InflectionData.Aspect,
                             InflectionData.Express InflectionData.Mood,
                             InflectionData.Express InflectionData.Voice,
                             InflectionData.Express InflectionData.Evidentiality,
                             InflectionData.Express InflectionData.Transitivity,
                             InflectionData.Express InflectionData.Volition)}
    | Leaf {leafLC :: InflectionData.LexCat,
            leafIl :: GrammarData.Illoc,
            leafStr :: GHC.Base.String}
1b4b07b4babd1eb036e98b6d73553688
  data NullSubject = NoNullSub | OptNullSub
    Promotable
46091d0005c8b4e70b593eb7aef83709
  data NullTopic = NoNullTop | OptNullTop
    Promotable
c2c0ea9981f3d6eed112f850f7ea6beb
  data ObjectFinal = ObjFinal | ObjInitial
    Promotable
69babcc57bbc447bbcd2b156d19a1d60
  data ObligatoryTopic = OblTopic | OptTopic
    Promotable
04a49f52bfdb87c5c968d67f70ef7770
  data Phrase
    = XPNull
    | XP {phraseLC :: InflectionData.LexCat,
          phraseIl :: GrammarData.Illoc,
          specifier :: GrammarData.Phrase,
          phraseBar :: GrammarData.Bar}
7ceb67be553ed9e58e992b22465238f0
  data PiedPiping = PiedPipe | PrepStrand
    Promotable
9bce092da85110dd69ced0b3f1053c6d
  data QuestionInversion = NoQuesInv | OblQuesInv
    Promotable
36a159f3ad56cebecc6962b0f39e356c
  data SubjectInitial = SubInitial | SubFinal
    Promotable
c96d706f7e96f794b269594d2525904c
  data TopicMarking = NoTopMark | OblTopMark
    Promotable
e395809ab97655f1b03dc514ea8c035c
  data VtoIMovement = NoVtoIMove | OblVtoIMove
    Promotable
e7236c5b74ef163c5dcac13e97f6961e
  data WHMovementObligatory = NoWHMove | OblWHMove
    Promotable
67a38e350a23b25cf81dfbbb03cb94b7
  adjunct :: GrammarData.Bar -> GrammarData.Phrase
  RecSel GrammarData.Bar
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarData.Bar ->
                 case ds of wild {
                   GrammarData.XBarA ds1 ds2 ds3 ds4 -> ds3
                   GrammarData.XBarC ipv ipv1 ipv2 ipv3 -> GrammarData.adjunct1 }) -}
0ef5732925ff33f0ccca6a745d6b55bc
  adjunct1 :: GrammarData.Phrase
  {- Strictness: b -}
6a3d2fd6bef96ff7f0ecbe748745abd9
  barBar :: GrammarData.Bar -> GrammarData.Bar
  RecSel GrammarData.Bar
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarData.Bar ->
                 case ds of wild {
                   GrammarData.XBarA ds1 ds2 ds3 ds4 -> ds4
                   GrammarData.XBarC ipv ipv1 ipv2 ipv3 -> GrammarData.barBar1 }) -}
f766043d598a7acd8fe1e0710c3914fe
  barBar1 :: GrammarData.Bar
  {- Strictness: b -}
db987ef944bc9db93d02ce81ea381a48
  barIl :: GrammarData.Bar -> GrammarData.Illoc
  RecSel GrammarData.Bar
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarData.Bar ->
                 case ds of wild {
                   GrammarData.XBarA ds1 ds2 ds3 ds4 -> ds2
                   GrammarData.XBarC ds1 ds2 ds3 ds4 -> ds2 }) -}
f7a5bfcc38b86459be0a5e167332dc4c
  barLC :: GrammarData.Bar -> InflectionData.LexCat
  RecSel GrammarData.Bar
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarData.Bar ->
                 case ds of wild {
                   GrammarData.XBarA ds1 ds2 ds3 ds4 -> ds1
                   GrammarData.XBarC ds1 ds2 ds3 ds4 -> ds1 }) -}
fc6708907b2164ea52c21d6a36251182
  compliment :: GrammarData.Bar -> GrammarData.Phrase
  RecSel GrammarData.Bar
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarData.Bar ->
                 case ds of wild {
                   GrammarData.XBarA ipv ipv1 ipv2 ipv3 -> GrammarData.compliment1
                   GrammarData.XBarC ds1 ds2 ds3 ds4 -> ds4 }) -}
1363cfd26ebe052726a1324353a7d721
  compliment1 :: GrammarData.Phrase
  {- Strictness: b -}
8921262fa73de9c65a89f59c3b0fc8c3
  getAH :: GrammarData.Grammar -> GrammarData.AffixHopping
  RecSel GrammarData.Grammar
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSLLLLLLLL),1*U(A,A,A,A,1*U,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarData.Grammar ->
                 case ds of wild { GrammarData.Grammar ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ->
                 ds5 }) -}
a0a26fad587439b6dca88a28896fc1c5
  getCI :: GrammarData.Grammar -> GrammarData.ComplementizerInitial
  RecSel GrammarData.Grammar
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLLLLLLLLL),1*U(A,A,1*U,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarData.Grammar ->
                 case ds of wild { GrammarData.Grammar ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ->
                 ds3 }) -}
feb64d2f99e2b23075e3c6828c774513
  getItoC :: GrammarData.Grammar -> GrammarData.ItoCMovement
  RecSel GrammarData.Grammar
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLSLLL),1*U(A,A,A,A,A,A,A,A,A,1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarData.Grammar ->
                 case ds of wild { GrammarData.Grammar ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ->
                 ds10 }) -}
ebf6cc70491427ecebf4c14065c72765
  getNS :: GrammarData.Grammar -> GrammarData.NullSubject
  RecSel GrammarData.Grammar
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLSLLLLLLL),1*U(A,A,A,A,A,1*U,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarData.Grammar ->
                 case ds of wild { GrammarData.Grammar ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ->
                 ds6 }) -}
0ba00f8bb5c1c88d2e6e21d7ec741324
  getNT :: GrammarData.Grammar -> GrammarData.NullTopic
  RecSel GrammarData.Grammar
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLSLLLLL),1*U(A,A,A,A,A,A,A,1*U,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarData.Grammar ->
                 case ds of wild { GrammarData.Grammar ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ->
                 ds8 }) -}
895a99bad4ed86ed24854c872aac16e2
  getOF :: GrammarData.Grammar -> GrammarData.ObjectFinal
  RecSel GrammarData.Grammar
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLLLLLLLLL),1*U(A,1*U,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarData.Grammar ->
                 case ds of wild { GrammarData.Grammar ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ->
                 ds2 }) -}
1052fdbec5b398413b7e2d985593a59d
  getObT :: GrammarData.Grammar -> GrammarData.ObligatoryTopic
  RecSel GrammarData.Grammar
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLSLLLLLL),1*U(A,A,A,A,A,A,1*U,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarData.Grammar ->
                 case ds of wild { GrammarData.Grammar ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ->
                 ds7 }) -}
7432e9973577fb2e734024ed0bf9282b
  getPP :: GrammarData.Grammar -> GrammarData.PiedPiping
  RecSel GrammarData.Grammar
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLSL),1*U(A,A,A,A,A,A,A,A,A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarData.Grammar ->
                 case ds of wild { GrammarData.Grammar ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ->
                 ds12 }) -}
a704db2cba16970c8226d369b62bc1ab
  getQI :: GrammarData.Grammar -> GrammarData.QuestionInversion
  RecSel GrammarData.Grammar
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLS),1*U(A,A,A,A,A,A,A,A,A,A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarData.Grammar ->
                 case ds of wild { GrammarData.Grammar ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ->
                 ds13 }) -}
2d1a4ddf9089665b698dfbfb775a671c
  getSI :: GrammarData.Grammar -> GrammarData.SubjectInitial
  RecSel GrammarData.Grammar
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLLLLLLLLL),1*U(1*U,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarData.Grammar ->
                 case ds of wild { GrammarData.Grammar ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ->
                 ds1 }) -}
3d4450bd74ae3f1e030ccb97d84795ea
  getTM :: GrammarData.Grammar -> GrammarData.TopicMarking
  RecSel GrammarData.Grammar
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLSLLLL),1*U(A,A,A,A,A,A,A,A,1*U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarData.Grammar ->
                 case ds of wild { GrammarData.Grammar ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ->
                 ds9 }) -}
c099dcaa803be48944776e61e142ad78
  getVtoI :: GrammarData.Grammar -> GrammarData.VtoIMovement
  RecSel GrammarData.Grammar
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLLLLLLLLL),1*U(A,A,A,1*U,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarData.Grammar ->
                 case ds of wild { GrammarData.Grammar ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ->
                 ds4 }) -}
dc8454ca703345b8e77193e6ca2e9ef6
  getWHM :: GrammarData.Grammar -> GrammarData.WHMovementObligatory
  RecSel GrammarData.Grammar
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLSLL),1*U(A,A,A,A,A,A,A,A,A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarData.Grammar ->
                 case ds of wild { GrammarData.Grammar ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ->
                 ds11 }) -}
e216b5feda2d8ab4745a0bad44f3bf8b
  leaf :: GrammarData.Bar -> GrammarData.Leaf
  RecSel GrammarData.Bar
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarData.Bar ->
                 case ds of wild {
                   GrammarData.XBarA ipv ipv1 ipv2 ipv3 -> GrammarData.leaf1
                   GrammarData.XBarC ds1 ds2 ds3 ds4 -> ds3 }) -}
fc9251dc389b27a1ef781dd36ea5c9b6
  leaf1 :: GrammarData.Leaf
  {- Strictness: b -}
073219ff22a6d35d51bf96f3d34e90a7
  leafIl :: GrammarData.Leaf -> GrammarData.Illoc
  RecSel GrammarData.Leaf
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarData.Leaf ->
                 case ds of wild {
                   DEFAULT -> GrammarData.leafIl1
                   GrammarData.Leaf ds1 ds2 ds3 -> ds2 }) -}
42b03a9e64744b9a50f40c6b9276765b
  leafIl1 :: GrammarData.Illoc
  {- Strictness: b -}
464f6a5249211005047c50b8063bcadc
  leafInfl ::
    GrammarData.Leaf
    -> (InflectionData.Express InflectionData.Gender,
        InflectionData.Express InflectionData.Animacy,
        InflectionData.Express InflectionData.Case,
        InflectionData.Express InflectionData.Number,
        InflectionData.Express InflectionData.Definiteness,
        InflectionData.Express InflectionData.Specificity,
        InflectionData.Express InflectionData.Topic,
        InflectionData.Express InflectionData.Person,
        InflectionData.Express InflectionData.Honorific,
        InflectionData.Express InflectionData.Polarity,
        InflectionData.Express InflectionData.Tense,
        InflectionData.Express InflectionData.Aspect,
        InflectionData.Express InflectionData.Mood,
        InflectionData.Express InflectionData.Voice,
        InflectionData.Express InflectionData.Evidentiality,
        InflectionData.Express InflectionData.Transitivity,
        InflectionData.Express InflectionData.Volition)
  RecSel GrammarData.Leaf
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarData.Leaf ->
                 case ds of wild {
                   DEFAULT -> GrammarData.leafInfl1
                   GrammarData.LeafInfl ds1 ds2 -> ds2 }) -}
6ef7ae38b27677388c616f3f49124c03
  leafInfl1 ::
    (InflectionData.Express InflectionData.Gender,
     InflectionData.Express InflectionData.Animacy,
     InflectionData.Express InflectionData.Case,
     InflectionData.Express InflectionData.Number,
     InflectionData.Express InflectionData.Definiteness,
     InflectionData.Express InflectionData.Specificity,
     InflectionData.Express InflectionData.Topic,
     InflectionData.Express InflectionData.Person,
     InflectionData.Express InflectionData.Honorific,
     InflectionData.Express InflectionData.Polarity,
     InflectionData.Express InflectionData.Tense,
     InflectionData.Express InflectionData.Aspect,
     InflectionData.Express InflectionData.Mood,
     InflectionData.Express InflectionData.Voice,
     InflectionData.Express InflectionData.Evidentiality,
     InflectionData.Express InflectionData.Transitivity,
     InflectionData.Express InflectionData.Volition)
  {- Strictness: b -}
45cba8eff52ea59f47ae232ba851460c
  leafLC :: GrammarData.Leaf -> InflectionData.LexCat
  RecSel GrammarData.Leaf
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarData.Leaf ->
                 case ds of wild {
                   GrammarData.LeafNull ipv -> GrammarData.leafLC1
                   GrammarData.LeafInfl ds1 ds2 -> ds1
                   GrammarData.Leaf ds1 ds2 ds3 -> ds1 }) -}
396973b8ef41294046c8cb4f584311ab
  leafLC1 :: InflectionData.LexCat
  {- Strictness: b -}
603a4b50c0ac1c32b8732a87fa67e95c
  leafStr :: GrammarData.Leaf -> GHC.Base.String
  RecSel GrammarData.Leaf
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarData.Leaf ->
                 case ds of wild {
                   DEFAULT -> GrammarData.leafStr1
                   GrammarData.Leaf ds1 ds2 ds3 -> ds3 }) -}
c7d4170496eccc39a945c1a014ea1c24
  leafStr1 :: GHC.Base.String
  {- Strictness: b -}
4edaca52688cbd4c058cf176c449e975
  phraseBar :: GrammarData.Phrase -> GrammarData.Bar
  RecSel GrammarData.Phrase
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarData.Phrase ->
                 case ds of wild {
                   GrammarData.XPNull -> GrammarData.phraseBar1
                   GrammarData.XP ds1 ds2 ds3 ds4 -> ds4 }) -}
eecb2fb7607f3b38225c7aebf24a2a3c
  phraseBar1 :: GrammarData.Bar
  {- Strictness: b -}
3bbfae639db157f0fc356843d528f5d4
  phraseIl :: GrammarData.Phrase -> GrammarData.Illoc
  RecSel GrammarData.Phrase
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarData.Phrase ->
                 case ds of wild {
                   GrammarData.XPNull -> GrammarData.phraseIl1
                   GrammarData.XP ds1 ds2 ds3 ds4 -> ds2 }) -}
67986ad9d5b2a710a806f7641aa8611d
  phraseIl1 :: GrammarData.Illoc
  {- Strictness: b -}
3f23d0f80af86e20f7a6858d6c9da4f3
  phraseLC :: GrammarData.Phrase -> InflectionData.LexCat
  RecSel GrammarData.Phrase
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarData.Phrase ->
                 case ds of wild {
                   GrammarData.XPNull -> GrammarData.phraseLC1
                   GrammarData.XP ds1 ds2 ds3 ds4 -> ds1 }) -}
424d14fbd9f56d3cf0bc259e4ce43a54
  phraseLC1 :: InflectionData.LexCat
  {- Strictness: b -}
f0295776d6c0586c9cce2b66a62278e7
  specifier :: GrammarData.Phrase -> GrammarData.Phrase
  RecSel GrammarData.Phrase
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarData.Phrase ->
                 case ds of wild {
                   GrammarData.XPNull -> GrammarData.specifier1
                   GrammarData.XP ds1 ds2 ds3 ds4 -> ds3 }) -}
b8d6be802e9c57288ad00de8241762ab
  specifier1 :: GrammarData.Phrase
  {- Strictness: b -}
instance GHC.Enum.Enum [GrammarData.AffixHopping]
  = GrammarData.$fEnumAffixHopping
instance GHC.Enum.Enum [GrammarData.ComplementizerInitial]
  = GrammarData.$fEnumComplementizerInitial
instance GHC.Enum.Enum [GrammarData.Illoc]
  = GrammarData.$fEnumIlloc
instance GHC.Enum.Enum [GrammarData.ItoCMovement]
  = GrammarData.$fEnumItoCMovement
instance GHC.Enum.Enum [GrammarData.NullSubject]
  = GrammarData.$fEnumNullSubject
instance GHC.Enum.Enum [GrammarData.NullTopic]
  = GrammarData.$fEnumNullTopic
instance GHC.Enum.Enum [GrammarData.ObjectFinal]
  = GrammarData.$fEnumObjectFinal
instance GHC.Enum.Enum [GrammarData.ObligatoryTopic]
  = GrammarData.$fEnumObligatoryTopic
instance GHC.Enum.Enum [GrammarData.PiedPiping]
  = GrammarData.$fEnumPiedPiping
instance GHC.Enum.Enum [GrammarData.QuestionInversion]
  = GrammarData.$fEnumQuestionInversion
instance GHC.Enum.Enum [GrammarData.SubjectInitial]
  = GrammarData.$fEnumSubjectInitial
instance GHC.Enum.Enum [GrammarData.TopicMarking]
  = GrammarData.$fEnumTopicMarking
instance GHC.Enum.Enum [GrammarData.VtoIMovement]
  = GrammarData.$fEnumVtoIMovement
instance GHC.Enum.Enum [GrammarData.WHMovementObligatory]
  = GrammarData.$fEnumWHMovementObligatory
instance GHC.Classes.Eq [GrammarData.AffixHopping]
  = GrammarData.$fEqAffixHopping
instance GHC.Classes.Eq [GrammarData.Bar] = GrammarData.$fEqBar
instance GHC.Classes.Eq [GrammarData.ComplementizerInitial]
  = GrammarData.$fEqComplementizerInitial
instance GHC.Classes.Eq [GrammarData.Illoc] = GrammarData.$fEqIlloc
instance GHC.Classes.Eq [GrammarData.ItoCMovement]
  = GrammarData.$fEqItoCMovement
instance GHC.Classes.Eq [GrammarData.Leaf] = GrammarData.$fEqLeaf
instance GHC.Classes.Eq [GrammarData.NullSubject]
  = GrammarData.$fEqNullSubject
instance GHC.Classes.Eq [GrammarData.NullTopic]
  = GrammarData.$fEqNullTopic
instance GHC.Classes.Eq [GrammarData.ObjectFinal]
  = GrammarData.$fEqObjectFinal
instance GHC.Classes.Eq [GrammarData.ObligatoryTopic]
  = GrammarData.$fEqObligatoryTopic
instance GHC.Classes.Eq [GrammarData.Phrase]
  = GrammarData.$fEqPhrase
instance GHC.Classes.Eq [GrammarData.PiedPiping]
  = GrammarData.$fEqPiedPiping
instance GHC.Classes.Eq [GrammarData.QuestionInversion]
  = GrammarData.$fEqQuestionInversion
instance GHC.Classes.Eq [GrammarData.SubjectInitial]
  = GrammarData.$fEqSubjectInitial
instance GHC.Classes.Eq [GrammarData.TopicMarking]
  = GrammarData.$fEqTopicMarking
instance GHC.Classes.Eq [GrammarData.VtoIMovement]
  = GrammarData.$fEqVtoIMovement
instance GHC.Classes.Eq [GrammarData.WHMovementObligatory]
  = GrammarData.$fEqWHMovementObligatory
instance GHC.Read.Read [GrammarData.AffixHopping]
  = GrammarData.$fReadAffixHopping
instance GHC.Read.Read [GrammarData.ComplementizerInitial]
  = GrammarData.$fReadComplementizerInitial
instance GHC.Read.Read [GrammarData.ItoCMovement]
  = GrammarData.$fReadItoCMovement
instance GHC.Read.Read [GrammarData.NullSubject]
  = GrammarData.$fReadNullSubject
instance GHC.Read.Read [GrammarData.NullTopic]
  = GrammarData.$fReadNullTopic
instance GHC.Read.Read [GrammarData.ObjectFinal]
  = GrammarData.$fReadObjectFinal
instance GHC.Read.Read [GrammarData.ObligatoryTopic]
  = GrammarData.$fReadObligatoryTopic
instance GHC.Read.Read [GrammarData.PiedPiping]
  = GrammarData.$fReadPiedPiping
instance GHC.Read.Read [GrammarData.QuestionInversion]
  = GrammarData.$fReadQuestionInversion
instance GHC.Read.Read [GrammarData.SubjectInitial]
  = GrammarData.$fReadSubjectInitial
instance GHC.Read.Read [GrammarData.TopicMarking]
  = GrammarData.$fReadTopicMarking
instance GHC.Read.Read [GrammarData.VtoIMovement]
  = GrammarData.$fReadVtoIMovement
instance GHC.Read.Read [GrammarData.WHMovementObligatory]
  = GrammarData.$fReadWHMovementObligatory
instance GHC.Show.Show [GrammarData.AffixHopping]
  = GrammarData.$fShowAffixHopping
instance GHC.Show.Show [GrammarData.Bar] = GrammarData.$fShowBar
instance GHC.Show.Show [GrammarData.ComplementizerInitial]
  = GrammarData.$fShowComplementizerInitial
instance GHC.Show.Show [GrammarData.Grammar]
  = GrammarData.$fShowGrammar
instance GHC.Show.Show [GrammarData.Illoc]
  = GrammarData.$fShowIlloc
instance GHC.Show.Show [GrammarData.ItoCMovement]
  = GrammarData.$fShowItoCMovement
instance GHC.Show.Show [GrammarData.Leaf] = GrammarData.$fShowLeaf
instance GHC.Show.Show [GrammarData.NullSubject]
  = GrammarData.$fShowNullSubject
instance GHC.Show.Show [GrammarData.NullTopic]
  = GrammarData.$fShowNullTopic
instance GHC.Show.Show [GrammarData.ObjectFinal]
  = GrammarData.$fShowObjectFinal
instance GHC.Show.Show [GrammarData.ObligatoryTopic]
  = GrammarData.$fShowObligatoryTopic
instance GHC.Show.Show [GrammarData.Phrase]
  = GrammarData.$fShowPhrase
instance GHC.Show.Show [GrammarData.PiedPiping]
  = GrammarData.$fShowPiedPiping
instance GHC.Show.Show [GrammarData.QuestionInversion]
  = GrammarData.$fShowQuestionInversion
instance GHC.Show.Show [GrammarData.SubjectInitial]
  = GrammarData.$fShowSubjectInitial
instance GHC.Show.Show [GrammarData.TopicMarking]
  = GrammarData.$fShowTopicMarking
instance GHC.Show.Show [GrammarData.VtoIMovement]
  = GrammarData.$fShowVtoIMovement
instance GHC.Show.Show [GrammarData.WHMovementObligatory]
  = GrammarData.$fShowWHMovementObligatory
"SPEC/GrammarData $dmreadsPrec @ AffixHopping" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                           GrammarData.AffixHopping
  GHC.Read.$dmreadsPrec @ GrammarData.AffixHopping $dRead
  = GrammarData.$fReadAffixHopping_$s$dmreadsPrec
"SPEC/GrammarData $dmreadsPrec @ ComplementizerInitial" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                                    GrammarData.ComplementizerInitial
  GHC.Read.$dmreadsPrec @ GrammarData.ComplementizerInitial $dRead
  = GrammarData.$fReadComplementizerInitial_$s$dmreadsPrec
"SPEC/GrammarData $dmreadsPrec @ ItoCMovement" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                           GrammarData.ItoCMovement
  GHC.Read.$dmreadsPrec @ GrammarData.ItoCMovement $dRead
  = GrammarData.$fReadItoCMovement_$s$dmreadsPrec
"SPEC/GrammarData $dmreadsPrec @ NullSubject" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                          GrammarData.NullSubject
  GHC.Read.$dmreadsPrec @ GrammarData.NullSubject $dRead
  = GrammarData.$fReadNullSubject_$s$dmreadsPrec
"SPEC/GrammarData $dmreadsPrec @ NullTopic" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                        GrammarData.NullTopic
  GHC.Read.$dmreadsPrec @ GrammarData.NullTopic $dRead
  = GrammarData.$fReadNullTopic_$s$dmreadsPrec
"SPEC/GrammarData $dmreadsPrec @ ObjectFinal" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                          GrammarData.ObjectFinal
  GHC.Read.$dmreadsPrec @ GrammarData.ObjectFinal $dRead
  = GrammarData.$fReadObjectFinal_$s$dmreadsPrec
"SPEC/GrammarData $dmreadsPrec @ ObligatoryTopic" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                              GrammarData.ObligatoryTopic
  GHC.Read.$dmreadsPrec @ GrammarData.ObligatoryTopic $dRead
  = GrammarData.$fReadObligatoryTopic_$s$dmreadsPrec
"SPEC/GrammarData $dmreadsPrec @ PiedPiping" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                         GrammarData.PiedPiping
  GHC.Read.$dmreadsPrec @ GrammarData.PiedPiping $dRead
  = GrammarData.$fReadPiedPiping_$s$dmreadsPrec
"SPEC/GrammarData $dmreadsPrec @ QuestionInversion" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                                GrammarData.QuestionInversion
  GHC.Read.$dmreadsPrec @ GrammarData.QuestionInversion $dRead
  = GrammarData.$fReadQuestionInversion_$s$dmreadsPrec
"SPEC/GrammarData $dmreadsPrec @ SubjectInitial" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                             GrammarData.SubjectInitial
  GHC.Read.$dmreadsPrec @ GrammarData.SubjectInitial $dRead
  = GrammarData.$fReadSubjectInitial_$s$dmreadsPrec
"SPEC/GrammarData $dmreadsPrec @ TopicMarking" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                           GrammarData.TopicMarking
  GHC.Read.$dmreadsPrec @ GrammarData.TopicMarking $dRead
  = GrammarData.$fReadTopicMarking_$s$dmreadsPrec
"SPEC/GrammarData $dmreadsPrec @ VtoIMovement" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                           GrammarData.VtoIMovement
  GHC.Read.$dmreadsPrec @ GrammarData.VtoIMovement $dRead
  = GrammarData.$fReadVtoIMovement_$s$dmreadsPrec
"SPEC/GrammarData $dmreadsPrec @ WHMovementObligatory" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                                   GrammarData.WHMovementObligatory
  GHC.Read.$dmreadsPrec @ GrammarData.WHMovementObligatory $dRead
  = GrammarData.$fReadWHMovementObligatory_$s$dmreadsPrec
"SPEC/GrammarData $fShowExpress @ Animacy" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                       InflectionData.Animacy
  InflectionData.$fShowExpress @ InflectionData.Animacy $dShow
  = GrammarData.$s$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec1_$s$fShowExpress15
"SPEC/GrammarData $fShowExpress @ Aspect" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                      InflectionData.Aspect
  InflectionData.$fShowExpress @ InflectionData.Aspect $dShow
  = GrammarData.$s$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec1_$s$fShowExpress5
"SPEC/GrammarData $fShowExpress @ Case" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                    InflectionData.Case
  InflectionData.$fShowExpress @ InflectionData.Case $dShow
  = GrammarData.$s$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec1_$s$fShowExpress14
"SPEC/GrammarData $fShowExpress @ Definiteness" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                            InflectionData.Definiteness
  InflectionData.$fShowExpress @ InflectionData.Definiteness $dShow
  = GrammarData.$s$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec1_$s$fShowExpress12
"SPEC/GrammarData $fShowExpress @ Evidentiality" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                             InflectionData.Evidentiality
  InflectionData.$fShowExpress @ InflectionData.Evidentiality $dShow
  = GrammarData.$s$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec1_$s$fShowExpress2
"SPEC/GrammarData $fShowExpress @ Gender" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                      InflectionData.Gender
  InflectionData.$fShowExpress @ InflectionData.Gender $dShow
  = GrammarData.$s$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec1_$s$fShowExpress16
"SPEC/GrammarData $fShowExpress @ Honorific" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                         InflectionData.Honorific
  InflectionData.$fShowExpress @ InflectionData.Honorific $dShow
  = GrammarData.$s$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec1_$s$fShowExpress8
"SPEC/GrammarData $fShowExpress @ Mood" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                    InflectionData.Mood
  InflectionData.$fShowExpress @ InflectionData.Mood $dShow
  = GrammarData.$s$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec1_$s$fShowExpress4
"SPEC/GrammarData $fShowExpress @ Number" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                      InflectionData.Number
  InflectionData.$fShowExpress @ InflectionData.Number $dShow
  = GrammarData.$s$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec1_$s$fShowExpress13
"SPEC/GrammarData $fShowExpress @ Person" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                      InflectionData.Person
  InflectionData.$fShowExpress @ InflectionData.Person $dShow
  = GrammarData.$s$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec1_$s$fShowExpress9
"SPEC/GrammarData $fShowExpress @ Polarity" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                        InflectionData.Polarity
  InflectionData.$fShowExpress @ InflectionData.Polarity $dShow
  = GrammarData.$s$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec1_$s$fShowExpress7
"SPEC/GrammarData $fShowExpress @ Specificity" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                           InflectionData.Specificity
  InflectionData.$fShowExpress @ InflectionData.Specificity $dShow
  = GrammarData.$s$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec1_$s$fShowExpress11
"SPEC/GrammarData $fShowExpress @ Tense" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                     InflectionData.Tense
  InflectionData.$fShowExpress @ InflectionData.Tense $dShow
  = GrammarData.$s$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec1_$s$fShowExpress6
"SPEC/GrammarData $fShowExpress @ Topic" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                     InflectionData.Topic
  InflectionData.$fShowExpress @ InflectionData.Topic $dShow
  = GrammarData.$s$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec1_$s$fShowExpress10
"SPEC/GrammarData $fShowExpress @ Transitivity" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                            InflectionData.Transitivity
  InflectionData.$fShowExpress @ InflectionData.Transitivity $dShow
  = GrammarData.$s$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec1_$s$fShowExpress1
"SPEC/GrammarData $fShowExpress @ Voice" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                     InflectionData.Voice
  InflectionData.$fShowExpress @ InflectionData.Voice $dShow
  = GrammarData.$s$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec1_$s$fShowExpress3
"SPEC/GrammarData $fShowExpress @ Volition" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                        InflectionData.Volition
  InflectionData.$fShowExpress @ InflectionData.Volition $dShow
  = GrammarData.$s$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec1_$s$fShowExpress
"SPEC/GrammarData readListDefault @ AffixHopping" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                              GrammarData.AffixHopping
  GHC.Read.readListDefault @ GrammarData.AffixHopping $dRead
  = GrammarData.$fReadAffixHopping_$sreadListDefault
"SPEC/GrammarData readListDefault @ ComplementizerInitial" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                                       GrammarData.ComplementizerInitial
  GHC.Read.readListDefault @ GrammarData.ComplementizerInitial $dRead
  = GrammarData.$fReadComplementizerInitial_$sreadListDefault
"SPEC/GrammarData readListDefault @ ItoCMovement" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                              GrammarData.ItoCMovement
  GHC.Read.readListDefault @ GrammarData.ItoCMovement $dRead
  = GrammarData.$fReadItoCMovement_$sreadListDefault
"SPEC/GrammarData readListDefault @ NullSubject" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                             GrammarData.NullSubject
  GHC.Read.readListDefault @ GrammarData.NullSubject $dRead
  = GrammarData.$fReadNullSubject_$sreadListDefault
"SPEC/GrammarData readListDefault @ NullTopic" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                           GrammarData.NullTopic
  GHC.Read.readListDefault @ GrammarData.NullTopic $dRead
  = GrammarData.$fReadNullTopic_$sreadListDefault
"SPEC/GrammarData readListDefault @ ObjectFinal" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                             GrammarData.ObjectFinal
  GHC.Read.readListDefault @ GrammarData.ObjectFinal $dRead
  = GrammarData.$fReadObjectFinal_$sreadListDefault
"SPEC/GrammarData readListDefault @ ObligatoryTopic" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                                 GrammarData.ObligatoryTopic
  GHC.Read.readListDefault @ GrammarData.ObligatoryTopic $dRead
  = GrammarData.$fReadObligatoryTopic_$sreadListDefault
"SPEC/GrammarData readListDefault @ PiedPiping" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                            GrammarData.PiedPiping
  GHC.Read.readListDefault @ GrammarData.PiedPiping $dRead
  = GrammarData.$fReadPiedPiping_$sreadListDefault
"SPEC/GrammarData readListDefault @ QuestionInversion" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                                   GrammarData.QuestionInversion
  GHC.Read.readListDefault @ GrammarData.QuestionInversion $dRead
  = GrammarData.$fReadQuestionInversion_$sreadListDefault
"SPEC/GrammarData readListDefault @ SubjectInitial" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                                GrammarData.SubjectInitial
  GHC.Read.readListDefault @ GrammarData.SubjectInitial $dRead
  = GrammarData.$fReadSubjectInitial_$sreadListDefault
"SPEC/GrammarData readListDefault @ TopicMarking" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                              GrammarData.TopicMarking
  GHC.Read.readListDefault @ GrammarData.TopicMarking $dRead
  = GrammarData.$fReadTopicMarking_$sreadListDefault
"SPEC/GrammarData readListDefault @ VtoIMovement" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                              GrammarData.VtoIMovement
  GHC.Read.readListDefault @ GrammarData.VtoIMovement $dRead
  = GrammarData.$fReadVtoIMovement_$sreadListDefault
"SPEC/GrammarData readListDefault @ WHMovementObligatory" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                                      GrammarData.WHMovementObligatory
  GHC.Read.readListDefault @ GrammarData.WHMovementObligatory $dRead
  = GrammarData.$fReadWHMovementObligatory_$sreadListDefault
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

