
==================== FINAL INTERFACE ====================
2016-09-05 21:38:18.50823 UTC

interface conla_4HxSYcynNloL3TkunNPLrN:XBarType 7103
  interface hash: 00ac358e9ae76956527a852d0108db4d
  ABI hash: f5b0618eab0ab35313e6fd1a50718931
  export-list hash: 2c3b48fb886918acb83c2895b6db82d0
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 962af636f8e927040c7daa9c21457292
  sig of: Nothing
  used TH splices: False
  where
exports:
  XBarType.Adj{XBarType.Adj}
  XBarType.AdjBar{XBarType.AdjBar1 XBarType.AdjBar2 XBarType.AdjBar3 XBarType.AdjBar4}
  XBarType.AdjP{XBarType.AdjP}
  XBarType.Adv{XBarType.Adv}
  XBarType.AdvBar{XBarType.AdvBar}
  XBarType.AdvP{XBarType.AdvP}
  XBarType.Comp{XBarType.Comp}
  XBarType.CompBar{XBarType.CompBar}
  XBarType.CompP{XBarType.CompP}
  XBarType.Det{XBarType.Det}
  XBarType.DetBar{XBarType.DetBar}
  XBarType.DetP{XBarType.DetP}
  XBarType.Noun{XBarType.Noun}
  XBarType.NounBar{XBarType.NounBar1 XBarType.NounBar2 XBarType.NounBar3}
  XBarType.NounP{XBarType.NounP}
  XBarType.Optional{XBarType.NoOpt XBarType.YesOpt}
  XBarType.Prep{XBarType.Prep}
  XBarType.PrepBar{XBarType.PrepBar1 XBarType.PrepBar2}
  XBarType.PrepP{XBarType.PrepP}
  XBarType.Tense{XBarType.Tense}
  XBarType.TenseBar{XBarType.TenseBar}
  XBarType.TenseP{XBarType.TenseP}
  XBarType.Verb{XBarType.Verb}
  XBarType.VerbBar{XBarType.VerbBar1 XBarType.VerbBar2 XBarType.VerbBar3 XBarType.VerbBar4 XBarType.VerbBar5}
  XBarType.VerbP{XBarType.VerbP}
module dependencies:
package dependencies: base-4.8.2.0* ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Monoid
                         base-4.8.2.0:Data.Type.Equality base-4.8.2.0:GHC.Generics
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.Read b423b4506a014855edbd329b567629f3
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  base-4.8.2.0:Text.ParserCombinators.ReadPrec 2590e0e0a57a86ac7c62727f4d868dd2
import  -/  base-4.8.2.0:Text.Read.Lex 724ca44ddd38ddc5f47a501d62736c26
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
1cf95d74cf8034e3cd8743015f534f02
  $fReadAdj :: GHC.Read.Read XBarType.Adj
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.Adj
                  XBarType.$fReadAdj_$s$dmreadsPrec
                  XBarType.$fReadAdj_$sreadListDefault
                  XBarType.$fReadAdj_$creadPrec
                  XBarType.$fReadAdj_$creadListPrec -}
1cf95d74cf8034e3cd8743015f534f02
  $fReadAdj1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([XBarType.Adj] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [XBarType.Adj] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ XBarType.Adj
                   XBarType.$fReadAdj2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <XBarType.Adj>_R))
                   @ b
                   eta1) -}
1cf95d74cf8034e3cd8743015f534f02
  $fReadAdj2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP XBarType.Adj
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ XBarType.Adj
                   XBarType.$fReadAdj3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <XBarType.Adj>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <XBarType.Adj>_R)))) -}
1cf95d74cf8034e3cd8743015f534f02
  $fReadAdj3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (XBarType.Adj -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: XBarType.Adj -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 -> XBarType.$wa ww1 @ b w1 }) -}
47104a68600dde3df9bcb8de9787f246
  $fReadAdj4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Adj"#) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadAdjBar :: GHC.Read.Read XBarType.AdjBar
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.AdjBar
                  XBarType.$fReadAdjBar_$creadsPrec
                  XBarType.$fReadAdjBar_$sreadListDefault
                  XBarType.$fReadAdjBar_$creadPrec
                  XBarType.$fReadAdjBar_$creadListPrec -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadAdjBar1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([XBarType.AdjBar] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [XBarType.AdjBar] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ XBarType.AdjBar
                   XBarType.$fReadAdjBar2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <XBarType.AdjBar>_R))
                   @ b
                   eta1) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadAdjBar2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP XBarType.AdjBar
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ XBarType.AdjBar
                   XBarType.$fReadAdjBar3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <XBarType.AdjBar>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <XBarType.AdjBar>_R)))) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadAdjBar3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (XBarType.AdjBar -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: XBarType.AdjBar -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 -> XBarType.$wa1 ww1 @ b w1 }) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadAdjBar_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [XBarType.AdjBar]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadAdjBar1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[XBarType.AdjBar]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[XBarType.AdjBar]>_R))) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadAdjBar_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec XBarType.AdjBar
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadAdjBar2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <XBarType.AdjBar>_R)) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadAdjBar_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS XBarType.AdjBar
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadP.run
                   @ XBarType.AdjBar
                   ((GHC.Read.$fReadDouble10
                       @ XBarType.AdjBar
                       XBarType.$fReadAdjBar3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                           <XBarType.AdjBar>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                      <XBarType.AdjBar>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <XBarType.AdjBar>_R)
                      @ XBarType.AdjBar
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ XBarType.AdjBar))) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadAdjBar_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [XBarType.AdjBar]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [XBarType.AdjBar]
                   ((XBarType.$fReadAdjBar_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[XBarType.AdjBar]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <[XBarType.AdjBar]>_R)
                      @ [XBarType.AdjBar]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [XBarType.AdjBar]))) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadAdjP :: GHC.Read.Read XBarType.AdjP
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.AdjP
                  XBarType.$fReadAdjP_$creadsPrec
                  XBarType.$fReadAdjP_$creadList
                  XBarType.$fReadAdjP_$creadPrec
                  XBarType.$fReadAdjP_$creadListPrec -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadAdjP1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([XBarType.AdjP] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [XBarType.AdjP] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ XBarType.AdjP
                   XBarType.$fReadAdjP2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <XBarType.AdjP>_R))
                   @ b
                   eta1) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadAdjP2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP XBarType.AdjP
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ XBarType.AdjP
                   XBarType.$fReadAdjP3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <XBarType.AdjP>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <XBarType.AdjP>_R)))) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadAdjP3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (XBarType.AdjP -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: XBarType.AdjP -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 -> XBarType.$wa2 ww1 @ b w1 }) -}
52da85cae54287d55accf5dc5eac6445
  $fReadAdjP4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AdjP"#) -}
60bab2f21c7bb5ff8f0df3888986a36f
  $fReadAdjP5 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 11) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadAdjP6 :: Text.ParserCombinators.ReadP.P [XBarType.AdjP]
  {- Unfolding: (GHC.Read.$wa
                   @ XBarType.AdjP
                   XBarType.$fReadAdjP2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <XBarType.AdjP>_R))
                   @ [XBarType.AdjP]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                      @ [XBarType.AdjP])) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadAdjP_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [XBarType.AdjP]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [XBarType.AdjP]
                   XBarType.$fReadAdjP6) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadAdjP_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [XBarType.AdjP]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadAdjP1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[XBarType.AdjP]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[XBarType.AdjP]>_R))) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadAdjP_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec XBarType.AdjP
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadAdjP2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <XBarType.AdjP>_R)) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadAdjP_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS XBarType.AdjP
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadP.run
                   @ XBarType.AdjP
                   ((GHC.Read.$fReadDouble10
                       @ XBarType.AdjP
                       XBarType.$fReadAdjP3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                           <XBarType.AdjP>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                      <XBarType.AdjP>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <XBarType.AdjP>_R)
                      @ XBarType.AdjP
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ XBarType.AdjP))) -}
1cf95d74cf8034e3cd8743015f534f02
  $fReadAdj_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [XBarType.Adj]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadAdj1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[XBarType.Adj]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[XBarType.Adj]>_R))) -}
1cf95d74cf8034e3cd8743015f534f02
  $fReadAdj_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec XBarType.Adj
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadAdj2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <XBarType.Adj>_R)) -}
1cf95d74cf8034e3cd8743015f534f02
  $fReadAdj_$s$dmreadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS XBarType.Adj
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ XBarType.Adj
                   XBarType.$fReadAdj_$creadPrec
                   eta) -}
1cf95d74cf8034e3cd8743015f534f02
  $fReadAdj_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [XBarType.Adj]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [XBarType.Adj]
                   ((XBarType.$fReadAdj_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[XBarType.Adj]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <[XBarType.Adj]>_R)
                      @ [XBarType.Adj]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [XBarType.Adj]))) -}
b210e39e480af28620788baa98bef96d
  $fReadAdv :: GHC.Read.Read XBarType.Adv
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.Adv
                  XBarType.$fReadAdv_$s$dmreadsPrec
                  XBarType.$fReadAdv_$sreadListDefault
                  XBarType.$fReadAdv_$creadPrec
                  XBarType.$fReadAdv_$creadListPrec -}
b210e39e480af28620788baa98bef96d
  $fReadAdv1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([XBarType.Adv] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [XBarType.Adv] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ XBarType.Adv
                   XBarType.$fReadAdv2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <XBarType.Adv>_R))
                   @ b
                   eta1) -}
b210e39e480af28620788baa98bef96d
  $fReadAdv2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP XBarType.Adv
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ XBarType.Adv
                   XBarType.$fReadAdv3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <XBarType.Adv>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <XBarType.Adv>_R)))) -}
b210e39e480af28620788baa98bef96d
  $fReadAdv3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (XBarType.Adv -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: XBarType.Adv -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 -> XBarType.$wa3 ww1 @ b w1 }) -}
c2c64aff587ae9cad458c29540255379
  $fReadAdv4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Adv"#) -}
a84521cf9655e5e74dadfb60f7ad7a69
  $fReadAdvBar :: GHC.Read.Read XBarType.AdvBar
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.AdvBar
                  XBarType.$fReadAdvBar_$s$dmreadsPrec
                  XBarType.$fReadAdvBar_$sreadListDefault
                  XBarType.$fReadAdvBar_$creadPrec
                  XBarType.$fReadAdvBar_$creadListPrec -}
a84521cf9655e5e74dadfb60f7ad7a69
  $fReadAdvBar1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([XBarType.AdvBar] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [XBarType.AdvBar] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ XBarType.AdvBar
                   XBarType.$fReadAdvBar2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <XBarType.AdvBar>_R))
                   @ b
                   eta1) -}
a84521cf9655e5e74dadfb60f7ad7a69
  $fReadAdvBar2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP XBarType.AdvBar
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ XBarType.AdvBar
                   XBarType.$fReadAdvBar3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <XBarType.AdvBar>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <XBarType.AdvBar>_R)))) -}
a84521cf9655e5e74dadfb60f7ad7a69
  $fReadAdvBar3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (XBarType.AdvBar -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: XBarType.AdvBar -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 -> XBarType.$wa4 ww1 @ b w1 }) -}
85e8daeff2038c41f11536417f0443de
  $fReadAdvBar4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AdvBar"#) -}
a84521cf9655e5e74dadfb60f7ad7a69
  $fReadAdvBar_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [XBarType.AdvBar]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadAdvBar1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[XBarType.AdvBar]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[XBarType.AdvBar]>_R))) -}
a84521cf9655e5e74dadfb60f7ad7a69
  $fReadAdvBar_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec XBarType.AdvBar
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadAdvBar2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <XBarType.AdvBar>_R)) -}
a84521cf9655e5e74dadfb60f7ad7a69
  $fReadAdvBar_$s$dmreadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS XBarType.AdvBar
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ XBarType.AdvBar
                   XBarType.$fReadAdvBar_$creadPrec
                   eta) -}
a84521cf9655e5e74dadfb60f7ad7a69
  $fReadAdvBar_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [XBarType.AdvBar]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [XBarType.AdvBar]
                   ((XBarType.$fReadAdvBar_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[XBarType.AdvBar]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <[XBarType.AdvBar]>_R)
                      @ [XBarType.AdvBar]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [XBarType.AdvBar]))) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadAdvP :: GHC.Read.Read XBarType.AdvP
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.AdvP
                  XBarType.$fReadAdvP_$creadsPrec
                  XBarType.$fReadAdvP_$creadList
                  XBarType.$fReadAdvP_$creadPrec
                  XBarType.$fReadAdvP_$creadListPrec -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadAdvP1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([XBarType.AdvP] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, True)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: [XBarType.AdvP] -> Text.ParserCombinators.ReadP.P b ->
                 XBarType.$wa5 @ b w1) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadAdvP2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP XBarType.AdvP
  {- Arity: 1 -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadAdvP_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [XBarType.AdvP]
  {- Arity: 1 -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadAdvP_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [XBarType.AdvP]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadAdvP1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[XBarType.AdvP]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[XBarType.AdvP]>_R))) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadAdvP_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec XBarType.AdvP
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadAdvP2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <XBarType.AdvP>_R)) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadAdvP_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS XBarType.AdvP
  {- Arity: 1, Strictness: <L,U> -}
b210e39e480af28620788baa98bef96d
  $fReadAdv_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [XBarType.Adv]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadAdv1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[XBarType.Adv]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[XBarType.Adv]>_R))) -}
b210e39e480af28620788baa98bef96d
  $fReadAdv_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec XBarType.Adv
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadAdv2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <XBarType.Adv>_R)) -}
b210e39e480af28620788baa98bef96d
  $fReadAdv_$s$dmreadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS XBarType.Adv
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ XBarType.Adv
                   XBarType.$fReadAdv_$creadPrec
                   eta) -}
b210e39e480af28620788baa98bef96d
  $fReadAdv_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [XBarType.Adv]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [XBarType.Adv]
                   ((XBarType.$fReadAdv_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[XBarType.Adv]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <[XBarType.Adv]>_R)
                      @ [XBarType.Adv]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [XBarType.Adv]))) -}
fe8691e5b20e4567836977d90780b734
  $fReadComp :: GHC.Read.Read XBarType.Comp
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.Comp
                  XBarType.$fReadComp_$s$dmreadsPrec
                  XBarType.$fReadComp_$sreadListDefault
                  XBarType.$fReadComp_$creadPrec
                  XBarType.$fReadComp_$creadListPrec -}
fe8691e5b20e4567836977d90780b734
  $fReadComp1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([XBarType.Comp] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [XBarType.Comp] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ XBarType.Comp
                   XBarType.$fReadComp2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <XBarType.Comp>_R))
                   @ b
                   eta1) -}
fe8691e5b20e4567836977d90780b734
  $fReadComp2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP XBarType.Comp
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ XBarType.Comp
                   XBarType.$fReadComp3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <XBarType.Comp>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <XBarType.Comp>_R)))) -}
fe8691e5b20e4567836977d90780b734
  $fReadComp3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (XBarType.Comp -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: XBarType.Comp -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 -> XBarType.$wa6 ww1 @ b w1 }) -}
477fd335f1d7f484c3bea740af617d0e
  $fReadComp4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Comp"#) -}
4f001468d2fe904a7b1340d4f2618392
  $fReadCompBar :: GHC.Read.Read XBarType.CompBar
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.CompBar
                  XBarType.$fReadCompBar_$creadsPrec
                  XBarType.$fReadCompBar_$sreadListDefault
                  XBarType.$fReadCompBar_$creadPrec
                  XBarType.$fReadCompBar_$creadListPrec -}
4f001468d2fe904a7b1340d4f2618392
  $fReadCompBar1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([XBarType.CompBar] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [XBarType.CompBar] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ XBarType.CompBar
                   XBarType.$fReadCompBar2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <XBarType.CompBar>_R))
                   @ b
                   eta1) -}
4f001468d2fe904a7b1340d4f2618392
  $fReadCompBar2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP XBarType.CompBar
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ XBarType.CompBar
                   XBarType.$fReadCompBar3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <XBarType.CompBar>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <XBarType.CompBar>_R)))) -}
4f001468d2fe904a7b1340d4f2618392
  $fReadCompBar3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (XBarType.CompBar -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: XBarType.CompBar -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 -> XBarType.$wa7 ww1 @ b w1 }) -}
341c00dae1cdeb4e11088ce56265f1e8
  $fReadCompBar4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "CompBar"#) -}
4f001468d2fe904a7b1340d4f2618392
  $fReadCompBar5 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (XBarType.TenseP -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: XBarType.TenseP -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 -> XBarType.$wa8 ww1 @ b w1 }) -}
4f001468d2fe904a7b1340d4f2618392
  $fReadCompBar_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [XBarType.CompBar]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadCompBar1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[XBarType.CompBar]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[XBarType.CompBar]>_R))) -}
4f001468d2fe904a7b1340d4f2618392
  $fReadCompBar_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec XBarType.CompBar
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadCompBar2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <XBarType.CompBar>_R)) -}
4f001468d2fe904a7b1340d4f2618392
  $fReadCompBar_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS XBarType.CompBar
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadP.run
                   @ XBarType.CompBar
                   ((GHC.Read.$fReadDouble10
                       @ XBarType.CompBar
                       XBarType.$fReadCompBar3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                           <XBarType.CompBar>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                      <XBarType.CompBar>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <XBarType.CompBar>_R)
                      @ XBarType.CompBar
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ XBarType.CompBar))) -}
4f001468d2fe904a7b1340d4f2618392
  $fReadCompBar_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [XBarType.CompBar]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [XBarType.CompBar]
                   ((XBarType.$fReadCompBar_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[XBarType.CompBar]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <[XBarType.CompBar]>_R)
                      @ [XBarType.CompBar]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [XBarType.CompBar]))) -}
4f001468d2fe904a7b1340d4f2618392
  $fReadCompP :: GHC.Read.Read XBarType.CompP
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.CompP
                  XBarType.$fReadCompP_$creadsPrec
                  XBarType.$fReadCompP_$sreadListDefault
                  XBarType.$fReadCompP_$creadPrec
                  XBarType.$fReadCompP_$creadListPrec -}
4f001468d2fe904a7b1340d4f2618392
  $fReadCompP1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([XBarType.CompP] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [XBarType.CompP] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ XBarType.CompP
                   XBarType.$fReadCompP2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <XBarType.CompP>_R))
                   @ b
                   eta1) -}
4f001468d2fe904a7b1340d4f2618392
  $fReadCompP2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP XBarType.CompP
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ XBarType.CompP
                   XBarType.$fReadCompP3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <XBarType.CompP>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <XBarType.CompP>_R)))) -}
4f001468d2fe904a7b1340d4f2618392
  $fReadCompP3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (XBarType.CompP -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: XBarType.CompP -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 -> XBarType.$wa9 ww1 @ b w1 }) -}
45e7bca70d66f98d329cecb73ffe2e2c
  $fReadCompP4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "CompP"#) -}
4f001468d2fe904a7b1340d4f2618392
  $fReadCompP_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [XBarType.CompP]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadCompP1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[XBarType.CompP]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[XBarType.CompP]>_R))) -}
4f001468d2fe904a7b1340d4f2618392
  $fReadCompP_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec XBarType.CompP
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadCompP2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <XBarType.CompP>_R)) -}
4f001468d2fe904a7b1340d4f2618392
  $fReadCompP_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS XBarType.CompP
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadP.run
                   @ XBarType.CompP
                   ((GHC.Read.$fReadDouble10
                       @ XBarType.CompP
                       XBarType.$fReadCompP3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                           <XBarType.CompP>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                      <XBarType.CompP>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <XBarType.CompP>_R)
                      @ XBarType.CompP
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ XBarType.CompP))) -}
4f001468d2fe904a7b1340d4f2618392
  $fReadCompP_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [XBarType.CompP]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [XBarType.CompP]
                   ((XBarType.$fReadCompP_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[XBarType.CompP]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <[XBarType.CompP]>_R)
                      @ [XBarType.CompP]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [XBarType.CompP]))) -}
fe8691e5b20e4567836977d90780b734
  $fReadComp_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [XBarType.Comp]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadComp1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[XBarType.Comp]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[XBarType.Comp]>_R))) -}
fe8691e5b20e4567836977d90780b734
  $fReadComp_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec XBarType.Comp
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadComp2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <XBarType.Comp>_R)) -}
fe8691e5b20e4567836977d90780b734
  $fReadComp_$s$dmreadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS XBarType.Comp
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ XBarType.Comp
                   XBarType.$fReadComp_$creadPrec
                   eta) -}
fe8691e5b20e4567836977d90780b734
  $fReadComp_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [XBarType.Comp]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [XBarType.Comp]
                   ((XBarType.$fReadComp_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[XBarType.Comp]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <[XBarType.Comp]>_R)
                      @ [XBarType.Comp]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [XBarType.Comp]))) -}
fba6555ac73fc085c25046551f89172e
  $fReadDet :: GHC.Read.Read XBarType.Det
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.Det
                  XBarType.$fReadDet_$s$dmreadsPrec
                  XBarType.$fReadDet_$sreadListDefault
                  XBarType.$fReadDet_$creadPrec
                  XBarType.$fReadDet_$creadListPrec -}
fba6555ac73fc085c25046551f89172e
  $fReadDet1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([XBarType.Det] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [XBarType.Det] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ XBarType.Det
                   XBarType.$fReadDet2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <XBarType.Det>_R))
                   @ b
                   eta1) -}
fba6555ac73fc085c25046551f89172e
  $fReadDet2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP XBarType.Det
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ XBarType.Det
                   XBarType.$fReadDet3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <XBarType.Det>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <XBarType.Det>_R)))) -}
fba6555ac73fc085c25046551f89172e
  $fReadDet3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (XBarType.Det -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: XBarType.Det -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 -> XBarType.$wa10 ww1 @ b w1 }) -}
34aff05d244a9a846a079eb0f5cb37e2
  $fReadDet4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Det"#) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadDetBar :: GHC.Read.Read XBarType.DetBar
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.DetBar
                  XBarType.$fReadDetBar_$creadsPrec
                  XBarType.$fReadDetBar_$sreadListDefault
                  XBarType.$fReadDetBar_$creadPrec
                  XBarType.$fReadDetBar_$creadListPrec -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadDetBar1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([XBarType.DetBar] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [XBarType.DetBar] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ XBarType.DetBar
                   XBarType.$fReadDetBar2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <XBarType.DetBar>_R))
                   @ b
                   eta1) -}
bd67b5a3ba6d5f92592e47840a8e1d06
  $fReadDetBar10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NoOpt"#) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadDetBar2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP XBarType.DetBar
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ XBarType.DetBar
                   XBarType.$fReadDetBar3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <XBarType.DetBar>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <XBarType.DetBar>_R)))) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadDetBar3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (XBarType.DetBar -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: XBarType.DetBar -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 -> XBarType.$wa11 ww1 @ b w1 }) -}
9d2a4a700a306029cf6acbff473dc700
  $fReadDetBar4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DetBar"#) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadDetBar5 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (XBarType.NounP -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: XBarType.NounP -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 -> XBarType.$wa12 ww1 @ b w1 }) -}
a348b2b4fac011e9f37b5b5c292a20cc
  $fReadDetBar6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NounP"#) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadDetBar7 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (XBarType.NounBar -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: XBarType.NounBar -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 -> XBarType.$wa13 ww1 @ b w1 }) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadDetBar8 ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP (XBarType.Optional a)
  {- Arity: 2, Strictness: <L,1*U(A,A,1*U,A)><L,U>,
     Unfolding: (\ @ a11
                   $dRead :: GHC.Read.Read a11
                   eta :: Text.ParserCombinators.ReadPrec.Prec ->
                 GHC.Read.$fReadDouble10
                   @ (XBarType.Optional a11)
                   (let {
                      ds :: Text.ParserCombinators.ReadPrec.ReadPrec a11
                      = GHC.Read.readPrec @ a11 $dRead
                    } in
                    (\ n :: Text.ParserCombinators.ReadPrec.Prec
                       @ b
                       eta1 :: XBarType.Optional a11
                               -> Text.ParserCombinators.ReadP.P b ->
                     let {
                       lvl78 :: Text.ParserCombinators.ReadP.P b
                       = let {
                           lvl79 :: Text.ParserCombinators.ReadP.P b
                           = eta1 (XBarType.NoOpt @ a11)
                         } in
                         Text.Read.Lex.expect2
                           @ b
                           (\ a98 :: Text.Read.Lex.Lexeme ->
                            case a98 of wild {
                              DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                              Text.Read.Lex.Ident a12
                              -> case GHC.Base.eqString a12 XBarType.$fReadDetBar10 of wild1 {
                                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                   GHC.Types.True -> lvl79 } })
                     } in
                     let {
                       k :: () -> Text.ParserCombinators.ReadP.P b
                         {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                            Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl78) -}
                       = \ w2 :: () -> lvl78
                     } in
                     Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                       @ b
                       (Text.ParserCombinators.ReadP.Look
                          @ b
                          (\ a98 :: GHC.Base.String ->
                           (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                             `cast`
                           (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                             @ b
                             k))
                       (case n of wild { GHC.Types.I# x ->
                        case GHC.Prim.tagToEnum#
                               @ GHC.Types.Bool
                               (GHC.Prim.<=# x 10) of wild2 {
                          GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                          GHC.Types.True
                          -> let {
                               lvl53 :: Text.ParserCombinators.ReadP.P b
                               = let {
                                   lvl79 :: Text.ParserCombinators.ReadP.P b
                                   = (ds
                                        `cast`
                                      (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0] <a11>_R)
                                        XBarType.$fReadAdjP5)
                                       `cast`
                                     (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <a11>_R)
                                       @ b
                                       (\ a12 :: a11 -> eta1 (XBarType.YesOpt @ a11 a12))
                                 } in
                                 Text.Read.Lex.expect2
                                   @ b
                                   (\ a98 :: Text.Read.Lex.Lexeme ->
                                    case a98 of wild1 {
                                      DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                      Text.Read.Lex.Ident a12
                                      -> case GHC.Base.eqString
                                                a12
                                                XBarType.$fReadDetBar9 of wild3 {
                                           GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                           GHC.Types.True -> lvl79 } })
                             } in
                             let {
                               k1 :: () -> Text.ParserCombinators.ReadP.P b
                                 {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                    Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl53) -}
                               = \ w2 :: () -> lvl53
                             } in
                             Text.ParserCombinators.ReadP.Look
                               @ b
                               (\ a98 :: GHC.Base.String ->
                                (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                                  `cast`
                                (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                                  @ b
                                  k1) } }))
                      `cast`
                    (Trans
                         (<Text.ParserCombinators.ReadPrec.Prec>_R
                          ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                        <XBarType.Optional a11>_R))
                         (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                   <XBarType.Optional a11>_R))))
                   eta) -}
ada4047f413654c50343ec28cb01f90d
  $fReadDetBar9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "YesOpt"#) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadDetBar_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [XBarType.DetBar]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadDetBar1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[XBarType.DetBar]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[XBarType.DetBar]>_R))) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadDetBar_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec XBarType.DetBar
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadDetBar2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <XBarType.DetBar>_R)) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadDetBar_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS XBarType.DetBar
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadP.run
                   @ XBarType.DetBar
                   ((GHC.Read.$fReadDouble10
                       @ XBarType.DetBar
                       XBarType.$fReadDetBar3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                           <XBarType.DetBar>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                      <XBarType.DetBar>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <XBarType.DetBar>_R)
                      @ XBarType.DetBar
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ XBarType.DetBar))) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadDetBar_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [XBarType.DetBar]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [XBarType.DetBar]
                   ((XBarType.$fReadDetBar_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[XBarType.DetBar]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <[XBarType.DetBar]>_R)
                      @ [XBarType.DetBar]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [XBarType.DetBar]))) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadDetP :: GHC.Read.Read XBarType.DetP
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.DetP
                  XBarType.$fReadDetP_$creadsPrec
                  XBarType.$fReadDetP_$sreadListDefault
                  XBarType.$fReadDetP_$creadPrec
                  XBarType.$fReadDetP_$creadListPrec -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadDetP1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([XBarType.DetP] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [XBarType.DetP] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ XBarType.DetP
                   XBarType.$fReadDetP2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <XBarType.DetP>_R))
                   @ b
                   eta1) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadDetP2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP XBarType.DetP
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ XBarType.DetP
                   XBarType.$fReadDetP3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <XBarType.DetP>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <XBarType.DetP>_R)))) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadDetP3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (XBarType.DetP -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: XBarType.DetP -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 -> XBarType.$wa14 ww1 @ b w1 }) -}
962b0a6f04ef1517815f6478a2d04f9d
  $fReadDetP4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DetP"#) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadDetP_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [XBarType.DetP]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadDetP1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[XBarType.DetP]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[XBarType.DetP]>_R))) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadDetP_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec XBarType.DetP
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadDetP2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <XBarType.DetP>_R)) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadDetP_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS XBarType.DetP
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadP.run
                   @ XBarType.DetP
                   ((GHC.Read.$fReadDouble10
                       @ XBarType.DetP
                       XBarType.$fReadDetP3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                           <XBarType.DetP>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                      <XBarType.DetP>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <XBarType.DetP>_R)
                      @ XBarType.DetP
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ XBarType.DetP))) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadDetP_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [XBarType.DetP]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [XBarType.DetP]
                   ((XBarType.$fReadDetP_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[XBarType.DetP]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <[XBarType.DetP]>_R)
                      @ [XBarType.DetP]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [XBarType.DetP]))) -}
fba6555ac73fc085c25046551f89172e
  $fReadDet_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [XBarType.Det]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadDet1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[XBarType.Det]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[XBarType.Det]>_R))) -}
fba6555ac73fc085c25046551f89172e
  $fReadDet_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec XBarType.Det
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadDet2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <XBarType.Det>_R)) -}
fba6555ac73fc085c25046551f89172e
  $fReadDet_$s$dmreadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS XBarType.Det
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ XBarType.Det
                   XBarType.$fReadDet_$creadPrec
                   eta) -}
fba6555ac73fc085c25046551f89172e
  $fReadDet_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [XBarType.Det]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [XBarType.Det]
                   ((XBarType.$fReadDet_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[XBarType.Det]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <[XBarType.Det]>_R)
                      @ [XBarType.Det]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [XBarType.Det]))) -}
62d6653cd93b793cf6a9d8cc4709bbae
  $fReadNoun :: GHC.Read.Read XBarType.Noun
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.Noun
                  XBarType.$fReadNoun_$s$dmreadsPrec
                  XBarType.$fReadNoun_$sreadListDefault
                  XBarType.$fReadNoun_$creadPrec
                  XBarType.$fReadNoun_$creadListPrec -}
62d6653cd93b793cf6a9d8cc4709bbae
  $fReadNoun1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([XBarType.Noun] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [XBarType.Noun] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ XBarType.Noun
                   XBarType.$fReadNoun2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <XBarType.Noun>_R))
                   @ b
                   eta1) -}
62d6653cd93b793cf6a9d8cc4709bbae
  $fReadNoun2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP XBarType.Noun
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ XBarType.Noun
                   XBarType.$fReadNoun3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <XBarType.Noun>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <XBarType.Noun>_R)))) -}
62d6653cd93b793cf6a9d8cc4709bbae
  $fReadNoun3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (XBarType.Noun -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: XBarType.Noun -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 -> XBarType.$wa15 ww1 @ b w1 }) -}
3d0b35cd883ad966eda7a87c5a981962
  $fReadNoun4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Noun"#) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadNounBar :: GHC.Read.Read XBarType.NounBar
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.NounBar
                  XBarType.$fReadNounBar_$creadsPrec
                  XBarType.$fReadNounBar_$sreadListDefault
                  XBarType.$fReadNounBar_$creadPrec
                  XBarType.$fReadNounBar_$creadListPrec -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadNounBar1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([XBarType.NounBar] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [XBarType.NounBar] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ XBarType.NounBar
                   XBarType.$fReadNounBar2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <XBarType.NounBar>_R))
                   @ b
                   eta1) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadNounBar2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP XBarType.NounBar
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ XBarType.NounBar
                   XBarType.$fReadDetBar7
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <XBarType.NounBar>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <XBarType.NounBar>_R)))) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadNounBar_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [XBarType.NounBar]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadNounBar1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[XBarType.NounBar]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[XBarType.NounBar]>_R))) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadNounBar_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec XBarType.NounBar
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadNounBar2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <XBarType.NounBar>_R)) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadNounBar_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS XBarType.NounBar
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadP.run
                   @ XBarType.NounBar
                   ((GHC.Read.$fReadDouble10
                       @ XBarType.NounBar
                       XBarType.$fReadDetBar7
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                           <XBarType.NounBar>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                      <XBarType.NounBar>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <XBarType.NounBar>_R)
                      @ XBarType.NounBar
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ XBarType.NounBar))) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadNounBar_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [XBarType.NounBar]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [XBarType.NounBar]
                   ((XBarType.$fReadNounBar_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[XBarType.NounBar]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <[XBarType.NounBar]>_R)
                      @ [XBarType.NounBar]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [XBarType.NounBar]))) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadNounP :: GHC.Read.Read XBarType.NounP
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.NounP
                  XBarType.$fReadNounP_$creadsPrec
                  XBarType.$fReadNounP_$sreadListDefault
                  XBarType.$fReadNounP_$creadPrec
                  XBarType.$fReadNounP_$creadListPrec -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadNounP1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([XBarType.NounP] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [XBarType.NounP] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ XBarType.NounP
                   XBarType.$fReadNounP2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <XBarType.NounP>_R))
                   @ b
                   eta1) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadNounP2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP XBarType.NounP
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ XBarType.NounP
                   XBarType.$fReadDetBar5
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <XBarType.NounP>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <XBarType.NounP>_R)))) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadNounP_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [XBarType.NounP]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadNounP1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[XBarType.NounP]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[XBarType.NounP]>_R))) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadNounP_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec XBarType.NounP
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadNounP2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <XBarType.NounP>_R)) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadNounP_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS XBarType.NounP
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadP.run
                   @ XBarType.NounP
                   ((GHC.Read.$fReadDouble10
                       @ XBarType.NounP
                       XBarType.$fReadDetBar5
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                           <XBarType.NounP>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                      <XBarType.NounP>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <XBarType.NounP>_R)
                      @ XBarType.NounP
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ XBarType.NounP))) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadNounP_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [XBarType.NounP]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [XBarType.NounP]
                   ((XBarType.$fReadNounP_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[XBarType.NounP]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <[XBarType.NounP]>_R)
                      @ [XBarType.NounP]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [XBarType.NounP]))) -}
62d6653cd93b793cf6a9d8cc4709bbae
  $fReadNoun_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [XBarType.Noun]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadNoun1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[XBarType.Noun]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[XBarType.Noun]>_R))) -}
62d6653cd93b793cf6a9d8cc4709bbae
  $fReadNoun_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec XBarType.Noun
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadNoun2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <XBarType.Noun>_R)) -}
62d6653cd93b793cf6a9d8cc4709bbae
  $fReadNoun_$s$dmreadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS XBarType.Noun
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ XBarType.Noun
                   XBarType.$fReadNoun_$creadPrec
                   eta) -}
62d6653cd93b793cf6a9d8cc4709bbae
  $fReadNoun_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [XBarType.Noun]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [XBarType.Noun]
                   ((XBarType.$fReadNoun_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[XBarType.Noun]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <[XBarType.Noun]>_R)
                      @ [XBarType.Noun]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [XBarType.Noun]))) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadOptional ::
    GHC.Read.Read a => GHC.Read.Read (XBarType.Optional a)
  DFunId[0]
  {- Arity: 1, Strictness: <L,U(A,A,U,A)>m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a11 $dRead :: GHC.Read.Read a11.
                  @ (XBarType.Optional a11)
                  (XBarType.$fReadOptional_$creadsPrec @ a11 $dRead)
                  (XBarType.$fReadOptional_$creadList @ a11 $dRead)
                  (XBarType.$fReadOptional_$creadPrec @ a11 $dRead)
                  (XBarType.$fReadOptional_$creadListPrec @ a11 $dRead) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadOptional1 ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([XBarType.Optional a] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 3, Strictness: <L,U(A,A,U,A)><L,A><L,C(U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a11
                   $dRead :: GHC.Read.Read a11
                   eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [XBarType.Optional a11]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ (XBarType.Optional a11)
                   (XBarType.$fReadDetBar8 @ a11 $dRead)
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <XBarType.Optional a11>_R))
                   @ b
                   eta1) -}
063c05ac3c548772ba630b426c78111e
  $fReadOptional11 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (XBarType.PrepP -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: XBarType.PrepP -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 -> XBarType.$wa17 ww1 @ b w1 }) -}
634fd425ac3965150b3f101411465b65
  $fReadOptional6 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (XBarType.AdvP -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: XBarType.AdvP -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 -> XBarType.$wa16 ww1 @ b w1 }) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadOptional_$creadList ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadP.ReadS [XBarType.Optional a]
  {- Arity: 1, Strictness: <L,U(A,A,U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a11 $dRead :: GHC.Read.Read a11 ->
                 Text.ParserCombinators.ReadP.run
                   @ [XBarType.Optional a11]
                   (GHC.Read.$wa
                      @ (XBarType.Optional a11)
                      (XBarType.$fReadDetBar8 @ a11 $dRead)
                        `cast`
                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                <XBarType.Optional a11>_R))
                      @ [XBarType.Optional a11]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [XBarType.Optional a11]))) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadOptional_$creadListPrec ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadPrec.ReadPrec [XBarType.Optional a]
  {- Arity: 3, Strictness: <L,U(A,A,U,A)><L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadOptional1
                  `cast`
                (forall a11.
                 <GHC.Read.Read a11>_R
                 ->_R Trans
                          (<Text.ParserCombinators.ReadPrec.Prec>_R
                           ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                         <[XBarType.Optional a11]>_R))
                          (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                    <[XBarType.Optional a11]>_R))) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadOptional_$creadPrec ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadPrec.ReadPrec (XBarType.Optional a)
  {- Arity: 2, Strictness: <L,1*U(A,A,1*U,A)><L,U>,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadDetBar8
                  `cast`
                (forall a11.
                 <GHC.Read.Read a11>_R
                 ->_R Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <XBarType.Optional a11>_R)) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadOptional_$creadsPrec ::
    GHC.Read.Read a =>
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS (XBarType.Optional a)
  {- Arity: 2, Strictness: <L,1*U(A,A,1*U,A)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a11 $dRead :: GHC.Read.Read a11 eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadP.run
                   @ (XBarType.Optional a11)
                   ((XBarType.$fReadDetBar8 @ a11 $dRead eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <XBarType.Optional a11>_R)
                      @ (XBarType.Optional a11)
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ (XBarType.Optional a11)))) -}
9d4833a771312a804ba6134bfb562299
  $fReadPrep :: GHC.Read.Read XBarType.Prep
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.Prep
                  XBarType.$fReadPrep_$s$dmreadsPrec
                  XBarType.$fReadPrep_$sreadListDefault
                  XBarType.$fReadPrep_$creadPrec
                  XBarType.$fReadPrep_$creadListPrec -}
9d4833a771312a804ba6134bfb562299
  $fReadPrep1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([XBarType.Prep] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [XBarType.Prep] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ XBarType.Prep
                   XBarType.$fReadPrep2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <XBarType.Prep>_R))
                   @ b
                   eta1) -}
9d4833a771312a804ba6134bfb562299
  $fReadPrep2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP XBarType.Prep
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ XBarType.Prep
                   XBarType.$fReadPrep3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <XBarType.Prep>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <XBarType.Prep>_R)))) -}
9d4833a771312a804ba6134bfb562299
  $fReadPrep3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (XBarType.Prep -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: XBarType.Prep -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 -> XBarType.$wa18 ww1 @ b w1 }) -}
f6f764a814277d733e230b9ca7da7896
  $fReadPrep4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Prep"#) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadPrepBar :: GHC.Read.Read XBarType.PrepBar
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.PrepBar
                  XBarType.$fReadPrepBar_$creadsPrec
                  XBarType.$fReadPrepBar_$sreadListDefault
                  XBarType.$fReadPrepBar_$creadPrec
                  XBarType.$fReadPrepBar_$creadListPrec -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadPrepBar1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([XBarType.PrepBar] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [XBarType.PrepBar] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ XBarType.PrepBar
                   XBarType.$fReadPrepBar2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <XBarType.PrepBar>_R))
                   @ b
                   eta1) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadPrepBar2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP XBarType.PrepBar
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ XBarType.PrepBar
                   XBarType.$fReadPrepBar3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <XBarType.PrepBar>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <XBarType.PrepBar>_R)))) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadPrepBar3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (XBarType.PrepBar -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: XBarType.PrepBar -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 -> XBarType.$wa19 ww1 @ b w1 }) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadPrepBar_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [XBarType.PrepBar]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadPrepBar1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[XBarType.PrepBar]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[XBarType.PrepBar]>_R))) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadPrepBar_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec XBarType.PrepBar
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadPrepBar2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <XBarType.PrepBar>_R)) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadPrepBar_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS XBarType.PrepBar
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadP.run
                   @ XBarType.PrepBar
                   ((GHC.Read.$fReadDouble10
                       @ XBarType.PrepBar
                       XBarType.$fReadPrepBar3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                           <XBarType.PrepBar>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                      <XBarType.PrepBar>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <XBarType.PrepBar>_R)
                      @ XBarType.PrepBar
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ XBarType.PrepBar))) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadPrepBar_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [XBarType.PrepBar]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [XBarType.PrepBar]
                   ((XBarType.$fReadPrepBar_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[XBarType.PrepBar]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <[XBarType.PrepBar]>_R)
                      @ [XBarType.PrepBar]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [XBarType.PrepBar]))) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadPrepP :: GHC.Read.Read XBarType.PrepP
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.PrepP
                  XBarType.$fReadPrepP_$creadsPrec
                  XBarType.$fReadPrepP_$creadList
                  XBarType.$fReadPrepP_$creadPrec
                  XBarType.$fReadPrepP_$creadListPrec -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadPrepP1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([XBarType.PrepP] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, True)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: [XBarType.PrepP] -> Text.ParserCombinators.ReadP.P b ->
                 XBarType.$wa20 @ b w1) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadPrepP2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP XBarType.PrepP
  {- Arity: 1 -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadPrepP_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [XBarType.PrepP]
  {- Arity: 1 -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadPrepP_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [XBarType.PrepP]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadPrepP1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[XBarType.PrepP]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[XBarType.PrepP]>_R))) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadPrepP_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec XBarType.PrepP
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadPrepP2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <XBarType.PrepP>_R)) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fReadPrepP_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS XBarType.PrepP
  {- Arity: 1, Strictness: <L,U> -}
9d4833a771312a804ba6134bfb562299
  $fReadPrep_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [XBarType.Prep]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadPrep1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[XBarType.Prep]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[XBarType.Prep]>_R))) -}
9d4833a771312a804ba6134bfb562299
  $fReadPrep_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec XBarType.Prep
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadPrep2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <XBarType.Prep>_R)) -}
9d4833a771312a804ba6134bfb562299
  $fReadPrep_$s$dmreadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS XBarType.Prep
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ XBarType.Prep
                   XBarType.$fReadPrep_$creadPrec
                   eta) -}
9d4833a771312a804ba6134bfb562299
  $fReadPrep_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [XBarType.Prep]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [XBarType.Prep]
                   ((XBarType.$fReadPrep_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[XBarType.Prep]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <[XBarType.Prep]>_R)
                      @ [XBarType.Prep]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [XBarType.Prep]))) -}
7b127aff7a37e546247befcacb7c8e9e
  $fReadTense :: GHC.Read.Read XBarType.Tense
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.Tense
                  XBarType.$fReadTense_$s$dmreadsPrec
                  XBarType.$fReadTense_$sreadListDefault
                  XBarType.$fReadTense_$creadPrec
                  XBarType.$fReadTense_$creadListPrec -}
7b127aff7a37e546247befcacb7c8e9e
  $fReadTense1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([XBarType.Tense] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [XBarType.Tense] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ XBarType.Tense
                   XBarType.$fReadTense2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <XBarType.Tense>_R))
                   @ b
                   eta1) -}
7b127aff7a37e546247befcacb7c8e9e
  $fReadTense2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP XBarType.Tense
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ XBarType.Tense
                   XBarType.$fReadTense3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <XBarType.Tense>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <XBarType.Tense>_R)))) -}
7b127aff7a37e546247befcacb7c8e9e
  $fReadTense3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (XBarType.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: XBarType.Tense -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 -> XBarType.$wa21 ww1 @ b w1 }) -}
474a1a47f1bb88f7e8eafa5a936e30de
  $fReadTense4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Tense"#) -}
4f001468d2fe904a7b1340d4f2618392
  $fReadTenseBar :: GHC.Read.Read XBarType.TenseBar
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.TenseBar
                  XBarType.$fReadTenseBar_$creadsPrec
                  XBarType.$fReadTenseBar_$sreadListDefault
                  XBarType.$fReadTenseBar_$creadPrec
                  XBarType.$fReadTenseBar_$creadListPrec -}
4f001468d2fe904a7b1340d4f2618392
  $fReadTenseBar1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([XBarType.TenseBar] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [XBarType.TenseBar] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ XBarType.TenseBar
                   XBarType.$fReadTenseBar2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <XBarType.TenseBar>_R))
                   @ b
                   eta1) -}
4f001468d2fe904a7b1340d4f2618392
  $fReadTenseBar2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP XBarType.TenseBar
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ XBarType.TenseBar
                   XBarType.$fReadTenseBar3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <XBarType.TenseBar>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <XBarType.TenseBar>_R)))) -}
4f001468d2fe904a7b1340d4f2618392
  $fReadTenseBar3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (XBarType.TenseBar -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: XBarType.TenseBar -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 -> XBarType.$wa22 ww1 @ b w1 }) -}
60848eeffa0ba1ab4b226d36c3388686
  $fReadTenseBar4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TenseBar"#) -}
4f001468d2fe904a7b1340d4f2618392
  $fReadTenseBar5 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (XBarType.VerbP -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: XBarType.VerbP -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 -> XBarType.$wa23 ww1 @ b w1 }) -}
d7aa83c1586be9861348ab377a658b5b
  $fReadTenseBar6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "VerbP"#) -}
4f001468d2fe904a7b1340d4f2618392
  $fReadTenseBar7 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (XBarType.VerbBar -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: XBarType.VerbBar -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 -> XBarType.$wa24 ww1 @ b w1 }) -}
4f001468d2fe904a7b1340d4f2618392
  $fReadTenseBar_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [XBarType.TenseBar]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadTenseBar1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[XBarType.TenseBar]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[XBarType.TenseBar]>_R))) -}
4f001468d2fe904a7b1340d4f2618392
  $fReadTenseBar_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec XBarType.TenseBar
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadTenseBar2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <XBarType.TenseBar>_R)) -}
4f001468d2fe904a7b1340d4f2618392
  $fReadTenseBar_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS XBarType.TenseBar
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadP.run
                   @ XBarType.TenseBar
                   ((GHC.Read.$fReadDouble10
                       @ XBarType.TenseBar
                       XBarType.$fReadTenseBar3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                           <XBarType.TenseBar>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                      <XBarType.TenseBar>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <XBarType.TenseBar>_R)
                      @ XBarType.TenseBar
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ XBarType.TenseBar))) -}
4f001468d2fe904a7b1340d4f2618392
  $fReadTenseBar_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [XBarType.TenseBar]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [XBarType.TenseBar]
                   ((XBarType.$fReadTenseBar_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[XBarType.TenseBar]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[XBarType.TenseBar]>_R)
                      @ [XBarType.TenseBar]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [XBarType.TenseBar]))) -}
4f001468d2fe904a7b1340d4f2618392
  $fReadTenseP :: GHC.Read.Read XBarType.TenseP
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.TenseP
                  XBarType.$fReadTenseP_$creadsPrec
                  XBarType.$fReadTenseP_$sreadListDefault
                  XBarType.$fReadTenseP_$creadPrec
                  XBarType.$fReadTenseP_$creadListPrec -}
4f001468d2fe904a7b1340d4f2618392
  $fReadTenseP1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([XBarType.TenseP] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [XBarType.TenseP] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ XBarType.TenseP
                   XBarType.$fReadTenseP2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <XBarType.TenseP>_R))
                   @ b
                   eta1) -}
4f001468d2fe904a7b1340d4f2618392
  $fReadTenseP2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP XBarType.TenseP
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ XBarType.TenseP
                   XBarType.$fReadCompBar5
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <XBarType.TenseP>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <XBarType.TenseP>_R)))) -}
4f001468d2fe904a7b1340d4f2618392
  $fReadTenseP_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [XBarType.TenseP]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadTenseP1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[XBarType.TenseP]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[XBarType.TenseP]>_R))) -}
4f001468d2fe904a7b1340d4f2618392
  $fReadTenseP_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec XBarType.TenseP
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadTenseP2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <XBarType.TenseP>_R)) -}
4f001468d2fe904a7b1340d4f2618392
  $fReadTenseP_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS XBarType.TenseP
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadP.run
                   @ XBarType.TenseP
                   ((GHC.Read.$fReadDouble10
                       @ XBarType.TenseP
                       XBarType.$fReadCompBar5
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                           <XBarType.TenseP>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                      <XBarType.TenseP>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <XBarType.TenseP>_R)
                      @ XBarType.TenseP
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ XBarType.TenseP))) -}
4f001468d2fe904a7b1340d4f2618392
  $fReadTenseP_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [XBarType.TenseP]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [XBarType.TenseP]
                   ((XBarType.$fReadTenseP_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[XBarType.TenseP]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <[XBarType.TenseP]>_R)
                      @ [XBarType.TenseP]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [XBarType.TenseP]))) -}
7b127aff7a37e546247befcacb7c8e9e
  $fReadTense_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [XBarType.Tense]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadTense1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[XBarType.Tense]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[XBarType.Tense]>_R))) -}
7b127aff7a37e546247befcacb7c8e9e
  $fReadTense_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec XBarType.Tense
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadTense2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <XBarType.Tense>_R)) -}
7b127aff7a37e546247befcacb7c8e9e
  $fReadTense_$s$dmreadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS XBarType.Tense
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ XBarType.Tense
                   XBarType.$fReadTense_$creadPrec
                   eta) -}
7b127aff7a37e546247befcacb7c8e9e
  $fReadTense_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [XBarType.Tense]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [XBarType.Tense]
                   ((XBarType.$fReadTense_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[XBarType.Tense]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <[XBarType.Tense]>_R)
                      @ [XBarType.Tense]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [XBarType.Tense]))) -}
5b5bb35beb8c49aeda693fec96ba7d0c
  $fReadVerb :: GHC.Read.Read XBarType.Verb
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.Verb
                  XBarType.$fReadVerb_$s$dmreadsPrec
                  XBarType.$fReadVerb_$sreadListDefault
                  XBarType.$fReadVerb_$creadPrec
                  XBarType.$fReadVerb_$creadListPrec -}
5b5bb35beb8c49aeda693fec96ba7d0c
  $fReadVerb1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([XBarType.Verb] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [XBarType.Verb] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ XBarType.Verb
                   XBarType.$fReadVerb2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <XBarType.Verb>_R))
                   @ b
                   eta1) -}
5b5bb35beb8c49aeda693fec96ba7d0c
  $fReadVerb2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP XBarType.Verb
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ XBarType.Verb
                   XBarType.$fReadVerb3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <XBarType.Verb>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <XBarType.Verb>_R)))) -}
5b5bb35beb8c49aeda693fec96ba7d0c
  $fReadVerb3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (XBarType.Verb -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: XBarType.Verb -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 -> XBarType.$wa25 ww1 @ b w1 }) -}
2be05721ac7eea649114ccef250c79f5
  $fReadVerb4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Verb"#) -}
4f001468d2fe904a7b1340d4f2618392
  $fReadVerbBar :: GHC.Read.Read XBarType.VerbBar
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.VerbBar
                  XBarType.$fReadVerbBar_$creadsPrec
                  XBarType.$fReadVerbBar_$sreadListDefault
                  XBarType.$fReadVerbBar_$creadPrec
                  XBarType.$fReadVerbBar_$creadListPrec -}
4f001468d2fe904a7b1340d4f2618392
  $fReadVerbBar1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([XBarType.VerbBar] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [XBarType.VerbBar] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ XBarType.VerbBar
                   XBarType.$fReadVerbBar2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <XBarType.VerbBar>_R))
                   @ b
                   eta1) -}
4f001468d2fe904a7b1340d4f2618392
  $fReadVerbBar2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP XBarType.VerbBar
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ XBarType.VerbBar
                   XBarType.$fReadTenseBar7
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <XBarType.VerbBar>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <XBarType.VerbBar>_R)))) -}
4f001468d2fe904a7b1340d4f2618392
  $fReadVerbBar_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [XBarType.VerbBar]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadVerbBar1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[XBarType.VerbBar]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[XBarType.VerbBar]>_R))) -}
4f001468d2fe904a7b1340d4f2618392
  $fReadVerbBar_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec XBarType.VerbBar
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadVerbBar2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <XBarType.VerbBar>_R)) -}
4f001468d2fe904a7b1340d4f2618392
  $fReadVerbBar_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS XBarType.VerbBar
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadP.run
                   @ XBarType.VerbBar
                   ((XBarType.$fReadVerbBar2 eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <XBarType.VerbBar>_R)
                      @ XBarType.VerbBar
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ XBarType.VerbBar))) -}
4f001468d2fe904a7b1340d4f2618392
  $fReadVerbBar_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [XBarType.VerbBar]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [XBarType.VerbBar]
                   ((XBarType.$fReadVerbBar_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[XBarType.VerbBar]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <[XBarType.VerbBar]>_R)
                      @ [XBarType.VerbBar]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [XBarType.VerbBar]))) -}
4f001468d2fe904a7b1340d4f2618392
  $fReadVerbP :: GHC.Read.Read XBarType.VerbP
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.VerbP
                  XBarType.$fReadVerbP_$creadsPrec
                  XBarType.$fReadVerbP_$sreadListDefault
                  XBarType.$fReadVerbP_$creadPrec
                  XBarType.$fReadVerbP_$creadListPrec -}
4f001468d2fe904a7b1340d4f2618392
  $fReadVerbP1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([XBarType.VerbP] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [XBarType.VerbP] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ XBarType.VerbP
                   XBarType.$fReadVerbP2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <XBarType.VerbP>_R))
                   @ b
                   eta1) -}
4f001468d2fe904a7b1340d4f2618392
  $fReadVerbP2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP XBarType.VerbP
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ XBarType.VerbP
                   XBarType.$fReadTenseBar5
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <XBarType.VerbP>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <XBarType.VerbP>_R)))) -}
4f001468d2fe904a7b1340d4f2618392
  $fReadVerbP_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [XBarType.VerbP]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadVerbP1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[XBarType.VerbP]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[XBarType.VerbP]>_R))) -}
4f001468d2fe904a7b1340d4f2618392
  $fReadVerbP_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec XBarType.VerbP
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadVerbP2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <XBarType.VerbP>_R)) -}
4f001468d2fe904a7b1340d4f2618392
  $fReadVerbP_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS XBarType.VerbP
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadP.run
                   @ XBarType.VerbP
                   ((GHC.Read.$fReadDouble10
                       @ XBarType.VerbP
                       XBarType.$fReadTenseBar5
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                           <XBarType.VerbP>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                      <XBarType.VerbP>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <XBarType.VerbP>_R)
                      @ XBarType.VerbP
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ XBarType.VerbP))) -}
4f001468d2fe904a7b1340d4f2618392
  $fReadVerbP_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [XBarType.VerbP]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [XBarType.VerbP]
                   ((XBarType.$fReadVerbP_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[XBarType.VerbP]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <[XBarType.VerbP]>_R)
                      @ [XBarType.VerbP]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [XBarType.VerbP]))) -}
5b5bb35beb8c49aeda693fec96ba7d0c
  $fReadVerb_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [XBarType.Verb]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadVerb1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[XBarType.Verb]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[XBarType.Verb]>_R))) -}
5b5bb35beb8c49aeda693fec96ba7d0c
  $fReadVerb_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec XBarType.Verb
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                XBarType.$fReadVerb2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <XBarType.Verb>_R)) -}
5b5bb35beb8c49aeda693fec96ba7d0c
  $fReadVerb_$s$dmreadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS XBarType.Verb
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ XBarType.Verb
                   XBarType.$fReadVerb_$creadPrec
                   eta) -}
5b5bb35beb8c49aeda693fec96ba7d0c
  $fReadVerb_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [XBarType.Verb]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [XBarType.Verb]
                   ((XBarType.$fReadVerb_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[XBarType.Verb]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <[XBarType.Verb]>_R)
                      @ [XBarType.Verb]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [XBarType.Verb]))) -}
1cf95d74cf8034e3cd8743015f534f02
  $fShowAdj :: GHC.Show.Show XBarType.Adj
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.Adj
                  XBarType.$fShowAdj_$cshowsPrec
                  XBarType.$fShowAdj_$cshow
                  XBarType.$fShowAdj_$cshowList -}
1cf95d74cf8034e3cd8743015f534f02
  $fShowAdj1 :: XBarType.Adj -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: XBarType.Adj w1 :: GHC.Base.String ->
                 case w of ww { XBarType.Adj ww1 ->
                 XBarType.$w$cshowsPrec 0 ww1 w1 }) -}
64c778bb3f79f89d5db0eaae63bfd881
  $fShowAdj2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Adj "#) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fShowAdjBar :: GHC.Show.Show XBarType.AdjBar
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.AdjBar
                  XBarType.$fShowAdjBar_$cshowsPrec
                  XBarType.$fShowAdjBar_$cshow
                  XBarType.$fShowAdjBar_$cshowList -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fShowAdjBar1 :: XBarType.AdjBar -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: XBarType.AdjBar ->
                 XBarType.$w$cshowsPrec1 0 w) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fShowAdjBar_$cshow :: XBarType.AdjBar -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: XBarType.AdjBar ->
                 XBarType.$fShowAdjBar_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fShowAdjBar_$cshowList :: [XBarType.AdjBar] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ XBarType.AdjBar
                   XBarType.$fShowAdjBar1) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fShowAdjBar_$cshowsPrec ::
    GHC.Types.Int -> XBarType.AdjBar -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><S,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: XBarType.AdjBar ->
                 case w of ww { GHC.Types.I# ww1 ->
                 XBarType.$w$cshowsPrec1 ww1 w1 }) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fShowAdjP :: GHC.Show.Show XBarType.AdjP
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.AdjP
                  XBarType.$fShowAdjP_$cshowsPrec
                  XBarType.$fShowAdjP_$cshow
                  XBarType.$fShowAdjP_$cshowList -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fShowAdjP1 :: XBarType.AdjP -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: XBarType.AdjP ->
                 case w of ww { XBarType.AdjP ww1 ->
                 XBarType.$w$cshowsPrec2 0 ww1 }) -}
529dc8cdb3ebc32bb2700142ff5c75cd
  $fShowAdjP2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AdjP "#) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fShowAdjP_$cshow :: XBarType.AdjP -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: XBarType.AdjP ->
                 case x of wild { XBarType.AdjP b1 ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n XBarType.$fShowAdjP2)
                   (XBarType.$fShowAdjBar_$cshowsPrec
                      XBarType.$fReadAdjP5
                      b1
                      (GHC.Types.[] @ GHC.Types.Char)) }) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fShowAdjP_$cshowList :: [XBarType.AdjP] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ XBarType.AdjP
                   XBarType.$fShowAdjP1) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fShowAdjP_$cshowsPrec ::
    GHC.Types.Int -> XBarType.AdjP -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><S,1*U(1*U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: XBarType.AdjP ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { XBarType.AdjP ww3 ->
                 XBarType.$w$cshowsPrec2 ww1 ww3 } }) -}
1cf95d74cf8034e3cd8743015f534f02
  $fShowAdj_$cshow :: XBarType.Adj -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: XBarType.Adj ->
                 XBarType.$fShowAdj_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
1cf95d74cf8034e3cd8743015f534f02
  $fShowAdj_$cshowList :: [XBarType.Adj] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ XBarType.Adj
                   XBarType.$fShowAdj1) -}
1cf95d74cf8034e3cd8743015f534f02
  $fShowAdj_$cshowsPrec ::
    GHC.Types.Int -> XBarType.Adj -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S,1*U(1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int w1 :: XBarType.Adj w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { XBarType.Adj ww3 ->
                 XBarType.$w$cshowsPrec ww1 ww3 w2 } }) -}
b210e39e480af28620788baa98bef96d
  $fShowAdv :: GHC.Show.Show XBarType.Adv
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.Adv
                  XBarType.$fShowAdv_$cshowsPrec
                  XBarType.$fShowAdv_$cshow
                  XBarType.$fShowAdv_$cshowList -}
b210e39e480af28620788baa98bef96d
  $fShowAdv1 :: XBarType.Adv -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: XBarType.Adv w1 :: GHC.Base.String ->
                 case w of ww { XBarType.Adv ww1 ->
                 XBarType.$w$cshowsPrec3 0 ww1 w1 }) -}
b276072daba547793377af41f6af5d76
  $fShowAdv2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Adv "#) -}
a84521cf9655e5e74dadfb60f7ad7a69
  $fShowAdvBar :: GHC.Show.Show XBarType.AdvBar
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.AdvBar
                  XBarType.$fShowAdvBar_$cshowsPrec
                  XBarType.$fShowAdvBar_$cshow
                  XBarType.$fShowAdvBar_$cshowList -}
a84521cf9655e5e74dadfb60f7ad7a69
  $fShowAdvBar1 :: XBarType.AdvBar -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: XBarType.AdvBar w1 :: GHC.Base.String ->
                 case w of ww { XBarType.AdvBar ww1 ->
                 XBarType.$w$cshowsPrec4 0 ww1 w1 }) -}
4372f092c849cdbcc2c19c45cff90e05
  $fShowAdvBar2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AdvBar "#) -}
a84521cf9655e5e74dadfb60f7ad7a69
  $fShowAdvBar_$cshow :: XBarType.AdvBar -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(1*U))>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: XBarType.AdvBar ->
                 XBarType.$fShowAdvBar_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
a84521cf9655e5e74dadfb60f7ad7a69
  $fShowAdvBar_$cshowList :: [XBarType.AdvBar] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ XBarType.AdvBar
                   XBarType.$fShowAdvBar1) -}
a84521cf9655e5e74dadfb60f7ad7a69
  $fShowAdvBar_$cshowsPrec ::
    GHC.Types.Int -> XBarType.AdvBar -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S,1*U(1*U(1*U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int
                   w1 :: XBarType.AdvBar
                   w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { XBarType.AdvBar ww3 ->
                 XBarType.$w$cshowsPrec4 ww1 ww3 w2 } }) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fShowAdvP :: GHC.Show.Show XBarType.AdvP
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.AdvP
                  XBarType.$fShowAdvP_$cshowsPrec
                  XBarType.$fShowAdvP_$cshow
                  XBarType.$fShowAdvP_$cshowList -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fShowAdvP1 :: XBarType.AdvP -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: XBarType.AdvP ->
                 case w of ww { XBarType.AdvP ww1 ww2 ->
                 XBarType.$w$cshowsPrec5 0 ww1 ww2 }) -}
d298eff3462468d6688196a71e1eabfa
  $fShowAdvP2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AdvP "#) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fShowAdvP_$cshow :: XBarType.AdvP -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,U(U(U)))>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: XBarType.AdvP ->
                 XBarType.$fShowAdvP_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fShowAdvP_$cshowList :: [XBarType.AdvP] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ XBarType.AdvP
                   XBarType.$fShowAdvP1) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fShowAdvP_$cshowsPrec ::
    GHC.Types.Int -> XBarType.AdvP -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><S,1*U(1*U,U(U(U)))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: XBarType.AdvP ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { XBarType.AdvP ww3 ww4 ->
                 XBarType.$w$cshowsPrec5 ww1 ww3 ww4 } }) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fShowAdvP_$s$cshowsPrec ::
    GHC.Types.Int -> XBarType.Optional XBarType.AdvP -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U(U)><S,1*U> -}
b210e39e480af28620788baa98bef96d
  $fShowAdv_$cshow :: XBarType.Adv -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: XBarType.Adv ->
                 XBarType.$fShowAdv_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
b210e39e480af28620788baa98bef96d
  $fShowAdv_$cshowList :: [XBarType.Adv] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ XBarType.Adv
                   XBarType.$fShowAdv1) -}
b210e39e480af28620788baa98bef96d
  $fShowAdv_$cshowsPrec ::
    GHC.Types.Int -> XBarType.Adv -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S,1*U(1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int w1 :: XBarType.Adv w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { XBarType.Adv ww3 ->
                 XBarType.$w$cshowsPrec3 ww1 ww3 w2 } }) -}
fe8691e5b20e4567836977d90780b734
  $fShowComp :: GHC.Show.Show XBarType.Comp
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.Comp
                  XBarType.$fShowComp_$cshowsPrec
                  XBarType.$fShowComp_$cshow
                  XBarType.$fShowComp_$cshowList -}
fe8691e5b20e4567836977d90780b734
  $fShowComp1 :: XBarType.Comp -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: XBarType.Comp w1 :: GHC.Base.String ->
                 case w of ww { XBarType.Comp ww1 ->
                 XBarType.$w$cshowsPrec6 0 ww1 w1 }) -}
506d71e5c555c9a35140038878c662d4
  $fShowComp2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Comp "#) -}
4f001468d2fe904a7b1340d4f2618392
  $fShowCompBar :: GHC.Show.Show XBarType.CompBar
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.CompBar
                  XBarType.$fShowCompBar_$cshowsPrec
                  XBarType.$fShowCompBar_$cshow
                  XBarType.$fShowCompBar_$cshowList -}
4f001468d2fe904a7b1340d4f2618392
  $fShowCompBar1 :: XBarType.CompBar -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: XBarType.CompBar ->
                 case w of ww { XBarType.CompBar ww1 ww2 ->
                 XBarType.$w$cshowsPrec7 0 ww1 ww2 }) -}
0bd5a711490f74ec6ffd2c65cde4f94a
  $fShowCompBar10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DetBar "#) -}
94a868de95331f4e2a2d8232a5dfec37
  $fShowCompBar11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NounP "#) -}
1d884ddcaf61d4a17118677766216403
  $fShowCompBar2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "CompBar "#) -}
febf4045df159d138355fc27f4c09a54
  $fShowCompBar3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TenseP "#) -}
1e46b2ba08ed35e5e6ba4937b832331e
  $fShowCompBar4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Tense "#) -}
5435e4fbbf8f22c70fd1d2f08f8091cf
  $fShowCompBar5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TenseBar "#) -}
cea2420414ed69b491c99832f3083000
  $fShowCompBar6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "VerbP "#) -}
74b4a000f1a3edc99dfc06c7496b054a
  $fShowCompBar7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DetP "#) -}
1a54bf6af0aefd49f22756f5adb2f90a
  $fShowCompBar8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Det "#) -}
8504de0e3d32c2d508e43a2f8452a572
  $fShowCompBar9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "YesOpt "#) -}
4f001468d2fe904a7b1340d4f2618392
  $fShowCompBar_$cshow :: XBarType.CompBar -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(1*U(1*U),1*U(1*U(1*U(U,1*U(1*U))),1*U(U(U),1*U(1*U))))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: XBarType.CompBar ->
                 case w of ww { XBarType.CompBar ww1 ww2 ->
                 XBarType.$w$cshow ww1 ww2 }) -}
4f001468d2fe904a7b1340d4f2618392
  $fShowCompBar_$cshowList :: [XBarType.CompBar] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ XBarType.CompBar
                   XBarType.$fShowCompBar1) -}
4f001468d2fe904a7b1340d4f2618392
  $fShowCompBar_$cshowsPrec ::
    GHC.Types.Int -> XBarType.CompBar -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S,1*U(U)><S,1*U(U(U),1*U(1*U(1*U(U,1*U(1*U))),1*U(U(U),1*U(1*U))))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: XBarType.CompBar ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { XBarType.CompBar ww3 ww4 ->
                 XBarType.$w$cshowsPrec7 ww1 ww3 ww4 } }) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fShowCompBar_$s$cshowsPrec ::
    GHC.Types.Int -> XBarType.Optional XBarType.Det -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ a11 :: GHC.Types.Int
                   ds :: XBarType.Optional XBarType.Det
                   eta :: GHC.Base.String ->
                 case ds of wild {
                   XBarType.YesOpt b1
                   -> case a11 of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             XBarType.$fShowCompBar9
                             (case b1 of ww { XBarType.Det ww1 ->
                              XBarType.$w$cshowsPrec15 11 ww1 eta })
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                XBarType.$fShowCompBar9
                                (case b1 of ww { XBarType.Det ww1 ->
                                 XBarType.$w$cshowsPrec15
                                   11
                                   ww1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta) })) } }
                   XBarType.NoOpt
                   -> GHC.Base.++ @ GHC.Types.Char XBarType.$fReadDetBar10 eta }) -}
4f001468d2fe904a7b1340d4f2618392
  $fShowCompP :: GHC.Show.Show XBarType.CompP
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.CompP
                  XBarType.$fShowCompP_$cshowsPrec
                  XBarType.$fShowCompP_$cshow
                  XBarType.$fShowCompP_$cshowList -}
4f001468d2fe904a7b1340d4f2618392
  $fShowCompP1 :: XBarType.CompP -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: XBarType.CompP ->
                 case w of ww { XBarType.CompP ww1 ->
                 XBarType.$w$cshowsPrec18 0 ww1 }) -}
f03a387fc14c87529c2eea83ee02ec76
  $fShowCompP2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "CompP "#) -}
2e18dd31dc710ee914f2b770977685f4
  $fShowCompP3 :: [GHC.Types.Char]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows8
                   (GHC.Types.[] @ GHC.Types.Char)) -}
4f001468d2fe904a7b1340d4f2618392
  $fShowCompP_$cshow :: XBarType.CompP -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(1*U(1*U(1*U),1*U(1*U(1*U(U,1*U(1*U))),1*U(U(U),1*U(1*U)))))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: XBarType.CompP ->
                 case w of ww { XBarType.CompP ww1 -> XBarType.$w$cshow1 ww1 }) -}
4f001468d2fe904a7b1340d4f2618392
  $fShowCompP_$cshowList :: [XBarType.CompP] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ XBarType.CompP
                   XBarType.$fShowCompP1) -}
4f001468d2fe904a7b1340d4f2618392
  $fShowCompP_$cshowsPrec ::
    GHC.Types.Int -> XBarType.CompP -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S,1*U(U)><S,1*U(1*U(U(U),1*U(1*U(1*U(U,1*U(1*U))),1*U(U(U),1*U(1*U)))))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: XBarType.CompP ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { XBarType.CompP ww3 ->
                 XBarType.$w$cshowsPrec18 ww1 ww3 } }) -}
fe8691e5b20e4567836977d90780b734
  $fShowComp_$cshow :: XBarType.Comp -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: XBarType.Comp ->
                 XBarType.$fShowComp_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
fe8691e5b20e4567836977d90780b734
  $fShowComp_$cshowList :: [XBarType.Comp] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ XBarType.Comp
                   XBarType.$fShowComp1) -}
fe8691e5b20e4567836977d90780b734
  $fShowComp_$cshowsPrec ::
    GHC.Types.Int -> XBarType.Comp -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S,1*U(1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int w1 :: XBarType.Comp w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { XBarType.Comp ww3 ->
                 XBarType.$w$cshowsPrec6 ww1 ww3 w2 } }) -}
fba6555ac73fc085c25046551f89172e
  $fShowDet :: GHC.Show.Show XBarType.Det
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.Det
                  XBarType.$fShowDet_$cshowsPrec
                  XBarType.$fShowDet_$cshow
                  XBarType.$fShowDet_$cshowList -}
fba6555ac73fc085c25046551f89172e
  $fShowDet1 :: XBarType.Det -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: XBarType.Det w1 :: GHC.Base.String ->
                 case w of ww { XBarType.Det ww1 ->
                 XBarType.$w$cshowsPrec15 0 ww1 w1 }) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fShowDetBar :: GHC.Show.Show XBarType.DetBar
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.DetBar
                  XBarType.$fShowDetBar_$cshowsPrec
                  XBarType.$fShowDetBar_$cshow
                  XBarType.$fShowDetBar_$cshowList -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fShowDetBar1 :: XBarType.DetBar -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: XBarType.DetBar ->
                 case w of ww { XBarType.DetBar ww1 ww2 ->
                 XBarType.$w$cshowsPrec14 0 ww1 ww2 }) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fShowDetBar_$cshow :: XBarType.DetBar -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U(1*U))>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: XBarType.DetBar ->
                 case w of ww { XBarType.DetBar ww1 ww2 ->
                 XBarType.$w$cshow2 ww1 ww2 }) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fShowDetBar_$cshowList :: [XBarType.DetBar] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ XBarType.DetBar
                   XBarType.$fShowDetBar1) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fShowDetBar_$cshowsPrec ::
    GHC.Types.Int -> XBarType.DetBar -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><S,1*U(U,1*U(1*U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: XBarType.DetBar ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { XBarType.DetBar ww3 ww4 ->
                 XBarType.$w$cshowsPrec14 ww1 ww3 ww4 } }) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fShowDetP :: GHC.Show.Show XBarType.DetP
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.DetP
                  XBarType.$fShowDetP_$cshowsPrec
                  XBarType.$fShowDetP_$cshow
                  XBarType.$fShowDetP_$cshowList -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fShowDetP1 :: XBarType.DetP -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: XBarType.DetP ->
                 case w of ww { XBarType.DetP ww1 ->
                 XBarType.$w$cshowsPrec13 0 ww1 }) -}
4d208afd710cc451cd58340fdde812d7
  $fShowDetP2 :: [GHC.Types.Char]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows8
                   XBarType.$fShowCompP3) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fShowDetP_$cshow :: XBarType.DetP -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(1*U,1*U(1*U)))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: XBarType.DetP ->
                 case w of ww { XBarType.DetP ww1 -> XBarType.$w$cshow3 ww1 }) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fShowDetP_$cshowList :: [XBarType.DetP] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ XBarType.DetP
                   XBarType.$fShowDetP1) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fShowDetP_$cshowsPrec ::
    GHC.Types.Int -> XBarType.DetP -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><S,1*U(1*U(U,1*U(1*U)))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: XBarType.DetP ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { XBarType.DetP ww3 ->
                 XBarType.$w$cshowsPrec13 ww1 ww3 } }) -}
fba6555ac73fc085c25046551f89172e
  $fShowDet_$cshow :: XBarType.Det -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: XBarType.Det ->
                 XBarType.$fShowDet_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
fba6555ac73fc085c25046551f89172e
  $fShowDet_$cshowList :: [XBarType.Det] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ XBarType.Det
                   XBarType.$fShowDet1) -}
fba6555ac73fc085c25046551f89172e
  $fShowDet_$cshowsPrec ::
    GHC.Types.Int -> XBarType.Det -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S,1*U(1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int w1 :: XBarType.Det w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { XBarType.Det ww3 ->
                 XBarType.$w$cshowsPrec15 ww1 ww3 w2 } }) -}
62d6653cd93b793cf6a9d8cc4709bbae
  $fShowNoun :: GHC.Show.Show XBarType.Noun
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.Noun
                  XBarType.$fShowNoun_$cshowsPrec
                  XBarType.$fShowNoun_$cshow
                  XBarType.$fShowNoun_$cshowList -}
62d6653cd93b793cf6a9d8cc4709bbae
  $fShowNoun1 :: XBarType.Noun -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: XBarType.Noun w1 :: GHC.Base.String ->
                 case w of ww { XBarType.Noun ww1 ->
                 XBarType.$w$cshowsPrec19 0 ww1 w1 }) -}
54f7d32427b75883ce1ef01f018827d2
  $fShowNoun2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Noun "#) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fShowNounBar :: GHC.Show.Show XBarType.NounBar
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.NounBar
                  XBarType.$fShowNounBar_$cshowsPrec
                  XBarType.$fShowNounBar_$cshow
                  XBarType.$fShowNounBar_$cshowList -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fShowNounBar1 :: XBarType.NounBar -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: XBarType.NounBar ->
                 XBarType.$w$cshowsPrec17 0 w) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fShowNounBar_$cshow :: XBarType.NounBar -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: XBarType.NounBar ->
                 XBarType.$fShowNounBar_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fShowNounBar_$cshowList :: [XBarType.NounBar] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ XBarType.NounBar
                   XBarType.$fShowNounBar1) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fShowNounBar_$cshowsPrec ::
    GHC.Types.Int -> XBarType.NounBar -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><S,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: XBarType.NounBar ->
                 case w of ww { GHC.Types.I# ww1 ->
                 XBarType.$w$cshowsPrec17 ww1 w1 }) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fShowNounP :: GHC.Show.Show XBarType.NounP
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.NounP
                  XBarType.$fShowNounP_$cshowsPrec
                  XBarType.$fShowNounP_$cshow
                  XBarType.$fShowNounP_$cshowList -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fShowNounP1 :: XBarType.NounP -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: XBarType.NounP ->
                 case w of ww { XBarType.NounP ww1 ->
                 XBarType.$w$cshowsPrec16 0 ww1 }) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fShowNounP_$cshow :: XBarType.NounP -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: XBarType.NounP ->
                 case x of wild { XBarType.NounP b1 ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n XBarType.$fShowCompBar11)
                   (XBarType.$fShowNounBar_$cshowsPrec
                      XBarType.$fReadAdjP5
                      b1
                      (GHC.Types.[] @ GHC.Types.Char)) }) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fShowNounP_$cshowList :: [XBarType.NounP] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ XBarType.NounP
                   XBarType.$fShowNounP1) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fShowNounP_$cshowsPrec ::
    GHC.Types.Int -> XBarType.NounP -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><S,1*U(1*U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: XBarType.NounP ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { XBarType.NounP ww3 ->
                 XBarType.$w$cshowsPrec16 ww1 ww3 } }) -}
62d6653cd93b793cf6a9d8cc4709bbae
  $fShowNoun_$cshow :: XBarType.Noun -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: XBarType.Noun ->
                 XBarType.$fShowNoun_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
62d6653cd93b793cf6a9d8cc4709bbae
  $fShowNoun_$cshowList :: [XBarType.Noun] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ XBarType.Noun
                   XBarType.$fShowNoun1) -}
62d6653cd93b793cf6a9d8cc4709bbae
  $fShowNoun_$cshowsPrec ::
    GHC.Types.Int -> XBarType.Noun -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S,1*U(1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int w1 :: XBarType.Noun w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { XBarType.Noun ww3 ->
                 XBarType.$w$cshowsPrec19 ww1 ww3 w2 } }) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fShowOptional ::
    GHC.Show.Show a => GHC.Show.Show (XBarType.Optional a)
  DFunId[0]
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a11 $dShow :: GHC.Show.Show a11.
                  @ (XBarType.Optional a11)
                  (XBarType.$fShowOptional_$cshowsPrec @ a11 $dShow)
                  (XBarType.$fShowOptional_$cshow @ a11 $dShow)
                  (XBarType.$fShowOptional_$cshowList @ a11 $dShow) -}
27a174263fc95f77a9b4e27f99486be7
  $fShowOptional1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0) -}
3f3a6c92ece69d104b74ad911933f28e
  $fShowOptional2 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   XBarType.$fReadDetBar10) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fShowOptional_$cshow ::
    GHC.Show.Show a => XBarType.Optional a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(1*C1(C1(C1(U))),A,A)><S,1*U>,
     Unfolding: (\ @ a11
                   $dShow :: GHC.Show.Show a11
                   x :: XBarType.Optional a11 ->
                 case x of wild {
                   XBarType.YesOpt b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        XBarType.$fShowCompBar9
                        (GHC.Show.showsPrec
                           @ a11
                           $dShow
                           XBarType.$fReadAdjP5
                           b1
                           (GHC.Types.[] @ GHC.Types.Char))
                   XBarType.NoOpt -> XBarType.$fReadDetBar10 }) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fShowOptional_$cshowList ::
    GHC.Show.Show a => [XBarType.Optional a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a11
                   $dShow :: GHC.Show.Show a11
                   eta :: [XBarType.Optional a11]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (XBarType.Optional a11)
                   (XBarType.$fShowOptional_$cshowsPrec
                      @ a11
                      $dShow
                      XBarType.$fShowOptional1)
                   eta
                   eta1) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fShowOptional_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int -> XBarType.Optional a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(U)><S,1*U>,
     Unfolding: (\ @ a11
                   $dShow :: GHC.Show.Show a11
                   a12 :: GHC.Types.Int
                   ds :: XBarType.Optional a11 ->
                 case ds of wild {
                   XBarType.YesOpt b1
                   -> case a12 of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.showsPrec @ a11 $dShow XBarType.$fReadAdjP5 b1
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> \ x1 :: GHC.Base.String ->
                           GHC.Base.++ @ GHC.Types.Char XBarType.$fShowCompBar9 (g x1)
                        GHC.Types.True
                        -> \ x1 :: GHC.Base.String ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                XBarType.$fShowCompBar9
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x1))) } }
                   XBarType.NoOpt -> XBarType.$fShowOptional2 }) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fShowOptional_$s$cshowsPrec ::
    GHC.Types.Int -> XBarType.Optional XBarType.AdjP -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U(U)><S,1*U>,
     Unfolding: (\ a11 :: GHC.Types.Int
                   ds :: XBarType.Optional XBarType.AdjP ->
                 case ds of wild {
                   XBarType.YesOpt b1
                   -> case a11 of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = case b1 of ww { XBarType.AdjP ww1 ->
                          XBarType.$w$cshowsPrec2 11 ww1 }
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> \ x1 :: GHC.Base.String ->
                           GHC.Base.++ @ GHC.Types.Char XBarType.$fShowCompBar9 (g x1)
                        GHC.Types.True
                        -> \ x1 :: GHC.Base.String ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                XBarType.$fShowCompBar9
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x1))) } }
                   XBarType.NoOpt -> XBarType.$fShowOptional2 }) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fShowOptional_$s$cshowsPrec1 ::
    GHC.Types.Int -> XBarType.Optional XBarType.PrepP -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U(U)><S,1*U> -}
9d4833a771312a804ba6134bfb562299
  $fShowPrep :: GHC.Show.Show XBarType.Prep
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.Prep
                  XBarType.$fShowPrep_$cshowsPrec
                  XBarType.$fShowPrep_$cshow
                  XBarType.$fShowPrep_$cshowList -}
9d4833a771312a804ba6134bfb562299
  $fShowPrep1 :: XBarType.Prep -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: XBarType.Prep w1 :: GHC.Base.String ->
                 case w of ww { XBarType.Prep ww1 ->
                 XBarType.$w$cshowsPrec20 0 ww1 w1 }) -}
5653588fd0d74566301c2194a31afecf
  $fShowPrep2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Prep "#) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fShowPrepBar :: GHC.Show.Show XBarType.PrepBar
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.PrepBar
                  XBarType.$fShowPrepBar_$cshowsPrec
                  XBarType.$fShowPrepBar_$cshow
                  XBarType.$fShowPrepBar_$cshowList -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fShowPrepBar1 :: XBarType.PrepBar -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: XBarType.PrepBar ->
                 XBarType.$w$cshowsPrec21 0 w) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fShowPrepBar_$cshow :: XBarType.PrepBar -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: XBarType.PrepBar ->
                 XBarType.$fShowPrepBar_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fShowPrepBar_$cshowList :: [XBarType.PrepBar] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ XBarType.PrepBar
                   XBarType.$fShowPrepBar1) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fShowPrepBar_$cshowsPrec ::
    GHC.Types.Int -> XBarType.PrepBar -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><S,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: XBarType.PrepBar ->
                 case w of ww { GHC.Types.I# ww1 ->
                 XBarType.$w$cshowsPrec21 ww1 w1 }) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fShowPrepP :: GHC.Show.Show XBarType.PrepP
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.PrepP
                  XBarType.$fShowPrepP_$cshowsPrec
                  XBarType.$fShowPrepP_$cshow
                  XBarType.$fShowPrepP_$cshowList -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fShowPrepP1 :: XBarType.PrepP -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: XBarType.PrepP ->
                 case w of ww { XBarType.PrepP ww1 ww2 ->
                 XBarType.$w$cshowsPrec22 0 ww1 ww2 }) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fShowPrepP_$cshow :: XBarType.PrepP -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: XBarType.PrepP ->
                 XBarType.$fShowPrepP_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fShowPrepP_$cshowList :: [XBarType.PrepP] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ XBarType.PrepP
                   XBarType.$fShowPrepP1) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $fShowPrepP_$cshowsPrec ::
    GHC.Types.Int -> XBarType.PrepP -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><S,1*U(1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: XBarType.PrepP ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { XBarType.PrepP ww3 ww4 ->
                 XBarType.$w$cshowsPrec22 ww1 ww3 ww4 } }) -}
9d4833a771312a804ba6134bfb562299
  $fShowPrep_$cshow :: XBarType.Prep -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: XBarType.Prep ->
                 XBarType.$fShowPrep_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
9d4833a771312a804ba6134bfb562299
  $fShowPrep_$cshowList :: [XBarType.Prep] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ XBarType.Prep
                   XBarType.$fShowPrep1) -}
9d4833a771312a804ba6134bfb562299
  $fShowPrep_$cshowsPrec ::
    GHC.Types.Int -> XBarType.Prep -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S,1*U(1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int w1 :: XBarType.Prep w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { XBarType.Prep ww3 ->
                 XBarType.$w$cshowsPrec20 ww1 ww3 w2 } }) -}
7b127aff7a37e546247befcacb7c8e9e
  $fShowTense :: GHC.Show.Show XBarType.Tense
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.Tense
                  XBarType.$fShowTense_$cshowsPrec
                  XBarType.$fShowTense_$cshow
                  XBarType.$fShowTense_$cshowList -}
7b127aff7a37e546247befcacb7c8e9e
  $fShowTense1 :: XBarType.Tense -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: XBarType.Tense w1 :: GHC.Base.String ->
                 case w of ww { XBarType.Tense ww1 ->
                 XBarType.$w$cshowsPrec10 0 ww1 w1 }) -}
4f001468d2fe904a7b1340d4f2618392
  $fShowTenseBar :: GHC.Show.Show XBarType.TenseBar
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.TenseBar
                  XBarType.$fShowTenseBar_$cshowsPrec
                  XBarType.$fShowTenseBar_$cshow
                  XBarType.$fShowTenseBar_$cshowList -}
4f001468d2fe904a7b1340d4f2618392
  $fShowTenseBar1 :: XBarType.TenseBar -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: XBarType.TenseBar ->
                 case w of ww { XBarType.TenseBar ww1 ww2 ->
                 XBarType.$w$cshowsPrec9 0 ww1 ww2 }) -}
4f001468d2fe904a7b1340d4f2618392
  $fShowTenseBar_$cshow :: XBarType.TenseBar -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(1*U),1*U(1*U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: XBarType.TenseBar ->
                 case w of ww { XBarType.TenseBar ww1 ww2 ->
                 XBarType.$w$cshow4 ww1 ww2 }) -}
4f001468d2fe904a7b1340d4f2618392
  $fShowTenseBar_$cshowList :: [XBarType.TenseBar] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ XBarType.TenseBar
                   XBarType.$fShowTenseBar1) -}
4f001468d2fe904a7b1340d4f2618392
  $fShowTenseBar_$cshowsPrec ::
    GHC.Types.Int -> XBarType.TenseBar -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><S,1*U(U(U),1*U(1*U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: XBarType.TenseBar ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { XBarType.TenseBar ww3 ww4 ->
                 XBarType.$w$cshowsPrec9 ww1 ww3 ww4 } }) -}
4f001468d2fe904a7b1340d4f2618392
  $fShowTenseP :: GHC.Show.Show XBarType.TenseP
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.TenseP
                  XBarType.$fShowTenseP_$cshowsPrec
                  XBarType.$fShowTenseP_$cshow
                  XBarType.$fShowTenseP_$cshowList -}
4f001468d2fe904a7b1340d4f2618392
  $fShowTenseP1 :: XBarType.TenseP -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: XBarType.TenseP ->
                 case w of ww { XBarType.TenseP ww1 ww2 ->
                 XBarType.$w$cshowsPrec8 0 ww1 ww2 }) -}
4f001468d2fe904a7b1340d4f2618392
  $fShowTenseP_$cshow :: XBarType.TenseP -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(1*U(1*U(U,1*U(1*U))),1*U(U(U),1*U(1*U)))>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: XBarType.TenseP ->
                 XBarType.$fShowTenseP_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
4f001468d2fe904a7b1340d4f2618392
  $fShowTenseP_$cshowList :: [XBarType.TenseP] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ XBarType.TenseP
                   XBarType.$fShowTenseP1) -}
4f001468d2fe904a7b1340d4f2618392
  $fShowTenseP_$cshowsPrec ::
    GHC.Types.Int -> XBarType.TenseP -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S,1*U(U)><S,1*U(1*U(1*U(U,1*U(1*U))),1*U(U(U),1*U(1*U)))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: XBarType.TenseP ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { XBarType.TenseP ww3 ww4 ->
                 XBarType.$w$cshowsPrec8 ww1 ww3 ww4 } }) -}
7b127aff7a37e546247befcacb7c8e9e
  $fShowTense_$cshow :: XBarType.Tense -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: XBarType.Tense ->
                 XBarType.$fShowTense_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
7b127aff7a37e546247befcacb7c8e9e
  $fShowTense_$cshowList :: [XBarType.Tense] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ XBarType.Tense
                   XBarType.$fShowTense1) -}
7b127aff7a37e546247befcacb7c8e9e
  $fShowTense_$cshowsPrec ::
    GHC.Types.Int -> XBarType.Tense -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S,1*U(1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int w1 :: XBarType.Tense w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { XBarType.Tense ww3 ->
                 XBarType.$w$cshowsPrec10 ww1 ww3 w2 } }) -}
5b5bb35beb8c49aeda693fec96ba7d0c
  $fShowVerb :: GHC.Show.Show XBarType.Verb
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.Verb
                  XBarType.$fShowVerb_$cshowsPrec
                  XBarType.$fShowVerb_$cshow
                  XBarType.$fShowVerb_$cshowList -}
5b5bb35beb8c49aeda693fec96ba7d0c
  $fShowVerb1 :: XBarType.Verb -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: XBarType.Verb w1 :: GHC.Base.String ->
                 case w of ww { XBarType.Verb ww1 ->
                 XBarType.$w$cshowsPrec23 0 ww1 w1 }) -}
f1f2152e5f01f17c19bef0e97e37c0b2
  $fShowVerb2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Verb "#) -}
4f001468d2fe904a7b1340d4f2618392
  $fShowVerbBar :: GHC.Show.Show XBarType.VerbBar
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.VerbBar
                  XBarType.$fShowVerbBar_$cshowsPrec
                  XBarType.$fShowVerbBar_$cshow
                  XBarType.$fShowVerbBar_$cshowList -}
4f001468d2fe904a7b1340d4f2618392
  $fShowVerbBar1 :: XBarType.VerbBar -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: XBarType.VerbBar ->
                 XBarType.$w$cshowsPrec12 0 w) -}
4f001468d2fe904a7b1340d4f2618392
  $fShowVerbBar_$cshow :: XBarType.VerbBar -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: XBarType.VerbBar ->
                 XBarType.$fShowVerbBar_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
4f001468d2fe904a7b1340d4f2618392
  $fShowVerbBar_$cshowList :: [XBarType.VerbBar] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ XBarType.VerbBar
                   XBarType.$fShowVerbBar1) -}
4f001468d2fe904a7b1340d4f2618392
  $fShowVerbBar_$cshowsPrec ::
    GHC.Types.Int -> XBarType.VerbBar -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><S,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: XBarType.VerbBar ->
                 case w of ww { GHC.Types.I# ww1 ->
                 XBarType.$w$cshowsPrec12 ww1 w1 }) -}
4f001468d2fe904a7b1340d4f2618392
  $fShowVerbP :: GHC.Show.Show XBarType.VerbP
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XBarType.VerbP
                  XBarType.$fShowVerbP_$cshowsPrec
                  XBarType.$fShowVerbP_$cshow
                  XBarType.$fShowVerbP_$cshowList -}
4f001468d2fe904a7b1340d4f2618392
  $fShowVerbP1 :: XBarType.VerbP -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: XBarType.VerbP ->
                 case w of ww { XBarType.VerbP ww1 ->
                 XBarType.$w$cshowsPrec11 0 ww1 }) -}
4f001468d2fe904a7b1340d4f2618392
  $fShowVerbP_$cshow :: XBarType.VerbP -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: XBarType.VerbP ->
                 case x of wild { XBarType.VerbP b1 ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n XBarType.$fShowCompBar6)
                   (XBarType.$fShowVerbBar_$cshowsPrec
                      XBarType.$fReadAdjP5
                      b1
                      (GHC.Types.[] @ GHC.Types.Char)) }) -}
4f001468d2fe904a7b1340d4f2618392
  $fShowVerbP_$cshowList :: [XBarType.VerbP] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ XBarType.VerbP
                   XBarType.$fShowVerbP1) -}
4f001468d2fe904a7b1340d4f2618392
  $fShowVerbP_$cshowsPrec ::
    GHC.Types.Int -> XBarType.VerbP -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><S,1*U(1*U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: XBarType.VerbP ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { XBarType.VerbP ww3 ->
                 XBarType.$w$cshowsPrec11 ww1 ww3 } }) -}
5b5bb35beb8c49aeda693fec96ba7d0c
  $fShowVerb_$cshow :: XBarType.Verb -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: XBarType.Verb ->
                 XBarType.$fShowVerb_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
5b5bb35beb8c49aeda693fec96ba7d0c
  $fShowVerb_$cshowList :: [XBarType.Verb] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ XBarType.Verb
                   XBarType.$fShowVerb1) -}
5b5bb35beb8c49aeda693fec96ba7d0c
  $fShowVerb_$cshowsPrec ::
    GHC.Types.Int -> XBarType.Verb -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S,1*U(1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int w1 :: XBarType.Verb w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { XBarType.Verb ww3 ->
                 XBarType.$w$cshowsPrec23 ww1 ww3 w2 } }) -}
4f001468d2fe904a7b1340d4f2618392
  $w$cshow :: XBarType.Comp -> XBarType.TenseP -> GHC.Base.String
  {- Arity: 2,
     Strictness: <L,1*U(1*U)><L,1*U(1*U(1*U(U,1*U(1*U))),1*U(U(U),1*U(1*U)))>,
     Inline: [0],
     Unfolding: (\ ww :: XBarType.Comp ww1 :: XBarType.TenseP ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   XBarType.$fShowCompBar2
                   (case ww of ww2 { XBarType.Comp ww3 ->
                    XBarType.$w$cshowsPrec6
                      11
                      ww3
                      (GHC.Types.:
                         @ GHC.Types.Char
                         GHC.Show.showSpace1
                         (case ww1 of ww4 { XBarType.TenseP ww5 ww6 ->
                          XBarType.$w$cshowsPrec8
                            11
                            ww5
                            ww6
                            (GHC.Types.[] @ GHC.Types.Char) })) })) -}
4f001468d2fe904a7b1340d4f2618392
  $w$cshow1 :: XBarType.CompBar -> GHC.Base.String
  {- Arity: 1,
     Strictness: <L,1*U(1*U(1*U),1*U(1*U(1*U(U,1*U(1*U))),1*U(U(U),1*U(1*U))))>,
     Inline: [0],
     Unfolding: (\ ww :: XBarType.CompBar ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   XBarType.$fShowCompP2
                   (case ww of wild { XBarType.CompBar b1 b2 ->
                    GHC.Types.:
                      @ GHC.Types.Char
                      GHC.Show.shows9
                      (GHC.Base.++
                         @ GHC.Types.Char
                         XBarType.$fShowCompBar2
                         (case b1 of ww1 { XBarType.Comp ww2 ->
                          XBarType.$w$cshowsPrec6
                            11
                            ww2
                            (GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showSpace1
                               (case b2 of ww3 { XBarType.TenseP ww4 ww5 ->
                                XBarType.$w$cshowsPrec8
                                  11
                                  ww4
                                  ww5
                                  XBarType.$fShowCompP3 })) })) })) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $w$cshow2 ::
    XBarType.Optional XBarType.Det -> XBarType.NounP -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U><L,1*U(1*U)>, Inline: [0],
     Unfolding: (\ ww :: XBarType.Optional XBarType.Det
                   ww1 :: XBarType.NounP ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   XBarType.$fShowCompBar10
                   (XBarType.$fShowCompBar_$s$cshowsPrec
                      XBarType.$fReadAdjP5
                      ww
                      (GHC.Types.:
                         @ GHC.Types.Char
                         GHC.Show.showSpace1
                         (case ww1 of wild { XBarType.NounP b1 ->
                          GHC.Types.:
                            @ GHC.Types.Char
                            GHC.Show.shows9
                            (GHC.Base.++
                               @ GHC.Types.Char
                               XBarType.$fShowCompBar11
                               (XBarType.$w$cshowsPrec17 11 b1 XBarType.$fShowCompP3)) })))) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $w$cshow3 :: XBarType.DetBar -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U(1*U,1*U(1*U))>, Inline: [0],
     Unfolding: (\ ww :: XBarType.DetBar ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   XBarType.$fShowCompBar7
                   (case ww of wild { XBarType.DetBar b1 b2 ->
                    GHC.Types.:
                      @ GHC.Types.Char
                      GHC.Show.shows9
                      (GHC.Base.++
                         @ GHC.Types.Char
                         XBarType.$fShowCompBar10
                         (XBarType.$fShowCompBar_$s$cshowsPrec
                            XBarType.$fReadAdjP5
                            b1
                            (GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showSpace1
                               (case b2 of wild1 { XBarType.NounP b4 ->
                                GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.shows9
                                  (GHC.Base.++
                                     @ GHC.Types.Char
                                     XBarType.$fShowCompBar11
                                     (XBarType.$w$cshowsPrec17
                                        11
                                        b4
                                        XBarType.$fShowDetP2)) })))) })) -}
4f001468d2fe904a7b1340d4f2618392
  $w$cshow4 :: XBarType.Tense -> XBarType.VerbP -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(1*U)><L,1*U(1*U)>, Inline: [0],
     Unfolding: (\ ww :: XBarType.Tense ww1 :: XBarType.VerbP ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   XBarType.$fShowCompBar5
                   (case ww of ww2 { XBarType.Tense ww3 ->
                    XBarType.$w$cshowsPrec10
                      11
                      ww3
                      (GHC.Types.:
                         @ GHC.Types.Char
                         GHC.Show.showSpace1
                         (case ww1 of wild { XBarType.VerbP b1 ->
                          GHC.Types.:
                            @ GHC.Types.Char
                            GHC.Show.shows9
                            (GHC.Base.++
                               @ GHC.Types.Char
                               XBarType.$fShowCompBar6
                               (XBarType.$w$cshowsPrec12 11 b1 XBarType.$fShowCompP3)) })) })) -}
2a9134c5d137ba74601fe3bb0a89afd1
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> GHC.Base.String -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: GHC.Base.String
                   w :: GHC.Base.String ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        XBarType.$fShowAdj2
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.shows6
                           (GHC.Show.showLitString
                              ww1
                              (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 w)))
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           XBarType.$fShowAdj2
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.shows6
                              (GHC.Show.showLitString
                                 ww1
                                 (GHC.Types.:
                                    @ GHC.Types.Char
                                    GHC.Show.shows6
                                    (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w))))) }) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $w$cshowsPrec1 ::
    GHC.Prim.Int# -> XBarType.AdjBar -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0] -}
f1634f4402a13166f53e49ab19aa2d00
  $w$cshowsPrec10 ::
    GHC.Prim.Int#
    -> GHC.Base.String -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: GHC.Base.String
                   w :: GHC.Base.String ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        XBarType.$fShowCompBar4
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.shows6
                           (GHC.Show.showLitString
                              ww1
                              (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 w)))
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           XBarType.$fShowCompBar4
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.shows6
                              (GHC.Show.showLitString
                                 ww1
                                 (GHC.Types.:
                                    @ GHC.Types.Char
                                    GHC.Show.shows6
                                    (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w))))) }) -}
4f001468d2fe904a7b1340d4f2618392
  $w$cshowsPrec11 ::
    GHC.Prim.Int# -> XBarType.VerbBar -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,U><L,1*U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# ww1 :: XBarType.VerbBar ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = XBarType.$w$cshowsPrec12 11 ww1
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False
                   -> \ x :: GHC.Base.String ->
                      GHC.Base.++ @ GHC.Types.Char XBarType.$fShowCompBar6 (g x)
                   GHC.Types.True
                   -> \ x :: GHC.Base.String ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           XBarType.$fShowCompBar6
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x))) }) -}
4f001468d2fe904a7b1340d4f2618392
  $w$cshowsPrec12 ::
    GHC.Prim.Int# -> XBarType.VerbBar -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0] -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $w$cshowsPrec13 ::
    GHC.Prim.Int# -> XBarType.DetBar -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,U><L,1*U(U,1*U(1*U))>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# ww1 :: XBarType.DetBar ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = case ww1 of ww2 { XBarType.DetBar ww3 ww4 ->
                     XBarType.$w$cshowsPrec14 11 ww3 ww4 }
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False
                   -> \ x :: GHC.Base.String ->
                      GHC.Base.++ @ GHC.Types.Char XBarType.$fShowCompBar7 (g x)
                   GHC.Types.True
                   -> \ x :: GHC.Base.String ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           XBarType.$fShowCompBar7
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x))) }) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $w$cshowsPrec14 ::
    GHC.Prim.Int#
    -> XBarType.Optional XBarType.Det
    -> XBarType.NounP
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U><L,U><L,1*U(1*U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: XBarType.Optional XBarType.Det
                   ww2 :: XBarType.NounP ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = case ww2 of ww3 { XBarType.NounP ww4 ->
                     XBarType.$w$cshowsPrec16 11 ww4 }
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ x :: GHC.Base.String ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       XBarType.$fShowCompBar10
                       (XBarType.$fShowCompBar_$s$cshowsPrec
                          XBarType.$fReadAdjP5
                          ww1
                          (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x)))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ x :: GHC.Base.String ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x)) }) -}
647b9e8241f3f144149346f28b0a2ca0
  $w$cshowsPrec15 ::
    GHC.Prim.Int#
    -> GHC.Base.String -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: GHC.Base.String
                   w :: GHC.Base.String ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        XBarType.$fShowCompBar8
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.shows6
                           (GHC.Show.showLitString
                              ww1
                              (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 w)))
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           XBarType.$fShowCompBar8
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.shows6
                              (GHC.Show.showLitString
                                 ww1
                                 (GHC.Types.:
                                    @ GHC.Types.Char
                                    GHC.Show.shows6
                                    (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w))))) }) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $w$cshowsPrec16 ::
    GHC.Prim.Int# -> XBarType.NounBar -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,U><L,1*U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# ww1 :: XBarType.NounBar ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = XBarType.$w$cshowsPrec17 11 ww1
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False
                   -> \ x :: GHC.Base.String ->
                      GHC.Base.++ @ GHC.Types.Char XBarType.$fShowCompBar11 (g x)
                   GHC.Types.True
                   -> \ x :: GHC.Base.String ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           XBarType.$fShowCompBar11
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x))) }) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $w$cshowsPrec17 ::
    GHC.Prim.Int# -> XBarType.NounBar -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0] -}
4f001468d2fe904a7b1340d4f2618392
  $w$cshowsPrec18 ::
    GHC.Prim.Int# -> XBarType.CompBar -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <L,U><L,1*U(U(U),1*U(1*U(1*U(U,1*U(1*U))),1*U(U(U),1*U(1*U))))>,
     Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# ww1 :: XBarType.CompBar ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = case ww1 of ww2 { XBarType.CompBar ww3 ww4 ->
                     XBarType.$w$cshowsPrec7 11 ww3 ww4 }
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False
                   -> \ x :: GHC.Base.String ->
                      GHC.Base.++ @ GHC.Types.Char XBarType.$fShowCompP2 (g x)
                   GHC.Types.True
                   -> \ x :: GHC.Base.String ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           XBarType.$fShowCompP2
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x))) }) -}
ed902251d4aed921a231c1b594ca7aeb
  $w$cshowsPrec19 ::
    GHC.Prim.Int#
    -> GHC.Base.String -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: GHC.Base.String
                   w :: GHC.Base.String ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        XBarType.$fShowNoun2
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.shows6
                           (GHC.Show.showLitString
                              ww1
                              (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 w)))
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           XBarType.$fShowNoun2
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.shows6
                              (GHC.Show.showLitString
                                 ww1
                                 (GHC.Types.:
                                    @ GHC.Types.Char
                                    GHC.Show.shows6
                                    (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w))))) }) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $w$cshowsPrec2 ::
    GHC.Prim.Int# -> XBarType.AdjBar -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,U><L,1*U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# ww1 :: XBarType.AdjBar ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = XBarType.$w$cshowsPrec1 11 ww1
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False
                   -> \ x :: GHC.Base.String ->
                      GHC.Base.++ @ GHC.Types.Char XBarType.$fShowAdjP2 (g x)
                   GHC.Types.True
                   -> \ x :: GHC.Base.String ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           XBarType.$fShowAdjP2
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x))) }) -}
bc891bfb7442f907c8bb048a4e1873e5
  $w$cshowsPrec20 ::
    GHC.Prim.Int#
    -> GHC.Base.String -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: GHC.Base.String
                   w :: GHC.Base.String ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        XBarType.$fShowPrep2
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.shows6
                           (GHC.Show.showLitString
                              ww1
                              (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 w)))
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           XBarType.$fShowPrep2
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.shows6
                              (GHC.Show.showLitString
                                 ww1
                                 (GHC.Types.:
                                    @ GHC.Types.Char
                                    GHC.Show.shows6
                                    (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w))))) }) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $w$cshowsPrec21 ::
    GHC.Prim.Int# -> XBarType.PrepBar -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0] -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $w$cshowsPrec22 ::
    GHC.Prim.Int#
    -> XBarType.Optional XBarType.AdjP
    -> XBarType.PrepBar
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U><L,1*U><L,1*U>, Inline: [0] -}
069d819268dd5300f2fb197f20e0e933
  $w$cshowsPrec23 ::
    GHC.Prim.Int#
    -> GHC.Base.String -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: GHC.Base.String
                   w :: GHC.Base.String ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        XBarType.$fShowVerb2
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.shows6
                           (GHC.Show.showLitString
                              ww1
                              (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 w)))
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           XBarType.$fShowVerb2
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.shows6
                              (GHC.Show.showLitString
                                 ww1
                                 (GHC.Types.:
                                    @ GHC.Types.Char
                                    GHC.Show.shows6
                                    (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w))))) }) -}
a2d065cb8689fdf1d112256e15b85872
  $w$cshowsPrec3 ::
    GHC.Prim.Int#
    -> GHC.Base.String -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: GHC.Base.String
                   w :: GHC.Base.String ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        XBarType.$fShowAdv2
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.shows6
                           (GHC.Show.showLitString
                              ww1
                              (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 w)))
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           XBarType.$fShowAdv2
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.shows6
                              (GHC.Show.showLitString
                                 ww1
                                 (GHC.Types.:
                                    @ GHC.Types.Char
                                    GHC.Show.shows6
                                    (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w))))) }) -}
29bf0ba41bc2472a454c400a0bf9c117
  $w$cshowsPrec4 ::
    GHC.Prim.Int# -> XBarType.Adv -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><L,1*U(1*U)><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: XBarType.Adv
                   w :: GHC.Base.String ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        XBarType.$fShowAdvBar2
                        (case ww1 of ww2 { XBarType.Adv ww3 ->
                         XBarType.$w$cshowsPrec3 11 ww3 w })
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           XBarType.$fShowAdvBar2
                           (case ww1 of ww2 { XBarType.Adv ww3 ->
                            XBarType.$w$cshowsPrec3
                              11
                              ww3
                              (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w) })) }) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $w$cshowsPrec5 ::
    GHC.Prim.Int#
    -> XBarType.Optional XBarType.AdvP
    -> XBarType.AdvBar
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U><L,1*U><L,U(U(U))>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: XBarType.Optional XBarType.AdvP
                   ww2 :: XBarType.AdvBar ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = XBarType.$fShowAdvP_$s$cshowsPrec XBarType.$fReadAdjP5 ww1
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ x :: GHC.Base.String ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       XBarType.$fShowAdvP2
                       (f (GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.showSpace1
                             (case ww2 of ww3 { XBarType.AdvBar ww4 ->
                              XBarType.$w$cshowsPrec4 11 ww4 x })))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ x :: GHC.Base.String ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x)) }) -}
aa9ed132b8b4a48e6c89cbcf59e9e932
  $w$cshowsPrec6 ::
    GHC.Prim.Int#
    -> GHC.Base.String -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: GHC.Base.String
                   w :: GHC.Base.String ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        XBarType.$fShowComp2
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.shows6
                           (GHC.Show.showLitString
                              ww1
                              (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 w)))
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           XBarType.$fShowComp2
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.shows6
                              (GHC.Show.showLitString
                                 ww1
                                 (GHC.Types.:
                                    @ GHC.Types.Char
                                    GHC.Show.shows6
                                    (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w))))) }) -}
4f001468d2fe904a7b1340d4f2618392
  $w$cshowsPrec7 ::
    GHC.Prim.Int# -> XBarType.Comp -> XBarType.TenseP -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,U><L,U(U)><L,1*U(1*U(1*U(U,1*U(1*U))),1*U(U(U),1*U(1*U)))>,
     Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: XBarType.Comp
                   ww2 :: XBarType.TenseP ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = case ww2 of ww3 { XBarType.TenseP ww4 ww5 ->
                     XBarType.$w$cshowsPrec8 11 ww4 ww5 }
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ x :: GHC.Base.String ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       XBarType.$fShowCompBar2
                       (case ww1 of ww3 { XBarType.Comp ww4 ->
                        XBarType.$w$cshowsPrec6
                          11
                          ww4
                          (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x)) })
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ x :: GHC.Base.String ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x)) }) -}
4f001468d2fe904a7b1340d4f2618392
  $w$cshowsPrec8 ::
    GHC.Prim.Int#
    -> XBarType.DetP -> XBarType.TenseBar -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,U><L,1*U(1*U(U,1*U(1*U)))><L,1*U(U(U),1*U(1*U))>,
     Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: XBarType.DetP
                   ww2 :: XBarType.TenseBar ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = case ww1 of ww3 { XBarType.DetP ww4 ->
                     XBarType.$w$cshowsPrec13 11 ww4 }
                 } in
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = case ww2 of ww3 { XBarType.TenseBar ww4 ww5 ->
                     XBarType.$w$cshowsPrec9 11 ww4 ww5 }
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False
                   -> \ x :: GHC.Base.String ->
                      GHC.Base.++
                        @ GHC.Types.Char
                        XBarType.$fShowCompBar3
                        (f (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x)))
                   GHC.Types.True
                   -> \ x :: GHC.Base.String ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           XBarType.$fShowCompBar3
                           (f (GHC.Types.:
                                 @ GHC.Types.Char
                                 GHC.Show.showSpace1
                                 (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x))))) }) -}
4f001468d2fe904a7b1340d4f2618392
  $w$cshowsPrec9 ::
    GHC.Prim.Int# -> XBarType.Tense -> XBarType.VerbP -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U><L,U(U)><L,1*U(1*U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: XBarType.Tense
                   ww2 :: XBarType.VerbP ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = case ww2 of ww3 { XBarType.VerbP ww4 ->
                     XBarType.$w$cshowsPrec11 11 ww4 }
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ x :: GHC.Base.String ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       XBarType.$fShowCompBar5
                       (case ww1 of ww3 { XBarType.Tense ww4 ->
                        XBarType.$w$cshowsPrec10
                          11
                          ww4
                          (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x)) })
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ x :: GHC.Base.String ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x)) }) -}
1cf95d74cf8034e3cd8743015f534f02
  $wa ::
    GHC.Prim.Int#
    -> forall b.
       (XBarType.Adj -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   @ b
                   w :: XBarType.Adj -> Text.ParserCombinators.ReadP.P b ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 10) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> let {
                        lvl78 :: Text.ParserCombinators.ReadP.P b
                        = let {
                            lvl79 :: Text.ParserCombinators.ReadP.P b
                            = GHC.Read.$wa19
                                @ b
                                (\ a11 :: GHC.Base.String -> w (XBarType.Adj a11))
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ a98 :: Text.Read.Lex.Lexeme ->
                             case a98 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a11
                               -> case GHC.Base.eqString a11 XBarType.$fReadAdj4 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl79 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                             Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl78) -}
                        = \ w2 :: () -> lvl78
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ a98 :: GHC.Base.String ->
                         (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                           `cast`
                         (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                           @ b
                           k) }) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $wa1 ::
    GHC.Prim.Int#
    -> forall b.
       (XBarType.AdjBar -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0] -}
fba6555ac73fc085c25046551f89172e
  $wa10 ::
    GHC.Prim.Int#
    -> forall b.
       (XBarType.Det -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   @ b
                   w :: XBarType.Det -> Text.ParserCombinators.ReadP.P b ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 10) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> let {
                        lvl78 :: Text.ParserCombinators.ReadP.P b
                        = let {
                            lvl79 :: Text.ParserCombinators.ReadP.P b
                            = GHC.Read.$wa19
                                @ b
                                (\ a11 :: GHC.Base.String -> w (XBarType.Det a11))
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ a98 :: Text.Read.Lex.Lexeme ->
                             case a98 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a11
                               -> case GHC.Base.eqString a11 XBarType.$fReadDet4 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl79 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                             Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl78) -}
                        = \ w2 :: () -> lvl78
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ a98 :: GHC.Base.String ->
                         (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                           `cast`
                         (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                           @ b
                           k) }) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $wa11 ::
    GHC.Prim.Int#
    -> forall b.
       (XBarType.DetBar -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   @ b
                   w :: XBarType.DetBar -> Text.ParserCombinators.ReadP.P b ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 10) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> let {
                        lvl78 :: Text.ParserCombinators.ReadP.P b
                        = let {
                            lvl79 :: Text.ParserCombinators.ReadP.P b
                            = (XBarType.$fReadDetBar8
                                 @ XBarType.Det
                                 XBarType.$fReadDet
                                 XBarType.$fReadAdjP5)
                                `cast`
                              (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                   <XBarType.Optional XBarType.Det>_R)
                                @ b
                                (\ a11 :: XBarType.Optional XBarType.Det ->
                                 (GHC.Read.$fReadDouble10
                                    @ XBarType.NounP
                                    XBarType.$fReadDetBar5
                                      `cast`
                                    (Trans
                                         (<Text.ParserCombinators.ReadPrec.Prec>_R
                                          ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                        <XBarType.NounP>_R))
                                         (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                   <XBarType.NounP>_R)))
                                    XBarType.$fReadAdjP5)
                                   `cast`
                                 (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <XBarType.NounP>_R)
                                   @ b
                                   (\ a12 :: XBarType.NounP -> w (XBarType.DetBar a11 a12)))
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ a98 :: Text.Read.Lex.Lexeme ->
                             case a98 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a11
                               -> case GHC.Base.eqString a11 XBarType.$fReadDetBar4 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl79 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                             Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl78) -}
                        = \ w2 :: () -> lvl78
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ a98 :: GHC.Base.String ->
                         (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                           `cast`
                         (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                           @ b
                           k) }) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $wa12 ::
    GHC.Prim.Int#
    -> forall b.
       (XBarType.NounP -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   @ b
                   w :: XBarType.NounP -> Text.ParserCombinators.ReadP.P b ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 10) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> let {
                        lvl78 :: Text.ParserCombinators.ReadP.P b
                        = let {
                            lvl79 :: Text.ParserCombinators.ReadP.P b
                            = (GHC.Read.$fReadDouble10
                                 @ XBarType.NounBar
                                 XBarType.$fReadDetBar7
                                   `cast`
                                 (Trans
                                      (<Text.ParserCombinators.ReadPrec.Prec>_R
                                       ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                     <XBarType.NounBar>_R))
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <XBarType.NounBar>_R)))
                                 XBarType.$fReadAdjP5)
                                `cast`
                              (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <XBarType.NounBar>_R)
                                @ b
                                (\ a11 :: XBarType.NounBar -> w (XBarType.NounP a11))
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ a98 :: Text.Read.Lex.Lexeme ->
                             case a98 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a11
                               -> case GHC.Base.eqString a11 XBarType.$fReadDetBar6 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl79 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                             Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl78) -}
                        = \ w2 :: () -> lvl78
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ a98 :: GHC.Base.String ->
                         (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                           `cast`
                         (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                           @ b
                           k) }) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $wa13 ::
    GHC.Prim.Int#
    -> forall b.
       (XBarType.NounBar -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0] -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $wa14 ::
    GHC.Prim.Int#
    -> forall b.
       (XBarType.DetP -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   @ b
                   w :: XBarType.DetP -> Text.ParserCombinators.ReadP.P b ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 10) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> let {
                        lvl78 :: Text.ParserCombinators.ReadP.P b
                        = let {
                            lvl79 :: Text.ParserCombinators.ReadP.P b
                            = (GHC.Read.$fReadDouble10
                                 @ XBarType.DetBar
                                 XBarType.$fReadDetBar3
                                   `cast`
                                 (Trans
                                      (<Text.ParserCombinators.ReadPrec.Prec>_R
                                       ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                     <XBarType.DetBar>_R))
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <XBarType.DetBar>_R)))
                                 XBarType.$fReadAdjP5)
                                `cast`
                              (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <XBarType.DetBar>_R)
                                @ b
                                (\ a11 :: XBarType.DetBar -> w (XBarType.DetP a11))
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ a98 :: Text.Read.Lex.Lexeme ->
                             case a98 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a11
                               -> case GHC.Base.eqString a11 XBarType.$fReadDetP4 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl79 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                             Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl78) -}
                        = \ w2 :: () -> lvl78
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ a98 :: GHC.Base.String ->
                         (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                           `cast`
                         (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                           @ b
                           k) }) -}
62d6653cd93b793cf6a9d8cc4709bbae
  $wa15 ::
    GHC.Prim.Int#
    -> forall b.
       (XBarType.Noun -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   @ b
                   w :: XBarType.Noun -> Text.ParserCombinators.ReadP.P b ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 10) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> let {
                        lvl78 :: Text.ParserCombinators.ReadP.P b
                        = let {
                            lvl79 :: Text.ParserCombinators.ReadP.P b
                            = GHC.Read.$wa19
                                @ b
                                (\ a11 :: GHC.Base.String -> w (XBarType.Noun a11))
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ a98 :: Text.Read.Lex.Lexeme ->
                             case a98 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a11
                               -> case GHC.Base.eqString a11 XBarType.$fReadNoun4 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl79 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                             Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl78) -}
                        = \ w2 :: () -> lvl78
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ a98 :: GHC.Base.String ->
                         (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                           `cast`
                         (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                           @ b
                           k) }) -}
8bd6391fb8e6efed88c486c09471b4b0
  $wa16 ::
    GHC.Prim.Int#
    -> forall b.
       (XBarType.AdvP -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0] -}
4aaee1e15603cb538b52e86409895599
  $wa17 ::
    GHC.Prim.Int#
    -> forall b.
       (XBarType.PrepP -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0] -}
9d4833a771312a804ba6134bfb562299
  $wa18 ::
    GHC.Prim.Int#
    -> forall b.
       (XBarType.Prep -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   @ b
                   w :: XBarType.Prep -> Text.ParserCombinators.ReadP.P b ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 10) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> let {
                        lvl78 :: Text.ParserCombinators.ReadP.P b
                        = let {
                            lvl79 :: Text.ParserCombinators.ReadP.P b
                            = GHC.Read.$wa19
                                @ b
                                (\ a11 :: GHC.Base.String -> w (XBarType.Prep a11))
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ a98 :: Text.Read.Lex.Lexeme ->
                             case a98 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a11
                               -> case GHC.Base.eqString a11 XBarType.$fReadPrep4 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl79 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                             Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl78) -}
                        = \ w2 :: () -> lvl78
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ a98 :: GHC.Base.String ->
                         (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                           `cast`
                         (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                           @ b
                           k) }) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $wa19 ::
    GHC.Prim.Int#
    -> forall b.
       (XBarType.PrepBar -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0] -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $wa2 ::
    GHC.Prim.Int#
    -> forall b.
       (XBarType.AdjP -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   @ b
                   w :: XBarType.AdjP -> Text.ParserCombinators.ReadP.P b ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 10) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> let {
                        lvl78 :: Text.ParserCombinators.ReadP.P b
                        = let {
                            lvl79 :: Text.ParserCombinators.ReadP.P b
                            = (GHC.Read.$fReadDouble10
                                 @ XBarType.AdjBar
                                 XBarType.$fReadAdjBar3
                                   `cast`
                                 (Trans
                                      (<Text.ParserCombinators.ReadPrec.Prec>_R
                                       ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                     <XBarType.AdjBar>_R))
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <XBarType.AdjBar>_R)))
                                 XBarType.$fReadAdjP5)
                                `cast`
                              (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <XBarType.AdjBar>_R)
                                @ b
                                (\ a11 :: XBarType.AdjBar -> w (XBarType.AdjP a11))
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ a98 :: Text.Read.Lex.Lexeme ->
                             case a98 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a11
                               -> case GHC.Base.eqString a11 XBarType.$fReadAdjP4 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl79 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                             Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl78) -}
                        = \ w2 :: () -> lvl78
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ a98 :: GHC.Base.String ->
                         (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                           `cast`
                         (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                           @ b
                           k) }) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $wa20 ::
    ([XBarType.PrepP] -> Text.ParserCombinators.ReadP.P b)
    -> Text.ParserCombinators.ReadP.P b
  {- Arity: 1, Strictness: <L,C(U)>, Inline: [0] -}
7b127aff7a37e546247befcacb7c8e9e
  $wa21 ::
    GHC.Prim.Int#
    -> forall b.
       (XBarType.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   @ b
                   w :: XBarType.Tense -> Text.ParserCombinators.ReadP.P b ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 10) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> let {
                        lvl78 :: Text.ParserCombinators.ReadP.P b
                        = let {
                            lvl79 :: Text.ParserCombinators.ReadP.P b
                            = GHC.Read.$wa19
                                @ b
                                (\ a11 :: GHC.Base.String -> w (XBarType.Tense a11))
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ a98 :: Text.Read.Lex.Lexeme ->
                             case a98 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a11
                               -> case GHC.Base.eqString a11 XBarType.$fReadTense4 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl79 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                             Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl78) -}
                        = \ w2 :: () -> lvl78
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ a98 :: GHC.Base.String ->
                         (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                           `cast`
                         (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                           @ b
                           k) }) -}
4f001468d2fe904a7b1340d4f2618392
  $wa22 ::
    GHC.Prim.Int#
    -> forall b.
       (XBarType.TenseBar -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   @ b
                   w :: XBarType.TenseBar -> Text.ParserCombinators.ReadP.P b ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 10) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> let {
                        lvl78 :: Text.ParserCombinators.ReadP.P b
                        = let {
                            lvl79 :: Text.ParserCombinators.ReadP.P b
                            = (GHC.Read.$fReadDouble10
                                 @ XBarType.Tense
                                 XBarType.$fReadTense3
                                   `cast`
                                 (Trans
                                      (<Text.ParserCombinators.ReadPrec.Prec>_R
                                       ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                     <XBarType.Tense>_R))
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <XBarType.Tense>_R)))
                                 XBarType.$fReadAdjP5)
                                `cast`
                              (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <XBarType.Tense>_R)
                                @ b
                                (\ a11 :: XBarType.Tense ->
                                 (GHC.Read.$fReadDouble10
                                    @ XBarType.VerbP
                                    XBarType.$fReadTenseBar5
                                      `cast`
                                    (Trans
                                         (<Text.ParserCombinators.ReadPrec.Prec>_R
                                          ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                        <XBarType.VerbP>_R))
                                         (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                   <XBarType.VerbP>_R)))
                                    XBarType.$fReadAdjP5)
                                   `cast`
                                 (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <XBarType.VerbP>_R)
                                   @ b
                                   (\ a12 :: XBarType.VerbP -> w (XBarType.TenseBar a11 a12)))
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ a98 :: Text.Read.Lex.Lexeme ->
                             case a98 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a11
                               -> case GHC.Base.eqString a11 XBarType.$fReadTenseBar4 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl79 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                             Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl78) -}
                        = \ w2 :: () -> lvl78
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ a98 :: GHC.Base.String ->
                         (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                           `cast`
                         (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                           @ b
                           k) }) -}
4f001468d2fe904a7b1340d4f2618392
  $wa23 ::
    GHC.Prim.Int#
    -> forall b.
       (XBarType.VerbP -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   @ b
                   w :: XBarType.VerbP -> Text.ParserCombinators.ReadP.P b ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 10) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> let {
                        lvl78 :: Text.ParserCombinators.ReadP.P b
                        = let {
                            lvl79 :: Text.ParserCombinators.ReadP.P b
                            = (GHC.Read.$fReadDouble10
                                 @ XBarType.VerbBar
                                 XBarType.$fReadTenseBar7
                                   `cast`
                                 (Trans
                                      (<Text.ParserCombinators.ReadPrec.Prec>_R
                                       ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                     <XBarType.VerbBar>_R))
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <XBarType.VerbBar>_R)))
                                 XBarType.$fReadAdjP5)
                                `cast`
                              (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <XBarType.VerbBar>_R)
                                @ b
                                (\ a11 :: XBarType.VerbBar -> w (XBarType.VerbP a11))
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ a98 :: Text.Read.Lex.Lexeme ->
                             case a98 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a11
                               -> case GHC.Base.eqString a11 XBarType.$fReadTenseBar6 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl79 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                             Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl78) -}
                        = \ w2 :: () -> lvl78
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ a98 :: GHC.Base.String ->
                         (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                           `cast`
                         (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                           @ b
                           k) }) -}
4f001468d2fe904a7b1340d4f2618392
  $wa24 ::
    GHC.Prim.Int#
    -> forall b.
       (XBarType.VerbBar -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0] -}
5b5bb35beb8c49aeda693fec96ba7d0c
  $wa25 ::
    GHC.Prim.Int#
    -> forall b.
       (XBarType.Verb -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   @ b
                   w :: XBarType.Verb -> Text.ParserCombinators.ReadP.P b ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 10) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> let {
                        lvl78 :: Text.ParserCombinators.ReadP.P b
                        = let {
                            lvl79 :: Text.ParserCombinators.ReadP.P b
                            = GHC.Read.$wa19
                                @ b
                                (\ a11 :: GHC.Base.String -> w (XBarType.Verb a11))
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ a98 :: Text.Read.Lex.Lexeme ->
                             case a98 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a11
                               -> case GHC.Base.eqString a11 XBarType.$fReadVerb4 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl79 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                             Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl78) -}
                        = \ w2 :: () -> lvl78
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ a98 :: GHC.Base.String ->
                         (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                           `cast`
                         (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                           @ b
                           k) }) -}
b210e39e480af28620788baa98bef96d
  $wa3 ::
    GHC.Prim.Int#
    -> forall b.
       (XBarType.Adv -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   @ b
                   w :: XBarType.Adv -> Text.ParserCombinators.ReadP.P b ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 10) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> let {
                        lvl78 :: Text.ParserCombinators.ReadP.P b
                        = let {
                            lvl79 :: Text.ParserCombinators.ReadP.P b
                            = GHC.Read.$wa19
                                @ b
                                (\ a11 :: GHC.Base.String -> w (XBarType.Adv a11))
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ a98 :: Text.Read.Lex.Lexeme ->
                             case a98 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a11
                               -> case GHC.Base.eqString a11 XBarType.$fReadAdv4 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl79 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                             Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl78) -}
                        = \ w2 :: () -> lvl78
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ a98 :: GHC.Base.String ->
                         (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                           `cast`
                         (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                           @ b
                           k) }) -}
a84521cf9655e5e74dadfb60f7ad7a69
  $wa4 ::
    GHC.Prim.Int#
    -> forall b.
       (XBarType.AdvBar -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   @ b
                   w :: XBarType.AdvBar -> Text.ParserCombinators.ReadP.P b ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 10) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> let {
                        lvl78 :: Text.ParserCombinators.ReadP.P b
                        = let {
                            lvl79 :: Text.ParserCombinators.ReadP.P b
                            = (GHC.Read.$fReadDouble10
                                 @ XBarType.Adv
                                 XBarType.$fReadAdv3
                                   `cast`
                                 (Trans
                                      (<Text.ParserCombinators.ReadPrec.Prec>_R
                                       ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                     <XBarType.Adv>_R))
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <XBarType.Adv>_R)))
                                 XBarType.$fReadAdjP5)
                                `cast`
                              (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <XBarType.Adv>_R)
                                @ b
                                (\ a11 :: XBarType.Adv -> w (XBarType.AdvBar a11))
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ a98 :: Text.Read.Lex.Lexeme ->
                             case a98 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a11
                               -> case GHC.Base.eqString a11 XBarType.$fReadAdvBar4 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl79 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                             Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl78) -}
                        = \ w2 :: () -> lvl78
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ a98 :: GHC.Base.String ->
                         (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                           `cast`
                         (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                           @ b
                           k) }) -}
32b2b052f97ff50938e5bd2a53ab9d0d
  $wa5 ::
    ([XBarType.AdvP] -> Text.ParserCombinators.ReadP.P b)
    -> Text.ParserCombinators.ReadP.P b
  {- Arity: 1, Strictness: <L,C(U)>, Inline: [0] -}
fe8691e5b20e4567836977d90780b734
  $wa6 ::
    GHC.Prim.Int#
    -> forall b.
       (XBarType.Comp -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   @ b
                   w :: XBarType.Comp -> Text.ParserCombinators.ReadP.P b ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 10) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> let {
                        lvl78 :: Text.ParserCombinators.ReadP.P b
                        = let {
                            lvl79 :: Text.ParserCombinators.ReadP.P b
                            = GHC.Read.$wa19
                                @ b
                                (\ a11 :: GHC.Base.String -> w (XBarType.Comp a11))
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ a98 :: Text.Read.Lex.Lexeme ->
                             case a98 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a11
                               -> case GHC.Base.eqString a11 XBarType.$fReadComp4 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl79 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                             Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl78) -}
                        = \ w2 :: () -> lvl78
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ a98 :: GHC.Base.String ->
                         (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                           `cast`
                         (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                           @ b
                           k) }) -}
4f001468d2fe904a7b1340d4f2618392
  $wa7 ::
    GHC.Prim.Int#
    -> forall b.
       (XBarType.CompBar -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   @ b
                   w :: XBarType.CompBar -> Text.ParserCombinators.ReadP.P b ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 10) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> let {
                        lvl78 :: Text.ParserCombinators.ReadP.P b
                        = let {
                            lvl79 :: Text.ParserCombinators.ReadP.P b
                            = (GHC.Read.$fReadDouble10
                                 @ XBarType.Comp
                                 XBarType.$fReadComp3
                                   `cast`
                                 (Trans
                                      (<Text.ParserCombinators.ReadPrec.Prec>_R
                                       ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                     <XBarType.Comp>_R))
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <XBarType.Comp>_R)))
                                 XBarType.$fReadAdjP5)
                                `cast`
                              (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <XBarType.Comp>_R)
                                @ b
                                (\ a11 :: XBarType.Comp ->
                                 (GHC.Read.$fReadDouble10
                                    @ XBarType.TenseP
                                    XBarType.$fReadCompBar5
                                      `cast`
                                    (Trans
                                         (<Text.ParserCombinators.ReadPrec.Prec>_R
                                          ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                        <XBarType.TenseP>_R))
                                         (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                   <XBarType.TenseP>_R)))
                                    XBarType.$fReadAdjP5)
                                   `cast`
                                 (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <XBarType.TenseP>_R)
                                   @ b
                                   (\ a12 :: XBarType.TenseP -> w (XBarType.CompBar a11 a12)))
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ a98 :: Text.Read.Lex.Lexeme ->
                             case a98 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a11
                               -> case GHC.Base.eqString a11 XBarType.$fReadCompBar4 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl79 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                             Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl78) -}
                        = \ w2 :: () -> lvl78
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ a98 :: GHC.Base.String ->
                         (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                           `cast`
                         (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                           @ b
                           k) }) -}
4f001468d2fe904a7b1340d4f2618392
  $wa8 ::
    GHC.Prim.Int#
    -> forall b.
       (XBarType.TenseP -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0] -}
4f001468d2fe904a7b1340d4f2618392
  $wa9 ::
    GHC.Prim.Int#
    -> forall b.
       (XBarType.CompP -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   @ b
                   w :: XBarType.CompP -> Text.ParserCombinators.ReadP.P b ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 10) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> let {
                        lvl78 :: Text.ParserCombinators.ReadP.P b
                        = let {
                            lvl79 :: Text.ParserCombinators.ReadP.P b
                            = (GHC.Read.$fReadDouble10
                                 @ XBarType.CompBar
                                 XBarType.$fReadCompBar3
                                   `cast`
                                 (Trans
                                      (<Text.ParserCombinators.ReadPrec.Prec>_R
                                       ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                     <XBarType.CompBar>_R))
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <XBarType.CompBar>_R)))
                                 XBarType.$fReadAdjP5)
                                `cast`
                              (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <XBarType.CompBar>_R)
                                @ b
                                (\ a11 :: XBarType.CompBar -> w (XBarType.CompP a11))
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ a98 :: Text.Read.Lex.Lexeme ->
                             case a98 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a11
                               -> case GHC.Base.eqString a11 XBarType.$fReadCompP4 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl79 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                             Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl78) -}
                        = \ w2 :: () -> lvl78
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ a98 :: GHC.Base.String ->
                         (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                           `cast`
                         (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                           @ b
                           k) }) -}
1cf95d74cf8034e3cd8743015f534f02
  data Adj = Adj GHC.Base.String
32b2b052f97ff50938e5bd2a53ab9d0d
  data AdjBar
    = AdjBar1 XBarType.AdvP XBarType.AdjBar
    | AdjBar2 XBarType.AdjP XBarType.AdjBar
    | AdjBar3 XBarType.AdjBar (XBarType.Optional XBarType.PrepP)
    | AdjBar4 XBarType.Adj (XBarType.Optional XBarType.PrepP)
32b2b052f97ff50938e5bd2a53ab9d0d
  data AdjP = AdjP XBarType.AdjBar
b210e39e480af28620788baa98bef96d
  data Adv = Adv GHC.Base.String
a84521cf9655e5e74dadfb60f7ad7a69
  data AdvBar = AdvBar XBarType.Adv
32b2b052f97ff50938e5bd2a53ab9d0d
  data AdvP = AdvP (XBarType.Optional XBarType.AdvP) XBarType.AdvBar
    RecFlag: Recursive
fe8691e5b20e4567836977d90780b734
  data Comp = Comp GHC.Base.String
4f001468d2fe904a7b1340d4f2618392
  data CompBar = CompBar XBarType.Comp XBarType.TenseP
4f001468d2fe904a7b1340d4f2618392
  data CompP = CompP XBarType.CompBar
fba6555ac73fc085c25046551f89172e
  data Det = Det GHC.Base.String
32b2b052f97ff50938e5bd2a53ab9d0d
  data DetBar
    = DetBar (XBarType.Optional XBarType.Det) XBarType.NounP
32b2b052f97ff50938e5bd2a53ab9d0d
  data DetP = DetP XBarType.DetBar
62d6653cd93b793cf6a9d8cc4709bbae
  data Noun = Noun GHC.Base.String
32b2b052f97ff50938e5bd2a53ab9d0d
  data NounBar
    = NounBar1 XBarType.AdjP XBarType.NounBar
    | NounBar2 XBarType.NounBar XBarType.PrepP
    | NounBar3 XBarType.Noun (XBarType.Optional XBarType.PrepP)
32b2b052f97ff50938e5bd2a53ab9d0d
  data NounP = NounP XBarType.NounBar
32b2b052f97ff50938e5bd2a53ab9d0d
  data Optional a = YesOpt a | NoOpt
    Promotable
9d4833a771312a804ba6134bfb562299
  data Prep = Prep GHC.Base.String
32b2b052f97ff50938e5bd2a53ab9d0d
  data PrepBar
    = PrepBar1 XBarType.PrepBar (XBarType.Optional XBarType.PrepP)
    | PrepBar2 XBarType.Prep XBarType.DetP
32b2b052f97ff50938e5bd2a53ab9d0d
  data PrepP
    = PrepP (XBarType.Optional XBarType.AdjP) XBarType.PrepBar
7b127aff7a37e546247befcacb7c8e9e
  data Tense = Tense GHC.Base.String
4f001468d2fe904a7b1340d4f2618392
  data TenseBar = TenseBar XBarType.Tense XBarType.VerbP
4f001468d2fe904a7b1340d4f2618392
  data TenseP = TenseP XBarType.DetP XBarType.TenseBar
5b5bb35beb8c49aeda693fec96ba7d0c
  data Verb = Verb GHC.Base.String
4f001468d2fe904a7b1340d4f2618392
  data VerbBar
    = VerbBar1 XBarType.AdvP XBarType.VerbBar
    | VerbBar2 XBarType.VerbBar XBarType.PrepP
    | VerbBar3 XBarType.VerbBar XBarType.AdvP
    | VerbBar4 XBarType.Verb XBarType.CompP
    | VerbBar5 XBarType.Verb XBarType.NounP
4f001468d2fe904a7b1340d4f2618392
  data VerbP = VerbP XBarType.VerbBar
instance GHC.Read.Read [XBarType.Adj] = XBarType.$fReadAdj
instance GHC.Read.Read [XBarType.AdjBar] = XBarType.$fReadAdjBar
instance GHC.Read.Read [XBarType.AdjP] = XBarType.$fReadAdjP
instance GHC.Read.Read [XBarType.Adv] = XBarType.$fReadAdv
instance GHC.Read.Read [XBarType.AdvBar] = XBarType.$fReadAdvBar
instance GHC.Read.Read [XBarType.AdvP] = XBarType.$fReadAdvP
instance GHC.Read.Read [XBarType.Comp] = XBarType.$fReadComp
instance GHC.Read.Read [XBarType.CompBar] = XBarType.$fReadCompBar
instance GHC.Read.Read [XBarType.CompP] = XBarType.$fReadCompP
instance GHC.Read.Read [XBarType.Det] = XBarType.$fReadDet
instance GHC.Read.Read [XBarType.DetBar] = XBarType.$fReadDetBar
instance GHC.Read.Read [XBarType.DetP] = XBarType.$fReadDetP
instance GHC.Read.Read [XBarType.Noun] = XBarType.$fReadNoun
instance GHC.Read.Read [XBarType.NounBar] = XBarType.$fReadNounBar
instance GHC.Read.Read [XBarType.NounP] = XBarType.$fReadNounP
instance GHC.Read.Read [XBarType.Optional]
  = XBarType.$fReadOptional
instance GHC.Read.Read [XBarType.Prep] = XBarType.$fReadPrep
instance GHC.Read.Read [XBarType.PrepBar] = XBarType.$fReadPrepBar
instance GHC.Read.Read [XBarType.PrepP] = XBarType.$fReadPrepP
instance GHC.Read.Read [XBarType.Tense] = XBarType.$fReadTense
instance GHC.Read.Read [XBarType.TenseBar]
  = XBarType.$fReadTenseBar
instance GHC.Read.Read [XBarType.TenseP] = XBarType.$fReadTenseP
instance GHC.Read.Read [XBarType.Verb] = XBarType.$fReadVerb
instance GHC.Read.Read [XBarType.VerbBar] = XBarType.$fReadVerbBar
instance GHC.Read.Read [XBarType.VerbP] = XBarType.$fReadVerbP
instance GHC.Show.Show [XBarType.Adj] = XBarType.$fShowAdj
instance GHC.Show.Show [XBarType.AdjBar] = XBarType.$fShowAdjBar
instance GHC.Show.Show [XBarType.AdjP] = XBarType.$fShowAdjP
instance GHC.Show.Show [XBarType.Adv] = XBarType.$fShowAdv
instance GHC.Show.Show [XBarType.AdvBar] = XBarType.$fShowAdvBar
instance GHC.Show.Show [XBarType.AdvP] = XBarType.$fShowAdvP
instance GHC.Show.Show [XBarType.Comp] = XBarType.$fShowComp
instance GHC.Show.Show [XBarType.CompBar] = XBarType.$fShowCompBar
instance GHC.Show.Show [XBarType.CompP] = XBarType.$fShowCompP
instance GHC.Show.Show [XBarType.Det] = XBarType.$fShowDet
instance GHC.Show.Show [XBarType.DetBar] = XBarType.$fShowDetBar
instance GHC.Show.Show [XBarType.DetP] = XBarType.$fShowDetP
instance GHC.Show.Show [XBarType.Noun] = XBarType.$fShowNoun
instance GHC.Show.Show [XBarType.NounBar] = XBarType.$fShowNounBar
instance GHC.Show.Show [XBarType.NounP] = XBarType.$fShowNounP
instance GHC.Show.Show [XBarType.Optional]
  = XBarType.$fShowOptional
instance GHC.Show.Show [XBarType.Prep] = XBarType.$fShowPrep
instance GHC.Show.Show [XBarType.PrepBar] = XBarType.$fShowPrepBar
instance GHC.Show.Show [XBarType.PrepP] = XBarType.$fShowPrepP
instance GHC.Show.Show [XBarType.Tense] = XBarType.$fShowTense
instance GHC.Show.Show [XBarType.TenseBar]
  = XBarType.$fShowTenseBar
instance GHC.Show.Show [XBarType.TenseP] = XBarType.$fShowTenseP
instance GHC.Show.Show [XBarType.Verb] = XBarType.$fShowVerb
instance GHC.Show.Show [XBarType.VerbBar] = XBarType.$fShowVerbBar
instance GHC.Show.Show [XBarType.VerbP] = XBarType.$fShowVerbP
"SPEC $cshowsPrec @ AdjP" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                      XBarType.AdjP
  XBarType.$fShowOptional_$cshowsPrec @ XBarType.AdjP $dShow
  = XBarType.$fShowOptional_$s$cshowsPrec
"SPEC $cshowsPrec @ AdvP" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                      XBarType.AdvP
  XBarType.$fShowOptional_$cshowsPrec @ XBarType.AdvP $dShow
  = XBarType.$fShowAdvP_$s$cshowsPrec
"SPEC $cshowsPrec @ Det" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                     XBarType.Det
  XBarType.$fShowOptional_$cshowsPrec @ XBarType.Det $dShow
  = XBarType.$fShowCompBar_$s$cshowsPrec
"SPEC $cshowsPrec @ PrepP" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                       XBarType.PrepP
  XBarType.$fShowOptional_$cshowsPrec @ XBarType.PrepP $dShow
  = XBarType.$fShowOptional_$s$cshowsPrec1
"SPEC/XBarType $dmreadsPrec @ Adj" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                               XBarType.Adj
  GHC.Read.$dmreadsPrec @ XBarType.Adj $dRead
  = XBarType.$fReadAdj_$s$dmreadsPrec
"SPEC/XBarType $dmreadsPrec @ Adv" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                               XBarType.Adv
  GHC.Read.$dmreadsPrec @ XBarType.Adv $dRead
  = XBarType.$fReadAdv_$s$dmreadsPrec
"SPEC/XBarType $dmreadsPrec @ AdvBar" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                  XBarType.AdvBar
  GHC.Read.$dmreadsPrec @ XBarType.AdvBar $dRead
  = XBarType.$fReadAdvBar_$s$dmreadsPrec
"SPEC/XBarType $dmreadsPrec @ Comp" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                XBarType.Comp
  GHC.Read.$dmreadsPrec @ XBarType.Comp $dRead
  = XBarType.$fReadComp_$s$dmreadsPrec
"SPEC/XBarType $dmreadsPrec @ Det" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                               XBarType.Det
  GHC.Read.$dmreadsPrec @ XBarType.Det $dRead
  = XBarType.$fReadDet_$s$dmreadsPrec
"SPEC/XBarType $dmreadsPrec @ Noun" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                XBarType.Noun
  GHC.Read.$dmreadsPrec @ XBarType.Noun $dRead
  = XBarType.$fReadNoun_$s$dmreadsPrec
"SPEC/XBarType $dmreadsPrec @ Prep" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                XBarType.Prep
  GHC.Read.$dmreadsPrec @ XBarType.Prep $dRead
  = XBarType.$fReadPrep_$s$dmreadsPrec
"SPEC/XBarType $dmreadsPrec @ Tense" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                 XBarType.Tense
  GHC.Read.$dmreadsPrec @ XBarType.Tense $dRead
  = XBarType.$fReadTense_$s$dmreadsPrec
"SPEC/XBarType $dmreadsPrec @ Verb" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                XBarType.Verb
  GHC.Read.$dmreadsPrec @ XBarType.Verb $dRead
  = XBarType.$fReadVerb_$s$dmreadsPrec
"SPEC/XBarType readListDefault @ Adj" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                  XBarType.Adj
  GHC.Read.readListDefault @ XBarType.Adj $dRead
  = XBarType.$fReadAdj_$sreadListDefault
"SPEC/XBarType readListDefault @ AdjBar" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                     XBarType.AdjBar
  GHC.Read.readListDefault @ XBarType.AdjBar $dRead
  = XBarType.$fReadAdjBar_$sreadListDefault
"SPEC/XBarType readListDefault @ Adv" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                  XBarType.Adv
  GHC.Read.readListDefault @ XBarType.Adv $dRead
  = XBarType.$fReadAdv_$sreadListDefault
"SPEC/XBarType readListDefault @ AdvBar" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                     XBarType.AdvBar
  GHC.Read.readListDefault @ XBarType.AdvBar $dRead
  = XBarType.$fReadAdvBar_$sreadListDefault
"SPEC/XBarType readListDefault @ Comp" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                   XBarType.Comp
  GHC.Read.readListDefault @ XBarType.Comp $dRead
  = XBarType.$fReadComp_$sreadListDefault
"SPEC/XBarType readListDefault @ CompBar" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                      XBarType.CompBar
  GHC.Read.readListDefault @ XBarType.CompBar $dRead
  = XBarType.$fReadCompBar_$sreadListDefault
"SPEC/XBarType readListDefault @ CompP" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                    XBarType.CompP
  GHC.Read.readListDefault @ XBarType.CompP $dRead
  = XBarType.$fReadCompP_$sreadListDefault
"SPEC/XBarType readListDefault @ Det" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                  XBarType.Det
  GHC.Read.readListDefault @ XBarType.Det $dRead
  = XBarType.$fReadDet_$sreadListDefault
"SPEC/XBarType readListDefault @ DetBar" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                     XBarType.DetBar
  GHC.Read.readListDefault @ XBarType.DetBar $dRead
  = XBarType.$fReadDetBar_$sreadListDefault
"SPEC/XBarType readListDefault @ DetP" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                   XBarType.DetP
  GHC.Read.readListDefault @ XBarType.DetP $dRead
  = XBarType.$fReadDetP_$sreadListDefault
"SPEC/XBarType readListDefault @ Noun" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                   XBarType.Noun
  GHC.Read.readListDefault @ XBarType.Noun $dRead
  = XBarType.$fReadNoun_$sreadListDefault
"SPEC/XBarType readListDefault @ NounBar" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                      XBarType.NounBar
  GHC.Read.readListDefault @ XBarType.NounBar $dRead
  = XBarType.$fReadNounBar_$sreadListDefault
"SPEC/XBarType readListDefault @ NounP" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                    XBarType.NounP
  GHC.Read.readListDefault @ XBarType.NounP $dRead
  = XBarType.$fReadNounP_$sreadListDefault
"SPEC/XBarType readListDefault @ Prep" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                   XBarType.Prep
  GHC.Read.readListDefault @ XBarType.Prep $dRead
  = XBarType.$fReadPrep_$sreadListDefault
"SPEC/XBarType readListDefault @ PrepBar" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                      XBarType.PrepBar
  GHC.Read.readListDefault @ XBarType.PrepBar $dRead
  = XBarType.$fReadPrepBar_$sreadListDefault
"SPEC/XBarType readListDefault @ Tense" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                    XBarType.Tense
  GHC.Read.readListDefault @ XBarType.Tense $dRead
  = XBarType.$fReadTense_$sreadListDefault
"SPEC/XBarType readListDefault @ TenseBar" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                       XBarType.TenseBar
  GHC.Read.readListDefault @ XBarType.TenseBar $dRead
  = XBarType.$fReadTenseBar_$sreadListDefault
"SPEC/XBarType readListDefault @ TenseP" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                     XBarType.TenseP
  GHC.Read.readListDefault @ XBarType.TenseP $dRead
  = XBarType.$fReadTenseP_$sreadListDefault
"SPEC/XBarType readListDefault @ Verb" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                   XBarType.Verb
  GHC.Read.readListDefault @ XBarType.Verb $dRead
  = XBarType.$fReadVerb_$sreadListDefault
"SPEC/XBarType readListDefault @ VerbBar" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                      XBarType.VerbBar
  GHC.Read.readListDefault @ XBarType.VerbBar $dRead
  = XBarType.$fReadVerbBar_$sreadListDefault
"SPEC/XBarType readListDefault @ VerbP" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                    XBarType.VerbP
  GHC.Read.readListDefault @ XBarType.VerbP $dRead
  = XBarType.$fReadVerbP_$sreadListDefault
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

