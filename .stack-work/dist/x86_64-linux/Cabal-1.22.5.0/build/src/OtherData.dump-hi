
==================== FINAL INTERFACE ====================
2016-10-23 00:09:45.066139 UTC

interface conla_1eA9qWUPH9nBowcXqqaV8r:OtherData 7103
  interface hash: 74ed2d728625bcbf0b6c38d36177522a
  ABI hash: e2b50a410ce19d2d27f8b50952de8b42
  export-list hash: f505dec72f229982fb85e59b44566731
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 962af636f8e927040c7daa9c21457292
  sig of: Nothing
  used TH splices: False
  where
exports:
  OtherData.SyllWord{OtherData.SyllWord}
  OtherData.Syllable{OtherData.Syllable OtherData.getCoda OtherData.getNucleus OtherData.getOnset}
module dependencies: PhonemeData
package dependencies: base-4.8.2.0* ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Monoid
                         base-4.8.2.0:Data.Type.Equality base-4.8.2.0:GHC.Generics
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.Read b423b4506a014855edbd329b567629f3
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  base-4.8.2.0:Text.ParserCombinators.ReadPrec 2590e0e0a57a86ac7c62727f4d868dd2
import  -/  base-4.8.2.0:Text.Read.Lex 724ca44ddd38ddc5f47a501d62736c26
import  -/  PhonemeData fc090a0bcda3a243800b6c4018b433c0
  exports: 6190a60b3ecf64d963416d84612d3413
  Phoneme b470252dd3c1b881fdcf6f5f8e488f7a
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
188e9f4fb1498b6603ef3cbac6b16e4b
  $fEqSyllWord :: GHC.Classes.Eq OtherData.SyllWord
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ OtherData.SyllWord
                  OtherData.$fEqSyllWord_$c==
                  OtherData.$fEqSyllWord_$c/= -}
188e9f4fb1498b6603ef3cbac6b16e4b
  $fEqSyllWord_$c/= ::
    OtherData.SyllWord -> OtherData.SyllWord -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ a1 :: OtherData.SyllWord b :: OtherData.SyllWord ->
                 case a1 of wild { OtherData.SyllWord a2 ->
                 case b of wild1 { OtherData.SyllWord b1 ->
                 case GHC.Classes.$fEq[]_$c==
                        @ OtherData.Syllable
                        OtherData.$fEqSyllable
                        a2
                        b1 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
188e9f4fb1498b6603ef3cbac6b16e4b
  $fEqSyllWord_$c== ::
    OtherData.SyllWord -> OtherData.SyllWord -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: OtherData.SyllWord ds1 :: OtherData.SyllWord ->
                 case ds of wild { OtherData.SyllWord a1 ->
                 case ds1 of wild1 { OtherData.SyllWord b1 ->
                 GHC.Classes.$fEq[]_$c==
                   @ OtherData.Syllable
                   OtherData.$fEqSyllable
                   a1
                   b1 } }) -}
82cacb4fbcd54c7a79c5a699c51fa550
  $fEqSyllable :: GHC.Classes.Eq OtherData.Syllable
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ OtherData.Syllable
                  OtherData.$fEqSyllable_$c==
                  OtherData.$fEqSyllable_$c/= -}
82cacb4fbcd54c7a79c5a699c51fa550
  $fEqSyllable_$c/= ::
    OtherData.Syllable -> OtherData.Syllable -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U,1*U,1*U)><S(SLL),1*U(1*U,1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ a1 :: OtherData.Syllable b :: OtherData.Syllable ->
                 case OtherData.$fEqSyllable_$c== a1 b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
82cacb4fbcd54c7a79c5a699c51fa550
  $fEqSyllable_$c== ::
    OtherData.Syllable -> OtherData.Syllable -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U,1*U,1*U)><S(SLL),1*U(1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: OtherData.Syllable w1 :: OtherData.Syllable ->
                 case w of ww { OtherData.Syllable ww1 ww2 ww3 ->
                 case w1 of ww4 { OtherData.Syllable ww5 ww6 ww7 ->
                 OtherData.$w$c== ww1 ww2 ww3 ww5 ww6 ww7 } }) -}
188e9f4fb1498b6603ef3cbac6b16e4b
  $fReadSyllWord :: GHC.Read.Read OtherData.SyllWord
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ OtherData.SyllWord
                  OtherData.$fReadSyllWord_$creadsPrec
                  OtherData.$fReadSyllWord_$sreadListDefault
                  OtherData.$fReadSyllWord_$creadPrec
                  OtherData.$fReadSyllWord_$creadListPrec -}
188e9f4fb1498b6603ef3cbac6b16e4b
  $fReadSyllWord1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([OtherData.SyllWord] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [OtherData.SyllWord] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ OtherData.SyllWord
                   OtherData.$fReadSyllWord2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <OtherData.SyllWord>_R))
                   @ b
                   eta1) -}
188e9f4fb1498b6603ef3cbac6b16e4b
  $fReadSyllWord2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP OtherData.SyllWord
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ OtherData.SyllWord
                   OtherData.$fReadSyllWord3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <OtherData.SyllWord>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <OtherData.SyllWord>_R)))) -}
188e9f4fb1498b6603ef3cbac6b16e4b
  $fReadSyllWord3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (OtherData.SyllWord -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: OtherData.SyllWord -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 -> OtherData.$wa ww1 @ b w1 }) -}
f2178645e90c2582c6bfcc9529d5a06c
  $fReadSyllWord4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SyllWord"#) -}
82cacb4fbcd54c7a79c5a699c51fa550
  $fReadSyllWord5 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP OtherData.Syllable
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ OtherData.Syllable
                   OtherData.$fReadSyllWord6
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <OtherData.Syllable>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <OtherData.Syllable>_R)))) -}
82cacb4fbcd54c7a79c5a699c51fa550
  $fReadSyllWord6 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (OtherData.Syllable -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: OtherData.Syllable -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 -> OtherData.$wa1 ww1 @ b w1 }) -}
188e9f4fb1498b6603ef3cbac6b16e4b
  $fReadSyllWord_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [OtherData.SyllWord]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                OtherData.$fReadSyllWord1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[OtherData.SyllWord]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[OtherData.SyllWord]>_R))) -}
188e9f4fb1498b6603ef3cbac6b16e4b
  $fReadSyllWord_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec OtherData.SyllWord
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                OtherData.$fReadSyllWord2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <OtherData.SyllWord>_R)) -}
188e9f4fb1498b6603ef3cbac6b16e4b
  $fReadSyllWord_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS OtherData.SyllWord
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadP.run
                   @ OtherData.SyllWord
                   ((GHC.Read.$fReadDouble10
                       @ OtherData.SyllWord
                       OtherData.$fReadSyllWord3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                           <OtherData.SyllWord>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                      <OtherData.SyllWord>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <OtherData.SyllWord>_R)
                      @ OtherData.SyllWord
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ OtherData.SyllWord))) -}
188e9f4fb1498b6603ef3cbac6b16e4b
  $fReadSyllWord_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [OtherData.SyllWord]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [OtherData.SyllWord]
                   ((OtherData.$fReadSyllWord_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[OtherData.SyllWord]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[OtherData.SyllWord]>_R)
                      @ [OtherData.SyllWord]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [OtherData.SyllWord]))) -}
82cacb4fbcd54c7a79c5a699c51fa550
  $fReadSyllable :: GHC.Read.Read OtherData.Syllable
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ OtherData.Syllable
                  OtherData.$fReadSyllable_$s$dmreadsPrec
                  OtherData.$fReadSyllable_$sreadListDefault
                  OtherData.$fReadSyllable_$creadPrec
                  OtherData.$fReadSyllable_$creadListPrec -}
82cacb4fbcd54c7a79c5a699c51fa550
  $fReadSyllable1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([OtherData.Syllable] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [OtherData.Syllable] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ OtherData.Syllable
                   OtherData.$fReadSyllWord5
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <OtherData.Syllable>_R))
                   @ b
                   eta1) -}
82cacb4fbcd54c7a79c5a699c51fa550
  $fReadSyllable_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [OtherData.Syllable]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                OtherData.$fReadSyllable1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[OtherData.Syllable]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[OtherData.Syllable]>_R))) -}
82cacb4fbcd54c7a79c5a699c51fa550
  $fReadSyllable_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec OtherData.Syllable
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                OtherData.$fReadSyllWord5
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <OtherData.Syllable>_R)) -}
82cacb4fbcd54c7a79c5a699c51fa550
  $fReadSyllable_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS OtherData.Syllable
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ OtherData.Syllable
                   OtherData.$fReadSyllable_$creadPrec
                   eta) -}
82cacb4fbcd54c7a79c5a699c51fa550
  $fReadSyllable_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [OtherData.Syllable]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [OtherData.Syllable]
                   ((OtherData.$fReadSyllable_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[OtherData.Syllable]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[OtherData.Syllable]>_R)
                      @ [OtherData.Syllable]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [OtherData.Syllable]))) -}
188e9f4fb1498b6603ef3cbac6b16e4b
  $fShowSyllWord :: GHC.Show.Show OtherData.SyllWord
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ OtherData.SyllWord
                  OtherData.$fShowSyllWord_$cshowsPrec
                  OtherData.$fShowSyllWord_$cshow
                  OtherData.$fShowSyllWord_$cshowList -}
188e9f4fb1498b6603ef3cbac6b16e4b
  $fShowSyllWord1 :: OtherData.SyllWord -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: OtherData.SyllWord w1 :: GHC.Base.String ->
                 case w of ww { OtherData.SyllWord ww1 ->
                 OtherData.$w$cshowsPrec 0 ww1 w1 }) -}
82cacb4fbcd54c7a79c5a699c51fa550
  $fShowSyllWord2 :: OtherData.Syllable -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: OtherData.Syllable w1 :: GHC.Base.String ->
                 case w of ww { OtherData.Syllable ww1 ww2 ww3 ->
                 OtherData.$w$cshowsPrec1 0 ww1 ww2 ww3 w1 }) -}
cd49ae997919c1c27c77930c5657ab4f
  $fShowSyllWord3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SyllWord "#) -}
188e9f4fb1498b6603ef3cbac6b16e4b
  $fShowSyllWord_$cshow :: OtherData.SyllWord -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: OtherData.SyllWord ->
                 OtherData.$fShowSyllWord_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
188e9f4fb1498b6603ef3cbac6b16e4b
  $fShowSyllWord_$cshowList :: [OtherData.SyllWord] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ OtherData.SyllWord
                   OtherData.$fShowSyllWord1) -}
188e9f4fb1498b6603ef3cbac6b16e4b
  $fShowSyllWord_$cshowsPrec ::
    GHC.Types.Int -> OtherData.SyllWord -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S,1*U(1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int
                   w1 :: OtherData.SyllWord
                   w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { OtherData.SyllWord ww3 ->
                 OtherData.$w$cshowsPrec ww1 ww3 w2 } }) -}
82cacb4fbcd54c7a79c5a699c51fa550
  $fShowSyllable :: GHC.Show.Show OtherData.Syllable
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ OtherData.Syllable
                  OtherData.$fShowSyllable_$cshowsPrec
                  OtherData.$fShowSyllable_$cshow
                  OtherData.$fShowSyllable_$cshowList -}
82cacb4fbcd54c7a79c5a699c51fa550
  $fShowSyllable_$cshow :: OtherData.Syllable -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: OtherData.Syllable ->
                 OtherData.$fShowSyllable_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
82cacb4fbcd54c7a79c5a699c51fa550
  $fShowSyllable_$cshowList :: [OtherData.Syllable] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ OtherData.Syllable
                   OtherData.$fShowSyllWord2) -}
82cacb4fbcd54c7a79c5a699c51fa550
  $fShowSyllable_$cshowsPrec ::
    GHC.Types.Int -> OtherData.Syllable -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S,1*U(1*U,1*U,1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int
                   w1 :: OtherData.Syllable
                   w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { OtherData.Syllable ww3 ww4 ww5 ->
                 OtherData.$w$cshowsPrec1 ww1 ww3 ww4 ww5 w2 } }) -}
fc5b6cf86ba6622099e3dae711fcd9f5
  $w$c== ::
    [PhonemeData.Phoneme]
    -> PhonemeData.Phoneme
    -> [PhonemeData.Phoneme]
    -> [PhonemeData.Phoneme]
    -> PhonemeData.Phoneme
    -> [PhonemeData.Phoneme]
    -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ ww :: [PhonemeData.Phoneme]
                   ww1 :: PhonemeData.Phoneme
                   ww2 :: [PhonemeData.Phoneme]
                   ww3 :: [PhonemeData.Phoneme]
                   ww4 :: PhonemeData.Phoneme
                   ww5 :: [PhonemeData.Phoneme] ->
                 case GHC.Classes.$fEq[]_$c==
                        @ PhonemeData.Phoneme
                        PhonemeData.$fEqPhoneme
                        ww
                        ww3 of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case PhonemeData.$fEqPhoneme_$c== ww1 ww4 of wild1 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> GHC.Classes.$fEq[]_$c==
                             @ PhonemeData.Phoneme
                             PhonemeData.$fEqPhoneme
                             ww2
                             ww5 } }) -}
76e31eb4b49a2ca2a0be874e476e00ef
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> [OtherData.Syllable] -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: [OtherData.Syllable]
                   w :: GHC.Base.String ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        OtherData.$fShowSyllWord3
                        (GHC.Show.showList__
                           @ OtherData.Syllable
                           OtherData.$fShowSyllWord2
                           ww1
                           w)
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           OtherData.$fShowSyllWord3
                           (GHC.Show.showList__
                              @ OtherData.Syllable
                              OtherData.$fShowSyllWord2
                              ww1
                              (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w))) }) -}
6ac9082e25a8abe97b7ccdbcc999456e
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> [PhonemeData.Phoneme]
    -> PhonemeData.Phoneme
    -> [PhonemeData.Phoneme]
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 5, Strictness: <L,U><L,1*U><L,1*U><L,1*U><L,U>,
     Inline: [0] -}
188e9f4fb1498b6603ef3cbac6b16e4b
  $wa ::
    GHC.Prim.Int#
    -> forall b.
       (OtherData.SyllWord -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   @ b
                   w :: OtherData.SyllWord -> Text.ParserCombinators.ReadP.P b ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 10) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> let {
                        lvl78 :: Text.ParserCombinators.ReadP.P b
                        = let {
                            lvl79 :: Text.ParserCombinators.ReadP.P b
                            = GHC.Read.$wa
                                @ OtherData.Syllable
                                OtherData.$fReadSyllWord5
                                  `cast`
                                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                          <OtherData.Syllable>_R))
                                @ b
                                (\ a7 :: [OtherData.Syllable] -> w (OtherData.SyllWord a7))
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ a98 :: Text.Read.Lex.Lexeme ->
                             case a98 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a1
                               -> case GHC.Base.eqString a1 OtherData.$fReadSyllWord4 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl79 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                             Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl78) -}
                        = \ w2 :: () -> lvl78
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ a98 :: GHC.Base.String ->
                         (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                           `cast`
                         (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                           @ b
                           k) }) -}
82cacb4fbcd54c7a79c5a699c51fa550
  $wa1 ::
    GHC.Prim.Int#
    -> forall b.
       (OtherData.Syllable -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0] -}
188e9f4fb1498b6603ef3cbac6b16e4b
  data SyllWord = SyllWord [OtherData.Syllable]
82cacb4fbcd54c7a79c5a699c51fa550
  data Syllable
    = Syllable {getOnset :: [PhonemeData.Phoneme],
                getNucleus :: PhonemeData.Phoneme,
                getCoda :: [PhonemeData.Phoneme]}
f88155fa0417b79ed2374cf9da0f3bd7
  getCoda :: OtherData.Syllable -> [PhonemeData.Phoneme]
  RecSel OtherData.Syllable
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: OtherData.Syllable ->
                 case ds of wild { OtherData.Syllable ds1 ds2 ds3 -> ds3 }) -}
d2a736b0d6bae47c53ec8be331d80056
  getNucleus :: OtherData.Syllable -> PhonemeData.Phoneme
  RecSel OtherData.Syllable
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: OtherData.Syllable ->
                 case ds of wild { OtherData.Syllable ds1 ds2 ds3 -> ds2 }) -}
e742070bff6140604c78948874b7ec15
  getOnset :: OtherData.Syllable -> [PhonemeData.Phoneme]
  RecSel OtherData.Syllable
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: OtherData.Syllable ->
                 case ds of wild { OtherData.Syllable ds1 ds2 ds3 -> ds1 }) -}
instance GHC.Classes.Eq [OtherData.SyllWord]
  = OtherData.$fEqSyllWord
instance GHC.Classes.Eq [OtherData.Syllable]
  = OtherData.$fEqSyllable
instance GHC.Read.Read [OtherData.SyllWord]
  = OtherData.$fReadSyllWord
instance GHC.Read.Read [OtherData.Syllable]
  = OtherData.$fReadSyllable
instance GHC.Show.Show [OtherData.SyllWord]
  = OtherData.$fShowSyllWord
instance GHC.Show.Show [OtherData.Syllable]
  = OtherData.$fShowSyllable
"SPEC/OtherData $dmreadsPrec @ Syllable" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                     OtherData.Syllable
  GHC.Read.$dmreadsPrec @ OtherData.Syllable $dRead
  = OtherData.$fReadSyllable_$s$dmreadsPrec
"SPEC/OtherData readListDefault @ SyllWord" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                        OtherData.SyllWord
  GHC.Read.readListDefault @ OtherData.SyllWord $dRead
  = OtherData.$fReadSyllWord_$sreadListDefault
"SPEC/OtherData readListDefault @ Syllable" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                        OtherData.Syllable
  GHC.Read.readListDefault @ OtherData.Syllable $dRead
  = OtherData.$fReadSyllable_$sreadListDefault
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

