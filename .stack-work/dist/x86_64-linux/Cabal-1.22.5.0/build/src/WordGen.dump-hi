
==================== FINAL INTERFACE ====================
2016-11-02 14:46:10.087193 UTC

interface conla_1eA9qWUPH9nBowcXqqaV8r:WordGen 7103
  interface hash: a4069fb203dd7db7c95eeed8e15db115
  ABI hash: 5aa3b7d1957a69e2673e41e5e8bdc31f
  export-list hash: 9dfefff67ac26aa86a6a1d79ec7432b6
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 962af636f8e927040c7daa9c21457292
  sig of: Nothing
  used TH splices: False
  where
exports:
  WordGen.makeDictionary
  WordGen.makeMorpheme
module dependencies: OtherData PhonemeData PhonemeGen
                     PhonotacticsGen
package dependencies: MonadPrompt-1.0.0.5@Monad_5vpMHuuRBzi4bKjpRN3A9L
                      MonadRandom-0.4.2.3@Monad_I7tEJH7vOtsKQS7CpG48fz
                      array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA base-4.8.2.0
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59
                      erf-2.0.0.0@erf_6l78BnvLL4b2mWYp3HJJxX
                      flexible-defaults-0.0.1.2@flexi_70LqvhG3vbS8bRvV8pHtMk
                      ghc-prim-0.4.0.0 integer-gmp-1.0.0.0
                      math-functions-0.1.7.0@mathf_BN6S7j0ar3LC4TsnYu0us5
                      mersenne-random-pure64-0.2.0.5@merse_42koSxEhmjwBS69WXi19xI
                      monad-loops-0.4.3@monad_LQiHRUYhFhYBU7nOOWDOrb
                      mtl-2.2.1@mtl_Aue4leSeVkpKLsfHIV51E8
                      mwc-random-0.13.4.0@mwcra_0lrQ1SkkNA85sa8eZ98xQk
                      old-locale-1.0.0.7@oldlo_7h2Gx6mVPJ5Gheca8j9Mpe
                      old-time-1.1.0.3@oldti_JVjJvknZJ0JKghfag2Jw2L
                      pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC
                      primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3
                      random-extras-0.19@rando_11jAc932BDRD7ydjCrRr4L
                      random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW
                      random-1.1@rando_9Kgekc9yEaLHLNUuw6paWL
                      random-shuffle-0.0.4@rando_9kOz9tEn1526ShtWz8x59X
                      random-fu-0.2.7.0@rando_HO0DW1nA2fDCxZJ62mvJHr
                      rvar-0.2.0.3@rvar_HDSuhGFxwNTDX4EfF6w8WG
                      stateref-0.3@state_KptOBHsY85L8YzpDAos2Hi
                      stm-2.4.4.1@stm_EyxFXFfnfY05IrjGaqCxeD
                      syb-0.6@syb_4kccWaTe3QZLxAMQYKgEyE template-haskell-2.10.0.0
                      th-extras-0.0.0.4@thext_LRY1RUMy7ShLl2tqhMyHdO
                      time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn
                      transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF
                      vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln
orphans: MonadRandom-0.4.2.3@Monad_I7tEJH7vOtsKQS7CpG48fz:Control.Monad.Random
         base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         mersenne-random-pure64-0.2.0.5@merse_42koSxEhmjwBS69WXi19xI:System.Random.Mersenne.Pure64
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source.IO
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source.MWC
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source.PureMT
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source.StdGen
         stateref-0.3@state_KptOBHsY85L8YzpDAos2Hi:Data.StateRef.Instances
         stateref-0.3@state_KptOBHsY85L8YzpDAos2Hi:Data.StateRef.Instances.STM
         stm-2.4.4.1@stm_EyxFXFfnfY05IrjGaqCxeD:Control.Monad.STM
         syb-0.6@syb_4kccWaTe3QZLxAMQYKgEyE:Data.Generics.Instances
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Calendar.Gregorian
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Format.Parse
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.LocalTime.LocalTime
         transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.Trans.Error
         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Fusion.Bundle
         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Sequence
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
                         mwc-random-0.13.4.0@mwcra_0lrQ1SkkNA85sa8eZ98xQk:System.Random.MWC
                         pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3:Control.Monad.Primitive
                         template-haskell-2.10.0.0:Language.Haskell.TH.Syntax
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Primitive
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed.Base
import  -/  base-4.8.2.0:Control.Monad 480c5067477275068c9b98be08410df9
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:Data.Functor 5c701b0af1708f0192a25dfe14ce6274
import  -/  base-4.8.2.0:Data.List 3f0782c8d4bf50eecefcd5ea1798aac8
import  -/  base-4.8.2.0:Data.OldList d8fd80b0e14aa085ce6219cd89dad356
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  OtherData ef85631315e8bb1c90bd776e9bb7751c
  exports: f505dec72f229982fb85e59b44566731
import  -/  PhonemeData 86639d5baa3c8896a59c20b5d5d0708d
  exports: 8834c83badd5837275d7ec1bbd2f424a
  Morpheme 638ca31a2fd80dc92fadb76f1b8badfd
  Morpheme f6ac1984a4423d03613ec94d362955ea
  Phoneme 725a483aa2dd4b7c0473c29cf990b878
  Word 58728e383c3ae1ba22d7c75c2611ac1b
  Word 53dc4151a59abddfd798786b00d0a617
import  -/  PhonemeGen 44431a2b9295a7efdbb24a370fea6130
  exports: ac2fac7549593bb4b2279f37f817f5be
import  -/  PhonotacticsGen 6b0ffb15d766a08cc9d1828eaa725159
  exports: 5bbf082cfe2be7a4eaae7a2a5f6b7de8
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  random-extras-0.19@rando_11jAc932BDRD7ydjCrRr4L:Data.Random.Extras 5dc1684f88e3f2655bfb5d7aca60bf5c
import  -/  random-fu-0.2.7.0@rando_HO0DW1nA2fDCxZJ62mvJHr:Data.Random 355d6844bb1b3189cb19ec0007f6f130
import  -/  random-fu-0.2.7.0@rando_HO0DW1nA2fDCxZJ62mvJHr:Data.Random.Distribution.Uniform ce34c1edd0e59e868fcf9e0bf914c4ef
import  -/  rvar-0.2.0.3@rvar_HDSuhGFxwNTDX4EfF6w8WG:Data.RVar 9b7fbdb5f1778e76b8a65f45a17cccb1
976c77fc7debc1a1a246468c2569cb78
  $sreplicateM1 ::
    GHC.Types.Int
    -> Data.RVar.RVarT Data.Functor.Identity.Identity a3
    -> forall b.
       ([a3] -> b)
       -> (forall a.
           Control.Monad.Prompt.Lift
             Data.Random.Source.Internal.Prim.Prim
             Data.Functor.Identity.Identity
             a
           -> (a -> b) -> b)
       -> b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><L,U>,
     Unfolding: (\ @ a6
                   n :: GHC.Types.Int
                   x :: Data.RVar.RVarT Data.Functor.Identity.Identity a6 ->
                 WordGen.$sreplicateM2
                   @ a6
                   (case n of wild1 { GHC.Types.I# y ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<# 0 y) of wild {
                      GHC.Types.False
                      -> GHC.Types.[]
                           @ (Data.RVar.RVarT Data.Functor.Identity.Identity a6)
                      GHC.Types.True
                      -> let {
                           lvl3 :: [Data.RVar.RVarT Data.Functor.Identity.Identity a6]
                           = GHC.Types.:
                               @ (Data.RVar.RVarT Data.Functor.Identity.Identity a6)
                               x
                               (GHC.Types.[]
                                  @ (Data.RVar.RVarT Data.Functor.Identity.Identity a6))
                         } in
                         letrec {
                           $wxs :: GHC.Prim.Int#
                                   -> [Data.RVar.RVarT Data.Functor.Identity.Identity a6]
                             {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
                           = \ ww :: GHC.Prim.Int# ->
                             case ww of ds1 {
                               DEFAULT
                               -> GHC.Types.:
                                    @ (Data.RVar.RVarT Data.Functor.Identity.Identity a6)
                                    x
                                    ($wxs (GHC.Prim.-# ds1 1))
                               1 -> lvl3 }
                         } in
                         $wxs y } })) -}
1b2f7479f84fca9c768d6e597203211f
  $sreplicateM2 ::
    [Data.RVar.RVarT Data.Functor.Identity.Identity a3]
    -> forall b.
       ([a3] -> b)
       -> (forall a.
           Control.Monad.Prompt.Lift
             Data.Random.Source.Internal.Prim.Prim
             Data.Functor.Identity.Identity
             a
           -> (a -> b) -> b)
       -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,C(U)><L,U> -}
a9223fbd4bbfb5ca739ca06f93a9d6ea
  $wmakeMorpheme ::
    [PhonemeData.Phoneme]
    -> [[PhonemeData.Phoneme]]
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> Data.RVar.RVar PhonemeData.Morpheme
  {- Arity: 10,
     Strictness: <L,U><L,U><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)>,
     Inline: [0] -}
acbb87d27dc38c203a5e8c0ef4167fee
  makeDictionary ::
    GHC.Types.Int
    -> [PhonemeData.Phoneme]
    -> [[PhonemeData.Phoneme]]
    -> ((GHC.Types.Int, GHC.Types.Int),
        (GHC.Types.Int, GHC.Types.Int),
        (GHC.Types.Int, GHC.Types.Int),
        (GHC.Types.Int, GHC.Types.Int))
    -> Data.RVar.RVar [PhonemeData.Word]
  {- Arity: 4,
     Strictness: <L,1*U(U)><L,U><L,U><L,1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)))>,
     Unfolding: (WordGen.makeDictionary1
                   `cast`
                 (<GHC.Types.Int>_R
                  ->_R <[PhonemeData.Phoneme]>_R
                  ->_R <[[PhonemeData.Phoneme]]>_R
                  ->_R <((GHC.Types.Int, GHC.Types.Int),
                         (GHC.Types.Int, GHC.Types.Int),
                         (GHC.Types.Int, GHC.Types.Int),
                         (GHC.Types.Int, GHC.Types.Int))>_R
                  ->_R Trans
                           (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                     <Control.Monad.Prompt.Lift
                                        Data.Random.Source.Internal.Prim.Prim
                                        Data.Functor.Identity.Identity>_R
                                     <[PhonemeData.Word]>_R))
                           (Trans
                                (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                          <Data.Random.Source.Internal.Prim.Prim>_R
                                          <Data.Functor.Identity.Identity>_R))
                                (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeData.Word]>_N))) -}
da39d1b77ec977f00919908d9c69b8c9
  makeDictionary1 ::
    GHC.Types.Int
    -> [PhonemeData.Phoneme]
    -> [[PhonemeData.Phoneme]]
    -> ((GHC.Types.Int, GHC.Types.Int),
        (GHC.Types.Int, GHC.Types.Int),
        (GHC.Types.Int, GHC.Types.Int),
        (GHC.Types.Int, GHC.Types.Int))
    -> forall b.
       ([PhonemeData.Word] -> b)
       -> (forall a.
           Control.Monad.Prompt.Lift
             Data.Random.Source.Internal.Prim.Prim
             Data.Functor.Identity.Identity
             a
           -> (a -> b) -> b)
       -> b
  {- Arity: 4,
     Strictness: <L,1*U(U)><L,U><L,U><L,1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)))>,
     Unfolding: (\ n :: GHC.Types.Int
                   vows :: [PhonemeData.Phoneme]
                   sonhier :: [[PhonemeData.Phoneme]]
                   settings :: ((GHC.Types.Int, GHC.Types.Int),
                                (GHC.Types.Int, GHC.Types.Int),
                                (GHC.Types.Int, GHC.Types.Int),
                                (GHC.Types.Int, GHC.Types.Int)) ->
                 WordGen.$sreplicateM1
                   @ PhonemeData.Word
                   n
                   (case settings of wild { (,,,) ds ds1 ds2 ds3 ->
                    case ds of wild1 { (,) ns xs ->
                    case ds1 of wild2 { (,) ni xi ->
                    case ds2 of wild3 { (,) nt xt ->
                    case ds3 of wild4 { (,) ne xe ->
                    let {
                      m1 :: Data.RVar.RVarT
                              Data.Functor.Identity.Identity PhonemeData.Morpheme
                      = WordGen.$wmakeMorpheme vows sonhier ns xs ni xi nt xt ne xe
                    } in
                    (\ @ b1
                       eta :: PhonemeData.Word -> b1
                       eta1 :: forall a6.
                               Control.Monad.Prompt.Lift
                                 Data.Random.Source.Internal.Prim.Prim
                                 Data.Functor.Identity.Identity
                                 a6
                               -> (a6 -> b1) -> b1 ->
                     m1
                       `cast`
                     (Trans
                          (Trans
                               (Data.RVar.NTCo:RVarT[0] <Data.Functor.Identity.Identity>_N)
                               (Control.Monad.Prompt.NTCo:PromptT[0]
                                    <Data.Random.Source.Internal.Prim.Prim>_R
                                    <Data.Functor.Identity.Identity>_R) <PhonemeData.Morpheme>_N)
                          (Control.Monad.Prompt.NTCo:Prompt[0]
                               <Control.Monad.Prompt.Lift
                                  Data.Random.Source.Internal.Prim.Prim
                                  Data.Functor.Identity.Identity>_R
                               <PhonemeData.Morpheme>_R))
                       @ b1
                       (\ x :: PhonemeData.Morpheme ->
                        case x of x1 { PhonemeData.Morpheme ipv ->
                        eta
                          (PhonemeData.Word
                             (GHC.Types.:
                                @ PhonemeData.Morpheme
                                x1
                                (GHC.Types.[] @ PhonemeData.Morpheme))) })
                       eta1)
                      `cast`
                    (Trans
                         (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                   <Control.Monad.Prompt.Lift
                                      Data.Random.Source.Internal.Prim.Prim
                                      Data.Functor.Identity.Identity>_R
                                   <PhonemeData.Word>_R))
                         (Trans
                              (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                        <Data.Random.Source.Internal.Prim.Prim>_R
                                        <Data.Functor.Identity.Identity>_R))
                              (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <PhonemeData.Word>_N)) } } } } })) -}
da75a9aaeb42e0ae5821796c1595af68
  makeMorpheme ::
    [PhonemeData.Phoneme]
    -> [[PhonemeData.Phoneme]]
    -> ((GHC.Types.Int, GHC.Types.Int),
        (GHC.Types.Int, GHC.Types.Int),
        (GHC.Types.Int, GHC.Types.Int),
        (GHC.Types.Int, GHC.Types.Int))
    -> Data.RVar.RVar PhonemeData.Morpheme
  {- Arity: 3,
     Strictness: <L,U><L,U><S(SSSS),1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: [PhonemeData.Phoneme]
                   w1 :: [[PhonemeData.Phoneme]]
                   w2 :: ((GHC.Types.Int, GHC.Types.Int),
                          (GHC.Types.Int, GHC.Types.Int),
                          (GHC.Types.Int, GHC.Types.Int),
                          (GHC.Types.Int, GHC.Types.Int)) ->
                 case w2 of ww { (,,,) ww1 ww2 ww3 ww4 ->
                 case ww1 of ww5 { (,) ww6 ww7 ->
                 case ww2 of ww8 { (,) ww9 ww10 ->
                 case ww3 of ww11 { (,) ww12 ww13 ->
                 case ww4 of ww14 { (,) ww15 ww16 ->
                 WordGen.$wmakeMorpheme
                   w
                   w1
                   ww6
                   ww7
                   ww9
                   ww10
                   ww12
                   ww13
                   ww15
                   ww16 } } } } }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

