
==================== FINAL INTERFACE ====================
2016-11-10 18:42:14.187488 UTC

interface conla_1eA9qWUPH9nBowcXqqaV8r:Parse 7103
  interface hash: 90f754e2614b356c66f2cb730d92a945
  ABI hash: 94e789a967663383e8ceb212ebdc8a53
  export-list hash: 772cd31f1c9f5253ac6fdd7b5d2cd9ed
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 9b5f0a9c5ab937702e8736ae3b06ccc6
  sig of: Nothing
  used TH splices: False
  where
exports:
  Parse.parseConPhonemeInventory
  Parse.parseDictionary
  Parse.parseDiphPhonemeInventory
  Parse.parseLCInflection
  Parse.parseLexicalSystems
  Parse.parseSonHier
  Parse.parseVowPhonemeInventory
  Parse.parseWord
module dependencies: GrammarData InflectionData InflectionGen
                     MorphologyGen OtherData PhonemeData PhonemeGen PhonotacticsGen
                     Romanization Syllabification WordGen
package dependencies: MonadPrompt-1.0.0.5@Monad_5vpMHuuRBzi4bKjpRN3A9L
                      MonadRandom-0.4.2.3@Monad_I7tEJH7vOtsKQS7CpG48fz
                      array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA base-4.8.2.0
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59
                      erf-2.0.0.0@erf_6l78BnvLL4b2mWYp3HJJxX
                      flexible-defaults-0.0.1.2@flexi_70LqvhG3vbS8bRvV8pHtMk
                      ghc-prim-0.4.0.0 integer-gmp-1.0.0.0
                      math-functions-0.1.7.0@mathf_BN6S7j0ar3LC4TsnYu0us5
                      mersenne-random-pure64-0.2.0.5@merse_42koSxEhmjwBS69WXi19xI
                      monad-loops-0.4.3@monad_LQiHRUYhFhYBU7nOOWDOrb
                      mtl-2.2.1@mtl_Aue4leSeVkpKLsfHIV51E8
                      mwc-random-0.13.4.0@mwcra_0lrQ1SkkNA85sa8eZ98xQk
                      old-locale-1.0.0.7@oldlo_7h2Gx6mVPJ5Gheca8j9Mpe
                      old-time-1.1.0.3@oldti_JVjJvknZJ0JKghfag2Jw2L
                      pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC
                      primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3
                      random-extras-0.19@rando_11jAc932BDRD7ydjCrRr4L
                      random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW
                      random-1.1@rando_9Kgekc9yEaLHLNUuw6paWL
                      random-shuffle-0.0.4@rando_9kOz9tEn1526ShtWz8x59X
                      random-fu-0.2.7.0@rando_HO0DW1nA2fDCxZJ62mvJHr
                      rvar-0.2.0.3@rvar_HDSuhGFxwNTDX4EfF6w8WG
                      stateref-0.3@state_KptOBHsY85L8YzpDAos2Hi
                      stm-2.4.4.1@stm_EyxFXFfnfY05IrjGaqCxeD
                      syb-0.6@syb_4kccWaTe3QZLxAMQYKgEyE template-haskell-2.10.0.0
                      th-extras-0.0.0.4@thext_LRY1RUMy7ShLl2tqhMyHdO
                      time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn
                      transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF
                      vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln
orphans: MonadRandom-0.4.2.3@Monad_I7tEJH7vOtsKQS7CpG48fz:Control.Monad.Random
         base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         conla_1eA9qWUPH9nBowcXqqaV8r:InflectionData
         mersenne-random-pure64-0.2.0.5@merse_42koSxEhmjwBS69WXi19xI:System.Random.Mersenne.Pure64
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source.IO
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source.MWC
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source.PureMT
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source.StdGen
         stateref-0.3@state_KptOBHsY85L8YzpDAos2Hi:Data.StateRef.Instances
         stateref-0.3@state_KptOBHsY85L8YzpDAos2Hi:Data.StateRef.Instances.STM
         stm-2.4.4.1@stm_EyxFXFfnfY05IrjGaqCxeD:Control.Monad.STM
         syb-0.6@syb_4kccWaTe3QZLxAMQYKgEyE:Data.Generics.Instances
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Calendar.Gregorian
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Format.Parse
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.LocalTime.LocalTime
         transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.Trans.Error
         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Fusion.Bundle
         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Sequence
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
                         mwc-random-0.13.4.0@mwcra_0lrQ1SkkNA85sa8eZ98xQk:System.Random.MWC
                         pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3:Control.Monad.Primitive
                         template-haskell-2.10.0.0:Language.Haskell.TH.Syntax
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Primitive
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed.Base
import  -/  base-4.8.2.0:Control.Arrow ab7f126fed349de468f94ac777dc8f4e
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:Data.List 3f0782c8d4bf50eecefcd5ea1798aac8
import  -/  base-4.8.2.0:Data.OldList d8fd80b0e14aa085ce6219cd89dad356
import  -/  base-4.8.2.0:Data.Tuple 012ad951a59a9d85fe1de36a2f012986
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.Exts 7bdf420b67c4b8c9ccc9ea593e90bb92
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  GrammarData f95f1692a0522ba4f2ab8e4cff233a36
  exports: 0e046bef964de644bb5bb5f62ec92514
import  -/  InflectionData 316dc8b65cfd739af6e59de9ad59bbc6
  exports: 24640cf62a9c3b7f4d5b0c718698bf0c
  ABS 05a045afedddb9bf15d29b2fa7aaeba7
  ABS2 879bfd711be7decae8daff97d283b6c8
  ABS3 57c456cc235b5a3b91f1a11ff5f657eb
  ACC 6f3d6bf2ccecc04720a850b8513a8851
  ACTIVE 0d36727a1a174dcce2d3105cc014a687
  ADP 3de7005926bd6ce1bc0a1eff0bb97d75
  AFF d470cce1ddc0aafb02bf2c558ecea982
  AFUT f5b8fa172ae09a5beefa608b22f063c8
  AFUT1 a626555e6093a7a875ce92753a7a2ef0
  AFUT2 29f56336d512ddab4cde370e748d71a7
  AFUT3 a5a3f39a0e5386aadf008bfdc449c47f
  AN 79cfd13f5a0190a575c3827ec60891bb
  APRS 6a049057bcca9d4fef56fa82adf5c7b1
  APST cbb01fb21a627d05a77a1d82392ac590
  ASS 24eb7b945acd6f2758a0a94dba1e5a03
  AUD 75087ec433baecc364734c0bbd043832
  Adj b6a8748ebc7c8a127004065f39281bf7
  Adpo 7302a0de0ff3a9e61c27a9a3a99c24d5
  Adv c9a0dc74844120cea5856438b029282a
  Animacy 0805e2c872c441491fbbd819376f13b8
  Aspect 851bcc3c94895d395e7cdf9501dbfb00
  COM 4502846563adb4a317c7150557ea0c3f
  COND d61fd6fb5f9a580453e2944b048db77d
  CONT ee4ee588894da1059891550c77271583
  Case f0a3d2a3107908d84564bc0108b3c56f
  DEF b6e4b5e643c5a64d45f0bdba92eb1a09
  DEO 0812b0a2a580b2dee9da7a104b435f64
  DIR 9a9825256d04f73e7c5d5db57f6aa334
  DITRANS e16223f5abec75b50cac6c32071c827b
  DRT1 32fb30babe32ce357fb90f227248d3ae
  DRT2 287f30f80902e875144402a9db5984f0
  DTR 0a74e000efa654ab94dd36f2c31a95f3
  DU 07f744f970b998283878d08a5eb03642
  Definiteness 250913a6cb1bc19b5a2a47309bfa066c
  EPIS 4e814ccefbef97bde0d6c88aa1f97f2c
  ERG d142c77cc934261a0d32fdcc962bf431
  ERG2 a7051b22c89ee7eef6bc59d1a854ac24
  EXP 7197b02dde3697a1c37d4038ed502788
  Evidentiality cdbf36d6698b96caa0bed6ad294bfb83
  Express 0c930380d6cf4f3d845cdce086abbc44
  Express 16ae30a99f963c81137d7828dad80939
  F 2f40cb29e4745a5c1b368d37ae8759a7
  FAM 5564d796ca192928a36472a4d094f544
  FIRST e516cf461188d6fc648a39b95511d610
  FORM 78e21cceb1fc050c8b247cc53f0ea73d
  FSTEXCL ac03faa3f2aba3c493d7ab2e11d1e72c
  FSTINCL 2d6ce277cc108ca7092bf08be0f7dc83
  FUT 059b29730d0f401f47f09fa964dca45d
  FUTPER 558b7186a2deb06bcbba9e6766c13c5f
  Gender a3623d5adfe047fe3ed20dca1c56d9df
  HAB c5b8ce921a3b2ae5606b63c2b776c359
  HSY b621dd4fd151fc1ade817c3e2b64ee12
  HUM a5543bfea635338c902f6ea023e50254
  Honorific 9621aad11f276ef3a5a55be34fb30507
  IMP a2af6ceaf68f1652cec02fbfa3c42e7f
  INAN c44b74ddeb1814ddd2e30e313ff94239
  IND d68e4c1c4d613ec4f0d4ab47fcbfd53f
  INDF 8ce6e5387a754446665c45023e333f43
  INDIR e5155f218b2cbef0e8fdf7f2579ad34f
  INFER 1690b57cbbdf5e853b48a5aecc69baaa
  INTR ee72b9b17186fce0b2c02d1c1ec0cdc8
  IPFV 5d27095f74f7da56e5e4236a9199eba7
  IRR fab7ee1730834b6136f1a52bb9f8044a
  InflectionSystem 340b506daec6555591e5534716353ebf
  JUS a5625d186cf31dfcf193b1ff224a5d89
  LexCat 669f64eab1a11feac3c6144dd5c31025
  M d230cb9cc888706d2a009dddb3a0d799
  MIDDLE 990d37e26fd864ce5bb96a84e83a0be6
  MTR d74e13f29897b8fae3002865284f5dd8
  MTRANS 485a6539018f6fa6e98457eeefa305e6
  Manifest be5dbb905eaa61c91070df8e7b415c52
  Manifest ceb3098f5042182adffdb975609a3c68
  ManifestSystem 44c7a68715dd0f10cb88131d9ccc552a
  ManifestSystem 2dfbbd1074217167272ae1c4beb86ae1
  Mood 4e999fb9fa6728ec3df19bdd28482ccf
  N b93c53d06c7077fe3582de6af0ef92b3
  NEG 1417236b7510609fbdfe2ce93f86255d
  NEU ccd1f661c9bd1e6669b07c8dfdcf4d88
  NHUM 13a447e3f669cdebfe5d5a3da7be3194
  NNPROG 19be91a53a315e0a8270d76dfd9a6807
  NOM e7f504d2aec83e5381ebd1235b42b713
  NOM2 7011eb4b373b956ced9d7bccc271dbcf
  NPROG e07a6907a35eb7fdcfdb8847ec9522a1
  NSPEC dae894605c197fcf1611447510715a45
  NTOP 69b84587a70c17fd33c67847bd2bf604
  NTRANS 895226971e87bfe53f37ab710c320833
  NVIS d4b4eb1558f4a7870cc5a89103399cf2
  NVOL 89715046def474b543a8f8da2d1aaee9
  NoExpress 071999356a33bac64580dd8491d8f357
  NoManifest a1000e139906e0b5e4ac8b6c897a10ea
  Noun 4b3ff1753c1b5bd5340401062ce8e9e3
  Number 5983d4e902f20ca491bfcf4389614668
  OBJ 903171f178492d6d890e614ad81df48b
  OBL1 fe3f93e7dc962efd61a1c9f5567c6144
  OBL2 2e84e3639b7bf2f9d7f5706ada529edf
  OBL3 3cfb5da97e68002e52bd35b4ceb80f8d
  OBL4 1ad11fff00826d31d9dc3fb460914f1d
  OBL5 1ac246115eeaec4e5708736abff2c300
  OBL6 44a2ce6f0d063bb2b6f8e6a5999f73f5
  OPT 1e9677022433aa5e86a0cc6e02c344ac
  Obj 5bf8cc9d23064f75b87e73d35c5454b9
  PA 2541d8aab8aca7c670b6d2ed4bd36726
  PASSIVE 4091d1d79c5901f00913dc84cde35b89
  PEG d3ad53a7d0a7c11d3a9c7d410f92c3f4
  PFUT 8780538c8659d998442b00cc71744230
  PFV 87ab28fe0f4799127ea3b33ee2f7ed5f
  PL dd7a6fab97a576deeab6439f26253434
  POST 797419b1526be4a585d18969fe335c00
  POT dc1e18903cc9079b427ea54739a2507a
  PPRS 0d115a2be4f4d0d5e3a8b4a15127872b
  PPST 83b7843b83d254c477ebcdcf81ac6525
  PPST1 a12c78ce4f607bf0b650615d5c1c2336
  PPST2 facd1c73dfb4589d575fc4f67e46ef25
  PPST3 7f6f6a3c891e9820e2fe6b1516074ee4
  PREP 82512faaf44b7a09877c7c0a8407a2f2
  PRIM f62a67395ad9e2ee390862890a956e38
  PROG 2fb829323ec75eb86f71fc3bf7fa5691
  PRS 4d0192c7fccd2ecca73512f84afd2e06
  PRSPER ea42a92a3a4ab1bc0522f2950c330fed
  PST 3edae383b012a7f3b6a7e2cacde1122b
  PSTPER e591e6920f26ca07d8b904ec3a42f362
  Particle b6dac7eb598cb10dac67044916f016c5
  Person 8962065c67c1705ac692fcc8d9210bcd
  Polarity eac2f82847484b9a87105d0693a7c5e1
  Prefix 8590bd569f8bb6d038732e2c07f87092
  QUO 286b82ba126e55961eb4e6720dfbfce7
  REP a8ed0dcbe98118be1421d3a1fa2e2b03
  SBJV 54f67c535d19172d9a0653f5ba2588d2
  SEC 58c6f0fc3435e92c3d3bf48d724a93a0
  SECOND 2d019239579409279979ff0fe2e6dfcd
  SG e4991b96b153c5bcc5757098a16fbf73
  SPEC b9db72ce925547d66d656083aaff81fc
  Specificity 697b496d198df68093293e68c7d50d9d
  Subj 631e45b5381caceb8ccd08c82aa9a800
  Suffix 38bb50ed0298517a03588243ef98ac95
  THIRD 8d310a0a5f073fd4b97a149c19b4f570
  THRDOBV 4b0555cececc9ead5a51dd9e789baf64
  THRDPROX 7126360aac3f383630f4b3ad5f791327
  TOP 8aa960266452286d25f24a05383d90aa
  TR 4981a3fb8d1c98dbb15f06f8d6d6192c
  TRANS 87842eb7000cdb98a06be2caf05dc32f
  TRI 33a3a49f046f9bcecaa2c0f62b16fa57
  Tense b52863b70f3cc5626b7d1db2a6c4ef40
  Topic 39f87e694fb863c1c8c61df134a24729
  Transitivity 57945260416d71dc87e31cac669b161f
  VIS 782817b7a3234fdb8159fb10d692cd5a
  VOL 17312300f9e985cf631e3648dc8907ad
  Verb 9421dc5b8cf6821456c38e572093888e
  Voice 729607927630d1e92c199129334472f1
  Volition fed3c8348b016bc886742bbd8b88b80d
  ZO 3ac33d92f61de14bab01a085fe2eb28f
  aniSys 367804e1af6d701e2096dafd5533118b
  aspSys e9e7bd71dd2a785cb31526ef55b822bf
  casSys 53f570e830294c8ef1f76287bc8fee75
  defSys 39ed9cb2acfd9c2753c4d255e079ca33
  eviSys 16a8ff4f3aeb46f813a259601251af2a
  genSys 23c095a561aedbda7232209e41ccd3b8
  honSys 831fcde3d22057fb7460c8af4d9ab10c
  mooSys 7e4993890e9cffc9f67059af28200bf6
  numSys d8ca6925d804e3eb3f0fe14c72e821b0
  perSys 6b25af69b2baed03a467998ec509d392
  polSys 6b03938dae2419f01636f6b46255ec51
  speSys 8fe6a689cbb82088761f1cb46b491a37
  tenSys f10468fa127c3da042273349447f9f1d
  topSys d0e505630351aeb35518213bbfa7eb6f
  traSys b87326eed2ea23696a3263a9e6a566d7
  voiSys 3508299f499dacd346d5476b7095ae2b
  volSys 0c538a57205dea6a225cb2d1e520dfee
import  -/  MorphologyGen 01a79c2d8339eb1799781f6d15e27388
  exports: 8b2fd2afd5faf171830833d5dda287d0
  cleanGrammarSys 3581c42a3e0dd6b86e90b8b0b5eee6c3
import  -/  OtherData 37db5ddc38f8875c91a0806c561b30cd
  exports: f505dec72f229982fb85e59b44566731
  SyllWord 0624a89133bbff2a1ba0667c167f657d
  Syllable ce972a6ed094f671f39d3e48151bf110
  Syllable beb50056cf357f9bcbcd0be61b7088e1
import  -/  PhonemeData 408b6488aa28ce44ef05793241013f6f
  exports: c711b36c9b7415c6d00ea9681146dbcb
  AFFRICATE c0633accced1e40697782c5c04b069ce
  ALVEOLAR 6fe183e3c8864ca442f7934e503d4650
  ALVEOLOPALATAL daaffb93a2932477e0f61cae6455dfcd
  APPROXIMANT afa9ca34009df8bf926af4481cb93350
  ASPIRATED b450b7c37ee4c8ef687d93633b315711
  BACK 2ec193314c96eb813ec77befac27f281
  BILABIAL 3ab6fb02456e7fcc0dca4f2242171191
  BOTTOMT 5c8c3bfeea1efd20d0e241577aeaed3c
  BREATHY 8d667724cf65c3e5a0cd73cb0397fa29
  Backness 8fd035312b9b1aba200f0ff8b45ff72f
  Blank c038fb2739bcd61a81d7b8b9a51467b7
  CENTRAL 42c0ac2b606a0dce589d130770507529
  CLOSE 22a96e2ec8a1cab7a2f11a25f17987dc
  CLOSEMID 28a8baa1d812c2959004ad2d5860cb36
  CORONAL cc7698dba037e39c815c055830684fab
  CREAKY cb0270b18ea7e542b72282922e925056
  Consonant e834121481c88ee1a99bb2d9c0c327a2
  DEFAULT b271861fd1783576b8280fda084f6056
  DENTAL fe60451e7fc177f8625db85852eb0594
  DENTIALVEOLAR e87e90600a110bb2397ee6da2ffbf497
  DIPT b669c8a9f42776ed9f48cdf31ecba3ff
  DORSAL 1715325532b0ab74efd7a9242241abba
  Diphthong de76956b0dda8aec4042cce68ab3cbb6
  EPIGLOTTAL 1a9f8059dab5e25b84a38539acc282e0
  EPIPHARYNGEAL 6267ba3ac09d030e3a193c53a5993ff7
  FALLT bf6493f564c877af8436448a72bf1e37
  FLAP 3fdcd00eea839fd7b6da4b6acdc50091
  FRICATIVE 55d73c4ea823ed2361247a0286d3ae01
  FRONT e0d2a42adbbfcfd87ac73f47de30a67d
  GLOTTAL de51a7f06d006897d0ca0d7b5fbd7880
  HFALLT dc0ffd2bd3b9494d348f048b9c591d0e
  HIGHT 7e89a0437c122c578ba5ac84b708192c
  HRISET 17f437c4fdfc44f5b496ba136f41caee
  Height bb7ef9ff04f02fbe9e908095d7879647
  LABIAL c3a78c73d4e8cf0a03b0594238bdd0ea
  LABIODENTAL 2912ab0d7ecd49578e43134b3ad7a5bf
  LAFFRICATE 6f5bc94cce450cc0d219b9e7f4bcbde9
  LAPPROXIMANT 51ca15e8d8190b49c520d84671352b20
  LARYNGEAL 9c9a9c12eed09cfca90c9e2b46f5c65e
  LFALLT 370593f09c7f1e4e0722ba38d021e3f9
  LFLAP b1d07d8ecfdefe7336a346f04a1bc9f3
  LFRICATIVE 8b71d52af44fcf2b2a9ec5d3a31321d4
  LONG 6c15e86e7ce9a3cd079cd9b36f04d7af
  LOWT e2c96f8c8a0008a363a3296afe0758d8
  LRISET 59e93717df80eb5418d9965ef4df0bcd
  Length 4b86df05ae3dae785a151fc2e2a4d662
  MID 667a6c2f4d919e1e38ed9c4ff4b3260a
  MIDT 268aa1e9dd8af14d1b6d8ef49d5dc0dd
  MODAL a60f576982bf888dffe19414dff892e8
  Manner cdf7cd4260ea9474daf2650d49d3b524
  Morpheme 84694ed806c557c515bbf4e524e13725
  Morpheme 383812fe40de4e6210cee815bfc93a6d
  NASAL 426532af6235ef2717bfa577e4906681
  NEARBACK 2f38802f6c145c99cfa5586df929a2ee
  NEARCLOSE d7648572c57097cf4678314deb3fb67a
  NEARFRONT 9d4ac6e377dd5f683a1fffdb5bef1503
  NEAROPEN 491a5f682434521ae4a79e53765d96bf
  NONET b3be8c8512b975551c05f5baffb2e3b9
  NORMAL 0cce345bf4361ad51e3d65565a5c7d8e
  OPEN 648d92e73f3591a0c10aa22bf73af8a2
  OPENMID 1a820ba4ee453b6df8e4a6000474d157
  PALATAL 1158b737ddb9a1219e5b2c2dc2261d56
  PEAKT 2310bcd4e4515266cc481df033ba5148
  PHARYNGEAL 9a742db34256d27cb1668ee7109a7b2b
  POSTALVEOLAR fb373bc5ad900ec4e364a39937ff2d50
  Phonation 2538822911657f5bc7898beed9a7f1fa
  Phoneme 78c280a9bf84c920fdcdc1bfa9515e2f
  Place a616e74c300a23926e887c7817b7b7ad
  RETROFLEX d76654bb9469506b723a22ed8a2b942b
  RISET 425c8b99bf07c70e4f648034b388578e
  ROUNDED 382d348536829d0483430e784688d11a
  Roundedness 3d23d3477a2c2b7874207db0a6b52ca6
  SAFFRICATE b3daffb192c7e4171e761f236a414d52
  SHORT 8975b9f99f59a81283ac8b701c7be2d0
  SILIBANT cd19d84dfc64144f248cad9dfb2b0243
  SLACK 38360f4734186e8a71cd1eb70076b104
  STIFF 9532155286b949a79e44c716094fd6ed
  STOP f7279e969883f96544c7de4d53999e6d
  TOPT 5c5fc11cf7ab85cd94630c67df11043f
  TRILL 2fca8896800c7846ccd54f7e650387fc
  Tone c9348a5b3e7ca841d0de6bc684e0cd9f
  UNROUNDED a85394a8cff5ac983dc69f1a095a4b21
  UVULAR 1a9c449c6d7416a18ab62d11aa6d8e38
  VELAR 2f6ec346e194f837cae24e473f67f200
  VOICELESS 04648cc19c7e44a5ad8aa1e9bcc5d028
  Vowel 0c80a941fa0fc13c4b1061bd7565d7d6
  Word 82eaddf6262316ad93815378773a62ff
  csymbol be9e716b1baf264bba90072e249f1793
  vsymbol f5a8735f8217d4ab5b161b539e08e3e8
import  -/  Romanization 804bca94f08cbe6d41992a68b525e575
  exports: 71e3484a4b1fb5c752fcd3291232e7ff
  romanizeWord 7f9c217ededf0559d0727e8e0fd891e3
import  -/  Syllabification 7281e651cb3d926edd5f51e1c1524b58
  exports: a741c5c7159797f058482789d7878efa
  syllabifyWord 9c41d63e10ca51c04b80d2cc0776e270
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
5ed204d783872fbe0fee85755b000a44
  $wgo ::
    [((GHC.Base.String, InflectionData.LexCat), PhonemeData.Word)]
    -> (# [(GHC.Base.String, InflectionData.LexCat)],
          [PhonemeData.Word] #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0] -}
5fe5ac923abc8f433da9e495ca27c705
  $wparseLexicalSystems ::
    InflectionData.InflectionSystem
    -> InflectionData.LexCat
    -> [InflectionData.ManifestSystem]
    -> [InflectionData.ManifestSystem]
    -> [InflectionData.ManifestSystem]
    -> GHC.Base.String
  {- Arity: 5,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,1*U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: InflectionData.InflectionSystem
                   ww :: InflectionData.LexCat
                   ww1 :: [InflectionData.ManifestSystem]
                   ww2 :: [InflectionData.ManifestSystem]
                   ww3 :: [InflectionData.ManifestSystem] ->
                 GHC.CString.unpackAppendCString#
                   "<br>\n"#
                   (let {
                      a :: [GHC.Types.Char]
                      = case GHC.List.$wlenAcc
                               @ InflectionData.ManifestSystem
                               ww1
                               0 of ww4 { DEFAULT ->
                        GHC.Base.++
                          @ GHC.Types.Char
                          (Parse.$wparseManifestSystems ww1 ww4 w)
                          (case GHC.List.$wlenAcc
                                  @ InflectionData.ManifestSystem
                                  ww2
                                  0 of ww5 { DEFAULT ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             (Parse.$wparseManifestSystems ww2 ww5 w)
                             (case GHC.List.$wlenAcc
                                     @ InflectionData.ManifestSystem
                                     ww3
                                     0 of ww6 { DEFAULT ->
                              Parse.$wparseManifestSystems ww3 ww6 w }) }) }
                    } in
                    case GHC.Prim.dataToTag# @ InflectionData.LexCat ww of wild {
                      DEFAULT -> Parse.parseLexicalSystems7
                      2 -> GHC.Base.++ @ GHC.Types.Char Parse.parseLexicalSystems6 a
                      5 -> GHC.Base.++ @ GHC.Types.Char Parse.parseLexicalSystems5 a
                      6 -> GHC.Base.++ @ GHC.Types.Char Parse.parseLexicalSystems4 a
                      7 -> GHC.Base.++ @ GHC.Types.Char Parse.parseLexicalSystems3 a
                      8 -> GHC.Base.++ @ GHC.Types.Char Parse.parseLexicalSystems2 a
                      9
                      -> GHC.Base.++ @ GHC.Types.Char Parse.parseLexicalSystems1 a })) -}
d56928552dcd295fdd3bbce35207edc5
  $wparseManifestSystems ::
    [InflectionData.ManifestSystem]
    -> GHC.Prim.Int#
    -> InflectionData.InflectionSystem
    -> GHC.Base.String
  {- Arity: 3,
     Strictness: <L,U><S,U><L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: [0] -}
771aab9a2d038ab6f9dea62891dea017
  $wparseSyllable ::
    [PhonemeData.Phoneme]
    -> PhonemeData.Phoneme -> [PhonemeData.Phoneme] -> GHC.Base.String
  {- Arity: 3, Strictness: <S,1*U><S,1*U><L,1*U>, Inline: [0] -}
2c92ec77819489cfb322e7cee7ed05b6
  parseConPhonemeInventory ::
    [PhonemeData.Place]
    -> [PhonemeData.Manner]
    -> [PhonemeData.Phonation]
    -> [PhonemeData.Phoneme]
    -> GHC.Base.String
  {- Arity: 4, Strictness: <L,U><L,1*U><L,U><L,U> -}
712abfe4a508fcaf986231045e7dbf8d
  parseDictionary ::
    [[PhonemeData.Phoneme]]
    -> [((GHC.Base.String, InflectionData.LexCat), PhonemeData.Word)]
    -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U><L,1*U>,
     Unfolding: (\ sonHier :: [[PhonemeData.Phoneme]]
                   pairs :: [((GHC.Base.String, InflectionData.LexCat),
                              PhonemeData.Word)] ->
                 GHC.CString.unpackAppendCString#
                   "\n"#
                   (letrec {
                      groupByFBCore :: [((GHC.Base.String, InflectionData.LexCat),
                                         PhonemeData.Word)]
                                       -> [[GHC.Types.Char]]
                        {- Arity: 1, Strictness: <S,1*U> -}
                      = \ ds :: [((GHC.Base.String, InflectionData.LexCat),
                                  PhonemeData.Word)] ->
                        case ds of wild {
                          [] -> GHC.Types.[] @ [GHC.Types.Char]
                          : x xs
                          -> let {
                               ds1 :: ([((GHC.Base.String, InflectionData.LexCat),
                                         PhonemeData.Word)],
                                       [((GHC.Base.String, InflectionData.LexCat),
                                         PhonemeData.Word)])
                               = case GHC.List.$wspan
                                        @ ((GHC.Base.String, InflectionData.LexCat),
                                           PhonemeData.Word)
                                        (\ y :: ((GHC.Base.String, InflectionData.LexCat),
                                                 PhonemeData.Word) ->
                                         case x of wild1 { (,) ds2 y1 ->
                                         case y1 of wild2 { PhonemeData.Word a9 ->
                                         case y of wild3 { (,) ds3 y2 ->
                                         case y2 of wild4 { PhonemeData.Word b1 ->
                                         GHC.Classes.$fEq[]_$c==
                                           @ PhonemeData.Morpheme
                                           PhonemeData.$fEqMorpheme
                                           a9
                                           b1 } } } })
                                        xs of ww { (#,#) ww1 ww2 ->
                                 (ww1, ww2) }
                             } in
                             GHC.Types.:
                               @ [GHC.Types.Char]
                               (case Parse.$wgo
                                       (GHC.Types.:
                                          @ ((GHC.Base.String, InflectionData.LexCat),
                                             PhonemeData.Word)
                                          x
                                          (case ds1 of wild1 { (,) ys zs ->
                                           ys })) of ww { (#,#) ww1 ww2 ->
                                case ww2 of wild1 {
                                  [] -> case GHC.List.badHead ret_ty [GHC.Types.Char] of {}
                                  : x1 ds2
                                  -> case x1 of ww3 { PhonemeData.Word ww4 ->
                                     GHC.Base.++
                                       @ GHC.Types.Char
                                       (Romanization.romanizeWord_go ww4)
                                       (GHC.CString.unpackAppendCString#
                                          " ("#
                                          (GHC.Base.++
                                             @ GHC.Types.Char
                                             (Parse.parseWord sonHier ww3)
                                             (GHC.CString.unpackAppendCString#
                                                ")"#
                                                (Parse.parseDictionary_go ww1)))) } } })
                               (case ds1 of wild1 { (,) ys zs -> groupByFBCore zs }) }
                    } in
                    case groupByFBCore
                           (Data.OldList.sortBy
                              @ ((GHC.Base.String, InflectionData.LexCat), PhonemeData.Word)
                              Parse.parseDictionary2
                              (Data.OldList.sortBy
                                 @ ((GHC.Base.String, InflectionData.LexCat), PhonemeData.Word)
                                 Parse.parseDictionary2
                                 pairs)) of wild {
                      [] -> GHC.Types.[] @ GHC.Types.Char
                      : x xs1
                      -> Data.OldList.intercalate_$spoly_go
                           @ GHC.Types.Char
                           x
                           (Data.OldList.prependToAll
                              @ [GHC.Types.Char]
                              Parse.parseDictionary1
                              xs1) })) -}
e767d2f030f0a31a0986b258e08357c0
  parseDictionary1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "\n"#) -}
825413fe6597573792bfba7e0ac708a9
  parseDictionary2 ::
    ((GHC.Base.String, InflectionData.LexCat), PhonemeData.Word)
    -> ((GHC.Base.String, InflectionData.LexCat), PhonemeData.Word)
    -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (\ x :: ((GHC.Base.String, InflectionData.LexCat),
                         PhonemeData.Word)
                   y :: ((GHC.Base.String, InflectionData.LexCat),
                         PhonemeData.Word)[OneShot] ->
                 case x of wild { (,) ds1 y1 ->
                 case y1 of wild1 { PhonemeData.Word a10 ->
                 case y of wild2 { (,) ds2 y2 ->
                 case y2 of wild3 { PhonemeData.Word b1 ->
                 GHC.Classes.$w$ccompare14
                   @ PhonemeData.Morpheme
                   PhonemeData.$fOrdMorpheme
                   a10
                   b1 } } } }) -}
74494699fbdfeb3d12f3f52039cc4425
  parseDictionary_go ::
    [([GHC.Types.Char], InflectionData.LexCat)] -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <S,1*U> -}
0875b533d2b33a15ff36f99e489147b8
  parseDiphPhonemeInventory ::
    [PhonemeData.Phoneme] -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ diphs :: [PhonemeData.Phoneme] ->
                 GHC.CString.unpackAppendCString#
                   "<br>\n\
                   \Diphthongs: /"#
                   (case Parse.parseDiphPhonemeInventory_go1 diphs of wild {
                      [] -> case GHC.List.init2 ret_ty [GHC.Types.Char] of {}
                      : x xs
                      -> let {
                           a :: [GHC.Types.Char]
                           = GHC.CString.unpackAppendCString#
                               "/, and /"#
                               (GHC.Base.++
                                  @ GHC.Types.Char
                                  (Parse.parseDiphPhonemeInventory_go
                                     wild
                                     (GHC.List.lastError @ [GHC.Types.Char]))
                                  Parse.parseDiphPhonemeInventory2)
                         } in
                         case GHC.List.init1 @ [GHC.Types.Char] x xs of wild1 {
                           [] -> a
                           : x1 xs1
                           -> GHC.Base.++
                                @ GHC.Types.Char
                                (Data.OldList.intercalate_$spoly_go
                                   @ GHC.Types.Char
                                   x1
                                   (Data.OldList.prependToAll
                                      @ [GHC.Types.Char]
                                      Parse.parseDiphPhonemeInventory1
                                      xs1))
                                a } })) -}
6791a924f28ddbb2b4436328cc158bb0
  parseDiphPhonemeInventory1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "/, /"#) -}
49db310c985e992b5f051449ae0e67f9
  parseDiphPhonemeInventory2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "/\n"#) -}
9bdecbadd65ef08a194641c1894fbd7f
  parseDiphPhonemeInventory_go ::
    [[GHC.Types.Char]] -> [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U> -}
3cb28b3ecae4b759a4f05421b46be980
  parseDiphPhonemeInventory_go1 ::
    [PhonemeData.Phoneme] -> [[GHC.Types.Char]]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
ed22ad52821241bb6643045211470062
  parseLCInflection ::
    InflectionData.InflectionSystem -> GHC.Base.String
  {- Arity: 1,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)> -}
e0bb95b43fe1346e31d5bf1e165a3380
  parseLexicalSystems ::
    InflectionData.InflectionSystem
    -> (InflectionData.LexCat,
        [InflectionData.ManifestSystem],
        [InflectionData.ManifestSystem],
        [InflectionData.ManifestSystem])
    -> GHC.Base.String
  {- Arity: 2,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U(1*U,U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: InflectionData.InflectionSystem
                   w1 :: (InflectionData.LexCat,
                          [InflectionData.ManifestSystem],
                          [InflectionData.ManifestSystem],
                          [InflectionData.ManifestSystem]) ->
                 case w1 of ww { (,,,) ww1 ww2 ww3 ww4 ->
                 Parse.$wparseLexicalSystems w ww1 ww2 ww3 ww4 }) -}
5ddc729e927a29f70ca5b5ae78668561
  parseLexicalSystems1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Subject"#) -}
7445be06d241a23d5f35d00dcc9ed3f1
  parseLexicalSystems2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Object"#) -}
962cc6c993b9c1935a8eb3edb59da620
  parseLexicalSystems3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Adverb"#) -}
d29e6ab72e70d57f5520cdc00c507a70
  parseLexicalSystems4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Adjective"#) -}
6eab7133448fd81a487718e1922c1137
  parseLexicalSystems5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Adposition"#) -}
e7137246f7d0b2b7e102189ee76350ba
  parseLexicalSystems6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Verb"#) -}
1389583c8d482058f492c425d252dde9
  parseLexicalSystems7 :: GHC.Base.String
  {- Strictness: b -}
cc4466bcec68df2a1b6bdaaa027a56f5
  parsePhoneme :: PhonemeData.Phoneme -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: PhonemeData.Phoneme ->
                 case ds of wild {
                   PhonemeData.Consonant ds1 ds2 ds3 ipa -> ipa
                   PhonemeData.Vowel ds1 ds2 ds3 ds4 ds5 ipa -> ipa
                   PhonemeData.Diphthong ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ipa -> ipa
                   PhonemeData.Blank -> GHC.Types.[] @ GHC.Types.Char }) -}
09751d181af5c7244fb3ef4134097787
  parseSonHier ::
    [PhonemeData.Phoneme] -> [[PhonemeData.Phoneme]] -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U><L,1*U>,
     Unfolding: (\ vows :: [PhonemeData.Phoneme]
                   cons :: [[PhonemeData.Phoneme]] ->
                 GHC.CString.unpackAppendCString#
                   "\n\
                   \\n\
                   \Sonority hierarchy: \n\
                   \/"#
                   (let {
                      a :: [GHC.Types.Char]
                      = GHC.CString.unpackAppendCString#
                          "/\n\
                          \/"#
                          (case GHC.Base.map
                                  @ [PhonemeData.Phoneme]
                                  @ [GHC.Types.Char]
                                  Parse.parseSonHier2
                                  cons of wild {
                             [] -> Parse.parseDiphPhonemeInventory2
                             : x xs1
                             -> GHC.Base.++
                                  @ GHC.Types.Char
                                  (Data.OldList.intercalate_$spoly_go
                                     @ GHC.Types.Char
                                     x
                                     (Data.OldList.prependToAll
                                        @ [GHC.Types.Char]
                                        Parse.parseSonHier1
                                        xs1))
                                  Parse.parseDiphPhonemeInventory2 })
                    } in
                    case GHC.Base.map
                           @ PhonemeData.Phoneme
                           @ [GHC.Types.Char]
                           Parse.parsePhoneme
                           vows of wild {
                      [] -> a
                      : x xs1
                      -> GHC.Base.++
                           @ GHC.Types.Char
                           (Data.OldList.intercalate_$spoly_go
                              @ GHC.Types.Char
                              x
                              (Data.OldList.prependToAll
                                 @ [GHC.Types.Char]
                                 Parse.parseDiphPhonemeInventory1
                                 xs1))
                           a })) -}
698f7a34392c2510227d6ab750a2fa06
  parseSonHier1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "/\n\
                   \/"#) -}
bbe07578c2fc03dd1266044b933683e2
  parseSonHier2 :: [PhonemeData.Phoneme] -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ x :: [PhonemeData.Phoneme] ->
                 case GHC.Base.map
                        @ PhonemeData.Phoneme
                        @ [GHC.Types.Char]
                        Parse.parsePhoneme
                        x of wild {
                   [] -> GHC.Types.[] @ GHC.Types.Char
                   : x1 xs1
                   -> Data.OldList.intercalate_$spoly_go
                        @ GHC.Types.Char
                        x1
                        (Data.OldList.prependToAll
                           @ [GHC.Types.Char]
                           Parse.parseDiphPhonemeInventory1
                           xs1) }) -}
3c160975a818f1bc8956114373cadf74
  parseSyllable :: OtherData.Syllable -> GHC.Base.String
  {- Arity: 1, Strictness: <S(SSL),1*U(1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: OtherData.Syllable ->
                 case w of ww { OtherData.Syllable ww1 ww2 ww3 ->
                 Parse.$wparseSyllable ww1 ww2 ww3 }) -}
1e4f74103eff51bc1bf2b33db1a2af3b
  parseVowPhonemeInventory ::
    [PhonemeData.Height]
    -> [PhonemeData.Backness]
    -> [PhonemeData.Roundedness]
    -> [PhonemeData.Length]
    -> [PhonemeData.Phoneme]
    -> GHC.Base.String
  {- Arity: 5, Strictness: <L,1*U><L,U><L,U><L,U><L,U> -}
a5e79c59071bc0faf05b870b949d95ac
  parseWord ::
    [[PhonemeData.Phoneme]] -> PhonemeData.Word -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U><L,1*U(1*U)>,
     Unfolding: (\ sonHier :: [[PhonemeData.Phoneme]]
                   word :: PhonemeData.Word ->
                 GHC.CString.unpackAppendCString#
                   "/"#
                   (case word of ww { PhonemeData.Word ww1 ->
                    case Syllabification.$wsyllabifyWord
                           sonHier
                           ww1 of ww2 { (##) ww3 ->
                    case GHC.Base.map
                           @ OtherData.Syllable
                           @ [GHC.Types.Char]
                           Parse.parseSyllable
                           ww3 of wild {
                      [] -> Parse.parseWord2
                      : x xs1
                      -> GHC.Base.++
                           @ GHC.Types.Char
                           (Data.OldList.intercalate_$spoly_go
                              @ GHC.Types.Char
                              x
                              (Data.OldList.prependToAll
                                 @ [GHC.Types.Char]
                                 Parse.parseWord1
                                 xs1))
                           Parse.parseWord2 } } })) -}
9358ba8c7af32269ca38c6638e659a84
  parseWord1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "."#) -}
1ba7724c926ca4fc3629bb373ba0965b
  parseWord2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "/"#) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

