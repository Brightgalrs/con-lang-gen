
==================== FINAL INTERFACE ====================
2016-12-06 20:49:08.514484 UTC

interface conla_1eA9qWUPH9nBowcXqqaV8r:Parse 7103
  interface hash: c6753c3e02a75b29d67f8bef784ed4a9
  ABI hash: 21f02fd1f7656f1d7acaa140c89a2697
  export-list hash: 7d5a300813558f11558e3844f3efe942
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 9b5f0a9c5ab937702e8736ae3b06ccc6
  sig of: Nothing
  used TH splices: False
  where
exports:
  Parse.parseConPhonemeInventory
  Parse.parseDictionary
  Parse.parseDiphPhonemeInventory
  Parse.parseLCInflection
  Parse.parseLexicalSystems
  Parse.parseSonHier
  Parse.parseVowPhonemeInventory
  Parse.parseWord
module dependencies: GrammarData InflectionData InflectionGen
                     MorphologyGen OtherData PhonemeData PhonemeGen PhonotacticsGen
                     Romanization Syllabification WordGen
package dependencies: MonadPrompt-1.0.0.5@Monad_5vpMHuuRBzi4bKjpRN3A9L
                      MonadRandom-0.4.2.3@Monad_I7tEJH7vOtsKQS7CpG48fz
                      array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA base-4.8.2.0
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59
                      erf-2.0.0.0@erf_6l78BnvLL4b2mWYp3HJJxX
                      flexible-defaults-0.0.1.2@flexi_70LqvhG3vbS8bRvV8pHtMk
                      ghc-prim-0.4.0.0 integer-gmp-1.0.0.0
                      math-functions-0.1.7.0@mathf_BN6S7j0ar3LC4TsnYu0us5
                      mersenne-random-pure64-0.2.0.5@merse_42koSxEhmjwBS69WXi19xI
                      monad-loops-0.4.3@monad_LQiHRUYhFhYBU7nOOWDOrb
                      mtl-2.2.1@mtl_Aue4leSeVkpKLsfHIV51E8
                      mwc-random-0.13.4.0@mwcra_0lrQ1SkkNA85sa8eZ98xQk
                      old-locale-1.0.0.7@oldlo_7h2Gx6mVPJ5Gheca8j9Mpe
                      old-time-1.1.0.3@oldti_JVjJvknZJ0JKghfag2Jw2L
                      pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC
                      primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3
                      random-extras-0.19@rando_11jAc932BDRD7ydjCrRr4L
                      random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW
                      random-1.1@rando_9Kgekc9yEaLHLNUuw6paWL
                      random-shuffle-0.0.4@rando_9kOz9tEn1526ShtWz8x59X
                      random-fu-0.2.7.0@rando_HO0DW1nA2fDCxZJ62mvJHr
                      rvar-0.2.0.3@rvar_HDSuhGFxwNTDX4EfF6w8WG
                      stateref-0.3@state_KptOBHsY85L8YzpDAos2Hi
                      stm-2.4.4.1@stm_EyxFXFfnfY05IrjGaqCxeD
                      syb-0.6@syb_4kccWaTe3QZLxAMQYKgEyE template-haskell-2.10.0.0
                      th-extras-0.0.0.4@thext_LRY1RUMy7ShLl2tqhMyHdO
                      time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn
                      transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF
                      vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln
orphans: MonadRandom-0.4.2.3@Monad_I7tEJH7vOtsKQS7CpG48fz:Control.Monad.Random
         base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         conla_1eA9qWUPH9nBowcXqqaV8r:InflectionData
         mersenne-random-pure64-0.2.0.5@merse_42koSxEhmjwBS69WXi19xI:System.Random.Mersenne.Pure64
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source.IO
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source.MWC
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source.PureMT
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source.StdGen
         stateref-0.3@state_KptOBHsY85L8YzpDAos2Hi:Data.StateRef.Instances
         stateref-0.3@state_KptOBHsY85L8YzpDAos2Hi:Data.StateRef.Instances.STM
         stm-2.4.4.1@stm_EyxFXFfnfY05IrjGaqCxeD:Control.Monad.STM
         syb-0.6@syb_4kccWaTe3QZLxAMQYKgEyE:Data.Generics.Instances
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Calendar.Gregorian
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Format.Parse
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.LocalTime.LocalTime
         transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.Trans.Error
         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Fusion.Bundle
         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Sequence
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
                         mwc-random-0.13.4.0@mwcra_0lrQ1SkkNA85sa8eZ98xQk:System.Random.MWC
                         pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3:Control.Monad.Primitive
                         template-haskell-2.10.0.0:Language.Haskell.TH.Syntax
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Primitive
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed.Base
import  -/  base-4.8.2.0:Control.Arrow ab7f126fed349de468f94ac777dc8f4e
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:Data.List 3f0782c8d4bf50eecefcd5ea1798aac8
import  -/  base-4.8.2.0:Data.OldList d8fd80b0e14aa085ce6219cd89dad356
import  -/  base-4.8.2.0:Data.Tuple 012ad951a59a9d85fe1de36a2f012986
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.Exts 7bdf420b67c4b8c9ccc9ea593e90bb92
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  GrammarData 3ac8f2b878a3acac75da28c3be99b3ac
  exports: fca5595c19286020653fdf4f375d962b
import  -/  InflectionData 3d10fd8ebdfb88f2d9b18403b3318120
  exports: bbf9a431e828cdbe291def24777d4f2e
  ABS 4dead81c193708ce2a814eb3a4d4ddae
  ABS2 98ddc5caa7ab45f8d6bcbeba4997d977
  ABS3 712ad9c06fc64f66783d809eaed0da47
  ACC 27faa99710ad21ee514cfc00d95f9a1b
  ACTIVE 2101f743f9db7f46608da1f8e37d2383
  ADP 91e9b075ab30d74d5b6ce51763b52a69
  AFF 9efe716245fedb9ed2dec8ea570f1d62
  AFUT 45fe1e0e27f08198672a4573179fd695
  AFUT1 6d3a986d0e5ea8dd1435025dc6929456
  AFUT2 692125e6bb7dcc1425bfcf420669ed7b
  AFUT3 280ae922b4e5a0afccc2c749a13c84f7
  AN a4ecf7d5b2d49348f59efebef8b0ba1d
  APRS 52c3a54bdbf4b30003c8749ff601b3f9
  APST bbd6b8caa1b556f89e549255b32c603b
  ASS 256a4d37ab61c057e27dd587e3737464
  AUD 559ca18b231cad665168b344047cd47e
  Adj 2c4b4bb0465dcd03f547481f4ed4e42a
  Adpo ae6c4eb1603ee2b9293013fe28704b38
  Adv 1aedcc21fbd7923d97514da458104f03
  Animacy 3fb8f806ac431419336914d62e0692e1
  Aspect 3260581e2888098e95013c9746eb2927
  COM 324d409166ce7d740f657d99dc4a6f71
  COND 880f07a1a5fc6be56f60255a1911251f
  CONT eb8443db546e6db508483655d1799abc
  Case ed810d7ab6970052c9ee31d75d4a74f7
  DEF 59345594c965174076fb9d14b026ba21
  DEO 8d8c314df557923e6c3c8e506de247f2
  DIR 290836bbb25e1c20c17abf0bd8c96f37
  DITRANS d5e7bbeea916bc6794ce9f53531d322d
  DRT1 c62b20b2ed43b25b82577d4d07e564d0
  DRT2 afa0827f4cab264509f7288bc0f5b378
  DTR 4b09a48d13a7f12b30ea8ef67867102f
  DU 7c0af01b95deff673d5f3cfbe1bb7813
  Definiteness f57cbd9dbed35919833216936d0e066e
  EPIS c612aa214d2a65db992bed7e7dd10553
  ERG 2308d299d7746723bc868b7ee6d35a85
  ERG2 eef2a53b1ce0eb0107b43d78a461da9a
  EXP 96ca0ff5c2986bdbae231b596887a0eb
  Evidentiality 8c39249ddb7859f10b018a2526e04a45
  Express eb822898078c54f198699344a3fb2c63
  Express ce522c1d99b503cc50c6a04abbeb7ec2
  F 4a881bbbb7603db25f98e6d3dd30d605
  FAM 976d5d904eaa4afaf92edef5aa16b37a
  FIRST 60412cccd81842507e48cd90a292cc9c
  FORM 811c2ce84e5cbbacf0a0887f82ebf102
  FSTEXCL dd350708b89baba0d7bb532117e8d2c7
  FSTINCL 00732367eca2e983e4ebff0f3cdbeb91
  FUT ad15dcd812077fdf0c69236dba050a84
  FUTPER 25272b1e64eea24c992675bbbff1042d
  Gender 8b595aff125f95a2b35fe330b0ba7fad
  HAB 2e4d2bef9cf23bfedbd9ee3e48c55093
  HSY 13d4bb89df7aaafd4ae2f42ffe1744fa
  HUM df3df18ee77feb5fe59f8d473db6ee9f
  Honorific 38ff9a9c45f96d99123b457fda219bfb
  IMP c3a7fa353536a3f7d384f803604756f5
  INAN aba998fabec0f6735d1434b66ce4ef99
  IND fb8ce75c75f3c76ed6bd95c0f1ffb69b
  INDF 3a863d45605bf5b73006ef1e57f86e39
  INDIR 4b7d049c49f3c7979919ba233fe78632
  INFER 9036fc3ebf02f7fdb5d50d7fb2e4de61
  INTR c2cb3f86d045517dcd3cda32afe4697a
  IPFV f553431f083b92e53e56a945b73a58b9
  IRR c3696deda4dc4718aa4310f9946afdb4
  InflectionSystem e87dedc6ee0613212a8838da9054e9ca
  JUS 2da05b483c5ba9a9f3ad01f2f72a8492
  LexCat b0a24ad20939906e8d87ed3073f32603
  M b8432ba2ca0d14209a48d862dcfbc662
  MIDDLE e6b3efbe31405a8ffc84ebf26e7010a5
  MTR 331edaea28c7b432fe868c0abdd359e2
  MTRANS c06792ac22339e80a642d4208143aa37
  Manifest 738cfe3686e2d0e5db7ec88faec06acb
  Manifest f539d8313c5a8ab2854680bd81c6cecb
  ManifestSystem a7815f6fb4d337722db1ca3aa102d56a
  ManifestSystem e7fb9cb536022bc8f9fdd7f94d3c9e4a
  Mood 170a49091e965c69ca2b81c9942aa234
  N d4bfbda0e4b28d21a7d987dc7d4f1179
  NEG 7e1328036e37657d633105d519862daf
  NEU d7eb74e109bf6c4423f631ccaa5f7831
  NHUM 2fe91a5919d95058eea06271c01bc348
  NNPROG a399704f6331405908bdf88effe4542b
  NOM bea0987e59c4e01ea40e7f5e63a3226c
  NOM2 f24e5fe6d9c10ed9dbb9b466e5f079d3
  NPROG 64414d0ee00a57c76c50413b18222b77
  NSPEC 7c67d6660601d450d4dc5b13dc9fbc96
  NTOP ab46fa0e402db5174650d37804ed831a
  NTRANS 06b084eb1078e0a4bdeb9a6653c100ca
  NVIS 10d043bb3859c3478f9fbb691c77f154
  NVOL 48b56a786922282c6591402cb5f2c1aa
  NoExpress d6b74cdc58afb01056b09c31a809a97b
  NoManifest dd0ff7e8ec5d232f1076f24ce0f63386
  Noun e589ece5d60db99d20ba6977cc50f48e
  Number c1e8fbfb7380effdacb7c7c192e40bf5
  OBJ 95795c2b152f89c2aeb9aa45ee1fe814
  OBL1 2e0d596eda79e4753b4ee143d00e17e0
  OBL2 96fe752171c9cb76761405d73ce56e78
  OBL3 896e079d7c6f1533a14bdd083d31e2db
  OBL4 c455d0a4a0ca65e5ac0381fdc02d672d
  OBL5 4ce26924c00429fa1d7882a6b5f4c35c
  OBL6 417052c0224c2ef75ddf4ea862e91d47
  OPT a857b34c3fa956ad37947d873c4dc8d3
  Obj 4cc2ce9f1a83011e997646187b006d59
  PA c366741810f0a72f59142c3e94c7dff6
  PASSIVE 324a694a9b1f8808b8b8e76d32ff9e0e
  PEG eddcef585a1b581c9245d277bf6a1e56
  PFUT 6578014fde97eab5c1279de57af66f03
  PFV 2419aae8a7ec03cfe93b0a240de1778d
  PL 21bf195153ab036c5102fed00dc919ee
  POST 704e248fe6e7fbcbdd9126366292a348
  POT 45d2997541a18c43da9d65d8ea3788b8
  PPRS 0c5e51e76b62dba655e3484fec755e3d
  PPST 131adce45da717bba21c69ae0aa7f434
  PPST1 673114bb3f1fed6a5c17d8a672d36fd6
  PPST2 53a10de81a6880ee41095a284ac452ca
  PPST3 18bc6f86b6cd404ede3315556aaa572b
  PREP 029af3dad611c2680f7fb20707b7d462
  PRIM aed3c4a23bf6428e9be3a13b52ed4b72
  PROG 9133e8302a6eae856074aa92d70f9ed3
  PRS 5a441bd60218f14122aafdeb6528db27
  PRSPER 505007d739fae5bd85e46a2906e078ca
  PST fb527ba17109a06ed91275b28e7672ba
  PSTPER f87c180d3ad6b70ea35eeb228598677c
  Particle 0d433f8dbca5042456428720a6fa40c8
  Person 02346c3aafaeac9909a5db7a01e8ca09
  Polarity ad1fe4829d26ee371daeb2b0168138e4
  Prefix d975d35054d32c3efc584cae64fdcf2d
  QUO f9ef95d1469cb4de92ff451b42067d70
  REP 5a8c6e0d099545c93b5fc48e211e5361
  SBJV b7871966e460a2827213fa3692de705c
  SEC 8f1df9a3aecd01b069f82aae1e457dcc
  SECOND 8bb4a6ecd6836d4110e9596a966649c8
  SG a1dd2666c70d64246b309f25b4e48375
  SPEC eaf66d3c72dee75096907137709c20b4
  Specificity a4a6522da9f32c4a22fdcdb048233e77
  Subj c01490973f35adf637b3853e9286313a
  Suffix 19f496940d721d5db4c05dd382486c54
  THIRD 5b1c4a233d403661bbcf3d5b19551acf
  THRDOBV 8800dcccd61670644b094c67768b2d84
  THRDPROX b058eacdfe118adcde41680c9a9f6ee1
  TOP 4714b66d77deec9a8969b41f7bd97c3f
  TR 5eaab2ebce3927962ca078ee4a0a22fa
  TRANS 143def43ce74eabeeac00563b94f6d61
  TRI 46e9ce5d88ab769a7a51fc3c69c0cfae
  Tense b64289664290fdc9c5510c85a7afdd78
  Topic 91b970df1d2f65a770d84bd1b0e168b5
  Transitivity c432d94948e8418512e7b069e8d02e7a
  UANI 0f52e32d71289197f85ca66e7cf31d08
  UASP c9e55752e739be74cf569e8a1680b5a8
  UCAS d91ff9a7aafa8dc8ec0d8fe6daba4c0e
  UDEF d980b1338a696f17d0eb42a47de3f180
  UEVI eba40e6cf3a32c282c65ef55642af960
  UGEN 9442e976bcf803ebf60129e8ceb469a4
  UHON b1c2eefdbb0c5de6131126757921b33a
  UMOO df44882aeafa40109ff7666c992cb593
  UNUM 7df66c12348e1482d665394e08c74d04
  UPER 861bc63c211121db736140ea4f13a1b9
  UPOL 25cb7ac8f6234bd5dc9fa85a958047c6
  USPE 180327128dc811f484d47954f86ed279
  UTEN a3d370ee9e285eb621d131a02319d72a
  UTOP fe06e926ce923313384b18193d012f4a
  UTRA 8c0ca851f56438f969c21ce5b0990ae2
  UVOI a178ca8bc823ecac5648dde065c7bedf
  UVOL 29d9f9eeebb319660819148d4677e069
  VIS 226fb2dea05ee0f7c38206f2a4988745
  VOL 421fceff614532f59ff7aec3985606e7
  Verb be92a9eca6a47f52d128c949ff565852
  Voice 1f59333afb1b3b92a8af1e5489e1e630
  Volition 91017ab7ea71228801f74c069cd5baf7
  ZO 90e4ec74faf36ac25f21f2fc11997b98
  aniSys 418312c5fef475f6491ab9b08cc9e4a0
  aspSys 0bb602290854008e9c49649291652480
  casSys add19c65cc6f1fe282cd3c5d93eb3390
  defSys 02c3c8a5fc37888f88295faca73009ab
  eviSys 9a880a223bbc8d556f96f82b447b0469
  genSys 29df4b93bb175fe038692cd57442c08d
  honSys b749addaa4dbab444b3ba6e4c3080482
  mooSys 69a3f604f4dd42ec545394741ccd60c6
  numSys 6d879838113991034bac918ebf0b46f8
  perSys 1b412b277c7edd0b512e13923d1f3e09
  polSys b6e9b16a59299e448d515504968763fe
  speSys f120c55cd644627c31ba466e98d24bcf
  tenSys dd002fbf7a55ef4faacaa94df56435f7
  topSys 42d673b3b4caa339454fc67e5a805d46
  traSys ba78580b1a2b852174cdc7b1adf59950
  voiSys 235151b8b952dd109b6af25a0e063cce
  volSys 86532736672bf5c58d5f98ce1c39d837
import  -/  MorphologyGen bb55b305d3c3b9c1dfcf84eae0b8f754
  exports: 582b44e4b3f5753710978de22ed6645e
  cleanGrammarSys 0395893f0813fe57fac2d67a08133bf0
import  -/  OtherData 37db5ddc38f8875c91a0806c561b30cd
  exports: f505dec72f229982fb85e59b44566731
  SyllWord 0624a89133bbff2a1ba0667c167f657d
  Syllable ce972a6ed094f671f39d3e48151bf110
  Syllable beb50056cf357f9bcbcd0be61b7088e1
import  -/  PhonemeData 408b6488aa28ce44ef05793241013f6f
  exports: c711b36c9b7415c6d00ea9681146dbcb
  AFFRICATE c0633accced1e40697782c5c04b069ce
  ALVEOLAR 6fe183e3c8864ca442f7934e503d4650
  ALVEOLOPALATAL daaffb93a2932477e0f61cae6455dfcd
  APPROXIMANT afa9ca34009df8bf926af4481cb93350
  ASPIRATED b450b7c37ee4c8ef687d93633b315711
  BACK 2ec193314c96eb813ec77befac27f281
  BILABIAL 3ab6fb02456e7fcc0dca4f2242171191
  BOTTOMT 5c8c3bfeea1efd20d0e241577aeaed3c
  BREATHY 8d667724cf65c3e5a0cd73cb0397fa29
  Backness 8fd035312b9b1aba200f0ff8b45ff72f
  Blank c038fb2739bcd61a81d7b8b9a51467b7
  CENTRAL 42c0ac2b606a0dce589d130770507529
  CLOSE 22a96e2ec8a1cab7a2f11a25f17987dc
  CLOSEMID 28a8baa1d812c2959004ad2d5860cb36
  CORONAL cc7698dba037e39c815c055830684fab
  CREAKY cb0270b18ea7e542b72282922e925056
  Consonant e834121481c88ee1a99bb2d9c0c327a2
  DEFAULT b271861fd1783576b8280fda084f6056
  DENTAL fe60451e7fc177f8625db85852eb0594
  DENTIALVEOLAR e87e90600a110bb2397ee6da2ffbf497
  DIPT b669c8a9f42776ed9f48cdf31ecba3ff
  DORSAL 1715325532b0ab74efd7a9242241abba
  Diphthong de76956b0dda8aec4042cce68ab3cbb6
  EPIGLOTTAL 1a9f8059dab5e25b84a38539acc282e0
  EPIPHARYNGEAL 6267ba3ac09d030e3a193c53a5993ff7
  FALLT bf6493f564c877af8436448a72bf1e37
  FLAP 3fdcd00eea839fd7b6da4b6acdc50091
  FRICATIVE 55d73c4ea823ed2361247a0286d3ae01
  FRONT e0d2a42adbbfcfd87ac73f47de30a67d
  GLOTTAL de51a7f06d006897d0ca0d7b5fbd7880
  HFALLT dc0ffd2bd3b9494d348f048b9c591d0e
  HIGHT 7e89a0437c122c578ba5ac84b708192c
  HRISET 17f437c4fdfc44f5b496ba136f41caee
  Height bb7ef9ff04f02fbe9e908095d7879647
  LABIAL c3a78c73d4e8cf0a03b0594238bdd0ea
  LABIODENTAL 2912ab0d7ecd49578e43134b3ad7a5bf
  LAFFRICATE 6f5bc94cce450cc0d219b9e7f4bcbde9
  LAPPROXIMANT 51ca15e8d8190b49c520d84671352b20
  LARYNGEAL 9c9a9c12eed09cfca90c9e2b46f5c65e
  LFALLT 370593f09c7f1e4e0722ba38d021e3f9
  LFLAP b1d07d8ecfdefe7336a346f04a1bc9f3
  LFRICATIVE 8b71d52af44fcf2b2a9ec5d3a31321d4
  LONG 6c15e86e7ce9a3cd079cd9b36f04d7af
  LOWT e2c96f8c8a0008a363a3296afe0758d8
  LRISET 59e93717df80eb5418d9965ef4df0bcd
  Length 4b86df05ae3dae785a151fc2e2a4d662
  MID 667a6c2f4d919e1e38ed9c4ff4b3260a
  MIDT 268aa1e9dd8af14d1b6d8ef49d5dc0dd
  MODAL a60f576982bf888dffe19414dff892e8
  Manner cdf7cd4260ea9474daf2650d49d3b524
  Morpheme 84694ed806c557c515bbf4e524e13725
  Morpheme 383812fe40de4e6210cee815bfc93a6d
  NASAL 426532af6235ef2717bfa577e4906681
  NEARBACK 2f38802f6c145c99cfa5586df929a2ee
  NEARCLOSE d7648572c57097cf4678314deb3fb67a
  NEARFRONT 9d4ac6e377dd5f683a1fffdb5bef1503
  NEAROPEN 491a5f682434521ae4a79e53765d96bf
  NONET b3be8c8512b975551c05f5baffb2e3b9
  NORMAL 0cce345bf4361ad51e3d65565a5c7d8e
  OPEN 648d92e73f3591a0c10aa22bf73af8a2
  OPENMID 1a820ba4ee453b6df8e4a6000474d157
  PALATAL 1158b737ddb9a1219e5b2c2dc2261d56
  PEAKT 2310bcd4e4515266cc481df033ba5148
  PHARYNGEAL 9a742db34256d27cb1668ee7109a7b2b
  POSTALVEOLAR fb373bc5ad900ec4e364a39937ff2d50
  Phonation 2538822911657f5bc7898beed9a7f1fa
  Phoneme 78c280a9bf84c920fdcdc1bfa9515e2f
  Place a616e74c300a23926e887c7817b7b7ad
  RETROFLEX d76654bb9469506b723a22ed8a2b942b
  RISET 425c8b99bf07c70e4f648034b388578e
  ROUNDED 382d348536829d0483430e784688d11a
  Roundedness 3d23d3477a2c2b7874207db0a6b52ca6
  SAFFRICATE b3daffb192c7e4171e761f236a414d52
  SHORT 8975b9f99f59a81283ac8b701c7be2d0
  SILIBANT cd19d84dfc64144f248cad9dfb2b0243
  SLACK 38360f4734186e8a71cd1eb70076b104
  STIFF 9532155286b949a79e44c716094fd6ed
  STOP f7279e969883f96544c7de4d53999e6d
  TOPT 5c5fc11cf7ab85cd94630c67df11043f
  TRILL 2fca8896800c7846ccd54f7e650387fc
  Tone c9348a5b3e7ca841d0de6bc684e0cd9f
  UNROUNDED a85394a8cff5ac983dc69f1a095a4b21
  UVULAR 1a9c449c6d7416a18ab62d11aa6d8e38
  VELAR 2f6ec346e194f837cae24e473f67f200
  VOICELESS 04648cc19c7e44a5ad8aa1e9bcc5d028
  Vowel 0c80a941fa0fc13c4b1061bd7565d7d6
  Word 82eaddf6262316ad93815378773a62ff
  csymbol be9e716b1baf264bba90072e249f1793
  vsymbol f5a8735f8217d4ab5b161b539e08e3e8
import  -/  Romanization 804bca94f08cbe6d41992a68b525e575
  exports: 71e3484a4b1fb5c752fcd3291232e7ff
  romanizeWord 7f9c217ededf0559d0727e8e0fd891e3
import  -/  Syllabification 7281e651cb3d926edd5f51e1c1524b58
  exports: a741c5c7159797f058482789d7878efa
  syllabifyWord 9c41d63e10ca51c04b80d2cc0776e270
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
7d0fb29523d5ab6f851e885fcd49f556
  $wgo ::
    [((GHC.Base.String, InflectionData.LexCat), PhonemeData.Word)]
    -> (# [(GHC.Base.String, InflectionData.LexCat)],
          [PhonemeData.Word] #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0] -}
24674cc12c5f1da7b6fcf1d2752ecbd9
  $wparseLexicalSystems ::
    InflectionData.InflectionSystem
    -> InflectionData.LexCat
    -> [InflectionData.ManifestSystem]
    -> [InflectionData.ManifestSystem]
    -> [InflectionData.ManifestSystem]
    -> GHC.Base.String
  {- Arity: 5,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,1*U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: InflectionData.InflectionSystem
                   ww :: InflectionData.LexCat
                   ww1 :: [InflectionData.ManifestSystem]
                   ww2 :: [InflectionData.ManifestSystem]
                   ww3 :: [InflectionData.ManifestSystem] ->
                 GHC.CString.unpackAppendCString#
                   "<br>\n"#
                   (GHC.Base.++
                      @ GHC.Types.Char
                      (Parse.parseLexCat ww)
                      (case GHC.List.$wlenAcc
                              @ InflectionData.ManifestSystem
                              ww1
                              0 of ww4 { DEFAULT ->
                       GHC.Base.++
                         @ GHC.Types.Char
                         (Parse.$wparseManifestSystems ww1 ww4 w)
                         (case GHC.List.$wlenAcc
                                 @ InflectionData.ManifestSystem
                                 ww2
                                 0 of ww5 { DEFAULT ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            (Parse.$wparseManifestSystems ww2 ww5 w)
                            (case GHC.List.$wlenAcc
                                    @ InflectionData.ManifestSystem
                                    ww3
                                    0 of ww6 { DEFAULT ->
                             Parse.$wparseManifestSystems ww3 ww6 w }) }) }))) -}
a98feac99f9633e80345d0bf4ac5d1e6
  $wparseManifestSystems ::
    [InflectionData.ManifestSystem]
    -> GHC.Prim.Int#
    -> InflectionData.InflectionSystem
    -> GHC.Base.String
  {- Arity: 3,
     Strictness: <L,U><S,U><L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: [0] -}
771aab9a2d038ab6f9dea62891dea017
  $wparseSyllable ::
    [PhonemeData.Phoneme]
    -> PhonemeData.Phoneme -> [PhonemeData.Phoneme] -> GHC.Base.String
  {- Arity: 3, Strictness: <S,1*U><S,1*U><L,1*U>, Inline: [0] -}
2c92ec77819489cfb322e7cee7ed05b6
  parseConPhonemeInventory ::
    [PhonemeData.Place]
    -> [PhonemeData.Manner]
    -> [PhonemeData.Phonation]
    -> [PhonemeData.Phoneme]
    -> GHC.Base.String
  {- Arity: 4, Strictness: <L,U><L,1*U><L,U><L,U> -}
986d057059b1f88941e98d89fdc2d7cb
  parseDictionary ::
    [[PhonemeData.Phoneme]]
    -> [((GHC.Base.String, InflectionData.LexCat), PhonemeData.Word)]
    -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U><L,1*U>,
     Unfolding: (\ sonHier :: [[PhonemeData.Phoneme]]
                   pairs :: [((GHC.Base.String, InflectionData.LexCat),
                              PhonemeData.Word)] ->
                 GHC.CString.unpackAppendCString#
                   "\n"#
                   (letrec {
                      groupByFBCore :: [((GHC.Base.String, InflectionData.LexCat),
                                         PhonemeData.Word)]
                                       -> [[GHC.Types.Char]]
                        {- Arity: 1, Strictness: <S,1*U> -}
                      = \ ds :: [((GHC.Base.String, InflectionData.LexCat),
                                  PhonemeData.Word)] ->
                        case ds of wild {
                          [] -> GHC.Types.[] @ [GHC.Types.Char]
                          : x xs
                          -> let {
                               ds1 :: ([((GHC.Base.String, InflectionData.LexCat),
                                         PhonemeData.Word)],
                                       [((GHC.Base.String, InflectionData.LexCat),
                                         PhonemeData.Word)])
                               = case GHC.List.$wspan
                                        @ ((GHC.Base.String, InflectionData.LexCat),
                                           PhonemeData.Word)
                                        (\ y :: ((GHC.Base.String, InflectionData.LexCat),
                                                 PhonemeData.Word) ->
                                         case x of wild1 { (,) ds2 y1 ->
                                         case y1 of wild2 { PhonemeData.Word a9 ->
                                         case y of wild3 { (,) ds3 y2 ->
                                         case y2 of wild4 { PhonemeData.Word b1 ->
                                         GHC.Classes.$fEq[]_$c==
                                           @ PhonemeData.Morpheme
                                           PhonemeData.$fEqMorpheme
                                           a9
                                           b1 } } } })
                                        xs of ww { (#,#) ww1 ww2 ->
                                 (ww1, ww2) }
                             } in
                             GHC.Types.:
                               @ [GHC.Types.Char]
                               (case Parse.$wgo
                                       (GHC.Types.:
                                          @ ((GHC.Base.String, InflectionData.LexCat),
                                             PhonemeData.Word)
                                          x
                                          (case ds1 of wild1 { (,) ys zs ->
                                           ys })) of ww { (#,#) ww1 ww2 ->
                                case ww2 of wild1 {
                                  [] -> case GHC.List.badHead ret_ty [GHC.Types.Char] of {}
                                  : x1 ds2
                                  -> case x1 of ww3 { PhonemeData.Word ww4 ->
                                     GHC.Base.++
                                       @ GHC.Types.Char
                                       (Romanization.romanizeWord_go ww4)
                                       (GHC.CString.unpackAppendCString#
                                          " ("#
                                          (GHC.Base.++
                                             @ GHC.Types.Char
                                             (Parse.parseWord sonHier ww3)
                                             (GHC.CString.unpackAppendCString#
                                                ")"#
                                                (Parse.parseDictionary_go ww1)))) } } })
                               (case ds1 of wild1 { (,) ys zs -> groupByFBCore zs }) }
                    } in
                    case groupByFBCore
                           (Data.OldList.sortBy
                              @ ((GHC.Base.String, InflectionData.LexCat), PhonemeData.Word)
                              Parse.parseDictionary2
                              (Data.OldList.sortBy
                                 @ ((GHC.Base.String, InflectionData.LexCat), PhonemeData.Word)
                                 Parse.parseDictionary2
                                 pairs)) of wild {
                      [] -> GHC.Types.[] @ GHC.Types.Char
                      : x xs1
                      -> Data.OldList.intercalate_$spoly_go
                           @ GHC.Types.Char
                           x
                           (Data.OldList.prependToAll
                              @ [GHC.Types.Char]
                              Parse.parseDictionary1
                              xs1) })) -}
e767d2f030f0a31a0986b258e08357c0
  parseDictionary1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "\n"#) -}
614bad3d8944aa38255807017a5893c1
  parseDictionary2 ::
    ((GHC.Base.String, InflectionData.LexCat), PhonemeData.Word)
    -> ((GHC.Base.String, InflectionData.LexCat), PhonemeData.Word)
    -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (\ x :: ((GHC.Base.String, InflectionData.LexCat),
                         PhonemeData.Word)
                   y :: ((GHC.Base.String, InflectionData.LexCat),
                         PhonemeData.Word)[OneShot] ->
                 case x of wild { (,) ds1 y1 ->
                 case y1 of wild1 { PhonemeData.Word a10 ->
                 case y of wild2 { (,) ds2 y2 ->
                 case y2 of wild3 { PhonemeData.Word b1 ->
                 GHC.Classes.$w$ccompare14
                   @ PhonemeData.Morpheme
                   PhonemeData.$fOrdMorpheme
                   a10
                   b1 } } } }) -}
8b94a12010aa62abadac25edeb0a667c
  parseDictionary_go ::
    [([GHC.Types.Char], InflectionData.LexCat)] -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <S,1*U> -}
0875b533d2b33a15ff36f99e489147b8
  parseDiphPhonemeInventory ::
    [PhonemeData.Phoneme] -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ diphs :: [PhonemeData.Phoneme] ->
                 GHC.CString.unpackAppendCString#
                   "<br>\n\
                   \Diphthongs: /"#
                   (case Parse.parseDiphPhonemeInventory_go1 diphs of wild {
                      [] -> case GHC.List.init2 ret_ty [GHC.Types.Char] of {}
                      : x xs
                      -> let {
                           a :: [GHC.Types.Char]
                           = GHC.CString.unpackAppendCString#
                               "/, and /"#
                               (GHC.Base.++
                                  @ GHC.Types.Char
                                  (Parse.parseDiphPhonemeInventory_go
                                     wild
                                     (GHC.List.lastError @ [GHC.Types.Char]))
                                  Parse.parseDiphPhonemeInventory2)
                         } in
                         case GHC.List.init1 @ [GHC.Types.Char] x xs of wild1 {
                           [] -> a
                           : x1 xs1
                           -> GHC.Base.++
                                @ GHC.Types.Char
                                (Data.OldList.intercalate_$spoly_go
                                   @ GHC.Types.Char
                                   x1
                                   (Data.OldList.prependToAll
                                      @ [GHC.Types.Char]
                                      Parse.parseDiphPhonemeInventory1
                                      xs1))
                                a } })) -}
6791a924f28ddbb2b4436328cc158bb0
  parseDiphPhonemeInventory1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "/, /"#) -}
49db310c985e992b5f051449ae0e67f9
  parseDiphPhonemeInventory2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "/\n"#) -}
9bdecbadd65ef08a194641c1894fbd7f
  parseDiphPhonemeInventory_go ::
    [[GHC.Types.Char]] -> [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U> -}
3cb28b3ecae4b759a4f05421b46be980
  parseDiphPhonemeInventory_go1 ::
    [PhonemeData.Phoneme] -> [[GHC.Types.Char]]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
09946df8d800ee9a80b395fe0f2a3b5c
  parseLCInflection ::
    InflectionData.InflectionSystem -> GHC.Base.String
  {- Arity: 1,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)> -}
35655403e69f9f3d492e23afe4c5d341
  parseLexCat :: InflectionData.LexCat -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ lc :: InflectionData.LexCat ->
                 case GHC.Prim.dataToTag# @ InflectionData.LexCat lc of wild {
                   DEFAULT -> Parse.parseLexicalSystems8
                   2 -> Parse.parseLexicalSystems7
                   4 -> Parse.parseLexicalSystems6
                   5 -> Parse.parseLexicalSystems5
                   6 -> Parse.parseLexicalSystems4
                   7 -> Parse.parseLexicalSystems3
                   8 -> Parse.parseLexicalSystems2
                   9 -> Parse.parseLexicalSystems1 }) -}
22980d064629ac40e0d471cde210fbaf
  parseLexicalSystems ::
    InflectionData.InflectionSystem
    -> (InflectionData.LexCat,
        [InflectionData.ManifestSystem],
        [InflectionData.ManifestSystem],
        [InflectionData.ManifestSystem])
    -> GHC.Base.String
  {- Arity: 2,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U(1*U,U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: InflectionData.InflectionSystem
                   w1 :: (InflectionData.LexCat,
                          [InflectionData.ManifestSystem],
                          [InflectionData.ManifestSystem],
                          [InflectionData.ManifestSystem]) ->
                 case w1 of ww { (,,,) ww1 ww2 ww3 ww4 ->
                 Parse.$wparseLexicalSystems w ww1 ww2 ww3 ww4 }) -}
5ddc729e927a29f70ca5b5ae78668561
  parseLexicalSystems1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Subject"#) -}
7445be06d241a23d5f35d00dcc9ed3f1
  parseLexicalSystems2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Object"#) -}
962cc6c993b9c1935a8eb3edb59da620
  parseLexicalSystems3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Adverb"#) -}
d29e6ab72e70d57f5520cdc00c507a70
  parseLexicalSystems4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Adjective"#) -}
6eab7133448fd81a487718e1922c1137
  parseLexicalSystems5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Adposition"#) -}
4d9e2369ab581ace3203cbe6ef85cb26
  parseLexicalSystems6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Noun"#) -}
22f1691ed38ed2dfc17a5b83e0e16a34
  parseLexicalSystems7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Verb"#) -}
f0eef13beafc1b464553b49b1a32bd7b
  parseLexicalSystems8 :: GHC.Base.String
  {- Strictness: b -}
cc4466bcec68df2a1b6bdaaa027a56f5
  parsePhoneme :: PhonemeData.Phoneme -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: PhonemeData.Phoneme ->
                 case ds of wild {
                   PhonemeData.Consonant ds1 ds2 ds3 ipa -> ipa
                   PhonemeData.Vowel ds1 ds2 ds3 ds4 ds5 ipa -> ipa
                   PhonemeData.Diphthong ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ipa -> ipa
                   PhonemeData.Blank -> GHC.Types.[] @ GHC.Types.Char }) -}
09751d181af5c7244fb3ef4134097787
  parseSonHier ::
    [PhonemeData.Phoneme] -> [[PhonemeData.Phoneme]] -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U><L,1*U>,
     Unfolding: (\ vows :: [PhonemeData.Phoneme]
                   cons :: [[PhonemeData.Phoneme]] ->
                 GHC.CString.unpackAppendCString#
                   "\n\
                   \\n\
                   \Sonority hierarchy: \n\
                   \/"#
                   (let {
                      a :: [GHC.Types.Char]
                      = GHC.CString.unpackAppendCString#
                          "/\n\
                          \/"#
                          (case GHC.Base.map
                                  @ [PhonemeData.Phoneme]
                                  @ [GHC.Types.Char]
                                  Parse.parseSonHier2
                                  cons of wild {
                             [] -> Parse.parseDiphPhonemeInventory2
                             : x xs1
                             -> GHC.Base.++
                                  @ GHC.Types.Char
                                  (Data.OldList.intercalate_$spoly_go
                                     @ GHC.Types.Char
                                     x
                                     (Data.OldList.prependToAll
                                        @ [GHC.Types.Char]
                                        Parse.parseSonHier1
                                        xs1))
                                  Parse.parseDiphPhonemeInventory2 })
                    } in
                    case GHC.Base.map
                           @ PhonemeData.Phoneme
                           @ [GHC.Types.Char]
                           Parse.parsePhoneme
                           vows of wild {
                      [] -> a
                      : x xs1
                      -> GHC.Base.++
                           @ GHC.Types.Char
                           (Data.OldList.intercalate_$spoly_go
                              @ GHC.Types.Char
                              x
                              (Data.OldList.prependToAll
                                 @ [GHC.Types.Char]
                                 Parse.parseDiphPhonemeInventory1
                                 xs1))
                           a })) -}
698f7a34392c2510227d6ab750a2fa06
  parseSonHier1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "/\n\
                   \/"#) -}
bbe07578c2fc03dd1266044b933683e2
  parseSonHier2 :: [PhonemeData.Phoneme] -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ x :: [PhonemeData.Phoneme] ->
                 case GHC.Base.map
                        @ PhonemeData.Phoneme
                        @ [GHC.Types.Char]
                        Parse.parsePhoneme
                        x of wild {
                   [] -> GHC.Types.[] @ GHC.Types.Char
                   : x1 xs1
                   -> Data.OldList.intercalate_$spoly_go
                        @ GHC.Types.Char
                        x1
                        (Data.OldList.prependToAll
                           @ [GHC.Types.Char]
                           Parse.parseDiphPhonemeInventory1
                           xs1) }) -}
3c160975a818f1bc8956114373cadf74
  parseSyllable :: OtherData.Syllable -> GHC.Base.String
  {- Arity: 1, Strictness: <S(SSL),1*U(1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: OtherData.Syllable ->
                 case w of ww { OtherData.Syllable ww1 ww2 ww3 ->
                 Parse.$wparseSyllable ww1 ww2 ww3 }) -}
1e4f74103eff51bc1bf2b33db1a2af3b
  parseVowPhonemeInventory ::
    [PhonemeData.Height]
    -> [PhonemeData.Backness]
    -> [PhonemeData.Roundedness]
    -> [PhonemeData.Length]
    -> [PhonemeData.Phoneme]
    -> GHC.Base.String
  {- Arity: 5, Strictness: <L,1*U><L,U><L,U><L,U><L,U> -}
a5e79c59071bc0faf05b870b949d95ac
  parseWord ::
    [[PhonemeData.Phoneme]] -> PhonemeData.Word -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U><L,1*U(1*U)>,
     Unfolding: (\ sonHier :: [[PhonemeData.Phoneme]]
                   word :: PhonemeData.Word ->
                 GHC.CString.unpackAppendCString#
                   "/"#
                   (case word of ww { PhonemeData.Word ww1 ->
                    case Syllabification.$wsyllabifyWord
                           sonHier
                           ww1 of ww2 { (##) ww3 ->
                    case GHC.Base.map
                           @ OtherData.Syllable
                           @ [GHC.Types.Char]
                           Parse.parseSyllable
                           ww3 of wild {
                      [] -> Parse.parseWord2
                      : x xs1
                      -> GHC.Base.++
                           @ GHC.Types.Char
                           (Data.OldList.intercalate_$spoly_go
                              @ GHC.Types.Char
                              x
                              (Data.OldList.prependToAll
                                 @ [GHC.Types.Char]
                                 Parse.parseWord1
                                 xs1))
                           Parse.parseWord2 } } })) -}
9358ba8c7af32269ca38c6638e659a84
  parseWord1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "."#) -}
1ba7724c926ca4fc3629bb373ba0965b
  parseWord2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "/"#) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

