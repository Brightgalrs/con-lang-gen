
==================== FINAL INTERFACE ====================
2016-12-03 17:02:51.536594 UTC

interface conla_1eA9qWUPH9nBowcXqqaV8r:Parse 7103
  interface hash: f621903bfd3b9b03e6d87ca2cdce9a96
  ABI hash: a9b5d1bf50d8b53e8bf3e5b4a63267af
  export-list hash: 5ea6cd786088df35daa0ad64e1cdd1d8
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 9b5f0a9c5ab937702e8736ae3b06ccc6
  sig of: Nothing
  used TH splices: False
  where
exports:
  Parse.parseConPhonemeInventory
  Parse.parseDictionary
  Parse.parseDiphPhonemeInventory
  Parse.parseLCInflection
  Parse.parseLexicalSystems
  Parse.parseSonHier
  Parse.parseVowPhonemeInventory
  Parse.parseWord
module dependencies: GrammarData InflectionData InflectionGen
                     MorphologyGen OtherData PhonemeData PhonemeGen PhonotacticsGen
                     Romanization Syllabification WordGen
package dependencies: MonadPrompt-1.0.0.5@Monad_5vpMHuuRBzi4bKjpRN3A9L
                      MonadRandom-0.4.2.3@Monad_I7tEJH7vOtsKQS7CpG48fz
                      array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA base-4.8.2.0
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59
                      erf-2.0.0.0@erf_6l78BnvLL4b2mWYp3HJJxX
                      flexible-defaults-0.0.1.2@flexi_70LqvhG3vbS8bRvV8pHtMk
                      ghc-prim-0.4.0.0 integer-gmp-1.0.0.0
                      math-functions-0.1.7.0@mathf_BN6S7j0ar3LC4TsnYu0us5
                      mersenne-random-pure64-0.2.0.5@merse_42koSxEhmjwBS69WXi19xI
                      monad-loops-0.4.3@monad_LQiHRUYhFhYBU7nOOWDOrb
                      mtl-2.2.1@mtl_Aue4leSeVkpKLsfHIV51E8
                      mwc-random-0.13.4.0@mwcra_0lrQ1SkkNA85sa8eZ98xQk
                      old-locale-1.0.0.7@oldlo_7h2Gx6mVPJ5Gheca8j9Mpe
                      old-time-1.1.0.3@oldti_JVjJvknZJ0JKghfag2Jw2L
                      pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC
                      primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3
                      random-extras-0.19@rando_11jAc932BDRD7ydjCrRr4L
                      random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW
                      random-1.1@rando_9Kgekc9yEaLHLNUuw6paWL
                      random-shuffle-0.0.4@rando_9kOz9tEn1526ShtWz8x59X
                      random-fu-0.2.7.0@rando_HO0DW1nA2fDCxZJ62mvJHr
                      rvar-0.2.0.3@rvar_HDSuhGFxwNTDX4EfF6w8WG
                      stateref-0.3@state_KptOBHsY85L8YzpDAos2Hi
                      stm-2.4.4.1@stm_EyxFXFfnfY05IrjGaqCxeD
                      syb-0.6@syb_4kccWaTe3QZLxAMQYKgEyE template-haskell-2.10.0.0
                      th-extras-0.0.0.4@thext_LRY1RUMy7ShLl2tqhMyHdO
                      time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn
                      transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF
                      vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln
orphans: MonadRandom-0.4.2.3@Monad_I7tEJH7vOtsKQS7CpG48fz:Control.Monad.Random
         base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         conla_1eA9qWUPH9nBowcXqqaV8r:InflectionData
         mersenne-random-pure64-0.2.0.5@merse_42koSxEhmjwBS69WXi19xI:System.Random.Mersenne.Pure64
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source.IO
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source.MWC
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source.PureMT
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source.StdGen
         stateref-0.3@state_KptOBHsY85L8YzpDAos2Hi:Data.StateRef.Instances
         stateref-0.3@state_KptOBHsY85L8YzpDAos2Hi:Data.StateRef.Instances.STM
         stm-2.4.4.1@stm_EyxFXFfnfY05IrjGaqCxeD:Control.Monad.STM
         syb-0.6@syb_4kccWaTe3QZLxAMQYKgEyE:Data.Generics.Instances
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Calendar.Gregorian
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Format.Parse
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.LocalTime.LocalTime
         transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.Trans.Error
         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Fusion.Bundle
         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Sequence
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
                         mwc-random-0.13.4.0@mwcra_0lrQ1SkkNA85sa8eZ98xQk:System.Random.MWC
                         pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3:Control.Monad.Primitive
                         template-haskell-2.10.0.0:Language.Haskell.TH.Syntax
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Primitive
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed.Base
import  -/  base-4.8.2.0:Control.Arrow ab7f126fed349de468f94ac777dc8f4e
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:Data.List 3f0782c8d4bf50eecefcd5ea1798aac8
import  -/  base-4.8.2.0:Data.OldList d8fd80b0e14aa085ce6219cd89dad356
import  -/  base-4.8.2.0:Data.Tuple 012ad951a59a9d85fe1de36a2f012986
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.Exts 7bdf420b67c4b8c9ccc9ea593e90bb92
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  GrammarData 8ac8d86b6b864664f180483e73ce823b
  exports: 5138522a0c1403d2fee44ad2a2f3e5a1
import  -/  InflectionData 1d3c9a42a800e5c12f0b2505845bd490
  exports: 14704a3a2d793893d80490c9a5c3fd3e
  ABS 3de193a57d08eb4351bed516e6915528
  ABS2 3e72915a8cfbfb992e01b0acfd6699b1
  ABS3 75d3ee571aaf44be9d49667f34c6e7a1
  ACC f9fe0513f13b7f15887119e74825036e
  ACTIVE bdd276611010fd4e7de9ef1a1eb64ba9
  ADP c4ca4407dd6893e7441f1ce202c32e54
  AFF ae570bc629df54df19786415b4661552
  AFUT cd6f8019527ffbc153f8c77960cc33d1
  AFUT1 79702db120892e2bf4944d906def231c
  AFUT2 b39120adadb82b75fd72f19ed5692615
  AFUT3 e31b9b08368c17d22253139b0da0b426
  AN 92d255f01c7022d8623f4eb26caa9568
  APRS c0f13628b6446aaba3aaeb0c78888f88
  APST 673ec114cce65a30148960a069d0f28c
  ASS cca9deef8bd9fae1b96f7f25af37e467
  AUD b7dbc69b867571baebeded679a2437c9
  Adj bdb85266b516c6d465d0ae35628bdd32
  Adpo f2851efffd9470f86f77b62dde491078
  Adv 5688552fbc7a8afea35cc72a794a7244
  Animacy 91fb0b41f9ef14c662c70b3629b6b5fe
  Aspect 8bbea98a3b619c1fafa2f31c2f747273
  COM 14285a8bd125835e9a4b92645c176f8b
  COND d143e05241e44cb2565c9df57ef72714
  CONT f74194ddc9e9dd9a43c60797c19c3d2f
  Case 6c10cc277989f00ac96ff5f8d0b9d977
  DEF 94577d41c082bfb6d7437e550a05f28b
  DEO 454f614867c42e6835c63a7dd26a7bae
  DIR 949df7ea1abcd1e4c9adfdd16e78622f
  DITRANS ad136d19a01b1f0b1bf542248b65a93f
  DRT1 a8c5136b763d34e8482e3b7516f69a97
  DRT2 80558148f814d1ce846831e7908db008
  DTR 1d0a9c60c30a12be644785e2c8ed7e5e
  DU 6fcf402c01ede31f9d226f6d41131824
  Definiteness 69e12afea565be2617200bf9671a6c0d
  EPIS bea782e40a2c86afea4f5459e8db1d68
  ERG b1bd2899d1abdce529801130ef254930
  ERG2 9e992c00faadd17e09b87296adbb85c3
  EXP 13d176bfea76f2773a1a0766ee818473
  Evidentiality 1261593b396b3f8b4367998b51bf6d8a
  Express 1ae0c46a8b58a514f38dd5171a3e67a3
  Express 7e958650c7791002a2540390e3aca90e
  F 1c55637fe9b6e56a577f0d5216b5f4a3
  FAM 0d9c7fb5a8d0b4ec8801ef51d7835373
  FIRST cecc12c628a98db7318233eb29fbb2dd
  FORM ab05c8d9d13b8ec99593f9c8d9ada58a
  FSTEXCL 0da196c000be44460b42081eed192cf9
  FSTINCL 68f283f29000647e6a1508b4bc3aba10
  FUT bc7512bb77499fdbb5effa29c415c5ac
  FUTPER baf82a24c7b12c8cd220d7aa38c532e4
  Gender e443e52c146978100c75258afee70577
  HAB a9f003f92f9733bd836b5f41f72dc091
  HSY d93f689da4136a8801cb56c7492096f2
  HUM 2b6d059c88724fb8c0dd01511a7c90ee
  Honorific 9f709bf4194f93c1f39907f3dcd0aede
  IMP 342a30926a4cfbb7c8b0aa9f60b77a06
  INAN 534ea7f9bb452328203d1afde724b24f
  IND dfb9ff36bc3159333029f14f730a72fa
  INDF e9056a6f7a66898299cee91b419ba30c
  INDIR 78dcf96e664c1b456f4aa68606064212
  INFER bd24608704e53d01dc97184dcccbc91b
  INTR d873b6527ee24fe6a934656c5344e465
  IPFV f431cc674036f2bd2c55faa20fb341f9
  IRR fe6b5122155a7d43631b31f17ab30920
  InflectionSystem d140bda0afaf2a222d43f8ac1fd40fcf
  JUS a63d023a6ccc97b09642487d8e39ed5f
  LexCat 406c10c56e8fc899b6f590771b3372e0
  M 71c8f0f929cd68ae7df9a9f408a9dc7f
  MIDDLE 89cf833df2b49cd4446fe9d309cd2833
  MTR f45056335ad4a49e1ed4153d27a73a1d
  MTRANS 2452dc8110f39082ea77cf5f51d04669
  Manifest 114198613dd9ad6edd0d798879c2e985
  Manifest 402c727bb1d5614cf0c6243ee3fa7337
  ManifestSystem 68733e867c197ec8e0576f4ed6aafe4d
  ManifestSystem d00ca9fc0955f2d18fcf424b683d5934
  Mood 987f478754e08db3236fd0a739247bf9
  N 0d0fbeb55ed6c22ae03d1cc47ceb58f5
  NEG c6b4447dff8c91ca4b8da00819560cbb
  NEU 8281464eb9c43aa8d76af9eadb4dcfe1
  NHUM 42886d2fb48e96897a0a456faf48a62c
  NNPROG 9d0019da9229ed3ce73f027ff0eacce5
  NOM 80075265a7d101140d656b71ae51f56e
  NOM2 ec989ff9569b0aad07d1272bb6adc37f
  NPROG 2c76aac3af6f7aa18798779bf91f879c
  NSPEC 153c18904b98b6eef607249a507c26a3
  NTOP c00480fd5eca3edda81c8916feaa2ef6
  NTRANS 39e3db7fda10a6ee1152a26d6e285c32
  NVIS 32f33c02cb22d3b94d27d66b6ba4d70d
  NVOL 5070ea1bf2dcde91ae950a1d844eee2a
  NoExpress 749a51da58ebbc7f9683e59a2088dd1a
  NoManifest ef9f93e4a4d3f65314ca388f1e754598
  Noun 03f9541569971afcd548f453c7b56f6a
  Number 111b9dd7881655400daece83d7690898
  OBJ ec65273487bcdb942741e597a8a0e97c
  OBL1 a2619073866e46627b8de992763a66f7
  OBL2 8bae6ad0d4f2d310f81672f1b866c87a
  OBL3 c37a2cf6ac896a40c6ea25e91fc021d9
  OBL4 1365e0e98a46def850b8b7fe24c0b0cc
  OBL5 0bf5bbf236160b931112e2d2ba7c0e75
  OBL6 35c93984bbe2bc7aaf84d69d5c7c137a
  OPT 9788323dd993136b4649e1fe1f148c68
  Obj 109002d27304823acda744ce5c24defa
  PA 4b788fc0552e65c24c04cd22b709c086
  PASSIVE 0ac883fb0d9139b4e6e274005299d735
  PEG 4d81f27dcc573699e985c0b4512bf220
  PFUT badcb7662adda8a0a0b15a2cd19cea70
  PFV 0e29db74af5e1be203bbbe2e1888ab07
  PL bff5116b266fd996fe31793bea9ccf71
  POST 4933d2e066fd964549812952ba3f836e
  POT df7e77c388cdbb25aa5eafa796e20eb9
  PPRS 58e3a1f794876660dd8c956df409b6e3
  PPST f1fac1b4bff611a1684617bce2c406d5
  PPST1 9f64dbc00d326624a44476cb8e06b0f4
  PPST2 6123d54e3053c4e6cc3416711021055d
  PPST3 1e20b6705a8057d67b6081db3d1d7094
  PREP b410e0cb46bb00c14d7325236b9a009d
  PRIM 056c245d241097e9c872d5ae3d8f9c60
  PROG 4abd81ce2a8265059fd4142a023b3367
  PRS c0f62648521118cd6a46b850b64772e4
  PRSPER 9157de6adf644ccb3b0a9a921f2813be
  PST 4c6bdc7a09f6a7a036ee91908efff349
  PSTPER a110595c7249c37a3ba84699533cc386
  Particle 6ce29bede09feb22319ca6ecd1e3f608
  Person cbc274f5b3d6239101cd9764b7773be5
  Polarity 961c5eb0bc4c139961b0a440a23b769f
  Prefix 6b0d4faa751777a71e8042659ab6b9f5
  QUO bdb27624d705351c9cdb93132abd04f7
  REP a2a19d69b7f298965696886da4ac90e9
  SBJV ef7786a93540b2b0617b511b4ffea553
  SEC 744670491bffd9e600e9faf6f1a11f55
  SECOND f525324add25f7fe6455db96da7a6926
  SG d47eac755ade515ded2f93134be8eb31
  SPEC e9e1059eddd852097a3721e2756b4b45
  Specificity 6c3fc67424127bb4feb2d92b23a30da0
  Subj 15a215e8dbc8b9c2167dddaaf41cad61
  Suffix 7b772f49c77983d500993b93b36cc935
  THIRD 38835e8c5db27b156e0d21b0c59b834d
  THRDOBV 702cb22aad89a9e969c6a4be47251d01
  THRDPROX a8735d04765686dfb6fc438368296773
  TOP 861dd87564afa5ae6b84fecf9d2874ae
  TR eb52ece223ed324a83021d13e350a466
  TRANS 2097ac8d096ff9e5b89aed1d2b8c8669
  TRI 03533fff00a562d1d63a4cdfe0258ec2
  Tense 5f476bea2da27cbe0ffe1e5cde3d9551
  Topic f2502f7485a2c7bc47bb080f20b26aeb
  Transitivity 8463dae3116062b076dc25e0f6b8c749
  UANI 08354aeb3969261d9de26a55068a0fa1
  UASP 773d25316e79c7fc891e3e97f3619913
  UCAS 88c3f4f685a030733b2cddc73f08cbe1
  UDEF d8a3849b48935e4c2b1863f2ba1c7969
  UEVI 4142f9d71a91d35fbc0cd3dce3c0d73a
  UGEN 4ac97fbe7cdb98f310f8608fd1922f91
  UHON a7496ba7fa435301182c3cd09f6bae7f
  UMOO 94ccf8d6868e980806bf9100284f8a55
  UNUM 7d54d631811525f9328cec4b4c15dc98
  UPER 7a65a7b1e677904e4d831a00f9ccc4b0
  UPOL 3d5ad83d727c6c6d8717a52a1cf18dd0
  USPE e0474a08c6a31f0091dd505d5cb08389
  UTEN 895fbb3b1f7a483f819e1a5148c2d9d3
  UTOP e5f0d5a7d0deb0b6b73b4cc3db430439
  UTRA 08d328105a5f2dbbe3146874023ff314
  UVOI fe7da799f695a7aa8a7beb98d2ced112
  UVOL c39ff1325f8d3ce1ed069e6837785a8b
  VIS 1e52861a6ab49bd585841ab7729de74a
  VOL 1bae58924c7aea18a061d001c672f421
  Verb 7a8d9ab245a1af778cdf2e6e44f34c3a
  Voice 66f849eb0df273279725c8472ced02cc
  Volition 3a73fa2d976f240c7ba768b809a25328
  ZO 902f0446994728cdfe165d30abf48aa3
  aniSys 77b3a4432edfccebb3b22d1c9b24ac4d
  aspSys b8fda4d4df735d7364c18984ec33d22d
  casSys 0742e33feebcc2aedfa503cbac8da46c
  defSys 32998dbfeb4e34fb6c5d335c07211467
  eviSys bf96f69c433d29648ef52d67868a021f
  genSys 9381ca4fedbf8ceed1ccbf87d7c5ea11
  honSys 0d571c6678cc881fd60d97ead23d7dfc
  mooSys d90942dd715cf7190a76153b176213fb
  numSys e3f0341cfb574429476d3eef73dc9b22
  perSys b556a32261e8c80f3f8a544ec8ca9305
  polSys dd1e1dde879856f37659781ab72a7cd9
  speSys db725844404908ae2faa7ea16c653f57
  tenSys a84f08c83ed8f33a17989dcde7856121
  topSys 94ae191c7be8b8307ec5a07176b30931
  traSys 17d7b2e9ec588d6bd99bab7f098f36f7
  voiSys 629ad62232c211277f83c5bfbea3bcb1
  volSys 5fdcf2bef393c39136e0bea7f04d5cde
import  -/  MorphologyGen 01942de38c3aff9c7ed6a59b435af702
  exports: 8de0d74896901fa8074712836a786dd5
  cleanGrammarSys 4da66b57f5add59887026d85a40f27b9
import  -/  OtherData 37db5ddc38f8875c91a0806c561b30cd
  exports: f505dec72f229982fb85e59b44566731
  SyllWord 0624a89133bbff2a1ba0667c167f657d
  Syllable ce972a6ed094f671f39d3e48151bf110
  Syllable beb50056cf357f9bcbcd0be61b7088e1
import  -/  PhonemeData 408b6488aa28ce44ef05793241013f6f
  exports: c711b36c9b7415c6d00ea9681146dbcb
  AFFRICATE c0633accced1e40697782c5c04b069ce
  ALVEOLAR 6fe183e3c8864ca442f7934e503d4650
  ALVEOLOPALATAL daaffb93a2932477e0f61cae6455dfcd
  APPROXIMANT afa9ca34009df8bf926af4481cb93350
  ASPIRATED b450b7c37ee4c8ef687d93633b315711
  BACK 2ec193314c96eb813ec77befac27f281
  BILABIAL 3ab6fb02456e7fcc0dca4f2242171191
  BOTTOMT 5c8c3bfeea1efd20d0e241577aeaed3c
  BREATHY 8d667724cf65c3e5a0cd73cb0397fa29
  Backness 8fd035312b9b1aba200f0ff8b45ff72f
  Blank c038fb2739bcd61a81d7b8b9a51467b7
  CENTRAL 42c0ac2b606a0dce589d130770507529
  CLOSE 22a96e2ec8a1cab7a2f11a25f17987dc
  CLOSEMID 28a8baa1d812c2959004ad2d5860cb36
  CORONAL cc7698dba037e39c815c055830684fab
  CREAKY cb0270b18ea7e542b72282922e925056
  Consonant e834121481c88ee1a99bb2d9c0c327a2
  DEFAULT b271861fd1783576b8280fda084f6056
  DENTAL fe60451e7fc177f8625db85852eb0594
  DENTIALVEOLAR e87e90600a110bb2397ee6da2ffbf497
  DIPT b669c8a9f42776ed9f48cdf31ecba3ff
  DORSAL 1715325532b0ab74efd7a9242241abba
  Diphthong de76956b0dda8aec4042cce68ab3cbb6
  EPIGLOTTAL 1a9f8059dab5e25b84a38539acc282e0
  EPIPHARYNGEAL 6267ba3ac09d030e3a193c53a5993ff7
  FALLT bf6493f564c877af8436448a72bf1e37
  FLAP 3fdcd00eea839fd7b6da4b6acdc50091
  FRICATIVE 55d73c4ea823ed2361247a0286d3ae01
  FRONT e0d2a42adbbfcfd87ac73f47de30a67d
  GLOTTAL de51a7f06d006897d0ca0d7b5fbd7880
  HFALLT dc0ffd2bd3b9494d348f048b9c591d0e
  HIGHT 7e89a0437c122c578ba5ac84b708192c
  HRISET 17f437c4fdfc44f5b496ba136f41caee
  Height bb7ef9ff04f02fbe9e908095d7879647
  LABIAL c3a78c73d4e8cf0a03b0594238bdd0ea
  LABIODENTAL 2912ab0d7ecd49578e43134b3ad7a5bf
  LAFFRICATE 6f5bc94cce450cc0d219b9e7f4bcbde9
  LAPPROXIMANT 51ca15e8d8190b49c520d84671352b20
  LARYNGEAL 9c9a9c12eed09cfca90c9e2b46f5c65e
  LFALLT 370593f09c7f1e4e0722ba38d021e3f9
  LFLAP b1d07d8ecfdefe7336a346f04a1bc9f3
  LFRICATIVE 8b71d52af44fcf2b2a9ec5d3a31321d4
  LONG 6c15e86e7ce9a3cd079cd9b36f04d7af
  LOWT e2c96f8c8a0008a363a3296afe0758d8
  LRISET 59e93717df80eb5418d9965ef4df0bcd
  Length 4b86df05ae3dae785a151fc2e2a4d662
  MID 667a6c2f4d919e1e38ed9c4ff4b3260a
  MIDT 268aa1e9dd8af14d1b6d8ef49d5dc0dd
  MODAL a60f576982bf888dffe19414dff892e8
  Manner cdf7cd4260ea9474daf2650d49d3b524
  Morpheme 84694ed806c557c515bbf4e524e13725
  Morpheme 383812fe40de4e6210cee815bfc93a6d
  NASAL 426532af6235ef2717bfa577e4906681
  NEARBACK 2f38802f6c145c99cfa5586df929a2ee
  NEARCLOSE d7648572c57097cf4678314deb3fb67a
  NEARFRONT 9d4ac6e377dd5f683a1fffdb5bef1503
  NEAROPEN 491a5f682434521ae4a79e53765d96bf
  NONET b3be8c8512b975551c05f5baffb2e3b9
  NORMAL 0cce345bf4361ad51e3d65565a5c7d8e
  OPEN 648d92e73f3591a0c10aa22bf73af8a2
  OPENMID 1a820ba4ee453b6df8e4a6000474d157
  PALATAL 1158b737ddb9a1219e5b2c2dc2261d56
  PEAKT 2310bcd4e4515266cc481df033ba5148
  PHARYNGEAL 9a742db34256d27cb1668ee7109a7b2b
  POSTALVEOLAR fb373bc5ad900ec4e364a39937ff2d50
  Phonation 2538822911657f5bc7898beed9a7f1fa
  Phoneme 78c280a9bf84c920fdcdc1bfa9515e2f
  Place a616e74c300a23926e887c7817b7b7ad
  RETROFLEX d76654bb9469506b723a22ed8a2b942b
  RISET 425c8b99bf07c70e4f648034b388578e
  ROUNDED 382d348536829d0483430e784688d11a
  Roundedness 3d23d3477a2c2b7874207db0a6b52ca6
  SAFFRICATE b3daffb192c7e4171e761f236a414d52
  SHORT 8975b9f99f59a81283ac8b701c7be2d0
  SILIBANT cd19d84dfc64144f248cad9dfb2b0243
  SLACK 38360f4734186e8a71cd1eb70076b104
  STIFF 9532155286b949a79e44c716094fd6ed
  STOP f7279e969883f96544c7de4d53999e6d
  TOPT 5c5fc11cf7ab85cd94630c67df11043f
  TRILL 2fca8896800c7846ccd54f7e650387fc
  Tone c9348a5b3e7ca841d0de6bc684e0cd9f
  UNROUNDED a85394a8cff5ac983dc69f1a095a4b21
  UVULAR 1a9c449c6d7416a18ab62d11aa6d8e38
  VELAR 2f6ec346e194f837cae24e473f67f200
  VOICELESS 04648cc19c7e44a5ad8aa1e9bcc5d028
  Vowel 0c80a941fa0fc13c4b1061bd7565d7d6
  Word 82eaddf6262316ad93815378773a62ff
  csymbol be9e716b1baf264bba90072e249f1793
  vsymbol f5a8735f8217d4ab5b161b539e08e3e8
import  -/  Romanization 804bca94f08cbe6d41992a68b525e575
  exports: 71e3484a4b1fb5c752fcd3291232e7ff
  romanizeWord 7f9c217ededf0559d0727e8e0fd891e3
import  -/  Syllabification 7281e651cb3d926edd5f51e1c1524b58
  exports: a741c5c7159797f058482789d7878efa
  syllabifyWord 9c41d63e10ca51c04b80d2cc0776e270
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
7db0b9336f3e7f5a7fc76d4fb3bb4f4a
  $wgo ::
    [((GHC.Base.String, InflectionData.LexCat), PhonemeData.Word)]
    -> (# [(GHC.Base.String, InflectionData.LexCat)],
          [PhonemeData.Word] #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0] -}
5a3bf0ba6cea83d5a11c3bb045a49441
  $wparseLexicalSystems ::
    InflectionData.InflectionSystem
    -> InflectionData.LexCat
    -> [InflectionData.ManifestSystem]
    -> [InflectionData.ManifestSystem]
    -> [InflectionData.ManifestSystem]
    -> GHC.Base.String
  {- Arity: 5,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,1*U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: InflectionData.InflectionSystem
                   ww :: InflectionData.LexCat
                   ww1 :: [InflectionData.ManifestSystem]
                   ww2 :: [InflectionData.ManifestSystem]
                   ww3 :: [InflectionData.ManifestSystem] ->
                 GHC.CString.unpackAppendCString#
                   "<br>\n"#
                   (GHC.Base.++
                      @ GHC.Types.Char
                      (Parse.parseLexCat ww)
                      (case GHC.List.$wlenAcc
                              @ InflectionData.ManifestSystem
                              ww1
                              0 of ww4 { DEFAULT ->
                       GHC.Base.++
                         @ GHC.Types.Char
                         (Parse.$wparseManifestSystems ww1 ww4 w)
                         (case GHC.List.$wlenAcc
                                 @ InflectionData.ManifestSystem
                                 ww2
                                 0 of ww5 { DEFAULT ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            (Parse.$wparseManifestSystems ww2 ww5 w)
                            (case GHC.List.$wlenAcc
                                    @ InflectionData.ManifestSystem
                                    ww3
                                    0 of ww6 { DEFAULT ->
                             Parse.$wparseManifestSystems ww3 ww6 w }) }) }))) -}
5bc33d0ba47f45cdbd982757d2bf48ae
  $wparseManifestSystems ::
    [InflectionData.ManifestSystem]
    -> GHC.Prim.Int#
    -> InflectionData.InflectionSystem
    -> GHC.Base.String
  {- Arity: 3,
     Strictness: <L,U><S,U><L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: [0] -}
771aab9a2d038ab6f9dea62891dea017
  $wparseSyllable ::
    [PhonemeData.Phoneme]
    -> PhonemeData.Phoneme -> [PhonemeData.Phoneme] -> GHC.Base.String
  {- Arity: 3, Strictness: <S,1*U><S,1*U><L,1*U>, Inline: [0] -}
2c92ec77819489cfb322e7cee7ed05b6
  parseConPhonemeInventory ::
    [PhonemeData.Place]
    -> [PhonemeData.Manner]
    -> [PhonemeData.Phonation]
    -> [PhonemeData.Phoneme]
    -> GHC.Base.String
  {- Arity: 4, Strictness: <L,U><L,1*U><L,U><L,U> -}
fe358ae264fd236edee94d2749d5dbe9
  parseDictionary ::
    [[PhonemeData.Phoneme]]
    -> [((GHC.Base.String, InflectionData.LexCat), PhonemeData.Word)]
    -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U><L,1*U>,
     Unfolding: (\ sonHier :: [[PhonemeData.Phoneme]]
                   pairs :: [((GHC.Base.String, InflectionData.LexCat),
                              PhonemeData.Word)] ->
                 GHC.CString.unpackAppendCString#
                   "\n"#
                   (letrec {
                      groupByFBCore :: [((GHC.Base.String, InflectionData.LexCat),
                                         PhonemeData.Word)]
                                       -> [[GHC.Types.Char]]
                        {- Arity: 1, Strictness: <S,1*U> -}
                      = \ ds :: [((GHC.Base.String, InflectionData.LexCat),
                                  PhonemeData.Word)] ->
                        case ds of wild {
                          [] -> GHC.Types.[] @ [GHC.Types.Char]
                          : x xs
                          -> let {
                               ds1 :: ([((GHC.Base.String, InflectionData.LexCat),
                                         PhonemeData.Word)],
                                       [((GHC.Base.String, InflectionData.LexCat),
                                         PhonemeData.Word)])
                               = case GHC.List.$wspan
                                        @ ((GHC.Base.String, InflectionData.LexCat),
                                           PhonemeData.Word)
                                        (\ y :: ((GHC.Base.String, InflectionData.LexCat),
                                                 PhonemeData.Word) ->
                                         case x of wild1 { (,) ds2 y1 ->
                                         case y1 of wild2 { PhonemeData.Word a9 ->
                                         case y of wild3 { (,) ds3 y2 ->
                                         case y2 of wild4 { PhonemeData.Word b1 ->
                                         GHC.Classes.$fEq[]_$c==
                                           @ PhonemeData.Morpheme
                                           PhonemeData.$fEqMorpheme
                                           a9
                                           b1 } } } })
                                        xs of ww { (#,#) ww1 ww2 ->
                                 (ww1, ww2) }
                             } in
                             GHC.Types.:
                               @ [GHC.Types.Char]
                               (case Parse.$wgo
                                       (GHC.Types.:
                                          @ ((GHC.Base.String, InflectionData.LexCat),
                                             PhonemeData.Word)
                                          x
                                          (case ds1 of wild1 { (,) ys zs ->
                                           ys })) of ww { (#,#) ww1 ww2 ->
                                case ww2 of wild1 {
                                  [] -> case GHC.List.badHead ret_ty [GHC.Types.Char] of {}
                                  : x1 ds2
                                  -> case x1 of ww3 { PhonemeData.Word ww4 ->
                                     GHC.Base.++
                                       @ GHC.Types.Char
                                       (Romanization.romanizeWord_go ww4)
                                       (GHC.CString.unpackAppendCString#
                                          " ("#
                                          (GHC.Base.++
                                             @ GHC.Types.Char
                                             (Parse.parseWord sonHier ww3)
                                             (GHC.CString.unpackAppendCString#
                                                ")"#
                                                (Parse.parseDictionary_go ww1)))) } } })
                               (case ds1 of wild1 { (,) ys zs -> groupByFBCore zs }) }
                    } in
                    case groupByFBCore
                           (Data.OldList.sortBy
                              @ ((GHC.Base.String, InflectionData.LexCat), PhonemeData.Word)
                              Parse.parseDictionary2
                              (Data.OldList.sortBy
                                 @ ((GHC.Base.String, InflectionData.LexCat), PhonemeData.Word)
                                 Parse.parseDictionary2
                                 pairs)) of wild {
                      [] -> GHC.Types.[] @ GHC.Types.Char
                      : x xs1
                      -> Data.OldList.intercalate_$spoly_go
                           @ GHC.Types.Char
                           x
                           (Data.OldList.prependToAll
                              @ [GHC.Types.Char]
                              Parse.parseDictionary1
                              xs1) })) -}
e767d2f030f0a31a0986b258e08357c0
  parseDictionary1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "\n"#) -}
fee3648cd989aa7c56a4a271e051690c
  parseDictionary2 ::
    ((GHC.Base.String, InflectionData.LexCat), PhonemeData.Word)
    -> ((GHC.Base.String, InflectionData.LexCat), PhonemeData.Word)
    -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (\ x :: ((GHC.Base.String, InflectionData.LexCat),
                         PhonemeData.Word)
                   y :: ((GHC.Base.String, InflectionData.LexCat),
                         PhonemeData.Word)[OneShot] ->
                 case x of wild { (,) ds1 y1 ->
                 case y1 of wild1 { PhonemeData.Word a10 ->
                 case y of wild2 { (,) ds2 y2 ->
                 case y2 of wild3 { PhonemeData.Word b1 ->
                 GHC.Classes.$w$ccompare14
                   @ PhonemeData.Morpheme
                   PhonemeData.$fOrdMorpheme
                   a10
                   b1 } } } }) -}
a266eeee44fca22deb8650790cb42b14
  parseDictionary_go ::
    [([GHC.Types.Char], InflectionData.LexCat)] -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <S,1*U> -}
0875b533d2b33a15ff36f99e489147b8
  parseDiphPhonemeInventory ::
    [PhonemeData.Phoneme] -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ diphs :: [PhonemeData.Phoneme] ->
                 GHC.CString.unpackAppendCString#
                   "<br>\n\
                   \Diphthongs: /"#
                   (case Parse.parseDiphPhonemeInventory_go1 diphs of wild {
                      [] -> case GHC.List.init2 ret_ty [GHC.Types.Char] of {}
                      : x xs
                      -> let {
                           a :: [GHC.Types.Char]
                           = GHC.CString.unpackAppendCString#
                               "/, and /"#
                               (GHC.Base.++
                                  @ GHC.Types.Char
                                  (Parse.parseDiphPhonemeInventory_go
                                     wild
                                     (GHC.List.lastError @ [GHC.Types.Char]))
                                  Parse.parseDiphPhonemeInventory2)
                         } in
                         case GHC.List.init1 @ [GHC.Types.Char] x xs of wild1 {
                           [] -> a
                           : x1 xs1
                           -> GHC.Base.++
                                @ GHC.Types.Char
                                (Data.OldList.intercalate_$spoly_go
                                   @ GHC.Types.Char
                                   x1
                                   (Data.OldList.prependToAll
                                      @ [GHC.Types.Char]
                                      Parse.parseDiphPhonemeInventory1
                                      xs1))
                                a } })) -}
6791a924f28ddbb2b4436328cc158bb0
  parseDiphPhonemeInventory1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "/, /"#) -}
49db310c985e992b5f051449ae0e67f9
  parseDiphPhonemeInventory2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "/\n"#) -}
9bdecbadd65ef08a194641c1894fbd7f
  parseDiphPhonemeInventory_go ::
    [[GHC.Types.Char]] -> [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U> -}
3cb28b3ecae4b759a4f05421b46be980
  parseDiphPhonemeInventory_go1 ::
    [PhonemeData.Phoneme] -> [[GHC.Types.Char]]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
799d93a2eb68563785ca0a4b39c6c334
  parseLCInflection ::
    InflectionData.InflectionSystem -> GHC.Base.String
  {- Arity: 1,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)> -}
4d9a9823c3458f1f88c3b55daa804259
  parseLexCat :: InflectionData.LexCat -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ lc :: InflectionData.LexCat ->
                 case GHC.Prim.dataToTag# @ InflectionData.LexCat lc of wild {
                   DEFAULT -> Parse.parseLexicalSystems8
                   2 -> Parse.parseLexicalSystems7
                   4 -> Parse.parseLexicalSystems6
                   5 -> Parse.parseLexicalSystems5
                   6 -> Parse.parseLexicalSystems4
                   7 -> Parse.parseLexicalSystems3
                   8 -> Parse.parseLexicalSystems2
                   9 -> Parse.parseLexicalSystems1 }) -}
580f8a094c5aca29adafc04e5224eacb
  parseLexicalSystems ::
    InflectionData.InflectionSystem
    -> (InflectionData.LexCat,
        [InflectionData.ManifestSystem],
        [InflectionData.ManifestSystem],
        [InflectionData.ManifestSystem])
    -> GHC.Base.String
  {- Arity: 2,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U(1*U,U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: InflectionData.InflectionSystem
                   w1 :: (InflectionData.LexCat,
                          [InflectionData.ManifestSystem],
                          [InflectionData.ManifestSystem],
                          [InflectionData.ManifestSystem]) ->
                 case w1 of ww { (,,,) ww1 ww2 ww3 ww4 ->
                 Parse.$wparseLexicalSystems w ww1 ww2 ww3 ww4 }) -}
5ddc729e927a29f70ca5b5ae78668561
  parseLexicalSystems1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Subject"#) -}
7445be06d241a23d5f35d00dcc9ed3f1
  parseLexicalSystems2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Object"#) -}
962cc6c993b9c1935a8eb3edb59da620
  parseLexicalSystems3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Adverb"#) -}
d29e6ab72e70d57f5520cdc00c507a70
  parseLexicalSystems4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Adjective"#) -}
6eab7133448fd81a487718e1922c1137
  parseLexicalSystems5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Adposition"#) -}
4d9e2369ab581ace3203cbe6ef85cb26
  parseLexicalSystems6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Noun"#) -}
22f1691ed38ed2dfc17a5b83e0e16a34
  parseLexicalSystems7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Verb"#) -}
f0eef13beafc1b464553b49b1a32bd7b
  parseLexicalSystems8 :: GHC.Base.String
  {- Strictness: b -}
cc4466bcec68df2a1b6bdaaa027a56f5
  parsePhoneme :: PhonemeData.Phoneme -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: PhonemeData.Phoneme ->
                 case ds of wild {
                   PhonemeData.Consonant ds1 ds2 ds3 ipa -> ipa
                   PhonemeData.Vowel ds1 ds2 ds3 ds4 ds5 ipa -> ipa
                   PhonemeData.Diphthong ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ipa -> ipa
                   PhonemeData.Blank -> GHC.Types.[] @ GHC.Types.Char }) -}
09751d181af5c7244fb3ef4134097787
  parseSonHier ::
    [PhonemeData.Phoneme] -> [[PhonemeData.Phoneme]] -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U><L,1*U>,
     Unfolding: (\ vows :: [PhonemeData.Phoneme]
                   cons :: [[PhonemeData.Phoneme]] ->
                 GHC.CString.unpackAppendCString#
                   "\n\
                   \\n\
                   \Sonority hierarchy: \n\
                   \/"#
                   (let {
                      a :: [GHC.Types.Char]
                      = GHC.CString.unpackAppendCString#
                          "/\n\
                          \/"#
                          (case GHC.Base.map
                                  @ [PhonemeData.Phoneme]
                                  @ [GHC.Types.Char]
                                  Parse.parseSonHier2
                                  cons of wild {
                             [] -> Parse.parseDiphPhonemeInventory2
                             : x xs1
                             -> GHC.Base.++
                                  @ GHC.Types.Char
                                  (Data.OldList.intercalate_$spoly_go
                                     @ GHC.Types.Char
                                     x
                                     (Data.OldList.prependToAll
                                        @ [GHC.Types.Char]
                                        Parse.parseSonHier1
                                        xs1))
                                  Parse.parseDiphPhonemeInventory2 })
                    } in
                    case GHC.Base.map
                           @ PhonemeData.Phoneme
                           @ [GHC.Types.Char]
                           Parse.parsePhoneme
                           vows of wild {
                      [] -> a
                      : x xs1
                      -> GHC.Base.++
                           @ GHC.Types.Char
                           (Data.OldList.intercalate_$spoly_go
                              @ GHC.Types.Char
                              x
                              (Data.OldList.prependToAll
                                 @ [GHC.Types.Char]
                                 Parse.parseDiphPhonemeInventory1
                                 xs1))
                           a })) -}
698f7a34392c2510227d6ab750a2fa06
  parseSonHier1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "/\n\
                   \/"#) -}
bbe07578c2fc03dd1266044b933683e2
  parseSonHier2 :: [PhonemeData.Phoneme] -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ x :: [PhonemeData.Phoneme] ->
                 case GHC.Base.map
                        @ PhonemeData.Phoneme
                        @ [GHC.Types.Char]
                        Parse.parsePhoneme
                        x of wild {
                   [] -> GHC.Types.[] @ GHC.Types.Char
                   : x1 xs1
                   -> Data.OldList.intercalate_$spoly_go
                        @ GHC.Types.Char
                        x1
                        (Data.OldList.prependToAll
                           @ [GHC.Types.Char]
                           Parse.parseDiphPhonemeInventory1
                           xs1) }) -}
3c160975a818f1bc8956114373cadf74
  parseSyllable :: OtherData.Syllable -> GHC.Base.String
  {- Arity: 1, Strictness: <S(SSL),1*U(1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: OtherData.Syllable ->
                 case w of ww { OtherData.Syllable ww1 ww2 ww3 ->
                 Parse.$wparseSyllable ww1 ww2 ww3 }) -}
1e4f74103eff51bc1bf2b33db1a2af3b
  parseVowPhonemeInventory ::
    [PhonemeData.Height]
    -> [PhonemeData.Backness]
    -> [PhonemeData.Roundedness]
    -> [PhonemeData.Length]
    -> [PhonemeData.Phoneme]
    -> GHC.Base.String
  {- Arity: 5, Strictness: <L,1*U><L,U><L,U><L,U><L,U> -}
a5e79c59071bc0faf05b870b949d95ac
  parseWord ::
    [[PhonemeData.Phoneme]] -> PhonemeData.Word -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U><L,1*U(1*U)>,
     Unfolding: (\ sonHier :: [[PhonemeData.Phoneme]]
                   word :: PhonemeData.Word ->
                 GHC.CString.unpackAppendCString#
                   "/"#
                   (case word of ww { PhonemeData.Word ww1 ->
                    case Syllabification.$wsyllabifyWord
                           sonHier
                           ww1 of ww2 { (##) ww3 ->
                    case GHC.Base.map
                           @ OtherData.Syllable
                           @ [GHC.Types.Char]
                           Parse.parseSyllable
                           ww3 of wild {
                      [] -> Parse.parseWord2
                      : x xs1
                      -> GHC.Base.++
                           @ GHC.Types.Char
                           (Data.OldList.intercalate_$spoly_go
                              @ GHC.Types.Char
                              x
                              (Data.OldList.prependToAll
                                 @ [GHC.Types.Char]
                                 Parse.parseWord1
                                 xs1))
                           Parse.parseWord2 } } })) -}
9358ba8c7af32269ca38c6638e659a84
  parseWord1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "."#) -}
1ba7724c926ca4fc3629bb373ba0965b
  parseWord2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "/"#) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

