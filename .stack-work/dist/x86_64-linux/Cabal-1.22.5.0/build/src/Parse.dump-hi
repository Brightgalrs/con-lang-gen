
==================== FINAL INTERFACE ====================
2016-11-04 09:25:14.763216 UTC

interface conla_1eA9qWUPH9nBowcXqqaV8r:Parse 7103
  interface hash: 3b79293ab7ca7359f8b7999ccbcaf47b
  ABI hash: 19567af977eedb4dccb8eec2233b3469
  export-list hash: dcc6fd75f8e0ce635435ff482f3e4104
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 9b5f0a9c5ab937702e8736ae3b06ccc6
  sig of: Nothing
  used TH splices: False
  where
exports:
  Parse.parseConPhonemeInventory
  Parse.parseDictionary
  Parse.parseDiphPhonemeInventory
  Parse.parseLCInflection
  Parse.parseLexicalSystems
  Parse.parseSonHier
  Parse.parseVowPhonemeInventory
  Parse.parseWord
module dependencies: GrammarData InflectionData InflectionGen
                     MorphologyGen OtherData PhonemeData PhonemeGen PhonotacticsGen
                     Romanization Syllabification WordGen
package dependencies: MonadPrompt-1.0.0.5@Monad_5vpMHuuRBzi4bKjpRN3A9L
                      MonadRandom-0.4.2.3@Monad_I7tEJH7vOtsKQS7CpG48fz
                      array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA base-4.8.2.0
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59
                      erf-2.0.0.0@erf_6l78BnvLL4b2mWYp3HJJxX
                      flexible-defaults-0.0.1.2@flexi_70LqvhG3vbS8bRvV8pHtMk
                      ghc-prim-0.4.0.0 integer-gmp-1.0.0.0
                      math-functions-0.1.7.0@mathf_BN6S7j0ar3LC4TsnYu0us5
                      mersenne-random-pure64-0.2.0.5@merse_42koSxEhmjwBS69WXi19xI
                      monad-loops-0.4.3@monad_LQiHRUYhFhYBU7nOOWDOrb
                      mtl-2.2.1@mtl_Aue4leSeVkpKLsfHIV51E8
                      mwc-random-0.13.4.0@mwcra_0lrQ1SkkNA85sa8eZ98xQk
                      old-locale-1.0.0.7@oldlo_7h2Gx6mVPJ5Gheca8j9Mpe
                      old-time-1.1.0.3@oldti_JVjJvknZJ0JKghfag2Jw2L
                      pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC
                      primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3
                      random-extras-0.19@rando_11jAc932BDRD7ydjCrRr4L
                      random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW
                      random-1.1@rando_9Kgekc9yEaLHLNUuw6paWL
                      random-shuffle-0.0.4@rando_9kOz9tEn1526ShtWz8x59X
                      random-fu-0.2.7.0@rando_HO0DW1nA2fDCxZJ62mvJHr
                      rvar-0.2.0.3@rvar_HDSuhGFxwNTDX4EfF6w8WG
                      stateref-0.3@state_KptOBHsY85L8YzpDAos2Hi
                      stm-2.4.4.1@stm_EyxFXFfnfY05IrjGaqCxeD
                      syb-0.6@syb_4kccWaTe3QZLxAMQYKgEyE template-haskell-2.10.0.0
                      th-extras-0.0.0.4@thext_LRY1RUMy7ShLl2tqhMyHdO
                      time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn
                      transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF
                      vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln
orphans: MonadRandom-0.4.2.3@Monad_I7tEJH7vOtsKQS7CpG48fz:Control.Monad.Random
         base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         conla_1eA9qWUPH9nBowcXqqaV8r:InflectionData
         mersenne-random-pure64-0.2.0.5@merse_42koSxEhmjwBS69WXi19xI:System.Random.Mersenne.Pure64
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source.IO
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source.MWC
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source.PureMT
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source.StdGen
         stateref-0.3@state_KptOBHsY85L8YzpDAos2Hi:Data.StateRef.Instances
         stateref-0.3@state_KptOBHsY85L8YzpDAos2Hi:Data.StateRef.Instances.STM
         stm-2.4.4.1@stm_EyxFXFfnfY05IrjGaqCxeD:Control.Monad.STM
         syb-0.6@syb_4kccWaTe3QZLxAMQYKgEyE:Data.Generics.Instances
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Calendar.Gregorian
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Format.Parse
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.LocalTime.LocalTime
         transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.Trans.Error
         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Fusion.Bundle
         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Sequence
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
                         mwc-random-0.13.4.0@mwcra_0lrQ1SkkNA85sa8eZ98xQk:System.Random.MWC
                         pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3:Control.Monad.Primitive
                         template-haskell-2.10.0.0:Language.Haskell.TH.Syntax
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Primitive
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed.Base
import  -/  base-4.8.2.0:Control.Arrow ab7f126fed349de468f94ac777dc8f4e
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:Data.List 3f0782c8d4bf50eecefcd5ea1798aac8
import  -/  base-4.8.2.0:Data.OldList d8fd80b0e14aa085ce6219cd89dad356
import  -/  base-4.8.2.0:Data.Tuple 012ad951a59a9d85fe1de36a2f012986
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.Exts 7bdf420b67c4b8c9ccc9ea593e90bb92
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  GrammarData b86371ccb48390730f6498310ddac76f
  exports: d1002ba5737e19703411cb57857cf209
  Adj a3bce51fd2fd7e4dc0d2574150a46bdd
  Adpo e1b568ccc2675d1bef53ee8c3ef42f36
  Adv 4a64e83d00d2a5bdf1bc31836d30e3ed
  LexCat b95e114b0b6d51b5dd936a539d4fcd51
  Noun 29b0c18b13a4547db43d1c3e1971f3f5
  Obj b4f9889d136903923d8bc809466b9633
  Subj 3cfe6619fad03b0ad0047434a3ce1fb3
  Verb f06c4b09592b8a5d74db07316a39ae60
import  -/  InflectionData 072303e933f9eb87493ca2db6553722b
  exports: 11ce4827ce97282915e6b63398631625
  ABS cf7e205ad31c66dcf7e76a307f143817
  ABS2 e209ff70164fe00e9071e82a4581b73d
  ABS3 02d05ed1dc5a14ea1383b0db41526082
  ACC d5bf44dd777e3e1aaa2e24e1f74644b1
  ACTIVE b098f40dc5cb2b974bf70675d2929b28
  ADP ee72810d82108de212e916ed8328d470
  AFF 5c93dba210b224e8aefc607c318384f9
  AN 55ac4666ecab9991248fd0e8b72368fb
  ASS ba3f1c5d20f6aa80aac80ab539b862f6
  AUD a9351ce2d5c8ece924660c13a88932dc
  Animacy cedf9e666cdb6656f2a2a96d2d3bd589
  Aspect 6cd9c63aad1a4e1ec43732010ec1ea5c
  COM 7b77890081d480d6d8786e36167cb365
  COND 9b859c5d02aff5dfafe25d8a5f9d7ecf
  Case fe9f4ca1606b5f19f2230e1deea3d046
  Clusivity ec2f2b20d2b1cf035f6ca129e5552311
  DEF fa20032ba8ddd27be310ad02915bbf41
  DEO e1b24a1abd72e20fc18cd7e8eedefa00
  DIR ebd6380a1f832d91e7fc9effef6aaa5e
  DITRANS e3a0d89157f2d83f99a5367a07516463
  DRT1 d3820b09d72a24574e423092b2958b2f
  DRT2 237a20f414b7904adbb4a90d1751bc12
  DTR 5a1ccd3487d0118c69e040ef7d619991
  DU 8a6bab5495b3e17f7f6a965978773c01
  Definiteness b37f400b256ab5a9a84f13e148a3d2d5
  EPIS bae1229c4b5c344d63792dd0674284ce
  ERG b9800fbde32d2bd14b25cfa8e1c71c14
  ERG2 83be53b4a7dbcc60a077e42a4bb6cd99
  EXCL 0d08bb8de53071431e5d8e3d98407e1b
  EXP 20a93640dd966f6cf8186d1eb7e206de
  Evidentiality 72f49e3daffb56d4bf46854dab7a01ee
  F 82e950b67779798796f2baa7b1a854c0
  FAM cbb341199367977a58524b01131234be
  FIRST 315b89a5b45a037fa5a0c73dd7e0950d
  FORM c66779ee2778b9fde48274295ef73e51
  FUT 4f694bc9c605b7c9eb78a9bfe72435d3
  Gender bea847055a51c2d8a5a4f43d44b03253
  HSY f15d7292856604ec1d0745cf2d098c05
  HUM 6be55d3fe8918b427319929a28d7b23f
  Honorific b998d88ddf707e2096355bc29dc9a0f5
  IMMF d0cfbac81e4dcac4be8b27e3141a025a
  IMP 4df70152cbcf6bb12ad5d06cc3f2e476
  INAN b50d9f46a5b64892f5fecea8b12ad83d
  INCL d3593e2ec5514a955f3aef5cccd454e3
  IND 064c2ab36734294bf8185bae154966a1
  INDF 52a6a91481d72b281ae51ae3dca87aef
  INDIR b37439508a01505b1b92831ce41c34dd
  INFER e9a98d7f49bce40a2eb49edca0fea3f2
  INTR 91f32e667433911fef0f5d8ad78c239d
  IPFV 65243100e56e27fcadd15649fd07ca64
  IRR 647b7bb644f7c105054a0893323c452c
  InflectionSystem 1e3fe4826a39142c5de940012234f2c4
  JUS c769dd86af6badd087ba38c9f309d904
  M 3c0b24bbef493f73241cf418b667946f
  MIDDLE df81ddcf24d286900a219f2466413294
  MTR 4aaaef2c2fa40b9f29d633fe687110c5
  Manifest 56c295ecee861c84924b0ef3cc95c44d
  Manifest 585905e8fe5aabe454e8c831c9719ba2
  ManifestSystem 268e7a03a2371f8f98142b4115e92b1f
  ManifestSystem 0e7b2c73aa17600e0a7730d855d918b4
  Mood 89f52f47d857baf59a835f155022c894
  N 4ac60101878a22edc6f6ff7239514789
  NEG 1a20ee25b3ded1fbaeb2e12f379cc9f3
  NFUT 1fd7bb63dccdfee66c16b3eeae37e081
  NHUM fc2bb5a5138b2763e566062b48ef9fe1
  NOM 6372ee0118db22d7961ada41c4e3371d
  NOM2 cba8fd202484fcb379a1d3e2acfcc72d
  NPST 236f7ac3103cee2d402467dbc2afb4d7
  NSPEC 86a105a1d13b19ccdb14415ff887447c
  NTOP 0b95113aaf730f2c4db62de46f63d782
  NTRANS 5ffd59a502a2030cc8507c5bd0743c0c
  NVIS 25474bf7260657320e4749784d3e8212
  NVOL d3f1ae474cd9f6086aac8b8c6147b776
  NoManifest e94596ffd7352e0e0c9de30b8b5e034b
  Number d524767ed256fd8fb6411842c02ad522
  OBJ 54e1a2118312e5d2c5c81bb884cde752
  OBL1 9030858bed725730e49ff2e55ff34457
  OBL2 463fb7742f68dc3fe876c6727b7edf95
  OBL3 3a8e33fffc825bfc03d2a8af33b8a7ac
  OBL4 1f85476408b4214f6179d9136cf12322
  OBL5 77af57ade14eed614c99f48c8c5fc4d5
  OBL6 0b90073f54f6586ca59d91235c6e2f61
  OPT 40cde0a7b0058e0d78057cac4a9df421
  PA e5aa510414c5c1f1666b8eb1c08846e0
  PASSIVE 9feb8170cbf27cdc4964400258affd26
  PEG 62d0b45e041a3ed61b1414b7f5319211
  PFV 1bf5eb12b6c7a276cb262c5fcdc1a11d
  PL 5c0d47683fd34889dec7c206636f6c47
  POST c21c2e2d6e24e59c87a4df29da1de914
  POT 0ce69a751b97bce2cdecdc1323dc7a0b
  PREP ba596378086c005a73a26555ab7ab229
  PRIM 9d1d3cb8d4297934d0b3c07999e68eca
  PRS 26cd29d90bd490cc6f3a02b32b3e2ade
  PST cd754acd8827599ac07f7a3ddbfc49a0
  Person 87552d4bd640161dc918422e1f989f36
  Polarity b165a208777adb6384e8aa49b7841cdc
  PostParticle 051ff9038fce71d768ebdb0aef6d2dd4
  PreParticle baa2d75778bba4584f1d021ffebf5a10
  Prefix 631fddd0577e039670e847f15dc395e5
  QUO 2c7fd9ee977273c51ca7e9b3a8cc8ce7
  REC 20356383605f3ed88408c2656e10bd73
  REM 457b16c7adbe1e67d030fa92d1e62422
  REMF 546d4ca880ab0f597b8ad93a16c1c640
  REP bc9f339ef18044e7edc944afd1016b98
  SBJV 1586f27c9be9c52573273a51efc1077d
  SEC 7c108dd9ced5ef2a2a7daa597855505e
  SECOND bfdb3588226f552e5ff2ed477d78f712
  SG 1b3bad822be48bc704470fcc7ea80b3e
  SPEC ce7bdecfb32a8576a078dea2430a64e7
  Specificity 43df515dcdadd0ea11740b17c269f784
  Suffix 9f592c7bd6fb2cf679abca7c05f8cc1a
  THIRD a667f4e1e81a3d94b8caa7f2977b2e96
  TOP 850e35116776a2aa4c8c2deade57f692
  TR 77bfa53861b0984e7876f84238989968
  TRANS db0203f116f520eb878d75a2b2ae0dd7
  TRI 207837423bd40be5dc51689d80c203b5
  Tense 004b6b4805c5a693db94c0d4a7a3616e
  Topic 324933ffc8ee2e478eb9c9c4b97f7e1c
  Transitivity aa30e8d12dfa43bab7ebbfaa9a7bbce4
  VIS 4d96980ace97bfbffedee0ff7e894e9e
  VOL d240900b98ac44d21c4ee00657a07098
  Voice 523b90b12350f06385d4da5905742868
  Volition 79163f2537538d5ab28ad5d835b8900a
  ZO 20c61cc634f0472349ce87a9a0cd1c2c
  aniSys bf2169ba387ab3638393b84dee90c49a
  aspSys 486a8c668bebed30f10df64f6643cd35
  casSys b6253f264cf04b70ed6733ef84265597
  cluSys 1cf3ddc5b66c5059d89d1759026d76ef
  defSys 791f6bb49015e490e4fbaca91284d8c2
  eviSys 5f339467cb57a3613471b8a6ebc540f8
  genSys c2d6181902bbf995c74be89480b26002
  honSys af70c7f20f205d30889f82d82d0aeb97
  mooSys 51b1a25ce92a0ae2667748a51389e595
  numSys 179377656af013c07c11434888cc557e
  perSys 5da2ccc97fb2c77d51c790b5bcb3cec4
  polSys 36b2afcffd5ef0a1cda1beadc367dc13
  speSys b7c67cfc67167d978d2235118f373623
  tenSys b03397c4d00cd45069a68405c6b06dd1
  topSys 6853f117ed274e895a39b6a3602af3f2
  traSys d27da8882b7759d098740802420a9feb
  voiSys 38713f13dcf55bcb8c1bbbe8a724c366
  volSys 24176821604239ceb5a5e4fb709e7dfc
import  -/  MorphologyGen 8ceb28ea48040c72239d3de9e2e0951c
  exports: f9340380e19fdb3ff659d628c905371a
  cleanGrammarSys 5decb3fac3e9cf2cb78e51ed40a13149
import  -/  OtherData ef85631315e8bb1c90bd776e9bb7751c
  exports: f505dec72f229982fb85e59b44566731
  SyllWord 9c149b11caa7af61cc3fda153b1dcef5
  Syllable 05a619088617b930774519c90865b296
  Syllable 5683ce4e3b2a6c457b5e9c6c6ca43ce6
import  -/  PhonemeData 2bc4225bb63ccf0a16ac10bab410e892
  exports: 8834c83badd5837275d7ec1bbd2f424a
  AFFRICATE 147f242a04fba4ccaf3d990013a051a5
  ALVEOLAR c6b89f8b792d9549c21b502170ee4e1c
  ALVEOLOPALATAL 25346444b980c5a1ac9a043d30332738
  APPROXIMANT 688bb45ab09fc9e6611f59d892650e5d
  ASPIRATED 756e7c3f604a54456232d7e10e6e0cde
  BACK 66c69778bae2e4a440bb5a9cec7741ca
  BILABIAL 35be04d944862e0b4b3cd07ca4d4133e
  BREATHY f6261f7e07b77dd9cd142213c14126e3
  Backness 9747e3c7b5ae543ddf6a14d6c68612ef
  Blank 805b0aae2eb66442ff37c067e0d62089
  CENTRAL a7a040b3167734845bc52f2315f379f7
  CLOSE 19452b32e5ab61d38a230a97dff883ec
  CLOSEMID 829b1a375886bafe473e5cd43c980de0
  CORONAL ca62d4def85883412db49d69771fd684
  CREAKY 4c3da3105ff3af15a8154f034d9336ad
  Consonant b75bb727b0d1dc285bc6e78bea093faf
  DEFAULT 84e40dde3b21b2bbcc2467fc8b704c5b
  DENTAL 925136b48a76ca089014bdfac23ad309
  DENTIALVEOLAR f08684c6c979289597282b401bfbae39
  DORSAL bd982f4073f646c80f518bd24cad6c99
  Diphthong aa609d265bfaa803022b7633544c1bf3
  EPIGLOTTAL 4785a016a8862bf0c02884d663d41e83
  EPIPHARYNGEAL aebcfcb1d9fa1bca206af6180adaf0ac
  FLAP eccdd9a127edaee2ea4ed02c15b14dc9
  FRICATIVE 9fe324020397eadebc8f607209e35373
  FRONT 726360f7e0deebd1fa2b672cc9d9f70a
  GLOTTAL 9f89b2526fe223b1411cb7cc61b642cc
  Height 56a4ebd86a55476fcceec0b5b5ad52dd
  LABIAL 77986b66f6db3ff46d81e8a03975a08b
  LABIODENTAL 92275a3e1cccc7362f3597112fc06258
  LAFFRICATE 3e4cdb3cdeb16222335c945aafc38d2f
  LAPPROXIMANT 3c4f7b9a6a409f6c5ec3ef14ac4541d2
  LARYNGEAL 4ec5bea4a7834fa9780a3eaf6b6b5b4e
  LFLAP f2a7011e636265dc707312cd55371337
  LFRICATIVE fd803e10efe16b2dce9944b62a4a74b4
  LONG ee29e780120d882796a87cbbcdb00e55
  Length 414a8b878bf71816d2002a26fce00728
  MID 23250c6a570df131de1cdb293bacfe16
  MODAL bd244264bab2966de13717630fceb06d
  Manner 2286baa806cedbe4b7d0c4916ea37630
  Morpheme 773f530596237f1e058299251c3d7d0d
  Morpheme a75f0140e4b212df166951d7f735baaf
  NASAL 33a4f70f850c97bc19932b2d99f86fec
  NEARBACK 0a01970fff4a2ba092ad40544a59a654
  NEARCLOSE a0d527593a0e5b421ef4d1de2a61e5d4
  NEARFRONT 2fbf2ba3b8d9a1fda8899a2a6b7c003d
  NEAROPEN abe71d4960553e1118e265c97da6ca81
  NORMAL 341b4c7351a42f38158edd4de3495449
  OPEN f9dd652c29b38c171f0203609f54d8af
  OPENMID f4ad7f69fb5efb224cc41b1415e8557b
  PALATAL 82a2f3e6a3c4c0a3e97f9f57ac5073f8
  PHARYNGEAL 5c09d12e196eec4f612a556219df3e90
  POSTALVEOLAR 7e03f37b030e8871b4d22fdd4b93d488
  Phonation d728b957933ed40e5f338884385b44c8
  Phoneme 725a483aa2dd4b7c0473c29cf990b878
  Place e0644167ea1572fa835311f673311319
  RETROFLEX a3afd188eeb6612ef479970d85082992
  ROUNDED 0a5556dccc06d975adb090e5266ecb1d
  Roundedness 4c51106b8aab206d34cb6b9d104e8504
  SAFFRICATE b1edf15f9894f243d08ceea9bb332359
  SHORT ca70fa1eca0ee2f7a463a74c2a265547
  SILIBANT f64a5f1ed2462d03b63a4ac44aed52e4
  SLACK c990fb0ced343bfe6a5ecaaeda0b09e1
  STIFF 0bcb6b807cc83b67beb5b05b41f42598
  STOP 1e220103167759b2457a52d787a2828e
  TRILL 6ee80409b4b73f8f366272d21ec77dba
  UNROUNDED a7c2b1df7a48e8f0af1f098da4350bc3
  UVULAR 00b57ece7781c1ead6406b34dc02a2bf
  VELAR c83c546d533edfd28dc443ee9c5d12af
  VOICELESS dbf8f182d917d2469a91d36a4068291b
  Vowel bc70fa2bda72574d3d9a605b3092c858
  Word 55b6ea537d860cf92b62e64e19ceba7b
  csymbol adede1920d7863e2930e586cb77c5227
  vsymbol d4a50191fa439edee5dacea3c2489af1
import  -/  Romanization 1523dd09770b04f055c2d59814f16324
  exports: 71e3484a4b1fb5c752fcd3291232e7ff
  romanizeWord 6d52f6408ee50aea5e95ac6ac01b4f16
import  -/  Syllabification 96e237022078ceadc1014b4a4cd94a29
  exports: a741c5c7159797f058482789d7878efa
  syllabifyWord 842ed49da6db8873ca9344fa308b4001
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
15fdad1dfd672a78c4e320a098269c32
  $wgo ::
    [((GHC.Base.String, GrammarData.LexCat), PhonemeData.Word)]
    -> (# [(GHC.Base.String, GrammarData.LexCat)],
          [PhonemeData.Word] #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0] -}
1f3bc3df771b3d712af547f17ac7406b
  $wparseLexicalSystems ::
    InflectionData.InflectionSystem
    -> GrammarData.LexCat
    -> [InflectionData.ManifestSystem]
    -> [InflectionData.ManifestSystem]
    -> [InflectionData.ManifestSystem]
    -> [InflectionData.ManifestSystem]
    -> GHC.Base.String
  {- Arity: 6,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,1*U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: InflectionData.InflectionSystem
                   ww :: GrammarData.LexCat
                   ww1 :: [InflectionData.ManifestSystem]
                   ww2 :: [InflectionData.ManifestSystem]
                   ww3 :: [InflectionData.ManifestSystem]
                   ww4 :: [InflectionData.ManifestSystem] ->
                 GHC.CString.unpackAppendCString#
                   "<br>\n"#
                   (let {
                      a :: [GHC.Types.Char]
                      = case GHC.List.$wlenAcc
                               @ InflectionData.ManifestSystem
                               ww1
                               0 of ww5 { DEFAULT ->
                        GHC.Base.++
                          @ GHC.Types.Char
                          (Parse.$wparseManifestSystems ww1 ww5 w)
                          (case GHC.List.$wlenAcc
                                  @ InflectionData.ManifestSystem
                                  ww2
                                  0 of ww6 { DEFAULT ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             (Parse.$wparseManifestSystems ww2 ww6 w)
                             (case GHC.List.$wlenAcc
                                     @ InflectionData.ManifestSystem
                                     ww3
                                     0 of ww7 { DEFAULT ->
                              GHC.Base.++
                                @ GHC.Types.Char
                                (Parse.$wparseManifestSystems ww3 ww7 w)
                                (case GHC.List.$wlenAcc
                                        @ InflectionData.ManifestSystem
                                        ww4
                                        0 of ww8 { DEFAULT ->
                                 Parse.$wparseManifestSystems ww4 ww8 w }) }) }) }
                    } in
                    case ww of wild {
                      DEFAULT -> Parse.parseLexicalSystems7
                      GrammarData.Verb
                      -> GHC.Base.++ @ GHC.Types.Char Parse.parseLexicalSystems6 a
                      GrammarData.Adpo
                      -> GHC.Base.++ @ GHC.Types.Char Parse.parseLexicalSystems5 a
                      GrammarData.Adj
                      -> GHC.Base.++ @ GHC.Types.Char Parse.parseLexicalSystems4 a
                      GrammarData.Adv
                      -> GHC.Base.++ @ GHC.Types.Char Parse.parseLexicalSystems3 a
                      GrammarData.Obj
                      -> GHC.Base.++ @ GHC.Types.Char Parse.parseLexicalSystems2 a
                      GrammarData.Subj
                      -> GHC.Base.++ @ GHC.Types.Char Parse.parseLexicalSystems1 a })) -}
3ee4bcbb6f4d9693139c4585fa753b6e
  $wparseManifestSystems ::
    [InflectionData.ManifestSystem]
    -> GHC.Prim.Int#
    -> InflectionData.InflectionSystem
    -> GHC.Base.String
  {- Arity: 3,
     Strictness: <L,U><S,U><L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: [0] -}
a4927710c27ff7ef5e7438fa3ac76951
  $wparseSyllable ::
    [PhonemeData.Phoneme]
    -> PhonemeData.Phoneme -> [PhonemeData.Phoneme] -> GHC.Base.String
  {- Arity: 3, Strictness: <S,1*U><S,1*U><L,1*U>, Inline: [0] -}
2cf29beaf4d294f8eb2440da8cfb602f
  parseConPhonemeInventory ::
    [PhonemeData.Place]
    -> [PhonemeData.Manner]
    -> [PhonemeData.Phonation]
    -> [PhonemeData.Phoneme]
    -> GHC.Base.String
  {- Arity: 4, Strictness: <L,U><L,1*U><L,U><L,U> -}
1173c1752c3040727cdde4d86c7f6112
  parseDictionary ::
    [[PhonemeData.Phoneme]]
    -> [((GHC.Base.String, GrammarData.LexCat), PhonemeData.Word)]
    -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U><L,1*U>,
     Unfolding: (\ sonHier :: [[PhonemeData.Phoneme]]
                   pairs :: [((GHC.Base.String, GrammarData.LexCat),
                              PhonemeData.Word)] ->
                 GHC.CString.unpackAppendCString#
                   "\n"#
                   (letrec {
                      groupByFBCore :: [((GHC.Base.String, GrammarData.LexCat),
                                         PhonemeData.Word)]
                                       -> [[GHC.Types.Char]]
                        {- Arity: 1, Strictness: <S,1*U> -}
                      = \ ds :: [((GHC.Base.String, GrammarData.LexCat),
                                  PhonemeData.Word)] ->
                        case ds of wild {
                          [] -> GHC.Types.[] @ [GHC.Types.Char]
                          : x xs
                          -> let {
                               ds1 :: ([((GHC.Base.String, GrammarData.LexCat),
                                         PhonemeData.Word)],
                                       [((GHC.Base.String, GrammarData.LexCat), PhonemeData.Word)])
                               = case GHC.List.$wspan
                                        @ ((GHC.Base.String, GrammarData.LexCat), PhonemeData.Word)
                                        (\ y :: ((GHC.Base.String, GrammarData.LexCat),
                                                 PhonemeData.Word) ->
                                         case x of wild1 { (,) ds2 y1 ->
                                         case y1 of wild2 { PhonemeData.Word a8 ->
                                         case y of wild3 { (,) ds3 y2 ->
                                         case y2 of wild4 { PhonemeData.Word b1 ->
                                         GHC.Classes.$fEq[]_$c==
                                           @ PhonemeData.Morpheme
                                           PhonemeData.$fEqMorpheme
                                           a8
                                           b1 } } } })
                                        xs of ww { (#,#) ww1 ww2 ->
                                 (ww1, ww2) }
                             } in
                             GHC.Types.:
                               @ [GHC.Types.Char]
                               (case Parse.$wgo
                                       (GHC.Types.:
                                          @ ((GHC.Base.String, GrammarData.LexCat),
                                             PhonemeData.Word)
                                          x
                                          (case ds1 of wild1 { (,) ys zs ->
                                           ys })) of ww { (#,#) ww1 ww2 ->
                                case ww2 of wild1 {
                                  [] -> case GHC.List.badHead ret_ty [GHC.Types.Char] of {}
                                  : x1 ds2
                                  -> case x1 of ww3 { PhonemeData.Word ww4 ->
                                     GHC.Base.++
                                       @ GHC.Types.Char
                                       (Romanization.romanizeWord_go ww4)
                                       (GHC.CString.unpackAppendCString#
                                          " ("#
                                          (GHC.Base.++
                                             @ GHC.Types.Char
                                             (Parse.parseWord sonHier ww3)
                                             (GHC.CString.unpackAppendCString#
                                                ")"#
                                                (Parse.parseDictionary_go ww1)))) } } })
                               (case ds1 of wild1 { (,) ys zs -> groupByFBCore zs }) }
                    } in
                    case groupByFBCore
                           (Data.OldList.sortBy
                              @ ((GHC.Base.String, GrammarData.LexCat), PhonemeData.Word)
                              Parse.parseDictionary2
                              (Data.OldList.sortBy
                                 @ ((GHC.Base.String, GrammarData.LexCat), PhonemeData.Word)
                                 Parse.parseDictionary2
                                 pairs)) of wild {
                      [] -> GHC.Types.[] @ GHC.Types.Char
                      : x xs1
                      -> Data.OldList.intercalate_$spoly_go
                           @ GHC.Types.Char
                           x
                           (Data.OldList.prependToAll
                              @ [GHC.Types.Char]
                              Parse.parseDictionary1
                              xs1) })) -}
e767d2f030f0a31a0986b258e08357c0
  parseDictionary1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "\n"#) -}
2128c6f6b86d8258a5efc6318ae8a47a
  parseDictionary2 ::
    ((GHC.Base.String, GrammarData.LexCat), PhonemeData.Word)
    -> ((GHC.Base.String, GrammarData.LexCat), PhonemeData.Word)
    -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (\ x :: ((GHC.Base.String, GrammarData.LexCat),
                         PhonemeData.Word)
                   y :: ((GHC.Base.String, GrammarData.LexCat),
                         PhonemeData.Word)[OneShot] ->
                 case x of wild { (,) ds1 y1 ->
                 case y1 of wild1 { PhonemeData.Word a9 ->
                 case y of wild2 { (,) ds2 y2 ->
                 case y2 of wild3 { PhonemeData.Word b1 ->
                 GHC.Classes.$w$ccompare14
                   @ PhonemeData.Morpheme
                   PhonemeData.$fOrdMorpheme
                   a9
                   b1 } } } }) -}
8ced8ab262d54ea486f8a2b84bfdc080
  parseDictionary_go ::
    [([GHC.Types.Char], GrammarData.LexCat)] -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <S,1*U> -}
37ecbb37303e91af6655a96c5157a40e
  parseDiphPhonemeInventory ::
    [PhonemeData.Phoneme] -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ diphs :: [PhonemeData.Phoneme] ->
                 GHC.CString.unpackAppendCString#
                   "<br>\n\
                   \Diphthongs: /"#
                   (case Parse.parseDiphPhonemeInventory_go1 diphs of wild {
                      [] -> case GHC.List.init2 ret_ty [GHC.Types.Char] of {}
                      : x xs
                      -> let {
                           a :: [GHC.Types.Char]
                           = GHC.CString.unpackAppendCString#
                               "/, and /"#
                               (GHC.Base.++
                                  @ GHC.Types.Char
                                  (Parse.parseDiphPhonemeInventory_go
                                     wild
                                     (GHC.List.lastError @ [GHC.Types.Char]))
                                  Parse.parseDiphPhonemeInventory2)
                         } in
                         case GHC.List.init1 @ [GHC.Types.Char] x xs of wild1 {
                           [] -> a
                           : x1 xs1
                           -> GHC.Base.++
                                @ GHC.Types.Char
                                (Data.OldList.intercalate_$spoly_go
                                   @ GHC.Types.Char
                                   x1
                                   (Data.OldList.prependToAll
                                      @ [GHC.Types.Char]
                                      Parse.parseDiphPhonemeInventory1
                                      xs1))
                                a } })) -}
6791a924f28ddbb2b4436328cc158bb0
  parseDiphPhonemeInventory1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "/, /"#) -}
49db310c985e992b5f051449ae0e67f9
  parseDiphPhonemeInventory2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "/\n"#) -}
9bdecbadd65ef08a194641c1894fbd7f
  parseDiphPhonemeInventory_go ::
    [[GHC.Types.Char]] -> [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U> -}
c0d85280be0ee1123c1b66b21706a591
  parseDiphPhonemeInventory_go1 ::
    [PhonemeData.Phoneme] -> [[GHC.Types.Char]]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
778370230d6ef9d5fa5015be797b7d74
  parseLCInflection ::
    InflectionData.InflectionSystem -> GHC.Base.String
  {- Arity: 1,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)> -}
fa2eaf81ebc1cf4251386565e2f1f7b0
  parseLexicalSystems ::
    InflectionData.InflectionSystem
    -> (GrammarData.LexCat,
        [InflectionData.ManifestSystem],
        [InflectionData.ManifestSystem],
        [InflectionData.ManifestSystem],
        [InflectionData.ManifestSystem])
    -> GHC.Base.String
  {- Arity: 2,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U(1*U,U,U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: InflectionData.InflectionSystem
                   w1 :: (GrammarData.LexCat,
                          [InflectionData.ManifestSystem],
                          [InflectionData.ManifestSystem],
                          [InflectionData.ManifestSystem],
                          [InflectionData.ManifestSystem]) ->
                 case w1 of ww { (,,,,) ww1 ww2 ww3 ww4 ww5 ->
                 Parse.$wparseLexicalSystems w ww1 ww2 ww3 ww4 ww5 }) -}
5ddc729e927a29f70ca5b5ae78668561
  parseLexicalSystems1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Subject"#) -}
7445be06d241a23d5f35d00dcc9ed3f1
  parseLexicalSystems2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Object"#) -}
962cc6c993b9c1935a8eb3edb59da620
  parseLexicalSystems3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Adverb"#) -}
d29e6ab72e70d57f5520cdc00c507a70
  parseLexicalSystems4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Adjective"#) -}
6eab7133448fd81a487718e1922c1137
  parseLexicalSystems5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Adposition"#) -}
e7137246f7d0b2b7e102189ee76350ba
  parseLexicalSystems6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Verb"#) -}
1389583c8d482058f492c425d252dde9
  parseLexicalSystems7 :: GHC.Base.String
  {- Strictness: b -}
cc02a10c94d6400dcf23a311785fc7a7
  parsePhoneme :: PhonemeData.Phoneme -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: PhonemeData.Phoneme ->
                 case ds of wild {
                   PhonemeData.Consonant ds1 ds2 ds3 ipa -> ipa
                   PhonemeData.Vowel ds1 ds2 ds3 ds4 ipa -> ipa
                   PhonemeData.Diphthong ds1 ds2 ds3 ds4 ds5 ds6 ds7 ipa -> ipa
                   PhonemeData.Blank -> GHC.Types.[] @ GHC.Types.Char }) -}
946b2d8fac4d0e93b025d994d576d29c
  parseSonHier ::
    [PhonemeData.Phoneme] -> [[PhonemeData.Phoneme]] -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U><L,1*U>,
     Unfolding: (\ vows :: [PhonemeData.Phoneme]
                   cons :: [[PhonemeData.Phoneme]] ->
                 GHC.CString.unpackAppendCString#
                   "\n\
                   \\n\
                   \Sonority hierarchy: \n\
                   \/"#
                   (let {
                      a :: [GHC.Types.Char]
                      = GHC.CString.unpackAppendCString#
                          "/\n\
                          \/"#
                          (case GHC.Base.map
                                  @ [PhonemeData.Phoneme]
                                  @ [GHC.Types.Char]
                                  Parse.parseSonHier2
                                  cons of wild {
                             [] -> Parse.parseDiphPhonemeInventory2
                             : x xs1
                             -> GHC.Base.++
                                  @ GHC.Types.Char
                                  (Data.OldList.intercalate_$spoly_go
                                     @ GHC.Types.Char
                                     x
                                     (Data.OldList.prependToAll
                                        @ [GHC.Types.Char]
                                        Parse.parseSonHier1
                                        xs1))
                                  Parse.parseDiphPhonemeInventory2 })
                    } in
                    case GHC.Base.map
                           @ PhonemeData.Phoneme
                           @ [GHC.Types.Char]
                           Parse.parsePhoneme
                           vows of wild {
                      [] -> a
                      : x xs1
                      -> GHC.Base.++
                           @ GHC.Types.Char
                           (Data.OldList.intercalate_$spoly_go
                              @ GHC.Types.Char
                              x
                              (Data.OldList.prependToAll
                                 @ [GHC.Types.Char]
                                 Parse.parseDiphPhonemeInventory1
                                 xs1))
                           a })) -}
698f7a34392c2510227d6ab750a2fa06
  parseSonHier1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "/\n\
                   \/"#) -}
b365a6a37c6f55dc827c8e3d81c08e87
  parseSonHier2 :: [PhonemeData.Phoneme] -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ x :: [PhonemeData.Phoneme] ->
                 case GHC.Base.map
                        @ PhonemeData.Phoneme
                        @ [GHC.Types.Char]
                        Parse.parsePhoneme
                        x of wild {
                   [] -> GHC.Types.[] @ GHC.Types.Char
                   : x1 xs1
                   -> Data.OldList.intercalate_$spoly_go
                        @ GHC.Types.Char
                        x1
                        (Data.OldList.prependToAll
                           @ [GHC.Types.Char]
                           Parse.parseDiphPhonemeInventory1
                           xs1) }) -}
7ff880d4f987dddfeed7d2abbf815827
  parseSyllable :: OtherData.Syllable -> GHC.Base.String
  {- Arity: 1, Strictness: <S(SSL),1*U(1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: OtherData.Syllable ->
                 case w of ww { OtherData.Syllable ww1 ww2 ww3 ->
                 Parse.$wparseSyllable ww1 ww2 ww3 }) -}
5ccc280ac469782c117c9fc8865cd708
  parseVowPhonemeInventory ::
    [PhonemeData.Height]
    -> [PhonemeData.Backness]
    -> [PhonemeData.Roundedness]
    -> [PhonemeData.Length]
    -> [PhonemeData.Phoneme]
    -> GHC.Base.String
  {- Arity: 5, Strictness: <L,1*U><L,U><L,U><L,U><L,U> -}
5fe9cb010c88a9826d27c40887b3e219
  parseWord ::
    [[PhonemeData.Phoneme]] -> PhonemeData.Word -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U><L,1*U(1*U)>,
     Unfolding: (\ sonHier :: [[PhonemeData.Phoneme]]
                   word :: PhonemeData.Word ->
                 GHC.CString.unpackAppendCString#
                   "/"#
                   (case word of ww { PhonemeData.Word ww1 ->
                    case Syllabification.$wsyllabifyWord
                           sonHier
                           ww1 of ww2 { (##) ww3 ->
                    case GHC.Base.map
                           @ OtherData.Syllable
                           @ [GHC.Types.Char]
                           Parse.parseSyllable
                           ww3 of wild {
                      [] -> Parse.parseWord2
                      : x xs1
                      -> GHC.Base.++
                           @ GHC.Types.Char
                           (Data.OldList.intercalate_$spoly_go
                              @ GHC.Types.Char
                              x
                              (Data.OldList.prependToAll
                                 @ [GHC.Types.Char]
                                 Parse.parseWord1
                                 xs1))
                           Parse.parseWord2 } } })) -}
9358ba8c7af32269ca38c6638e659a84
  parseWord1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "."#) -}
1ba7724c926ca4fc3629bb373ba0965b
  parseWord2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "/"#) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

