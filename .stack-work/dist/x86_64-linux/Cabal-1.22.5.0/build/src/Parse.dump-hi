
==================== FINAL INTERFACE ====================
2016-09-28 03:36:48.313559 UTC

interface conla_1eA9qWUPH9nBowcXqqaV8r:Parse 7103
  interface hash: d95801e48267a350b330f76722663e63
  ABI hash: ee5615312a6e4a4034626ef25d3825f5
  export-list hash: a43fa29eab0d91fcd1a61d63814f3862
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 962af636f8e927040c7daa9c21457292
  sig of: Nothing
  used TH splices: False
  where
exports:
  Parse.parseConPhonemeInventory
  Parse.parseConPhonotactics
  Parse.parseDictionary
  Parse.parseVowPhonemeInventory
  Parse.parseVowPhonotactics
module dependencies: OtherData PhonemeInventoryGen PhonemeType
                     PhonotacticsGen WordGen
package dependencies: MonadPrompt-1.0.0.5@Monad_5vpMHuuRBzi4bKjpRN3A9L
                      MonadRandom-0.4.2.3@Monad_I7tEJH7vOtsKQS7CpG48fz
                      OneTuple-0.2.1@OneTu_7qUmBkRamgQ0H9fFgZmi5H
                      array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA base-4.8.2.0
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59
                      erf-2.0.0.0@erf_6l78BnvLL4b2mWYp3HJJxX
                      flexible-defaults-0.0.1.2@flexi_70LqvhG3vbS8bRvV8pHtMk
                      ghc-prim-0.4.0.0 integer-gmp-1.0.0.0
                      math-functions-0.1.7.0@mathf_BN6S7j0ar3LC4TsnYu0us5
                      mersenne-random-pure64-0.2.0.5@merse_42koSxEhmjwBS69WXi19xI
                      monad-loops-0.4.3@monad_LQiHRUYhFhYBU7nOOWDOrb
                      mtl-2.2.1@mtl_Aue4leSeVkpKLsfHIV51E8
                      mwc-random-0.13.4.0@mwcra_0lrQ1SkkNA85sa8eZ98xQk
                      old-locale-1.0.0.7@oldlo_7h2Gx6mVPJ5Gheca8j9Mpe
                      old-time-1.1.0.3@oldti_JVjJvknZJ0JKghfag2Jw2L
                      pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC
                      primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3
                      random-extras-0.19@rando_11jAc932BDRD7ydjCrRr4L
                      random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW
                      random-1.1@rando_9Kgekc9yEaLHLNUuw6paWL
                      random-shuffle-0.0.4@rando_9kOz9tEn1526ShtWz8x59X
                      random-fu-0.2.7.0@rando_HO0DW1nA2fDCxZJ62mvJHr
                      rvar-0.2.0.3@rvar_HDSuhGFxwNTDX4EfF6w8WG
                      stateref-0.3@state_KptOBHsY85L8YzpDAos2Hi
                      stm-2.4.4.1@stm_EyxFXFfnfY05IrjGaqCxeD
                      syb-0.6@syb_4kccWaTe3QZLxAMQYKgEyE template-haskell-2.10.0.0
                      th-extras-0.0.0.4@thext_LRY1RUMy7ShLl2tqhMyHdO
                      time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn
                      transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF
                      tuple-0.3.0.2@tuple_0P5GlwXwirn97NAX2TWlIC
                      vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln
orphans: MonadRandom-0.4.2.3@Monad_I7tEJH7vOtsKQS7CpG48fz:Control.Monad.Random
         base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         mersenne-random-pure64-0.2.0.5@merse_42koSxEhmjwBS69WXi19xI:System.Random.Mersenne.Pure64
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source.IO
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source.MWC
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source.PureMT
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source.StdGen
         stateref-0.3@state_KptOBHsY85L8YzpDAos2Hi:Data.StateRef.Instances
         stateref-0.3@state_KptOBHsY85L8YzpDAos2Hi:Data.StateRef.Instances.STM
         stm-2.4.4.1@stm_EyxFXFfnfY05IrjGaqCxeD:Control.Monad.STM
         syb-0.6@syb_4kccWaTe3QZLxAMQYKgEyE:Data.Generics.Instances
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Calendar.Gregorian
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Format.Parse
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.LocalTime.LocalTime
         transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.Trans.Error
         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Fusion.Bundle
         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Sequence
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
                         mwc-random-0.13.4.0@mwcra_0lrQ1SkkNA85sa8eZ98xQk:System.Random.MWC
                         pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3:Control.Monad.Primitive
                         template-haskell-2.10.0.0:Language.Haskell.TH.Syntax
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Primitive
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed.Base
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:Data.List 3f0782c8d4bf50eecefcd5ea1798aac8
import  -/  base-4.8.2.0:Data.OldList d8fd80b0e14aa085ce6219cd89dad356
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  OtherData f086edab5429a445c5a03de742c12a46
  exports: 9eafbe3cd8a957307681d0a6605eb9fd
  Syllable 0e9897796ca07f2105bbf15b49fe388e
  Syllable e49f00d6d0b10b3393e432ef706386f1
  Word 097d937bc14d976a13b35a18438de6be
  Word 9ed61db17767f4e29bbbb31944883fc1
import  -/  PhonemeType ae499e04429789f68b804baafd2bc506
  exports: 3ba39fd360b81c89e4deec0e37d35fd4
  Blank 166226366c396ae718303a1d9dfdadeb
  Consonant 797698e6ca14e45d7ef88cb78e8a7943
  MaybeConsonant 8b1f1964c3eda75693ff3855f66d2ad1
  Vowel 18f4cd19b6c612ebb25f221389f4b642
  Vowel e51938fc3a28180cc0e71906aef6982c
import  -/  WordGen f90ac4ac75fdd6adf29c176d754bc14b
  exports: f22628ee4f45b769b72413775fccbca1
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
2a9488c3ce5eab2a302a3b09a45a566b
  $wparseConPhonotactics ::
    [PhonemeType.MaybeConsonant]
    -> [PhonemeType.MaybeConsonant] -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: [0] -}
8b3ddba890eded2ea1c02afb4e227837
  $wparseSyllable ::
    PhonemeType.MaybeConsonant
    -> PhonemeType.Vowel
    -> PhonemeType.MaybeConsonant
    -> GHC.Base.String
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(A,A,A,1*U)><L,1*U>, Inline: [0],
     Unfolding: (\ ww :: PhonemeType.MaybeConsonant
                   ww1 :: PhonemeType.Vowel
                   ww2 :: PhonemeType.MaybeConsonant ->
                 case ww of wild {
                   PhonemeType.Consonant ds ds1 ds2 ipa
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        ipa
                        (case ww1 of wild1 { PhonemeType.Vowel ds3 ds4 ds5 ipa1 ->
                         GHC.Base.++
                           @ GHC.Types.Char
                           ipa1
                           (case ww2 of wild2 {
                              PhonemeType.Consonant ds6 ds7 ds8 ipa2 -> ipa2
                              PhonemeType.Blank -> GHC.Types.[] @ GHC.Types.Char }) })
                   PhonemeType.Blank
                   -> case ww1 of wild1 { PhonemeType.Vowel ds ds1 ds2 ipa ->
                      GHC.Base.++
                        @ GHC.Types.Char
                        ipa
                        (case ww2 of wild2 {
                           PhonemeType.Consonant ds3 ds4 ds5 ipa1 -> ipa1
                           PhonemeType.Blank -> GHC.Types.[] @ GHC.Types.Char }) } }) -}
7860feadc8d34b6008fafe38e68b85ed
  $wparseVowPhonotactics ::
    [PhonemeType.Vowel]
    -> [PhonemeType.Vowel]
    -> [PhonemeType.Vowel]
    -> [PhonemeType.Vowel]
    -> GHC.Base.String
  {- Arity: 4, Strictness: <S,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0] -}
2bed9bcaac4df9145bf8fff7ad300ef9
  $wparseWord :: [OtherData.Syllable] -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>, Inline: [0],
     Unfolding: (\ ww :: [OtherData.Syllable] ->
                 GHC.CString.unpackAppendCString#
                   "/"#
                   (case GHC.Base.map
                           @ OtherData.Syllable
                           @ [GHC.Types.Char]
                           Parse.parseSyllable
                           ww of wild {
                      [] -> Parse.parseDictionary3
                      : x xs1
                      -> GHC.Base.++
                           @ GHC.Types.Char
                           (Data.OldList.intercalate_$spoly_go
                              @ GHC.Types.Char
                              x
                              (Data.OldList.prependToAll
                                 @ [GHC.Types.Char]
                                 Parse.parseDictionary2
                                 xs1))
                           Parse.parseDictionary3 })) -}
c9229808b3a8918d0e732223868c6582
  parseConPhonemeInventory ::
    [PhonemeType.MaybeConsonant] -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ cons :: [PhonemeType.MaybeConsonant] ->
                 GHC.CString.unpackAppendCString#
                   "Consonant inventory: "#
                   (case Parse.parseConPhonemeInventory_go1 cons of wild {
                      [] -> case GHC.List.init2 ret_ty [GHC.Types.Char] of {}
                      : x xs
                      -> let {
                           a :: [GHC.Types.Char]
                           = GHC.CString.unpackAppendCString#
                               ", and "#
                               (GHC.Base.++
                                  @ GHC.Types.Char
                                  (Parse.parseConPhonemeInventory_go
                                     wild
                                     (GHC.List.lastError @ [GHC.Types.Char]))
                                  Parse.parseConPhonemeInventory2)
                         } in
                         case GHC.List.init1 @ [GHC.Types.Char] x xs of wild1 {
                           [] -> a
                           : x1 xs1
                           -> GHC.Base.++
                                @ GHC.Types.Char
                                (Data.OldList.intercalate_$spoly_go
                                   @ GHC.Types.Char
                                   x1
                                   (Data.OldList.prependToAll
                                      @ [GHC.Types.Char]
                                      Parse.parseConPhonemeInventory1
                                      xs1))
                                a } })) -}
a8ba924ff97932ac52ab88c087f62e8c
  parseConPhonemeInventory1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ", "#) -}
fa54723e8b14333291c42224f3631134
  parseConPhonemeInventory2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "\n\
                   \\n"#) -}
13ac20ffbbc8e1e1ebaf9666e3cc23e5
  parseConPhonemeInventory_go ::
    [[GHC.Types.Char]] -> [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U> -}
890a4ce585ef2342ebb302c021d2112c
  parseConPhonemeInventory_go1 ::
    [PhonemeType.MaybeConsonant] -> [[GHC.Types.Char]]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
1b306f4b58317ee8228e51f88df00dde
  parseConPhonotactics ::
    ([PhonemeType.MaybeConsonant], [PhonemeType.MaybeConsonant])
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U,U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: ([PhonemeType.MaybeConsonant],
                         [PhonemeType.MaybeConsonant]) ->
                 case w of ww { (,) ww1 ww2 ->
                 Parse.$wparseConPhonotactics ww1 ww2 }) -}
632e8b7defbfeda7f55a9e905fcb3b39
  parseDictionary :: [OtherData.Word] -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ wrds :: [OtherData.Word] ->
                 case GHC.Base.map
                        @ OtherData.Word
                        @ [GHC.Types.Char]
                        Parse.parseWord
                        wrds of wild {
                   [] -> GHC.Types.[] @ GHC.Types.Char
                   : x xs1
                   -> Data.OldList.intercalate_$spoly_go
                        @ GHC.Types.Char
                        x
                        (Data.OldList.prependToAll
                           @ [GHC.Types.Char]
                           Parse.parseDictionary1
                           xs1) }) -}
e767d2f030f0a31a0986b258e08357c0
  parseDictionary1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "\n"#) -}
8788bff5e39d408c8cfa59a141c5554e
  parseDictionary2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "."#) -}
4ae6204e809c70cdb2e1887df5c66c11
  parseDictionary3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "/"#) -}
f65fe0d07d0c45ab6807c61ca5ee2df7
  parseSyllable :: OtherData.Syllable -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U,1*U(A,A,A,1*U),1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: OtherData.Syllable ->
                 case w of ww { OtherData.Syllable ww1 ww2 ww3 ->
                 Parse.$wparseSyllable ww1 ww2 ww3 }) -}
b10da33956c6fb4260c7d048f5130f56
  parseVowPhonemeInventory :: [PhonemeType.Vowel] -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ vows :: [PhonemeType.Vowel] ->
                 GHC.CString.unpackAppendCString#
                   "Vowel inventory: "#
                   (case Parse.parseVowPhonemeInventory_go1 vows of wild {
                      [] -> case GHC.List.init2 ret_ty [GHC.Types.Char] of {}
                      : x xs
                      -> let {
                           a :: [GHC.Types.Char]
                           = GHC.CString.unpackAppendCString#
                               ", and "#
                               (GHC.Base.++
                                  @ GHC.Types.Char
                                  (Parse.parseVowPhonemeInventory_go
                                     wild
                                     (GHC.List.lastError @ [GHC.Types.Char]))
                                  Parse.parseConPhonemeInventory2)
                         } in
                         case GHC.List.init1 @ [GHC.Types.Char] x xs of wild1 {
                           [] -> a
                           : x1 xs1
                           -> GHC.Base.++
                                @ GHC.Types.Char
                                (Data.OldList.intercalate_$spoly_go
                                   @ GHC.Types.Char
                                   x1
                                   (Data.OldList.prependToAll
                                      @ [GHC.Types.Char]
                                      Parse.parseConPhonemeInventory1
                                      xs1))
                                a } })) -}
cac136b4518c25556c9e59ee747cbcc5
  parseVowPhonemeInventory_go ::
    [[GHC.Types.Char]] -> [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U> -}
bc65b771754e540a3d46a6f3ad04dcc4
  parseVowPhonemeInventory_go1 ::
    [PhonemeType.Vowel] -> [[GHC.Types.Char]]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
e6485353810a2c074a947a185f21b3c4
  parseVowPhonotactics ::
    ([PhonemeType.Vowel],
     [PhonemeType.Vowel],
     [PhonemeType.Vowel],
     [PhonemeType.Vowel])
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S(SLLL),1*U(1*U,1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: ([PhonemeType.Vowel],
                         [PhonemeType.Vowel],
                         [PhonemeType.Vowel],
                         [PhonemeType.Vowel]) ->
                 case w of ww { (,,,) ww1 ww2 ww3 ww4 ->
                 Parse.$wparseVowPhonotactics ww1 ww2 ww3 ww4 }) -}
bda138991f76122ba4a76ab97406ceb5
  parseWord :: OtherData.Word -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: OtherData.Word ->
                 case w of ww { OtherData.Word ww1 -> Parse.$wparseWord ww1 }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

