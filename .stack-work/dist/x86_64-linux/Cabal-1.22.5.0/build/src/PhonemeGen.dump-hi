
==================== FINAL INTERFACE ====================
2016-10-23 00:09:50.569407 UTC

interface conla_1eA9qWUPH9nBowcXqqaV8r:PhonemeGen 7103
  interface hash: 1a7ddf414ef8a0763ae385df91c47451
  ABI hash: 28ce5b9e9c6c08088c2b3abde3cd0d20
  export-list hash: ac2fac7549593bb4b2279f37f817f5be
  orphan hash: 3cb9e3ae293ee3a18fc56ba59cc7c98d
  flag hash: 962af636f8e927040c7daa9c21457292
  sig of: Nothing
  used TH splices: False
  where
exports:
  PhonemeGen.makeBacknesses
  PhonemeGen.makeConsonants
  PhonemeGen.makeDiphInventory
  PhonemeGen.makeHeights
  PhonemeGen.makeLengths
  PhonemeGen.makeManners
  PhonemeGen.makePhonations
  PhonemeGen.makePlaces
  PhonemeGen.makeRoundedneses
  PhonemeGen.makeVowels
module dependencies: PhonemeData
package dependencies: MonadPrompt-1.0.0.5@Monad_5vpMHuuRBzi4bKjpRN3A9L
                      MonadRandom-0.4.2.3@Monad_I7tEJH7vOtsKQS7CpG48fz
                      array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA base-4.8.2.0
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59
                      erf-2.0.0.0@erf_6l78BnvLL4b2mWYp3HJJxX
                      flexible-defaults-0.0.1.2@flexi_70LqvhG3vbS8bRvV8pHtMk
                      ghc-prim-0.4.0.0 integer-gmp-1.0.0.0
                      math-functions-0.1.7.0@mathf_BN6S7j0ar3LC4TsnYu0us5
                      mersenne-random-pure64-0.2.0.5@merse_42koSxEhmjwBS69WXi19xI
                      monad-loops-0.4.3@monad_LQiHRUYhFhYBU7nOOWDOrb
                      mtl-2.2.1@mtl_Aue4leSeVkpKLsfHIV51E8
                      mwc-random-0.13.4.0@mwcra_0lrQ1SkkNA85sa8eZ98xQk
                      old-locale-1.0.0.7@oldlo_7h2Gx6mVPJ5Gheca8j9Mpe
                      old-time-1.1.0.3@oldti_JVjJvknZJ0JKghfag2Jw2L
                      pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC
                      primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3
                      random-extras-0.19@rando_11jAc932BDRD7ydjCrRr4L
                      random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW
                      random-1.1@rando_9Kgekc9yEaLHLNUuw6paWL
                      random-shuffle-0.0.4@rando_9kOz9tEn1526ShtWz8x59X
                      random-fu-0.2.7.0@rando_HO0DW1nA2fDCxZJ62mvJHr
                      rvar-0.2.0.3@rvar_HDSuhGFxwNTDX4EfF6w8WG
                      stateref-0.3@state_KptOBHsY85L8YzpDAos2Hi
                      stm-2.4.4.1@stm_EyxFXFfnfY05IrjGaqCxeD
                      syb-0.6@syb_4kccWaTe3QZLxAMQYKgEyE template-haskell-2.10.0.0
                      th-extras-0.0.0.4@thext_LRY1RUMy7ShLl2tqhMyHdO
                      time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn
                      transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF
                      vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln
orphans: MonadRandom-0.4.2.3@Monad_I7tEJH7vOtsKQS7CpG48fz:Control.Monad.Random
         base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         mersenne-random-pure64-0.2.0.5@merse_42koSxEhmjwBS69WXi19xI:System.Random.Mersenne.Pure64
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source.IO
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source.MWC
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source.PureMT
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source.StdGen
         stateref-0.3@state_KptOBHsY85L8YzpDAos2Hi:Data.StateRef.Instances
         stateref-0.3@state_KptOBHsY85L8YzpDAos2Hi:Data.StateRef.Instances.STM
         stm-2.4.4.1@stm_EyxFXFfnfY05IrjGaqCxeD:Control.Monad.STM
         syb-0.6@syb_4kccWaTe3QZLxAMQYKgEyE:Data.Generics.Instances
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Calendar.Gregorian
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Format.Parse
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.LocalTime.LocalTime
         transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.Trans.Error
         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Fusion.Bundle
         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Sequence
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
                         mwc-random-0.13.4.0@mwcra_0lrQ1SkkNA85sa8eZ98xQk:System.Random.MWC
                         pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3:Control.Monad.Primitive
                         template-haskell-2.10.0.0:Language.Haskell.TH.Syntax
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Primitive
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed.Base
import  -/  base-4.8.2.0:Control.Monad 480c5067477275068c9b98be08410df9
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:Data.Functor 5c701b0af1708f0192a25dfe14ce6274
import  -/  base-4.8.2.0:Data.List 3f0782c8d4bf50eecefcd5ea1798aac8
import  -/  base-4.8.2.0:Data.Traversable 7576318f4ef8587ad947f87012b65abf
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  PhonemeData fc090a0bcda3a243800b6c4018b433c0
  exports: 6190a60b3ecf64d963416d84612d3413
  AFFRICATE 147f242a04fba4ccaf3d990013a051a5
  ALVEOLAR c6b89f8b792d9549c21b502170ee4e1c
  ALVEOLOPALATAL 25346444b980c5a1ac9a043d30332738
  APPROXIMANT 688bb45ab09fc9e6611f59d892650e5d
  ASPIRATED 756e7c3f604a54456232d7e10e6e0cde
  BACK 66c69778bae2e4a440bb5a9cec7741ca
  BILABIAL 35be04d944862e0b4b3cd07ca4d4133e
  BREATHY f6261f7e07b77dd9cd142213c14126e3
  Backness 9747e3c7b5ae543ddf6a14d6c68612ef
  CENTRAL a7a040b3167734845bc52f2315f379f7
  CLOSE 19452b32e5ab61d38a230a97dff883ec
  CLOSEMID 829b1a375886bafe473e5cd43c980de0
  CORONAL ca62d4def85883412db49d69771fd684
  CREAKY 4c3da3105ff3af15a8154f034d9336ad
  Consonant 1bbdee182d405f2fb083318c4e2c6978
  DEFAULT 84e40dde3b21b2bbcc2467fc8b704c5b
  DENTAL 925136b48a76ca089014bdfac23ad309
  DENTIALVEOLAR f08684c6c979289597282b401bfbae39
  DORSAL bd982f4073f646c80f518bd24cad6c99
  Diphthong dd3d8f9f97afc9c5dce57589c3791239
  EPIGLOTTAL 4785a016a8862bf0c02884d663d41e83
  EPIPHARYNGEAL aebcfcb1d9fa1bca206af6180adaf0ac
  FLAP eccdd9a127edaee2ea4ed02c15b14dc9
  FRICATIVE 9fe324020397eadebc8f607209e35373
  FRONT 726360f7e0deebd1fa2b672cc9d9f70a
  GLOTTAL 9f89b2526fe223b1411cb7cc61b642cc
  Height 56a4ebd86a55476fcceec0b5b5ad52dd
  LABIAL 77986b66f6db3ff46d81e8a03975a08b
  LABIODENTAL 92275a3e1cccc7362f3597112fc06258
  LAFFRICATE 3e4cdb3cdeb16222335c945aafc38d2f
  LAPPROXIMANT 3c4f7b9a6a409f6c5ec3ef14ac4541d2
  LARYNGEAL 4ec5bea4a7834fa9780a3eaf6b6b5b4e
  LFLAP f2a7011e636265dc707312cd55371337
  LFRICATIVE fd803e10efe16b2dce9944b62a4a74b4
  LONG ee29e780120d882796a87cbbcdb00e55
  Length 414a8b878bf71816d2002a26fce00728
  MID 23250c6a570df131de1cdb293bacfe16
  MODAL bd244264bab2966de13717630fceb06d
  Manner 2286baa806cedbe4b7d0c4916ea37630
  NASAL 33a4f70f850c97bc19932b2d99f86fec
  NEARBACK 0a01970fff4a2ba092ad40544a59a654
  NEARCLOSE a0d527593a0e5b421ef4d1de2a61e5d4
  NEARFRONT 2fbf2ba3b8d9a1fda8899a2a6b7c003d
  NEAROPEN abe71d4960553e1118e265c97da6ca81
  NORMAL 341b4c7351a42f38158edd4de3495449
  OPEN f9dd652c29b38c171f0203609f54d8af
  OPENMID f4ad7f69fb5efb224cc41b1415e8557b
  PALATAL 82a2f3e6a3c4c0a3e97f9f57ac5073f8
  PHARYNGEAL 5c09d12e196eec4f612a556219df3e90
  POSTALVEOLAR 7e03f37b030e8871b4d22fdd4b93d488
  Phonation d728b957933ed40e5f338884385b44c8
  Phoneme b470252dd3c1b881fdcf6f5f8e488f7a
  Place e0644167ea1572fa835311f673311319
  RETROFLEX a3afd188eeb6612ef479970d85082992
  ROUNDED 0a5556dccc06d975adb090e5266ecb1d
  Roundedness 4c51106b8aab206d34cb6b9d104e8504
  SAFFRICATE b1edf15f9894f243d08ceea9bb332359
  SHORT ca70fa1eca0ee2f7a463a74c2a265547
  SILIBANT f64a5f1ed2462d03b63a4ac44aed52e4
  SLACK c990fb0ced343bfe6a5ecaaeda0b09e1
  STIFF 0bcb6b807cc83b67beb5b05b41f42598
  STOP 1e220103167759b2457a52d787a2828e
  TRILL 6ee80409b4b73f8f366272d21ec77dba
  UNROUNDED a7c2b1df7a48e8f0af1f098da4350bc3
  UVULAR 00b57ece7781c1ead6406b34dc02a2bf
  VELAR c83c546d533edfd28dc443ee9c5d12af
  VOICELESS dbf8f182d917d2469a91d36a4068291b
  Vowel 3d033a9ea8966876e27fd237e6e3b1f9
  csymbol e9f363472129d1328a9c783ae12f3847
  vsymbol 37945cd577b90530308ffcb2c51d6186
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  random-extras-0.19@rando_11jAc932BDRD7ydjCrRr4L:Data.Random.Extras 5dc1684f88e3f2655bfb5d7aca60bf5c
import  -/  random-fu-0.2.7.0@rando_HO0DW1nA2fDCxZJ62mvJHr:Data.Random 355d6844bb1b3189cb19ec0007f6f130
import  -/  random-fu-0.2.7.0@rando_HO0DW1nA2fDCxZJ62mvJHr:Data.Random.Distribution.Uniform ce34c1edd0e59e868fcf9e0bf914c4ef
import  -/  rvar-0.2.0.3@rvar_HDSuhGFxwNTDX4EfF6w8WG:Data.RVar 9b7fbdb5f1778e76b8a65f45a17cccb1
3d2ee3fb36f77a4634d537a1dfacd4bb
  $s$fEq(,) :: GHC.Classes.Eq (PhonemeData.Place, PhonemeData.Manner)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (PhonemeData.Place, PhonemeData.Manner)
                  (GHC.Classes.$fEq(,)_$c==
                     @ PhonemeData.Place
                     @ PhonemeData.Manner
                     PhonemeData.$fEqPlace
                     PhonemeData.$fEqManner)
                  (GHC.Classes.$fEq(,)_$c/=
                     @ PhonemeData.Place
                     @ PhonemeData.Manner
                     PhonemeData.$fEqPlace
                     PhonemeData.$fEqManner) -}
b9fff860f2505283f3e8432c6a4c619b
  makeBacknesses :: Data.RVar.RVar [PhonemeData.Backness]
  {- Unfolding: (Data.Random.Extras.choice
                   @ [PhonemeData.Backness]
                   PhonemeGen.makeBacknesses1) -}
da4cc1aa467c0a652242c4f5c65cd097
  makeBacknesses1 :: [[PhonemeData.Backness]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeData.Backness]
                   PhonemeGen.makeBacknesses13
                   PhonemeGen.makeBacknesses2) -}
a448fe6ff37feb1b05d475bd2695c7bb
  makeBacknesses10 :: [PhonemeData.Backness]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeData.Backness
                   PhonemeData.FRONT
                   PhonemeGen.makeBacknesses11) -}
5b184683095e98c2d8e3956b6f6dc189
  makeBacknesses11 :: [PhonemeData.Backness]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeData.Backness
                   PhonemeData.CENTRAL
                   PhonemeGen.makeBacknesses9) -}
41181995534f13a5f3446bc5a9846e96
  makeBacknesses12 :: [PhonemeData.Backness]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeData.Backness
                   PhonemeData.FRONT
                   PhonemeGen.makeBacknesses9) -}
fd88233c6c0a827fe85bdcbc87e1b8fc
  makeBacknesses13 :: [PhonemeData.Backness]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeData.Backness
                   PhonemeData.CENTRAL
                   (GHC.Types.[] @ PhonemeData.Backness)) -}
37d91b1e3167c57b4b2280879c438aef
  makeBacknesses2 :: [[PhonemeData.Backness]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeData.Backness]
                   PhonemeGen.makeBacknesses12
                   PhonemeGen.makeBacknesses3) -}
11306ed351d1e628de16158b9dc49778
  makeBacknesses3 :: [[PhonemeData.Backness]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeData.Backness]
                   PhonemeGen.makeBacknesses10
                   PhonemeGen.makeBacknesses4) -}
bd52387bb52c6a9c59d9ee0ec18f0f01
  makeBacknesses4 :: [[PhonemeData.Backness]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeData.Backness]
                   PhonemeGen.makeBacknesses5
                   (GHC.Types.[] @ [PhonemeData.Backness])) -}
8f777d2491be96a2453db96aad506262
  makeBacknesses5 :: [PhonemeData.Backness]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeData.Backness
                   PhonemeData.FRONT
                   PhonemeGen.makeBacknesses6) -}
6738357bc735bfcb4c98962dae382909
  makeBacknesses6 :: [PhonemeData.Backness]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeData.Backness
                   PhonemeData.NEARFRONT
                   PhonemeGen.makeBacknesses7) -}
4bed230629065c12febdde33891ef4d4
  makeBacknesses7 :: [PhonemeData.Backness]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeData.Backness
                   PhonemeData.CENTRAL
                   PhonemeGen.makeBacknesses8) -}
a94f0018425424c31ceb475b72e3f0d6
  makeBacknesses8 :: [PhonemeData.Backness]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeData.Backness
                   PhonemeData.NEARBACK
                   PhonemeGen.makeBacknesses9) -}
dd54d878f8f740a072d46c1aeb1f6b01
  makeBacknesses9 :: [PhonemeData.Backness]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeData.Backness
                   PhonemeData.BACK
                   (GHC.Types.[] @ PhonemeData.Backness)) -}
7303951e77da22285d614cd38ba9588a
  makeConsonants ::
    [PhonemeData.Place]
    -> [PhonemeData.Manner]
    -> [PhonemeData.Phonation]
    -> Data.RVar.RVar [PhonemeData.Phoneme]
  {- Arity: 3, Strictness: <L,U><L,U><L,U> -}
f26f39719260f8a9b097a3d84f1eb921
  makeDiphInventory ::
    GHC.Types.Int
    -> [PhonemeData.Phoneme] -> Data.RVar.RVar [PhonemeData.Phoneme]
  {- Arity: 2, Strictness: <L,1*U(U)><L,U> -}
25d6cfd845db708a32741bdce41f1640
  makeHeights :: Data.RVar.RVar [PhonemeData.Height]
  {- Unfolding: (Data.Random.Extras.choice
                   @ [PhonemeData.Height]
                   PhonemeGen.makeHeights1) -}
a75090b01c595f6d4e96b0e62a236dfd
  makeHeights1 :: [[PhonemeData.Height]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeData.Height]
                   PhonemeGen.makeHeights20
                   PhonemeGen.makeHeights2) -}
6bc1365c568a712c506ac0580ab9d8f5
  makeHeights10 :: [PhonemeData.Height]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeData.Height
                   PhonemeData.OPENMID
                   PhonemeGen.makeHeights11) -}
f8a53e55a969a6cb78e454608b6ec867
  makeHeights11 :: [PhonemeData.Height]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeData.Height
                   PhonemeData.NEAROPEN
                   PhonemeGen.makeHeights12) -}
3951a29504779ba5ca2db28f72910d0f
  makeHeights12 :: [PhonemeData.Height]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeData.Height
                   PhonemeData.OPEN
                   (GHC.Types.[] @ PhonemeData.Height)) -}
9862840e90699202ab4c4609be4f41ec
  makeHeights13 :: [PhonemeData.Height]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeData.Height
                   PhonemeData.CLOSE
                   PhonemeGen.makeHeights14) -}
58209fa9a7999d89b7fa53e30939fba5
  makeHeights14 :: [PhonemeData.Height]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeData.Height
                   PhonemeData.NEARCLOSE
                   PhonemeGen.makeHeights15) -}
e3c35b07e42e63f3a5788c369e816251
  makeHeights15 :: [PhonemeData.Height]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeData.Height
                   PhonemeData.CLOSEMID
                   PhonemeGen.makeHeights10) -}
f5a5c42eb1f868b8872c4878775c61c9
  makeHeights16 :: [PhonemeData.Height]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeData.Height
                   PhonemeData.CLOSE
                   PhonemeGen.makeHeights17) -}
cc6832fd9556e954176ae85f26a4870d
  makeHeights17 :: [PhonemeData.Height]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeData.Height
                   PhonemeData.CLOSEMID
                   PhonemeGen.makeHeights18) -}
5aae58789487616901a74eb1756adf7b
  makeHeights18 :: [PhonemeData.Height]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeData.Height
                   PhonemeData.OPENMID
                   PhonemeGen.makeHeights12) -}
7736d94d475ef513283cdb56744e8f07
  makeHeights19 :: [PhonemeData.Height]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeData.Height
                   PhonemeData.CLOSE
                   PhonemeGen.makeHeights12) -}
67eca890f99f749b8326b5a92fbe7f52
  makeHeights2 :: [[PhonemeData.Height]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeData.Height]
                   PhonemeGen.makeHeights19
                   PhonemeGen.makeHeights3) -}
f8a508dd27b3b529cb693c506209cd56
  makeHeights20 :: [PhonemeData.Height]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeData.Height
                   PhonemeData.MID
                   (GHC.Types.[] @ PhonemeData.Height)) -}
afdeb0f6d17bab3aa3fa1225d9078904
  makeHeights3 :: [[PhonemeData.Height]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeData.Height]
                   PhonemeGen.makeHeights16
                   PhonemeGen.makeHeights4) -}
9f3104b5dfffd6ccb4a2c3b7035d55d1
  makeHeights4 :: [[PhonemeData.Height]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeData.Height]
                   PhonemeGen.makeHeights13
                   PhonemeGen.makeHeights5) -}
0f12b43c7136ad88b8d2d9eb5b838d0b
  makeHeights5 :: [[PhonemeData.Height]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeData.Height]
                   PhonemeGen.makeHeights6
                   (GHC.Types.[] @ [PhonemeData.Height])) -}
e3112a55f779156b4486cea2b94741a1
  makeHeights6 :: [PhonemeData.Height]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeData.Height
                   PhonemeData.CLOSE
                   PhonemeGen.makeHeights7) -}
60c00f6fe0ad06963f3af6beb62b0b01
  makeHeights7 :: [PhonemeData.Height]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeData.Height
                   PhonemeData.NEARCLOSE
                   PhonemeGen.makeHeights8) -}
e8c9eec1cef6404c26385371d85f6127
  makeHeights8 :: [PhonemeData.Height]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeData.Height
                   PhonemeData.CLOSEMID
                   PhonemeGen.makeHeights9) -}
c7b3bbadbef6411883bead0c2b444a40
  makeHeights9 :: [PhonemeData.Height]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeData.Height
                   PhonemeData.MID
                   PhonemeGen.makeHeights10) -}
fba93274ae5cd74ac584ef9fac7e46f8
  makeLengths :: Data.RVar.RVar [PhonemeData.Length]
  {- Unfolding: (Data.Random.Extras.choice
                   @ [PhonemeData.Length]
                   PhonemeGen.makeLengths1) -}
22a33c697d1c924263bddd4a40df2750
  makeLengths1 :: [[PhonemeData.Length]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeData.Length]
                   PhonemeGen.makeLengths9
                   PhonemeGen.makeLengths2) -}
8b73a63c9d652199ef67b4370e19e48c
  makeLengths2 :: [[PhonemeData.Length]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeData.Length]
                   PhonemeGen.makeLengths6
                   PhonemeGen.makeLengths3) -}
d491f62d85b2672037919fa4adbcc275
  makeLengths3 :: [[PhonemeData.Length]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeData.Length]
                   PhonemeGen.makeLengths8
                   PhonemeGen.makeLengths4) -}
0fbd68146c96efcd3db6c7c87800f853
  makeLengths4 :: [[PhonemeData.Length]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeData.Length]
                   PhonemeGen.makeLengths5
                   (GHC.Types.[] @ [PhonemeData.Length])) -}
c16ffc1253972e5ee86c685ee9b0c198
  makeLengths5 :: [PhonemeData.Length]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeData.Length
                   PhonemeData.SHORT
                   PhonemeGen.makeLengths6) -}
3f369e95fed2852ef223991817361805
  makeLengths6 :: [PhonemeData.Length]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeData.Length
                   PhonemeData.NORMAL
                   PhonemeGen.makeLengths7) -}
dfc408f2b097c75bf83a081845a5daa2
  makeLengths7 :: [PhonemeData.Length]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeData.Length
                   PhonemeData.LONG
                   (GHC.Types.[] @ PhonemeData.Length)) -}
b22e86d613250908187f209a7bf9acbe
  makeLengths8 :: [PhonemeData.Length]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeData.Length
                   PhonemeData.SHORT
                   PhonemeGen.makeLengths9) -}
0d4ba6efdd743e4e92c30d76ca6b822b
  makeLengths9 :: [PhonemeData.Length]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeData.Length
                   PhonemeData.NORMAL
                   (GHC.Types.[] @ PhonemeData.Length)) -}
abf53b94acec9a237295d3ee897aafbe
  makeManners :: Data.RVar.RVar [PhonemeData.Manner]
  {- Arity: 2, Strictness: <L,C(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                PhonemeGen.makeManners1
                  `cast`
                (Trans
                     (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                               <Control.Monad.Prompt.Lift
                                  Data.Random.Source.Internal.Prim.Prim
                                  Data.Functor.Identity.Identity>_R
                               <[PhonemeData.Manner]>_R))
                     (Trans
                          (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                    <Data.Random.Source.Internal.Prim.Prim>_R
                                    <Data.Functor.Identity.Identity>_R))
                          (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeData.Manner]>_N)) -}
dc33cf4efeb0ea742f9e966e365eeebc
  makeManners1 ::
    ([PhonemeData.Manner] -> b1)
    -> (forall a2.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a2
        -> (a2 -> b1) -> b1)
    -> b1
  {- Arity: 2, Strictness: <L,C(U)><L,U>,
     Unfolding: (\ @ b1
                   eta :: [PhonemeData.Manner] -> b1
                   eta1 :: forall a6.
                           Control.Monad.Prompt.Lift
                             Data.Random.Source.Internal.Prim.Prim
                             Data.Functor.Identity.Identity
                             a6
                           -> (a6 -> b1) -> b1 ->
                 PhonemeGen.makeManners77
                   PhonemeGen.makeManners2
                   @ b1
                   (\ x :: [[PhonemeData.Manner]] ->
                    case PhonemeGen.makeManners_go x of vx { DEFAULT -> eta vx })
                   eta1) -}
df7f9616308834e4a6c135a7acc83e4d
  makeManners10 :: [[PhonemeData.Manner]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeData.Manner]
                   PhonemeGen.makeManners11
                   (GHC.Types.[] @ [PhonemeData.Manner])) -}
e50f4f708d02723472a62ea05dc00378
  makeManners11 :: [PhonemeData.Manner]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeData.Manner
                   PhonemeData.TRILL
                   (GHC.Types.[] @ PhonemeData.Manner)) -}
d41358d9cbcbb4ec2e1ac4ac75a89d43
  makeManners12 ::
    ([PhonemeData.Manner] -> b1)
    -> (forall a2.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a2
        -> (a2 -> b1) -> b1)
    -> b1
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ b1
                   eta2 :: [PhonemeData.Manner] -> b1
                   eta3 :: forall a6.
                           Control.Monad.Prompt.Lift
                             Data.Random.Source.Internal.Prim.Prim
                             Data.Functor.Identity.Identity
                             a6
                           -> (a6 -> b1) -> b1 ->
                 PhonemeGen.makeManners_eta
                   `cast`
                 (Trans
                      (Trans
                           (Data.RVar.NTCo:RVarT[0] <Data.Functor.Identity.Identity>_N)
                           (Control.Monad.Prompt.NTCo:PromptT[0]
                                <Data.Random.Source.Internal.Prim.Prim>_R
                                <Data.Functor.Identity.Identity>_R) <Data.RVar.RVarT
                                                                       Data.Functor.Identity.Identity
                                                                       [PhonemeData.Manner]>_N)
                      (Control.Monad.Prompt.NTCo:Prompt[0]
                           <Control.Monad.Prompt.Lift
                              Data.Random.Source.Internal.Prim.Prim
                              Data.Functor.Identity.Identity>_R
                           <Data.RVar.RVarT
                              Data.Functor.Identity.Identity [PhonemeData.Manner]>_R))
                   @ b1
                   (\ x :: Data.RVar.RVarT
                             Data.Functor.Identity.Identity [PhonemeData.Manner] ->
                    case x `cast`
                         (Trans
                              (Trans
                                   (Data.RVar.NTCo:RVarT[0] <Data.Functor.Identity.Identity>_N)
                                   (Control.Monad.Prompt.NTCo:PromptT[0]
                                        <Data.Random.Source.Internal.Prim.Prim>_R
                                        <Data.Functor.Identity.Identity>_R) <[PhonemeData.Manner]>_N)
                              (Control.Monad.Prompt.NTCo:Prompt[0]
                                   <Control.Monad.Prompt.Lift
                                      Data.Random.Source.Internal.Prim.Prim
                                      Data.Functor.Identity.Identity>_R
                                   <[PhonemeData.Manner]>_R)) of nt { DEFAULT ->
                    nt @ b1 eta2 eta3 })
                   eta3) -}
2b94470f68d6240edeccbd8234a77ca3
  makeManners13 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeData.Manner]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeData.Manner])
                   PhonemeGen.makeManners24
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[PhonemeData.Manner]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeData.Manner]>_N))
                   PhonemeGen.makeManners14) -}
d105889e2bf12c0b6e14e17d8f5b69e8
  makeManners14 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeData.Manner]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeData.Manner])
                   PhonemeGen.makeManners15
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[PhonemeData.Manner]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeData.Manner]>_N))
                   (GHC.Types.[]
                      @ (Data.RVar.RVarT
                           Data.Functor.Identity.Identity [PhonemeData.Manner]))) -}
4368625830e908e8d782bdb2c15ce61b
  makeManners15 ::
    ([PhonemeData.Manner] -> b1)
    -> (forall a2.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a2
        -> (a2 -> b1) -> b1)
    -> b1
  {- Arity: 2,
     Unfolding: (\ @ b1
                   eta :: [PhonemeData.Manner] -> b1
                   eta1 :: forall a6.
                           Control.Monad.Prompt.Lift
                             Data.Random.Source.Internal.Prim.Prim
                             Data.Functor.Identity.Identity
                             a6
                           -> (a6 -> b1) -> b1 ->
                 PhonemeGen.makeManners23
                   PhonemeGen.makeManners16
                   @ b1
                   (\ x :: [[PhonemeData.Manner]] ->
                    case PhonemeGen.makeManners_go1 x of vx { DEFAULT -> eta vx })
                   eta1) -}
3fa4a982c90bd81779210ab704f328bf
  makeManners16 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeData.Manner]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeData.Manner])
                   PhonemeGen.makeManners22
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[PhonemeData.Manner]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeData.Manner]>_N))
                   PhonemeGen.makeManners17) -}
b43b9c111fe87683f18f2372ba75c116
  makeManners17 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeData.Manner]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeData.Manner])
                   PhonemeGen.makeManners18
                   (GHC.Types.[]
                      @ (Data.RVar.RVarT
                           Data.Functor.Identity.Identity [PhonemeData.Manner]))) -}
8643ecfccdc218ef44604b819ffb3e55
  makeManners18 :: Data.RVar.RVar [PhonemeData.Manner]
  {- Unfolding: (Data.Random.Extras.choice
                   @ [PhonemeData.Manner]
                   PhonemeGen.makeManners19) -}
89bcc7865002e4cf6116c9a9caf70a93
  makeManners19 :: [[PhonemeData.Manner]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeData.Manner]
                   (GHC.Types.[] @ PhonemeData.Manner)
                   PhonemeGen.makeManners20) -}
58848bb02603a249410894c5b51a37c1
  makeManners2 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeData.Manner]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeData.Manner])
                   PhonemeGen.makeManners76
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[PhonemeData.Manner]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeData.Manner]>_N))
                   PhonemeGen.makeManners3) -}
5e9c9dda0dc09483e8e631745816f5b8
  makeManners20 :: [[PhonemeData.Manner]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeData.Manner]
                   PhonemeGen.makeManners21
                   (GHC.Types.[] @ [PhonemeData.Manner])) -}
f266a42b85527bf85c17eff37ffa63f6
  makeManners21 :: [PhonemeData.Manner]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeData.Manner
                   PhonemeData.LAPPROXIMANT
                   (GHC.Types.[] @ PhonemeData.Manner)) -}
a15261c1c327772a1b8a246da86630d6
  makeManners22 ::
    ([PhonemeData.Manner] -> b)
    -> (forall a2.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a2
        -> (a2 -> b) -> b)
    -> b
  {- Arity: 2, HasNoCafRefs, Strictness: <C(S),1*C1(U)><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ b
                   eta1 :: [PhonemeData.Manner] -> b
                   eta2 :: forall a6.
                           Control.Monad.Prompt.Lift
                             Data.Random.Source.Internal.Prim.Prim
                             Data.Functor.Identity.Identity
                             a6
                           -> (a6 -> b) -> b ->
                 eta1 PhonemeGen.makeManners_eta1) -}
a4839353225b362be02fa56c310ddcec
  makeManners23 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeData.Manner]]
    -> forall b.
       ([[PhonemeData.Manner]] -> b)
       -> (forall a.
           Control.Monad.Prompt.Lift
             Data.Random.Source.Internal.Prim.Prim
             Data.Functor.Identity.Identity
             a
           -> (a -> b) -> b)
       -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,C(U)><L,U> -}
56fde929d4b263e1a018151022f1fcec
  makeManners24 ::
    ([PhonemeData.Manner] -> b)
    -> (forall a2.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a2
        -> (a2 -> b) -> b)
    -> b
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (\ @ b
                   eta1 :: [PhonemeData.Manner] -> b
                   eta2 :: forall a6.
                           Control.Monad.Prompt.Lift
                             Data.Random.Source.Internal.Prim.Prim
                             Data.Functor.Identity.Identity
                             a6
                           -> (a6 -> b) -> b ->
                 eta1 (GHC.Types.[] @ PhonemeData.Manner)) -}
c96535bdc2227f26e24f9ff42710b8d4
  makeManners25 ::
    ([PhonemeData.Manner] -> b1)
    -> (forall a2.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a2
        -> (a2 -> b1) -> b1)
    -> b1
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ b1
                   eta2 :: [PhonemeData.Manner] -> b1
                   eta3 :: forall a6.
                           Control.Monad.Prompt.Lift
                             Data.Random.Source.Internal.Prim.Prim
                             Data.Functor.Identity.Identity
                             a6
                           -> (a6 -> b1) -> b1 ->
                 PhonemeGen.makeManners_eta2
                   `cast`
                 (Trans
                      (Trans
                           (Data.RVar.NTCo:RVarT[0] <Data.Functor.Identity.Identity>_N)
                           (Control.Monad.Prompt.NTCo:PromptT[0]
                                <Data.Random.Source.Internal.Prim.Prim>_R
                                <Data.Functor.Identity.Identity>_R) <Data.RVar.RVarT
                                                                       Data.Functor.Identity.Identity
                                                                       [PhonemeData.Manner]>_N)
                      (Control.Monad.Prompt.NTCo:Prompt[0]
                           <Control.Monad.Prompt.Lift
                              Data.Random.Source.Internal.Prim.Prim
                              Data.Functor.Identity.Identity>_R
                           <Data.RVar.RVarT
                              Data.Functor.Identity.Identity [PhonemeData.Manner]>_R))
                   @ b1
                   (\ x :: Data.RVar.RVarT
                             Data.Functor.Identity.Identity [PhonemeData.Manner] ->
                    case x `cast`
                         (Trans
                              (Trans
                                   (Data.RVar.NTCo:RVarT[0] <Data.Functor.Identity.Identity>_N)
                                   (Control.Monad.Prompt.NTCo:PromptT[0]
                                        <Data.Random.Source.Internal.Prim.Prim>_R
                                        <Data.Functor.Identity.Identity>_R) <[PhonemeData.Manner]>_N)
                              (Control.Monad.Prompt.NTCo:Prompt[0]
                                   <Control.Monad.Prompt.Lift
                                      Data.Random.Source.Internal.Prim.Prim
                                      Data.Functor.Identity.Identity>_R
                                   <[PhonemeData.Manner]>_R)) of nt { DEFAULT ->
                    nt @ b1 eta2 eta3 })
                   eta3) -}
5eaa21730d2b0566f96effcd25156c4b
  makeManners26 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeData.Manner]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeData.Manner])
                   PhonemeGen.makeManners24
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[PhonemeData.Manner]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeData.Manner]>_N))
                   PhonemeGen.makeManners27) -}
dd3fd1bb0c4857f94e565a68c6ee4e97
  makeManners27 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeData.Manner]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeData.Manner])
                   PhonemeGen.makeManners28
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[PhonemeData.Manner]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeData.Manner]>_N))
                   (GHC.Types.[]
                      @ (Data.RVar.RVarT
                           Data.Functor.Identity.Identity [PhonemeData.Manner]))) -}
0880f44778655939697f322d2fe4ffb6
  makeManners28 ::
    ([PhonemeData.Manner] -> b1)
    -> (forall a2.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a2
        -> (a2 -> b1) -> b1)
    -> b1
  {- Arity: 2,
     Unfolding: (\ @ b1
                   eta :: [PhonemeData.Manner] -> b1
                   eta1 :: forall a6.
                           Control.Monad.Prompt.Lift
                             Data.Random.Source.Internal.Prim.Prim
                             Data.Functor.Identity.Identity
                             a6
                           -> (a6 -> b1) -> b1 ->
                 PhonemeGen.makeManners59
                   PhonemeGen.makeManners29
                   @ b1
                   (\ x :: [[PhonemeData.Manner]] ->
                    case PhonemeGen.makeManners_go2 x of vx { DEFAULT -> eta vx })
                   eta1) -}
f4ec447b88ce8b9c3da8a32731d65785
  makeManners29 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeData.Manner]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeData.Manner])
                   PhonemeGen.makeManners58
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[PhonemeData.Manner]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeData.Manner]>_N))
                   PhonemeGen.makeManners30) -}
6a1302ca6d838cd8714feef90c7a6f2b
  makeManners3 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeData.Manner]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeData.Manner])
                   PhonemeGen.makeManners72
                   PhonemeGen.makeManners4) -}
5168f06d153369fa62df2d6c642755e0
  makeManners30 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeData.Manner]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeData.Manner])
                   PhonemeGen.makeManners41
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[PhonemeData.Manner]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeData.Manner]>_N))
                   PhonemeGen.makeManners31) -}
83e3c848dbb234d0c5cf70294758a043
  makeManners31 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeData.Manner]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeData.Manner])
                   PhonemeGen.makeManners37
                   PhonemeGen.makeManners32) -}
656c2c971243d146a02c17b041bf31e3
  makeManners32 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeData.Manner]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeData.Manner])
                   PhonemeGen.makeManners33
                   (GHC.Types.[]
                      @ (Data.RVar.RVarT
                           Data.Functor.Identity.Identity [PhonemeData.Manner]))) -}
dac82fe77e1909993d7b82dd1b1f6798
  makeManners33 :: Data.RVar.RVar [PhonemeData.Manner]
  {- Unfolding: (Data.Random.Extras.choice
                   @ [PhonemeData.Manner]
                   PhonemeGen.makeManners34) -}
6c685a3c7376dc642f0c15c0b72e5c39
  makeManners34 :: [[PhonemeData.Manner]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeData.Manner]
                   (GHC.Types.[] @ PhonemeData.Manner)
                   PhonemeGen.makeManners35) -}
3f443cf78d07dd8676940f35e919da70
  makeManners35 :: [[PhonemeData.Manner]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeData.Manner]
                   PhonemeGen.makeManners36
                   (GHC.Types.[] @ [PhonemeData.Manner])) -}
3872c5e37f5ec9251bfcb1fc375e5c70
  makeManners36 :: [PhonemeData.Manner]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeData.Manner
                   PhonemeData.LFRICATIVE
                   (GHC.Types.[] @ PhonemeData.Manner)) -}
a9db7316d8b64086218e9fc37a29020b
  makeManners37 :: Data.RVar.RVar [PhonemeData.Manner]
  {- Unfolding: (Data.Random.Extras.choice
                   @ [PhonemeData.Manner]
                   PhonemeGen.makeManners38) -}
5d707fe93a01998cbaf0eb5565fba25f
  makeManners38 :: [[PhonemeData.Manner]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeData.Manner]
                   (GHC.Types.[] @ PhonemeData.Manner)
                   PhonemeGen.makeManners39) -}
b5562d0f7304bb673ceeef35a6d2c105
  makeManners39 :: [[PhonemeData.Manner]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeData.Manner]
                   PhonemeGen.makeManners40
                   (GHC.Types.[] @ [PhonemeData.Manner])) -}
26a0193588e62a099c874d1d0aad3851
  makeManners4 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeData.Manner]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeData.Manner])
                   PhonemeGen.makeManners60
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[PhonemeData.Manner]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeData.Manner]>_N))
                   PhonemeGen.makeManners5) -}
aa5e7e0cbdd421bfc0f68a2272bcd9cf
  makeManners40 :: [PhonemeData.Manner]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeData.Manner
                   PhonemeData.SILIBANT
                   (GHC.Types.[] @ PhonemeData.Manner)) -}
f173422d80493587e20ae1bd4209157b
  makeManners41 ::
    ([PhonemeData.Manner] -> b1)
    -> (forall a2.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a2
        -> (a2 -> b1) -> b1)
    -> b1
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ b1
                   eta2 :: [PhonemeData.Manner] -> b1
                   eta3 :: forall a6.
                           Control.Monad.Prompt.Lift
                             Data.Random.Source.Internal.Prim.Prim
                             Data.Functor.Identity.Identity
                             a6
                           -> (a6 -> b1) -> b1 ->
                 PhonemeGen.makeManners_eta3
                   `cast`
                 (Trans
                      (Trans
                           (Data.RVar.NTCo:RVarT[0] <Data.Functor.Identity.Identity>_N)
                           (Control.Monad.Prompt.NTCo:PromptT[0]
                                <Data.Random.Source.Internal.Prim.Prim>_R
                                <Data.Functor.Identity.Identity>_R) <Data.RVar.RVarT
                                                                       Data.Functor.Identity.Identity
                                                                       [PhonemeData.Manner]>_N)
                      (Control.Monad.Prompt.NTCo:Prompt[0]
                           <Control.Monad.Prompt.Lift
                              Data.Random.Source.Internal.Prim.Prim
                              Data.Functor.Identity.Identity>_R
                           <Data.RVar.RVarT
                              Data.Functor.Identity.Identity [PhonemeData.Manner]>_R))
                   @ b1
                   (\ x :: Data.RVar.RVarT
                             Data.Functor.Identity.Identity [PhonemeData.Manner] ->
                    case x `cast`
                         (Trans
                              (Trans
                                   (Data.RVar.NTCo:RVarT[0] <Data.Functor.Identity.Identity>_N)
                                   (Control.Monad.Prompt.NTCo:PromptT[0]
                                        <Data.Random.Source.Internal.Prim.Prim>_R
                                        <Data.Functor.Identity.Identity>_R) <[PhonemeData.Manner]>_N)
                              (Control.Monad.Prompt.NTCo:Prompt[0]
                                   <Control.Monad.Prompt.Lift
                                      Data.Random.Source.Internal.Prim.Prim
                                      Data.Functor.Identity.Identity>_R
                                   <[PhonemeData.Manner]>_R)) of nt { DEFAULT ->
                    nt @ b1 eta2 eta3 })
                   eta3) -}
fe7f1105d5ffb3b80cc87503869daa17
  makeManners42 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeData.Manner]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeData.Manner])
                   PhonemeGen.makeManners24
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[PhonemeData.Manner]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeData.Manner]>_N))
                   PhonemeGen.makeManners43) -}
c33147fe040274e49a3624c0ec9c5aa1
  makeManners43 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeData.Manner]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeData.Manner])
                   PhonemeGen.makeManners44
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[PhonemeData.Manner]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeData.Manner]>_N))
                   (GHC.Types.[]
                      @ (Data.RVar.RVarT
                           Data.Functor.Identity.Identity [PhonemeData.Manner]))) -}
da51e8fea1ebc15faf05bce5206a1f4a
  makeManners44 ::
    ([PhonemeData.Manner] -> b1)
    -> (forall a2.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a2
        -> (a2 -> b1) -> b1)
    -> b1
  {- Arity: 2,
     Unfolding: (\ @ b1
                   eta :: [PhonemeData.Manner] -> b1
                   eta1 :: forall a6.
                           Control.Monad.Prompt.Lift
                             Data.Random.Source.Internal.Prim.Prim
                             Data.Functor.Identity.Identity
                             a6
                           -> (a6 -> b1) -> b1 ->
                 PhonemeGen.makeManners57
                   PhonemeGen.makeManners45
                   @ b1
                   (\ x :: [[PhonemeData.Manner]] ->
                    case PhonemeGen.makeManners_go3 x of vx { DEFAULT -> eta vx })
                   eta1) -}
e9c3aff72c11dacb82ee9417b5a4d8cf
  makeManners45 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeData.Manner]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeData.Manner])
                   PhonemeGen.makeManners56
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[PhonemeData.Manner]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeData.Manner]>_N))
                   PhonemeGen.makeManners46) -}
2125be74b1800add9f25e32e097f7ee9
  makeManners46 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeData.Manner]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeData.Manner])
                   PhonemeGen.makeManners52
                   PhonemeGen.makeManners47) -}
9a96213e6c6781d8ed2a3dbd3b5681e4
  makeManners47 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeData.Manner]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeData.Manner])
                   PhonemeGen.makeManners48
                   (GHC.Types.[]
                      @ (Data.RVar.RVarT
                           Data.Functor.Identity.Identity [PhonemeData.Manner]))) -}
ad85c39d889294f152fcae1275fc3ce9
  makeManners48 :: Data.RVar.RVar [PhonemeData.Manner]
  {- Unfolding: (Data.Random.Extras.choice
                   @ [PhonemeData.Manner]
                   PhonemeGen.makeManners49) -}
4469b73b60f0413c2849bb8fd8dde9f8
  makeManners49 :: [[PhonemeData.Manner]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeData.Manner]
                   (GHC.Types.[] @ PhonemeData.Manner)
                   PhonemeGen.makeManners50) -}
5666d5f9112bc50d772f78f3a40f9711
  makeManners5 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeData.Manner]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeData.Manner])
                   PhonemeGen.makeManners25
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[PhonemeData.Manner]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeData.Manner]>_N))
                   PhonemeGen.makeManners6) -}
cc6dbba66e459f83d8224c9d01ad606f
  makeManners50 :: [[PhonemeData.Manner]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeData.Manner]
                   PhonemeGen.makeManners51
                   (GHC.Types.[] @ [PhonemeData.Manner])) -}
2b93175dbd5a6f1d8995403ff5aaa04a
  makeManners51 :: [PhonemeData.Manner]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeData.Manner
                   PhonemeData.LAFFRICATE
                   (GHC.Types.[] @ PhonemeData.Manner)) -}
19b516c5fd7fdc086d14ec9a9f4b2c1d
  makeManners52 :: Data.RVar.RVar [PhonemeData.Manner]
  {- Unfolding: (Data.Random.Extras.choice
                   @ [PhonemeData.Manner]
                   PhonemeGen.makeManners53) -}
1eb64b73ed4396eda824a4f0c49b1b84
  makeManners53 :: [[PhonemeData.Manner]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeData.Manner]
                   (GHC.Types.[] @ PhonemeData.Manner)
                   PhonemeGen.makeManners54) -}
3cc6df91b32099c64b91322fc7eb794d
  makeManners54 :: [[PhonemeData.Manner]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeData.Manner]
                   PhonemeGen.makeManners55
                   (GHC.Types.[] @ [PhonemeData.Manner])) -}
607ae4a76a5e5adee2e6b5cdfce98289
  makeManners55 :: [PhonemeData.Manner]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeData.Manner
                   PhonemeData.SAFFRICATE
                   (GHC.Types.[] @ PhonemeData.Manner)) -}
7f082ed3a4b11f83b509ce0dff5fc1e3
  makeManners56 ::
    ([PhonemeData.Manner] -> b)
    -> (forall a2.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a2
        -> (a2 -> b) -> b)
    -> b
  {- Arity: 2, HasNoCafRefs, Strictness: <C(S),1*C1(U)><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ b
                   eta1 :: [PhonemeData.Manner] -> b
                   eta2 :: forall a6.
                           Control.Monad.Prompt.Lift
                             Data.Random.Source.Internal.Prim.Prim
                             Data.Functor.Identity.Identity
                             a6
                           -> (a6 -> b) -> b ->
                 eta1 PhonemeGen.makeManners_eta4) -}
44ac6ae37171df668bfd97e737830d62
  makeManners57 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeData.Manner]]
    -> forall b.
       ([[PhonemeData.Manner]] -> b)
       -> (forall a.
           Control.Monad.Prompt.Lift
             Data.Random.Source.Internal.Prim.Prim
             Data.Functor.Identity.Identity
             a
           -> (a -> b) -> b)
       -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,C(U)><L,U> -}
8a332bdb362442dc0f7644401ec80bfe
  makeManners58 ::
    ([PhonemeData.Manner] -> b)
    -> (forall a2.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a2
        -> (a2 -> b) -> b)
    -> b
  {- Arity: 2, HasNoCafRefs, Strictness: <C(S),1*C1(U)><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ b
                   eta1 :: [PhonemeData.Manner] -> b
                   eta2 :: forall a6.
                           Control.Monad.Prompt.Lift
                             Data.Random.Source.Internal.Prim.Prim
                             Data.Functor.Identity.Identity
                             a6
                           -> (a6 -> b) -> b ->
                 eta1 PhonemeGen.makeManners_eta5) -}
1be4aaa86eb91bbeac867e9657279fbf
  makeManners59 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeData.Manner]]
    -> forall b.
       ([[PhonemeData.Manner]] -> b)
       -> (forall a.
           Control.Monad.Prompt.Lift
             Data.Random.Source.Internal.Prim.Prim
             Data.Functor.Identity.Identity
             a
           -> (a -> b) -> b)
       -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,C(U)><L,U> -}
339de5a9225c19b5837a1b5d520ac4dd
  makeManners6 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeData.Manner]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeData.Manner])
                   PhonemeGen.makeManners12
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[PhonemeData.Manner]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeData.Manner]>_N))
                   PhonemeGen.makeManners7) -}
2b33797370ccb6970bb6fe31d31817a6
  makeManners60 ::
    ([PhonemeData.Manner] -> b1)
    -> (forall a2.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a2
        -> (a2 -> b1) -> b1)
    -> b1
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ b1
                   eta2 :: [PhonemeData.Manner] -> b1
                   eta3 :: forall a6.
                           Control.Monad.Prompt.Lift
                             Data.Random.Source.Internal.Prim.Prim
                             Data.Functor.Identity.Identity
                             a6
                           -> (a6 -> b1) -> b1 ->
                 PhonemeGen.makeManners_eta6
                   `cast`
                 (Trans
                      (Trans
                           (Data.RVar.NTCo:RVarT[0] <Data.Functor.Identity.Identity>_N)
                           (Control.Monad.Prompt.NTCo:PromptT[0]
                                <Data.Random.Source.Internal.Prim.Prim>_R
                                <Data.Functor.Identity.Identity>_R) <Data.RVar.RVarT
                                                                       Data.Functor.Identity.Identity
                                                                       [PhonemeData.Manner]>_N)
                      (Control.Monad.Prompt.NTCo:Prompt[0]
                           <Control.Monad.Prompt.Lift
                              Data.Random.Source.Internal.Prim.Prim
                              Data.Functor.Identity.Identity>_R
                           <Data.RVar.RVarT
                              Data.Functor.Identity.Identity [PhonemeData.Manner]>_R))
                   @ b1
                   (\ x :: Data.RVar.RVarT
                             Data.Functor.Identity.Identity [PhonemeData.Manner] ->
                    case x `cast`
                         (Trans
                              (Trans
                                   (Data.RVar.NTCo:RVarT[0] <Data.Functor.Identity.Identity>_N)
                                   (Control.Monad.Prompt.NTCo:PromptT[0]
                                        <Data.Random.Source.Internal.Prim.Prim>_R
                                        <Data.Functor.Identity.Identity>_R) <[PhonemeData.Manner]>_N)
                              (Control.Monad.Prompt.NTCo:Prompt[0]
                                   <Control.Monad.Prompt.Lift
                                      Data.Random.Source.Internal.Prim.Prim
                                      Data.Functor.Identity.Identity>_R
                                   <[PhonemeData.Manner]>_R)) of nt { DEFAULT ->
                    nt @ b1 eta2 eta3 })
                   eta3) -}
c604eb1e72b639fd09242e72d69dea53
  makeManners61 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeData.Manner]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeData.Manner])
                   PhonemeGen.makeManners24
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[PhonemeData.Manner]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeData.Manner]>_N))
                   PhonemeGen.makeManners62) -}
6473287b7da4c48750b9024c3988e10e
  makeManners62 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeData.Manner]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeData.Manner])
                   PhonemeGen.makeManners63
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[PhonemeData.Manner]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeData.Manner]>_N))
                   (GHC.Types.[]
                      @ (Data.RVar.RVarT
                           Data.Functor.Identity.Identity [PhonemeData.Manner]))) -}
545cf0c32c7953199657c8167d0b0625
  makeManners63 ::
    ([PhonemeData.Manner] -> b1)
    -> (forall a2.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a2
        -> (a2 -> b1) -> b1)
    -> b1
  {- Arity: 2,
     Unfolding: (\ @ b1
                   eta :: [PhonemeData.Manner] -> b1
                   eta1 :: forall a6.
                           Control.Monad.Prompt.Lift
                             Data.Random.Source.Internal.Prim.Prim
                             Data.Functor.Identity.Identity
                             a6
                           -> (a6 -> b1) -> b1 ->
                 PhonemeGen.makeManners71
                   PhonemeGen.makeManners64
                   @ b1
                   (\ x :: [[PhonemeData.Manner]] ->
                    case PhonemeGen.makeManners_go4 x of vx { DEFAULT -> eta vx })
                   eta1) -}
6ab3ff4e88461358f4c20936350c0be0
  makeManners64 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeData.Manner]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeData.Manner])
                   PhonemeGen.makeManners70
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[PhonemeData.Manner]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeData.Manner]>_N))
                   PhonemeGen.makeManners65) -}
eed9060e23a84a63b56e69c09ce8e89b
  makeManners65 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeData.Manner]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeData.Manner])
                   PhonemeGen.makeManners66
                   (GHC.Types.[]
                      @ (Data.RVar.RVarT
                           Data.Functor.Identity.Identity [PhonemeData.Manner]))) -}
2725946379b4b2c4b4e26df5ec4e0bb7
  makeManners66 :: Data.RVar.RVar [PhonemeData.Manner]
  {- Unfolding: (Data.Random.Extras.choice
                   @ [PhonemeData.Manner]
                   PhonemeGen.makeManners67) -}
91e5f1c58e9b1726beba2b928d0e550a
  makeManners67 :: [[PhonemeData.Manner]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeData.Manner]
                   (GHC.Types.[] @ PhonemeData.Manner)
                   PhonemeGen.makeManners68) -}
d448ed0c9a0dabde6b056e437a845d05
  makeManners68 :: [[PhonemeData.Manner]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeData.Manner]
                   PhonemeGen.makeManners69
                   (GHC.Types.[] @ [PhonemeData.Manner])) -}
473b9d5849492bf3c6ca364efb335409
  makeManners69 :: [PhonemeData.Manner]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeData.Manner
                   PhonemeData.LFLAP
                   (GHC.Types.[] @ PhonemeData.Manner)) -}
307162a961124008c79764b5c0ff310a
  makeManners7 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeData.Manner]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeData.Manner])
                   PhonemeGen.makeManners8
                   (GHC.Types.[]
                      @ (Data.RVar.RVarT
                           Data.Functor.Identity.Identity [PhonemeData.Manner]))) -}
3825caebabafbe13852c77d6ed485118
  makeManners70 ::
    ([PhonemeData.Manner] -> b)
    -> (forall a2.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a2
        -> (a2 -> b) -> b)
    -> b
  {- Arity: 2, HasNoCafRefs, Strictness: <C(S),1*C1(U)><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ b
                   eta1 :: [PhonemeData.Manner] -> b
                   eta2 :: forall a6.
                           Control.Monad.Prompt.Lift
                             Data.Random.Source.Internal.Prim.Prim
                             Data.Functor.Identity.Identity
                             a6
                           -> (a6 -> b) -> b ->
                 eta1 PhonemeGen.makeManners_eta7) -}
576b63b3bcd3e00b4825f90bc4517097
  makeManners71 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeData.Manner]]
    -> forall b.
       ([[PhonemeData.Manner]] -> b)
       -> (forall a.
           Control.Monad.Prompt.Lift
             Data.Random.Source.Internal.Prim.Prim
             Data.Functor.Identity.Identity
             a
           -> (a -> b) -> b)
       -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,C(U)><L,U> -}
d697b01ddb7624a8b56e087e6696a60c
  makeManners72 :: Data.RVar.RVar [PhonemeData.Manner]
  {- Unfolding: (Data.Random.Extras.choice
                   @ [PhonemeData.Manner]
                   PhonemeGen.makeManners73) -}
811807620815adbeb7fd3ca0d5cb2342
  makeManners73 :: [[PhonemeData.Manner]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeData.Manner]
                   (GHC.Types.[] @ PhonemeData.Manner)
                   PhonemeGen.makeManners74) -}
970b7b98d8621812e6d1a201a27a715c
  makeManners74 :: [[PhonemeData.Manner]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeData.Manner]
                   PhonemeGen.makeManners75
                   (GHC.Types.[] @ [PhonemeData.Manner])) -}
1d8d77a196d0164a747b39337744544c
  makeManners75 :: [PhonemeData.Manner]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeData.Manner
                   PhonemeData.NASAL
                   (GHC.Types.[] @ PhonemeData.Manner)) -}
f710f62df5fe3da3e9d53e8355d85fe0
  makeManners76 ::
    ([PhonemeData.Manner] -> b)
    -> (forall a2.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a2
        -> (a2 -> b) -> b)
    -> b
  {- Arity: 2, HasNoCafRefs, Strictness: <C(S),1*C1(U)><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ b
                   eta1 :: [PhonemeData.Manner] -> b
                   eta2 :: forall a6.
                           Control.Monad.Prompt.Lift
                             Data.Random.Source.Internal.Prim.Prim
                             Data.Functor.Identity.Identity
                             a6
                           -> (a6 -> b) -> b ->
                 eta1 PhonemeGen.makeManners_eta8) -}
48614076d9dc9effc01c4d91a9d5b2bf
  makeManners77 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeData.Manner]]
    -> forall b.
       ([[PhonemeData.Manner]] -> b)
       -> (forall a.
           Control.Monad.Prompt.Lift
             Data.Random.Source.Internal.Prim.Prim
             Data.Functor.Identity.Identity
             a
           -> (a -> b) -> b)
       -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,C(U)><L,U> -}
a83949cd82289e499e0b515368333fea
  makeManners8 :: Data.RVar.RVar [PhonemeData.Manner]
  {- Unfolding: (Data.Random.Extras.choice
                   @ [PhonemeData.Manner]
                   PhonemeGen.makeManners9) -}
d2e32a6569a19d5eb126ba9a2a27b906
  makeManners9 :: [[PhonemeData.Manner]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeData.Manner]
                   (GHC.Types.[] @ PhonemeData.Manner)
                   PhonemeGen.makeManners10) -}
d24cefee1814cf0bbd8b326faf5d5035
  makeManners_eta ::
    Data.RVar.RVarT
      Data.Functor.Identity.Identity
      (Data.RVar.RVarT
         Data.Functor.Identity.Identity [PhonemeData.Manner])
  {- Unfolding: (Data.Random.Extras.choice
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeData.Manner])
                   PhonemeGen.makeManners13) -}
ace67e96debb5f2800df7860c1e76bf2
  makeManners_eta1 :: [PhonemeData.Manner]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeData.Manner
                   PhonemeData.APPROXIMANT
                   (GHC.Types.[] @ PhonemeData.Manner)) -}
e9ea8d172069615e6b2e2f696cbbe2e3
  makeManners_eta2 ::
    Data.RVar.RVarT
      Data.Functor.Identity.Identity
      (Data.RVar.RVarT
         Data.Functor.Identity.Identity [PhonemeData.Manner])
  {- Unfolding: (Data.Random.Extras.choice
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeData.Manner])
                   PhonemeGen.makeManners26) -}
4d7951064a9572ffd409099c69d4d1be
  makeManners_eta3 ::
    Data.RVar.RVarT
      Data.Functor.Identity.Identity
      (Data.RVar.RVarT
         Data.Functor.Identity.Identity [PhonemeData.Manner])
  {- Unfolding: (Data.Random.Extras.choice
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeData.Manner])
                   PhonemeGen.makeManners42) -}
5009878d2f9d40b2f6f9f1d18717f1e1
  makeManners_eta4 :: [PhonemeData.Manner]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeData.Manner
                   PhonemeData.AFFRICATE
                   (GHC.Types.[] @ PhonemeData.Manner)) -}
baedd563beb97b52a0bf8b577f119e76
  makeManners_eta5 :: [PhonemeData.Manner]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeData.Manner
                   PhonemeData.FRICATIVE
                   (GHC.Types.[] @ PhonemeData.Manner)) -}
866b157b318e23a0dff47904f3454e07
  makeManners_eta6 ::
    Data.RVar.RVarT
      Data.Functor.Identity.Identity
      (Data.RVar.RVarT
         Data.Functor.Identity.Identity [PhonemeData.Manner])
  {- Unfolding: (Data.Random.Extras.choice
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeData.Manner])
                   PhonemeGen.makeManners61) -}
f2aab35c645c8619b6cdef630d80f784
  makeManners_eta7 :: [PhonemeData.Manner]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeData.Manner
                   PhonemeData.FLAP
                   (GHC.Types.[] @ PhonemeData.Manner)) -}
5b59ede7d1ec2732bc3520b15a2561ad
  makeManners_eta8 :: [PhonemeData.Manner]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ PhonemeData.Manner
                   PhonemeData.STOP
                   (GHC.Types.[] @ PhonemeData.Manner)) -}
6520db196a99d710a6cc524315866111
  makeManners_go :: [[PhonemeData.Manner]] -> [PhonemeData.Manner]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
be2ed9e458f1ca5191b0c49710e9c3f9
  makeManners_go1 :: [[PhonemeData.Manner]] -> [PhonemeData.Manner]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
95a04aa3404b33267bd8ad5f38d681cb
  makeManners_go2 :: [[PhonemeData.Manner]] -> [PhonemeData.Manner]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
320ccfc22da45b053892b312ad70a717
  makeManners_go3 :: [[PhonemeData.Manner]] -> [PhonemeData.Manner]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
eb5eaa166ba6cc26023c2f3e8e09c66b
  makeManners_go4 :: [[PhonemeData.Manner]] -> [PhonemeData.Manner]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
585ab7222211c95283c178d166842deb
  makePhonations :: Data.RVar.RVar [PhonemeData.Phonation]
  {- Unfolding: (Data.Random.Extras.choice
                   @ [PhonemeData.Phonation]
                   PhonemeGen.makePhonations1) -}
5eddc220cd679d44ff131c94d2b712b4
  makePhonations1 :: [[PhonemeData.Phonation]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeData.Phonation]
                   PhonemeGen.makePhonations17
                   PhonemeGen.makePhonations2) -}
ec499b582861967797ab039a2df74169
  makePhonations10 :: [PhonemeData.Phonation]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeData.Phonation
                   PhonemeData.SLACK
                   PhonemeGen.makePhonations11) -}
a7495d6d5889b6f2d8031cbaf492d29d
  makePhonations11 :: [PhonemeData.Phonation]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeData.Phonation
                   PhonemeData.MODAL
                   PhonemeGen.makePhonations12) -}
add7c6b2bc1faf7989e3c3c7199d5f1d
  makePhonations12 :: [PhonemeData.Phonation]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeData.Phonation
                   PhonemeData.STIFF
                   (GHC.Types.[] @ PhonemeData.Phonation)) -}
3e61c9b16d43b62b85e2d2207a86342f
  makePhonations13 :: [PhonemeData.Phonation]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeData.Phonation
                   PhonemeData.BREATHY
                   PhonemeGen.makePhonations14) -}
857178140e5cd3f5ce5895d831c7f290
  makePhonations14 :: [PhonemeData.Phonation]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeData.Phonation
                   PhonemeData.MODAL
                   PhonemeGen.makePhonations15) -}
003b11d7e1d247803f3f016365d43861
  makePhonations15 :: [PhonemeData.Phonation]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeData.Phonation
                   PhonemeData.CREAKY
                   (GHC.Types.[] @ PhonemeData.Phonation)) -}
113b27f7699a5078f390d842ad80d7a5
  makePhonations16 :: [PhonemeData.Phonation]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeData.Phonation
                   PhonemeData.VOICELESS
                   PhonemeGen.makePhonations17) -}
4656f1ed31314da5a95bace13d1ca288
  makePhonations17 :: [PhonemeData.Phonation]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeData.Phonation
                   PhonemeData.MODAL
                   (GHC.Types.[] @ PhonemeData.Phonation)) -}
e2f77b0eb31528f7e78814bfcaa8ff47
  makePhonations2 :: [[PhonemeData.Phonation]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeData.Phonation]
                   PhonemeGen.makePhonations16
                   PhonemeGen.makePhonations3) -}
a84e4d8e4870155b0d1721f49e1e4a5f
  makePhonations3 :: [[PhonemeData.Phonation]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeData.Phonation]
                   PhonemeGen.makePhonations13
                   PhonemeGen.makePhonations4) -}
8977d734a2aa50c983c81ece419cb87b
  makePhonations4 :: [[PhonemeData.Phonation]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeData.Phonation]
                   PhonemeGen.makePhonations10
                   PhonemeGen.makePhonations5) -}
120b6074f25f47a931279edff38c2690
  makePhonations5 :: [[PhonemeData.Phonation]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeData.Phonation]
                   PhonemeGen.makePhonations9
                   PhonemeGen.makePhonations6) -}
749659c3e2ab62e57b108edf0d254110
  makePhonations6 :: [[PhonemeData.Phonation]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeData.Phonation]
                   PhonemeGen.makePhonations7
                   (GHC.Types.[] @ [PhonemeData.Phonation])) -}
b7106aeb53758366968241bf77d59543
  makePhonations7 :: [PhonemeData.Phonation]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeData.Phonation
                   PhonemeData.MODAL
                   PhonemeGen.makePhonations8) -}
ebfc87a7fe6a206d2021bfcb8274737b
  makePhonations8 :: [PhonemeData.Phonation]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeData.Phonation
                   PhonemeData.ASPIRATED
                   (GHC.Types.[] @ PhonemeData.Phonation)) -}
2465af3f6ed88fa807d280218f67614b
  makePhonations9 :: [PhonemeData.Phonation]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeData.Phonation
                   PhonemeData.VOICELESS
                   PhonemeGen.makePhonations7) -}
ba0db201664551b87f8b75a065a31b78
  makePlaces :: Data.RVar.RVar [PhonemeData.Place]
  {- Arity: 2, Strictness: <L,C(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                PhonemeGen.makePlaces1
                  `cast`
                (Trans
                     (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                               <Control.Monad.Prompt.Lift
                                  Data.Random.Source.Internal.Prim.Prim
                                  Data.Functor.Identity.Identity>_R
                               <[PhonemeData.Place]>_R))
                     (Trans
                          (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                    <Data.Random.Source.Internal.Prim.Prim>_R
                                    <Data.Functor.Identity.Identity>_R))
                          (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeData.Place]>_N)) -}
8acec986bd38f71a85c770b824311110
  makePlaces1 ::
    ([PhonemeData.Place] -> b1)
    -> (forall a2.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a2
        -> (a2 -> b1) -> b1)
    -> b1
  {- Arity: 2, Strictness: <L,C(U)><L,U>,
     Unfolding: (\ @ b1
                   eta :: [PhonemeData.Place] -> b1
                   eta1 :: forall a6.
                           Control.Monad.Prompt.Lift
                             Data.Random.Source.Internal.Prim.Prim
                             Data.Functor.Identity.Identity
                             a6
                           -> (a6 -> b1) -> b1 ->
                 PhonemeGen.makePlaces62
                   PhonemeGen.makePlaces2
                   @ b1
                   (\ x :: [[PhonemeData.Place]] ->
                    case PhonemeGen.makePlaces_go x of vx { DEFAULT -> eta vx })
                   eta1) -}
4fa23f84c2b7ac70bfc5325f6fbc5bcf
  makePlaces10 ::
    ([PhonemeData.Place] -> b1)
    -> (forall a2.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a2
        -> (a2 -> b1) -> b1)
    -> b1
  {- Arity: 2,
     Unfolding: (\ @ b1
                   eta :: [PhonemeData.Place] -> b1
                   eta1 :: forall a6.
                           Control.Monad.Prompt.Lift
                             Data.Random.Source.Internal.Prim.Prim
                             Data.Functor.Identity.Identity
                             a6
                           -> (a6 -> b1) -> b1 ->
                 PhonemeGen.makePlaces20
                   PhonemeGen.makePlaces11
                   @ b1
                   (\ x :: [[PhonemeData.Place]] ->
                    case PhonemeGen.makePlaces_go1 x of vx { DEFAULT -> eta vx })
                   eta1) -}
7e24f99d6e5f2111a48568de4c552a0a
  makePlaces11 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeData.Place]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeData.Place])
                   PhonemeGen.makePlaces14
                   PhonemeGen.makePlaces12) -}
3017c14886939b4ac20e3103d4bbbfa0
  makePlaces12 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeData.Place]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeData.Place])
                   PhonemeGen.makePlaces13
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[PhonemeData.Place]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeData.Place]>_N))
                   (GHC.Types.[]
                      @ (Data.RVar.RVarT
                           Data.Functor.Identity.Identity [PhonemeData.Place]))) -}
0436e4f7e29e8058d989c15febcc1916
  makePlaces13 ::
    ([PhonemeData.Place] -> b)
    -> (forall a2.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a2
        -> (a2 -> b) -> b)
    -> b
  {- Arity: 2, HasNoCafRefs, Strictness: <C(S),1*C1(U)><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ b
                   eta1 :: [PhonemeData.Place] -> b
                   eta2 :: forall a6.
                           Control.Monad.Prompt.Lift
                             Data.Random.Source.Internal.Prim.Prim
                             Data.Functor.Identity.Identity
                             a6
                           -> (a6 -> b) -> b ->
                 eta1 PhonemeGen.makePlaces_eta1) -}
d0ed9ea2206949c6f5847e107ab96ba2
  makePlaces14 :: Data.RVar.RVar [PhonemeData.Place]
  {- Unfolding: (Data.Random.Extras.choice
                   @ [PhonemeData.Place]
                   PhonemeGen.makePlaces15) -}
3b2e523708b1568d11b3b6ac28a5161a
  makePlaces15 :: [[PhonemeData.Place]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeData.Place]
                   PhonemeGen.makePlaces19
                   PhonemeGen.makePlaces16) -}
c423b1078934166105591aee8b44444e
  makePlaces16 :: [[PhonemeData.Place]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeData.Place]
                   PhonemeGen.makePlaces17
                   (GHC.Types.[] @ [PhonemeData.Place])) -}
087fd302e8abff0120240573df324628
  makePlaces17 :: [PhonemeData.Place]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeData.Place
                   PhonemeData.PHARYNGEAL
                   PhonemeGen.makePlaces18) -}
5a8546dc8c11fa74f91a8a141118f62c
  makePlaces18 :: [PhonemeData.Place]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeData.Place
                   PhonemeData.EPIGLOTTAL
                   (GHC.Types.[] @ PhonemeData.Place)) -}
2edf822543b44baef401690754fb2b02
  makePlaces19 :: [PhonemeData.Place]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeData.Place
                   PhonemeData.EPIPHARYNGEAL
                   (GHC.Types.[] @ PhonemeData.Place)) -}
9c0ecb327c309e2abd862acfa5ac6389
  makePlaces2 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeData.Place]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeData.Place])
                   PhonemeGen.makePlaces55
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[PhonemeData.Place]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeData.Place]>_N))
                   PhonemeGen.makePlaces3) -}
9b344c474cccc28bc0425a099840a2a0
  makePlaces20 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeData.Place]]
    -> forall b.
       ([[PhonemeData.Place]] -> b)
       -> (forall a.
           Control.Monad.Prompt.Lift
             Data.Random.Source.Internal.Prim.Prim
             Data.Functor.Identity.Identity
             a
           -> (a -> b) -> b)
       -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,C(U)><L,U> -}
7efefb3ec12d2380d4c738f1bfecc0d1
  makePlaces21 ::
    ([PhonemeData.Place] -> b)
    -> (forall a2.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a2
        -> (a2 -> b) -> b)
    -> b
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (\ @ b
                   eta1 :: [PhonemeData.Place] -> b
                   eta2 :: forall a6.
                           Control.Monad.Prompt.Lift
                             Data.Random.Source.Internal.Prim.Prim
                             Data.Functor.Identity.Identity
                             a6
                           -> (a6 -> b) -> b ->
                 eta1 PhonemeGen.makePlaces_eta2) -}
e33b71662b1121c577d1f75246adb00a
  makePlaces22 ::
    ([PhonemeData.Place] -> b)
    -> (forall a2.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a2
        -> (a2 -> b) -> b)
    -> b
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (\ @ b
                   eta1 :: [PhonemeData.Place] -> b
                   eta2 :: forall a6.
                           Control.Monad.Prompt.Lift
                             Data.Random.Source.Internal.Prim.Prim
                             Data.Functor.Identity.Identity
                             a6
                           -> (a6 -> b) -> b ->
                 eta1 (GHC.Types.[] @ PhonemeData.Place)) -}
1a6da77ee49a5f74d13bc073c6fe3691
  makePlaces23 ::
    ([PhonemeData.Place] -> b1)
    -> (forall a2.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a2
        -> (a2 -> b1) -> b1)
    -> b1
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ b1
                   eta2 :: [PhonemeData.Place] -> b1
                   eta3 :: forall a6.
                           Control.Monad.Prompt.Lift
                             Data.Random.Source.Internal.Prim.Prim
                             Data.Functor.Identity.Identity
                             a6
                           -> (a6 -> b1) -> b1 ->
                 PhonemeGen.makePlaces_eta3
                   `cast`
                 (Trans
                      (Trans
                           (Data.RVar.NTCo:RVarT[0] <Data.Functor.Identity.Identity>_N)
                           (Control.Monad.Prompt.NTCo:PromptT[0]
                                <Data.Random.Source.Internal.Prim.Prim>_R
                                <Data.Functor.Identity.Identity>_R) <Data.RVar.RVarT
                                                                       Data.Functor.Identity.Identity
                                                                       [PhonemeData.Place]>_N)
                      (Control.Monad.Prompt.NTCo:Prompt[0]
                           <Control.Monad.Prompt.Lift
                              Data.Random.Source.Internal.Prim.Prim
                              Data.Functor.Identity.Identity>_R
                           <Data.RVar.RVarT
                              Data.Functor.Identity.Identity [PhonemeData.Place]>_R))
                   @ b1
                   (\ x :: Data.RVar.RVarT
                             Data.Functor.Identity.Identity [PhonemeData.Place] ->
                    case x `cast`
                         (Trans
                              (Trans
                                   (Data.RVar.NTCo:RVarT[0] <Data.Functor.Identity.Identity>_N)
                                   (Control.Monad.Prompt.NTCo:PromptT[0]
                                        <Data.Random.Source.Internal.Prim.Prim>_R
                                        <Data.Functor.Identity.Identity>_R) <[PhonemeData.Place]>_N)
                              (Control.Monad.Prompt.NTCo:Prompt[0]
                                   <Control.Monad.Prompt.Lift
                                      Data.Random.Source.Internal.Prim.Prim
                                      Data.Functor.Identity.Identity>_R
                                   <[PhonemeData.Place]>_R)) of nt { DEFAULT ->
                    nt @ b1 eta2 eta3 })
                   eta3) -}
697a44274054fd54d3e324040caee436
  makePlaces24 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeData.Place]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeData.Place])
                   PhonemeGen.makePlaces38
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[PhonemeData.Place]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeData.Place]>_N))
                   PhonemeGen.makePlaces25) -}
3132d372a3ce878391facc6b8cb5fc41
  makePlaces25 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeData.Place]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeData.Place])
                   PhonemeGen.makePlaces26
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[PhonemeData.Place]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeData.Place]>_N))
                   (GHC.Types.[]
                      @ (Data.RVar.RVarT
                           Data.Functor.Identity.Identity [PhonemeData.Place]))) -}
1b76cde7f4f26d0ef440d9b0b84af058
  makePlaces26 ::
    ([PhonemeData.Place] -> b1)
    -> (forall a2.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a2
        -> (a2 -> b1) -> b1)
    -> b1
  {- Arity: 2,
     Unfolding: (\ @ b1
                   eta :: [PhonemeData.Place] -> b1
                   eta1 :: forall a6.
                           Control.Monad.Prompt.Lift
                             Data.Random.Source.Internal.Prim.Prim
                             Data.Functor.Identity.Identity
                             a6
                           -> (a6 -> b1) -> b1 ->
                 let {
                   eta2 :: [[PhonemeData.Place]] -> b1
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ x :: [[PhonemeData.Place]] ->
                     case PhonemeGen.makePlaces_go2 x of vx { DEFAULT -> eta vx }
                 } in
                 PhonemeGen.makePlaces_m1
                   `cast`
                 (Trans
                      (Trans
                           (Data.RVar.NTCo:RVarT[0] <Data.Functor.Identity.Identity>_N)
                           (Control.Monad.Prompt.NTCo:PromptT[0]
                                <Data.Random.Source.Internal.Prim.Prim>_R
                                <Data.Functor.Identity.Identity>_R) <GHC.Types.Int>_N)
                      (Control.Monad.Prompt.NTCo:Prompt[0]
                           <Control.Monad.Prompt.Lift
                              Data.Random.Source.Internal.Prim.Prim
                              Data.Functor.Identity.Identity>_R
                           <GHC.Types.Int>_R))
                   @ b1
                   (\ x :: GHC.Types.Int ->
                    case x of x1 { GHC.Types.I# ipv ->
                    PhonemeGen.makePlaces37
                      PhonemeGen.makePlaces27
                      @ b1
                      (\ x2 :: [[PhonemeData.Place]] ->
                       case x2 of x3 { DEFAULT ->
                       case (Data.Random.Extras.sampleSeq
                               @ [PhonemeData.Place]
                               x1
                               (Data.Sequence.fromList1
                                  @ [PhonemeData.Place]
                                  x3
                                    `cast`
                                  ([Sym (Data.Sequence.NTCo:Elem[0] <[PhonemeData.Place]>_R)])_R)
                                 `cast`
                               (Sym (Data.Sequence.NTCo:Seq[0] <[PhonemeData.Place]>_R)))
                              `cast`
                            (Trans
                                 (Trans
                                      (Data.RVar.NTCo:RVarT[0] <Data.Functor.Identity.Identity>_N)
                                      (Control.Monad.Prompt.NTCo:PromptT[0]
                                           <Data.Random.Source.Internal.Prim.Prim>_R
                                           <Data.Functor.Identity.Identity>_R) <[[PhonemeData.Place]]>_N)
                                 (Control.Monad.Prompt.NTCo:Prompt[0]
                                      <Control.Monad.Prompt.Lift
                                         Data.Random.Source.Internal.Prim.Prim
                                         Data.Functor.Identity.Identity>_R
                                      <[[PhonemeData.Place]]>_R)) of nt { DEFAULT ->
                       nt @ b1 eta2 eta1 } })
                      eta1 })
                   eta1) -}
56dabdef498ae210dfec0e9d73d12654
  makePlaces27 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeData.Place]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeData.Place])
                   PhonemeGen.makePlaces32
                   PhonemeGen.makePlaces28) -}
1b6d6baafb7f3004bd2d2b203a76eac9
  makePlaces28 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeData.Place]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeData.Place])
                   PhonemeGen.makePlaces31
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[PhonemeData.Place]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeData.Place]>_N))
                   PhonemeGen.makePlaces29) -}
72316ffc8a604d68a4c381a3e4d2facf
  makePlaces29 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeData.Place]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeData.Place])
                   PhonemeGen.makePlaces30
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[PhonemeData.Place]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeData.Place]>_N))
                   (GHC.Types.[]
                      @ (Data.RVar.RVarT
                           Data.Functor.Identity.Identity [PhonemeData.Place]))) -}
4d56f6451b11cc43e2b1ddf97ca04de4
  makePlaces3 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeData.Place]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeData.Place])
                   PhonemeGen.makePlaces39
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[PhonemeData.Place]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeData.Place]>_N))
                   PhonemeGen.makePlaces4) -}
8c4f9fa7de49c53f1b7b9a95702784a9
  makePlaces30 ::
    ([PhonemeData.Place] -> b)
    -> (forall a2.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a2
        -> (a2 -> b) -> b)
    -> b
  {- Arity: 2, HasNoCafRefs, Strictness: <C(S),1*C1(U)><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ b
                   eta1 :: [PhonemeData.Place] -> b
                   eta2 :: forall a6.
                           Control.Monad.Prompt.Lift
                             Data.Random.Source.Internal.Prim.Prim
                             Data.Functor.Identity.Identity
                             a6
                           -> (a6 -> b) -> b ->
                 eta1 PhonemeGen.makePlaces_eta4) -}
700a191a2fe68c19b1247d04384140a2
  makePlaces31 ::
    ([PhonemeData.Place] -> b)
    -> (forall a2.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a2
        -> (a2 -> b) -> b)
    -> b
  {- Arity: 2, HasNoCafRefs, Strictness: <C(S),1*C1(U)><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ b
                   eta1 :: [PhonemeData.Place] -> b
                   eta2 :: forall a6.
                           Control.Monad.Prompt.Lift
                             Data.Random.Source.Internal.Prim.Prim
                             Data.Functor.Identity.Identity
                             a6
                           -> (a6 -> b) -> b ->
                 eta1 PhonemeGen.makePlaces_eta5) -}
5fa5c0c8dad61bdf8a48e706cb5fb2ab
  makePlaces32 :: Data.RVar.RVar [PhonemeData.Place]
  {- Unfolding: (Data.Random.Extras.choice
                   @ [PhonemeData.Place]
                   PhonemeGen.makePlaces33) -}
a0111340dd0dc03f71f2f94f77eacfff
  makePlaces33 :: [[PhonemeData.Place]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeData.Place]
                   PhonemeGen.makePlaces36
                   PhonemeGen.makePlaces34) -}
bd5b3171fbed43005d10c25018d47a18
  makePlaces34 :: [[PhonemeData.Place]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeData.Place]
                   PhonemeGen.makePlaces35
                   (GHC.Types.[] @ [PhonemeData.Place])) -}
ae80170ad8413bc3457a3e64d3b59e9f
  makePlaces35 :: [PhonemeData.Place]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeData.Place
                   PhonemeData.ALVEOLOPALATAL
                   PhonemeGen.makePlaces36) -}
53593b4f00d668f8969a19446c585846
  makePlaces36 :: [PhonemeData.Place]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeData.Place
                   PhonemeData.PALATAL
                   (GHC.Types.[] @ PhonemeData.Place)) -}
52aed184d52a3556126a5109ecda7d86
  makePlaces37 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeData.Place]]
    -> forall b.
       ([[PhonemeData.Place]] -> b)
       -> (forall a.
           Control.Monad.Prompt.Lift
             Data.Random.Source.Internal.Prim.Prim
             Data.Functor.Identity.Identity
             a
           -> (a -> b) -> b)
       -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,C(U)><L,U> -}
e3298fedc99dd91f63a5313bdd848e29
  makePlaces38 ::
    ([PhonemeData.Place] -> b)
    -> (forall a2.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a2
        -> (a2 -> b) -> b)
    -> b
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (\ @ b
                   eta1 :: [PhonemeData.Place] -> b
                   eta2 :: forall a6.
                           Control.Monad.Prompt.Lift
                             Data.Random.Source.Internal.Prim.Prim
                             Data.Functor.Identity.Identity
                             a6
                           -> (a6 -> b) -> b ->
                 eta1 PhonemeGen.makePlaces_eta6) -}
d612096a4fdfa9556196391f1bf47abb
  makePlaces39 ::
    ([PhonemeData.Place] -> b1)
    -> (forall a2.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a2
        -> (a2 -> b1) -> b1)
    -> b1
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ b1
                   eta2 :: [PhonemeData.Place] -> b1
                   eta3 :: forall a6.
                           Control.Monad.Prompt.Lift
                             Data.Random.Source.Internal.Prim.Prim
                             Data.Functor.Identity.Identity
                             a6
                           -> (a6 -> b1) -> b1 ->
                 PhonemeGen.makePlaces_eta7
                   `cast`
                 (Trans
                      (Trans
                           (Data.RVar.NTCo:RVarT[0] <Data.Functor.Identity.Identity>_N)
                           (Control.Monad.Prompt.NTCo:PromptT[0]
                                <Data.Random.Source.Internal.Prim.Prim>_R
                                <Data.Functor.Identity.Identity>_R) <Data.RVar.RVarT
                                                                       Data.Functor.Identity.Identity
                                                                       [PhonemeData.Place]>_N)
                      (Control.Monad.Prompt.NTCo:Prompt[0]
                           <Control.Monad.Prompt.Lift
                              Data.Random.Source.Internal.Prim.Prim
                              Data.Functor.Identity.Identity>_R
                           <Data.RVar.RVarT
                              Data.Functor.Identity.Identity [PhonemeData.Place]>_R))
                   @ b1
                   (\ x :: Data.RVar.RVarT
                             Data.Functor.Identity.Identity [PhonemeData.Place] ->
                    case x `cast`
                         (Trans
                              (Trans
                                   (Data.RVar.NTCo:RVarT[0] <Data.Functor.Identity.Identity>_N)
                                   (Control.Monad.Prompt.NTCo:PromptT[0]
                                        <Data.Random.Source.Internal.Prim.Prim>_R
                                        <Data.Functor.Identity.Identity>_R) <[PhonemeData.Place]>_N)
                              (Control.Monad.Prompt.NTCo:Prompt[0]
                                   <Control.Monad.Prompt.Lift
                                      Data.Random.Source.Internal.Prim.Prim
                                      Data.Functor.Identity.Identity>_R
                                   <[PhonemeData.Place]>_R)) of nt { DEFAULT ->
                    nt @ b1 eta2 eta3 })
                   eta3) -}
aa87d42e632ff2d67b56fcc0604c1d76
  makePlaces4 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeData.Place]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeData.Place])
                   PhonemeGen.makePlaces23
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[PhonemeData.Place]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeData.Place]>_N))
                   PhonemeGen.makePlaces5) -}
710881ae94d91adcd1c2516ececcd695
  makePlaces40 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeData.Place]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeData.Place])
                   PhonemeGen.makePlaces54
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[PhonemeData.Place]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeData.Place]>_N))
                   PhonemeGen.makePlaces41) -}
8b9b2a1158edd63d7fc3bf7901a44f58
  makePlaces41 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeData.Place]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeData.Place])
                   PhonemeGen.makePlaces42
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[PhonemeData.Place]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeData.Place]>_N))
                   (GHC.Types.[]
                      @ (Data.RVar.RVarT
                           Data.Functor.Identity.Identity [PhonemeData.Place]))) -}
d8331649a4a16d47c58082b09a6ad537
  makePlaces42 ::
    ([PhonemeData.Place] -> b1)
    -> (forall a2.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a2
        -> (a2 -> b1) -> b1)
    -> b1
  {- Arity: 2,
     Unfolding: (\ @ b1
                   eta :: [PhonemeData.Place] -> b1
                   eta1 :: forall a6.
                           Control.Monad.Prompt.Lift
                             Data.Random.Source.Internal.Prim.Prim
                             Data.Functor.Identity.Identity
                             a6
                           -> (a6 -> b1) -> b1 ->
                 PhonemeGen.makePlaces53
                   PhonemeGen.makePlaces43
                   @ b1
                   (\ x :: [[PhonemeData.Place]] ->
                    case PhonemeGen.makePlaces_go3 x of vx { DEFAULT -> eta vx })
                   eta1) -}
5f35bcbb3ea151e4fd9f92c1a0af6ddd
  makePlaces43 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeData.Place]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeData.Place])
                   PhonemeGen.makePlaces46
                   PhonemeGen.makePlaces44) -}
ecd0befda14da244fc2451ecbcbbc8a1
  makePlaces44 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeData.Place]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeData.Place])
                   PhonemeGen.makePlaces45
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[PhonemeData.Place]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeData.Place]>_N))
                   (GHC.Types.[]
                      @ (Data.RVar.RVarT
                           Data.Functor.Identity.Identity [PhonemeData.Place]))) -}
f132d710a2abca2e2c9c2d9d1e548b44
  makePlaces45 ::
    ([PhonemeData.Place] -> b)
    -> (forall a2.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a2
        -> (a2 -> b) -> b)
    -> b
  {- Arity: 2, HasNoCafRefs, Strictness: <C(S),1*C1(U)><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ b
                   eta1 :: [PhonemeData.Place] -> b
                   eta2 :: forall a6.
                           Control.Monad.Prompt.Lift
                             Data.Random.Source.Internal.Prim.Prim
                             Data.Functor.Identity.Identity
                             a6
                           -> (a6 -> b) -> b ->
                 eta1 PhonemeGen.makePlaces_eta8) -}
77f5becb5aa07ebd9063e7c870e6124d
  makePlaces46 :: Data.RVar.RVar [PhonemeData.Place]
  {- Unfolding: (Data.Random.Extras.choice
                   @ [PhonemeData.Place]
                   PhonemeGen.makePlaces47) -}
5f5813d25a24eb8fa55a871e08638a06
  makePlaces47 :: [[PhonemeData.Place]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeData.Place]
                   PhonemeGen.makePlaces52
                   PhonemeGen.makePlaces48) -}
0fdfc7bb0ce51556227f50fa35e366d0
  makePlaces48 :: [[PhonemeData.Place]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeData.Place]
                   PhonemeGen.makePlaces49
                   (GHC.Types.[] @ [PhonemeData.Place])) -}
01249a3efc28c66776985e0b5f900902
  makePlaces49 :: [PhonemeData.Place]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeData.Place
                   PhonemeData.DENTAL
                   PhonemeGen.makePlaces50) -}
c6d3bed2eaa820f3c4ccc647a419f4a6
  makePlaces5 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeData.Place]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeData.Place])
                   PhonemeGen.makePlaces6
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[PhonemeData.Place]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeData.Place]>_N))
                   (GHC.Types.[]
                      @ (Data.RVar.RVarT
                           Data.Functor.Identity.Identity [PhonemeData.Place]))) -}
7bcb2242dcdcad142749fc0cc112e56c
  makePlaces50 :: [PhonemeData.Place]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeData.Place
                   PhonemeData.ALVEOLAR
                   PhonemeGen.makePlaces51) -}
fe3500035b29a1598ed7613c6e48b61c
  makePlaces51 :: [PhonemeData.Place]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeData.Place
                   PhonemeData.POSTALVEOLAR
                   (GHC.Types.[] @ PhonemeData.Place)) -}
33293ef5f3f95f74d0556758ac8f9627
  makePlaces52 :: [PhonemeData.Place]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeData.Place
                   PhonemeData.DENTIALVEOLAR
                   (GHC.Types.[] @ PhonemeData.Place)) -}
699bee2c31e49f4026bc0cafcad20c55
  makePlaces53 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeData.Place]]
    -> forall b.
       ([[PhonemeData.Place]] -> b)
       -> (forall a.
           Control.Monad.Prompt.Lift
             Data.Random.Source.Internal.Prim.Prim
             Data.Functor.Identity.Identity
             a
           -> (a -> b) -> b)
       -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,C(U)><L,U> -}
7c3d9f4e4a78dc1a2fa553660bfb3fe2
  makePlaces54 ::
    ([PhonemeData.Place] -> b)
    -> (forall a2.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a2
        -> (a2 -> b) -> b)
    -> b
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (\ @ b
                   eta1 :: [PhonemeData.Place] -> b
                   eta2 :: forall a6.
                           Control.Monad.Prompt.Lift
                             Data.Random.Source.Internal.Prim.Prim
                             Data.Functor.Identity.Identity
                             a6
                           -> (a6 -> b) -> b ->
                 eta1 PhonemeGen.makePlaces_eta9) -}
3a1ea19714050f95b5a71e72c40b84cf
  makePlaces55 ::
    ([PhonemeData.Place] -> b1)
    -> (forall a2.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a2
        -> (a2 -> b1) -> b1)
    -> b1
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ b1
                   eta2 :: [PhonemeData.Place] -> b1
                   eta3 :: forall a6.
                           Control.Monad.Prompt.Lift
                             Data.Random.Source.Internal.Prim.Prim
                             Data.Functor.Identity.Identity
                             a6
                           -> (a6 -> b1) -> b1 ->
                 PhonemeGen.makePlaces_eta10
                   `cast`
                 (Trans
                      (Trans
                           (Data.RVar.NTCo:RVarT[0] <Data.Functor.Identity.Identity>_N)
                           (Control.Monad.Prompt.NTCo:PromptT[0]
                                <Data.Random.Source.Internal.Prim.Prim>_R
                                <Data.Functor.Identity.Identity>_R) <Data.RVar.RVarT
                                                                       Data.Functor.Identity.Identity
                                                                       [PhonemeData.Place]>_N)
                      (Control.Monad.Prompt.NTCo:Prompt[0]
                           <Control.Monad.Prompt.Lift
                              Data.Random.Source.Internal.Prim.Prim
                              Data.Functor.Identity.Identity>_R
                           <Data.RVar.RVarT
                              Data.Functor.Identity.Identity [PhonemeData.Place]>_R))
                   @ b1
                   (\ x :: Data.RVar.RVarT
                             Data.Functor.Identity.Identity [PhonemeData.Place] ->
                    case x `cast`
                         (Trans
                              (Trans
                                   (Data.RVar.NTCo:RVarT[0] <Data.Functor.Identity.Identity>_N)
                                   (Control.Monad.Prompt.NTCo:PromptT[0]
                                        <Data.Random.Source.Internal.Prim.Prim>_R
                                        <Data.Functor.Identity.Identity>_R) <[PhonemeData.Place]>_N)
                              (Control.Monad.Prompt.NTCo:Prompt[0]
                                   <Control.Monad.Prompt.Lift
                                      Data.Random.Source.Internal.Prim.Prim
                                      Data.Functor.Identity.Identity>_R
                                   <[PhonemeData.Place]>_R)) of nt { DEFAULT ->
                    nt @ b1 eta2 eta3 })
                   eta3) -}
27af6695baa16c22017ec8555bcb6553
  makePlaces56 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeData.Place]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeData.Place])
                   PhonemeGen.makePlaces22
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[PhonemeData.Place]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeData.Place]>_N))
                   PhonemeGen.makePlaces57) -}
e8520e2df8c878d211f7292c2dfa263f
  makePlaces57 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeData.Place]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeData.Place])
                   PhonemeGen.makePlaces61
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[PhonemeData.Place]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeData.Place]>_N))
                   PhonemeGen.makePlaces58) -}
e230f713ec1a47d0a6c9a54d6cc1eed6
  makePlaces58 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeData.Place]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeData.Place])
                   PhonemeGen.makePlaces59
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[PhonemeData.Place]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeData.Place]>_N))
                   (GHC.Types.[]
                      @ (Data.RVar.RVarT
                           Data.Functor.Identity.Identity [PhonemeData.Place]))) -}
a2e44b5acfc71d46b4fdcdd3f2995b97
  makePlaces59 ::
    ([PhonemeData.Place] -> b)
    -> (forall a2.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a2
        -> (a2 -> b) -> b)
    -> b
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (\ @ b
                   eta1 :: [PhonemeData.Place] -> b
                   eta2 :: forall a6.
                           Control.Monad.Prompt.Lift
                             Data.Random.Source.Internal.Prim.Prim
                             Data.Functor.Identity.Identity
                             a6
                           -> (a6 -> b) -> b ->
                 eta1 PhonemeGen.makePlaces_eta11) -}
172000cc1eebed6880f74834d1af9e53
  makePlaces6 ::
    ([PhonemeData.Place] -> b1)
    -> (forall a2.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a2
        -> (a2 -> b1) -> b1)
    -> b1
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ b1
                   eta2 :: [PhonemeData.Place] -> b1
                   eta3 :: forall a6.
                           Control.Monad.Prompt.Lift
                             Data.Random.Source.Internal.Prim.Prim
                             Data.Functor.Identity.Identity
                             a6
                           -> (a6 -> b1) -> b1 ->
                 PhonemeGen.makePlaces_eta
                   `cast`
                 (Trans
                      (Trans
                           (Data.RVar.NTCo:RVarT[0] <Data.Functor.Identity.Identity>_N)
                           (Control.Monad.Prompt.NTCo:PromptT[0]
                                <Data.Random.Source.Internal.Prim.Prim>_R
                                <Data.Functor.Identity.Identity>_R) <Data.RVar.RVarT
                                                                       Data.Functor.Identity.Identity
                                                                       [PhonemeData.Place]>_N)
                      (Control.Monad.Prompt.NTCo:Prompt[0]
                           <Control.Monad.Prompt.Lift
                              Data.Random.Source.Internal.Prim.Prim
                              Data.Functor.Identity.Identity>_R
                           <Data.RVar.RVarT
                              Data.Functor.Identity.Identity [PhonemeData.Place]>_R))
                   @ b1
                   (\ x :: Data.RVar.RVarT
                             Data.Functor.Identity.Identity [PhonemeData.Place] ->
                    case x `cast`
                         (Trans
                              (Trans
                                   (Data.RVar.NTCo:RVarT[0] <Data.Functor.Identity.Identity>_N)
                                   (Control.Monad.Prompt.NTCo:PromptT[0]
                                        <Data.Random.Source.Internal.Prim.Prim>_R
                                        <Data.Functor.Identity.Identity>_R) <[PhonemeData.Place]>_N)
                              (Control.Monad.Prompt.NTCo:Prompt[0]
                                   <Control.Monad.Prompt.Lift
                                      Data.Random.Source.Internal.Prim.Prim
                                      Data.Functor.Identity.Identity>_R
                                   <[PhonemeData.Place]>_R)) of nt { DEFAULT ->
                    nt @ b1 eta2 eta3 })
                   eta3) -}
ebbe4d9b48486ba165b47253a0fed052
  makePlaces60 :: [PhonemeData.Place]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeData.Place
                   PhonemeData.LABIODENTAL
                   (GHC.Types.[] @ PhonemeData.Place)) -}
003cc0760b41e8830cdd75a2e9341358
  makePlaces61 ::
    ([PhonemeData.Place] -> b)
    -> (forall a2.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a2
        -> (a2 -> b) -> b)
    -> b
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (\ @ b
                   eta1 :: [PhonemeData.Place] -> b
                   eta2 :: forall a6.
                           Control.Monad.Prompt.Lift
                             Data.Random.Source.Internal.Prim.Prim
                             Data.Functor.Identity.Identity
                             a6
                           -> (a6 -> b) -> b ->
                 eta1 PhonemeGen.makePlaces_eta12) -}
d77bbdc5afa201c2d6838469fd6a1e7a
  makePlaces62 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeData.Place]]
    -> forall b.
       ([[PhonemeData.Place]] -> b)
       -> (forall a.
           Control.Monad.Prompt.Lift
             Data.Random.Source.Internal.Prim.Prim
             Data.Functor.Identity.Identity
             a
           -> (a -> b) -> b)
       -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,C(U)><L,U> -}
a50f8742af9cb54e2b7c0e93feb8b196
  makePlaces7 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeData.Place]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeData.Place])
                   PhonemeGen.makePlaces22
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[PhonemeData.Place]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeData.Place]>_N))
                   PhonemeGen.makePlaces8) -}
c19653960ee41d60de6c29d169e708fe
  makePlaces8 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeData.Place]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeData.Place])
                   PhonemeGen.makePlaces21
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[PhonemeData.Place]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeData.Place]>_N))
                   PhonemeGen.makePlaces9) -}
9974f290fc3ea0f8989a283556b297bd
  makePlaces9 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeData.Place]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeData.Place])
                   PhonemeGen.makePlaces10
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[PhonemeData.Place]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeData.Place]>_N))
                   (GHC.Types.[]
                      @ (Data.RVar.RVarT
                           Data.Functor.Identity.Identity [PhonemeData.Place]))) -}
5e43ae03f5ad67d6e4c3b41ec37668e1
  makePlaces_eta ::
    Data.RVar.RVarT
      Data.Functor.Identity.Identity
      (Data.RVar.RVarT
         Data.Functor.Identity.Identity [PhonemeData.Place])
  {- Unfolding: (Data.Random.Extras.choice
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeData.Place])
                   PhonemeGen.makePlaces7) -}
37240856c30208d792599cb41e1af755
  makePlaces_eta1 :: [PhonemeData.Place]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeData.Place
                   PhonemeData.GLOTTAL
                   (GHC.Types.[] @ PhonemeData.Place)) -}
22b14c536bc354cf6422fb0dcbe4f7f8
  makePlaces_eta10 ::
    Data.RVar.RVarT
      Data.Functor.Identity.Identity
      (Data.RVar.RVarT
         Data.Functor.Identity.Identity [PhonemeData.Place])
  {- Unfolding: (Data.Random.Extras.choice
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeData.Place])
                   PhonemeGen.makePlaces56) -}
bc34079827455cbcc1fe7de030041508
  makePlaces_eta11 :: [PhonemeData.Place]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeData.Place
                   PhonemeData.BILABIAL
                   PhonemeGen.makePlaces60) -}
07bbe9d2d1802ba4e9fca72d7c701cda
  makePlaces_eta12 :: [PhonemeData.Place]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeData.Place
                   PhonemeData.LABIAL
                   (GHC.Types.[] @ PhonemeData.Place)) -}
1fab7045e5bb1e25ef85665077f1e35c
  makePlaces_eta2 :: [PhonemeData.Place]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeData.Place
                   PhonemeData.LARYNGEAL
                   (GHC.Types.[] @ PhonemeData.Place)) -}
9c58d09ca5d0b91ed41e7f8dde762d75
  makePlaces_eta3 ::
    Data.RVar.RVarT
      Data.Functor.Identity.Identity
      (Data.RVar.RVarT
         Data.Functor.Identity.Identity [PhonemeData.Place])
  {- Unfolding: (Data.Random.Extras.choice
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeData.Place])
                   PhonemeGen.makePlaces24) -}
169a598c521bc39acf19632a75543ef8
  makePlaces_eta4 :: [PhonemeData.Place]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeData.Place
                   PhonemeData.UVULAR
                   (GHC.Types.[] @ PhonemeData.Place)) -}
be7e4765f9ce9a0d8cf34c98b4864649
  makePlaces_eta5 :: [PhonemeData.Place]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeData.Place
                   PhonemeData.VELAR
                   (GHC.Types.[] @ PhonemeData.Place)) -}
d9243c104b9d59088bdd56606edcb98c
  makePlaces_eta6 :: [PhonemeData.Place]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeData.Place
                   PhonemeData.DORSAL
                   (GHC.Types.[] @ PhonemeData.Place)) -}
0fefd78b610ee15e6751cc3caf212968
  makePlaces_eta7 ::
    Data.RVar.RVarT
      Data.Functor.Identity.Identity
      (Data.RVar.RVarT
         Data.Functor.Identity.Identity [PhonemeData.Place])
  {- Unfolding: (Data.Random.Extras.choice
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeData.Place])
                   PhonemeGen.makePlaces40) -}
4e780fd89650f51cfee9e44f03a2eb2a
  makePlaces_eta8 :: [PhonemeData.Place]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeData.Place
                   PhonemeData.RETROFLEX
                   (GHC.Types.[] @ PhonemeData.Place)) -}
bd64056facb6290a16a2e5f0c681cf6a
  makePlaces_eta9 :: [PhonemeData.Place]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeData.Place
                   PhonemeData.CORONAL
                   (GHC.Types.[] @ PhonemeData.Place)) -}
b340315d18114a2f477ccd3c03c2b195
  makePlaces_go :: [[PhonemeData.Place]] -> [PhonemeData.Place]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
0ad7d0a5124f5ea7a15cd09fc1d676bd
  makePlaces_go1 :: [[PhonemeData.Place]] -> [PhonemeData.Place]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
c9af3af374c342164a07e9315a2fc8af
  makePlaces_go2 :: [[PhonemeData.Place]] -> [PhonemeData.Place]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
0249044be05f138135f5036ee8ee7247
  makePlaces_go3 :: [[PhonemeData.Place]] -> [PhonemeData.Place]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
91053cb864305776802177b904d8b789
  makePlaces_m1 ::
    Data.RVar.RVarT Data.Functor.Identity.Identity GHC.Types.Int
  {- Unfolding: (Data.Random.Distribution.Uniform.$w$sintegralUniform'
                   @ Data.Functor.Identity.Identity
                   2
                   3) -}
02bc1ae3edbe8dc00fc40795d0bee5fe
  makeRoundedneses :: Data.RVar.RVar [PhonemeData.Roundedness]
  {- Unfolding: (Data.Random.Extras.choice
                   @ [PhonemeData.Roundedness]
                   PhonemeGen.makeRoundedneses1) -}
80468114dde23e1d53526b68405f2c48
  makeRoundedneses1 :: [[PhonemeData.Roundedness]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeData.Roundedness]
                   PhonemeGen.makeRoundedneses5
                   PhonemeGen.makeRoundedneses2) -}
6a3a48e40b460fca2233804ecf8b377c
  makeRoundedneses2 :: [[PhonemeData.Roundedness]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeData.Roundedness]
                   PhonemeGen.makeRoundedneses3
                   (GHC.Types.[] @ [PhonemeData.Roundedness])) -}
cf26883d521558fabbe2e4bae3b105f0
  makeRoundedneses3 :: [PhonemeData.Roundedness]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeData.Roundedness
                   PhonemeData.UNROUNDED
                   PhonemeGen.makeRoundedneses4) -}
92e6e4bf5bdb48ee1310fb98e764ad2c
  makeRoundedneses4 :: [PhonemeData.Roundedness]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeData.Roundedness
                   PhonemeData.ROUNDED
                   (GHC.Types.[] @ PhonemeData.Roundedness)) -}
d4f6da7c3f3806efed0ed4c28ff499e3
  makeRoundedneses5 :: [PhonemeData.Roundedness]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeData.Roundedness
                   PhonemeData.DEFAULT
                   (GHC.Types.[] @ PhonemeData.Roundedness)) -}
2bc825df2e49c5626cc7c0a55b5043e0
  makeVowels ::
    [PhonemeData.Height]
    -> [PhonemeData.Backness]
    -> [PhonemeData.Roundedness]
    -> [PhonemeData.Length]
    -> Data.RVar.RVar [PhonemeData.Phoneme]
  {- Arity: 4, Strictness: <L,1*U><L,U><L,U><L,U>,
     Unfolding: (\ heights :: [PhonemeData.Height]
                   backs :: [PhonemeData.Backness]
                   rounds :: [PhonemeData.Roundedness]
                   lengths :: [PhonemeData.Length] ->
                 let {
                   eta :: [PhonemeData.Phoneme]
                   = letrec {
                       go2 :: [PhonemeData.Height] -> [PhonemeData.Phoneme]
                         {- Arity: 1, Strictness: <S,1*U> -}
                       = \ ds :: [PhonemeData.Height] ->
                         case ds of wild {
                           [] -> GHC.Types.[] @ PhonemeData.Phoneme
                           : y ys
                           -> let {
                                ys1 :: [PhonemeData.Phoneme] = go2 ys
                              } in
                              letrec {
                                go3 :: [PhonemeData.Backness] -> [PhonemeData.Phoneme]
                                  {- Arity: 1, Strictness: <S,1*U> -}
                                = \ ds1 :: [PhonemeData.Backness] ->
                                  case ds1 of wild1 {
                                    [] -> ys1
                                    : y1 ys2
                                    -> let {
                                         z :: [PhonemeData.Phoneme] = go3 ys2
                                       } in
                                       letrec {
                                         go4 :: [PhonemeData.Roundedness] -> [PhonemeData.Phoneme]
                                           {- Arity: 1, Strictness: <S,1*U> -}
                                         = \ ds2 :: [PhonemeData.Roundedness] ->
                                           case ds2 of wild2 {
                                             [] -> z
                                             : y2 ys3
                                             -> let {
                                                  z1 :: [PhonemeData.Phoneme] = go4 ys3
                                                } in
                                                letrec {
                                                  go5 :: [PhonemeData.Length]
                                                         -> [PhonemeData.Phoneme]
                                                    {- Arity: 1, Strictness: <S,1*U> -}
                                                  = \ ds3 :: [PhonemeData.Length] ->
                                                    case ds3 of wild3 {
                                                      [] -> z1
                                                      : y3 ys4
                                                      -> GHC.Types.:
                                                           @ PhonemeData.Phoneme
                                                           (PhonemeData.Vowel
                                                              y
                                                              y1
                                                              y2
                                                              y3
                                                              (PhonemeGen.retrieveVSymbol
                                                                 y
                                                                 y1
                                                                 y2
                                                                 y3))
                                                           (go5 ys4) }
                                                } in
                                                go5 lengths }
                                       } in
                                       go4 rounds }
                              } in
                              go3 backs }
                     } in
                     go2 heights
                 } in
                 (\ @ b
                    eta1 :: [PhonemeData.Phoneme] -> b
                    eta2 :: forall a6.
                            Control.Monad.Prompt.Lift
                              Data.Random.Source.Internal.Prim.Prim
                              Data.Functor.Identity.Identity
                              a6
                            -> (a6 -> b) -> b ->
                  Data.RVar.$fApplicativeRVarT3
                    @ Data.Functor.Identity.Identity
                    @ [PhonemeData.Phoneme]
                    eta
                    @ b
                    eta1
                    eta2)
                   `cast`
                 (Trans
                      (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                <Control.Monad.Prompt.Lift
                                   Data.Random.Source.Internal.Prim.Prim
                                   Data.Functor.Identity.Identity>_R
                                <[PhonemeData.Phoneme]>_R))
                      (Trans
                           (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                     <Data.Random.Source.Internal.Prim.Prim>_R
                                     <Data.Functor.Identity.Identity>_R))
                           (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeData.Phoneme]>_N))) -}
18f850eeba8aeffb3449f64a663b2d3f
  retrieveVSymbol ::
    PhonemeData.Height
    -> PhonemeData.Backness
    -> PhonemeData.Roundedness
    -> PhonemeData.Length
    -> GHC.Base.String
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U> -}
"SPEC/PhonemeGen $fEq(,) @ Place @ Manner" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                     PhonemeData.Place
                                                           $dEq1 :: GHC.Classes.Eq
                                                                      PhonemeData.Manner
  GHC.Classes.$fEq(,) @ PhonemeData.Place
                      @ PhonemeData.Manner
                      $dEq
                      $dEq1
  = PhonemeGen.$s$fEq(,)
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

