
==================== FINAL INTERFACE ====================
2016-11-10 18:42:11.861281 UTC

interface conla_1eA9qWUPH9nBowcXqqaV8r:MorphologyGen 7103
  interface hash: 2a252dfb56f17adecfb256086fc25930
  ABI hash: 01a79c2d8339eb1799781f6d15e27388
  export-list hash: 8b2fd2afd5faf171830833d5dda287d0
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 962af636f8e927040c7daa9c21457292
  sig of: Nothing
  used TH splices: False
  where
exports:
  MorphologyGen.cleanGrammarSys
  MorphologyGen.makeLexicalInflection
module dependencies: GrammarData InflectionData InflectionGen
                     OtherData PhonemeData PhonemeGen PhonotacticsGen WordGen
package dependencies: MonadPrompt-1.0.0.5@Monad_5vpMHuuRBzi4bKjpRN3A9L
                      MonadRandom-0.4.2.3@Monad_I7tEJH7vOtsKQS7CpG48fz
                      array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA base-4.8.2.0
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59
                      erf-2.0.0.0@erf_6l78BnvLL4b2mWYp3HJJxX
                      flexible-defaults-0.0.1.2@flexi_70LqvhG3vbS8bRvV8pHtMk
                      ghc-prim-0.4.0.0 integer-gmp-1.0.0.0
                      math-functions-0.1.7.0@mathf_BN6S7j0ar3LC4TsnYu0us5
                      mersenne-random-pure64-0.2.0.5@merse_42koSxEhmjwBS69WXi19xI
                      monad-loops-0.4.3@monad_LQiHRUYhFhYBU7nOOWDOrb
                      mtl-2.2.1@mtl_Aue4leSeVkpKLsfHIV51E8
                      mwc-random-0.13.4.0@mwcra_0lrQ1SkkNA85sa8eZ98xQk
                      old-locale-1.0.0.7@oldlo_7h2Gx6mVPJ5Gheca8j9Mpe
                      old-time-1.1.0.3@oldti_JVjJvknZJ0JKghfag2Jw2L
                      pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC
                      primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3
                      random-extras-0.19@rando_11jAc932BDRD7ydjCrRr4L
                      random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW
                      random-1.1@rando_9Kgekc9yEaLHLNUuw6paWL
                      random-shuffle-0.0.4@rando_9kOz9tEn1526ShtWz8x59X
                      random-fu-0.2.7.0@rando_HO0DW1nA2fDCxZJ62mvJHr
                      rvar-0.2.0.3@rvar_HDSuhGFxwNTDX4EfF6w8WG
                      stateref-0.3@state_KptOBHsY85L8YzpDAos2Hi
                      stm-2.4.4.1@stm_EyxFXFfnfY05IrjGaqCxeD
                      syb-0.6@syb_4kccWaTe3QZLxAMQYKgEyE template-haskell-2.10.0.0
                      th-extras-0.0.0.4@thext_LRY1RUMy7ShLl2tqhMyHdO
                      time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn
                      transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF
                      vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln
orphans: MonadRandom-0.4.2.3@Monad_I7tEJH7vOtsKQS7CpG48fz:Control.Monad.Random
         base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         conla_1eA9qWUPH9nBowcXqqaV8r:InflectionData
         mersenne-random-pure64-0.2.0.5@merse_42koSxEhmjwBS69WXi19xI:System.Random.Mersenne.Pure64
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source.IO
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source.MWC
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source.PureMT
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source.StdGen
         stateref-0.3@state_KptOBHsY85L8YzpDAos2Hi:Data.StateRef.Instances
         stateref-0.3@state_KptOBHsY85L8YzpDAos2Hi:Data.StateRef.Instances.STM
         stm-2.4.4.1@stm_EyxFXFfnfY05IrjGaqCxeD:Control.Monad.STM
         syb-0.6@syb_4kccWaTe3QZLxAMQYKgEyE:Data.Generics.Instances
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Calendar.Gregorian
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Format.Parse
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.LocalTime.LocalTime
         transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.Trans.Error
         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Fusion.Bundle
         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Sequence
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
                         mwc-random-0.13.4.0@mwcra_0lrQ1SkkNA85sa8eZ98xQk:System.Random.MWC
                         pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3:Control.Monad.Primitive
                         template-haskell-2.10.0.0:Language.Haskell.TH.Syntax
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Primitive
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed.Base
import  -/  base-4.8.2.0:Control.Monad 480c5067477275068c9b98be08410df9
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:Data.Functor 5c701b0af1708f0192a25dfe14ce6274
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  GrammarData f95f1692a0522ba4f2ab8e4cff233a36
  exports: 0e046bef964de644bb5bb5f62ec92514
import  -/  InflectionData 316dc8b65cfd739af6e59de9ad59bbc6
  exports: 24640cf62a9c3b7f4d5b0c718698bf0c
  Animacy 0805e2c872c441491fbbd819376f13b8
  Aspect 851bcc3c94895d395e7cdf9501dbfb00
  Case f0a3d2a3107908d84564bc0108b3c56f
  Definiteness 250913a6cb1bc19b5a2a47309bfa066c
  Evidentiality cdbf36d6698b96caa0bed6ad294bfb83
  Express 0c930380d6cf4f3d845cdce086abbc44
  Express 16ae30a99f963c81137d7828dad80939
  Gender a3623d5adfe047fe3ed20dca1c56d9df
  Honorific 9621aad11f276ef3a5a55be34fb30507
  InflectionSystem 340b506daec6555591e5534716353ebf
  LexCat 669f64eab1a11feac3c6144dd5c31025
  Manifest be5dbb905eaa61c91070df8e7b415c52
  Manifest ceb3098f5042182adffdb975609a3c68
  ManifestSystem 44c7a68715dd0f10cb88131d9ccc552a
  ManifestSystem 2dfbbd1074217167272ae1c4beb86ae1
  ManifestType af5ddf409df7e34b7ae5f58c0bd0fff6
  Mood 4e999fb9fa6728ec3df19bdd28482ccf
  NoExpress 071999356a33bac64580dd8491d8f357
  NoManifest a1000e139906e0b5e4ac8b6c897a10ea
  Number 5983d4e902f20ca491bfcf4389614668
  Particle b6dac7eb598cb10dac67044916f016c5
  Person 8962065c67c1705ac692fcc8d9210bcd
  Polarity eac2f82847484b9a87105d0693a7c5e1
  Prefix 8590bd569f8bb6d038732e2c07f87092
  Specificity 697b496d198df68093293e68c7d50d9d
  Suffix 38bb50ed0298517a03588243ef98ac95
  Tense b52863b70f3cc5626b7d1db2a6c4ef40
  Topic 39f87e694fb863c1c8c61df134a24729
  Transitivity 57945260416d71dc87e31cac669b161f
  Voice 729607927630d1e92c199129334472f1
  Volition fed3c8348b016bc886742bbd8b88b80d
  aniSys 367804e1af6d701e2096dafd5533118b
  aspSys e9e7bd71dd2a785cb31526ef55b822bf
  casSys 53f570e830294c8ef1f76287bc8fee75
  defSys 39ed9cb2acfd9c2753c4d255e079ca33
  eviSys 16a8ff4f3aeb46f813a259601251af2a
  genSys 23c095a561aedbda7232209e41ccd3b8
  honSys 831fcde3d22057fb7460c8af4d9ab10c
  mooSys 7e4993890e9cffc9f67059af28200bf6
  numSys d8ca6925d804e3eb3f0fe14c72e821b0
  perSys 6b25af69b2baed03a467998ec509d392
  polSys 6b03938dae2419f01636f6b46255ec51
  speSys 8fe6a689cbb82088761f1cb46b491a37
  tenSys f10468fa127c3da042273349447f9f1d
  topSys d0e505630351aeb35518213bbfa7eb6f
  traSys b87326eed2ea23696a3263a9e6a566d7
  voiSys 3508299f499dacd346d5476b7095ae2b
  volSys 0c538a57205dea6a225cb2d1e520dfee
import  -/  InflectionGen 709f08f023dd604cad4af4d3165b22fa
  exports: b233a17c739fa900a40a2a419fd5dc83
import  -/  PhonemeData 408b6488aa28ce44ef05793241013f6f
  exports: c711b36c9b7415c6d00ea9681146dbcb
  Phoneme 78c280a9bf84c920fdcdc1bfa9515e2f
import  -/  WordGen df6d57f99346b4db10ec1e481003cffb
  exports: caa25443cdbc9cab7d4ddf5c6024201b
  makeMorpheme 90c96d6dac5552cfb4cafae5fadb8741
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  random-extras-0.19@rando_11jAc932BDRD7ydjCrRr4L:Data.Random.Extras 5dc1684f88e3f2655bfb5d7aca60bf5c
import  -/  random-fu-0.2.7.0@rando_HO0DW1nA2fDCxZJ62mvJHr:Data.Random 355d6844bb1b3189cb19ec0007f6f130
import  -/  rvar-0.2.0.3@rvar_HDSuhGFxwNTDX4EfF6w8WG:Data.RVar 9b7fbdb5f1778e76b8a65f45a17cccb1
2503a01e02577653a1bdb8cfa00f0b2f
  $sreplicateM2 ::
    [Data.RVar.RVarT Data.Functor.Identity.Identity a3]
    -> forall b.
       ([a3] -> b)
       -> (forall a.
           Control.Monad.Prompt.Lift
             Data.Random.Source.Internal.Prim.Prim
             Data.Functor.Identity.Identity
             a
           -> (a -> b) -> b)
       -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,C(U)><L,U> -}
c1e5d8e03a52c14de0945acae9b739cf
  $wmakeLexicalInflection ::
    [PhonemeData.Phoneme]
    -> [[PhonemeData.Phoneme]]
    -> InflectionData.InflectionSystem
    -> InflectionData.LexCat
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> Data.RVar.RVar
         (InflectionData.LexCat,
          [InflectionData.ManifestSystem],
          [InflectionData.ManifestSystem],
          [InflectionData.ManifestSystem])
  {- Arity: 7,
     Strictness: <L,U><L,U><L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U><L,1*U(U)><L,1*U(U)><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ w :: [PhonemeData.Phoneme]
                   w1 :: [[PhonemeData.Phoneme]]
                   w2 :: InflectionData.InflectionSystem
                   ww :: InflectionData.LexCat
                   ww1 :: GHC.Types.Int
                   ww2 :: GHC.Types.Int
                   ww3 :: GHC.Types.Int ->
                 let {
                   m1 :: Data.RVar.RVarT
                           Data.Functor.Identity.Identity [InflectionData.ManifestSystem]
                   = case ww1 of ww4 { GHC.Types.I# ww5 ->
                     MorphologyGen.$wmakeParticleSystems ww ww5 w w1 w2 }
                 } in
                 let {
                   m2 :: Data.RVar.RVarT
                           Data.Functor.Identity.Identity [InflectionData.ManifestSystem]
                   = case ww2 of ww4 { GHC.Types.I# ww5 ->
                     MorphologyGen.$wmakePrefixSystems ww ww5 w w1 w2 }
                 } in
                 let {
                   m4 :: Data.RVar.RVarT
                           Data.Functor.Identity.Identity [InflectionData.ManifestSystem]
                   = case ww3 of ww4 { GHC.Types.I# ww5 ->
                     MorphologyGen.$wmakeSuffixSystems ww ww5 w w1 w2 }
                 } in
                 (\ @ b1
                    eta :: (InflectionData.LexCat,
                            [InflectionData.ManifestSystem],
                            [InflectionData.ManifestSystem],
                            [InflectionData.ManifestSystem])
                           -> b1
                    eta1 :: forall a6.
                            Control.Monad.Prompt.Lift
                              Data.Random.Source.Internal.Prim.Prim
                              Data.Functor.Identity.Identity
                              a6
                            -> (a6 -> b1) -> b1 ->
                  m1
                    `cast`
                  (Trans
                       (Trans
                            (Data.RVar.NTCo:RVarT[0] <Data.Functor.Identity.Identity>_N)
                            (Control.Monad.Prompt.NTCo:PromptT[0]
                                 <Data.Random.Source.Internal.Prim.Prim>_R
                                 <Data.Functor.Identity.Identity>_R) <[InflectionData.ManifestSystem]>_N)
                       (Control.Monad.Prompt.NTCo:Prompt[0]
                            <Control.Monad.Prompt.Lift
                               Data.Random.Source.Internal.Prim.Prim
                               Data.Functor.Identity.Identity>_R
                            <[InflectionData.ManifestSystem]>_R))
                    @ b1
                    (\ x :: [InflectionData.ManifestSystem] ->
                     case x of x1 { DEFAULT ->
                     m2
                       `cast`
                     (Trans
                          (Trans
                               (Data.RVar.NTCo:RVarT[0] <Data.Functor.Identity.Identity>_N)
                               (Control.Monad.Prompt.NTCo:PromptT[0]
                                    <Data.Random.Source.Internal.Prim.Prim>_R
                                    <Data.Functor.Identity.Identity>_R) <[InflectionData.ManifestSystem]>_N)
                          (Control.Monad.Prompt.NTCo:Prompt[0]
                               <Control.Monad.Prompt.Lift
                                  Data.Random.Source.Internal.Prim.Prim
                                  Data.Functor.Identity.Identity>_R
                               <[InflectionData.ManifestSystem]>_R))
                       @ b1
                       (\ x2 :: [InflectionData.ManifestSystem] ->
                        case x2 of x3 { DEFAULT ->
                        m4
                          `cast`
                        (Trans
                             (Trans
                                  (Data.RVar.NTCo:RVarT[0] <Data.Functor.Identity.Identity>_N)
                                  (Control.Monad.Prompt.NTCo:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R) <[InflectionData.ManifestSystem]>_N)
                             (Control.Monad.Prompt.NTCo:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[InflectionData.ManifestSystem]>_R))
                          @ b1
                          (\ x4 :: [InflectionData.ManifestSystem] ->
                           case x4 of x5 { DEFAULT -> eta (ww, x1, x3, x5) })
                          eta1 })
                       eta1 })
                    eta1)
                   `cast`
                 (Trans
                      (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                <Control.Monad.Prompt.Lift
                                   Data.Random.Source.Internal.Prim.Prim
                                   Data.Functor.Identity.Identity>_R
                                <(InflectionData.LexCat,
                                  [InflectionData.ManifestSystem],
                                  [InflectionData.ManifestSystem],
                                  [InflectionData.ManifestSystem])>_R))
                      (Trans
                           (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                     <Data.Random.Source.Internal.Prim.Prim>_R
                                     <Data.Functor.Identity.Identity>_R))
                           (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <(InflectionData.LexCat,
                                                                                                [InflectionData.ManifestSystem],
                                                                                                [InflectionData.ManifestSystem],
                                                                                                [InflectionData.ManifestSystem])>_N))) -}
f5a465847ff46ae90b934e174a0ea6fe
  $wmakeParticleSystems ::
    InflectionData.LexCat
    -> GHC.Prim.Int#
    -> [PhonemeData.Phoneme]
    -> [[PhonemeData.Phoneme]]
    -> InflectionData.InflectionSystem
    -> Data.RVar.RVar [InflectionData.ManifestSystem]
  {- Arity: 5,
     Strictness: <L,U><S,U><L,U><L,U><L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: [0] -}
1606d2384d6b074d52130ec35275edbd
  $wmakePrefixSystems ::
    InflectionData.LexCat
    -> GHC.Prim.Int#
    -> [PhonemeData.Phoneme]
    -> [[PhonemeData.Phoneme]]
    -> InflectionData.InflectionSystem
    -> Data.RVar.RVar [InflectionData.ManifestSystem]
  {- Arity: 5,
     Strictness: <L,U><S,U><L,U><L,U><L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: [0] -}
90a7a24d6b2e2bc9882459f4434b8e2b
  $wmakeSuffixSystems ::
    InflectionData.LexCat
    -> GHC.Prim.Int#
    -> [PhonemeData.Phoneme]
    -> [[PhonemeData.Phoneme]]
    -> InflectionData.InflectionSystem
    -> Data.RVar.RVar [InflectionData.ManifestSystem]
  {- Arity: 5,
     Strictness: <L,U><S,U><L,U><L,U><L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: [0] -}
3581c42a3e0dd6b86e90b8b0b5eee6c3
  cleanGrammarSys ::
    InflectionData.InflectionSystem
    -> InflectionData.LexCat
    -> InflectionData.ManifestType
    -> GHC.Types.Int
    -> ([InflectionData.Express InflectionData.Gender],
        [InflectionData.Express InflectionData.Animacy],
        [InflectionData.Express InflectionData.Case],
        [InflectionData.Express InflectionData.Number],
        [InflectionData.Express InflectionData.Definiteness],
        [InflectionData.Express InflectionData.Specificity],
        [InflectionData.Express InflectionData.Topic],
        [InflectionData.Express InflectionData.Person],
        [InflectionData.Express InflectionData.Honorific],
        [InflectionData.Express InflectionData.Polarity],
        [InflectionData.Express InflectionData.Tense],
        [InflectionData.Express InflectionData.Aspect],
        [InflectionData.Express InflectionData.Mood],
        [InflectionData.Express InflectionData.Voice],
        [InflectionData.Express InflectionData.Evidentiality],
        [InflectionData.Express InflectionData.Transitivity],
        [InflectionData.Express InflectionData.Volition])
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)><L,U><L,U><L,U(U)> -}
43ef856a9e644e6227fa03b7a1762821
  makeLexicalInflection ::
    [PhonemeData.Phoneme]
    -> [[PhonemeData.Phoneme]]
    -> InflectionData.InflectionSystem
    -> (InflectionData.LexCat,
        GHC.Types.Int,
        GHC.Types.Int,
        GHC.Types.Int)
    -> Data.RVar.RVar
         (InflectionData.LexCat,
          [InflectionData.ManifestSystem],
          [InflectionData.ManifestSystem],
          [InflectionData.ManifestSystem])
  {- Arity: 4,
     Strictness: <L,U><L,U><L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U(U,1*U(U),1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: [PhonemeData.Phoneme]
                   w1 :: [[PhonemeData.Phoneme]]
                   w2 :: InflectionData.InflectionSystem
                   w3 :: (InflectionData.LexCat,
                          GHC.Types.Int,
                          GHC.Types.Int,
                          GHC.Types.Int) ->
                 case w3 of ww { (,,,) ww1 ww2 ww3 ww4 ->
                 MorphologyGen.$wmakeLexicalInflection w w1 w2 ww1 ww2 ww3 ww4 }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

