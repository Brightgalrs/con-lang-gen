
==================== FINAL INTERFACE ====================
2016-11-27 12:05:50.9317 UTC

interface conla_1eA9qWUPH9nBowcXqqaV8r:MorphologyGen 7103
  interface hash: 93ace3b8655466782db9f251d135c4e8
  ABI hash: 01942de38c3aff9c7ed6a59b435af702
  export-list hash: 8de0d74896901fa8074712836a786dd5
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 962af636f8e927040c7daa9c21457292
  sig of: Nothing
  used TH splices: False
  where
exports:
  MorphologyGen.cleanGrammarSys
  MorphologyGen.makeLexicalInflection
module dependencies: GrammarData InflectionData InflectionGen
                     OtherData PhonemeData PhonemeGen PhonotacticsGen WordGen
package dependencies: MonadPrompt-1.0.0.5@Monad_5vpMHuuRBzi4bKjpRN3A9L
                      MonadRandom-0.4.2.3@Monad_I7tEJH7vOtsKQS7CpG48fz
                      array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA base-4.8.2.0
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59
                      erf-2.0.0.0@erf_6l78BnvLL4b2mWYp3HJJxX
                      flexible-defaults-0.0.1.2@flexi_70LqvhG3vbS8bRvV8pHtMk
                      ghc-prim-0.4.0.0 integer-gmp-1.0.0.0
                      math-functions-0.1.7.0@mathf_BN6S7j0ar3LC4TsnYu0us5
                      mersenne-random-pure64-0.2.0.5@merse_42koSxEhmjwBS69WXi19xI
                      monad-loops-0.4.3@monad_LQiHRUYhFhYBU7nOOWDOrb
                      mtl-2.2.1@mtl_Aue4leSeVkpKLsfHIV51E8
                      mwc-random-0.13.4.0@mwcra_0lrQ1SkkNA85sa8eZ98xQk
                      old-locale-1.0.0.7@oldlo_7h2Gx6mVPJ5Gheca8j9Mpe
                      old-time-1.1.0.3@oldti_JVjJvknZJ0JKghfag2Jw2L
                      pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC
                      primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3
                      random-extras-0.19@rando_11jAc932BDRD7ydjCrRr4L
                      random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW
                      random-1.1@rando_9Kgekc9yEaLHLNUuw6paWL
                      random-shuffle-0.0.4@rando_9kOz9tEn1526ShtWz8x59X
                      random-fu-0.2.7.0@rando_HO0DW1nA2fDCxZJ62mvJHr
                      rvar-0.2.0.3@rvar_HDSuhGFxwNTDX4EfF6w8WG
                      stateref-0.3@state_KptOBHsY85L8YzpDAos2Hi
                      stm-2.4.4.1@stm_EyxFXFfnfY05IrjGaqCxeD
                      syb-0.6@syb_4kccWaTe3QZLxAMQYKgEyE template-haskell-2.10.0.0
                      th-extras-0.0.0.4@thext_LRY1RUMy7ShLl2tqhMyHdO
                      time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn
                      transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF
                      vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln
orphans: MonadRandom-0.4.2.3@Monad_I7tEJH7vOtsKQS7CpG48fz:Control.Monad.Random
         base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         conla_1eA9qWUPH9nBowcXqqaV8r:InflectionData
         mersenne-random-pure64-0.2.0.5@merse_42koSxEhmjwBS69WXi19xI:System.Random.Mersenne.Pure64
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source.IO
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source.MWC
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source.PureMT
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source.StdGen
         stateref-0.3@state_KptOBHsY85L8YzpDAos2Hi:Data.StateRef.Instances
         stateref-0.3@state_KptOBHsY85L8YzpDAos2Hi:Data.StateRef.Instances.STM
         stm-2.4.4.1@stm_EyxFXFfnfY05IrjGaqCxeD:Control.Monad.STM
         syb-0.6@syb_4kccWaTe3QZLxAMQYKgEyE:Data.Generics.Instances
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Calendar.Gregorian
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Format.Parse
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.LocalTime.LocalTime
         transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.Trans.Error
         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Fusion.Bundle
         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Sequence
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
                         mwc-random-0.13.4.0@mwcra_0lrQ1SkkNA85sa8eZ98xQk:System.Random.MWC
                         pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3:Control.Monad.Primitive
                         template-haskell-2.10.0.0:Language.Haskell.TH.Syntax
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Primitive
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed.Base
import  -/  base-4.8.2.0:Control.Monad 480c5067477275068c9b98be08410df9
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:Data.Functor 5c701b0af1708f0192a25dfe14ce6274
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  GrammarData 8ac8d86b6b864664f180483e73ce823b
  exports: 5138522a0c1403d2fee44ad2a2f3e5a1
import  -/  InflectionData 1d3c9a42a800e5c12f0b2505845bd490
  exports: 14704a3a2d793893d80490c9a5c3fd3e
  Animacy 91fb0b41f9ef14c662c70b3629b6b5fe
  Aspect 8bbea98a3b619c1fafa2f31c2f747273
  Case 6c10cc277989f00ac96ff5f8d0b9d977
  Definiteness 69e12afea565be2617200bf9671a6c0d
  Evidentiality 1261593b396b3f8b4367998b51bf6d8a
  Express 1ae0c46a8b58a514f38dd5171a3e67a3
  Express 7e958650c7791002a2540390e3aca90e
  Gender e443e52c146978100c75258afee70577
  Honorific 9f709bf4194f93c1f39907f3dcd0aede
  InflectionSystem d140bda0afaf2a222d43f8ac1fd40fcf
  LexCat 406c10c56e8fc899b6f590771b3372e0
  Manifest 114198613dd9ad6edd0d798879c2e985
  Manifest 402c727bb1d5614cf0c6243ee3fa7337
  ManifestSystem 68733e867c197ec8e0576f4ed6aafe4d
  ManifestSystem d00ca9fc0955f2d18fcf424b683d5934
  ManifestType 339a9cc5bd8d02624186a930ed6d9c71
  Mood 987f478754e08db3236fd0a739247bf9
  NoExpress 749a51da58ebbc7f9683e59a2088dd1a
  NoManifest ef9f93e4a4d3f65314ca388f1e754598
  Number 111b9dd7881655400daece83d7690898
  Particle 6ce29bede09feb22319ca6ecd1e3f608
  Person cbc274f5b3d6239101cd9764b7773be5
  Polarity 961c5eb0bc4c139961b0a440a23b769f
  Prefix 6b0d4faa751777a71e8042659ab6b9f5
  Specificity 6c3fc67424127bb4feb2d92b23a30da0
  Suffix 7b772f49c77983d500993b93b36cc935
  Tense 5f476bea2da27cbe0ffe1e5cde3d9551
  Topic f2502f7485a2c7bc47bb080f20b26aeb
  Transitivity 8463dae3116062b076dc25e0f6b8c749
  Voice 66f849eb0df273279725c8472ced02cc
  Volition 3a73fa2d976f240c7ba768b809a25328
  aniSys 77b3a4432edfccebb3b22d1c9b24ac4d
  aspSys b8fda4d4df735d7364c18984ec33d22d
  casSys 0742e33feebcc2aedfa503cbac8da46c
  defSys 32998dbfeb4e34fb6c5d335c07211467
  eviSys bf96f69c433d29648ef52d67868a021f
  genSys 9381ca4fedbf8ceed1ccbf87d7c5ea11
  honSys 0d571c6678cc881fd60d97ead23d7dfc
  mooSys d90942dd715cf7190a76153b176213fb
  numSys e3f0341cfb574429476d3eef73dc9b22
  perSys b556a32261e8c80f3f8a544ec8ca9305
  polSys dd1e1dde879856f37659781ab72a7cd9
  speSys db725844404908ae2faa7ea16c653f57
  tenSys a84f08c83ed8f33a17989dcde7856121
  topSys 94ae191c7be8b8307ec5a07176b30931
  traSys 17d7b2e9ec588d6bd99bab7f098f36f7
  voiSys 629ad62232c211277f83c5bfbea3bcb1
  volSys 5fdcf2bef393c39136e0bea7f04d5cde
import  -/  InflectionGen 9e818894ecef9e42111de8410cca4bc4
  exports: 9827b70a94b04c8621de93f7b6ea3c79
import  -/  PhonemeData 408b6488aa28ce44ef05793241013f6f
  exports: c711b36c9b7415c6d00ea9681146dbcb
  Phoneme 78c280a9bf84c920fdcdc1bfa9515e2f
import  -/  WordGen 6d1731145d8f1940f5f2d3ba043fbabf
  exports: f463cb1e49f3795359af4ee853c2eb03
  makeMorpheme 90c96d6dac5552cfb4cafae5fadb8741
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  random-extras-0.19@rando_11jAc932BDRD7ydjCrRr4L:Data.Random.Extras 5dc1684f88e3f2655bfb5d7aca60bf5c
import  -/  random-fu-0.2.7.0@rando_HO0DW1nA2fDCxZJ62mvJHr:Data.Random 355d6844bb1b3189cb19ec0007f6f130
import  -/  rvar-0.2.0.3@rvar_HDSuhGFxwNTDX4EfF6w8WG:Data.RVar 9b7fbdb5f1778e76b8a65f45a17cccb1
2503a01e02577653a1bdb8cfa00f0b2f
  $sreplicateM2 ::
    [Data.RVar.RVarT Data.Functor.Identity.Identity a3]
    -> forall b.
       ([a3] -> b)
       -> (forall a.
           Control.Monad.Prompt.Lift
             Data.Random.Source.Internal.Prim.Prim
             Data.Functor.Identity.Identity
             a
           -> (a -> b) -> b)
       -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,C(U)><L,U> -}
3f7062196b281c9cc8ca9404b034cb25
  $wmakeLexicalInflection ::
    [PhonemeData.Phoneme]
    -> [[PhonemeData.Phoneme]]
    -> InflectionData.InflectionSystem
    -> InflectionData.LexCat
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> Data.RVar.RVar
         (InflectionData.LexCat,
          [InflectionData.ManifestSystem],
          [InflectionData.ManifestSystem],
          [InflectionData.ManifestSystem])
  {- Arity: 7,
     Strictness: <L,U><L,U><L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U><L,1*U(U)><L,1*U(U)><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ w :: [PhonemeData.Phoneme]
                   w1 :: [[PhonemeData.Phoneme]]
                   w2 :: InflectionData.InflectionSystem
                   ww :: InflectionData.LexCat
                   ww1 :: GHC.Types.Int
                   ww2 :: GHC.Types.Int
                   ww3 :: GHC.Types.Int ->
                 let {
                   m1 :: Data.RVar.RVarT
                           Data.Functor.Identity.Identity [InflectionData.ManifestSystem]
                   = case ww1 of ww4 { GHC.Types.I# ww5 ->
                     MorphologyGen.$wmakeParticleSystems ww ww5 w w1 w2 }
                 } in
                 let {
                   m2 :: Data.RVar.RVarT
                           Data.Functor.Identity.Identity [InflectionData.ManifestSystem]
                   = case ww2 of ww4 { GHC.Types.I# ww5 ->
                     MorphologyGen.$wmakePrefixSystems ww ww5 w w1 w2 }
                 } in
                 let {
                   m4 :: Data.RVar.RVarT
                           Data.Functor.Identity.Identity [InflectionData.ManifestSystem]
                   = case ww3 of ww4 { GHC.Types.I# ww5 ->
                     MorphologyGen.$wmakeSuffixSystems ww ww5 w w1 w2 }
                 } in
                 (\ @ b1
                    eta :: (InflectionData.LexCat,
                            [InflectionData.ManifestSystem],
                            [InflectionData.ManifestSystem],
                            [InflectionData.ManifestSystem])
                           -> b1
                    eta1 :: forall a6.
                            Control.Monad.Prompt.Lift
                              Data.Random.Source.Internal.Prim.Prim
                              Data.Functor.Identity.Identity
                              a6
                            -> (a6 -> b1) -> b1 ->
                  m1
                    `cast`
                  (Trans
                       (Trans
                            (Data.RVar.NTCo:RVarT[0] <Data.Functor.Identity.Identity>_N)
                            (Control.Monad.Prompt.NTCo:PromptT[0]
                                 <Data.Random.Source.Internal.Prim.Prim>_R
                                 <Data.Functor.Identity.Identity>_R) <[InflectionData.ManifestSystem]>_N)
                       (Control.Monad.Prompt.NTCo:Prompt[0]
                            <Control.Monad.Prompt.Lift
                               Data.Random.Source.Internal.Prim.Prim
                               Data.Functor.Identity.Identity>_R
                            <[InflectionData.ManifestSystem]>_R))
                    @ b1
                    (\ x :: [InflectionData.ManifestSystem] ->
                     case x of x1 { DEFAULT ->
                     m2
                       `cast`
                     (Trans
                          (Trans
                               (Data.RVar.NTCo:RVarT[0] <Data.Functor.Identity.Identity>_N)
                               (Control.Monad.Prompt.NTCo:PromptT[0]
                                    <Data.Random.Source.Internal.Prim.Prim>_R
                                    <Data.Functor.Identity.Identity>_R) <[InflectionData.ManifestSystem]>_N)
                          (Control.Monad.Prompt.NTCo:Prompt[0]
                               <Control.Monad.Prompt.Lift
                                  Data.Random.Source.Internal.Prim.Prim
                                  Data.Functor.Identity.Identity>_R
                               <[InflectionData.ManifestSystem]>_R))
                       @ b1
                       (\ x2 :: [InflectionData.ManifestSystem] ->
                        case x2 of x3 { DEFAULT ->
                        m4
                          `cast`
                        (Trans
                             (Trans
                                  (Data.RVar.NTCo:RVarT[0] <Data.Functor.Identity.Identity>_N)
                                  (Control.Monad.Prompt.NTCo:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R) <[InflectionData.ManifestSystem]>_N)
                             (Control.Monad.Prompt.NTCo:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[InflectionData.ManifestSystem]>_R))
                          @ b1
                          (\ x4 :: [InflectionData.ManifestSystem] ->
                           case x4 of x5 { DEFAULT -> eta (ww, x1, x3, x5) })
                          eta1 })
                       eta1 })
                    eta1)
                   `cast`
                 (Trans
                      (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                <Control.Monad.Prompt.Lift
                                   Data.Random.Source.Internal.Prim.Prim
                                   Data.Functor.Identity.Identity>_R
                                <(InflectionData.LexCat,
                                  [InflectionData.ManifestSystem],
                                  [InflectionData.ManifestSystem],
                                  [InflectionData.ManifestSystem])>_R))
                      (Trans
                           (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                     <Data.Random.Source.Internal.Prim.Prim>_R
                                     <Data.Functor.Identity.Identity>_R))
                           (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <(InflectionData.LexCat,
                                                                                                [InflectionData.ManifestSystem],
                                                                                                [InflectionData.ManifestSystem],
                                                                                                [InflectionData.ManifestSystem])>_N))) -}
4e005b66558a50b48756a8fe74198476
  $wmakeParticleSystems ::
    InflectionData.LexCat
    -> GHC.Prim.Int#
    -> [PhonemeData.Phoneme]
    -> [[PhonemeData.Phoneme]]
    -> InflectionData.InflectionSystem
    -> Data.RVar.RVar [InflectionData.ManifestSystem]
  {- Arity: 5,
     Strictness: <L,U><S,U><L,U><L,U><L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: [0] -}
b7a85ea484a240b29e41696414b76e0d
  $wmakePrefixSystems ::
    InflectionData.LexCat
    -> GHC.Prim.Int#
    -> [PhonemeData.Phoneme]
    -> [[PhonemeData.Phoneme]]
    -> InflectionData.InflectionSystem
    -> Data.RVar.RVar [InflectionData.ManifestSystem]
  {- Arity: 5,
     Strictness: <L,U><S,U><L,U><L,U><L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: [0] -}
c8951cb0d95ce758b16fec5fa0bedf38
  $wmakeSuffixSystems ::
    InflectionData.LexCat
    -> GHC.Prim.Int#
    -> [PhonemeData.Phoneme]
    -> [[PhonemeData.Phoneme]]
    -> InflectionData.InflectionSystem
    -> Data.RVar.RVar [InflectionData.ManifestSystem]
  {- Arity: 5,
     Strictness: <L,U><S,U><L,U><L,U><L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: [0] -}
4da66b57f5add59887026d85a40f27b9
  cleanGrammarSys ::
    InflectionData.InflectionSystem
    -> InflectionData.LexCat
    -> InflectionData.ManifestType
    -> GHC.Types.Int
    -> ([InflectionData.Express InflectionData.Gender],
        [InflectionData.Express InflectionData.Animacy],
        [InflectionData.Express InflectionData.Case],
        [InflectionData.Express InflectionData.Number],
        [InflectionData.Express InflectionData.Definiteness],
        [InflectionData.Express InflectionData.Specificity],
        [InflectionData.Express InflectionData.Topic],
        [InflectionData.Express InflectionData.Person],
        [InflectionData.Express InflectionData.Honorific],
        [InflectionData.Express InflectionData.Polarity],
        [InflectionData.Express InflectionData.Tense],
        [InflectionData.Express InflectionData.Aspect],
        [InflectionData.Express InflectionData.Mood],
        [InflectionData.Express InflectionData.Voice],
        [InflectionData.Express InflectionData.Evidentiality],
        [InflectionData.Express InflectionData.Transitivity],
        [InflectionData.Express InflectionData.Volition])
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)><L,U><L,U><L,U(U)> -}
41efeaa1b121e53d3fe21fd9a18bca09
  makeLexicalInflection ::
    [PhonemeData.Phoneme]
    -> [[PhonemeData.Phoneme]]
    -> InflectionData.InflectionSystem
    -> (InflectionData.LexCat,
        GHC.Types.Int,
        GHC.Types.Int,
        GHC.Types.Int)
    -> Data.RVar.RVar
         (InflectionData.LexCat,
          [InflectionData.ManifestSystem],
          [InflectionData.ManifestSystem],
          [InflectionData.ManifestSystem])
  {- Arity: 4,
     Strictness: <L,U><L,U><L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U(U,1*U(U),1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: [PhonemeData.Phoneme]
                   w1 :: [[PhonemeData.Phoneme]]
                   w2 :: InflectionData.InflectionSystem
                   w3 :: (InflectionData.LexCat,
                          GHC.Types.Int,
                          GHC.Types.Int,
                          GHC.Types.Int) ->
                 case w3 of ww { (,,,) ww1 ww2 ww3 ww4 ->
                 MorphologyGen.$wmakeLexicalInflection w w1 w2 ww1 ww2 ww3 ww4 }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

