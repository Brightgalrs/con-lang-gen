
==================== FINAL INTERFACE ====================
2016-10-31 02:26:52.54703 UTC

interface conla_1eA9qWUPH9nBowcXqqaV8r:MorphologyGen 7103
  interface hash: f771c497e4692d1afd9ab60cfea21f6a
  ABI hash: aa796f2bcf7210652962b8eac8de78e0
  export-list hash: f903e1f996d60136e05ef566d0c948d9
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 962af636f8e927040c7daa9c21457292
  sig of: Nothing
  used TH splices: False
  where
exports:
  MorphologyGen.cleanGrammarSys
  MorphologyGen.makeLexicalInflection
module dependencies: InflectionData InflectionGen OtherData
                     PhonemeData PhonemeGen PhonotacticsGen WordGen
package dependencies: MonadPrompt-1.0.0.5@Monad_5vpMHuuRBzi4bKjpRN3A9L
                      MonadRandom-0.4.2.3@Monad_I7tEJH7vOtsKQS7CpG48fz
                      array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA base-4.8.2.0
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59
                      erf-2.0.0.0@erf_6l78BnvLL4b2mWYp3HJJxX
                      flexible-defaults-0.0.1.2@flexi_70LqvhG3vbS8bRvV8pHtMk
                      ghc-prim-0.4.0.0 integer-gmp-1.0.0.0
                      math-functions-0.1.7.0@mathf_BN6S7j0ar3LC4TsnYu0us5
                      mersenne-random-pure64-0.2.0.5@merse_42koSxEhmjwBS69WXi19xI
                      monad-loops-0.4.3@monad_LQiHRUYhFhYBU7nOOWDOrb
                      mtl-2.2.1@mtl_Aue4leSeVkpKLsfHIV51E8
                      mwc-random-0.13.4.0@mwcra_0lrQ1SkkNA85sa8eZ98xQk
                      old-locale-1.0.0.7@oldlo_7h2Gx6mVPJ5Gheca8j9Mpe
                      old-time-1.1.0.3@oldti_JVjJvknZJ0JKghfag2Jw2L
                      pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC
                      primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3
                      random-extras-0.19@rando_11jAc932BDRD7ydjCrRr4L
                      random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW
                      random-1.1@rando_9Kgekc9yEaLHLNUuw6paWL
                      random-shuffle-0.0.4@rando_9kOz9tEn1526ShtWz8x59X
                      random-fu-0.2.7.0@rando_HO0DW1nA2fDCxZJ62mvJHr
                      rvar-0.2.0.3@rvar_HDSuhGFxwNTDX4EfF6w8WG
                      stateref-0.3@state_KptOBHsY85L8YzpDAos2Hi
                      stm-2.4.4.1@stm_EyxFXFfnfY05IrjGaqCxeD
                      syb-0.6@syb_4kccWaTe3QZLxAMQYKgEyE template-haskell-2.10.0.0
                      th-extras-0.0.0.4@thext_LRY1RUMy7ShLl2tqhMyHdO
                      time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn
                      transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF
                      vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln
orphans: MonadRandom-0.4.2.3@Monad_I7tEJH7vOtsKQS7CpG48fz:Control.Monad.Random
         base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         conla_1eA9qWUPH9nBowcXqqaV8r:InflectionData
         mersenne-random-pure64-0.2.0.5@merse_42koSxEhmjwBS69WXi19xI:System.Random.Mersenne.Pure64
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source.IO
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source.MWC
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source.PureMT
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source.StdGen
         stateref-0.3@state_KptOBHsY85L8YzpDAos2Hi:Data.StateRef.Instances
         stateref-0.3@state_KptOBHsY85L8YzpDAos2Hi:Data.StateRef.Instances.STM
         stm-2.4.4.1@stm_EyxFXFfnfY05IrjGaqCxeD:Control.Monad.STM
         syb-0.6@syb_4kccWaTe3QZLxAMQYKgEyE:Data.Generics.Instances
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Calendar.Gregorian
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Format.Parse
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.LocalTime.LocalTime
         transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.Trans.Error
         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Fusion.Bundle
         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Sequence
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
                         mwc-random-0.13.4.0@mwcra_0lrQ1SkkNA85sa8eZ98xQk:System.Random.MWC
                         pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3:Control.Monad.Primitive
                         template-haskell-2.10.0.0:Language.Haskell.TH.Syntax
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Primitive
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed.Base
import  -/  base-4.8.2.0:Control.Monad 480c5067477275068c9b98be08410df9
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:Data.Functor 5c701b0af1708f0192a25dfe14ce6274
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  InflectionData 620c60c71e5f79e12e441f4d14e494c5
  exports: a8d83707be65f59bd55316dc57d3e65e
  Animacy 169ebe44828e15997da16a086b9b84e2
  Aspect 56bab6fdafd7cafcd92c9755a5ea2032
  Case 15a5612a324b972acf0e741e2bc6608f
  Clusivity 3a4205128915d100820ff6257606640f
  Definiteness be54ced0f7a9e9dbb19f9061d7dd5391
  Evidentiality 8d67950b7bc98730e60ddd07089da962
  Gender dc38f7a4ded9cc67467b5a9dd769fcf5
  Honorific 9289039192416879bb2fe055999c7335
  InflectionSystem 6f37316ad5bc95a52627782348e28168
  LexicalCategory 6d2c52c387dc93c2abb2c47833bbbfda
  Manifest 5146f5d6f9a5a6842fdc010bcb896b8c
  Manifest aa0a164e1f050975da3ca6f9d6f7585a
  ManifestSystem 9234783cc8f20c9c7b2647ac8a1b0c88
  ManifestSystem dbada76221b2ba3927c15c3dcf26a1af
  ManifestType 652642acd6e91546346062d0d1df8c9d
  Mood 8b8666475412890bd4ef31f87825a04b
  NoManifest d414366a5625b3f850476770ece1dbbd
  Number 62540c56c8b62df1e5a7c671cd89e35c
  Person 39fbbcfcc14da7372e84446a55a88f39
  Polarity d4f587cb2d189871de567f0749c484ab
  PostParticle 19889faa1d6fede0131ac095348a2328
  PreParticle e615185a77594242c83b20f952735e46
  Prefix 18fe5402bce1ac5100d5f3fd8fbc8fa2
  Specificity 43240a2f26d982c55d81a47318306fc4
  Suffix c87962a93411fcd5393a12dcefd49477
  Tense 1a8c67d1f01afbbcfb22733cde707ca9
  Topic e1b6224fcbcc327712deb0c145c7f7ba
  Transitivity 9762685d7cb7374500147f2897d84980
  Voice 497bb7be1c19f7f308e0958b43035be4
  Volition 3bc4914e230103d822b910efe91e72fb
  aniSys 9cde17d15b2cf747b3229c2499ed19e8
  aspSys aba18ddd02db3535523908cec87a1115
  casSys 79e947c762124fa234a273d1c74e7c1c
  cluSys 39a94ed1fac020f87d4444f4a7912a57
  defSys ffdd56de91275074cb915e5eb9805518
  eviSys fcc03e2b63241248a33ac711a6118d25
  genSys b38f3225a2d28dd96dea37251bee9185
  honSys ac3c6a751b928278ea31f4cec2928345
  mooSys 8a776b9731b39a3eb4858045d22d1df1
  numSys 3a7e66e2d52bf8261d23c6f57d1fc486
  perSys 33ce8277fed89490fa0e0536a3c3776b
  polSys 0eaed13d7b67d3dbd167fde9f647e6b3
  speSys 8e88acb3fd29f6bc2e3144f0422936b6
  tenSys 7ac2c47c5740e767e4a9a71d461e43c5
  topSys 0b93d7624bfca76c49c8d4a51f8dfc21
  traSys f20e2ceaf690b1093af545695dea6d71
  voiSys 94f2b6baa8fc9a45b3597a6466aef2ad
  volSys 0f78c4349901893b48cec41621389532
import  -/  InflectionGen 01fbcfdeb4bee1ffed290d04b48ffb84
  exports: 048d5473e30e89d79e5837b0f0227111
import  -/  PhonemeData 86639d5baa3c8896a59c20b5d5d0708d
  exports: 8834c83badd5837275d7ec1bbd2f424a
  Phoneme 725a483aa2dd4b7c0473c29cf990b878
import  -/  WordGen 5aa3b7d1957a69e2673e41e5e8bdc31f
  exports: 9dfefff67ac26aa86a6a1d79ec7432b6
  makeMorpheme da75a9aaeb42e0ae5821796c1595af68
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  random-extras-0.19@rando_11jAc932BDRD7ydjCrRr4L:Data.Random.Extras 5dc1684f88e3f2655bfb5d7aca60bf5c
import  -/  random-fu-0.2.7.0@rando_HO0DW1nA2fDCxZJ62mvJHr:Data.Random 355d6844bb1b3189cb19ec0007f6f130
import  -/  rvar-0.2.0.3@rvar_HDSuhGFxwNTDX4EfF6w8WG:Data.RVar 9b7fbdb5f1778e76b8a65f45a17cccb1
2503a01e02577653a1bdb8cfa00f0b2f
  $sreplicateM2 ::
    [Data.RVar.RVarT Data.Functor.Identity.Identity a3]
    -> forall b.
       ([a3] -> b)
       -> (forall a.
           Control.Monad.Prompt.Lift
             Data.Random.Source.Internal.Prim.Prim
             Data.Functor.Identity.Identity
             a
           -> (a -> b) -> b)
       -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,C(U)><L,U> -}
eb995a60e43d57af3b681a73eb95fcc5
  $wmakeLexicalInflection ::
    [PhonemeData.Phoneme]
    -> [[PhonemeData.Phoneme]]
    -> InflectionData.InflectionSystem
    -> InflectionData.LexicalCategory
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> Data.RVar.RVar
         (InflectionData.LexicalCategory,
          [InflectionData.ManifestSystem],
          [InflectionData.ManifestSystem],
          [InflectionData.ManifestSystem],
          [InflectionData.ManifestSystem])
  {- Arity: 8,
     Strictness: <L,U><L,U><L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ w :: [PhonemeData.Phoneme]
                   w1 :: [[PhonemeData.Phoneme]]
                   w2 :: InflectionData.InflectionSystem
                   ww :: InflectionData.LexicalCategory
                   ww1 :: GHC.Types.Int
                   ww2 :: GHC.Types.Int
                   ww3 :: GHC.Types.Int
                   ww4 :: GHC.Types.Int ->
                 let {
                   m1 :: Data.RVar.RVarT
                           Data.Functor.Identity.Identity [InflectionData.ManifestSystem]
                   = case ww1 of ww5 { GHC.Types.I# ww6 ->
                     MorphologyGen.$wmakePreParticleSystems ww ww6 w w1 w2 }
                 } in
                 let {
                   m2 :: Data.RVar.RVarT
                           Data.Functor.Identity.Identity [InflectionData.ManifestSystem]
                   = case ww2 of ww5 { GHC.Types.I# ww6 ->
                     MorphologyGen.$wmakePostParticleSystems ww ww6 w w1 w2 }
                 } in
                 let {
                   m4 :: Data.RVar.RVarT
                           Data.Functor.Identity.Identity [InflectionData.ManifestSystem]
                   = case ww3 of ww5 { GHC.Types.I# ww6 ->
                     MorphologyGen.$wmakePrefixSystems ww ww6 w w1 w2 }
                 } in
                 let {
                   m5 :: Data.RVar.RVarT
                           Data.Functor.Identity.Identity [InflectionData.ManifestSystem]
                   = case ww4 of ww5 { GHC.Types.I# ww6 ->
                     MorphologyGen.$wmakeSuffixSystems ww ww6 w w1 w2 }
                 } in
                 (\ @ b1
                    eta :: (InflectionData.LexicalCategory,
                            [InflectionData.ManifestSystem],
                            [InflectionData.ManifestSystem],
                            [InflectionData.ManifestSystem],
                            [InflectionData.ManifestSystem])
                           -> b1
                    eta1 :: forall a6.
                            Control.Monad.Prompt.Lift
                              Data.Random.Source.Internal.Prim.Prim
                              Data.Functor.Identity.Identity
                              a6
                            -> (a6 -> b1) -> b1 ->
                  m1
                    `cast`
                  (Trans
                       (Trans
                            (Data.RVar.NTCo:RVarT[0] <Data.Functor.Identity.Identity>_N)
                            (Control.Monad.Prompt.NTCo:PromptT[0]
                                 <Data.Random.Source.Internal.Prim.Prim>_R
                                 <Data.Functor.Identity.Identity>_R) <[InflectionData.ManifestSystem]>_N)
                       (Control.Monad.Prompt.NTCo:Prompt[0]
                            <Control.Monad.Prompt.Lift
                               Data.Random.Source.Internal.Prim.Prim
                               Data.Functor.Identity.Identity>_R
                            <[InflectionData.ManifestSystem]>_R))
                    @ b1
                    (\ x :: [InflectionData.ManifestSystem] ->
                     case x of x1 { DEFAULT ->
                     m2
                       `cast`
                     (Trans
                          (Trans
                               (Data.RVar.NTCo:RVarT[0] <Data.Functor.Identity.Identity>_N)
                               (Control.Monad.Prompt.NTCo:PromptT[0]
                                    <Data.Random.Source.Internal.Prim.Prim>_R
                                    <Data.Functor.Identity.Identity>_R) <[InflectionData.ManifestSystem]>_N)
                          (Control.Monad.Prompt.NTCo:Prompt[0]
                               <Control.Monad.Prompt.Lift
                                  Data.Random.Source.Internal.Prim.Prim
                                  Data.Functor.Identity.Identity>_R
                               <[InflectionData.ManifestSystem]>_R))
                       @ b1
                       (\ x2 :: [InflectionData.ManifestSystem] ->
                        case x2 of x3 { DEFAULT ->
                        m4
                          `cast`
                        (Trans
                             (Trans
                                  (Data.RVar.NTCo:RVarT[0] <Data.Functor.Identity.Identity>_N)
                                  (Control.Monad.Prompt.NTCo:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R) <[InflectionData.ManifestSystem]>_N)
                             (Control.Monad.Prompt.NTCo:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[InflectionData.ManifestSystem]>_R))
                          @ b1
                          (\ x4 :: [InflectionData.ManifestSystem] ->
                           case x4 of x5 { DEFAULT ->
                           m5
                             `cast`
                           (Trans
                                (Trans
                                     (Data.RVar.NTCo:RVarT[0] <Data.Functor.Identity.Identity>_N)
                                     (Control.Monad.Prompt.NTCo:PromptT[0]
                                          <Data.Random.Source.Internal.Prim.Prim>_R
                                          <Data.Functor.Identity.Identity>_R) <[InflectionData.ManifestSystem]>_N)
                                (Control.Monad.Prompt.NTCo:Prompt[0]
                                     <Control.Monad.Prompt.Lift
                                        Data.Random.Source.Internal.Prim.Prim
                                        Data.Functor.Identity.Identity>_R
                                     <[InflectionData.ManifestSystem]>_R))
                             @ b1
                             (\ x6 :: [InflectionData.ManifestSystem] ->
                              case x6 of x7 { DEFAULT -> eta (ww, x1, x3, x5, x7) })
                             eta1 })
                          eta1 })
                       eta1 })
                    eta1)
                   `cast`
                 (Trans
                      (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                <Control.Monad.Prompt.Lift
                                   Data.Random.Source.Internal.Prim.Prim
                                   Data.Functor.Identity.Identity>_R
                                <(InflectionData.LexicalCategory,
                                  [InflectionData.ManifestSystem],
                                  [InflectionData.ManifestSystem],
                                  [InflectionData.ManifestSystem],
                                  [InflectionData.ManifestSystem])>_R))
                      (Trans
                           (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                     <Data.Random.Source.Internal.Prim.Prim>_R
                                     <Data.Functor.Identity.Identity>_R))
                           (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <(InflectionData.LexicalCategory,
                                                                                                [InflectionData.ManifestSystem],
                                                                                                [InflectionData.ManifestSystem],
                                                                                                [InflectionData.ManifestSystem],
                                                                                                [InflectionData.ManifestSystem])>_N))) -}
c95e95beb0eaccfe128d6729ce9e780f
  $wmakePostParticleSystems ::
    InflectionData.LexicalCategory
    -> GHC.Prim.Int#
    -> [PhonemeData.Phoneme]
    -> [[PhonemeData.Phoneme]]
    -> InflectionData.InflectionSystem
    -> Data.RVar.RVar [InflectionData.ManifestSystem]
  {- Arity: 5,
     Strictness: <L,U><S,U><L,U><L,U><L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: [0] -}
13bee86907a55a7e0422bfbad61ee55c
  $wmakePreParticleSystems ::
    InflectionData.LexicalCategory
    -> GHC.Prim.Int#
    -> [PhonemeData.Phoneme]
    -> [[PhonemeData.Phoneme]]
    -> InflectionData.InflectionSystem
    -> Data.RVar.RVar [InflectionData.ManifestSystem]
  {- Arity: 5,
     Strictness: <L,U><S,U><L,U><L,U><L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: [0] -}
456eec52ef66a87faf05a2e44e4fc86a
  $wmakePrefixSystems ::
    InflectionData.LexicalCategory
    -> GHC.Prim.Int#
    -> [PhonemeData.Phoneme]
    -> [[PhonemeData.Phoneme]]
    -> InflectionData.InflectionSystem
    -> Data.RVar.RVar [InflectionData.ManifestSystem]
  {- Arity: 5,
     Strictness: <L,U><S,U><L,U><L,U><L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: [0] -}
af621fe0e5797b97d1538f84cec5682a
  $wmakeSuffixSystems ::
    InflectionData.LexicalCategory
    -> GHC.Prim.Int#
    -> [PhonemeData.Phoneme]
    -> [[PhonemeData.Phoneme]]
    -> InflectionData.InflectionSystem
    -> Data.RVar.RVar [InflectionData.ManifestSystem]
  {- Arity: 5,
     Strictness: <L,U><S,U><L,U><L,U><L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: [0] -}
9895f58d58b0e108f682cf2800481bca
  cleanGrammarSys ::
    InflectionData.InflectionSystem
    -> InflectionData.LexicalCategory
    -> InflectionData.ManifestType
    -> GHC.Types.Int
    -> ([InflectionData.Manifest InflectionData.Gender],
        [InflectionData.Manifest InflectionData.Animacy],
        [InflectionData.Manifest InflectionData.Case],
        [InflectionData.Manifest InflectionData.Number],
        [InflectionData.Manifest InflectionData.Definiteness],
        [InflectionData.Manifest InflectionData.Specificity],
        [InflectionData.Manifest InflectionData.Topic],
        [InflectionData.Manifest InflectionData.Person],
        [InflectionData.Manifest InflectionData.Clusivity],
        [InflectionData.Manifest InflectionData.Honorific],
        [InflectionData.Manifest InflectionData.Polarity],
        [InflectionData.Manifest InflectionData.Tense],
        [InflectionData.Manifest InflectionData.Aspect],
        [InflectionData.Manifest InflectionData.Mood],
        [InflectionData.Manifest InflectionData.Voice],
        [InflectionData.Manifest InflectionData.Evidentiality],
        [InflectionData.Manifest InflectionData.Transitivity],
        [InflectionData.Manifest InflectionData.Volition])
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)><L,U><L,U><L,U(U)> -}
f4a2d17036605fda47d0eb60b7f1611b
  makeLexicalInflection ::
    [PhonemeData.Phoneme]
    -> [[PhonemeData.Phoneme]]
    -> InflectionData.InflectionSystem
    -> (InflectionData.LexicalCategory,
        GHC.Types.Int,
        GHC.Types.Int,
        GHC.Types.Int,
        GHC.Types.Int)
    -> Data.RVar.RVar
         (InflectionData.LexicalCategory,
          [InflectionData.ManifestSystem],
          [InflectionData.ManifestSystem],
          [InflectionData.ManifestSystem],
          [InflectionData.ManifestSystem])
  {- Arity: 4,
     Strictness: <L,U><L,U><L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U(U,1*U(U),1*U(U),1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: [PhonemeData.Phoneme]
                   w1 :: [[PhonemeData.Phoneme]]
                   w2 :: InflectionData.InflectionSystem
                   w3 :: (InflectionData.LexicalCategory,
                          GHC.Types.Int,
                          GHC.Types.Int,
                          GHC.Types.Int,
                          GHC.Types.Int) ->
                 case w3 of ww { (,,,,) ww1 ww2 ww3 ww4 ww5 ->
                 MorphologyGen.$wmakeLexicalInflection
                   w
                   w1
                   w2
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5 }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

