
==================== FINAL INTERFACE ====================
2016-12-06 20:49:06.887652 UTC

interface conla_1eA9qWUPH9nBowcXqqaV8r:MorphologyGen 7103
  interface hash: 40f2e8a83bd31e75b40ebc18a1a35b95
  ABI hash: bb55b305d3c3b9c1dfcf84eae0b8f754
  export-list hash: 582b44e4b3f5753710978de22ed6645e
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 962af636f8e927040c7daa9c21457292
  sig of: Nothing
  used TH splices: False
  where
exports:
  MorphologyGen.cleanGrammarSys
  MorphologyGen.makeLexicalInflection
module dependencies: GrammarData InflectionData InflectionGen
                     OtherData PhonemeData PhonemeGen PhonotacticsGen WordGen
package dependencies: MonadPrompt-1.0.0.5@Monad_5vpMHuuRBzi4bKjpRN3A9L
                      MonadRandom-0.4.2.3@Monad_I7tEJH7vOtsKQS7CpG48fz
                      array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA base-4.8.2.0
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59
                      erf-2.0.0.0@erf_6l78BnvLL4b2mWYp3HJJxX
                      flexible-defaults-0.0.1.2@flexi_70LqvhG3vbS8bRvV8pHtMk
                      ghc-prim-0.4.0.0 integer-gmp-1.0.0.0
                      math-functions-0.1.7.0@mathf_BN6S7j0ar3LC4TsnYu0us5
                      mersenne-random-pure64-0.2.0.5@merse_42koSxEhmjwBS69WXi19xI
                      monad-loops-0.4.3@monad_LQiHRUYhFhYBU7nOOWDOrb
                      mtl-2.2.1@mtl_Aue4leSeVkpKLsfHIV51E8
                      mwc-random-0.13.4.0@mwcra_0lrQ1SkkNA85sa8eZ98xQk
                      old-locale-1.0.0.7@oldlo_7h2Gx6mVPJ5Gheca8j9Mpe
                      old-time-1.1.0.3@oldti_JVjJvknZJ0JKghfag2Jw2L
                      pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC
                      primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3
                      random-extras-0.19@rando_11jAc932BDRD7ydjCrRr4L
                      random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW
                      random-1.1@rando_9Kgekc9yEaLHLNUuw6paWL
                      random-shuffle-0.0.4@rando_9kOz9tEn1526ShtWz8x59X
                      random-fu-0.2.7.0@rando_HO0DW1nA2fDCxZJ62mvJHr
                      rvar-0.2.0.3@rvar_HDSuhGFxwNTDX4EfF6w8WG
                      stateref-0.3@state_KptOBHsY85L8YzpDAos2Hi
                      stm-2.4.4.1@stm_EyxFXFfnfY05IrjGaqCxeD
                      syb-0.6@syb_4kccWaTe3QZLxAMQYKgEyE template-haskell-2.10.0.0
                      th-extras-0.0.0.4@thext_LRY1RUMy7ShLl2tqhMyHdO
                      time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn
                      transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF
                      vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln
orphans: MonadRandom-0.4.2.3@Monad_I7tEJH7vOtsKQS7CpG48fz:Control.Monad.Random
         base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         conla_1eA9qWUPH9nBowcXqqaV8r:InflectionData
         mersenne-random-pure64-0.2.0.5@merse_42koSxEhmjwBS69WXi19xI:System.Random.Mersenne.Pure64
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source.IO
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source.MWC
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source.PureMT
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source.StdGen
         stateref-0.3@state_KptOBHsY85L8YzpDAos2Hi:Data.StateRef.Instances
         stateref-0.3@state_KptOBHsY85L8YzpDAos2Hi:Data.StateRef.Instances.STM
         stm-2.4.4.1@stm_EyxFXFfnfY05IrjGaqCxeD:Control.Monad.STM
         syb-0.6@syb_4kccWaTe3QZLxAMQYKgEyE:Data.Generics.Instances
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Calendar.Gregorian
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Format.Parse
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.LocalTime.LocalTime
         transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.Trans.Error
         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Fusion.Bundle
         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Sequence
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
                         mwc-random-0.13.4.0@mwcra_0lrQ1SkkNA85sa8eZ98xQk:System.Random.MWC
                         pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3:Control.Monad.Primitive
                         template-haskell-2.10.0.0:Language.Haskell.TH.Syntax
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Primitive
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed.Base
import  -/  base-4.8.2.0:Control.Monad 480c5067477275068c9b98be08410df9
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:Data.Functor 5c701b0af1708f0192a25dfe14ce6274
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  GrammarData 3ac8f2b878a3acac75da28c3be99b3ac
  exports: fca5595c19286020653fdf4f375d962b
import  -/  InflectionData 3d10fd8ebdfb88f2d9b18403b3318120
  exports: bbf9a431e828cdbe291def24777d4f2e
  Animacy 3fb8f806ac431419336914d62e0692e1
  Aspect 3260581e2888098e95013c9746eb2927
  Case ed810d7ab6970052c9ee31d75d4a74f7
  Definiteness f57cbd9dbed35919833216936d0e066e
  Evidentiality 8c39249ddb7859f10b018a2526e04a45
  Express eb822898078c54f198699344a3fb2c63
  Express ce522c1d99b503cc50c6a04abbeb7ec2
  Gender 8b595aff125f95a2b35fe330b0ba7fad
  Honorific 38ff9a9c45f96d99123b457fda219bfb
  InflectionSystem e87dedc6ee0613212a8838da9054e9ca
  LexCat b0a24ad20939906e8d87ed3073f32603
  Manifest 738cfe3686e2d0e5db7ec88faec06acb
  Manifest f539d8313c5a8ab2854680bd81c6cecb
  ManifestSystem a7815f6fb4d337722db1ca3aa102d56a
  ManifestSystem e7fb9cb536022bc8f9fdd7f94d3c9e4a
  ManifestType 21626b080cf2e0731be3b700433e03eb
  Mood 170a49091e965c69ca2b81c9942aa234
  NoExpress d6b74cdc58afb01056b09c31a809a97b
  NoManifest dd0ff7e8ec5d232f1076f24ce0f63386
  Number c1e8fbfb7380effdacb7c7c192e40bf5
  Particle 0d433f8dbca5042456428720a6fa40c8
  Person 02346c3aafaeac9909a5db7a01e8ca09
  Polarity ad1fe4829d26ee371daeb2b0168138e4
  Prefix d975d35054d32c3efc584cae64fdcf2d
  Specificity a4a6522da9f32c4a22fdcdb048233e77
  Suffix 19f496940d721d5db4c05dd382486c54
  Tense b64289664290fdc9c5510c85a7afdd78
  Topic 91b970df1d2f65a770d84bd1b0e168b5
  Transitivity c432d94948e8418512e7b069e8d02e7a
  Voice 1f59333afb1b3b92a8af1e5489e1e630
  Volition 91017ab7ea71228801f74c069cd5baf7
  aniSys 418312c5fef475f6491ab9b08cc9e4a0
  aspSys 0bb602290854008e9c49649291652480
  casSys add19c65cc6f1fe282cd3c5d93eb3390
  defSys 02c3c8a5fc37888f88295faca73009ab
  eviSys 9a880a223bbc8d556f96f82b447b0469
  genSys 29df4b93bb175fe038692cd57442c08d
  honSys b749addaa4dbab444b3ba6e4c3080482
  mooSys 69a3f604f4dd42ec545394741ccd60c6
  numSys 6d879838113991034bac918ebf0b46f8
  perSys 1b412b277c7edd0b512e13923d1f3e09
  polSys b6e9b16a59299e448d515504968763fe
  speSys f120c55cd644627c31ba466e98d24bcf
  tenSys dd002fbf7a55ef4faacaa94df56435f7
  topSys 42d673b3b4caa339454fc67e5a805d46
  traSys ba78580b1a2b852174cdc7b1adf59950
  voiSys 235151b8b952dd109b6af25a0e063cce
  volSys 86532736672bf5c58d5f98ce1c39d837
import  -/  InflectionGen a79e24a2de56e12fc0fa00dedb53fa2a
  exports: 09d21b38d6024a7ac3365c08083b4741
import  -/  PhonemeData 408b6488aa28ce44ef05793241013f6f
  exports: c711b36c9b7415c6d00ea9681146dbcb
  Phoneme 78c280a9bf84c920fdcdc1bfa9515e2f
import  -/  WordGen 520ccd25c82283dc402bcccf2f807e78
  exports: 0f5651339588a0c089ee4bc85b42fbc1
  makeMorpheme 90c96d6dac5552cfb4cafae5fadb8741
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  random-extras-0.19@rando_11jAc932BDRD7ydjCrRr4L:Data.Random.Extras 5dc1684f88e3f2655bfb5d7aca60bf5c
import  -/  random-fu-0.2.7.0@rando_HO0DW1nA2fDCxZJ62mvJHr:Data.Random 355d6844bb1b3189cb19ec0007f6f130
import  -/  rvar-0.2.0.3@rvar_HDSuhGFxwNTDX4EfF6w8WG:Data.RVar 9b7fbdb5f1778e76b8a65f45a17cccb1
2503a01e02577653a1bdb8cfa00f0b2f
  $sreplicateM2 ::
    [Data.RVar.RVarT Data.Functor.Identity.Identity a3]
    -> forall b.
       ([a3] -> b)
       -> (forall a.
           Control.Monad.Prompt.Lift
             Data.Random.Source.Internal.Prim.Prim
             Data.Functor.Identity.Identity
             a
           -> (a -> b) -> b)
       -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,C(U)><L,U> -}
24f3debc57cfcef1deb694b4ba16412b
  $wmakeLexicalInflection ::
    [PhonemeData.Phoneme]
    -> [[PhonemeData.Phoneme]]
    -> InflectionData.InflectionSystem
    -> InflectionData.LexCat
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> Data.RVar.RVar
         (InflectionData.LexCat,
          [InflectionData.ManifestSystem],
          [InflectionData.ManifestSystem],
          [InflectionData.ManifestSystem])
  {- Arity: 7,
     Strictness: <L,U><L,U><L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U><L,1*U(U)><L,1*U(U)><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ w :: [PhonemeData.Phoneme]
                   w1 :: [[PhonemeData.Phoneme]]
                   w2 :: InflectionData.InflectionSystem
                   ww :: InflectionData.LexCat
                   ww1 :: GHC.Types.Int
                   ww2 :: GHC.Types.Int
                   ww3 :: GHC.Types.Int ->
                 let {
                   m1 :: Data.RVar.RVarT
                           Data.Functor.Identity.Identity [InflectionData.ManifestSystem]
                   = case ww1 of ww4 { GHC.Types.I# ww5 ->
                     MorphologyGen.$wmakeParticleSystems ww ww5 w w1 w2 }
                 } in
                 let {
                   m2 :: Data.RVar.RVarT
                           Data.Functor.Identity.Identity [InflectionData.ManifestSystem]
                   = case ww2 of ww4 { GHC.Types.I# ww5 ->
                     MorphologyGen.$wmakePrefixSystems ww ww5 w w1 w2 }
                 } in
                 let {
                   m4 :: Data.RVar.RVarT
                           Data.Functor.Identity.Identity [InflectionData.ManifestSystem]
                   = case ww3 of ww4 { GHC.Types.I# ww5 ->
                     MorphologyGen.$wmakeSuffixSystems ww ww5 w w1 w2 }
                 } in
                 (\ @ b1
                    eta :: (InflectionData.LexCat,
                            [InflectionData.ManifestSystem],
                            [InflectionData.ManifestSystem],
                            [InflectionData.ManifestSystem])
                           -> b1
                    eta1 :: forall a6.
                            Control.Monad.Prompt.Lift
                              Data.Random.Source.Internal.Prim.Prim
                              Data.Functor.Identity.Identity
                              a6
                            -> (a6 -> b1) -> b1 ->
                  m1
                    `cast`
                  (Trans
                       (Trans
                            (Data.RVar.NTCo:RVarT[0] <Data.Functor.Identity.Identity>_N)
                            (Control.Monad.Prompt.NTCo:PromptT[0]
                                 <Data.Random.Source.Internal.Prim.Prim>_R
                                 <Data.Functor.Identity.Identity>_R) <[InflectionData.ManifestSystem]>_N)
                       (Control.Monad.Prompt.NTCo:Prompt[0]
                            <Control.Monad.Prompt.Lift
                               Data.Random.Source.Internal.Prim.Prim
                               Data.Functor.Identity.Identity>_R
                            <[InflectionData.ManifestSystem]>_R))
                    @ b1
                    (\ x :: [InflectionData.ManifestSystem] ->
                     case x of x1 { DEFAULT ->
                     m2
                       `cast`
                     (Trans
                          (Trans
                               (Data.RVar.NTCo:RVarT[0] <Data.Functor.Identity.Identity>_N)
                               (Control.Monad.Prompt.NTCo:PromptT[0]
                                    <Data.Random.Source.Internal.Prim.Prim>_R
                                    <Data.Functor.Identity.Identity>_R) <[InflectionData.ManifestSystem]>_N)
                          (Control.Monad.Prompt.NTCo:Prompt[0]
                               <Control.Monad.Prompt.Lift
                                  Data.Random.Source.Internal.Prim.Prim
                                  Data.Functor.Identity.Identity>_R
                               <[InflectionData.ManifestSystem]>_R))
                       @ b1
                       (\ x2 :: [InflectionData.ManifestSystem] ->
                        case x2 of x3 { DEFAULT ->
                        m4
                          `cast`
                        (Trans
                             (Trans
                                  (Data.RVar.NTCo:RVarT[0] <Data.Functor.Identity.Identity>_N)
                                  (Control.Monad.Prompt.NTCo:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R) <[InflectionData.ManifestSystem]>_N)
                             (Control.Monad.Prompt.NTCo:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[InflectionData.ManifestSystem]>_R))
                          @ b1
                          (\ x4 :: [InflectionData.ManifestSystem] ->
                           case x4 of x5 { DEFAULT -> eta (ww, x1, x3, x5) })
                          eta1 })
                       eta1 })
                    eta1)
                   `cast`
                 (Trans
                      (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                <Control.Monad.Prompt.Lift
                                   Data.Random.Source.Internal.Prim.Prim
                                   Data.Functor.Identity.Identity>_R
                                <(InflectionData.LexCat,
                                  [InflectionData.ManifestSystem],
                                  [InflectionData.ManifestSystem],
                                  [InflectionData.ManifestSystem])>_R))
                      (Trans
                           (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                     <Data.Random.Source.Internal.Prim.Prim>_R
                                     <Data.Functor.Identity.Identity>_R))
                           (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <(InflectionData.LexCat,
                                                                                                [InflectionData.ManifestSystem],
                                                                                                [InflectionData.ManifestSystem],
                                                                                                [InflectionData.ManifestSystem])>_N))) -}
368c6c608b00ee457524fbcdb9b23759
  $wmakeParticleSystems ::
    InflectionData.LexCat
    -> GHC.Prim.Int#
    -> [PhonemeData.Phoneme]
    -> [[PhonemeData.Phoneme]]
    -> InflectionData.InflectionSystem
    -> Data.RVar.RVar [InflectionData.ManifestSystem]
  {- Arity: 5,
     Strictness: <L,U><S,U><L,U><L,U><L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: [0] -}
349dee99cc6989bc4cf752764cae36c0
  $wmakePrefixSystems ::
    InflectionData.LexCat
    -> GHC.Prim.Int#
    -> [PhonemeData.Phoneme]
    -> [[PhonemeData.Phoneme]]
    -> InflectionData.InflectionSystem
    -> Data.RVar.RVar [InflectionData.ManifestSystem]
  {- Arity: 5,
     Strictness: <L,U><S,U><L,U><L,U><L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: [0] -}
63a52a368402d32f3be84f5098312bed
  $wmakeSuffixSystems ::
    InflectionData.LexCat
    -> GHC.Prim.Int#
    -> [PhonemeData.Phoneme]
    -> [[PhonemeData.Phoneme]]
    -> InflectionData.InflectionSystem
    -> Data.RVar.RVar [InflectionData.ManifestSystem]
  {- Arity: 5,
     Strictness: <L,U><S,U><L,U><L,U><L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: [0] -}
0395893f0813fe57fac2d67a08133bf0
  cleanGrammarSys ::
    InflectionData.InflectionSystem
    -> InflectionData.LexCat
    -> InflectionData.ManifestType
    -> GHC.Types.Int
    -> ([InflectionData.Express InflectionData.Gender],
        [InflectionData.Express InflectionData.Animacy],
        [InflectionData.Express InflectionData.Case],
        [InflectionData.Express InflectionData.Number],
        [InflectionData.Express InflectionData.Definiteness],
        [InflectionData.Express InflectionData.Specificity],
        [InflectionData.Express InflectionData.Topic],
        [InflectionData.Express InflectionData.Person],
        [InflectionData.Express InflectionData.Honorific],
        [InflectionData.Express InflectionData.Polarity],
        [InflectionData.Express InflectionData.Tense],
        [InflectionData.Express InflectionData.Aspect],
        [InflectionData.Express InflectionData.Mood],
        [InflectionData.Express InflectionData.Voice],
        [InflectionData.Express InflectionData.Evidentiality],
        [InflectionData.Express InflectionData.Transitivity],
        [InflectionData.Express InflectionData.Volition])
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)><L,U><L,U><L,U(U)> -}
d1b0ecf0341de2227e63441ed4fc0b27
  makeLexicalInflection ::
    [PhonemeData.Phoneme]
    -> [[PhonemeData.Phoneme]]
    -> InflectionData.InflectionSystem
    -> (InflectionData.LexCat,
        GHC.Types.Int,
        GHC.Types.Int,
        GHC.Types.Int)
    -> Data.RVar.RVar
         (InflectionData.LexCat,
          [InflectionData.ManifestSystem],
          [InflectionData.ManifestSystem],
          [InflectionData.ManifestSystem])
  {- Arity: 4,
     Strictness: <L,U><L,U><L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U(U,1*U(U),1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: [PhonemeData.Phoneme]
                   w1 :: [[PhonemeData.Phoneme]]
                   w2 :: InflectionData.InflectionSystem
                   w3 :: (InflectionData.LexCat,
                          GHC.Types.Int,
                          GHC.Types.Int,
                          GHC.Types.Int) ->
                 case w3 of ww { (,,,) ww1 ww2 ww3 ww4 ->
                 MorphologyGen.$wmakeLexicalInflection w w1 w2 ww1 ww2 ww3 ww4 }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

