
==================== FINAL INTERFACE ====================
2016-11-04 09:25:12.78181 UTC

interface conla_1eA9qWUPH9nBowcXqqaV8r:MorphologyGen 7103
  interface hash: 784e8e5ac6d36480d651b6480d74e85d
  ABI hash: 8ceb28ea48040c72239d3de9e2e0951c
  export-list hash: f9340380e19fdb3ff659d628c905371a
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 962af636f8e927040c7daa9c21457292
  sig of: Nothing
  used TH splices: False
  where
exports:
  MorphologyGen.cleanGrammarSys
  MorphologyGen.makeLexicalInflection
module dependencies: GrammarData InflectionData InflectionGen
                     OtherData PhonemeData PhonemeGen PhonotacticsGen WordGen
package dependencies: MonadPrompt-1.0.0.5@Monad_5vpMHuuRBzi4bKjpRN3A9L
                      MonadRandom-0.4.2.3@Monad_I7tEJH7vOtsKQS7CpG48fz
                      array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA base-4.8.2.0
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59
                      erf-2.0.0.0@erf_6l78BnvLL4b2mWYp3HJJxX
                      flexible-defaults-0.0.1.2@flexi_70LqvhG3vbS8bRvV8pHtMk
                      ghc-prim-0.4.0.0 integer-gmp-1.0.0.0
                      math-functions-0.1.7.0@mathf_BN6S7j0ar3LC4TsnYu0us5
                      mersenne-random-pure64-0.2.0.5@merse_42koSxEhmjwBS69WXi19xI
                      monad-loops-0.4.3@monad_LQiHRUYhFhYBU7nOOWDOrb
                      mtl-2.2.1@mtl_Aue4leSeVkpKLsfHIV51E8
                      mwc-random-0.13.4.0@mwcra_0lrQ1SkkNA85sa8eZ98xQk
                      old-locale-1.0.0.7@oldlo_7h2Gx6mVPJ5Gheca8j9Mpe
                      old-time-1.1.0.3@oldti_JVjJvknZJ0JKghfag2Jw2L
                      pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC
                      primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3
                      random-extras-0.19@rando_11jAc932BDRD7ydjCrRr4L
                      random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW
                      random-1.1@rando_9Kgekc9yEaLHLNUuw6paWL
                      random-shuffle-0.0.4@rando_9kOz9tEn1526ShtWz8x59X
                      random-fu-0.2.7.0@rando_HO0DW1nA2fDCxZJ62mvJHr
                      rvar-0.2.0.3@rvar_HDSuhGFxwNTDX4EfF6w8WG
                      stateref-0.3@state_KptOBHsY85L8YzpDAos2Hi
                      stm-2.4.4.1@stm_EyxFXFfnfY05IrjGaqCxeD
                      syb-0.6@syb_4kccWaTe3QZLxAMQYKgEyE template-haskell-2.10.0.0
                      th-extras-0.0.0.4@thext_LRY1RUMy7ShLl2tqhMyHdO
                      time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn
                      transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF
                      vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln
orphans: MonadRandom-0.4.2.3@Monad_I7tEJH7vOtsKQS7CpG48fz:Control.Monad.Random
         base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         conla_1eA9qWUPH9nBowcXqqaV8r:InflectionData
         mersenne-random-pure64-0.2.0.5@merse_42koSxEhmjwBS69WXi19xI:System.Random.Mersenne.Pure64
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source.IO
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source.MWC
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source.PureMT
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source.StdGen
         stateref-0.3@state_KptOBHsY85L8YzpDAos2Hi:Data.StateRef.Instances
         stateref-0.3@state_KptOBHsY85L8YzpDAos2Hi:Data.StateRef.Instances.STM
         stm-2.4.4.1@stm_EyxFXFfnfY05IrjGaqCxeD:Control.Monad.STM
         syb-0.6@syb_4kccWaTe3QZLxAMQYKgEyE:Data.Generics.Instances
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Calendar.Gregorian
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Format.Parse
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.LocalTime.LocalTime
         transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.Trans.Error
         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Fusion.Bundle
         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Sequence
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
                         mwc-random-0.13.4.0@mwcra_0lrQ1SkkNA85sa8eZ98xQk:System.Random.MWC
                         pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3:Control.Monad.Primitive
                         template-haskell-2.10.0.0:Language.Haskell.TH.Syntax
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Primitive
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed.Base
import  -/  base-4.8.2.0:Control.Monad 480c5067477275068c9b98be08410df9
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:Data.Functor 5c701b0af1708f0192a25dfe14ce6274
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  GrammarData b86371ccb48390730f6498310ddac76f
  exports: d1002ba5737e19703411cb57857cf209
  LexCat b95e114b0b6d51b5dd936a539d4fcd51
import  -/  InflectionData 072303e933f9eb87493ca2db6553722b
  exports: 11ce4827ce97282915e6b63398631625
  Animacy cedf9e666cdb6656f2a2a96d2d3bd589
  Aspect 6cd9c63aad1a4e1ec43732010ec1ea5c
  Case fe9f4ca1606b5f19f2230e1deea3d046
  Clusivity ec2f2b20d2b1cf035f6ca129e5552311
  Definiteness b37f400b256ab5a9a84f13e148a3d2d5
  Evidentiality 72f49e3daffb56d4bf46854dab7a01ee
  Gender bea847055a51c2d8a5a4f43d44b03253
  Honorific b998d88ddf707e2096355bc29dc9a0f5
  InflectionSystem 1e3fe4826a39142c5de940012234f2c4
  Manifest 56c295ecee861c84924b0ef3cc95c44d
  Manifest 585905e8fe5aabe454e8c831c9719ba2
  ManifestSystem 268e7a03a2371f8f98142b4115e92b1f
  ManifestSystem 0e7b2c73aa17600e0a7730d855d918b4
  ManifestType d4d7fe6a7722743af73d0848be830e04
  Mood 89f52f47d857baf59a835f155022c894
  NoManifest e94596ffd7352e0e0c9de30b8b5e034b
  Number d524767ed256fd8fb6411842c02ad522
  Person 87552d4bd640161dc918422e1f989f36
  Polarity b165a208777adb6384e8aa49b7841cdc
  PostParticle 051ff9038fce71d768ebdb0aef6d2dd4
  PreParticle baa2d75778bba4584f1d021ffebf5a10
  Prefix 631fddd0577e039670e847f15dc395e5
  Specificity 43df515dcdadd0ea11740b17c269f784
  Suffix 9f592c7bd6fb2cf679abca7c05f8cc1a
  Tense 004b6b4805c5a693db94c0d4a7a3616e
  Topic 324933ffc8ee2e478eb9c9c4b97f7e1c
  Transitivity aa30e8d12dfa43bab7ebbfaa9a7bbce4
  Voice 523b90b12350f06385d4da5905742868
  Volition 79163f2537538d5ab28ad5d835b8900a
  aniSys bf2169ba387ab3638393b84dee90c49a
  aspSys 486a8c668bebed30f10df64f6643cd35
  casSys b6253f264cf04b70ed6733ef84265597
  cluSys 1cf3ddc5b66c5059d89d1759026d76ef
  defSys 791f6bb49015e490e4fbaca91284d8c2
  eviSys 5f339467cb57a3613471b8a6ebc540f8
  genSys c2d6181902bbf995c74be89480b26002
  honSys af70c7f20f205d30889f82d82d0aeb97
  mooSys 51b1a25ce92a0ae2667748a51389e595
  numSys 179377656af013c07c11434888cc557e
  perSys 5da2ccc97fb2c77d51c790b5bcb3cec4
  polSys 36b2afcffd5ef0a1cda1beadc367dc13
  speSys b7c67cfc67167d978d2235118f373623
  tenSys b03397c4d00cd45069a68405c6b06dd1
  topSys 6853f117ed274e895a39b6a3602af3f2
  traSys d27da8882b7759d098740802420a9feb
  voiSys 38713f13dcf55bcb8c1bbbe8a724c366
  volSys 24176821604239ceb5a5e4fb709e7dfc
import  -/  InflectionGen c1cb37f0c31cecd6d37693176b3a15d4
  exports: 03d05fe273a0eda1756451cde32687cd
import  -/  PhonemeData 2bc4225bb63ccf0a16ac10bab410e892
  exports: 8834c83badd5837275d7ec1bbd2f424a
  Phoneme 725a483aa2dd4b7c0473c29cf990b878
import  -/  WordGen 9bf7a76709452e55efdea81abbb45e88
  exports: 1589ce37a6d72194346fd41146c2ac82
  makeMorpheme 247fc6235f954af6f2d35985916af007
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  random-extras-0.19@rando_11jAc932BDRD7ydjCrRr4L:Data.Random.Extras 5dc1684f88e3f2655bfb5d7aca60bf5c
import  -/  random-fu-0.2.7.0@rando_HO0DW1nA2fDCxZJ62mvJHr:Data.Random 355d6844bb1b3189cb19ec0007f6f130
import  -/  rvar-0.2.0.3@rvar_HDSuhGFxwNTDX4EfF6w8WG:Data.RVar 9b7fbdb5f1778e76b8a65f45a17cccb1
2503a01e02577653a1bdb8cfa00f0b2f
  $sreplicateM2 ::
    [Data.RVar.RVarT Data.Functor.Identity.Identity a3]
    -> forall b.
       ([a3] -> b)
       -> (forall a.
           Control.Monad.Prompt.Lift
             Data.Random.Source.Internal.Prim.Prim
             Data.Functor.Identity.Identity
             a
           -> (a -> b) -> b)
       -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,C(U)><L,U> -}
21ad0d868c468fed87a2fc86a9ec57d9
  $wmakeLexicalInflection ::
    [PhonemeData.Phoneme]
    -> [[PhonemeData.Phoneme]]
    -> InflectionData.InflectionSystem
    -> GrammarData.LexCat
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> Data.RVar.RVar
         (GrammarData.LexCat,
          [InflectionData.ManifestSystem],
          [InflectionData.ManifestSystem],
          [InflectionData.ManifestSystem],
          [InflectionData.ManifestSystem])
  {- Arity: 8,
     Strictness: <L,U><L,U><L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ w :: [PhonemeData.Phoneme]
                   w1 :: [[PhonemeData.Phoneme]]
                   w2 :: InflectionData.InflectionSystem
                   ww :: GrammarData.LexCat
                   ww1 :: GHC.Types.Int
                   ww2 :: GHC.Types.Int
                   ww3 :: GHC.Types.Int
                   ww4 :: GHC.Types.Int ->
                 let {
                   m1 :: Data.RVar.RVarT
                           Data.Functor.Identity.Identity [InflectionData.ManifestSystem]
                   = case ww1 of ww5 { GHC.Types.I# ww6 ->
                     MorphologyGen.$wmakePreParticleSystems ww ww6 w w1 w2 }
                 } in
                 let {
                   m2 :: Data.RVar.RVarT
                           Data.Functor.Identity.Identity [InflectionData.ManifestSystem]
                   = case ww2 of ww5 { GHC.Types.I# ww6 ->
                     MorphologyGen.$wmakePostParticleSystems ww ww6 w w1 w2 }
                 } in
                 let {
                   m4 :: Data.RVar.RVarT
                           Data.Functor.Identity.Identity [InflectionData.ManifestSystem]
                   = case ww3 of ww5 { GHC.Types.I# ww6 ->
                     MorphologyGen.$wmakePrefixSystems ww ww6 w w1 w2 }
                 } in
                 let {
                   m5 :: Data.RVar.RVarT
                           Data.Functor.Identity.Identity [InflectionData.ManifestSystem]
                   = case ww4 of ww5 { GHC.Types.I# ww6 ->
                     MorphologyGen.$wmakeSuffixSystems ww ww6 w w1 w2 }
                 } in
                 (\ @ b1
                    eta :: (GrammarData.LexCat,
                            [InflectionData.ManifestSystem],
                            [InflectionData.ManifestSystem],
                            [InflectionData.ManifestSystem],
                            [InflectionData.ManifestSystem])
                           -> b1
                    eta1 :: forall a6.
                            Control.Monad.Prompt.Lift
                              Data.Random.Source.Internal.Prim.Prim
                              Data.Functor.Identity.Identity
                              a6
                            -> (a6 -> b1) -> b1 ->
                  m1
                    `cast`
                  (Trans
                       (Trans
                            (Data.RVar.NTCo:RVarT[0] <Data.Functor.Identity.Identity>_N)
                            (Control.Monad.Prompt.NTCo:PromptT[0]
                                 <Data.Random.Source.Internal.Prim.Prim>_R
                                 <Data.Functor.Identity.Identity>_R) <[InflectionData.ManifestSystem]>_N)
                       (Control.Monad.Prompt.NTCo:Prompt[0]
                            <Control.Monad.Prompt.Lift
                               Data.Random.Source.Internal.Prim.Prim
                               Data.Functor.Identity.Identity>_R
                            <[InflectionData.ManifestSystem]>_R))
                    @ b1
                    (\ x :: [InflectionData.ManifestSystem] ->
                     case x of x1 { DEFAULT ->
                     m2
                       `cast`
                     (Trans
                          (Trans
                               (Data.RVar.NTCo:RVarT[0] <Data.Functor.Identity.Identity>_N)
                               (Control.Monad.Prompt.NTCo:PromptT[0]
                                    <Data.Random.Source.Internal.Prim.Prim>_R
                                    <Data.Functor.Identity.Identity>_R) <[InflectionData.ManifestSystem]>_N)
                          (Control.Monad.Prompt.NTCo:Prompt[0]
                               <Control.Monad.Prompt.Lift
                                  Data.Random.Source.Internal.Prim.Prim
                                  Data.Functor.Identity.Identity>_R
                               <[InflectionData.ManifestSystem]>_R))
                       @ b1
                       (\ x2 :: [InflectionData.ManifestSystem] ->
                        case x2 of x3 { DEFAULT ->
                        m4
                          `cast`
                        (Trans
                             (Trans
                                  (Data.RVar.NTCo:RVarT[0] <Data.Functor.Identity.Identity>_N)
                                  (Control.Monad.Prompt.NTCo:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R) <[InflectionData.ManifestSystem]>_N)
                             (Control.Monad.Prompt.NTCo:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[InflectionData.ManifestSystem]>_R))
                          @ b1
                          (\ x4 :: [InflectionData.ManifestSystem] ->
                           case x4 of x5 { DEFAULT ->
                           m5
                             `cast`
                           (Trans
                                (Trans
                                     (Data.RVar.NTCo:RVarT[0] <Data.Functor.Identity.Identity>_N)
                                     (Control.Monad.Prompt.NTCo:PromptT[0]
                                          <Data.Random.Source.Internal.Prim.Prim>_R
                                          <Data.Functor.Identity.Identity>_R) <[InflectionData.ManifestSystem]>_N)
                                (Control.Monad.Prompt.NTCo:Prompt[0]
                                     <Control.Monad.Prompt.Lift
                                        Data.Random.Source.Internal.Prim.Prim
                                        Data.Functor.Identity.Identity>_R
                                     <[InflectionData.ManifestSystem]>_R))
                             @ b1
                             (\ x6 :: [InflectionData.ManifestSystem] ->
                              case x6 of x7 { DEFAULT -> eta (ww, x1, x3, x5, x7) })
                             eta1 })
                          eta1 })
                       eta1 })
                    eta1)
                   `cast`
                 (Trans
                      (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                <Control.Monad.Prompt.Lift
                                   Data.Random.Source.Internal.Prim.Prim
                                   Data.Functor.Identity.Identity>_R
                                <(GrammarData.LexCat,
                                  [InflectionData.ManifestSystem],
                                  [InflectionData.ManifestSystem],
                                  [InflectionData.ManifestSystem],
                                  [InflectionData.ManifestSystem])>_R))
                      (Trans
                           (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                     <Data.Random.Source.Internal.Prim.Prim>_R
                                     <Data.Functor.Identity.Identity>_R))
                           (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <(GrammarData.LexCat,
                                                                                                [InflectionData.ManifestSystem],
                                                                                                [InflectionData.ManifestSystem],
                                                                                                [InflectionData.ManifestSystem],
                                                                                                [InflectionData.ManifestSystem])>_N))) -}
afdd0db4ad2a0b9dffcd60cc772ac92f
  $wmakePostParticleSystems ::
    GrammarData.LexCat
    -> GHC.Prim.Int#
    -> [PhonemeData.Phoneme]
    -> [[PhonemeData.Phoneme]]
    -> InflectionData.InflectionSystem
    -> Data.RVar.RVar [InflectionData.ManifestSystem]
  {- Arity: 5,
     Strictness: <L,U><S,U><L,U><L,U><L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: [0] -}
7d67097aa9cf65504847ff39eca18b1c
  $wmakePreParticleSystems ::
    GrammarData.LexCat
    -> GHC.Prim.Int#
    -> [PhonemeData.Phoneme]
    -> [[PhonemeData.Phoneme]]
    -> InflectionData.InflectionSystem
    -> Data.RVar.RVar [InflectionData.ManifestSystem]
  {- Arity: 5,
     Strictness: <L,U><S,U><L,U><L,U><L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: [0] -}
fd9ec86d9350ff53fad08462e099b6d5
  $wmakePrefixSystems ::
    GrammarData.LexCat
    -> GHC.Prim.Int#
    -> [PhonemeData.Phoneme]
    -> [[PhonemeData.Phoneme]]
    -> InflectionData.InflectionSystem
    -> Data.RVar.RVar [InflectionData.ManifestSystem]
  {- Arity: 5,
     Strictness: <L,U><S,U><L,U><L,U><L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: [0] -}
060594d05c95224e247fa2e316a14f16
  $wmakeSuffixSystems ::
    GrammarData.LexCat
    -> GHC.Prim.Int#
    -> [PhonemeData.Phoneme]
    -> [[PhonemeData.Phoneme]]
    -> InflectionData.InflectionSystem
    -> Data.RVar.RVar [InflectionData.ManifestSystem]
  {- Arity: 5,
     Strictness: <L,U><S,U><L,U><L,U><L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: [0] -}
5decb3fac3e9cf2cb78e51ed40a13149
  cleanGrammarSys ::
    InflectionData.InflectionSystem
    -> GrammarData.LexCat
    -> InflectionData.ManifestType
    -> GHC.Types.Int
    -> ([InflectionData.Manifest InflectionData.Gender],
        [InflectionData.Manifest InflectionData.Animacy],
        [InflectionData.Manifest InflectionData.Case],
        [InflectionData.Manifest InflectionData.Number],
        [InflectionData.Manifest InflectionData.Definiteness],
        [InflectionData.Manifest InflectionData.Specificity],
        [InflectionData.Manifest InflectionData.Topic],
        [InflectionData.Manifest InflectionData.Person],
        [InflectionData.Manifest InflectionData.Clusivity],
        [InflectionData.Manifest InflectionData.Honorific],
        [InflectionData.Manifest InflectionData.Polarity],
        [InflectionData.Manifest InflectionData.Tense],
        [InflectionData.Manifest InflectionData.Aspect],
        [InflectionData.Manifest InflectionData.Mood],
        [InflectionData.Manifest InflectionData.Voice],
        [InflectionData.Manifest InflectionData.Evidentiality],
        [InflectionData.Manifest InflectionData.Transitivity],
        [InflectionData.Manifest InflectionData.Volition])
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)><L,U><L,U><L,U(U)> -}
d6ef9fe1e55f28343c10cd9b7ceecc42
  makeLexicalInflection ::
    [PhonemeData.Phoneme]
    -> [[PhonemeData.Phoneme]]
    -> InflectionData.InflectionSystem
    -> (GrammarData.LexCat,
        GHC.Types.Int,
        GHC.Types.Int,
        GHC.Types.Int,
        GHC.Types.Int)
    -> Data.RVar.RVar
         (GrammarData.LexCat,
          [InflectionData.ManifestSystem],
          [InflectionData.ManifestSystem],
          [InflectionData.ManifestSystem],
          [InflectionData.ManifestSystem])
  {- Arity: 4,
     Strictness: <L,U><L,U><L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U(U,1*U(U),1*U(U),1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: [PhonemeData.Phoneme]
                   w1 :: [[PhonemeData.Phoneme]]
                   w2 :: InflectionData.InflectionSystem
                   w3 :: (GrammarData.LexCat,
                          GHC.Types.Int,
                          GHC.Types.Int,
                          GHC.Types.Int,
                          GHC.Types.Int) ->
                 case w3 of ww { (,,,,) ww1 ww2 ww3 ww4 ww5 ->
                 MorphologyGen.$wmakeLexicalInflection
                   w
                   w1
                   w2
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5 }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

