
==================== FINAL INTERFACE ====================
2016-11-27 12:05:41.602694 UTC

interface conla_1eA9qWUPH9nBowcXqqaV8r:InflectionData [orphan module] 7103
  interface hash: 65a4bd6a145df4ff5e5b863cc9be85ec
  ABI hash: 1d3c9a42a800e5c12f0b2505845bd490
  export-list hash: 14704a3a2d793893d80490c9a5c3fd3e
  orphan hash: d295e057943ba3ed6ce2beebe4c46282
  flag hash: f6794f28a1d9a693363b149a5d158050
  sig of: Nothing
  used TH splices: False
  where
exports:
  InflectionData.Animacy{InflectionData.AN InflectionData.HUM InflectionData.INAN InflectionData.NHUM InflectionData.UANI InflectionData.ZO}
  InflectionData.Aspect{InflectionData.CONT InflectionData.HAB InflectionData.IPFV InflectionData.NNPROG InflectionData.NPROG InflectionData.PFV InflectionData.PROG InflectionData.UASP}
  InflectionData.Case{InflectionData.ABE InflectionData.ABL InflectionData.ABS InflectionData.ABS2 InflectionData.ABS3 InflectionData.ACC InflectionData.ADP InflectionData.BEN InflectionData.CAUS InflectionData.COMIT InflectionData.COMP InflectionData.DAT InflectionData.DIR InflectionData.DISTR InflectionData.DRT1 InflectionData.DRT2 InflectionData.DTR InflectionData.EQU InflectionData.ERG InflectionData.ERG2 InflectionData.GEN InflectionData.IDEN InflectionData.INDIR InflectionData.INS InflectionData.INSCOMIT InflectionData.INTR InflectionData.LAT InflectionData.LOC InflectionData.MTR InflectionData.NOM InflectionData.NOM2 InflectionData.OBJ InflectionData.OBL1 InflectionData.OBL2 InflectionData.OBL3 InflectionData.OBL4 InflectionData.OBL5 InflectionData.OBL6 InflectionData.ORN InflectionData.PART InflectionData.PEG InflectionData.POSS InflectionData.POST InflectionData.PREP InflectionData.PRIM InflectionData.SEC InflectionData.TR InflectionData.UCAS InflectionData.VOC}
  InflectionData.Definiteness{InflectionData.DEF InflectionData.INDF InflectionData.UDEF}
  InflectionData.Evidentiality{InflectionData.ASS InflectionData.AUD InflectionData.EXP InflectionData.HSY InflectionData.INFER InflectionData.NVIS InflectionData.QUO InflectionData.REP InflectionData.UEVI InflectionData.VIS}
  InflectionData.Express{InflectionData.Express InflectionData.NoExpress InflectionData.getExp}
  InflectionData.Gender{InflectionData.COM InflectionData.F InflectionData.M InflectionData.N InflectionData.UGEN}
  InflectionData.Honorific{InflectionData.FAM InflectionData.FORM InflectionData.NEU InflectionData.UHON}
  InflectionData.InflectionSystem{InflectionData.InflectionSystem InflectionData.aniSys InflectionData.aspSys InflectionData.casSys InflectionData.defSys InflectionData.eviSys InflectionData.genSys InflectionData.honSys InflectionData.mooSys InflectionData.numSys InflectionData.perSys InflectionData.polSys InflectionData.speSys InflectionData.tenSys InflectionData.topSys InflectionData.traSys InflectionData.voiSys InflectionData.volSys}
  InflectionData.LexCat{InflectionData.Adj InflectionData.Adpo InflectionData.Adv InflectionData.Comp InflectionData.Det InflectionData.Infl InflectionData.Noun InflectionData.Obj InflectionData.Pron InflectionData.Subj InflectionData.Verb}
  InflectionData.Manifest{InflectionData.Manifest InflectionData.NoManifest}
  InflectionData.ManifestSystem{InflectionData.ManifestSystem InflectionData.manSysCombos InflectionData.manSysLC InflectionData.manSysType}
  InflectionData.ManifestType{InflectionData.Particle InflectionData.Prefix InflectionData.Suffix}
  InflectionData.Mood{InflectionData.COND InflectionData.DEO InflectionData.EPIS InflectionData.IMP InflectionData.IND InflectionData.IRR InflectionData.JUS InflectionData.OPT InflectionData.POT InflectionData.SBJV InflectionData.UMOO}
  InflectionData.Number{InflectionData.DU InflectionData.PA InflectionData.PL InflectionData.SG InflectionData.TRI InflectionData.UNUM}
  InflectionData.Person{InflectionData.FIRST InflectionData.FSTEXCL InflectionData.FSTINCL InflectionData.SECOND InflectionData.THIRD InflectionData.THRDOBV InflectionData.THRDPROX InflectionData.UPER}
  InflectionData.Polarity{InflectionData.AFF InflectionData.NEG InflectionData.UPOL}
  InflectionData.Specificity{InflectionData.NSPEC InflectionData.SPEC InflectionData.USPE}
  InflectionData.Tense{InflectionData.AFUT InflectionData.AFUT1 InflectionData.AFUT2 InflectionData.AFUT3 InflectionData.APRS InflectionData.APST InflectionData.FUT InflectionData.FUTPER InflectionData.PFUT InflectionData.PPRS InflectionData.PPST InflectionData.PPST1 InflectionData.PPST2 InflectionData.PPST3 InflectionData.PRS InflectionData.PRSPER InflectionData.PST InflectionData.PSTPER InflectionData.UTEN}
  InflectionData.Topic{InflectionData.NTOP InflectionData.TOP InflectionData.UTOP}
  InflectionData.Transitivity{InflectionData.DITRANS InflectionData.MTRANS InflectionData.NTRANS InflectionData.TRANS InflectionData.UTRA}
  InflectionData.Voice{InflectionData.ACTIVE InflectionData.MIDDLE InflectionData.PASSIVE InflectionData.UVOI}
  InflectionData.Volition{InflectionData.NVOL InflectionData.UVOL InflectionData.VOL}
module dependencies: OtherData PhonemeData
package dependencies: base-4.8.2.0* ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Monoid
                         base-4.8.2.0:Data.Type.Equality base-4.8.2.0:GHC.Generics
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.Enum debc6de3086023a15993ab0cecffb90b
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:GHC.Read b423b4506a014855edbd329b567629f3
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  base-4.8.2.0:Text.ParserCombinators.ReadPrec 2590e0e0a57a86ac7c62727f4d868dd2
import  -/  base-4.8.2.0:Text.Read.Lex 724ca44ddd38ddc5f47a501d62736c26
import  -/  OtherData 37db5ddc38f8875c91a0806c561b30cd
  exports: f505dec72f229982fb85e59b44566731
import  -/  PhonemeData 408b6488aa28ce44ef05793241013f6f
  exports: c711b36c9b7415c6d00ea9681146dbcb
  Morpheme 383812fe40de4e6210cee815bfc93a6d
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
406c10c56e8fc899b6f590771b3372e0
  $fEnumLexCat :: GHC.Enum.Enum InflectionData.LexCat
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.LexCat
                  InflectionData.$fEnumLexCat_$csucc
                  InflectionData.$fEnumLexCat_$cpred
                  InflectionData.$fEnumLexCat_$ctoEnum
                  InflectionData.$fEnumLexCat_$cfromEnum
                  InflectionData.$fEnumLexCat_$cenumFrom
                  InflectionData.$fEnumLexCat_$cenumFromThen
                  InflectionData.$fEnumLexCat_$cenumFromTo
                  InflectionData.$fEnumLexCat_$cenumFromThenTo -}
406c10c56e8fc899b6f590771b3372e0
  $fEnumLexCat1 :: GHC.Prim.Int# -> InflectionData.LexCat
  {- Arity: 1, Strictness: <L,U>b -}
406c10c56e8fc899b6f590771b3372e0
  $fEnumLexCat2 :: InflectionData.LexCat
  {- Strictness: b -}
406c10c56e8fc899b6f590771b3372e0
  $fEnumLexCat3 :: InflectionData.LexCat
  {- Strictness: b -}
406c10c56e8fc899b6f590771b3372e0
  $fEnumLexCat_$cenumFrom ::
    InflectionData.LexCat -> [InflectionData.LexCat]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ a41 :: InflectionData.LexCat ->
                 case a41 of x1 { DEFAULT ->
                 let {
                   x0 :: GHC.Prim.Int#
                   = GHC.Prim.dataToTag# @ InflectionData.LexCat x1
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.># x0 10) of wild {
                   GHC.Types.False -> InflectionData.$fEnumLexCat_go x0
                   GHC.Types.True -> GHC.Types.[] @ InflectionData.LexCat } }) -}
406c10c56e8fc899b6f590771b3372e0
  $fEnumLexCat_$cenumFromThen ::
    InflectionData.LexCat
    -> InflectionData.LexCat -> [InflectionData.LexCat]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a41 :: InflectionData.LexCat
                   b :: InflectionData.LexCat ->
                 case a41 of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 let {
                   a# :: GHC.Prim.Int#
                   = GHC.Prim.dataToTag# @ InflectionData.LexCat x1
                 } in
                 let {
                   b# :: GHC.Prim.Int#
                   = GHC.Prim.dataToTag# @ InflectionData.LexCat x2
                 } in
                 let {
                   $j :: GHC.Prim.Int# -> [InflectionData.LexCat]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ y :: GHC.Prim.Int#[OneShot] ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# b# a#) of wild {
                       GHC.Types.False
                       -> GHC.Enum.efdtIntDnFB
                            @ [InflectionData.LexCat]
                            InflectionData.$fEnumLexCat_c1
                            (GHC.Types.[] @ InflectionData.LexCat)
                            a#
                            b#
                            y
                       GHC.Types.True
                       -> GHC.Enum.efdtIntUpFB
                            @ [InflectionData.LexCat]
                            InflectionData.$fEnumLexCat_c1
                            (GHC.Types.[] @ InflectionData.LexCat)
                            a#
                            b#
                            y }
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.># a# b#) of wild {
                   GHC.Types.False -> $j 10 GHC.Types.True -> $j 0 } } }) -}
406c10c56e8fc899b6f590771b3372e0
  $fEnumLexCat_$cenumFromThenTo ::
    InflectionData.LexCat
    -> InflectionData.LexCat
    -> InflectionData.LexCat
    -> [InflectionData.LexCat]
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U>,
     Unfolding: (\ x1 :: InflectionData.LexCat
                   x2 :: InflectionData.LexCat
                   y :: InflectionData.LexCat ->
                 case x1 of x4 { DEFAULT ->
                 case x2 of x5 { DEFAULT ->
                 case y of x6 { DEFAULT ->
                 let {
                   x7 :: GHC.Prim.Int#
                   = GHC.Prim.dataToTag# @ InflectionData.LexCat x4
                 } in
                 let {
                   x8 :: GHC.Prim.Int#
                   = GHC.Prim.dataToTag# @ InflectionData.LexCat x5
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# x8 x7) of wild {
                   GHC.Types.False
                   -> GHC.Enum.efdtIntDnFB
                        @ [InflectionData.LexCat]
                        InflectionData.$fEnumLexCat_c
                        (GHC.Types.[] @ InflectionData.LexCat)
                        x7
                        x8
                        (GHC.Prim.dataToTag# @ InflectionData.LexCat x6)
                   GHC.Types.True
                   -> GHC.Enum.efdtIntUpFB
                        @ [InflectionData.LexCat]
                        InflectionData.$fEnumLexCat_c
                        (GHC.Types.[] @ InflectionData.LexCat)
                        x7
                        x8
                        (GHC.Prim.dataToTag# @ InflectionData.LexCat x6) } } } }) -}
406c10c56e8fc899b6f590771b3372e0
  $fEnumLexCat_$cenumFromTo ::
    InflectionData.LexCat
    -> InflectionData.LexCat -> [InflectionData.LexCat]
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ x :: InflectionData.LexCat
                   y :: InflectionData.LexCat ->
                 case x of x1 { DEFAULT ->
                 case y of x2 { DEFAULT ->
                 let {
                   x0 :: GHC.Prim.Int#
                   = GHC.Prim.dataToTag# @ InflectionData.LexCat x1
                 } in
                 let {
                   y1 :: GHC.Prim.Int#
                   = GHC.Prim.dataToTag# @ InflectionData.LexCat x2
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.># x0 y1) of wild {
                   GHC.Types.False
                   -> letrec {
                        go1 :: GHC.Prim.Int# -> [InflectionData.LexCat]
                          {- Arity: 1, Strictness: <L,U> -}
                        = \ x3 :: GHC.Prim.Int# ->
                          GHC.Types.:
                            @ InflectionData.LexCat
                            (case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# x3 0) of wild1 {
                               GHC.Types.False -> InflectionData.$fEnumLexCat1 x3
                               GHC.Types.True
                               -> case GHC.Prim.tagToEnum#
                                         @ GHC.Types.Bool
                                         (GHC.Prim.<=# x3 10) of wild2 {
                                    GHC.Types.False -> InflectionData.$fEnumLexCat1 x3
                                    GHC.Types.True
                                    -> GHC.Prim.tagToEnum# @ InflectionData.LexCat x3 } })
                            (case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.==# x3 y1) of wild1 {
                               GHC.Types.False -> go1 (GHC.Prim.+# x3 1)
                               GHC.Types.True -> GHC.Types.[] @ InflectionData.LexCat })
                      } in
                      go1 x0
                   GHC.Types.True -> GHC.Types.[] @ InflectionData.LexCat } } }) -}
406c10c56e8fc899b6f590771b3372e0
  $fEnumLexCat_$cfromEnum :: InflectionData.LexCat -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ a41 :: InflectionData.LexCat ->
                 case a41 of x1 { DEFAULT ->
                 GHC.Types.I# (GHC.Prim.dataToTag# @ InflectionData.LexCat x1) }) -}
406c10c56e8fc899b6f590771b3372e0
  $fEnumLexCat_$cpred ::
    InflectionData.LexCat -> InflectionData.LexCat
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a41 :: InflectionData.LexCat ->
                 case a41 of x1 { DEFAULT ->
                 case GHC.Prim.dataToTag# @ InflectionData.LexCat x1 of wild {
                   DEFAULT
                   -> GHC.Prim.tagToEnum#
                        @ InflectionData.LexCat
                        (GHC.Prim.+# wild (-1))
                   0 -> InflectionData.$fEnumLexCat2 } }) -}
406c10c56e8fc899b6f590771b3372e0
  $fEnumLexCat_$csucc ::
    InflectionData.LexCat -> InflectionData.LexCat
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a41 :: InflectionData.LexCat ->
                 case a41 of x1 { DEFAULT ->
                 case GHC.Prim.dataToTag# @ InflectionData.LexCat x1 of wild {
                   DEFAULT
                   -> GHC.Prim.tagToEnum# @ InflectionData.LexCat (GHC.Prim.+# wild 1)
                   10 -> InflectionData.$fEnumLexCat3 } }) -}
406c10c56e8fc899b6f590771b3372e0
  $fEnumLexCat_$ctoEnum :: GHC.Types.Int -> InflectionData.LexCat
  {- Arity: 1, Strictness: <S,1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: GHC.Types.Int ->
                 case w of ww { GHC.Types.I# ww1 ->
                 InflectionData.$w$ctoEnum ww1 }) -}
406c10c56e8fc899b6f590771b3372e0
  $fEnumLexCat_c ::
    GHC.Types.Int -> [InflectionData.LexCat] -> [InflectionData.LexCat]
  {- Arity: 2, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int ys :: [InflectionData.LexCat] ->
                 GHC.Types.:
                   @ InflectionData.LexCat
                   (InflectionData.$fEnumLexCat_$ctoEnum x)
                   ys) -}
406c10c56e8fc899b6f590771b3372e0
  $fEnumLexCat_c1 ::
    GHC.Types.Int -> [InflectionData.LexCat] -> [InflectionData.LexCat]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int ys :: [InflectionData.LexCat] ->
                 GHC.Types.:
                   @ InflectionData.LexCat
                   (case x of wild { GHC.Types.I# a41 ->
                    GHC.Prim.tagToEnum# @ InflectionData.LexCat a41 })
                   ys) -}
406c10c56e8fc899b6f590771b3372e0
  $fEnumLexCat_go :: GHC.Prim.Int# -> [InflectionData.LexCat]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
aa3ecb4ebc2c96223f357906599369a9
  $fEq(,,,,,,,,,,,,,,,,) ::
    (GHC.Classes.Eq a, GHC.Classes.Eq b, GHC.Classes.Eq c,
     GHC.Classes.Eq d, GHC.Classes.Eq e, GHC.Classes.Eq f,
     GHC.Classes.Eq g, GHC.Classes.Eq h, GHC.Classes.Eq i,
     GHC.Classes.Eq j, GHC.Classes.Eq k, GHC.Classes.Eq l,
     GHC.Classes.Eq m, GHC.Classes.Eq n, GHC.Classes.Eq o,
     GHC.Classes.Eq p, GHC.Classes.Eq q) =>
    GHC.Classes.Eq (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)
  DFunId[0]
  {- Arity: 17, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a41
                      @ b
                      @ c
                      @ d
                      @ e
                      @ f
                      @ g
                      @ h
                      @ i
                      @ j
                      @ k
                      @ l
                      @ m
                      @ n
                      @ o
                      @ p
                      @ q
                      $dEq :: GHC.Classes.Eq a41
                      $dEq1 :: GHC.Classes.Eq b
                      $dEq2 :: GHC.Classes.Eq c
                      $dEq3 :: GHC.Classes.Eq d
                      $dEq4 :: GHC.Classes.Eq e
                      $dEq5 :: GHC.Classes.Eq f
                      $dEq6 :: GHC.Classes.Eq g
                      $dEq7 :: GHC.Classes.Eq h
                      $dEq8 :: GHC.Classes.Eq i
                      $dEq9 :: GHC.Classes.Eq j
                      $dEq10 :: GHC.Classes.Eq k
                      $dEq11 :: GHC.Classes.Eq l
                      $dEq12 :: GHC.Classes.Eq m
                      $dEq13 :: GHC.Classes.Eq n
                      $dEq14 :: GHC.Classes.Eq o
                      $dEq15 :: GHC.Classes.Eq p
                      $dEq16 :: GHC.Classes.Eq q.
                  @ (a41, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)
                  (InflectionData.$fEq(,,,,,,,,,,,,,,,,)_$c==
                     @ a41
                     @ b
                     @ c
                     @ d
                     @ e
                     @ f
                     @ g
                     @ h
                     @ i
                     @ j
                     @ k
                     @ l
                     @ m
                     @ n
                     @ o
                     @ p
                     @ q
                     $dEq
                     $dEq1
                     $dEq2
                     $dEq3
                     $dEq4
                     $dEq5
                     $dEq6
                     $dEq7
                     $dEq8
                     $dEq9
                     $dEq10
                     $dEq11
                     $dEq12
                     $dEq13
                     $dEq14
                     $dEq15
                     $dEq16)
                  (InflectionData.$fEq(,,,,,,,,,,,,,,,,)_$c/=
                     @ a41
                     @ b
                     @ c
                     @ d
                     @ e
                     @ f
                     @ g
                     @ h
                     @ i
                     @ j
                     @ k
                     @ l
                     @ m
                     @ n
                     @ o
                     @ p
                     @ q
                     $dEq
                     $dEq1
                     $dEq2
                     $dEq3
                     $dEq4
                     $dEq5
                     $dEq6
                     $dEq7
                     $dEq8
                     $dEq9
                     $dEq10
                     $dEq11
                     $dEq12
                     $dEq13
                     $dEq14
                     $dEq15
                     $dEq16) -}
39d8073a4aed2e03b15d6ccabeffde0e
  $fEq(,,,,,,,,,,,,,,,,)_$c/= ::
    (GHC.Classes.Eq a, GHC.Classes.Eq b, GHC.Classes.Eq c,
     GHC.Classes.Eq d, GHC.Classes.Eq e, GHC.Classes.Eq f,
     GHC.Classes.Eq g, GHC.Classes.Eq h, GHC.Classes.Eq i,
     GHC.Classes.Eq j, GHC.Classes.Eq k, GHC.Classes.Eq l,
     GHC.Classes.Eq m, GHC.Classes.Eq n, GHC.Classes.Eq o,
     GHC.Classes.Eq p, GHC.Classes.Eq q) =>
    (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)
    -> (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)
    -> GHC.Types.Bool
  {- Arity: 19, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Unfolding: InlineRule (19, True, False)
                (\ @ a41
                   @ b
                   @ c
                   @ d
                   @ e
                   @ f
                   @ g
                   @ h
                   @ i
                   @ j
                   @ k
                   @ l
                   @ m
                   @ n
                   @ o
                   @ p
                   @ q
                   $dEq :: GHC.Classes.Eq a41
                   $dEq1 :: GHC.Classes.Eq b
                   $dEq2 :: GHC.Classes.Eq c
                   $dEq3 :: GHC.Classes.Eq d
                   $dEq4 :: GHC.Classes.Eq e
                   $dEq5 :: GHC.Classes.Eq f
                   $dEq6 :: GHC.Classes.Eq g
                   $dEq7 :: GHC.Classes.Eq h
                   $dEq8 :: GHC.Classes.Eq i
                   $dEq9 :: GHC.Classes.Eq j
                   $dEq10 :: GHC.Classes.Eq k
                   $dEq11 :: GHC.Classes.Eq l
                   $dEq12 :: GHC.Classes.Eq m
                   $dEq13 :: GHC.Classes.Eq n
                   $dEq14 :: GHC.Classes.Eq o
                   $dEq15 :: GHC.Classes.Eq p
                   $dEq16 :: GHC.Classes.Eq q
                   a42 :: (a41, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)
                   b1 :: (a41, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) ->
                 case InflectionData.$fEq(,,,,,,,,,,,,,,,,)_$c==
                        @ a41
                        @ b
                        @ c
                        @ d
                        @ e
                        @ f
                        @ g
                        @ h
                        @ i
                        @ j
                        @ k
                        @ l
                        @ m
                        @ n
                        @ o
                        @ p
                        @ q
                        $dEq
                        $dEq1
                        $dEq2
                        $dEq3
                        $dEq4
                        $dEq5
                        $dEq6
                        $dEq7
                        $dEq8
                        $dEq9
                        $dEq10
                        $dEq11
                        $dEq12
                        $dEq13
                        $dEq14
                        $dEq15
                        $dEq16
                        a42
                        b1 of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
ef693028f1b10f72af72c4068da28736
  $fEq(,,,,,,,,,,,,,,,,)_$c== ::
    (GHC.Classes.Eq a, GHC.Classes.Eq b, GHC.Classes.Eq c,
     GHC.Classes.Eq d, GHC.Classes.Eq e, GHC.Classes.Eq f,
     GHC.Classes.Eq g, GHC.Classes.Eq h, GHC.Classes.Eq i,
     GHC.Classes.Eq j, GHC.Classes.Eq k, GHC.Classes.Eq l,
     GHC.Classes.Eq m, GHC.Classes.Eq n, GHC.Classes.Eq o,
     GHC.Classes.Eq p, GHC.Classes.Eq q) =>
    (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)
    -> (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)
    -> GHC.Types.Bool
  {- Arity: 19, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (19, True, False)
                (\ @ a41
                   @ b
                   @ c
                   @ d
                   @ e
                   @ f
                   @ g
                   @ h
                   @ i
                   @ j
                   @ k
                   @ l
                   @ m
                   @ n
                   @ o
                   @ p
                   @ q
                   w :: GHC.Classes.Eq a41
                   w1 :: GHC.Classes.Eq b
                   w2 :: GHC.Classes.Eq c
                   w3 :: GHC.Classes.Eq d
                   w4 :: GHC.Classes.Eq e
                   w5 :: GHC.Classes.Eq f
                   w6 :: GHC.Classes.Eq g
                   w7 :: GHC.Classes.Eq h
                   w8 :: GHC.Classes.Eq i
                   w9 :: GHC.Classes.Eq j
                   w10 :: GHC.Classes.Eq k
                   w11 :: GHC.Classes.Eq l
                   w12 :: GHC.Classes.Eq m
                   w13 :: GHC.Classes.Eq n
                   w14 :: GHC.Classes.Eq o
                   w15 :: GHC.Classes.Eq p
                   w16 :: GHC.Classes.Eq q
                   w17 :: (a41, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)
                   w18 :: (a41, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) ->
                 case w17 of ww { (,,,,,,,,,,,,,,,,) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ->
                 case w18 of ww18 { (,,,,,,,,,,,,,,,,) ww19 ww20 ww21 ww22 ww23 ww24 ww25 ww26 ww27 ww28 ww29 ww30 ww31 ww32 ww33 ww34 ww35 ->
                 InflectionData.$w$c==
                   @ a41
                   @ b
                   @ c
                   @ d
                   @ e
                   @ f
                   @ g
                   @ h
                   @ i
                   @ j
                   @ k
                   @ l
                   @ m
                   @ n
                   @ o
                   @ p
                   @ q
                   w
                   w1
                   w2
                   w3
                   w4
                   w5
                   w6
                   w7
                   w8
                   w9
                   w10
                   w11
                   w12
                   w13
                   w14
                   w15
                   w16
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww17
                   ww19
                   ww20
                   ww21
                   ww22
                   ww23
                   ww24
                   ww25
                   ww26
                   ww27
                   ww28
                   ww29
                   ww30
                   ww31
                   ww32
                   ww33
                   ww34
                   ww35 } }) -}
79746f44dc66e00f8fba39337343286d
  $fEq(,,,,,,,,,,,,,,,,)_$s$c/= ::
    (InflectionData.Express InflectionData.Gender,
     InflectionData.Express InflectionData.Animacy,
     InflectionData.Express InflectionData.Case,
     InflectionData.Express InflectionData.Number,
     InflectionData.Express InflectionData.Definiteness,
     InflectionData.Express InflectionData.Specificity,
     InflectionData.Express InflectionData.Topic,
     InflectionData.Express InflectionData.Person,
     InflectionData.Express InflectionData.Honorific,
     InflectionData.Express InflectionData.Polarity,
     InflectionData.Express InflectionData.Tense,
     InflectionData.Express InflectionData.Aspect,
     InflectionData.Express InflectionData.Mood,
     InflectionData.Express InflectionData.Voice,
     InflectionData.Express InflectionData.Evidentiality,
     InflectionData.Express InflectionData.Transitivity,
     InflectionData.Express InflectionData.Volition)
    -> (InflectionData.Express InflectionData.Gender,
        InflectionData.Express InflectionData.Animacy,
        InflectionData.Express InflectionData.Case,
        InflectionData.Express InflectionData.Number,
        InflectionData.Express InflectionData.Definiteness,
        InflectionData.Express InflectionData.Specificity,
        InflectionData.Express InflectionData.Topic,
        InflectionData.Express InflectionData.Person,
        InflectionData.Express InflectionData.Honorific,
        InflectionData.Express InflectionData.Polarity,
        InflectionData.Express InflectionData.Tense,
        InflectionData.Express InflectionData.Aspect,
        InflectionData.Express InflectionData.Mood,
        InflectionData.Express InflectionData.Voice,
        InflectionData.Express InflectionData.Evidentiality,
        InflectionData.Express InflectionData.Transitivity,
        InflectionData.Express InflectionData.Volition)
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLLLLLLLLLLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)><S(SLLLLLLLLLLLLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ a41 :: (InflectionData.Express InflectionData.Gender,
                           InflectionData.Express InflectionData.Animacy,
                           InflectionData.Express InflectionData.Case,
                           InflectionData.Express InflectionData.Number,
                           InflectionData.Express InflectionData.Definiteness,
                           InflectionData.Express InflectionData.Specificity,
                           InflectionData.Express InflectionData.Topic,
                           InflectionData.Express InflectionData.Person,
                           InflectionData.Express InflectionData.Honorific,
                           InflectionData.Express InflectionData.Polarity,
                           InflectionData.Express InflectionData.Tense,
                           InflectionData.Express InflectionData.Aspect,
                           InflectionData.Express InflectionData.Mood,
                           InflectionData.Express InflectionData.Voice,
                           InflectionData.Express InflectionData.Evidentiality,
                           InflectionData.Express InflectionData.Transitivity,
                           InflectionData.Express InflectionData.Volition)
                   b :: (InflectionData.Express InflectionData.Gender,
                         InflectionData.Express InflectionData.Animacy,
                         InflectionData.Express InflectionData.Case,
                         InflectionData.Express InflectionData.Number,
                         InflectionData.Express InflectionData.Definiteness,
                         InflectionData.Express InflectionData.Specificity,
                         InflectionData.Express InflectionData.Topic,
                         InflectionData.Express InflectionData.Person,
                         InflectionData.Express InflectionData.Honorific,
                         InflectionData.Express InflectionData.Polarity,
                         InflectionData.Express InflectionData.Tense,
                         InflectionData.Express InflectionData.Aspect,
                         InflectionData.Express InflectionData.Mood,
                         InflectionData.Express InflectionData.Voice,
                         InflectionData.Express InflectionData.Evidentiality,
                         InflectionData.Express InflectionData.Transitivity,
                         InflectionData.Express InflectionData.Volition) ->
                 case InflectionData.$fEq(,,,,,,,,,,,,,,,,)_$s$c== a41 b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
9b7b2d288803b634da9932b16cd7bf61
  $fEq(,,,,,,,,,,,,,,,,)_$s$c== ::
    (InflectionData.Express InflectionData.Gender,
     InflectionData.Express InflectionData.Animacy,
     InflectionData.Express InflectionData.Case,
     InflectionData.Express InflectionData.Number,
     InflectionData.Express InflectionData.Definiteness,
     InflectionData.Express InflectionData.Specificity,
     InflectionData.Express InflectionData.Topic,
     InflectionData.Express InflectionData.Person,
     InflectionData.Express InflectionData.Honorific,
     InflectionData.Express InflectionData.Polarity,
     InflectionData.Express InflectionData.Tense,
     InflectionData.Express InflectionData.Aspect,
     InflectionData.Express InflectionData.Mood,
     InflectionData.Express InflectionData.Voice,
     InflectionData.Express InflectionData.Evidentiality,
     InflectionData.Express InflectionData.Transitivity,
     InflectionData.Express InflectionData.Volition)
    -> (InflectionData.Express InflectionData.Gender,
        InflectionData.Express InflectionData.Animacy,
        InflectionData.Express InflectionData.Case,
        InflectionData.Express InflectionData.Number,
        InflectionData.Express InflectionData.Definiteness,
        InflectionData.Express InflectionData.Specificity,
        InflectionData.Express InflectionData.Topic,
        InflectionData.Express InflectionData.Person,
        InflectionData.Express InflectionData.Honorific,
        InflectionData.Express InflectionData.Polarity,
        InflectionData.Express InflectionData.Tense,
        InflectionData.Express InflectionData.Aspect,
        InflectionData.Express InflectionData.Mood,
        InflectionData.Express InflectionData.Voice,
        InflectionData.Express InflectionData.Evidentiality,
        InflectionData.Express InflectionData.Transitivity,
        InflectionData.Express InflectionData.Volition)
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLLLLLLLLLLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)><S(SLLLLLLLLLLLLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: (InflectionData.Express InflectionData.Gender,
                         InflectionData.Express InflectionData.Animacy,
                         InflectionData.Express InflectionData.Case,
                         InflectionData.Express InflectionData.Number,
                         InflectionData.Express InflectionData.Definiteness,
                         InflectionData.Express InflectionData.Specificity,
                         InflectionData.Express InflectionData.Topic,
                         InflectionData.Express InflectionData.Person,
                         InflectionData.Express InflectionData.Honorific,
                         InflectionData.Express InflectionData.Polarity,
                         InflectionData.Express InflectionData.Tense,
                         InflectionData.Express InflectionData.Aspect,
                         InflectionData.Express InflectionData.Mood,
                         InflectionData.Express InflectionData.Voice,
                         InflectionData.Express InflectionData.Evidentiality,
                         InflectionData.Express InflectionData.Transitivity,
                         InflectionData.Express InflectionData.Volition)
                   w1 :: (InflectionData.Express InflectionData.Gender,
                          InflectionData.Express InflectionData.Animacy,
                          InflectionData.Express InflectionData.Case,
                          InflectionData.Express InflectionData.Number,
                          InflectionData.Express InflectionData.Definiteness,
                          InflectionData.Express InflectionData.Specificity,
                          InflectionData.Express InflectionData.Topic,
                          InflectionData.Express InflectionData.Person,
                          InflectionData.Express InflectionData.Honorific,
                          InflectionData.Express InflectionData.Polarity,
                          InflectionData.Express InflectionData.Tense,
                          InflectionData.Express InflectionData.Aspect,
                          InflectionData.Express InflectionData.Mood,
                          InflectionData.Express InflectionData.Voice,
                          InflectionData.Express InflectionData.Evidentiality,
                          InflectionData.Express InflectionData.Transitivity,
                          InflectionData.Express InflectionData.Volition) ->
                 case w of ww { (,,,,,,,,,,,,,,,,) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ->
                 case w1 of ww18 { (,,,,,,,,,,,,,,,,) ww19 ww20 ww21 ww22 ww23 ww24 ww25 ww26 ww27 ww28 ww29 ww30 ww31 ww32 ww33 ww34 ww35 ->
                 InflectionData.$w$s$c==
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww17
                   ww19
                   ww20
                   ww21
                   ww22
                   ww23
                   ww24
                   ww25
                   ww26
                   ww27
                   ww28
                   ww29
                   ww30
                   ww31
                   ww32
                   ww33
                   ww34
                   ww35 } }) -}
e75fb3b5914cd95eb4ee53868363ce84
  $fEq(,,,,,,,,,,,,,,,,)_$s$fEq(,,,,,,,,,,,,,,,,) ::
    GHC.Classes.Eq
      (InflectionData.Express InflectionData.Gender,
       InflectionData.Express InflectionData.Animacy,
       InflectionData.Express InflectionData.Case,
       InflectionData.Express InflectionData.Number,
       InflectionData.Express InflectionData.Definiteness,
       InflectionData.Express InflectionData.Specificity,
       InflectionData.Express InflectionData.Topic,
       InflectionData.Express InflectionData.Person,
       InflectionData.Express InflectionData.Honorific,
       InflectionData.Express InflectionData.Polarity,
       InflectionData.Express InflectionData.Tense,
       InflectionData.Express InflectionData.Aspect,
       InflectionData.Express InflectionData.Mood,
       InflectionData.Express InflectionData.Voice,
       InflectionData.Express InflectionData.Evidentiality,
       InflectionData.Express InflectionData.Transitivity,
       InflectionData.Express InflectionData.Volition)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Gender,
                     InflectionData.Express InflectionData.Animacy,
                     InflectionData.Express InflectionData.Case,
                     InflectionData.Express InflectionData.Number,
                     InflectionData.Express InflectionData.Definiteness,
                     InflectionData.Express InflectionData.Specificity,
                     InflectionData.Express InflectionData.Topic,
                     InflectionData.Express InflectionData.Person,
                     InflectionData.Express InflectionData.Honorific,
                     InflectionData.Express InflectionData.Polarity,
                     InflectionData.Express InflectionData.Tense,
                     InflectionData.Express InflectionData.Aspect,
                     InflectionData.Express InflectionData.Mood,
                     InflectionData.Express InflectionData.Voice,
                     InflectionData.Express InflectionData.Evidentiality,
                     InflectionData.Express InflectionData.Transitivity,
                     InflectionData.Express InflectionData.Volition)
                  InflectionData.$fEq(,,,,,,,,,,,,,,,,)_$s$c==
                  InflectionData.$fEq(,,,,,,,,,,,,,,,,)_$s$c/= -}
91fb0b41f9ef14c662c70b3629b6b5fe
  $fEqAnimacy :: GHC.Classes.Eq InflectionData.Animacy
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Animacy
                  InflectionData.$fEqAnimacy_$c==
                  InflectionData.$fEqAnimacy_$c/= -}
91fb0b41f9ef14c662c70b3629b6b5fe
  $fEqAnimacy_$c/= ::
    InflectionData.Animacy -> InflectionData.Animacy -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a41 :: InflectionData.Animacy
                   b :: InflectionData.Animacy ->
                 case a41 of wild {
                   InflectionData.UANI
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.UANI -> GHC.Types.False }
                   InflectionData.AN
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.AN -> GHC.Types.False }
                   InflectionData.HUM
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.HUM -> GHC.Types.False }
                   InflectionData.NHUM
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.NHUM -> GHC.Types.False }
                   InflectionData.ZO
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.ZO -> GHC.Types.False }
                   InflectionData.INAN
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.INAN -> GHC.Types.False } }) -}
91fb0b41f9ef14c662c70b3629b6b5fe
  $fEqAnimacy_$c== ::
    InflectionData.Animacy -> InflectionData.Animacy -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: InflectionData.Animacy
                   ds1 :: InflectionData.Animacy ->
                 case ds of wild {
                   InflectionData.UANI
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.UANI -> GHC.Types.True }
                   InflectionData.AN
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.AN -> GHC.Types.True }
                   InflectionData.HUM
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.HUM -> GHC.Types.True }
                   InflectionData.NHUM
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.NHUM -> GHC.Types.True }
                   InflectionData.ZO
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.ZO -> GHC.Types.True }
                   InflectionData.INAN
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.INAN -> GHC.Types.True } }) -}
8bbea98a3b619c1fafa2f31c2f747273
  $fEqAspect :: GHC.Classes.Eq InflectionData.Aspect
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Aspect
                  InflectionData.$fEqAspect_$c==
                  InflectionData.$fEqAspect_$c/= -}
8bbea98a3b619c1fafa2f31c2f747273
  $fEqAspect_$c/= ::
    InflectionData.Aspect -> InflectionData.Aspect -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a41 :: InflectionData.Aspect
                   b :: InflectionData.Aspect ->
                 case a41 of wild {
                   InflectionData.UASP
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.UASP -> GHC.Types.False }
                   InflectionData.NNPROG
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.NNPROG -> GHC.Types.False }
                   InflectionData.PFV
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.PFV -> GHC.Types.False }
                   InflectionData.IPFV
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.IPFV -> GHC.Types.False }
                   InflectionData.HAB
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.HAB -> GHC.Types.False }
                   InflectionData.CONT
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.CONT -> GHC.Types.False }
                   InflectionData.NPROG
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.NPROG -> GHC.Types.False }
                   InflectionData.PROG
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.PROG -> GHC.Types.False } }) -}
8bbea98a3b619c1fafa2f31c2f747273
  $fEqAspect_$c== ::
    InflectionData.Aspect -> InflectionData.Aspect -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: InflectionData.Aspect
                   ds1 :: InflectionData.Aspect ->
                 case ds of wild {
                   InflectionData.UASP
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.UASP -> GHC.Types.True }
                   InflectionData.NNPROG
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.NNPROG -> GHC.Types.True }
                   InflectionData.PFV
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.PFV -> GHC.Types.True }
                   InflectionData.IPFV
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.IPFV -> GHC.Types.True }
                   InflectionData.HAB
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.HAB -> GHC.Types.True }
                   InflectionData.CONT
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.CONT -> GHC.Types.True }
                   InflectionData.NPROG
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.NPROG -> GHC.Types.True }
                   InflectionData.PROG
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.PROG -> GHC.Types.True } }) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fEqCase :: GHC.Classes.Eq InflectionData.Case
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Case
                  InflectionData.$fEqCase_$c==
                  InflectionData.$fEqCase_$c/= -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fEqCase_$c/= ::
    InflectionData.Case -> InflectionData.Case -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a41 :: InflectionData.Case b :: InflectionData.Case ->
                 case a41 of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==#
                           (GHC.Prim.dataToTag# @ InflectionData.Case x1)
                           (GHC.Prim.dataToTag# @ InflectionData.Case x2)) of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fEqCase_$c== ::
    InflectionData.Case -> InflectionData.Case -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a41 :: InflectionData.Case b :: InflectionData.Case ->
                 case a41 of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.==#
                      (GHC.Prim.dataToTag# @ InflectionData.Case x1)
                      (GHC.Prim.dataToTag# @ InflectionData.Case x2)) } }) -}
69e12afea565be2617200bf9671a6c0d
  $fEqDefiniteness :: GHC.Classes.Eq InflectionData.Definiteness
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Definiteness
                  InflectionData.$fEqDefiniteness_$c==
                  InflectionData.$fEqDefiniteness_$c/= -}
69e12afea565be2617200bf9671a6c0d
  $fEqDefiniteness_$c/= ::
    InflectionData.Definiteness
    -> InflectionData.Definiteness -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a41 :: InflectionData.Definiteness
                   b :: InflectionData.Definiteness ->
                 case a41 of wild {
                   InflectionData.UDEF
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.UDEF -> GHC.Types.False }
                   InflectionData.DEF
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.DEF -> GHC.Types.False }
                   InflectionData.INDF
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.INDF -> GHC.Types.False } }) -}
69e12afea565be2617200bf9671a6c0d
  $fEqDefiniteness_$c== ::
    InflectionData.Definiteness
    -> InflectionData.Definiteness -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.Definiteness
                   ds1 :: InflectionData.Definiteness ->
                 case ds of wild {
                   InflectionData.UDEF
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.UDEF -> GHC.Types.True }
                   InflectionData.DEF
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.DEF -> GHC.Types.True }
                   InflectionData.INDF
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.INDF -> GHC.Types.True } }) -}
1261593b396b3f8b4367998b51bf6d8a
  $fEqEvidentiality :: GHC.Classes.Eq InflectionData.Evidentiality
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Evidentiality
                  InflectionData.$fEqEvidentiality_$c==
                  InflectionData.$fEqEvidentiality_$c/= -}
1261593b396b3f8b4367998b51bf6d8a
  $fEqEvidentiality_$c/= ::
    InflectionData.Evidentiality
    -> InflectionData.Evidentiality -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a41 :: InflectionData.Evidentiality
                   b :: InflectionData.Evidentiality ->
                 case a41 of wild {
                   InflectionData.UEVI
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.UEVI -> GHC.Types.False }
                   InflectionData.EXP
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.EXP -> GHC.Types.False }
                   InflectionData.VIS
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.VIS -> GHC.Types.False }
                   InflectionData.NVIS
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.NVIS -> GHC.Types.False }
                   InflectionData.AUD
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.AUD -> GHC.Types.False }
                   InflectionData.INFER
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.INFER -> GHC.Types.False }
                   InflectionData.REP
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.REP -> GHC.Types.False }
                   InflectionData.HSY
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.HSY -> GHC.Types.False }
                   InflectionData.QUO
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.QUO -> GHC.Types.False }
                   InflectionData.ASS
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.ASS -> GHC.Types.False } }) -}
1261593b396b3f8b4367998b51bf6d8a
  $fEqEvidentiality_$c== ::
    InflectionData.Evidentiality
    -> InflectionData.Evidentiality -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: InflectionData.Evidentiality
                   ds1 :: InflectionData.Evidentiality ->
                 case ds of wild {
                   InflectionData.UEVI
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.UEVI -> GHC.Types.True }
                   InflectionData.EXP
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.EXP -> GHC.Types.True }
                   InflectionData.VIS
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.VIS -> GHC.Types.True }
                   InflectionData.NVIS
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.NVIS -> GHC.Types.True }
                   InflectionData.AUD
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.AUD -> GHC.Types.True }
                   InflectionData.INFER
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.INFER -> GHC.Types.True }
                   InflectionData.REP
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.REP -> GHC.Types.True }
                   InflectionData.HSY
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.HSY -> GHC.Types.True }
                   InflectionData.QUO
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.QUO -> GHC.Types.True }
                   InflectionData.ASS
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.ASS -> GHC.Types.True } }) -}
7e958650c7791002a2540390e3aca90e
  $fEqExpress ::
    GHC.Classes.Eq a => GHC.Classes.Eq (InflectionData.Express a)
  DFunId[0]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a41 $dEq :: GHC.Classes.Eq a41.
                  @ (InflectionData.Express a41)
                  (InflectionData.$fEqExpress_$c==10 @ a41 $dEq)
                  (InflectionData.$fEqExpress_$c/= @ a41 $dEq) -}
7e958650c7791002a2540390e3aca90e
  $fEqExpress_$c/= ::
    GHC.Classes.Eq a =>
    InflectionData.Express a
    -> InflectionData.Express a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a41
                   $dEq :: GHC.Classes.Eq a41
                   a42 :: InflectionData.Express a41
                   b :: InflectionData.Express a41 ->
                 case a42 of wild {
                   InflectionData.NoExpress
                   -> case b of wild1 {
                        InflectionData.NoExpress -> GHC.Types.False
                        InflectionData.Express ipv -> GHC.Types.True }
                   InflectionData.Express a43
                   -> case b of wild1 {
                        InflectionData.NoExpress -> GHC.Types.True
                        InflectionData.Express b1
                        -> case GHC.Classes.== @ a41 $dEq a43 b1 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } } }) -}
e443e52c146978100c75258afee70577
  $fEqExpress_$c== ::
    InflectionData.Gender -> InflectionData.Gender -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: InflectionData.Gender
                   ds1 :: InflectionData.Gender ->
                 case ds of wild {
                   InflectionData.UGEN
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.UGEN -> GHC.Types.True }
                   InflectionData.M
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.M -> GHC.Types.True }
                   InflectionData.F
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.F -> GHC.Types.True }
                   InflectionData.COM
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.COM -> GHC.Types.True }
                   InflectionData.N
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.N -> GHC.Types.True } }) -}
111b9dd7881655400daece83d7690898
  $fEqExpress_$c==1 ::
    InflectionData.Number -> InflectionData.Number -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: InflectionData.Number
                   ds1 :: InflectionData.Number ->
                 case ds of wild {
                   InflectionData.UNUM
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.UNUM -> GHC.Types.True }
                   InflectionData.SG
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.SG -> GHC.Types.True }
                   InflectionData.DU
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.DU -> GHC.Types.True }
                   InflectionData.TRI
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.TRI -> GHC.Types.True }
                   InflectionData.PA
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.PA -> GHC.Types.True }
                   InflectionData.PL
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.PL -> GHC.Types.True } }) -}
7e958650c7791002a2540390e3aca90e
  $fEqExpress_$c==10 ::
    GHC.Classes.Eq a =>
    InflectionData.Express a
    -> InflectionData.Express a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a41
                   $dEq :: GHC.Classes.Eq a41
                   ds :: InflectionData.Express a41
                   ds1 :: InflectionData.Express a41 ->
                 case ds of wild {
                   InflectionData.NoExpress
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.True
                        InflectionData.Express ipv -> GHC.Types.False }
                   InflectionData.Express a42
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.False
                        InflectionData.Express b1
                        -> GHC.Classes.== @ a41 $dEq a42 b1 } }) -}
6c3fc67424127bb4feb2d92b23a30da0
  $fEqExpress_$c==2 ::
    InflectionData.Specificity
    -> InflectionData.Specificity -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.Specificity
                   ds1 :: InflectionData.Specificity ->
                 case ds of wild {
                   InflectionData.USPE
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.USPE -> GHC.Types.True }
                   InflectionData.SPEC
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.SPEC -> GHC.Types.True }
                   InflectionData.NSPEC
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.NSPEC -> GHC.Types.True } }) -}
f2502f7485a2c7bc47bb080f20b26aeb
  $fEqExpress_$c==3 ::
    InflectionData.Topic -> InflectionData.Topic -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.Topic ds1 :: InflectionData.Topic ->
                 case ds of wild {
                   InflectionData.UTOP
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.UTOP -> GHC.Types.True }
                   InflectionData.TOP
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.TOP -> GHC.Types.True }
                   InflectionData.NTOP
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.NTOP -> GHC.Types.True } }) -}
cbc274f5b3d6239101cd9764b7773be5
  $fEqExpress_$c==4 ::
    InflectionData.Person -> InflectionData.Person -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: InflectionData.Person
                   ds1 :: InflectionData.Person ->
                 case ds of wild {
                   InflectionData.UPER
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.UPER -> GHC.Types.True }
                   InflectionData.FIRST
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.FIRST -> GHC.Types.True }
                   InflectionData.FSTINCL
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.FSTINCL -> GHC.Types.True }
                   InflectionData.FSTEXCL
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.FSTEXCL -> GHC.Types.True }
                   InflectionData.SECOND
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.SECOND -> GHC.Types.True }
                   InflectionData.THIRD
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.THIRD -> GHC.Types.True }
                   InflectionData.THRDPROX
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.THRDPROX -> GHC.Types.True }
                   InflectionData.THRDOBV
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.THRDOBV -> GHC.Types.True } }) -}
9f709bf4194f93c1f39907f3dcd0aede
  $fEqExpress_$c==5 ::
    InflectionData.Honorific
    -> InflectionData.Honorific -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: InflectionData.Honorific
                   ds1 :: InflectionData.Honorific ->
                 case ds of wild {
                   InflectionData.UHON
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.UHON -> GHC.Types.True }
                   InflectionData.FAM
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.FAM -> GHC.Types.True }
                   InflectionData.NEU
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.NEU -> GHC.Types.True }
                   InflectionData.FORM
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.FORM -> GHC.Types.True } }) -}
961c5eb0bc4c139961b0a440a23b769f
  $fEqExpress_$c==6 ::
    InflectionData.Polarity
    -> InflectionData.Polarity -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.Polarity ds1 :: InflectionData.Polarity ->
                 case ds of wild {
                   InflectionData.UPOL
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.UPOL -> GHC.Types.True }
                   InflectionData.AFF
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.AFF -> GHC.Types.True }
                   InflectionData.NEG
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.NEG -> GHC.Types.True } }) -}
66f849eb0df273279725c8472ced02cc
  $fEqExpress_$c==7 ::
    InflectionData.Voice -> InflectionData.Voice -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: InflectionData.Voice
                   ds1 :: InflectionData.Voice ->
                 case ds of wild {
                   InflectionData.UVOI
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.UVOI -> GHC.Types.True }
                   InflectionData.ACTIVE
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.ACTIVE -> GHC.Types.True }
                   InflectionData.MIDDLE
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.MIDDLE -> GHC.Types.True }
                   InflectionData.PASSIVE
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.PASSIVE -> GHC.Types.True } }) -}
8463dae3116062b076dc25e0f6b8c749
  $fEqExpress_$c==8 ::
    InflectionData.Transitivity
    -> InflectionData.Transitivity -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: InflectionData.Transitivity
                   ds1 :: InflectionData.Transitivity ->
                 case ds of wild {
                   InflectionData.UTRA
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.UTRA -> GHC.Types.True }
                   InflectionData.NTRANS
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.NTRANS -> GHC.Types.True }
                   InflectionData.TRANS
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.TRANS -> GHC.Types.True }
                   InflectionData.MTRANS
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.MTRANS -> GHC.Types.True }
                   InflectionData.DITRANS
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.DITRANS -> GHC.Types.True } }) -}
3a73fa2d976f240c7ba768b809a25328
  $fEqExpress_$c==9 ::
    InflectionData.Volition
    -> InflectionData.Volition -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.Volition ds1 :: InflectionData.Volition ->
                 case ds of wild {
                   InflectionData.UVOL
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.UVOL -> GHC.Types.True }
                   InflectionData.VOL
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.VOL -> GHC.Types.True }
                   InflectionData.NVOL
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.NVOL -> GHC.Types.True } }) -}
2ae3a5798b14ea2443e30daba814b662
  $fEqExpress_$s$c==13 ::
    InflectionData.Express InflectionData.Volition
    -> InflectionData.Express InflectionData.Volition -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.Express InflectionData.Volition
                   ds1 :: InflectionData.Express InflectionData.Volition ->
                 case ds of wild {
                   InflectionData.NoExpress
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.True
                        InflectionData.Express ipv -> GHC.Types.False }
                   InflectionData.Express a41
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.False
                        InflectionData.Express b1
                        -> InflectionData.$fEqExpress_$c==9 a41 b1 } }) -}
e443e52c146978100c75258afee70577
  $fEqGender :: GHC.Classes.Eq InflectionData.Gender
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Gender
                  InflectionData.$fEqExpress_$c==
                  InflectionData.$fEqGender_$c/= -}
e443e52c146978100c75258afee70577
  $fEqGender_$c/= ::
    InflectionData.Gender -> InflectionData.Gender -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a41 :: InflectionData.Gender
                   b :: InflectionData.Gender ->
                 case a41 of wild {
                   InflectionData.UGEN
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.UGEN -> GHC.Types.False }
                   InflectionData.M
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.M -> GHC.Types.False }
                   InflectionData.F
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.F -> GHC.Types.False }
                   InflectionData.COM
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.COM -> GHC.Types.False }
                   InflectionData.N
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.N -> GHC.Types.False } }) -}
9f709bf4194f93c1f39907f3dcd0aede
  $fEqHonorific :: GHC.Classes.Eq InflectionData.Honorific
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Honorific
                  InflectionData.$fEqExpress_$c==5
                  InflectionData.$fEqHonorific_$c/= -}
9f709bf4194f93c1f39907f3dcd0aede
  $fEqHonorific_$c/= ::
    InflectionData.Honorific
    -> InflectionData.Honorific -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a41 :: InflectionData.Honorific
                   b :: InflectionData.Honorific ->
                 case a41 of wild {
                   InflectionData.UHON
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.UHON -> GHC.Types.False }
                   InflectionData.FAM
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.FAM -> GHC.Types.False }
                   InflectionData.NEU
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.NEU -> GHC.Types.False }
                   InflectionData.FORM
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.FORM -> GHC.Types.False } }) -}
d140bda0afaf2a222d43f8ac1fd40fcf
  $fEqInflectionSystem ::
    GHC.Classes.Eq InflectionData.InflectionSystem
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.InflectionSystem
                  InflectionData.$fEqInflectionSystem_$c==
                  InflectionData.$fEqInflectionSystem_$c/= -}
d140bda0afaf2a222d43f8ac1fd40fcf
  $fEqInflectionSystem_$c/= ::
    InflectionData.InflectionSystem
    -> InflectionData.InflectionSystem -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLLLLLLLLLLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)><S(SLLLLLLLLLLLLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ a41 :: InflectionData.InflectionSystem
                   b :: InflectionData.InflectionSystem ->
                 case InflectionData.$fEqInflectionSystem_$c== a41 b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
d140bda0afaf2a222d43f8ac1fd40fcf
  $fEqInflectionSystem_$c== ::
    InflectionData.InflectionSystem
    -> InflectionData.InflectionSystem -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLLLLLLLLLLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)><S(SLLLLLLLLLLLLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: InflectionData.InflectionSystem
                   w1 :: InflectionData.InflectionSystem ->
                 case w of ww { InflectionData.InflectionSystem ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ->
                 case w1 of ww18 { InflectionData.InflectionSystem ww19 ww20 ww21 ww22 ww23 ww24 ww25 ww26 ww27 ww28 ww29 ww30 ww31 ww32 ww33 ww34 ww35 ->
                 InflectionData.$w$c==1
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww17
                   ww19
                   ww20
                   ww21
                   ww22
                   ww23
                   ww24
                   ww25
                   ww26
                   ww27
                   ww28
                   ww29
                   ww30
                   ww31
                   ww32
                   ww33
                   ww34
                   ww35 } }) -}
406c10c56e8fc899b6f590771b3372e0
  $fEqLexCat :: GHC.Classes.Eq InflectionData.LexCat
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.LexCat
                  InflectionData.$fEqLexCat_$c==
                  InflectionData.$fEqLexCat_$c/= -}
406c10c56e8fc899b6f590771b3372e0
  $fEqLexCat_$c/= ::
    InflectionData.LexCat -> InflectionData.LexCat -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a41 :: InflectionData.LexCat b :: InflectionData.LexCat ->
                 case a41 of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==#
                           (GHC.Prim.dataToTag# @ InflectionData.LexCat x1)
                           (GHC.Prim.dataToTag# @ InflectionData.LexCat x2)) of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
406c10c56e8fc899b6f590771b3372e0
  $fEqLexCat_$c== ::
    InflectionData.LexCat -> InflectionData.LexCat -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a41 :: InflectionData.LexCat b :: InflectionData.LexCat ->
                 case a41 of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.==#
                      (GHC.Prim.dataToTag# @ InflectionData.LexCat x1)
                      (GHC.Prim.dataToTag# @ InflectionData.LexCat x2)) } }) -}
402c727bb1d5614cf0c6243ee3fa7337
  $fEqManifest ::
    GHC.Classes.Eq a => GHC.Classes.Eq (InflectionData.Manifest a)
  DFunId[0]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a41 $dEq :: GHC.Classes.Eq a41.
                  @ (InflectionData.Manifest a41)
                  (InflectionData.$fEqManifest_$c== @ a41 $dEq)
                  (InflectionData.$fEqManifest_$c/= @ a41 $dEq) -}
d00ca9fc0955f2d18fcf424b683d5934
  $fEqManifestSystem :: GHC.Classes.Eq InflectionData.ManifestSystem
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.ManifestSystem
                  InflectionData.$fEqManifestSystem_$c==
                  InflectionData.$fEqManifestSystem_$c/= -}
da696af380b6a61774eb961c8afaa835
  $fEqManifestSystem1 ::
    GHC.Classes.Eq
      (InflectionData.Express InflectionData.Gender,
       InflectionData.Express InflectionData.Animacy,
       InflectionData.Express InflectionData.Case,
       InflectionData.Express InflectionData.Number,
       InflectionData.Express InflectionData.Definiteness,
       InflectionData.Express InflectionData.Specificity,
       InflectionData.Express InflectionData.Topic,
       InflectionData.Express InflectionData.Person,
       InflectionData.Express InflectionData.Honorific,
       InflectionData.Express InflectionData.Polarity,
       InflectionData.Express InflectionData.Tense,
       InflectionData.Express InflectionData.Aspect,
       InflectionData.Express InflectionData.Mood,
       InflectionData.Express InflectionData.Voice,
       InflectionData.Express InflectionData.Evidentiality,
       InflectionData.Express InflectionData.Transitivity,
       InflectionData.Express InflectionData.Volition)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fEq(,,,,,,,,,,,,,,,,)_$s$fEq(,,,,,,,,,,,,,,,,) -}
d00ca9fc0955f2d18fcf424b683d5934
  $fEqManifestSystem_$c/= ::
    InflectionData.ManifestSystem
    -> InflectionData.ManifestSystem -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U,1*U,1*U)><S(SLL),1*U(1*U,1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ a41 :: InflectionData.ManifestSystem
                   b :: InflectionData.ManifestSystem ->
                 case InflectionData.$fEqManifestSystem_$c== a41 b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
d00ca9fc0955f2d18fcf424b683d5934
  $fEqManifestSystem_$c== ::
    InflectionData.ManifestSystem
    -> InflectionData.ManifestSystem -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U,1*U,1*U)><S(SLL),1*U(1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: InflectionData.ManifestSystem
                   w1 :: InflectionData.ManifestSystem ->
                 case w of ww { InflectionData.ManifestSystem ww1 ww2 ww3 ->
                 case w1 of ww4 { InflectionData.ManifestSystem ww5 ww6 ww7 ->
                 InflectionData.$w$c==2 ww1 ww2 ww3 ww5 ww6 ww7 } }) -}
41de3161ebd596ce02e0262cb407f45a
  $fEqManifestSystem_$s$fEq(,) ::
    GHC.Classes.Eq
      (PhonemeData.Morpheme,
       (InflectionData.Express InflectionData.Gender,
        InflectionData.Express InflectionData.Animacy,
        InflectionData.Express InflectionData.Case,
        InflectionData.Express InflectionData.Number,
        InflectionData.Express InflectionData.Definiteness,
        InflectionData.Express InflectionData.Specificity,
        InflectionData.Express InflectionData.Topic,
        InflectionData.Express InflectionData.Person,
        InflectionData.Express InflectionData.Honorific,
        InflectionData.Express InflectionData.Polarity,
        InflectionData.Express InflectionData.Tense,
        InflectionData.Express InflectionData.Aspect,
        InflectionData.Express InflectionData.Mood,
        InflectionData.Express InflectionData.Voice,
        InflectionData.Express InflectionData.Evidentiality,
        InflectionData.Express InflectionData.Transitivity,
        InflectionData.Express InflectionData.Volition))
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (PhonemeData.Morpheme,
                     (InflectionData.Express InflectionData.Gender,
                      InflectionData.Express InflectionData.Animacy,
                      InflectionData.Express InflectionData.Case,
                      InflectionData.Express InflectionData.Number,
                      InflectionData.Express InflectionData.Definiteness,
                      InflectionData.Express InflectionData.Specificity,
                      InflectionData.Express InflectionData.Topic,
                      InflectionData.Express InflectionData.Person,
                      InflectionData.Express InflectionData.Honorific,
                      InflectionData.Express InflectionData.Polarity,
                      InflectionData.Express InflectionData.Tense,
                      InflectionData.Express InflectionData.Aspect,
                      InflectionData.Express InflectionData.Mood,
                      InflectionData.Express InflectionData.Voice,
                      InflectionData.Express InflectionData.Evidentiality,
                      InflectionData.Express InflectionData.Transitivity,
                      InflectionData.Express InflectionData.Volition))
                  (GHC.Classes.$fEq(,)_$c==
                     @ PhonemeData.Morpheme
                     @ (InflectionData.Express InflectionData.Gender,
                        InflectionData.Express InflectionData.Animacy,
                        InflectionData.Express InflectionData.Case,
                        InflectionData.Express InflectionData.Number,
                        InflectionData.Express InflectionData.Definiteness,
                        InflectionData.Express InflectionData.Specificity,
                        InflectionData.Express InflectionData.Topic,
                        InflectionData.Express InflectionData.Person,
                        InflectionData.Express InflectionData.Honorific,
                        InflectionData.Express InflectionData.Polarity,
                        InflectionData.Express InflectionData.Tense,
                        InflectionData.Express InflectionData.Aspect,
                        InflectionData.Express InflectionData.Mood,
                        InflectionData.Express InflectionData.Voice,
                        InflectionData.Express InflectionData.Evidentiality,
                        InflectionData.Express InflectionData.Transitivity,
                        InflectionData.Express InflectionData.Volition)
                     PhonemeData.$fEqMorpheme
                     InflectionData.$fEqManifestSystem1)
                  (GHC.Classes.$fEq(,)_$c/=
                     @ PhonemeData.Morpheme
                     @ (InflectionData.Express InflectionData.Gender,
                        InflectionData.Express InflectionData.Animacy,
                        InflectionData.Express InflectionData.Case,
                        InflectionData.Express InflectionData.Number,
                        InflectionData.Express InflectionData.Definiteness,
                        InflectionData.Express InflectionData.Specificity,
                        InflectionData.Express InflectionData.Topic,
                        InflectionData.Express InflectionData.Person,
                        InflectionData.Express InflectionData.Honorific,
                        InflectionData.Express InflectionData.Polarity,
                        InflectionData.Express InflectionData.Tense,
                        InflectionData.Express InflectionData.Aspect,
                        InflectionData.Express InflectionData.Mood,
                        InflectionData.Express InflectionData.Voice,
                        InflectionData.Express InflectionData.Evidentiality,
                        InflectionData.Express InflectionData.Transitivity,
                        InflectionData.Express InflectionData.Volition)
                     PhonemeData.$fEqMorpheme
                     InflectionData.$fEqManifestSystem1) -}
339a9cc5bd8d02624186a930ed6d9c71
  $fEqManifestType :: GHC.Classes.Eq InflectionData.ManifestType
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.ManifestType
                  InflectionData.$fEqManifestType_$c==
                  InflectionData.$fEqManifestType_$c/= -}
339a9cc5bd8d02624186a930ed6d9c71
  $fEqManifestType_$c/= ::
    InflectionData.ManifestType
    -> InflectionData.ManifestType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a41 :: InflectionData.ManifestType
                   b :: InflectionData.ManifestType ->
                 case a41 of wild {
                   InflectionData.Particle
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.Particle -> GHC.Types.False }
                   InflectionData.Prefix
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.Prefix -> GHC.Types.False }
                   InflectionData.Suffix
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.Suffix -> GHC.Types.False } }) -}
339a9cc5bd8d02624186a930ed6d9c71
  $fEqManifestType_$c== ::
    InflectionData.ManifestType
    -> InflectionData.ManifestType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.ManifestType
                   ds1 :: InflectionData.ManifestType ->
                 case ds of wild {
                   InflectionData.Particle
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.Particle -> GHC.Types.True }
                   InflectionData.Prefix
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.Prefix -> GHC.Types.True }
                   InflectionData.Suffix
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.Suffix -> GHC.Types.True } }) -}
402c727bb1d5614cf0c6243ee3fa7337
  $fEqManifest_$c/= ::
    GHC.Classes.Eq a =>
    InflectionData.Manifest a
    -> InflectionData.Manifest a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a41
                   $dEq :: GHC.Classes.Eq a41
                   a42 :: InflectionData.Manifest a41
                   b :: InflectionData.Manifest a41 ->
                 case a42 of wild {
                   InflectionData.NoManifest
                   -> case b of wild1 {
                        InflectionData.NoManifest -> GHC.Types.False
                        InflectionData.Manifest ipv ipv1 -> GHC.Types.True }
                   InflectionData.Manifest a43 a44
                   -> case b of wild1 {
                        InflectionData.NoManifest -> GHC.Types.True
                        InflectionData.Manifest b1 b2
                        -> case GHC.Classes.$fEq[]_$c==
                                  @ (InflectionData.LexCat,
                                     InflectionData.ManifestType,
                                     GHC.Types.Int)
                                  InflectionData.$fEqManifest_$s$fEq(,,)
                                  a43
                                  b1 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True
                             -> case GHC.Classes.== @ a41 $dEq a44 b2 of wild3 {
                                  GHC.Types.False -> GHC.Types.True
                                  GHC.Types.True -> GHC.Types.False } } } }) -}
402c727bb1d5614cf0c6243ee3fa7337
  $fEqManifest_$c== ::
    GHC.Classes.Eq a =>
    InflectionData.Manifest a
    -> InflectionData.Manifest a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a41
                   $dEq :: GHC.Classes.Eq a41
                   ds :: InflectionData.Manifest a41
                   ds1 :: InflectionData.Manifest a41 ->
                 case ds of wild {
                   InflectionData.NoManifest
                   -> case ds1 of wild1 {
                        InflectionData.NoManifest -> GHC.Types.True
                        InflectionData.Manifest ipv ipv1 -> GHC.Types.False }
                   InflectionData.Manifest a42 a43
                   -> case ds1 of wild1 {
                        InflectionData.NoManifest -> GHC.Types.False
                        InflectionData.Manifest b1 b2
                        -> case GHC.Classes.$fEq[]_$c==
                                  @ (InflectionData.LexCat,
                                     InflectionData.ManifestType,
                                     GHC.Types.Int)
                                  InflectionData.$fEqManifest_$s$fEq(,,)
                                  a42
                                  b1 of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True -> GHC.Classes.== @ a41 $dEq a43 b2 } } }) -}
5a929906eb175313f504305a10228b6d
  $fEqManifest_$s$c==16 ::
    InflectionData.Manifest [InflectionData.Volition]
    -> InflectionData.Manifest [InflectionData.Volition]
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: InflectionData.Manifest
                           [InflectionData.Volition]
                   ds1 :: InflectionData.Manifest [InflectionData.Volition] ->
                 case ds of wild {
                   InflectionData.NoManifest
                   -> case ds1 of wild1 {
                        InflectionData.NoManifest -> GHC.Types.True
                        InflectionData.Manifest ipv ipv1 -> GHC.Types.False }
                   InflectionData.Manifest a41 a42
                   -> case ds1 of wild1 {
                        InflectionData.NoManifest -> GHC.Types.False
                        InflectionData.Manifest b1 b2
                        -> case GHC.Classes.$fEq[]_$c==
                                  @ (InflectionData.LexCat,
                                     InflectionData.ManifestType,
                                     GHC.Types.Int)
                                  InflectionData.$fEqManifest_$s$fEq(,,)
                                  a41
                                  b1 of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> GHC.Classes.$fEq[]_$c==
                                  @ InflectionData.Volition
                                  InflectionData.$fEqVolition
                                  a42
                                  b2 } } }) -}
3805690f23d9ca3c9ba1974166d6560d
  $fEqManifest_$s$fEq(,,) ::
    GHC.Classes.Eq
      (InflectionData.LexCat, InflectionData.ManifestType, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.LexCat,
                     InflectionData.ManifestType,
                     GHC.Types.Int)
                  (GHC.Classes.$fEq(,,)_$c==
                     @ InflectionData.LexCat
                     @ InflectionData.ManifestType
                     @ GHC.Types.Int
                     InflectionData.$fEqLexCat
                     InflectionData.$fEqManifestType
                     GHC.Classes.$fEqInt)
                  InflectionData.$fEqManifest_$s$fEq(,,)_$c/= -}
0f7b96b4e8a474c9e1fe75284382395a
  $fEqManifest_$s$fEq(,,)_$c/= ::
    (InflectionData.LexCat, InflectionData.ManifestType, GHC.Types.Int)
    -> (InflectionData.LexCat,
        InflectionData.ManifestType,
        GHC.Types.Int)
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U,1*U,1*U(U))><S(SLL),1*U(1*U,1*U,1*U(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ a41 :: (InflectionData.LexCat,
                           InflectionData.ManifestType,
                           GHC.Types.Int)
                   b1 :: (InflectionData.LexCat,
                          InflectionData.ManifestType,
                          GHC.Types.Int) ->
                 case GHC.Classes.$fEq(,,)_$c==
                        @ InflectionData.LexCat
                        @ InflectionData.ManifestType
                        @ GHC.Types.Int
                        InflectionData.$fEqLexCat
                        InflectionData.$fEqManifestType
                        GHC.Classes.$fEqInt
                        a41
                        b1 of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
987f478754e08db3236fd0a739247bf9
  $fEqMood :: GHC.Classes.Eq InflectionData.Mood
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Mood
                  InflectionData.$fEqMood_$c==
                  InflectionData.$fEqMood_$c/= -}
987f478754e08db3236fd0a739247bf9
  $fEqMood_$c/= ::
    InflectionData.Mood -> InflectionData.Mood -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a41 :: InflectionData.Mood b :: InflectionData.Mood ->
                 case a41 of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==#
                           (GHC.Prim.dataToTag# @ InflectionData.Mood x1)
                           (GHC.Prim.dataToTag# @ InflectionData.Mood x2)) of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
987f478754e08db3236fd0a739247bf9
  $fEqMood_$c== ::
    InflectionData.Mood -> InflectionData.Mood -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a41 :: InflectionData.Mood b :: InflectionData.Mood ->
                 case a41 of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.==#
                      (GHC.Prim.dataToTag# @ InflectionData.Mood x1)
                      (GHC.Prim.dataToTag# @ InflectionData.Mood x2)) } }) -}
111b9dd7881655400daece83d7690898
  $fEqNumber :: GHC.Classes.Eq InflectionData.Number
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Number
                  InflectionData.$fEqExpress_$c==1
                  InflectionData.$fEqNumber_$c/= -}
111b9dd7881655400daece83d7690898
  $fEqNumber_$c/= ::
    InflectionData.Number -> InflectionData.Number -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a41 :: InflectionData.Number
                   b :: InflectionData.Number ->
                 case a41 of wild {
                   InflectionData.UNUM
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.UNUM -> GHC.Types.False }
                   InflectionData.SG
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.SG -> GHC.Types.False }
                   InflectionData.DU
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.DU -> GHC.Types.False }
                   InflectionData.TRI
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.TRI -> GHC.Types.False }
                   InflectionData.PA
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.PA -> GHC.Types.False }
                   InflectionData.PL
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.PL -> GHC.Types.False } }) -}
cbc274f5b3d6239101cd9764b7773be5
  $fEqPerson :: GHC.Classes.Eq InflectionData.Person
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Person
                  InflectionData.$fEqExpress_$c==4
                  InflectionData.$fEqPerson_$c/= -}
cbc274f5b3d6239101cd9764b7773be5
  $fEqPerson_$c/= ::
    InflectionData.Person -> InflectionData.Person -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a41 :: InflectionData.Person
                   b :: InflectionData.Person ->
                 case a41 of wild {
                   InflectionData.UPER
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.UPER -> GHC.Types.False }
                   InflectionData.FIRST
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.FIRST -> GHC.Types.False }
                   InflectionData.FSTINCL
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.FSTINCL -> GHC.Types.False }
                   InflectionData.FSTEXCL
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.FSTEXCL -> GHC.Types.False }
                   InflectionData.SECOND
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.SECOND -> GHC.Types.False }
                   InflectionData.THIRD
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.THIRD -> GHC.Types.False }
                   InflectionData.THRDPROX
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.THRDPROX -> GHC.Types.False }
                   InflectionData.THRDOBV
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.THRDOBV -> GHC.Types.False } }) -}
961c5eb0bc4c139961b0a440a23b769f
  $fEqPolarity :: GHC.Classes.Eq InflectionData.Polarity
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Polarity
                  InflectionData.$fEqExpress_$c==6
                  InflectionData.$fEqPolarity_$c/= -}
961c5eb0bc4c139961b0a440a23b769f
  $fEqPolarity_$c/= ::
    InflectionData.Polarity
    -> InflectionData.Polarity -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a41 :: InflectionData.Polarity b :: InflectionData.Polarity ->
                 case a41 of wild {
                   InflectionData.UPOL
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.UPOL -> GHC.Types.False }
                   InflectionData.AFF
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.AFF -> GHC.Types.False }
                   InflectionData.NEG
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.NEG -> GHC.Types.False } }) -}
6c3fc67424127bb4feb2d92b23a30da0
  $fEqSpecificity :: GHC.Classes.Eq InflectionData.Specificity
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Specificity
                  InflectionData.$fEqExpress_$c==2
                  InflectionData.$fEqSpecificity_$c/= -}
6c3fc67424127bb4feb2d92b23a30da0
  $fEqSpecificity_$c/= ::
    InflectionData.Specificity
    -> InflectionData.Specificity -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a41 :: InflectionData.Specificity
                   b :: InflectionData.Specificity ->
                 case a41 of wild {
                   InflectionData.USPE
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.USPE -> GHC.Types.False }
                   InflectionData.SPEC
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.SPEC -> GHC.Types.False }
                   InflectionData.NSPEC
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.NSPEC -> GHC.Types.False } }) -}
5f476bea2da27cbe0ffe1e5cde3d9551
  $fEqTense :: GHC.Classes.Eq InflectionData.Tense
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Tense
                  InflectionData.$fEqTense_$c==
                  InflectionData.$fEqTense_$c/= -}
5f476bea2da27cbe0ffe1e5cde3d9551
  $fEqTense_$c/= ::
    InflectionData.Tense -> InflectionData.Tense -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a41 :: InflectionData.Tense b :: InflectionData.Tense ->
                 case a41 of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==#
                           (GHC.Prim.dataToTag# @ InflectionData.Tense x1)
                           (GHC.Prim.dataToTag# @ InflectionData.Tense x2)) of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
5f476bea2da27cbe0ffe1e5cde3d9551
  $fEqTense_$c== ::
    InflectionData.Tense -> InflectionData.Tense -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a41 :: InflectionData.Tense b :: InflectionData.Tense ->
                 case a41 of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.==#
                      (GHC.Prim.dataToTag# @ InflectionData.Tense x1)
                      (GHC.Prim.dataToTag# @ InflectionData.Tense x2)) } }) -}
f2502f7485a2c7bc47bb080f20b26aeb
  $fEqTopic :: GHC.Classes.Eq InflectionData.Topic
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Topic
                  InflectionData.$fEqExpress_$c==3
                  InflectionData.$fEqTopic_$c/= -}
f2502f7485a2c7bc47bb080f20b26aeb
  $fEqTopic_$c/= ::
    InflectionData.Topic -> InflectionData.Topic -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a41 :: InflectionData.Topic b :: InflectionData.Topic ->
                 case a41 of wild {
                   InflectionData.UTOP
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.UTOP -> GHC.Types.False }
                   InflectionData.TOP
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.TOP -> GHC.Types.False }
                   InflectionData.NTOP
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.NTOP -> GHC.Types.False } }) -}
8463dae3116062b076dc25e0f6b8c749
  $fEqTransitivity :: GHC.Classes.Eq InflectionData.Transitivity
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Transitivity
                  InflectionData.$fEqExpress_$c==8
                  InflectionData.$fEqTransitivity_$c/= -}
8463dae3116062b076dc25e0f6b8c749
  $fEqTransitivity_$c/= ::
    InflectionData.Transitivity
    -> InflectionData.Transitivity -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a41 :: InflectionData.Transitivity
                   b :: InflectionData.Transitivity ->
                 case a41 of wild {
                   InflectionData.UTRA
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.UTRA -> GHC.Types.False }
                   InflectionData.NTRANS
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.NTRANS -> GHC.Types.False }
                   InflectionData.TRANS
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.TRANS -> GHC.Types.False }
                   InflectionData.MTRANS
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.MTRANS -> GHC.Types.False }
                   InflectionData.DITRANS
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.DITRANS -> GHC.Types.False } }) -}
66f849eb0df273279725c8472ced02cc
  $fEqVoice :: GHC.Classes.Eq InflectionData.Voice
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Voice
                  InflectionData.$fEqExpress_$c==7
                  InflectionData.$fEqVoice_$c/= -}
66f849eb0df273279725c8472ced02cc
  $fEqVoice_$c/= ::
    InflectionData.Voice -> InflectionData.Voice -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a41 :: InflectionData.Voice
                   b :: InflectionData.Voice ->
                 case a41 of wild {
                   InflectionData.UVOI
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.UVOI -> GHC.Types.False }
                   InflectionData.ACTIVE
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.ACTIVE -> GHC.Types.False }
                   InflectionData.MIDDLE
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.MIDDLE -> GHC.Types.False }
                   InflectionData.PASSIVE
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.PASSIVE -> GHC.Types.False } }) -}
3a73fa2d976f240c7ba768b809a25328
  $fEqVolition :: GHC.Classes.Eq InflectionData.Volition
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Volition
                  InflectionData.$fEqExpress_$c==9
                  InflectionData.$fEqVolition_$c/= -}
3a73fa2d976f240c7ba768b809a25328
  $fEqVolition_$c/= ::
    InflectionData.Volition
    -> InflectionData.Volition -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a41 :: InflectionData.Volition b :: InflectionData.Volition ->
                 case a41 of wild {
                   InflectionData.UVOL
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.UVOL -> GHC.Types.False }
                   InflectionData.VOL
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.VOL -> GHC.Types.False }
                   InflectionData.NVOL
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.NVOL -> GHC.Types.False } }) -}
91fb0b41f9ef14c662c70b3629b6b5fe
  $fReadAnimacy :: GHC.Read.Read InflectionData.Animacy
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Animacy
                  InflectionData.$fReadAnimacy_$s$dmreadsPrec
                  InflectionData.$fReadAnimacy28
                  InflectionData.$fReadAnimacy_$creadPrec
                  InflectionData.$fReadAnimacy_$creadListPrec -}
91fb0b41f9ef14c662c70b3629b6b5fe
  $fReadAnimacy1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Animacy] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.Animacy]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.Animacy
                   InflectionData.$fReadAnimacy2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Animacy>_R))
                   @ b
                   eta1) -}
91fb0b41f9ef14c662c70b3629b6b5fe
  $fReadAnimacy10 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadAnimacy12,
                  InflectionData.$fReadAnimacy11
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Animacy>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Animacy>_R))))) -}
91fb0b41f9ef14c662c70b3629b6b5fe
  $fReadAnimacy11 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Animacy -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Animacy
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.INAN) -}
19439436e44bf402d905271fd0074710
  $fReadAnimacy12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "INAN"#) -}
91fb0b41f9ef14c662c70b3629b6b5fe
  $fReadAnimacy13 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadAnimacy15,
                  InflectionData.$fReadAnimacy14
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Animacy>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Animacy>_R))))) -}
91fb0b41f9ef14c662c70b3629b6b5fe
  $fReadAnimacy14 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Animacy -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Animacy
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.ZO) -}
d10a2a0ec3a6e2736ec95cb61a2fccba
  $fReadAnimacy15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ZO"#) -}
91fb0b41f9ef14c662c70b3629b6b5fe
  $fReadAnimacy16 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadAnimacy18,
                  InflectionData.$fReadAnimacy17
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Animacy>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Animacy>_R))))) -}
91fb0b41f9ef14c662c70b3629b6b5fe
  $fReadAnimacy17 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Animacy -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Animacy
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.NHUM) -}
d0b65d941fdd01d5fcfb71cc8fbc937d
  $fReadAnimacy18 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NHUM"#) -}
91fb0b41f9ef14c662c70b3629b6b5fe
  $fReadAnimacy19 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadAnimacy21,
                  InflectionData.$fReadAnimacy20
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Animacy>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Animacy>_R))))) -}
91fb0b41f9ef14c662c70b3629b6b5fe
  $fReadAnimacy2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Animacy
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Animacy
                   InflectionData.$fReadAnimacy3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.Animacy>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.Animacy>_R)))) -}
91fb0b41f9ef14c662c70b3629b6b5fe
  $fReadAnimacy20 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Animacy -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Animacy
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.HUM) -}
a1b1033c2f380ca44bfffacda474dc60
  $fReadAnimacy21 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "HUM"#) -}
91fb0b41f9ef14c662c70b3629b6b5fe
  $fReadAnimacy22 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadAnimacy24,
                  InflectionData.$fReadAnimacy23
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Animacy>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Animacy>_R))))) -}
91fb0b41f9ef14c662c70b3629b6b5fe
  $fReadAnimacy23 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Animacy -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Animacy
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.AN) -}
5daee821abc081b050cde3e9ba0e5966
  $fReadAnimacy24 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AN"#) -}
91fb0b41f9ef14c662c70b3629b6b5fe
  $fReadAnimacy25 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadAnimacy27,
                  InflectionData.$fReadAnimacy26
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Animacy>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Animacy>_R))))) -}
91fb0b41f9ef14c662c70b3629b6b5fe
  $fReadAnimacy26 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Animacy -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Animacy
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.UANI) -}
ca49006d720543d465081afe8f2368fb
  $fReadAnimacy27 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "UANI"#) -}
91fb0b41f9ef14c662c70b3629b6b5fe
  $fReadAnimacy28 ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Animacy]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Animacy]
                   InflectionData.$fReadAnimacy29) -}
91fb0b41f9ef14c662c70b3629b6b5fe
  $fReadAnimacy29 ::
    Text.ParserCombinators.ReadP.P [InflectionData.Animacy]
  {- Unfolding: (GHC.Read.$wa
                   @ InflectionData.Animacy
                   InflectionData.$fReadAnimacy2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Animacy>_R))
                   @ [InflectionData.Animacy]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                      @ [InflectionData.Animacy])) -}
91fb0b41f9ef14c662c70b3629b6b5fe
  $fReadAnimacy3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Animacy -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: InflectionData.Animacy
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ InflectionData.Animacy
                   InflectionData.$fReadAnimacy4
                   eta
                   @ b
                   eta1) -}
91fb0b41f9ef14c662c70b3629b6b5fe
  $fReadAnimacy4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)
                   InflectionData.$fReadAnimacy25
                   InflectionData.$fReadAnimacy5) -}
91fb0b41f9ef14c662c70b3629b6b5fe
  $fReadAnimacy5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)
                   InflectionData.$fReadAnimacy22
                   InflectionData.$fReadAnimacy6) -}
91fb0b41f9ef14c662c70b3629b6b5fe
  $fReadAnimacy6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)
                   InflectionData.$fReadAnimacy19
                   InflectionData.$fReadAnimacy7) -}
91fb0b41f9ef14c662c70b3629b6b5fe
  $fReadAnimacy7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)
                   InflectionData.$fReadAnimacy16
                   InflectionData.$fReadAnimacy8) -}
91fb0b41f9ef14c662c70b3629b6b5fe
  $fReadAnimacy8 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)
                   InflectionData.$fReadAnimacy13
                   InflectionData.$fReadAnimacy9) -}
91fb0b41f9ef14c662c70b3629b6b5fe
  $fReadAnimacy9 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)
                   InflectionData.$fReadAnimacy10
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           InflectionData.Animacy))) -}
91fb0b41f9ef14c662c70b3629b6b5fe
  $fReadAnimacy_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [InflectionData.Animacy]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadAnimacy1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.Animacy]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.Animacy]>_R))) -}
91fb0b41f9ef14c662c70b3629b6b5fe
  $fReadAnimacy_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadAnimacy2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.Animacy>_R)) -}
91fb0b41f9ef14c662c70b3629b6b5fe
  $fReadAnimacy_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Animacy
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ InflectionData.Animacy
                   InflectionData.$fReadAnimacy_$creadPrec
                   eta) -}
8bbea98a3b619c1fafa2f31c2f747273
  $fReadAspect :: GHC.Read.Read InflectionData.Aspect
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Aspect
                  InflectionData.$fReadAspect_$s$dmreadsPrec
                  InflectionData.$fReadAspect36
                  InflectionData.$fReadAspect_$creadPrec
                  InflectionData.$fReadAspect_$creadListPrec -}
8bbea98a3b619c1fafa2f31c2f747273
  $fReadAspect1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Aspect] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.Aspect]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.Aspect
                   InflectionData.$fReadAspect2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Aspect>_R))
                   @ b
                   eta1) -}
8bbea98a3b619c1fafa2f31c2f747273
  $fReadAspect10 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)
                   InflectionData.$fReadAspect15
                   InflectionData.$fReadAspect11) -}
8bbea98a3b619c1fafa2f31c2f747273
  $fReadAspect11 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)
                   InflectionData.$fReadAspect12
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           InflectionData.Aspect))) -}
8bbea98a3b619c1fafa2f31c2f747273
  $fReadAspect12 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadAspect14,
                  InflectionData.$fReadAspect13
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Aspect>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Aspect>_R))))) -}
8bbea98a3b619c1fafa2f31c2f747273
  $fReadAspect13 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Aspect -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Aspect -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.PROG) -}
bb661dbb922c356269caf31e135a69c6
  $fReadAspect14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PROG"#) -}
8bbea98a3b619c1fafa2f31c2f747273
  $fReadAspect15 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadAspect17,
                  InflectionData.$fReadAspect16
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Aspect>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Aspect>_R))))) -}
8bbea98a3b619c1fafa2f31c2f747273
  $fReadAspect16 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Aspect -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Aspect -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.NPROG) -}
955b4adb5629d1fe75707e31425b2844
  $fReadAspect17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NPROG"#) -}
8bbea98a3b619c1fafa2f31c2f747273
  $fReadAspect18 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadAspect20,
                  InflectionData.$fReadAspect19
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Aspect>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Aspect>_R))))) -}
8bbea98a3b619c1fafa2f31c2f747273
  $fReadAspect19 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Aspect -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Aspect -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.CONT) -}
8bbea98a3b619c1fafa2f31c2f747273
  $fReadAspect2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Aspect
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Aspect
                   InflectionData.$fReadAspect3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.Aspect>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.Aspect>_R)))) -}
7df2236fde1b6c07ddadd52f72528ace
  $fReadAspect20 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "CONT"#) -}
8bbea98a3b619c1fafa2f31c2f747273
  $fReadAspect21 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadAspect23,
                  InflectionData.$fReadAspect22
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Aspect>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Aspect>_R))))) -}
8bbea98a3b619c1fafa2f31c2f747273
  $fReadAspect22 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Aspect -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Aspect -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.HAB) -}
c0370ecb648af995fbb4782a49942087
  $fReadAspect23 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "HAB"#) -}
8bbea98a3b619c1fafa2f31c2f747273
  $fReadAspect24 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadAspect26,
                  InflectionData.$fReadAspect25
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Aspect>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Aspect>_R))))) -}
8bbea98a3b619c1fafa2f31c2f747273
  $fReadAspect25 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Aspect -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Aspect -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.IPFV) -}
5a253480b3312fb2f3d269e2c7465dcf
  $fReadAspect26 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "IPFV"#) -}
8bbea98a3b619c1fafa2f31c2f747273
  $fReadAspect27 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadAspect29,
                  InflectionData.$fReadAspect28
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Aspect>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Aspect>_R))))) -}
8bbea98a3b619c1fafa2f31c2f747273
  $fReadAspect28 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Aspect -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Aspect -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.PFV) -}
4a335c145b1e2faf19570196fe46c33e
  $fReadAspect29 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PFV"#) -}
8bbea98a3b619c1fafa2f31c2f747273
  $fReadAspect3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Aspect -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: InflectionData.Aspect
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ InflectionData.Aspect
                   InflectionData.$fReadAspect4
                   eta
                   @ b
                   eta1) -}
8bbea98a3b619c1fafa2f31c2f747273
  $fReadAspect30 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadAspect32,
                  InflectionData.$fReadAspect31
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Aspect>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Aspect>_R))))) -}
8bbea98a3b619c1fafa2f31c2f747273
  $fReadAspect31 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Aspect -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Aspect -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.NNPROG) -}
b893f1afb0286e39b2c99c15347eaf9c
  $fReadAspect32 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NNPROG"#) -}
8bbea98a3b619c1fafa2f31c2f747273
  $fReadAspect33 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadAspect35,
                  InflectionData.$fReadAspect34
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Aspect>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Aspect>_R))))) -}
8bbea98a3b619c1fafa2f31c2f747273
  $fReadAspect34 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Aspect -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Aspect -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.UASP) -}
72d4c078420063342af5723a047d2dc4
  $fReadAspect35 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "UASP"#) -}
8bbea98a3b619c1fafa2f31c2f747273
  $fReadAspect36 ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Aspect]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Aspect]
                   InflectionData.$fReadAspect37) -}
8bbea98a3b619c1fafa2f31c2f747273
  $fReadAspect37 ::
    Text.ParserCombinators.ReadP.P [InflectionData.Aspect]
  {- Unfolding: (GHC.Read.$wa
                   @ InflectionData.Aspect
                   InflectionData.$fReadAspect2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Aspect>_R))
                   @ [InflectionData.Aspect]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                      @ [InflectionData.Aspect])) -}
8bbea98a3b619c1fafa2f31c2f747273
  $fReadAspect4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)
                   InflectionData.$fReadAspect33
                   InflectionData.$fReadAspect5) -}
8bbea98a3b619c1fafa2f31c2f747273
  $fReadAspect5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)
                   InflectionData.$fReadAspect30
                   InflectionData.$fReadAspect6) -}
8bbea98a3b619c1fafa2f31c2f747273
  $fReadAspect6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)
                   InflectionData.$fReadAspect27
                   InflectionData.$fReadAspect7) -}
8bbea98a3b619c1fafa2f31c2f747273
  $fReadAspect7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)
                   InflectionData.$fReadAspect24
                   InflectionData.$fReadAspect8) -}
8bbea98a3b619c1fafa2f31c2f747273
  $fReadAspect8 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)
                   InflectionData.$fReadAspect21
                   InflectionData.$fReadAspect9) -}
8bbea98a3b619c1fafa2f31c2f747273
  $fReadAspect9 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)
                   InflectionData.$fReadAspect18
                   InflectionData.$fReadAspect10) -}
8bbea98a3b619c1fafa2f31c2f747273
  $fReadAspect_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [InflectionData.Aspect]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadAspect1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.Aspect]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.Aspect]>_R))) -}
8bbea98a3b619c1fafa2f31c2f747273
  $fReadAspect_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadAspect2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.Aspect>_R)) -}
8bbea98a3b619c1fafa2f31c2f747273
  $fReadAspect_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Aspect
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ InflectionData.Aspect
                   InflectionData.$fReadAspect_$creadPrec
                   eta) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase :: GHC.Read.Read InflectionData.Case
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Case
                  InflectionData.$fReadCase_$s$dmreadsPrec
                  InflectionData.$fReadCase200
                  InflectionData.$fReadCase_$creadPrec
                  InflectionData.$fReadCase_$creadListPrec -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Case] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.Case]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.Case
                   InflectionData.$fReadCase2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Case>_R))
                   @ b
                   eta1) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase10 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase179
                   InflectionData.$fReadCase11) -}
a6a29ffd4ac0a3abf04dd8ec1f9b120a
  $fReadCase100 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "COMP"#) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase101 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase103,
                  InflectionData.$fReadCase102
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase102 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.ABL) -}
7e81221ff1d50300b7414432395d1c8c
  $fReadCase103 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ABL"#) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase104 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase106,
                  InflectionData.$fReadCase105
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase105 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.LOC) -}
c47d2730ca1a44b978cc29d7eceb5df3
  $fReadCase106 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "LOC"#) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase107 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase109,
                  InflectionData.$fReadCase108
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase108 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.LAT) -}
125c58500a549a08e1eb9609f2550925
  $fReadCase109 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "LAT"#) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase11 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase176
                   InflectionData.$fReadCase12) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase110 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase112,
                  InflectionData.$fReadCase111
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase111 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.POST) -}
7e5147fc93b3aac48c7db2edfa34e803
  $fReadCase112 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "POST"#) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase113 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase115,
                  InflectionData.$fReadCase114
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase114 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.PREP) -}
ca802d96dbe57cd2c4bf27de001d111c
  $fReadCase115 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PREP"#) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase116 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase118,
                  InflectionData.$fReadCase117
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase117 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.ADP) -}
b821da500e8509c4f43169af37d45332
  $fReadCase118 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ADP"#) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase119 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase121,
                  InflectionData.$fReadCase120
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase12 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase173
                   InflectionData.$fReadCase13) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase120 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.OBL6) -}
e9b23f4eb915219d5d2484ed9eaa5654
  $fReadCase121 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OBL6"#) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase122 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase124,
                  InflectionData.$fReadCase123
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase123 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.OBL5) -}
bb50e33610f2624f6c7bbf59428dbcd9
  $fReadCase124 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OBL5"#) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase125 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase127,
                  InflectionData.$fReadCase126
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase126 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.OBL4) -}
9d340f4c457bb454dc8792256aca6d21
  $fReadCase127 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OBL4"#) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase128 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase130,
                  InflectionData.$fReadCase129
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase129 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.OBL3) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase13 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase170
                   InflectionData.$fReadCase14) -}
5466bbfeb42e16c531fb7f02e64795bd
  $fReadCase130 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OBL3"#) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase131 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase133,
                  InflectionData.$fReadCase132
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase132 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.OBL2) -}
b72cd3389452df8f0be56d9335e084c7
  $fReadCase133 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OBL2"#) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase134 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase136,
                  InflectionData.$fReadCase135
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase135 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.OBL1) -}
3816e577fc70d708f10ebd523fe19b95
  $fReadCase136 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OBL1"#) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase137 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase139,
                  InflectionData.$fReadCase138
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase138 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.DRT2) -}
c791fb3ec43ff6e87ef19488153ca8c2
  $fReadCase139 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DRT2"#) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase14 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase167
                   InflectionData.$fReadCase15) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase140 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase142,
                  InflectionData.$fReadCase141
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase141 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.TR) -}
6f91f32525d768b552d4688564451063
  $fReadCase142 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TR"#) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase143 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase145,
                  InflectionData.$fReadCase144
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase144 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.DRT1) -}
20b6b0ec732910593cbb4757a4ceef1f
  $fReadCase145 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DRT1"#) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase146 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase148,
                  InflectionData.$fReadCase147
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase147 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.OBJ) -}
b86187c0c2478614f287e3d02b897944
  $fReadCase148 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OBJ"#) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase149 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase151,
                  InflectionData.$fReadCase150
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase15 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase164
                   InflectionData.$fReadCase16) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase150 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.DTR) -}
d437ec9564fa2cf992427bb3e19f746e
  $fReadCase151 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DTR"#) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase152 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase154,
                  InflectionData.$fReadCase153
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase153 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.ABS3) -}
299e5ad94c7505e6b82370685b145f7d
  $fReadCase154 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ABS3"#) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase155 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase157,
                  InflectionData.$fReadCase156
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase156 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.ABS2) -}
64fb003431fe84e6af7bb2c95cd1093d
  $fReadCase157 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ABS2"#) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase158 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase160,
                  InflectionData.$fReadCase159
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase159 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.NOM2) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase16 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase161
                   InflectionData.$fReadCase17) -}
ca98a853b105547bcbd8abf5842be6f7
  $fReadCase160 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NOM2"#) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase161 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase163,
                  InflectionData.$fReadCase162
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase162 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.ERG2) -}
adc465566840a5cffe6375eb60addd34
  $fReadCase163 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ERG2"#) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase164 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase166,
                  InflectionData.$fReadCase165
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase165 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.PRIM) -}
d219bfae9933d753e0161490ee344b03
  $fReadCase166 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PRIM"#) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase167 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase169,
                  InflectionData.$fReadCase168
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase168 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.DIR) -}
55aba7a839b17bdbaef54c5cf7a26dcf
  $fReadCase169 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DIR"#) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase17 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase158
                   InflectionData.$fReadCase18) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase170 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase172,
                  InflectionData.$fReadCase171
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase171 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.MTR) -}
1273d6ac86c75ba1dc303254d1d2f339
  $fReadCase172 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "MTR"#) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase173 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase175,
                  InflectionData.$fReadCase174
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase174 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.ABS) -}
e2d3da0e75eeb3b92732c39c7a66f8cb
  $fReadCase175 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ABS"#) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase176 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase178,
                  InflectionData.$fReadCase177
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase177 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.NOM) -}
c8738f6af9b3597d60d0b625de1d7b5d
  $fReadCase178 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NOM"#) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase179 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase181,
                  InflectionData.$fReadCase180
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase18 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase155
                   InflectionData.$fReadCase19) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase180 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.SEC) -}
6d82a5cacab8a341324351fb7824594d
  $fReadCase181 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SEC"#) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase182 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase184,
                  InflectionData.$fReadCase183
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase183 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.INDIR) -}
ae27bcacbb5d3b39230136419cb40b80
  $fReadCase184 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "INDIR"#) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase185 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase187,
                  InflectionData.$fReadCase186
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase186 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.PEG) -}
65adfa3aee87820ff1bfa9a6634c56d9
  $fReadCase187 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PEG"#) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase188 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase190,
                  InflectionData.$fReadCase189
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase189 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.ERG) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase19 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase152
                   InflectionData.$fReadCase20) -}
38fa1293bebd3ac05ca186c0aab1b635
  $fReadCase190 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ERG"#) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase191 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase193,
                  InflectionData.$fReadCase192
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase192 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.ACC) -}
b32c4b409699753895eecd54c1cd7ccb
  $fReadCase193 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ACC"#) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase194 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase196,
                  InflectionData.$fReadCase195
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase195 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.INTR) -}
8c1808c067425ac21d57369577f2fd74
  $fReadCase196 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "INTR"#) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase197 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase199,
                  InflectionData.$fReadCase198
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase198 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.UCAS) -}
5b39f7d562afddb809fa513ac4ca0734
  $fReadCase199 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "UCAS"#) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Case
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Case
                   InflectionData.$fReadCase3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.Case>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.Case>_R)))) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase20 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase149
                   InflectionData.$fReadCase21) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase200 ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Case]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Case]
                   InflectionData.$fReadCase201) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase201 ::
    Text.ParserCombinators.ReadP.P [InflectionData.Case]
  {- Unfolding: (GHC.Read.$wa
                   @ InflectionData.Case
                   InflectionData.$fReadCase2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Case>_R))
                   @ [InflectionData.Case]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                      @ [InflectionData.Case])) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase21 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase146
                   InflectionData.$fReadCase22) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase22 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase143
                   InflectionData.$fReadCase23) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase23 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase140
                   InflectionData.$fReadCase24) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase24 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase137
                   InflectionData.$fReadCase25) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase25 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase134
                   InflectionData.$fReadCase26) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase26 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase131
                   InflectionData.$fReadCase27) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase27 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase128
                   InflectionData.$fReadCase28) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase28 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase125
                   InflectionData.$fReadCase29) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase29 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase122
                   InflectionData.$fReadCase30) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ InflectionData.Case
                   InflectionData.$fReadCase4
                   eta
                   @ b
                   eta1) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase30 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase119
                   InflectionData.$fReadCase31) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase31 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase116
                   InflectionData.$fReadCase32) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase32 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase113
                   InflectionData.$fReadCase33) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase33 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase110
                   InflectionData.$fReadCase34) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase34 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase107
                   InflectionData.$fReadCase35) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase35 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase104
                   InflectionData.$fReadCase36) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase36 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase101
                   InflectionData.$fReadCase37) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase37 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase98
                   InflectionData.$fReadCase38) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase38 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase95
                   InflectionData.$fReadCase39) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase39 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase92
                   InflectionData.$fReadCase40) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase197
                   InflectionData.$fReadCase5) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase40 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase89
                   InflectionData.$fReadCase41) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase41 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase86
                   InflectionData.$fReadCase42) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase42 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase83
                   InflectionData.$fReadCase43) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase43 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase80
                   InflectionData.$fReadCase44) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase44 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase77
                   InflectionData.$fReadCase45) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase45 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase74
                   InflectionData.$fReadCase46) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase46 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase71
                   InflectionData.$fReadCase47) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase47 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase68
                   InflectionData.$fReadCase48) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase48 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase65
                   InflectionData.$fReadCase49) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase49 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase62
                   InflectionData.$fReadCase50) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase194
                   InflectionData.$fReadCase6) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase50 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase59
                   InflectionData.$fReadCase51) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase51 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase56
                   InflectionData.$fReadCase52) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase52 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase53
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case))) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase53 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase55,
                  InflectionData.$fReadCase54
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase54 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.VOC) -}
bdbda448ee639032aabf1f115b93e5e6
  $fReadCase55 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "VOC"#) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase56 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase58,
                  InflectionData.$fReadCase57
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase57 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.PART) -}
45f454d880d3e098b89260b711a6a113
  $fReadCase58 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PART"#) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase59 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase61,
                  InflectionData.$fReadCase60
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase191
                   InflectionData.$fReadCase7) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase60 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.POSS) -}
0dd56963b1689da0cb0e8fa5e7ac9ab7
  $fReadCase61 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "POSS"#) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase62 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase64,
                  InflectionData.$fReadCase63
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase63 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.GEN) -}
35bb0eec1e2125dd87c721a5afe5e069
  $fReadCase64 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "GEN"#) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase65 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase67,
                  InflectionData.$fReadCase66
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase66 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.DISTR) -}
69ec84467d0089ee5013364b9fe7c45b
  $fReadCase67 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DISTR"#) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase68 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase70,
                  InflectionData.$fReadCase69
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase69 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.CAUS) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase188
                   InflectionData.$fReadCase8) -}
6866c58286977d696f7c2af7e66f5689
  $fReadCase70 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "CAUS"#) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase71 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase73,
                  InflectionData.$fReadCase72
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase72 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.BEN) -}
2006fd1bc88980911ffbd4b884d89370
  $fReadCase73 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "BEN"#) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase74 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase76,
                  InflectionData.$fReadCase75
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase75 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.ORN) -}
fb05e97148ed33287cd4226ab2edc4ae
  $fReadCase76 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ORN"#) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase77 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase79,
                  InflectionData.$fReadCase78
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase78 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.INSCOMIT) -}
f51a225830f69e5fc3641f6ea379ac0c
  $fReadCase79 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "INSCOMIT"#) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase8 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase185
                   InflectionData.$fReadCase9) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase80 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase82,
                  InflectionData.$fReadCase81
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase81 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.COMIT) -}
91efc6da462386bedc77553b0db137cb
  $fReadCase82 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "COMIT"#) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase83 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase85,
                  InflectionData.$fReadCase84
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase84 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.INS) -}
4e32de4b39b061f0289ddb7ff7c822fa
  $fReadCase85 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "INS"#) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase86 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase88,
                  InflectionData.$fReadCase87
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase87 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.DAT) -}
94fdc7ee9595131dca1b244247c2d7db
  $fReadCase88 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DAT"#) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase89 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase91,
                  InflectionData.$fReadCase90
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase9 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase182
                   InflectionData.$fReadCase10) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase90 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.ABE) -}
c94fb5602df67d402e948372988f50c2
  $fReadCase91 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ABE"#) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase92 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase94,
                  InflectionData.$fReadCase93
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase93 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.IDEN) -}
81c457dd6b1a71cf5ccd6fa2a9a02749
  $fReadCase94 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "IDEN"#) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase95 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase97,
                  InflectionData.$fReadCase96
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase96 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.EQU) -}
a89bf0b100b3b89c26d0cb89d3c24fb1
  $fReadCase97 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "EQU"#) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase98 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase100,
                  InflectionData.$fReadCase99
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase99 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.COMP) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [InflectionData.Case]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadCase1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.Case]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.Case]>_R))) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadCase2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.Case>_R)) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fReadCase_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Case
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ InflectionData.Case
                   InflectionData.$fReadCase_$creadPrec
                   eta) -}
69e12afea565be2617200bf9671a6c0d
  $fReadDefiniteness :: GHC.Read.Read InflectionData.Definiteness
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Definiteness
                  InflectionData.$fReadDefiniteness_$s$dmreadsPrec
                  InflectionData.$fReadDefiniteness16
                  InflectionData.$fReadDefiniteness_$creadPrec
                  InflectionData.$fReadDefiniteness_$creadListPrec -}
69e12afea565be2617200bf9671a6c0d
  $fReadDefiniteness1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Definiteness] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.Definiteness]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.Definiteness
                   InflectionData.$fReadDefiniteness2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Definiteness>_R))
                   @ b
                   eta1) -}
69e12afea565be2617200bf9671a6c0d
  $fReadDefiniteness10 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Definiteness)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadDefiniteness12,
                  InflectionData.$fReadDefiniteness11
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Definiteness>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Definiteness>_R))))) -}
69e12afea565be2617200bf9671a6c0d
  $fReadDefiniteness11 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Definiteness -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Definiteness
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.DEF) -}
b512b959535903fd401075595051618e
  $fReadDefiniteness12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DEF"#) -}
69e12afea565be2617200bf9671a6c0d
  $fReadDefiniteness13 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Definiteness)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadDefiniteness15,
                  InflectionData.$fReadDefiniteness14
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Definiteness>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Definiteness>_R))))) -}
69e12afea565be2617200bf9671a6c0d
  $fReadDefiniteness14 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Definiteness -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Definiteness
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.UDEF) -}
f49a57ea35ec0d9ba55936d04c1796d8
  $fReadDefiniteness15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "UDEF"#) -}
69e12afea565be2617200bf9671a6c0d
  $fReadDefiniteness16 ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Definiteness]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Definiteness]
                   InflectionData.$fReadDefiniteness17) -}
69e12afea565be2617200bf9671a6c0d
  $fReadDefiniteness17 ::
    Text.ParserCombinators.ReadP.P [InflectionData.Definiteness]
  {- Unfolding: (GHC.Read.$wa
                   @ InflectionData.Definiteness
                   InflectionData.$fReadDefiniteness2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Definiteness>_R))
                   @ [InflectionData.Definiteness]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                      @ [InflectionData.Definiteness])) -}
69e12afea565be2617200bf9671a6c0d
  $fReadDefiniteness2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Definiteness
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Definiteness
                   InflectionData.$fReadDefiniteness3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.Definiteness>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.Definiteness>_R)))) -}
69e12afea565be2617200bf9671a6c0d
  $fReadDefiniteness3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Definiteness -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: InflectionData.Definiteness
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ InflectionData.Definiteness
                   InflectionData.$fReadDefiniteness4
                   eta
                   @ b
                   eta1) -}
69e12afea565be2617200bf9671a6c0d
  $fReadDefiniteness4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Definiteness)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Definiteness)
                   InflectionData.$fReadDefiniteness13
                   InflectionData.$fReadDefiniteness5) -}
69e12afea565be2617200bf9671a6c0d
  $fReadDefiniteness5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Definiteness)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Definiteness)
                   InflectionData.$fReadDefiniteness10
                   InflectionData.$fReadDefiniteness6) -}
69e12afea565be2617200bf9671a6c0d
  $fReadDefiniteness6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Definiteness)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Definiteness)
                   InflectionData.$fReadDefiniteness7
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           InflectionData.Definiteness))) -}
69e12afea565be2617200bf9671a6c0d
  $fReadDefiniteness7 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Definiteness)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadDefiniteness9,
                  InflectionData.$fReadDefiniteness8
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Definiteness>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Definiteness>_R))))) -}
69e12afea565be2617200bf9671a6c0d
  $fReadDefiniteness8 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Definiteness -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Definiteness
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.INDF) -}
1221659d8d60ad3f80ac1ae25a507703
  $fReadDefiniteness9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "INDF"#) -}
69e12afea565be2617200bf9671a6c0d
  $fReadDefiniteness_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [InflectionData.Definiteness]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadDefiniteness1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.Definiteness]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.Definiteness]>_R))) -}
69e12afea565be2617200bf9671a6c0d
  $fReadDefiniteness_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      InflectionData.Definiteness
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadDefiniteness2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.Definiteness>_R)) -}
69e12afea565be2617200bf9671a6c0d
  $fReadDefiniteness_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Definiteness
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ InflectionData.Definiteness
                   InflectionData.$fReadDefiniteness_$creadPrec
                   eta) -}
1261593b396b3f8b4367998b51bf6d8a
  $fReadEvidentiality :: GHC.Read.Read InflectionData.Evidentiality
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Evidentiality
                  InflectionData.$fReadEvidentiality_$s$dmreadsPrec
                  InflectionData.$fReadEvidentiality44
                  InflectionData.$fReadEvidentiality_$creadPrec
                  InflectionData.$fReadEvidentiality_$creadListPrec -}
1261593b396b3f8b4367998b51bf6d8a
  $fReadEvidentiality1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Evidentiality]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.Evidentiality]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.Evidentiality
                   InflectionData.$fReadEvidentiality2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Evidentiality>_R))
                   @ b
                   eta1) -}
1261593b396b3f8b4367998b51bf6d8a
  $fReadEvidentiality10 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Evidentiality)
                   InflectionData.$fReadEvidentiality23
                   InflectionData.$fReadEvidentiality11) -}
1261593b396b3f8b4367998b51bf6d8a
  $fReadEvidentiality11 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Evidentiality)
                   InflectionData.$fReadEvidentiality20
                   InflectionData.$fReadEvidentiality12) -}
1261593b396b3f8b4367998b51bf6d8a
  $fReadEvidentiality12 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Evidentiality)
                   InflectionData.$fReadEvidentiality17
                   InflectionData.$fReadEvidentiality13) -}
1261593b396b3f8b4367998b51bf6d8a
  $fReadEvidentiality13 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Evidentiality)
                   InflectionData.$fReadEvidentiality14
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           InflectionData.Evidentiality))) -}
1261593b396b3f8b4367998b51bf6d8a
  $fReadEvidentiality14 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Evidentiality)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadEvidentiality16,
                  InflectionData.$fReadEvidentiality15
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Evidentiality>_R))))) -}
1261593b396b3f8b4367998b51bf6d8a
  $fReadEvidentiality15 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Evidentiality
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.ASS) -}
4efe24ac52ba03b73d42a7d32b4265cc
  $fReadEvidentiality16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ASS"#) -}
1261593b396b3f8b4367998b51bf6d8a
  $fReadEvidentiality17 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Evidentiality)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadEvidentiality19,
                  InflectionData.$fReadEvidentiality18
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Evidentiality>_R))))) -}
1261593b396b3f8b4367998b51bf6d8a
  $fReadEvidentiality18 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Evidentiality
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.QUO) -}
9e111d06eba8818c24f0bc706fc97e5e
  $fReadEvidentiality19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "QUO"#) -}
1261593b396b3f8b4367998b51bf6d8a
  $fReadEvidentiality2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Evidentiality
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Evidentiality
                   InflectionData.$fReadEvidentiality3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.Evidentiality>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.Evidentiality>_R)))) -}
1261593b396b3f8b4367998b51bf6d8a
  $fReadEvidentiality20 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Evidentiality)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadEvidentiality22,
                  InflectionData.$fReadEvidentiality21
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Evidentiality>_R))))) -}
1261593b396b3f8b4367998b51bf6d8a
  $fReadEvidentiality21 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Evidentiality
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.HSY) -}
a96f2368cb6cfeb40500390ae93f3698
  $fReadEvidentiality22 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "HSY"#) -}
1261593b396b3f8b4367998b51bf6d8a
  $fReadEvidentiality23 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Evidentiality)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadEvidentiality25,
                  InflectionData.$fReadEvidentiality24
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Evidentiality>_R))))) -}
1261593b396b3f8b4367998b51bf6d8a
  $fReadEvidentiality24 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Evidentiality
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.REP) -}
72dbd746cf5011685b45aa364badad4a
  $fReadEvidentiality25 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "REP"#) -}
1261593b396b3f8b4367998b51bf6d8a
  $fReadEvidentiality26 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Evidentiality)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadEvidentiality28,
                  InflectionData.$fReadEvidentiality27
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Evidentiality>_R))))) -}
1261593b396b3f8b4367998b51bf6d8a
  $fReadEvidentiality27 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Evidentiality
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.INFER) -}
efd4463f897659dc1c2c288e172b9f7b
  $fReadEvidentiality28 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "INFER"#) -}
1261593b396b3f8b4367998b51bf6d8a
  $fReadEvidentiality29 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Evidentiality)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadEvidentiality31,
                  InflectionData.$fReadEvidentiality30
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Evidentiality>_R))))) -}
1261593b396b3f8b4367998b51bf6d8a
  $fReadEvidentiality3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: InflectionData.Evidentiality
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ InflectionData.Evidentiality
                   InflectionData.$fReadEvidentiality4
                   eta
                   @ b
                   eta1) -}
1261593b396b3f8b4367998b51bf6d8a
  $fReadEvidentiality30 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Evidentiality
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.AUD) -}
523a6d84548c343eb13a0d38d15617fe
  $fReadEvidentiality31 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AUD"#) -}
1261593b396b3f8b4367998b51bf6d8a
  $fReadEvidentiality32 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Evidentiality)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadEvidentiality34,
                  InflectionData.$fReadEvidentiality33
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Evidentiality>_R))))) -}
1261593b396b3f8b4367998b51bf6d8a
  $fReadEvidentiality33 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Evidentiality
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.NVIS) -}
f4241589a3501e38b72f89a7d3f59aae
  $fReadEvidentiality34 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NVIS"#) -}
1261593b396b3f8b4367998b51bf6d8a
  $fReadEvidentiality35 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Evidentiality)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadEvidentiality37,
                  InflectionData.$fReadEvidentiality36
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Evidentiality>_R))))) -}
1261593b396b3f8b4367998b51bf6d8a
  $fReadEvidentiality36 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Evidentiality
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.VIS) -}
a52dfb4a70b45a66750c2c79210d5519
  $fReadEvidentiality37 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "VIS"#) -}
1261593b396b3f8b4367998b51bf6d8a
  $fReadEvidentiality38 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Evidentiality)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadEvidentiality40,
                  InflectionData.$fReadEvidentiality39
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Evidentiality>_R))))) -}
1261593b396b3f8b4367998b51bf6d8a
  $fReadEvidentiality39 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Evidentiality
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.EXP) -}
1261593b396b3f8b4367998b51bf6d8a
  $fReadEvidentiality4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Evidentiality)
                   InflectionData.$fReadEvidentiality41
                   InflectionData.$fReadEvidentiality5) -}
87e4f0612caeb79c5f045ce9a42bc43b
  $fReadEvidentiality40 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "EXP"#) -}
1261593b396b3f8b4367998b51bf6d8a
  $fReadEvidentiality41 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Evidentiality)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadEvidentiality43,
                  InflectionData.$fReadEvidentiality42
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Evidentiality>_R))))) -}
1261593b396b3f8b4367998b51bf6d8a
  $fReadEvidentiality42 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Evidentiality
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.UEVI) -}
0e337ae1a9e3ef725abecf628fc3a074
  $fReadEvidentiality43 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "UEVI"#) -}
1261593b396b3f8b4367998b51bf6d8a
  $fReadEvidentiality44 ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Evidentiality]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Evidentiality]
                   InflectionData.$fReadEvidentiality45) -}
1261593b396b3f8b4367998b51bf6d8a
  $fReadEvidentiality45 ::
    Text.ParserCombinators.ReadP.P [InflectionData.Evidentiality]
  {- Unfolding: (GHC.Read.$wa
                   @ InflectionData.Evidentiality
                   InflectionData.$fReadEvidentiality2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Evidentiality>_R))
                   @ [InflectionData.Evidentiality]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                      @ [InflectionData.Evidentiality])) -}
1261593b396b3f8b4367998b51bf6d8a
  $fReadEvidentiality5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Evidentiality)
                   InflectionData.$fReadEvidentiality38
                   InflectionData.$fReadEvidentiality6) -}
1261593b396b3f8b4367998b51bf6d8a
  $fReadEvidentiality6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Evidentiality)
                   InflectionData.$fReadEvidentiality35
                   InflectionData.$fReadEvidentiality7) -}
1261593b396b3f8b4367998b51bf6d8a
  $fReadEvidentiality7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Evidentiality)
                   InflectionData.$fReadEvidentiality32
                   InflectionData.$fReadEvidentiality8) -}
1261593b396b3f8b4367998b51bf6d8a
  $fReadEvidentiality8 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Evidentiality)
                   InflectionData.$fReadEvidentiality29
                   InflectionData.$fReadEvidentiality9) -}
1261593b396b3f8b4367998b51bf6d8a
  $fReadEvidentiality9 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Evidentiality)
                   InflectionData.$fReadEvidentiality26
                   InflectionData.$fReadEvidentiality10) -}
1261593b396b3f8b4367998b51bf6d8a
  $fReadEvidentiality_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [InflectionData.Evidentiality]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadEvidentiality1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.Evidentiality]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.Evidentiality]>_R))) -}
1261593b396b3f8b4367998b51bf6d8a
  $fReadEvidentiality_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      InflectionData.Evidentiality
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadEvidentiality2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.Evidentiality>_R)) -}
1261593b396b3f8b4367998b51bf6d8a
  $fReadEvidentiality_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Evidentiality
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ InflectionData.Evidentiality
                   InflectionData.$fReadEvidentiality_$creadPrec
                   eta) -}
7e958650c7791002a2540390e3aca90e
  $fReadExpress ::
    GHC.Read.Read a => GHC.Read.Read (InflectionData.Express a)
  DFunId[0]
  {- Arity: 1, Strictness: <L,U(A,A,U,A)>m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a41 $dRead :: GHC.Read.Read a41.
                  @ (InflectionData.Express a41)
                  (InflectionData.$fReadExpress_$creadsPrec @ a41 $dRead)
                  (InflectionData.$fReadExpress_$creadList @ a41 $dRead)
                  (InflectionData.$fReadExpress_$creadPrec @ a41 $dRead)
                  (InflectionData.$fReadExpress_$creadListPrec @ a41 $dRead) -}
7e958650c7791002a2540390e3aca90e
  $fReadExpress1 ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Express a] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 3, Strictness: <L,U(A,A,U,A)><L,A><L,C(U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a41
                   $dRead :: GHC.Read.Read a41
                   eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.Express a41]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ (InflectionData.Express a41)
                   (InflectionData.$fReadExpress2 @ a41 $dRead)
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Express a41>_R))
                   @ b
                   eta1) -}
7e958650c7791002a2540390e3aca90e
  $fReadExpress2 ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP (InflectionData.Express a)
  {- Arity: 2, Strictness: <L,1*U(A,A,1*U,A)><L,U> -}
7e958650c7791002a2540390e3aca90e
  $fReadExpress_$creadList ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Express a]
  {- Arity: 1, Strictness: <L,U(A,A,U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a41 $dRead :: GHC.Read.Read a41 ->
                 Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Express a41]
                   (GHC.Read.$wa
                      @ (InflectionData.Express a41)
                      (InflectionData.$fReadExpress2 @ a41 $dRead)
                        `cast`
                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                <InflectionData.Express a41>_R))
                      @ [InflectionData.Express a41]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [InflectionData.Express a41]))) -}
7e958650c7791002a2540390e3aca90e
  $fReadExpress_$creadListPrec ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadPrec.ReadPrec [InflectionData.Express a]
  {- Arity: 3, Strictness: <L,U(A,A,U,A)><L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadExpress1
                  `cast`
                (forall a41.
                 <GHC.Read.Read a41>_R
                 ->_R Trans
                          (<Text.ParserCombinators.ReadPrec.Prec>_R
                           ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                         <[InflectionData.Express a41]>_R))
                          (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                    <[InflectionData.Express a41]>_R))) -}
7e958650c7791002a2540390e3aca90e
  $fReadExpress_$creadPrec ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadPrec.ReadPrec (InflectionData.Express a)
  {- Arity: 2, Strictness: <L,1*U(A,A,1*U,A)><L,U>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadExpress2
                  `cast`
                (forall a41.
                 <GHC.Read.Read a41>_R
                 ->_R Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <InflectionData.Express a41>_R)) -}
7e958650c7791002a2540390e3aca90e
  $fReadExpress_$creadsPrec ::
    GHC.Read.Read a =>
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS (InflectionData.Express a)
  {- Arity: 2, Strictness: <L,1*U(A,A,1*U,A)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a41 $dRead :: GHC.Read.Read a41 eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadP.run
                   @ (InflectionData.Express a41)
                   ((InflectionData.$fReadExpress2 @ a41 $dRead eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <InflectionData.Express a41>_R)
                      @ (InflectionData.Express a41)
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ (InflectionData.Express a41)))) -}
e443e52c146978100c75258afee70577
  $fReadGender :: GHC.Read.Read InflectionData.Gender
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Gender
                  InflectionData.$fReadGender_$s$dmreadsPrec
                  InflectionData.$fReadGender24
                  InflectionData.$fReadGender_$creadPrec
                  InflectionData.$fReadGender_$creadListPrec -}
e443e52c146978100c75258afee70577
  $fReadGender1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Gender] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.Gender]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.Gender
                   InflectionData.$fReadGender2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Gender>_R))
                   @ b
                   eta1) -}
e443e52c146978100c75258afee70577
  $fReadGender10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Gender -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Gender -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.N) -}
403c1ebe59617722b959234ec81d9f2f
  $fReadGender11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "N"#) -}
e443e52c146978100c75258afee70577
  $fReadGender12 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Gender)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadGender14,
                  InflectionData.$fReadGender13
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Gender>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Gender>_R))))) -}
e443e52c146978100c75258afee70577
  $fReadGender13 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Gender -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Gender -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.COM) -}
463e701b1580b031f6f9beee5f697eac
  $fReadGender14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "COM"#) -}
e443e52c146978100c75258afee70577
  $fReadGender15 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Gender)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadGender17,
                  InflectionData.$fReadGender16
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Gender>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Gender>_R))))) -}
e443e52c146978100c75258afee70577
  $fReadGender16 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Gender -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Gender -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.F) -}
77c69a4893716a27ccc6b454b93ea74e
  $fReadGender17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "F"#) -}
e443e52c146978100c75258afee70577
  $fReadGender18 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Gender)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadGender20,
                  InflectionData.$fReadGender19
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Gender>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Gender>_R))))) -}
e443e52c146978100c75258afee70577
  $fReadGender19 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Gender -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Gender -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.M) -}
e443e52c146978100c75258afee70577
  $fReadGender2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Gender
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Gender
                   InflectionData.$fReadGender3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.Gender>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.Gender>_R)))) -}
54213169e566c768a1b96075ff3cf2fb
  $fReadGender20 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "M"#) -}
e443e52c146978100c75258afee70577
  $fReadGender21 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Gender)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadGender23,
                  InflectionData.$fReadGender22
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Gender>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Gender>_R))))) -}
e443e52c146978100c75258afee70577
  $fReadGender22 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Gender -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Gender -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.UGEN) -}
023414cab865705b2dc02e30f18b0799
  $fReadGender23 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "UGEN"#) -}
e443e52c146978100c75258afee70577
  $fReadGender24 ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Gender]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Gender]
                   InflectionData.$fReadGender25) -}
e443e52c146978100c75258afee70577
  $fReadGender25 ::
    Text.ParserCombinators.ReadP.P [InflectionData.Gender]
  {- Unfolding: (GHC.Read.$wa
                   @ InflectionData.Gender
                   InflectionData.$fReadGender2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Gender>_R))
                   @ [InflectionData.Gender]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                      @ [InflectionData.Gender])) -}
e443e52c146978100c75258afee70577
  $fReadGender3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Gender -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: InflectionData.Gender
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ InflectionData.Gender
                   InflectionData.$fReadGender4
                   eta
                   @ b
                   eta1) -}
e443e52c146978100c75258afee70577
  $fReadGender4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Gender)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Gender)
                   InflectionData.$fReadGender21
                   InflectionData.$fReadGender5) -}
e443e52c146978100c75258afee70577
  $fReadGender5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Gender)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Gender)
                   InflectionData.$fReadGender18
                   InflectionData.$fReadGender6) -}
e443e52c146978100c75258afee70577
  $fReadGender6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Gender)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Gender)
                   InflectionData.$fReadGender15
                   InflectionData.$fReadGender7) -}
e443e52c146978100c75258afee70577
  $fReadGender7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Gender)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Gender)
                   InflectionData.$fReadGender12
                   InflectionData.$fReadGender8) -}
e443e52c146978100c75258afee70577
  $fReadGender8 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Gender)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Gender)
                   InflectionData.$fReadGender9
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           InflectionData.Gender))) -}
e443e52c146978100c75258afee70577
  $fReadGender9 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Gender)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadGender11,
                  InflectionData.$fReadGender10
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Gender>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Gender>_R))))) -}
e443e52c146978100c75258afee70577
  $fReadGender_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [InflectionData.Gender]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadGender1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.Gender]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.Gender]>_R))) -}
e443e52c146978100c75258afee70577
  $fReadGender_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Gender
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadGender2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.Gender>_R)) -}
e443e52c146978100c75258afee70577
  $fReadGender_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Gender
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ InflectionData.Gender
                   InflectionData.$fReadGender_$creadPrec
                   eta) -}
9f709bf4194f93c1f39907f3dcd0aede
  $fReadHonorific :: GHC.Read.Read InflectionData.Honorific
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Honorific
                  InflectionData.$fReadHonorific_$s$dmreadsPrec
                  InflectionData.$fReadHonorific20
                  InflectionData.$fReadHonorific_$creadPrec
                  InflectionData.$fReadHonorific_$creadListPrec -}
9f709bf4194f93c1f39907f3dcd0aede
  $fReadHonorific1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Honorific] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.Honorific]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.Honorific
                   InflectionData.$fReadHonorific2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Honorific>_R))
                   @ b
                   eta1) -}
8a6b19c47e2124d8972c08cd1372d788
  $fReadHonorific10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FORM"#) -}
9f709bf4194f93c1f39907f3dcd0aede
  $fReadHonorific11 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Honorific)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadHonorific13,
                  InflectionData.$fReadHonorific12
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Honorific>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Honorific>_R))))) -}
9f709bf4194f93c1f39907f3dcd0aede
  $fReadHonorific12 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Honorific -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Honorific
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.NEU) -}
a50a2aca2ed9c035f185314dafe17c50
  $fReadHonorific13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NEU"#) -}
9f709bf4194f93c1f39907f3dcd0aede
  $fReadHonorific14 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Honorific)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadHonorific16,
                  InflectionData.$fReadHonorific15
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Honorific>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Honorific>_R))))) -}
9f709bf4194f93c1f39907f3dcd0aede
  $fReadHonorific15 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Honorific -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Honorific
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.FAM) -}
e8403baf1ae36ce5b14f58eb522f068f
  $fReadHonorific16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FAM"#) -}
9f709bf4194f93c1f39907f3dcd0aede
  $fReadHonorific17 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Honorific)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadHonorific19,
                  InflectionData.$fReadHonorific18
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Honorific>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Honorific>_R))))) -}
9f709bf4194f93c1f39907f3dcd0aede
  $fReadHonorific18 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Honorific -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Honorific
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.UHON) -}
4c1e23be8e5480b163fb8652882ddf45
  $fReadHonorific19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "UHON"#) -}
9f709bf4194f93c1f39907f3dcd0aede
  $fReadHonorific2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Honorific
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Honorific
                   InflectionData.$fReadHonorific3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.Honorific>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.Honorific>_R)))) -}
9f709bf4194f93c1f39907f3dcd0aede
  $fReadHonorific20 ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Honorific]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Honorific]
                   InflectionData.$fReadHonorific21) -}
9f709bf4194f93c1f39907f3dcd0aede
  $fReadHonorific21 ::
    Text.ParserCombinators.ReadP.P [InflectionData.Honorific]
  {- Unfolding: (GHC.Read.$wa
                   @ InflectionData.Honorific
                   InflectionData.$fReadHonorific2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Honorific>_R))
                   @ [InflectionData.Honorific]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                      @ [InflectionData.Honorific])) -}
9f709bf4194f93c1f39907f3dcd0aede
  $fReadHonorific3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Honorific -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: InflectionData.Honorific
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ InflectionData.Honorific
                   InflectionData.$fReadHonorific4
                   eta
                   @ b
                   eta1) -}
9f709bf4194f93c1f39907f3dcd0aede
  $fReadHonorific4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Honorific)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Honorific)
                   InflectionData.$fReadHonorific17
                   InflectionData.$fReadHonorific5) -}
9f709bf4194f93c1f39907f3dcd0aede
  $fReadHonorific5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Honorific)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Honorific)
                   InflectionData.$fReadHonorific14
                   InflectionData.$fReadHonorific6) -}
9f709bf4194f93c1f39907f3dcd0aede
  $fReadHonorific6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Honorific)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Honorific)
                   InflectionData.$fReadHonorific11
                   InflectionData.$fReadHonorific7) -}
9f709bf4194f93c1f39907f3dcd0aede
  $fReadHonorific7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Honorific)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Honorific)
                   InflectionData.$fReadHonorific8
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           InflectionData.Honorific))) -}
9f709bf4194f93c1f39907f3dcd0aede
  $fReadHonorific8 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Honorific)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadHonorific10,
                  InflectionData.$fReadHonorific9
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Honorific>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Honorific>_R))))) -}
9f709bf4194f93c1f39907f3dcd0aede
  $fReadHonorific9 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Honorific -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Honorific
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.FORM) -}
9f709bf4194f93c1f39907f3dcd0aede
  $fReadHonorific_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [InflectionData.Honorific]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadHonorific1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.Honorific]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.Honorific]>_R))) -}
9f709bf4194f93c1f39907f3dcd0aede
  $fReadHonorific_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Honorific
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadHonorific2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.Honorific>_R)) -}
9f709bf4194f93c1f39907f3dcd0aede
  $fReadHonorific_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Honorific
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ InflectionData.Honorific
                   InflectionData.$fReadHonorific_$creadPrec
                   eta) -}
d140bda0afaf2a222d43f8ac1fd40fcf
  $fReadInflectionSystem ::
    GHC.Read.Read InflectionData.InflectionSystem
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.InflectionSystem
                  InflectionData.$fReadInflectionSystem_$creadsPrec
                  InflectionData.$fReadInflectionSystem_$sreadListDefault
                  InflectionData.$fReadInflectionSystem_$creadPrec
                  InflectionData.$fReadInflectionSystem_$creadListPrec -}
d140bda0afaf2a222d43f8ac1fd40fcf
  $fReadInflectionSystem1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.InflectionSystem]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.InflectionSystem]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.InflectionSystem
                   InflectionData.$fReadInflectionSystem2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.InflectionSystem>_R))
                   @ b
                   eta1) -}
d140bda0afaf2a222d43f8ac1fd40fcf
  $fReadInflectionSystem2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP
         InflectionData.InflectionSystem
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.InflectionSystem
                   InflectionData.$fReadInflectionSystem3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.InflectionSystem>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.InflectionSystem>_R)))) -}
d140bda0afaf2a222d43f8ac1fd40fcf
  $fReadInflectionSystem3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.InflectionSystem
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: InflectionData.InflectionSystem
                         -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 ->
                 InflectionData.$wa ww1 @ b w1 }) -}
d140bda0afaf2a222d43f8ac1fd40fcf
  $fReadInflectionSystem_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [InflectionData.InflectionSystem]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadInflectionSystem1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.InflectionSystem]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.InflectionSystem]>_R))) -}
d140bda0afaf2a222d43f8ac1fd40fcf
  $fReadInflectionSystem_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      InflectionData.InflectionSystem
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadInflectionSystem2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.InflectionSystem>_R)) -}
d140bda0afaf2a222d43f8ac1fd40fcf
  $fReadInflectionSystem_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS
         InflectionData.InflectionSystem
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadP.run
                   @ InflectionData.InflectionSystem
                   ((GHC.Read.$fReadDouble10
                       @ InflectionData.InflectionSystem
                       InflectionData.$fReadInflectionSystem3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                           <InflectionData.InflectionSystem>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                      <InflectionData.InflectionSystem>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <InflectionData.InflectionSystem>_R)
                      @ InflectionData.InflectionSystem
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ InflectionData.InflectionSystem))) -}
d140bda0afaf2a222d43f8ac1fd40fcf
  $fReadInflectionSystem_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS
      [InflectionData.InflectionSystem]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.InflectionSystem]
                   ((InflectionData.$fReadInflectionSystem_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[InflectionData.InflectionSystem]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[InflectionData.InflectionSystem]>_R)
                      @ [InflectionData.InflectionSystem]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [InflectionData.InflectionSystem]))) -}
406c10c56e8fc899b6f590771b3372e0
  $fReadLexCat :: GHC.Read.Read InflectionData.LexCat
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.LexCat
                  InflectionData.$fReadLexCat_$s$dmreadsPrec
                  InflectionData.$fReadLexCat_$sreadListDefault
                  InflectionData.$fReadLexCat_$creadPrec
                  InflectionData.$fReadLexCat_$creadListPrec -}
406c10c56e8fc899b6f590771b3372e0
  $fReadLexCat1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.LexCat] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.LexCat]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.LexCat
                   InflectionData.$fReadLexCat2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.LexCat>_R))
                   @ b
                   eta1) -}
406c10c56e8fc899b6f590771b3372e0
  $fReadLexCat10 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
                   InflectionData.$fReadLexCat27
                   InflectionData.$fReadLexCat11) -}
406c10c56e8fc899b6f590771b3372e0
  $fReadLexCat11 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
                   InflectionData.$fReadLexCat24
                   InflectionData.$fReadLexCat12) -}
406c10c56e8fc899b6f590771b3372e0
  $fReadLexCat12 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
                   InflectionData.$fReadLexCat21
                   InflectionData.$fReadLexCat13) -}
406c10c56e8fc899b6f590771b3372e0
  $fReadLexCat13 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
                   InflectionData.$fReadLexCat18
                   InflectionData.$fReadLexCat14) -}
406c10c56e8fc899b6f590771b3372e0
  $fReadLexCat14 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
                   InflectionData.$fReadLexCat15
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           InflectionData.LexCat))) -}
406c10c56e8fc899b6f590771b3372e0
  $fReadLexCat15 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadLexCat17,
                  InflectionData.$fReadLexCat16
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.LexCat>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.LexCat>_R))))) -}
406c10c56e8fc899b6f590771b3372e0
  $fReadLexCat16 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.Pron) -}
58960672586e45b4c836665dac8423ed
  $fReadLexCat17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Pron"#) -}
406c10c56e8fc899b6f590771b3372e0
  $fReadLexCat18 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadLexCat20,
                  InflectionData.$fReadLexCat19
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.LexCat>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.LexCat>_R))))) -}
406c10c56e8fc899b6f590771b3372e0
  $fReadLexCat19 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.Subj) -}
406c10c56e8fc899b6f590771b3372e0
  $fReadLexCat2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.LexCat
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.LexCat
                   InflectionData.$fReadLexCat3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.LexCat>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.LexCat>_R)))) -}
d96e6586e3e282c52d25e71607bcb978
  $fReadLexCat20 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Subj"#) -}
406c10c56e8fc899b6f590771b3372e0
  $fReadLexCat21 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadLexCat23,
                  InflectionData.$fReadLexCat22
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.LexCat>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.LexCat>_R))))) -}
406c10c56e8fc899b6f590771b3372e0
  $fReadLexCat22 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.Obj) -}
abdeccb293d8774ac787e5aa1bf57e14
  $fReadLexCat23 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Obj"#) -}
406c10c56e8fc899b6f590771b3372e0
  $fReadLexCat24 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadLexCat26,
                  InflectionData.$fReadLexCat25
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.LexCat>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.LexCat>_R))))) -}
406c10c56e8fc899b6f590771b3372e0
  $fReadLexCat25 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.Adv) -}
84432ffb34fc3306bd45c1b5aea80d0b
  $fReadLexCat26 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Adv"#) -}
406c10c56e8fc899b6f590771b3372e0
  $fReadLexCat27 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadLexCat29,
                  InflectionData.$fReadLexCat28
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.LexCat>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.LexCat>_R))))) -}
406c10c56e8fc899b6f590771b3372e0
  $fReadLexCat28 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.Adj) -}
ad525f567bce2cec0423340c32da25d0
  $fReadLexCat29 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Adj"#) -}
406c10c56e8fc899b6f590771b3372e0
  $fReadLexCat3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: InflectionData.LexCat
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ InflectionData.LexCat
                   InflectionData.$fReadLexCat4
                   eta
                   @ b
                   eta1) -}
406c10c56e8fc899b6f590771b3372e0
  $fReadLexCat30 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadLexCat32,
                  InflectionData.$fReadLexCat31
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.LexCat>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.LexCat>_R))))) -}
406c10c56e8fc899b6f590771b3372e0
  $fReadLexCat31 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.Adpo) -}
2a31b2cb2398f48835df619f23c0d0af
  $fReadLexCat32 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Adpo"#) -}
406c10c56e8fc899b6f590771b3372e0
  $fReadLexCat33 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadLexCat35,
                  InflectionData.$fReadLexCat34
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.LexCat>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.LexCat>_R))))) -}
406c10c56e8fc899b6f590771b3372e0
  $fReadLexCat34 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.Noun) -}
86f73b84b49ebfd4adbf6b38691838c1
  $fReadLexCat35 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Noun"#) -}
406c10c56e8fc899b6f590771b3372e0
  $fReadLexCat36 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadLexCat38,
                  InflectionData.$fReadLexCat37
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.LexCat>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.LexCat>_R))))) -}
406c10c56e8fc899b6f590771b3372e0
  $fReadLexCat37 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.Det) -}
04bb2c9148b03ba835e071d50b9a3639
  $fReadLexCat38 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Det"#) -}
406c10c56e8fc899b6f590771b3372e0
  $fReadLexCat39 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadLexCat41,
                  InflectionData.$fReadLexCat40
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.LexCat>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.LexCat>_R))))) -}
406c10c56e8fc899b6f590771b3372e0
  $fReadLexCat4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
                   InflectionData.$fReadLexCat45
                   InflectionData.$fReadLexCat5) -}
406c10c56e8fc899b6f590771b3372e0
  $fReadLexCat40 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.Verb) -}
9c9afff00b64181eb69f901e20bcb4f2
  $fReadLexCat41 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Verb"#) -}
406c10c56e8fc899b6f590771b3372e0
  $fReadLexCat42 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadLexCat44,
                  InflectionData.$fReadLexCat43
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.LexCat>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.LexCat>_R))))) -}
406c10c56e8fc899b6f590771b3372e0
  $fReadLexCat43 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.Infl) -}
b862db3d7a40b104848f0595f8979dd1
  $fReadLexCat44 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Infl"#) -}
406c10c56e8fc899b6f590771b3372e0
  $fReadLexCat45 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadLexCat47,
                  InflectionData.$fReadLexCat46
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.LexCat>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.LexCat>_R))))) -}
406c10c56e8fc899b6f590771b3372e0
  $fReadLexCat46 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.Comp) -}
f679db164fd39cc92579b8af2440cfcb
  $fReadLexCat47 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Comp"#) -}
406c10c56e8fc899b6f590771b3372e0
  $fReadLexCat5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
                   InflectionData.$fReadLexCat42
                   InflectionData.$fReadLexCat6) -}
406c10c56e8fc899b6f590771b3372e0
  $fReadLexCat6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
                   InflectionData.$fReadLexCat39
                   InflectionData.$fReadLexCat7) -}
406c10c56e8fc899b6f590771b3372e0
  $fReadLexCat7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
                   InflectionData.$fReadLexCat36
                   InflectionData.$fReadLexCat8) -}
406c10c56e8fc899b6f590771b3372e0
  $fReadLexCat8 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
                   InflectionData.$fReadLexCat33
                   InflectionData.$fReadLexCat9) -}
406c10c56e8fc899b6f590771b3372e0
  $fReadLexCat9 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
                   InflectionData.$fReadLexCat30
                   InflectionData.$fReadLexCat10) -}
406c10c56e8fc899b6f590771b3372e0
  $fReadLexCat_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [InflectionData.LexCat]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadLexCat1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.LexCat]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.LexCat]>_R))) -}
406c10c56e8fc899b6f590771b3372e0
  $fReadLexCat_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadLexCat2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.LexCat>_R)) -}
406c10c56e8fc899b6f590771b3372e0
  $fReadLexCat_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.LexCat
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ InflectionData.LexCat
                   InflectionData.$fReadLexCat_$creadPrec
                   eta) -}
406c10c56e8fc899b6f590771b3372e0
  $fReadLexCat_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.LexCat]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.LexCat]
                   ((InflectionData.$fReadLexCat_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[InflectionData.LexCat]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[InflectionData.LexCat]>_R)
                      @ [InflectionData.LexCat]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [InflectionData.LexCat]))) -}
402c727bb1d5614cf0c6243ee3fa7337
  $fReadManifest ::
    GHC.Read.Read a => GHC.Read.Read (InflectionData.Manifest a)
  DFunId[0]
  {- Arity: 1, Strictness: <L,U(A,A,U,A)>m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a41 $dRead :: GHC.Read.Read a41.
                  @ (InflectionData.Manifest a41)
                  (InflectionData.$fReadManifest_$creadsPrec @ a41 $dRead)
                  (InflectionData.$fReadManifest_$creadList @ a41 $dRead)
                  (InflectionData.$fReadManifest_$creadPrec @ a41 $dRead)
                  (InflectionData.$fReadManifest_$creadListPrec @ a41 $dRead) -}
402c727bb1d5614cf0c6243ee3fa7337
  $fReadManifest1 ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Manifest a] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 3, Strictness: <L,U(A,A,U,A)><L,A><L,C(U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a41
                   $dRead :: GHC.Read.Read a41
                   eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.Manifest a41]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ (InflectionData.Manifest a41)
                   (InflectionData.$fReadManifest2 @ a41 $dRead)
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Manifest a41>_R))
                   @ b
                   eta1) -}
d71b2af00c33ca75d9a199155d75c621
  $fReadManifest10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Manifest [InflectionData.Animacy]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)>,
     Unfolding: (\ n :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Manifest [InflectionData.Animacy]
                          -> Text.ParserCombinators.ReadP.P b ->
                 let {
                   lvl122 :: Text.ParserCombinators.ReadP.P b
                   = let {
                       lvl123 :: Text.ParserCombinators.ReadP.P b
                       = eta (InflectionData.NoManifest @ [InflectionData.Animacy])
                     } in
                     Text.Read.Lex.expect2
                       @ b
                       (\ a98 :: Text.Read.Lex.Lexeme ->
                        case a98 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                          Text.Read.Lex.Ident a41
                          -> case GHC.Base.eqString
                                    a41
                                    InflectionData.$fReadManifest6 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                               GHC.Types.True -> lvl123 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl122) -}
                   = \ w2 :: () -> lvl122
                 } in
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b
                   (Text.ParserCombinators.ReadP.Look
                      @ b
                      (\ a98 :: GHC.Base.String ->
                       (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                         `cast`
                       (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                         @ b
                         k))
                   (case n of wild { GHC.Types.I# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x 10) of wild2 {
                      GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                      GHC.Types.True
                      -> let {
                           lvl123 :: Text.ParserCombinators.ReadP.P b
                           = let {
                               lvl124 :: Text.ParserCombinators.ReadP.P b
                               = GHC.Read.$wa
                                   @ (InflectionData.LexCat,
                                      InflectionData.ManifestType,
                                      GHC.Types.Int)
                                   InflectionData.$fReadManifest5
                                     `cast`
                                   (Trans
                                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                       <(InflectionData.LexCat,
                                                         InflectionData.ManifestType,
                                                         GHC.Types.Int)>_R))
                                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                  <(InflectionData.LexCat,
                                                    InflectionData.ManifestType,
                                                    GHC.Types.Int)>_R)))
                                   @ b
                                   (\ a41 :: [(InflectionData.LexCat,
                                               InflectionData.ManifestType,
                                               GHC.Types.Int)] ->
                                    GHC.Read.$wa
                                      @ InflectionData.Animacy
                                      InflectionData.$fReadAnimacy2
                                        `cast`
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <InflectionData.Animacy>_R))
                                      @ b
                                      (\ a42 :: [InflectionData.Animacy] ->
                                       eta
                                         (InflectionData.Manifest
                                            @ [InflectionData.Animacy]
                                            a41
                                            a42)))
                             } in
                             Text.Read.Lex.expect2
                               @ b
                               (\ a98 :: Text.Read.Lex.Lexeme ->
                                case a98 of wild1 {
                                  DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                  Text.Read.Lex.Ident a41
                                  -> case GHC.Base.eqString
                                            a41
                                            InflectionData.$fReadManifest3 of wild3 {
                                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                       GHC.Types.True -> lvl124 } })
                         } in
                         let {
                           k1 :: () -> Text.ParserCombinators.ReadP.P b
                             {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl123) -}
                           = \ w2 :: () -> lvl123
                         } in
                         Text.ParserCombinators.ReadP.Look
                           @ b
                           (\ a98 :: GHC.Base.String ->
                            (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                              `cast`
                            (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                              @ b
                              k1) } })) -}
cbc274f5b3d6239101cd9764b7773be5
  $fReadManifest100 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Person -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Person -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.FSTEXCL) -}
3256cef7d6acfc31dfeb5b2ab287fee8
  $fReadManifest101 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FSTEXCL"#) -}
cbc274f5b3d6239101cd9764b7773be5
  $fReadManifest102 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest104,
                  InflectionData.$fReadManifest103
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Person>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Person>_R))))) -}
cbc274f5b3d6239101cd9764b7773be5
  $fReadManifest103 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Person -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Person -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.FSTINCL) -}
4c67e7e70819f2eb4b71da41f0c837f0
  $fReadManifest104 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FSTINCL"#) -}
cbc274f5b3d6239101cd9764b7773be5
  $fReadManifest105 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest107,
                  InflectionData.$fReadManifest106
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Person>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Person>_R))))) -}
cbc274f5b3d6239101cd9764b7773be5
  $fReadManifest106 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Person -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Person -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.FIRST) -}
504acf4888331b0866d5233eeb26f142
  $fReadManifest107 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FIRST"#) -}
cbc274f5b3d6239101cd9764b7773be5
  $fReadManifest108 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest110,
                  InflectionData.$fReadManifest109
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Person>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Person>_R))))) -}
cbc274f5b3d6239101cd9764b7773be5
  $fReadManifest109 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Person -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Person -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.UPER) -}
3dec4b2cdb8fe42af8527aef81fdc95e
  $fReadManifest110 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "UPER"#) -}
13f3fa6d2574677c812c9b12a9e1a769
  $fReadManifest112 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Manifest [InflectionData.Honorific]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)>,
     Unfolding: (\ n :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Manifest [InflectionData.Honorific]
                          -> Text.ParserCombinators.ReadP.P b ->
                 let {
                   lvl122 :: Text.ParserCombinators.ReadP.P b
                   = let {
                       lvl123 :: Text.ParserCombinators.ReadP.P b
                       = eta (InflectionData.NoManifest @ [InflectionData.Honorific])
                     } in
                     Text.Read.Lex.expect2
                       @ b
                       (\ a98 :: Text.Read.Lex.Lexeme ->
                        case a98 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                          Text.Read.Lex.Ident a41
                          -> case GHC.Base.eqString
                                    a41
                                    InflectionData.$fReadManifest6 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                               GHC.Types.True -> lvl123 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl122) -}
                   = \ w2 :: () -> lvl122
                 } in
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b
                   (Text.ParserCombinators.ReadP.Look
                      @ b
                      (\ a98 :: GHC.Base.String ->
                       (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                         `cast`
                       (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                         @ b
                         k))
                   (case n of wild { GHC.Types.I# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x 10) of wild2 {
                      GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                      GHC.Types.True
                      -> let {
                           lvl123 :: Text.ParserCombinators.ReadP.P b
                           = let {
                               lvl124 :: Text.ParserCombinators.ReadP.P b
                               = GHC.Read.$wa
                                   @ (InflectionData.LexCat,
                                      InflectionData.ManifestType,
                                      GHC.Types.Int)
                                   InflectionData.$fReadManifest5
                                     `cast`
                                   (Trans
                                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                       <(InflectionData.LexCat,
                                                         InflectionData.ManifestType,
                                                         GHC.Types.Int)>_R))
                                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                  <(InflectionData.LexCat,
                                                    InflectionData.ManifestType,
                                                    GHC.Types.Int)>_R)))
                                   @ b
                                   (\ a41 :: [(InflectionData.LexCat,
                                               InflectionData.ManifestType,
                                               GHC.Types.Int)] ->
                                    GHC.Read.$wa
                                      @ InflectionData.Honorific
                                      InflectionData.$fReadHonorific2
                                        `cast`
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <InflectionData.Honorific>_R))
                                      @ b
                                      (\ a42 :: [InflectionData.Honorific] ->
                                       eta
                                         (InflectionData.Manifest
                                            @ [InflectionData.Honorific]
                                            a41
                                            a42)))
                             } in
                             Text.Read.Lex.expect2
                               @ b
                               (\ a98 :: Text.Read.Lex.Lexeme ->
                                case a98 of wild1 {
                                  DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                  Text.Read.Lex.Ident a41
                                  -> case GHC.Base.eqString
                                            a41
                                            InflectionData.$fReadManifest3 of wild3 {
                                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                       GHC.Types.True -> lvl124 } })
                         } in
                         let {
                           k1 :: () -> Text.ParserCombinators.ReadP.P b
                             {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl123) -}
                           = \ w2 :: () -> lvl123
                         } in
                         Text.ParserCombinators.ReadP.Look
                           @ b
                           (\ a98 :: GHC.Base.String ->
                            (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                              `cast`
                            (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                              @ b
                              k1) } })) -}
2424ac8ac752f647f29a0172f70ee21a
  $fReadManifest114 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Manifest [InflectionData.Polarity]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)>,
     Unfolding: (\ n :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Manifest [InflectionData.Polarity]
                          -> Text.ParserCombinators.ReadP.P b ->
                 let {
                   lvl122 :: Text.ParserCombinators.ReadP.P b
                   = let {
                       lvl123 :: Text.ParserCombinators.ReadP.P b
                       = eta (InflectionData.NoManifest @ [InflectionData.Polarity])
                     } in
                     Text.Read.Lex.expect2
                       @ b
                       (\ a98 :: Text.Read.Lex.Lexeme ->
                        case a98 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                          Text.Read.Lex.Ident a41
                          -> case GHC.Base.eqString
                                    a41
                                    InflectionData.$fReadManifest6 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                               GHC.Types.True -> lvl123 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl122) -}
                   = \ w2 :: () -> lvl122
                 } in
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b
                   (Text.ParserCombinators.ReadP.Look
                      @ b
                      (\ a98 :: GHC.Base.String ->
                       (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                         `cast`
                       (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                         @ b
                         k))
                   (case n of wild { GHC.Types.I# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x 10) of wild2 {
                      GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                      GHC.Types.True
                      -> let {
                           lvl123 :: Text.ParserCombinators.ReadP.P b
                           = let {
                               lvl124 :: Text.ParserCombinators.ReadP.P b
                               = GHC.Read.$wa
                                   @ (InflectionData.LexCat,
                                      InflectionData.ManifestType,
                                      GHC.Types.Int)
                                   InflectionData.$fReadManifest5
                                     `cast`
                                   (Trans
                                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                       <(InflectionData.LexCat,
                                                         InflectionData.ManifestType,
                                                         GHC.Types.Int)>_R))
                                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                  <(InflectionData.LexCat,
                                                    InflectionData.ManifestType,
                                                    GHC.Types.Int)>_R)))
                                   @ b
                                   (\ a41 :: [(InflectionData.LexCat,
                                               InflectionData.ManifestType,
                                               GHC.Types.Int)] ->
                                    GHC.Read.$wa
                                      @ InflectionData.Polarity
                                      InflectionData.$fReadManifest115
                                        `cast`
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <InflectionData.Polarity>_R))
                                      @ b
                                      (\ a42 :: [InflectionData.Polarity] ->
                                       eta
                                         (InflectionData.Manifest
                                            @ [InflectionData.Polarity]
                                            a41
                                            a42)))
                             } in
                             Text.Read.Lex.expect2
                               @ b
                               (\ a98 :: Text.Read.Lex.Lexeme ->
                                case a98 of wild1 {
                                  DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                  Text.Read.Lex.Ident a41
                                  -> case GHC.Base.eqString
                                            a41
                                            InflectionData.$fReadManifest3 of wild3 {
                                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                       GHC.Types.True -> lvl124 } })
                         } in
                         let {
                           k1 :: () -> Text.ParserCombinators.ReadP.P b
                             {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl123) -}
                           = \ w2 :: () -> lvl123
                         } in
                         Text.ParserCombinators.ReadP.Look
                           @ b
                           (\ a98 :: GHC.Base.String ->
                            (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                              `cast`
                            (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                              @ b
                              k1) } })) -}
961c5eb0bc4c139961b0a440a23b769f
  $fReadManifest115 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Polarity
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Polarity
                   InflectionData.$fReadManifest116
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.Polarity>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.Polarity>_R)))) -}
961c5eb0bc4c139961b0a440a23b769f
  $fReadManifest116 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Polarity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: InflectionData.Polarity
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ InflectionData.Polarity
                   InflectionData.$fReadManifest117
                   eta
                   @ b
                   eta1) -}
961c5eb0bc4c139961b0a440a23b769f
  $fReadManifest117 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Polarity)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Polarity)
                   InflectionData.$fReadManifest126
                   InflectionData.$fReadManifest118) -}
961c5eb0bc4c139961b0a440a23b769f
  $fReadManifest118 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Polarity)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Polarity)
                   InflectionData.$fReadManifest123
                   InflectionData.$fReadManifest119) -}
961c5eb0bc4c139961b0a440a23b769f
  $fReadManifest119 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Polarity)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Polarity)
                   InflectionData.$fReadManifest120
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           InflectionData.Polarity))) -}
e4bb32026ee31c6512a6e875477d55b5
  $fReadManifest12 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Manifest [InflectionData.Case]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)>,
     Unfolding: (\ n :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Manifest [InflectionData.Case]
                          -> Text.ParserCombinators.ReadP.P b ->
                 let {
                   lvl122 :: Text.ParserCombinators.ReadP.P b
                   = let {
                       lvl123 :: Text.ParserCombinators.ReadP.P b
                       = eta (InflectionData.NoManifest @ [InflectionData.Case])
                     } in
                     Text.Read.Lex.expect2
                       @ b
                       (\ a98 :: Text.Read.Lex.Lexeme ->
                        case a98 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                          Text.Read.Lex.Ident a41
                          -> case GHC.Base.eqString
                                    a41
                                    InflectionData.$fReadManifest6 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                               GHC.Types.True -> lvl123 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl122) -}
                   = \ w2 :: () -> lvl122
                 } in
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b
                   (Text.ParserCombinators.ReadP.Look
                      @ b
                      (\ a98 :: GHC.Base.String ->
                       (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                         `cast`
                       (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                         @ b
                         k))
                   (case n of wild { GHC.Types.I# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x 10) of wild2 {
                      GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                      GHC.Types.True
                      -> let {
                           lvl123 :: Text.ParserCombinators.ReadP.P b
                           = let {
                               lvl124 :: Text.ParserCombinators.ReadP.P b
                               = GHC.Read.$wa
                                   @ (InflectionData.LexCat,
                                      InflectionData.ManifestType,
                                      GHC.Types.Int)
                                   InflectionData.$fReadManifest5
                                     `cast`
                                   (Trans
                                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                       <(InflectionData.LexCat,
                                                         InflectionData.ManifestType,
                                                         GHC.Types.Int)>_R))
                                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                  <(InflectionData.LexCat,
                                                    InflectionData.ManifestType,
                                                    GHC.Types.Int)>_R)))
                                   @ b
                                   (\ a41 :: [(InflectionData.LexCat,
                                               InflectionData.ManifestType,
                                               GHC.Types.Int)] ->
                                    GHC.Read.$wa
                                      @ InflectionData.Case
                                      InflectionData.$fReadCase2
                                        `cast`
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <InflectionData.Case>_R))
                                      @ b
                                      (\ a42 :: [InflectionData.Case] ->
                                       eta
                                         (InflectionData.Manifest @ [InflectionData.Case] a41 a42)))
                             } in
                             Text.Read.Lex.expect2
                               @ b
                               (\ a98 :: Text.Read.Lex.Lexeme ->
                                case a98 of wild1 {
                                  DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                  Text.Read.Lex.Ident a41
                                  -> case GHC.Base.eqString
                                            a41
                                            InflectionData.$fReadManifest3 of wild3 {
                                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                       GHC.Types.True -> lvl124 } })
                         } in
                         let {
                           k1 :: () -> Text.ParserCombinators.ReadP.P b
                             {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl123) -}
                           = \ w2 :: () -> lvl123
                         } in
                         Text.ParserCombinators.ReadP.Look
                           @ b
                           (\ a98 :: GHC.Base.String ->
                            (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                              `cast`
                            (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                              @ b
                              k1) } })) -}
961c5eb0bc4c139961b0a440a23b769f
  $fReadManifest120 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Polarity)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest122,
                  InflectionData.$fReadManifest121
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Polarity>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Polarity>_R))))) -}
961c5eb0bc4c139961b0a440a23b769f
  $fReadManifest121 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Polarity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Polarity
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.NEG) -}
2d2fb22ad567598947fa6a4aa89c08b5
  $fReadManifest122 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NEG"#) -}
961c5eb0bc4c139961b0a440a23b769f
  $fReadManifest123 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Polarity)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest125,
                  InflectionData.$fReadManifest124
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Polarity>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Polarity>_R))))) -}
961c5eb0bc4c139961b0a440a23b769f
  $fReadManifest124 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Polarity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Polarity
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.AFF) -}
b938745709e445e71cc9efcf7c915102
  $fReadManifest125 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AFF"#) -}
961c5eb0bc4c139961b0a440a23b769f
  $fReadManifest126 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Polarity)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest128,
                  InflectionData.$fReadManifest127
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Polarity>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Polarity>_R))))) -}
961c5eb0bc4c139961b0a440a23b769f
  $fReadManifest127 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Polarity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Polarity
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.UPOL) -}
6778ff5981b8dd3703dc1bba1c808743
  $fReadManifest128 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "UPOL"#) -}
42003cc42d912192247f614ca1c7b0e6
  $fReadManifest130 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Manifest [InflectionData.Tense]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)>,
     Unfolding: (\ n :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Manifest [InflectionData.Tense]
                          -> Text.ParserCombinators.ReadP.P b ->
                 let {
                   lvl122 :: Text.ParserCombinators.ReadP.P b
                   = let {
                       lvl123 :: Text.ParserCombinators.ReadP.P b
                       = eta (InflectionData.NoManifest @ [InflectionData.Tense])
                     } in
                     Text.Read.Lex.expect2
                       @ b
                       (\ a98 :: Text.Read.Lex.Lexeme ->
                        case a98 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                          Text.Read.Lex.Ident a41
                          -> case GHC.Base.eqString
                                    a41
                                    InflectionData.$fReadManifest6 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                               GHC.Types.True -> lvl123 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl122) -}
                   = \ w2 :: () -> lvl122
                 } in
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b
                   (Text.ParserCombinators.ReadP.Look
                      @ b
                      (\ a98 :: GHC.Base.String ->
                       (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                         `cast`
                       (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                         @ b
                         k))
                   (case n of wild { GHC.Types.I# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x 10) of wild2 {
                      GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                      GHC.Types.True
                      -> let {
                           lvl123 :: Text.ParserCombinators.ReadP.P b
                           = let {
                               lvl124 :: Text.ParserCombinators.ReadP.P b
                               = GHC.Read.$wa
                                   @ (InflectionData.LexCat,
                                      InflectionData.ManifestType,
                                      GHC.Types.Int)
                                   InflectionData.$fReadManifest5
                                     `cast`
                                   (Trans
                                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                       <(InflectionData.LexCat,
                                                         InflectionData.ManifestType,
                                                         GHC.Types.Int)>_R))
                                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                  <(InflectionData.LexCat,
                                                    InflectionData.ManifestType,
                                                    GHC.Types.Int)>_R)))
                                   @ b
                                   (\ a41 :: [(InflectionData.LexCat,
                                               InflectionData.ManifestType,
                                               GHC.Types.Int)] ->
                                    GHC.Read.$wa
                                      @ InflectionData.Tense
                                      InflectionData.$fReadManifest131
                                        `cast`
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <InflectionData.Tense>_R))
                                      @ b
                                      (\ a42 :: [InflectionData.Tense] ->
                                       eta
                                         (InflectionData.Manifest
                                            @ [InflectionData.Tense]
                                            a41
                                            a42)))
                             } in
                             Text.Read.Lex.expect2
                               @ b
                               (\ a98 :: Text.Read.Lex.Lexeme ->
                                case a98 of wild1 {
                                  DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                  Text.Read.Lex.Ident a41
                                  -> case GHC.Base.eqString
                                            a41
                                            InflectionData.$fReadManifest3 of wild3 {
                                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                       GHC.Types.True -> lvl124 } })
                         } in
                         let {
                           k1 :: () -> Text.ParserCombinators.ReadP.P b
                             {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl123) -}
                           = \ w2 :: () -> lvl123
                         } in
                         Text.ParserCombinators.ReadP.Look
                           @ b
                           (\ a98 :: GHC.Base.String ->
                            (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                              `cast`
                            (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                              @ b
                              k1) } })) -}
5f476bea2da27cbe0ffe1e5cde3d9551
  $fReadManifest131 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Tense
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Tense
                   InflectionData.$fReadManifest132
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.Tense>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.Tense>_R)))) -}
5f476bea2da27cbe0ffe1e5cde3d9551
  $fReadManifest132 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: InflectionData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ InflectionData.Tense
                   InflectionData.$fReadManifest133
                   eta
                   @ b
                   eta1) -}
5f476bea2da27cbe0ffe1e5cde3d9551
  $fReadManifest133 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadManifest206
                   InflectionData.$fReadManifest134) -}
5f476bea2da27cbe0ffe1e5cde3d9551
  $fReadManifest134 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadManifest203
                   InflectionData.$fReadManifest135) -}
5f476bea2da27cbe0ffe1e5cde3d9551
  $fReadManifest135 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadManifest200
                   InflectionData.$fReadManifest136) -}
5f476bea2da27cbe0ffe1e5cde3d9551
  $fReadManifest136 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadManifest197
                   InflectionData.$fReadManifest137) -}
5f476bea2da27cbe0ffe1e5cde3d9551
  $fReadManifest137 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadManifest194
                   InflectionData.$fReadManifest138) -}
5f476bea2da27cbe0ffe1e5cde3d9551
  $fReadManifest138 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadManifest191
                   InflectionData.$fReadManifest139) -}
5f476bea2da27cbe0ffe1e5cde3d9551
  $fReadManifest139 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadManifest188
                   InflectionData.$fReadManifest140) -}
10b5b66a0969d5502983fdf412da7390
  $fReadManifest14 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Manifest [InflectionData.Number]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)>,
     Unfolding: (\ n :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Manifest [InflectionData.Number]
                          -> Text.ParserCombinators.ReadP.P b ->
                 let {
                   lvl122 :: Text.ParserCombinators.ReadP.P b
                   = let {
                       lvl123 :: Text.ParserCombinators.ReadP.P b
                       = eta (InflectionData.NoManifest @ [InflectionData.Number])
                     } in
                     Text.Read.Lex.expect2
                       @ b
                       (\ a98 :: Text.Read.Lex.Lexeme ->
                        case a98 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                          Text.Read.Lex.Ident a41
                          -> case GHC.Base.eqString
                                    a41
                                    InflectionData.$fReadManifest6 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                               GHC.Types.True -> lvl123 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl122) -}
                   = \ w2 :: () -> lvl122
                 } in
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b
                   (Text.ParserCombinators.ReadP.Look
                      @ b
                      (\ a98 :: GHC.Base.String ->
                       (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                         `cast`
                       (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                         @ b
                         k))
                   (case n of wild { GHC.Types.I# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x 10) of wild2 {
                      GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                      GHC.Types.True
                      -> let {
                           lvl123 :: Text.ParserCombinators.ReadP.P b
                           = let {
                               lvl124 :: Text.ParserCombinators.ReadP.P b
                               = GHC.Read.$wa
                                   @ (InflectionData.LexCat,
                                      InflectionData.ManifestType,
                                      GHC.Types.Int)
                                   InflectionData.$fReadManifest5
                                     `cast`
                                   (Trans
                                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                       <(InflectionData.LexCat,
                                                         InflectionData.ManifestType,
                                                         GHC.Types.Int)>_R))
                                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                  <(InflectionData.LexCat,
                                                    InflectionData.ManifestType,
                                                    GHC.Types.Int)>_R)))
                                   @ b
                                   (\ a41 :: [(InflectionData.LexCat,
                                               InflectionData.ManifestType,
                                               GHC.Types.Int)] ->
                                    GHC.Read.$wa
                                      @ InflectionData.Number
                                      InflectionData.$fReadManifest15
                                        `cast`
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <InflectionData.Number>_R))
                                      @ b
                                      (\ a42 :: [InflectionData.Number] ->
                                       eta
                                         (InflectionData.Manifest
                                            @ [InflectionData.Number]
                                            a41
                                            a42)))
                             } in
                             Text.Read.Lex.expect2
                               @ b
                               (\ a98 :: Text.Read.Lex.Lexeme ->
                                case a98 of wild1 {
                                  DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                  Text.Read.Lex.Ident a41
                                  -> case GHC.Base.eqString
                                            a41
                                            InflectionData.$fReadManifest3 of wild3 {
                                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                       GHC.Types.True -> lvl124 } })
                         } in
                         let {
                           k1 :: () -> Text.ParserCombinators.ReadP.P b
                             {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl123) -}
                           = \ w2 :: () -> lvl123
                         } in
                         Text.ParserCombinators.ReadP.Look
                           @ b
                           (\ a98 :: GHC.Base.String ->
                            (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                              `cast`
                            (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                              @ b
                              k1) } })) -}
5f476bea2da27cbe0ffe1e5cde3d9551
  $fReadManifest140 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadManifest185
                   InflectionData.$fReadManifest141) -}
5f476bea2da27cbe0ffe1e5cde3d9551
  $fReadManifest141 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadManifest182
                   InflectionData.$fReadManifest142) -}
5f476bea2da27cbe0ffe1e5cde3d9551
  $fReadManifest142 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadManifest179
                   InflectionData.$fReadManifest143) -}
5f476bea2da27cbe0ffe1e5cde3d9551
  $fReadManifest143 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadManifest176
                   InflectionData.$fReadManifest144) -}
5f476bea2da27cbe0ffe1e5cde3d9551
  $fReadManifest144 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadManifest173
                   InflectionData.$fReadManifest145) -}
5f476bea2da27cbe0ffe1e5cde3d9551
  $fReadManifest145 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadManifest170
                   InflectionData.$fReadManifest146) -}
5f476bea2da27cbe0ffe1e5cde3d9551
  $fReadManifest146 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadManifest167
                   InflectionData.$fReadManifest147) -}
5f476bea2da27cbe0ffe1e5cde3d9551
  $fReadManifest147 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadManifest164
                   InflectionData.$fReadManifest148) -}
5f476bea2da27cbe0ffe1e5cde3d9551
  $fReadManifest148 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadManifest161
                   InflectionData.$fReadManifest149) -}
5f476bea2da27cbe0ffe1e5cde3d9551
  $fReadManifest149 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadManifest158
                   InflectionData.$fReadManifest150) -}
111b9dd7881655400daece83d7690898
  $fReadManifest15 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Number
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Number
                   InflectionData.$fReadManifest16
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.Number>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.Number>_R)))) -}
5f476bea2da27cbe0ffe1e5cde3d9551
  $fReadManifest150 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadManifest155
                   InflectionData.$fReadManifest151) -}
5f476bea2da27cbe0ffe1e5cde3d9551
  $fReadManifest151 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadManifest152
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense))) -}
5f476bea2da27cbe0ffe1e5cde3d9551
  $fReadManifest152 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest154,
                  InflectionData.$fReadManifest153
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
5f476bea2da27cbe0ffe1e5cde3d9551
  $fReadManifest153 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.FUTPER) -}
4afcfce0df7ea3eea955a5262261139d
  $fReadManifest154 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FUTPER"#) -}
5f476bea2da27cbe0ffe1e5cde3d9551
  $fReadManifest155 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest157,
                  InflectionData.$fReadManifest156
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
5f476bea2da27cbe0ffe1e5cde3d9551
  $fReadManifest156 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.PRSPER) -}
99a13a405215c5b7b0e7a42766e556d5
  $fReadManifest157 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PRSPER"#) -}
5f476bea2da27cbe0ffe1e5cde3d9551
  $fReadManifest158 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest160,
                  InflectionData.$fReadManifest159
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
5f476bea2da27cbe0ffe1e5cde3d9551
  $fReadManifest159 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.PSTPER) -}
111b9dd7881655400daece83d7690898
  $fReadManifest16 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Number -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: InflectionData.Number
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ InflectionData.Number
                   InflectionData.$fReadManifest17
                   eta
                   @ b
                   eta1) -}
823cfbea49103a3844a54fbb9b128926
  $fReadManifest160 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PSTPER"#) -}
5f476bea2da27cbe0ffe1e5cde3d9551
  $fReadManifest161 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest163,
                  InflectionData.$fReadManifest162
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
5f476bea2da27cbe0ffe1e5cde3d9551
  $fReadManifest162 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.PPST3) -}
186ba55cf8a7f7f124dcb47705387398
  $fReadManifest163 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PPST3"#) -}
5f476bea2da27cbe0ffe1e5cde3d9551
  $fReadManifest164 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest166,
                  InflectionData.$fReadManifest165
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
5f476bea2da27cbe0ffe1e5cde3d9551
  $fReadManifest165 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.PPST2) -}
e6ecb077470f8b8084fa3ef4ec38dc5b
  $fReadManifest166 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PPST2"#) -}
5f476bea2da27cbe0ffe1e5cde3d9551
  $fReadManifest167 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest169,
                  InflectionData.$fReadManifest168
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
5f476bea2da27cbe0ffe1e5cde3d9551
  $fReadManifest168 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.PPST1) -}
37311c388f6415dc90c56876281ee036
  $fReadManifest169 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PPST1"#) -}
111b9dd7881655400daece83d7690898
  $fReadManifest17 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)
                   InflectionData.$fReadManifest38
                   InflectionData.$fReadManifest18) -}
5f476bea2da27cbe0ffe1e5cde3d9551
  $fReadManifest170 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest172,
                  InflectionData.$fReadManifest171
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
5f476bea2da27cbe0ffe1e5cde3d9551
  $fReadManifest171 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.PPST) -}
003a533d3dcda39f0ce1d58f245b0d48
  $fReadManifest172 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PPST"#) -}
5f476bea2da27cbe0ffe1e5cde3d9551
  $fReadManifest173 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest175,
                  InflectionData.$fReadManifest174
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
5f476bea2da27cbe0ffe1e5cde3d9551
  $fReadManifest174 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.PFUT) -}
5e942b3e86ed3aa17e0214d8eaa57996
  $fReadManifest175 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PFUT"#) -}
5f476bea2da27cbe0ffe1e5cde3d9551
  $fReadManifest176 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest178,
                  InflectionData.$fReadManifest177
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
5f476bea2da27cbe0ffe1e5cde3d9551
  $fReadManifest177 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.PPRS) -}
b8fbee08d2910ff825ab1b19eaac5f57
  $fReadManifest178 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PPRS"#) -}
5f476bea2da27cbe0ffe1e5cde3d9551
  $fReadManifest179 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest181,
                  InflectionData.$fReadManifest180
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
111b9dd7881655400daece83d7690898
  $fReadManifest18 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)
                   InflectionData.$fReadManifest35
                   InflectionData.$fReadManifest19) -}
5f476bea2da27cbe0ffe1e5cde3d9551
  $fReadManifest180 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.AFUT3) -}
ae5f64905fb79ef515eaf9f9e7516e51
  $fReadManifest181 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AFUT3"#) -}
5f476bea2da27cbe0ffe1e5cde3d9551
  $fReadManifest182 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest184,
                  InflectionData.$fReadManifest183
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
5f476bea2da27cbe0ffe1e5cde3d9551
  $fReadManifest183 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.AFUT2) -}
a06ca2f89046230bc4e772f71f95952a
  $fReadManifest184 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AFUT2"#) -}
5f476bea2da27cbe0ffe1e5cde3d9551
  $fReadManifest185 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest187,
                  InflectionData.$fReadManifest186
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
5f476bea2da27cbe0ffe1e5cde3d9551
  $fReadManifest186 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.AFUT1) -}
611a9d9e49c269aa16f7b593500fa609
  $fReadManifest187 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AFUT1"#) -}
5f476bea2da27cbe0ffe1e5cde3d9551
  $fReadManifest188 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest190,
                  InflectionData.$fReadManifest189
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
5f476bea2da27cbe0ffe1e5cde3d9551
  $fReadManifest189 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.AFUT) -}
111b9dd7881655400daece83d7690898
  $fReadManifest19 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)
                   InflectionData.$fReadManifest32
                   InflectionData.$fReadManifest20) -}
5ed2fbf4973d7ac57cc6329c680029bb
  $fReadManifest190 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AFUT"#) -}
5f476bea2da27cbe0ffe1e5cde3d9551
  $fReadManifest191 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest193,
                  InflectionData.$fReadManifest192
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
5f476bea2da27cbe0ffe1e5cde3d9551
  $fReadManifest192 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.APST) -}
a80e602a2f30c6d88c76fbc9a4da8787
  $fReadManifest193 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "APST"#) -}
5f476bea2da27cbe0ffe1e5cde3d9551
  $fReadManifest194 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest196,
                  InflectionData.$fReadManifest195
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
5f476bea2da27cbe0ffe1e5cde3d9551
  $fReadManifest195 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.APRS) -}
8cdab1b28d8439d8ded90ea38579edd2
  $fReadManifest196 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "APRS"#) -}
5f476bea2da27cbe0ffe1e5cde3d9551
  $fReadManifest197 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest199,
                  InflectionData.$fReadManifest198
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
5f476bea2da27cbe0ffe1e5cde3d9551
  $fReadManifest198 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.FUT) -}
c092ad825c37c2ecdc9a9e27b0acc91a
  $fReadManifest199 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FUT"#) -}
402c727bb1d5614cf0c6243ee3fa7337
  $fReadManifest2 ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP (InflectionData.Manifest a)
  {- Arity: 2, Strictness: <L,1*U(A,A,1*U,A)><L,U>,
     Unfolding: (\ @ a41
                   $dRead :: GHC.Read.Read a41
                   eta :: Text.ParserCombinators.ReadPrec.Prec ->
                 let {
                   ds :: Text.ParserCombinators.ReadPrec.ReadPrec a41
                   = GHC.Read.readPrec @ a41 $dRead
                 } in
                 GHC.Read.$fReadDouble10
                   @ (InflectionData.Manifest a41)
                   (\ n :: Text.ParserCombinators.ReadPrec.Prec
                      @ b
                      eta1 :: InflectionData.Manifest a41
                              -> Text.ParserCombinators.ReadP.P b ->
                    let {
                      lvl122 :: Text.ParserCombinators.ReadP.P b
                      = let {
                          lvl123 :: Text.ParserCombinators.ReadP.P b
                          = eta1 (InflectionData.NoManifest @ a41)
                        } in
                        Text.Read.Lex.expect2
                          @ b
                          (\ a98 :: Text.Read.Lex.Lexeme ->
                           case a98 of wild {
                             DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                             Text.Read.Lex.Ident a42
                             -> case GHC.Base.eqString
                                       a42
                                       InflectionData.$fReadManifest6 of wild1 {
                                  GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                  GHC.Types.True -> lvl123 } })
                    } in
                    let {
                      k :: () -> Text.ParserCombinators.ReadP.P b
                        {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                           Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl122) -}
                      = \ w2 :: () -> lvl122
                    } in
                    Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                      @ b
                      (Text.ParserCombinators.ReadP.Look
                         @ b
                         (\ a98 :: GHC.Base.String ->
                          (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                            `cast`
                          (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                            @ b
                            k))
                      (case n of wild { GHC.Types.I# x ->
                       case GHC.Prim.tagToEnum#
                              @ GHC.Types.Bool
                              (GHC.Prim.<=# x 10) of wild2 {
                         GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                         GHC.Types.True
                         -> let {
                              lvl123 :: Text.ParserCombinators.ReadP.P b
                              = let {
                                  lvl124 :: Text.ParserCombinators.ReadP.P b
                                  = GHC.Read.$wa
                                      @ (InflectionData.LexCat,
                                         InflectionData.ManifestType,
                                         GHC.Types.Int)
                                      InflectionData.$fReadManifest5
                                        `cast`
                                      (Trans
                                           (<Text.ParserCombinators.ReadPrec.Prec>_R
                                            ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                          <(InflectionData.LexCat,
                                                            InflectionData.ManifestType,
                                                            GHC.Types.Int)>_R))
                                           (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                     <(InflectionData.LexCat,
                                                       InflectionData.ManifestType,
                                                       GHC.Types.Int)>_R)))
                                      @ b
                                      (\ a42 :: [(InflectionData.LexCat,
                                                  InflectionData.ManifestType,
                                                  GHC.Types.Int)] ->
                                       (ds
                                          `cast`
                                        (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0] <a41>_R)
                                          InflectionData.$fReadManifest4)
                                         `cast`
                                       (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <a41>_R)
                                         @ b
                                         (\ a43 :: a41 ->
                                          eta1 (InflectionData.Manifest @ a41 a42 a43)))
                                } in
                                Text.Read.Lex.expect2
                                  @ b
                                  (\ a98 :: Text.Read.Lex.Lexeme ->
                                   case a98 of wild1 {
                                     DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                     Text.Read.Lex.Ident a42
                                     -> case GHC.Base.eqString
                                               a42
                                               InflectionData.$fReadManifest3 of wild3 {
                                          GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                          GHC.Types.True -> lvl124 } })
                            } in
                            let {
                              k1 :: () -> Text.ParserCombinators.ReadP.P b
                                {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                   Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl123) -}
                              = \ w2 :: () -> lvl123
                            } in
                            Text.ParserCombinators.ReadP.Look
                              @ b
                              (\ a98 :: GHC.Base.String ->
                               (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                                 `cast`
                               (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                                 @ b
                                 k1) } }))
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.Manifest a41>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.Manifest a41>_R)))
                   eta) -}
111b9dd7881655400daece83d7690898
  $fReadManifest20 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)
                   InflectionData.$fReadManifest29
                   InflectionData.$fReadManifest21) -}
5f476bea2da27cbe0ffe1e5cde3d9551
  $fReadManifest200 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest202,
                  InflectionData.$fReadManifest201
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
5f476bea2da27cbe0ffe1e5cde3d9551
  $fReadManifest201 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.PRS) -}
f983f20eeaab4082991e058590efc0a9
  $fReadManifest202 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PRS"#) -}
5f476bea2da27cbe0ffe1e5cde3d9551
  $fReadManifest203 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest205,
                  InflectionData.$fReadManifest204
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
5f476bea2da27cbe0ffe1e5cde3d9551
  $fReadManifest204 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.PST) -}
4b62f9c3da7da4324d55ac09c5676d4e
  $fReadManifest205 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PST"#) -}
5f476bea2da27cbe0ffe1e5cde3d9551
  $fReadManifest206 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest208,
                  InflectionData.$fReadManifest207
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
5f476bea2da27cbe0ffe1e5cde3d9551
  $fReadManifest207 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.UTEN) -}
803006205af26cc000866c15e012fa21
  $fReadManifest208 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "UTEN"#) -}
111b9dd7881655400daece83d7690898
  $fReadManifest21 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)
                   InflectionData.$fReadManifest26
                   InflectionData.$fReadManifest22) -}
a49641b06ad226cad2d098aaafad4d69
  $fReadManifest210 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Manifest [InflectionData.Aspect]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)>,
     Unfolding: (\ n :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Manifest [InflectionData.Aspect]
                          -> Text.ParserCombinators.ReadP.P b ->
                 let {
                   lvl122 :: Text.ParserCombinators.ReadP.P b
                   = let {
                       lvl123 :: Text.ParserCombinators.ReadP.P b
                       = eta (InflectionData.NoManifest @ [InflectionData.Aspect])
                     } in
                     Text.Read.Lex.expect2
                       @ b
                       (\ a98 :: Text.Read.Lex.Lexeme ->
                        case a98 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                          Text.Read.Lex.Ident a41
                          -> case GHC.Base.eqString
                                    a41
                                    InflectionData.$fReadManifest6 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                               GHC.Types.True -> lvl123 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl122) -}
                   = \ w2 :: () -> lvl122
                 } in
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b
                   (Text.ParserCombinators.ReadP.Look
                      @ b
                      (\ a98 :: GHC.Base.String ->
                       (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                         `cast`
                       (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                         @ b
                         k))
                   (case n of wild { GHC.Types.I# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x 10) of wild2 {
                      GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                      GHC.Types.True
                      -> let {
                           lvl123 :: Text.ParserCombinators.ReadP.P b
                           = let {
                               lvl124 :: Text.ParserCombinators.ReadP.P b
                               = GHC.Read.$wa
                                   @ (InflectionData.LexCat,
                                      InflectionData.ManifestType,
                                      GHC.Types.Int)
                                   InflectionData.$fReadManifest5
                                     `cast`
                                   (Trans
                                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                       <(InflectionData.LexCat,
                                                         InflectionData.ManifestType,
                                                         GHC.Types.Int)>_R))
                                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                  <(InflectionData.LexCat,
                                                    InflectionData.ManifestType,
                                                    GHC.Types.Int)>_R)))
                                   @ b
                                   (\ a41 :: [(InflectionData.LexCat,
                                               InflectionData.ManifestType,
                                               GHC.Types.Int)] ->
                                    GHC.Read.$wa
                                      @ InflectionData.Aspect
                                      InflectionData.$fReadAspect2
                                        `cast`
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <InflectionData.Aspect>_R))
                                      @ b
                                      (\ a42 :: [InflectionData.Aspect] ->
                                       eta
                                         (InflectionData.Manifest
                                            @ [InflectionData.Aspect]
                                            a41
                                            a42)))
                             } in
                             Text.Read.Lex.expect2
                               @ b
                               (\ a98 :: Text.Read.Lex.Lexeme ->
                                case a98 of wild1 {
                                  DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                  Text.Read.Lex.Ident a41
                                  -> case GHC.Base.eqString
                                            a41
                                            InflectionData.$fReadManifest3 of wild3 {
                                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                       GHC.Types.True -> lvl124 } })
                         } in
                         let {
                           k1 :: () -> Text.ParserCombinators.ReadP.P b
                             {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl123) -}
                           = \ w2 :: () -> lvl123
                         } in
                         Text.ParserCombinators.ReadP.Look
                           @ b
                           (\ a98 :: GHC.Base.String ->
                            (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                              `cast`
                            (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                              @ b
                              k1) } })) -}
aac42037a607fbf66c77133f6c7bc6cc
  $fReadManifest212 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Manifest [InflectionData.Mood]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)>,
     Unfolding: (\ n :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Manifest [InflectionData.Mood]
                          -> Text.ParserCombinators.ReadP.P b ->
                 let {
                   lvl122 :: Text.ParserCombinators.ReadP.P b
                   = let {
                       lvl123 :: Text.ParserCombinators.ReadP.P b
                       = eta (InflectionData.NoManifest @ [InflectionData.Mood])
                     } in
                     Text.Read.Lex.expect2
                       @ b
                       (\ a98 :: Text.Read.Lex.Lexeme ->
                        case a98 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                          Text.Read.Lex.Ident a41
                          -> case GHC.Base.eqString
                                    a41
                                    InflectionData.$fReadManifest6 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                               GHC.Types.True -> lvl123 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl122) -}
                   = \ w2 :: () -> lvl122
                 } in
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b
                   (Text.ParserCombinators.ReadP.Look
                      @ b
                      (\ a98 :: GHC.Base.String ->
                       (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                         `cast`
                       (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                         @ b
                         k))
                   (case n of wild { GHC.Types.I# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x 10) of wild2 {
                      GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                      GHC.Types.True
                      -> let {
                           lvl123 :: Text.ParserCombinators.ReadP.P b
                           = let {
                               lvl124 :: Text.ParserCombinators.ReadP.P b
                               = GHC.Read.$wa
                                   @ (InflectionData.LexCat,
                                      InflectionData.ManifestType,
                                      GHC.Types.Int)
                                   InflectionData.$fReadManifest5
                                     `cast`
                                   (Trans
                                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                       <(InflectionData.LexCat,
                                                         InflectionData.ManifestType,
                                                         GHC.Types.Int)>_R))
                                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                  <(InflectionData.LexCat,
                                                    InflectionData.ManifestType,
                                                    GHC.Types.Int)>_R)))
                                   @ b
                                   (\ a41 :: [(InflectionData.LexCat,
                                               InflectionData.ManifestType,
                                               GHC.Types.Int)] ->
                                    GHC.Read.$wa
                                      @ InflectionData.Mood
                                      InflectionData.$fReadManifest213
                                        `cast`
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <InflectionData.Mood>_R))
                                      @ b
                                      (\ a42 :: [InflectionData.Mood] ->
                                       eta
                                         (InflectionData.Manifest @ [InflectionData.Mood] a41 a42)))
                             } in
                             Text.Read.Lex.expect2
                               @ b
                               (\ a98 :: Text.Read.Lex.Lexeme ->
                                case a98 of wild1 {
                                  DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                  Text.Read.Lex.Ident a41
                                  -> case GHC.Base.eqString
                                            a41
                                            InflectionData.$fReadManifest3 of wild3 {
                                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                       GHC.Types.True -> lvl124 } })
                         } in
                         let {
                           k1 :: () -> Text.ParserCombinators.ReadP.P b
                             {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl123) -}
                           = \ w2 :: () -> lvl123
                         } in
                         Text.ParserCombinators.ReadP.Look
                           @ b
                           (\ a98 :: GHC.Base.String ->
                            (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                              `cast`
                            (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                              @ b
                              k1) } })) -}
987f478754e08db3236fd0a739247bf9
  $fReadManifest213 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Mood
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Mood
                   InflectionData.$fReadManifest214
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.Mood>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.Mood>_R)))) -}
987f478754e08db3236fd0a739247bf9
  $fReadManifest214 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: InflectionData.Mood -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ InflectionData.Mood
                   InflectionData.$fReadManifest215
                   eta
                   @ b
                   eta1) -}
987f478754e08db3236fd0a739247bf9
  $fReadManifest215 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
                   InflectionData.$fReadManifest256
                   InflectionData.$fReadManifest216) -}
987f478754e08db3236fd0a739247bf9
  $fReadManifest216 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
                   InflectionData.$fReadManifest253
                   InflectionData.$fReadManifest217) -}
987f478754e08db3236fd0a739247bf9
  $fReadManifest217 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
                   InflectionData.$fReadManifest250
                   InflectionData.$fReadManifest218) -}
987f478754e08db3236fd0a739247bf9
  $fReadManifest218 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
                   InflectionData.$fReadManifest247
                   InflectionData.$fReadManifest219) -}
987f478754e08db3236fd0a739247bf9
  $fReadManifest219 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
                   InflectionData.$fReadManifest244
                   InflectionData.$fReadManifest220) -}
111b9dd7881655400daece83d7690898
  $fReadManifest22 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)
                   InflectionData.$fReadManifest23
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           InflectionData.Number))) -}
987f478754e08db3236fd0a739247bf9
  $fReadManifest220 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
                   InflectionData.$fReadManifest241
                   InflectionData.$fReadManifest221) -}
987f478754e08db3236fd0a739247bf9
  $fReadManifest221 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
                   InflectionData.$fReadManifest238
                   InflectionData.$fReadManifest222) -}
987f478754e08db3236fd0a739247bf9
  $fReadManifest222 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
                   InflectionData.$fReadManifest235
                   InflectionData.$fReadManifest223) -}
987f478754e08db3236fd0a739247bf9
  $fReadManifest223 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
                   InflectionData.$fReadManifest232
                   InflectionData.$fReadManifest224) -}
987f478754e08db3236fd0a739247bf9
  $fReadManifest224 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
                   InflectionData.$fReadManifest229
                   InflectionData.$fReadManifest225) -}
987f478754e08db3236fd0a739247bf9
  $fReadManifest225 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
                   InflectionData.$fReadManifest226
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood))) -}
987f478754e08db3236fd0a739247bf9
  $fReadManifest226 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest228,
                  InflectionData.$fReadManifest227
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Mood>_R))))) -}
987f478754e08db3236fd0a739247bf9
  $fReadManifest227 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Mood -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.COND) -}
327d31313be5764583a6d9b2a44a288f
  $fReadManifest228 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "COND"#) -}
987f478754e08db3236fd0a739247bf9
  $fReadManifest229 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest231,
                  InflectionData.$fReadManifest230
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Mood>_R))))) -}
111b9dd7881655400daece83d7690898
  $fReadManifest23 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest25,
                  InflectionData.$fReadManifest24
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Number>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Number>_R))))) -}
987f478754e08db3236fd0a739247bf9
  $fReadManifest230 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Mood -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.POT) -}
0d43eb062dee76cf1ffd764e2a2c868e
  $fReadManifest231 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "POT"#) -}
987f478754e08db3236fd0a739247bf9
  $fReadManifest232 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest234,
                  InflectionData.$fReadManifest233
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Mood>_R))))) -}
987f478754e08db3236fd0a739247bf9
  $fReadManifest233 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Mood -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.SBJV) -}
e40fd2d485df05e92b8a5aed782fd103
  $fReadManifest234 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SBJV"#) -}
987f478754e08db3236fd0a739247bf9
  $fReadManifest235 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest237,
                  InflectionData.$fReadManifest236
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Mood>_R))))) -}
987f478754e08db3236fd0a739247bf9
  $fReadManifest236 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Mood -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.EPIS) -}
a9af278b00cf523a39591d8e286df87c
  $fReadManifest237 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "EPIS"#) -}
987f478754e08db3236fd0a739247bf9
  $fReadManifest238 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest240,
                  InflectionData.$fReadManifest239
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Mood>_R))))) -}
987f478754e08db3236fd0a739247bf9
  $fReadManifest239 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Mood -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.OPT) -}
111b9dd7881655400daece83d7690898
  $fReadManifest24 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Number -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Number -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.PL) -}
98d92af16fd970db45751ac7bae283ae
  $fReadManifest240 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OPT"#) -}
987f478754e08db3236fd0a739247bf9
  $fReadManifest241 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest243,
                  InflectionData.$fReadManifest242
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Mood>_R))))) -}
987f478754e08db3236fd0a739247bf9
  $fReadManifest242 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Mood -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.JUS) -}
9ac03a3539a8946f6fc4ccea770b1cfd
  $fReadManifest243 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "JUS"#) -}
987f478754e08db3236fd0a739247bf9
  $fReadManifest244 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest246,
                  InflectionData.$fReadManifest245
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Mood>_R))))) -}
987f478754e08db3236fd0a739247bf9
  $fReadManifest245 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Mood -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.IMP) -}
9e2bb5351dbc88bd478ff16e16630a10
  $fReadManifest246 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "IMP"#) -}
987f478754e08db3236fd0a739247bf9
  $fReadManifest247 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest249,
                  InflectionData.$fReadManifest248
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Mood>_R))))) -}
987f478754e08db3236fd0a739247bf9
  $fReadManifest248 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Mood -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.DEO) -}
f2c0ab1cf99e36a00f46001fb10554e4
  $fReadManifest249 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DEO"#) -}
9dd67e6ce858b709b6c806fa819eccae
  $fReadManifest25 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PL"#) -}
987f478754e08db3236fd0a739247bf9
  $fReadManifest250 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest252,
                  InflectionData.$fReadManifest251
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Mood>_R))))) -}
987f478754e08db3236fd0a739247bf9
  $fReadManifest251 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Mood -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.IRR) -}
9837a1b4fe2b0b412480a34ec2f7ceac
  $fReadManifest252 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "IRR"#) -}
987f478754e08db3236fd0a739247bf9
  $fReadManifest253 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest255,
                  InflectionData.$fReadManifest254
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Mood>_R))))) -}
987f478754e08db3236fd0a739247bf9
  $fReadManifest254 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Mood -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.IND) -}
193f58c91e3ad952d41a6dafc8fdb9d2
  $fReadManifest255 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "IND"#) -}
987f478754e08db3236fd0a739247bf9
  $fReadManifest256 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest258,
                  InflectionData.$fReadManifest257
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Mood>_R))))) -}
987f478754e08db3236fd0a739247bf9
  $fReadManifest257 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Mood -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.UMOO) -}
a8710ca910ee72616d89e4c4d072467a
  $fReadManifest258 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "UMOO"#) -}
111b9dd7881655400daece83d7690898
  $fReadManifest26 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest28,
                  InflectionData.$fReadManifest27
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Number>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Number>_R))))) -}
817e2ac71bdfaa7e136b0a64bfb0b357
  $fReadManifest260 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Manifest [InflectionData.Voice]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)>,
     Unfolding: (\ n :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Manifest [InflectionData.Voice]
                          -> Text.ParserCombinators.ReadP.P b ->
                 let {
                   lvl122 :: Text.ParserCombinators.ReadP.P b
                   = let {
                       lvl123 :: Text.ParserCombinators.ReadP.P b
                       = eta (InflectionData.NoManifest @ [InflectionData.Voice])
                     } in
                     Text.Read.Lex.expect2
                       @ b
                       (\ a98 :: Text.Read.Lex.Lexeme ->
                        case a98 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                          Text.Read.Lex.Ident a41
                          -> case GHC.Base.eqString
                                    a41
                                    InflectionData.$fReadManifest6 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                               GHC.Types.True -> lvl123 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl122) -}
                   = \ w2 :: () -> lvl122
                 } in
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b
                   (Text.ParserCombinators.ReadP.Look
                      @ b
                      (\ a98 :: GHC.Base.String ->
                       (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                         `cast`
                       (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                         @ b
                         k))
                   (case n of wild { GHC.Types.I# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x 10) of wild2 {
                      GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                      GHC.Types.True
                      -> let {
                           lvl123 :: Text.ParserCombinators.ReadP.P b
                           = let {
                               lvl124 :: Text.ParserCombinators.ReadP.P b
                               = GHC.Read.$wa
                                   @ (InflectionData.LexCat,
                                      InflectionData.ManifestType,
                                      GHC.Types.Int)
                                   InflectionData.$fReadManifest5
                                     `cast`
                                   (Trans
                                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                       <(InflectionData.LexCat,
                                                         InflectionData.ManifestType,
                                                         GHC.Types.Int)>_R))
                                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                  <(InflectionData.LexCat,
                                                    InflectionData.ManifestType,
                                                    GHC.Types.Int)>_R)))
                                   @ b
                                   (\ a41 :: [(InflectionData.LexCat,
                                               InflectionData.ManifestType,
                                               GHC.Types.Int)] ->
                                    GHC.Read.$wa
                                      @ InflectionData.Voice
                                      InflectionData.$fReadManifest261
                                        `cast`
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <InflectionData.Voice>_R))
                                      @ b
                                      (\ a42 :: [InflectionData.Voice] ->
                                       eta
                                         (InflectionData.Manifest
                                            @ [InflectionData.Voice]
                                            a41
                                            a42)))
                             } in
                             Text.Read.Lex.expect2
                               @ b
                               (\ a98 :: Text.Read.Lex.Lexeme ->
                                case a98 of wild1 {
                                  DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                  Text.Read.Lex.Ident a41
                                  -> case GHC.Base.eqString
                                            a41
                                            InflectionData.$fReadManifest3 of wild3 {
                                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                       GHC.Types.True -> lvl124 } })
                         } in
                         let {
                           k1 :: () -> Text.ParserCombinators.ReadP.P b
                             {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl123) -}
                           = \ w2 :: () -> lvl123
                         } in
                         Text.ParserCombinators.ReadP.Look
                           @ b
                           (\ a98 :: GHC.Base.String ->
                            (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                              `cast`
                            (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                              @ b
                              k1) } })) -}
66f849eb0df273279725c8472ced02cc
  $fReadManifest261 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Voice
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Voice
                   InflectionData.$fReadManifest262
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.Voice>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.Voice>_R)))) -}
66f849eb0df273279725c8472ced02cc
  $fReadManifest262 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Voice -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: InflectionData.Voice -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ InflectionData.Voice
                   InflectionData.$fReadManifest263
                   eta
                   @ b
                   eta1) -}
66f849eb0df273279725c8472ced02cc
  $fReadManifest263 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Voice)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Voice)
                   InflectionData.$fReadManifest276
                   InflectionData.$fReadManifest264) -}
66f849eb0df273279725c8472ced02cc
  $fReadManifest264 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Voice)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Voice)
                   InflectionData.$fReadManifest273
                   InflectionData.$fReadManifest265) -}
66f849eb0df273279725c8472ced02cc
  $fReadManifest265 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Voice)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Voice)
                   InflectionData.$fReadManifest270
                   InflectionData.$fReadManifest266) -}
66f849eb0df273279725c8472ced02cc
  $fReadManifest266 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Voice)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Voice)
                   InflectionData.$fReadManifest267
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Voice))) -}
66f849eb0df273279725c8472ced02cc
  $fReadManifest267 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Voice)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest269,
                  InflectionData.$fReadManifest268
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Voice>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Voice>_R))))) -}
66f849eb0df273279725c8472ced02cc
  $fReadManifest268 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Voice -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Voice -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.PASSIVE) -}
fa00634ddf29c76974d507ba0bde1e24
  $fReadManifest269 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PASSIVE"#) -}
111b9dd7881655400daece83d7690898
  $fReadManifest27 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Number -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Number -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.PA) -}
66f849eb0df273279725c8472ced02cc
  $fReadManifest270 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Voice)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest272,
                  InflectionData.$fReadManifest271
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Voice>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Voice>_R))))) -}
66f849eb0df273279725c8472ced02cc
  $fReadManifest271 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Voice -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Voice -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.MIDDLE) -}
d8687a3732aa052682758e66380e5712
  $fReadManifest272 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "MIDDLE"#) -}
66f849eb0df273279725c8472ced02cc
  $fReadManifest273 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Voice)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest275,
                  InflectionData.$fReadManifest274
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Voice>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Voice>_R))))) -}
66f849eb0df273279725c8472ced02cc
  $fReadManifest274 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Voice -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Voice -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.ACTIVE) -}
acc79b8da7aa0679989fcf74b786ff2e
  $fReadManifest275 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ACTIVE"#) -}
66f849eb0df273279725c8472ced02cc
  $fReadManifest276 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Voice)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest278,
                  InflectionData.$fReadManifest277
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Voice>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Voice>_R))))) -}
66f849eb0df273279725c8472ced02cc
  $fReadManifest277 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Voice -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Voice -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.UVOI) -}
64068c1361122c4a4de851c9e79d8a38
  $fReadManifest278 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "UVOI"#) -}
969c8205121e11a1497727dad87cff0a
  $fReadManifest28 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PA"#) -}
18e85191196a3e223895978bd5265617
  $fReadManifest280 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Manifest [InflectionData.Evidentiality]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)>,
     Unfolding: (\ n :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Manifest [InflectionData.Evidentiality]
                          -> Text.ParserCombinators.ReadP.P b ->
                 let {
                   lvl122 :: Text.ParserCombinators.ReadP.P b
                   = let {
                       lvl123 :: Text.ParserCombinators.ReadP.P b
                       = eta (InflectionData.NoManifest @ [InflectionData.Evidentiality])
                     } in
                     Text.Read.Lex.expect2
                       @ b
                       (\ a98 :: Text.Read.Lex.Lexeme ->
                        case a98 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                          Text.Read.Lex.Ident a41
                          -> case GHC.Base.eqString
                                    a41
                                    InflectionData.$fReadManifest6 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                               GHC.Types.True -> lvl123 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl122) -}
                   = \ w2 :: () -> lvl122
                 } in
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b
                   (Text.ParserCombinators.ReadP.Look
                      @ b
                      (\ a98 :: GHC.Base.String ->
                       (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                         `cast`
                       (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                         @ b
                         k))
                   (case n of wild { GHC.Types.I# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x 10) of wild2 {
                      GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                      GHC.Types.True
                      -> let {
                           lvl123 :: Text.ParserCombinators.ReadP.P b
                           = let {
                               lvl124 :: Text.ParserCombinators.ReadP.P b
                               = GHC.Read.$wa
                                   @ (InflectionData.LexCat,
                                      InflectionData.ManifestType,
                                      GHC.Types.Int)
                                   InflectionData.$fReadManifest5
                                     `cast`
                                   (Trans
                                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                       <(InflectionData.LexCat,
                                                         InflectionData.ManifestType,
                                                         GHC.Types.Int)>_R))
                                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                  <(InflectionData.LexCat,
                                                    InflectionData.ManifestType,
                                                    GHC.Types.Int)>_R)))
                                   @ b
                                   (\ a41 :: [(InflectionData.LexCat,
                                               InflectionData.ManifestType,
                                               GHC.Types.Int)] ->
                                    GHC.Read.$wa
                                      @ InflectionData.Evidentiality
                                      InflectionData.$fReadEvidentiality2
                                        `cast`
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <InflectionData.Evidentiality>_R))
                                      @ b
                                      (\ a42 :: [InflectionData.Evidentiality] ->
                                       eta
                                         (InflectionData.Manifest
                                            @ [InflectionData.Evidentiality]
                                            a41
                                            a42)))
                             } in
                             Text.Read.Lex.expect2
                               @ b
                               (\ a98 :: Text.Read.Lex.Lexeme ->
                                case a98 of wild1 {
                                  DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                  Text.Read.Lex.Ident a41
                                  -> case GHC.Base.eqString
                                            a41
                                            InflectionData.$fReadManifest3 of wild3 {
                                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                       GHC.Types.True -> lvl124 } })
                         } in
                         let {
                           k1 :: () -> Text.ParserCombinators.ReadP.P b
                             {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl123) -}
                           = \ w2 :: () -> lvl123
                         } in
                         Text.ParserCombinators.ReadP.Look
                           @ b
                           (\ a98 :: GHC.Base.String ->
                            (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                              `cast`
                            (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                              @ b
                              k1) } })) -}
2e910eb3975540f874c4f0b411622fb4
  $fReadManifest282 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Manifest [InflectionData.Transitivity]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)>,
     Unfolding: (\ n :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Manifest [InflectionData.Transitivity]
                          -> Text.ParserCombinators.ReadP.P b ->
                 let {
                   lvl122 :: Text.ParserCombinators.ReadP.P b
                   = let {
                       lvl123 :: Text.ParserCombinators.ReadP.P b
                       = eta (InflectionData.NoManifest @ [InflectionData.Transitivity])
                     } in
                     Text.Read.Lex.expect2
                       @ b
                       (\ a98 :: Text.Read.Lex.Lexeme ->
                        case a98 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                          Text.Read.Lex.Ident a41
                          -> case GHC.Base.eqString
                                    a41
                                    InflectionData.$fReadManifest6 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                               GHC.Types.True -> lvl123 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl122) -}
                   = \ w2 :: () -> lvl122
                 } in
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b
                   (Text.ParserCombinators.ReadP.Look
                      @ b
                      (\ a98 :: GHC.Base.String ->
                       (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                         `cast`
                       (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                         @ b
                         k))
                   (case n of wild { GHC.Types.I# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x 10) of wild2 {
                      GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                      GHC.Types.True
                      -> let {
                           lvl123 :: Text.ParserCombinators.ReadP.P b
                           = let {
                               lvl124 :: Text.ParserCombinators.ReadP.P b
                               = GHC.Read.$wa
                                   @ (InflectionData.LexCat,
                                      InflectionData.ManifestType,
                                      GHC.Types.Int)
                                   InflectionData.$fReadManifest5
                                     `cast`
                                   (Trans
                                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                       <(InflectionData.LexCat,
                                                         InflectionData.ManifestType,
                                                         GHC.Types.Int)>_R))
                                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                  <(InflectionData.LexCat,
                                                    InflectionData.ManifestType,
                                                    GHC.Types.Int)>_R)))
                                   @ b
                                   (\ a41 :: [(InflectionData.LexCat,
                                               InflectionData.ManifestType,
                                               GHC.Types.Int)] ->
                                    GHC.Read.$wa
                                      @ InflectionData.Transitivity
                                      InflectionData.$fReadManifest283
                                        `cast`
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <InflectionData.Transitivity>_R))
                                      @ b
                                      (\ a42 :: [InflectionData.Transitivity] ->
                                       eta
                                         (InflectionData.Manifest
                                            @ [InflectionData.Transitivity]
                                            a41
                                            a42)))
                             } in
                             Text.Read.Lex.expect2
                               @ b
                               (\ a98 :: Text.Read.Lex.Lexeme ->
                                case a98 of wild1 {
                                  DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                  Text.Read.Lex.Ident a41
                                  -> case GHC.Base.eqString
                                            a41
                                            InflectionData.$fReadManifest3 of wild3 {
                                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                       GHC.Types.True -> lvl124 } })
                         } in
                         let {
                           k1 :: () -> Text.ParserCombinators.ReadP.P b
                             {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl123) -}
                           = \ w2 :: () -> lvl123
                         } in
                         Text.ParserCombinators.ReadP.Look
                           @ b
                           (\ a98 :: GHC.Base.String ->
                            (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                              `cast`
                            (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                              @ b
                              k1) } })) -}
8463dae3116062b076dc25e0f6b8c749
  $fReadManifest283 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Transitivity
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Transitivity
                   InflectionData.$fReadManifest284
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.Transitivity>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.Transitivity>_R)))) -}
8463dae3116062b076dc25e0f6b8c749
  $fReadManifest284 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Transitivity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: InflectionData.Transitivity
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ InflectionData.Transitivity
                   InflectionData.$fReadManifest285
                   eta
                   @ b
                   eta1) -}
8463dae3116062b076dc25e0f6b8c749
  $fReadManifest285 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Transitivity)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Transitivity)
                   InflectionData.$fReadManifest302
                   InflectionData.$fReadManifest286) -}
8463dae3116062b076dc25e0f6b8c749
  $fReadManifest286 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Transitivity)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Transitivity)
                   InflectionData.$fReadManifest299
                   InflectionData.$fReadManifest287) -}
8463dae3116062b076dc25e0f6b8c749
  $fReadManifest287 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Transitivity)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Transitivity)
                   InflectionData.$fReadManifest296
                   InflectionData.$fReadManifest288) -}
8463dae3116062b076dc25e0f6b8c749
  $fReadManifest288 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Transitivity)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Transitivity)
                   InflectionData.$fReadManifest293
                   InflectionData.$fReadManifest289) -}
8463dae3116062b076dc25e0f6b8c749
  $fReadManifest289 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Transitivity)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Transitivity)
                   InflectionData.$fReadManifest290
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           InflectionData.Transitivity))) -}
111b9dd7881655400daece83d7690898
  $fReadManifest29 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest31,
                  InflectionData.$fReadManifest30
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Number>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Number>_R))))) -}
8463dae3116062b076dc25e0f6b8c749
  $fReadManifest290 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Transitivity)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest292,
                  InflectionData.$fReadManifest291
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Transitivity>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Transitivity>_R))))) -}
8463dae3116062b076dc25e0f6b8c749
  $fReadManifest291 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Transitivity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Transitivity
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.DITRANS) -}
3e8d9c9c5582baef536c32aed4b14767
  $fReadManifest292 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DITRANS"#) -}
8463dae3116062b076dc25e0f6b8c749
  $fReadManifest293 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Transitivity)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest295,
                  InflectionData.$fReadManifest294
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Transitivity>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Transitivity>_R))))) -}
8463dae3116062b076dc25e0f6b8c749
  $fReadManifest294 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Transitivity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Transitivity
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.MTRANS) -}
a57ef2f32a38b083ef174113c8c40a7a
  $fReadManifest295 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "MTRANS"#) -}
8463dae3116062b076dc25e0f6b8c749
  $fReadManifest296 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Transitivity)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest298,
                  InflectionData.$fReadManifest297
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Transitivity>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Transitivity>_R))))) -}
8463dae3116062b076dc25e0f6b8c749
  $fReadManifest297 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Transitivity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Transitivity
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.TRANS) -}
12fc0a17d408c4ca83240a64501a753d
  $fReadManifest298 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TRANS"#) -}
8463dae3116062b076dc25e0f6b8c749
  $fReadManifest299 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Transitivity)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest301,
                  InflectionData.$fReadManifest300
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Transitivity>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Transitivity>_R))))) -}
8c6aebea9419dc7f0de35408a7efc4d3
  $fReadManifest3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Manifest"#) -}
111b9dd7881655400daece83d7690898
  $fReadManifest30 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Number -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Number -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.TRI) -}
8463dae3116062b076dc25e0f6b8c749
  $fReadManifest300 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Transitivity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Transitivity
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.NTRANS) -}
a4c6c127a4abc364d00a86ccf428502f
  $fReadManifest301 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NTRANS"#) -}
8463dae3116062b076dc25e0f6b8c749
  $fReadManifest302 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Transitivity)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest304,
                  InflectionData.$fReadManifest303
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Transitivity>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Transitivity>_R))))) -}
8463dae3116062b076dc25e0f6b8c749
  $fReadManifest303 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Transitivity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Transitivity
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.UTRA) -}
3216ae5b14be20d70237dbd8ddb36d5c
  $fReadManifest304 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "UTRA"#) -}
161559e42e5b4fe2aa21ef0b65ba576a
  $fReadManifest306 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Manifest [InflectionData.Volition]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)>,
     Unfolding: (\ n :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Manifest [InflectionData.Volition]
                          -> Text.ParserCombinators.ReadP.P b ->
                 let {
                   lvl122 :: Text.ParserCombinators.ReadP.P b
                   = let {
                       lvl123 :: Text.ParserCombinators.ReadP.P b
                       = eta (InflectionData.NoManifest @ [InflectionData.Volition])
                     } in
                     Text.Read.Lex.expect2
                       @ b
                       (\ a98 :: Text.Read.Lex.Lexeme ->
                        case a98 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                          Text.Read.Lex.Ident a41
                          -> case GHC.Base.eqString
                                    a41
                                    InflectionData.$fReadManifest6 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                               GHC.Types.True -> lvl123 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl122) -}
                   = \ w2 :: () -> lvl122
                 } in
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b
                   (Text.ParserCombinators.ReadP.Look
                      @ b
                      (\ a98 :: GHC.Base.String ->
                       (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                         `cast`
                       (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                         @ b
                         k))
                   (case n of wild { GHC.Types.I# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x 10) of wild2 {
                      GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                      GHC.Types.True
                      -> let {
                           lvl123 :: Text.ParserCombinators.ReadP.P b
                           = let {
                               lvl124 :: Text.ParserCombinators.ReadP.P b
                               = GHC.Read.$wa
                                   @ (InflectionData.LexCat,
                                      InflectionData.ManifestType,
                                      GHC.Types.Int)
                                   InflectionData.$fReadManifest5
                                     `cast`
                                   (Trans
                                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                       <(InflectionData.LexCat,
                                                         InflectionData.ManifestType,
                                                         GHC.Types.Int)>_R))
                                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                  <(InflectionData.LexCat,
                                                    InflectionData.ManifestType,
                                                    GHC.Types.Int)>_R)))
                                   @ b
                                   (\ a41 :: [(InflectionData.LexCat,
                                               InflectionData.ManifestType,
                                               GHC.Types.Int)] ->
                                    GHC.Read.$wa
                                      @ InflectionData.Volition
                                      InflectionData.$fReadManifest307
                                        `cast`
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <InflectionData.Volition>_R))
                                      @ b
                                      (\ a42 :: [InflectionData.Volition] ->
                                       eta
                                         (InflectionData.Manifest
                                            @ [InflectionData.Volition]
                                            a41
                                            a42)))
                             } in
                             Text.Read.Lex.expect2
                               @ b
                               (\ a98 :: Text.Read.Lex.Lexeme ->
                                case a98 of wild1 {
                                  DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                  Text.Read.Lex.Ident a41
                                  -> case GHC.Base.eqString
                                            a41
                                            InflectionData.$fReadManifest3 of wild3 {
                                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                       GHC.Types.True -> lvl124 } })
                         } in
                         let {
                           k1 :: () -> Text.ParserCombinators.ReadP.P b
                             {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl123) -}
                           = \ w2 :: () -> lvl123
                         } in
                         Text.ParserCombinators.ReadP.Look
                           @ b
                           (\ a98 :: GHC.Base.String ->
                            (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                              `cast`
                            (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                              @ b
                              k1) } })) -}
3a73fa2d976f240c7ba768b809a25328
  $fReadManifest307 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Volition
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Volition
                   InflectionData.$fReadManifest308
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.Volition>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.Volition>_R)))) -}
3a73fa2d976f240c7ba768b809a25328
  $fReadManifest308 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Volition -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: InflectionData.Volition
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ InflectionData.Volition
                   InflectionData.$fReadManifest309
                   eta
                   @ b
                   eta1) -}
3a73fa2d976f240c7ba768b809a25328
  $fReadManifest309 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Volition)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Volition)
                   InflectionData.$fReadManifest318
                   InflectionData.$fReadManifest310) -}
15259b73b5fb311ff440830fdfded342
  $fReadManifest31 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TRI"#) -}
3a73fa2d976f240c7ba768b809a25328
  $fReadManifest310 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Volition)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Volition)
                   InflectionData.$fReadManifest315
                   InflectionData.$fReadManifest311) -}
3a73fa2d976f240c7ba768b809a25328
  $fReadManifest311 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Volition)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Volition)
                   InflectionData.$fReadManifest312
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           InflectionData.Volition))) -}
3a73fa2d976f240c7ba768b809a25328
  $fReadManifest312 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Volition)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest314,
                  InflectionData.$fReadManifest313
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Volition>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Volition>_R))))) -}
3a73fa2d976f240c7ba768b809a25328
  $fReadManifest313 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Volition -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Volition
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.NVOL) -}
0e373d0474922100bac752e8a54a8589
  $fReadManifest314 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NVOL"#) -}
3a73fa2d976f240c7ba768b809a25328
  $fReadManifest315 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Volition)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest317,
                  InflectionData.$fReadManifest316
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Volition>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Volition>_R))))) -}
3a73fa2d976f240c7ba768b809a25328
  $fReadManifest316 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Volition -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Volition
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.VOL) -}
94c35914af1ba36c9ff33f3ee341e86f
  $fReadManifest317 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "VOL"#) -}
3a73fa2d976f240c7ba768b809a25328
  $fReadManifest318 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Volition)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest320,
                  InflectionData.$fReadManifest319
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Volition>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Volition>_R))))) -}
3a73fa2d976f240c7ba768b809a25328
  $fReadManifest319 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Volition -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Volition
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.UVOL) -}
111b9dd7881655400daece83d7690898
  $fReadManifest32 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest34,
                  InflectionData.$fReadManifest33
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Number>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Number>_R))))) -}
d271c96a6782e7bddb3e8f4e541f6086
  $fReadManifest320 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "UVOL"#) -}
111b9dd7881655400daece83d7690898
  $fReadManifest33 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Number -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Number -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.DU) -}
b8bd58f2a92e32290f1cbf2d97ba9241
  $fReadManifest34 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DU"#) -}
111b9dd7881655400daece83d7690898
  $fReadManifest35 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest37,
                  InflectionData.$fReadManifest36
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Number>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Number>_R))))) -}
111b9dd7881655400daece83d7690898
  $fReadManifest36 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Number -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Number -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.SG) -}
0e870898f86e885d2f9722abdd7656ba
  $fReadManifest37 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SG"#) -}
111b9dd7881655400daece83d7690898
  $fReadManifest38 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest40,
                  InflectionData.$fReadManifest39
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Number>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Number>_R))))) -}
111b9dd7881655400daece83d7690898
  $fReadManifest39 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Number -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Number -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.UNUM) -}
60d54665ed41d4d7f58560c4484c0096
  $fReadManifest4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11) -}
a40298bc46a2cf783d190602ca53081f
  $fReadManifest40 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "UNUM"#) -}
93f6e3b53d472cd6a470bd8154f1e6ee
  $fReadManifest42 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Manifest [InflectionData.Definiteness]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)>,
     Unfolding: (\ n :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Manifest [InflectionData.Definiteness]
                          -> Text.ParserCombinators.ReadP.P b ->
                 let {
                   lvl122 :: Text.ParserCombinators.ReadP.P b
                   = let {
                       lvl123 :: Text.ParserCombinators.ReadP.P b
                       = eta (InflectionData.NoManifest @ [InflectionData.Definiteness])
                     } in
                     Text.Read.Lex.expect2
                       @ b
                       (\ a98 :: Text.Read.Lex.Lexeme ->
                        case a98 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                          Text.Read.Lex.Ident a41
                          -> case GHC.Base.eqString
                                    a41
                                    InflectionData.$fReadManifest6 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                               GHC.Types.True -> lvl123 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl122) -}
                   = \ w2 :: () -> lvl122
                 } in
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b
                   (Text.ParserCombinators.ReadP.Look
                      @ b
                      (\ a98 :: GHC.Base.String ->
                       (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                         `cast`
                       (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                         @ b
                         k))
                   (case n of wild { GHC.Types.I# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x 10) of wild2 {
                      GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                      GHC.Types.True
                      -> let {
                           lvl123 :: Text.ParserCombinators.ReadP.P b
                           = let {
                               lvl124 :: Text.ParserCombinators.ReadP.P b
                               = GHC.Read.$wa
                                   @ (InflectionData.LexCat,
                                      InflectionData.ManifestType,
                                      GHC.Types.Int)
                                   InflectionData.$fReadManifest5
                                     `cast`
                                   (Trans
                                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                       <(InflectionData.LexCat,
                                                         InflectionData.ManifestType,
                                                         GHC.Types.Int)>_R))
                                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                  <(InflectionData.LexCat,
                                                    InflectionData.ManifestType,
                                                    GHC.Types.Int)>_R)))
                                   @ b
                                   (\ a41 :: [(InflectionData.LexCat,
                                               InflectionData.ManifestType,
                                               GHC.Types.Int)] ->
                                    GHC.Read.$wa
                                      @ InflectionData.Definiteness
                                      InflectionData.$fReadDefiniteness2
                                        `cast`
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <InflectionData.Definiteness>_R))
                                      @ b
                                      (\ a42 :: [InflectionData.Definiteness] ->
                                       eta
                                         (InflectionData.Manifest
                                            @ [InflectionData.Definiteness]
                                            a41
                                            a42)))
                             } in
                             Text.Read.Lex.expect2
                               @ b
                               (\ a98 :: Text.Read.Lex.Lexeme ->
                                case a98 of wild1 {
                                  DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                  Text.Read.Lex.Ident a41
                                  -> case GHC.Base.eqString
                                            a41
                                            InflectionData.$fReadManifest3 of wild3 {
                                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                       GHC.Types.True -> lvl124 } })
                         } in
                         let {
                           k1 :: () -> Text.ParserCombinators.ReadP.P b
                             {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl123) -}
                           = \ w2 :: () -> lvl123
                         } in
                         Text.ParserCombinators.ReadP.Look
                           @ b
                           (\ a98 :: GHC.Base.String ->
                            (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                              `cast`
                            (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                              @ b
                              k1) } })) -}
574ea3cd9690062f354a826d47f72838
  $fReadManifest44 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Manifest [InflectionData.Specificity]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)>,
     Unfolding: (\ n :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Manifest [InflectionData.Specificity]
                          -> Text.ParserCombinators.ReadP.P b ->
                 let {
                   lvl122 :: Text.ParserCombinators.ReadP.P b
                   = let {
                       lvl123 :: Text.ParserCombinators.ReadP.P b
                       = eta (InflectionData.NoManifest @ [InflectionData.Specificity])
                     } in
                     Text.Read.Lex.expect2
                       @ b
                       (\ a98 :: Text.Read.Lex.Lexeme ->
                        case a98 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                          Text.Read.Lex.Ident a41
                          -> case GHC.Base.eqString
                                    a41
                                    InflectionData.$fReadManifest6 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                               GHC.Types.True -> lvl123 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl122) -}
                   = \ w2 :: () -> lvl122
                 } in
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b
                   (Text.ParserCombinators.ReadP.Look
                      @ b
                      (\ a98 :: GHC.Base.String ->
                       (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                         `cast`
                       (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                         @ b
                         k))
                   (case n of wild { GHC.Types.I# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x 10) of wild2 {
                      GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                      GHC.Types.True
                      -> let {
                           lvl123 :: Text.ParserCombinators.ReadP.P b
                           = let {
                               lvl124 :: Text.ParserCombinators.ReadP.P b
                               = GHC.Read.$wa
                                   @ (InflectionData.LexCat,
                                      InflectionData.ManifestType,
                                      GHC.Types.Int)
                                   InflectionData.$fReadManifest5
                                     `cast`
                                   (Trans
                                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                       <(InflectionData.LexCat,
                                                         InflectionData.ManifestType,
                                                         GHC.Types.Int)>_R))
                                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                  <(InflectionData.LexCat,
                                                    InflectionData.ManifestType,
                                                    GHC.Types.Int)>_R)))
                                   @ b
                                   (\ a41 :: [(InflectionData.LexCat,
                                               InflectionData.ManifestType,
                                               GHC.Types.Int)] ->
                                    GHC.Read.$wa
                                      @ InflectionData.Specificity
                                      InflectionData.$fReadManifest45
                                        `cast`
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <InflectionData.Specificity>_R))
                                      @ b
                                      (\ a42 :: [InflectionData.Specificity] ->
                                       eta
                                         (InflectionData.Manifest
                                            @ [InflectionData.Specificity]
                                            a41
                                            a42)))
                             } in
                             Text.Read.Lex.expect2
                               @ b
                               (\ a98 :: Text.Read.Lex.Lexeme ->
                                case a98 of wild1 {
                                  DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                  Text.Read.Lex.Ident a41
                                  -> case GHC.Base.eqString
                                            a41
                                            InflectionData.$fReadManifest3 of wild3 {
                                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                       GHC.Types.True -> lvl124 } })
                         } in
                         let {
                           k1 :: () -> Text.ParserCombinators.ReadP.P b
                             {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl123) -}
                           = \ w2 :: () -> lvl123
                         } in
                         Text.ParserCombinators.ReadP.Look
                           @ b
                           (\ a98 :: GHC.Base.String ->
                            (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                              `cast`
                            (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                              @ b
                              k1) } })) -}
6c3fc67424127bb4feb2d92b23a30da0
  $fReadManifest45 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Specificity
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Specificity
                   InflectionData.$fReadManifest46
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.Specificity>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.Specificity>_R)))) -}
6c3fc67424127bb4feb2d92b23a30da0
  $fReadManifest46 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Specificity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: InflectionData.Specificity
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ InflectionData.Specificity
                   InflectionData.$fReadManifest47
                   eta
                   @ b
                   eta1) -}
6c3fc67424127bb4feb2d92b23a30da0
  $fReadManifest47 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Specificity)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Specificity)
                   InflectionData.$fReadManifest56
                   InflectionData.$fReadManifest48) -}
6c3fc67424127bb4feb2d92b23a30da0
  $fReadManifest48 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Specificity)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Specificity)
                   InflectionData.$fReadManifest53
                   InflectionData.$fReadManifest49) -}
6c3fc67424127bb4feb2d92b23a30da0
  $fReadManifest49 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Specificity)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Specificity)
                   InflectionData.$fReadManifest50
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           InflectionData.Specificity))) -}
03dd1c0e668fdd121a6b41b906c8c953
  $fReadManifest5 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b1.
       ((InflectionData.LexCat,
         InflectionData.ManifestType,
         GHC.Types.Int)
        -> Text.ParserCombinators.ReadP.P b1)
       -> Text.ParserCombinators.ReadP.P b1
  {- Arity: 2,
     Unfolding: (\ w3 :: Text.ParserCombinators.ReadPrec.Prec
                   @ b1
                   w4 :: (InflectionData.LexCat,
                          InflectionData.ManifestType,
                          GHC.Types.Int)
                         -> Text.ParserCombinators.ReadP.P b1[OneShot] ->
                 GHC.Read.$wa4
                   @ InflectionData.LexCat
                   @ InflectionData.ManifestType
                   @ GHC.Types.Int
                   InflectionData.$fReadLexCat
                   InflectionData.$fReadManifestType
                   GHC.Read.$fReadInt
                   @ b1
                   w4) -}
6c3fc67424127bb4feb2d92b23a30da0
  $fReadManifest50 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Specificity)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest52,
                  InflectionData.$fReadManifest51
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Specificity>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Specificity>_R))))) -}
6c3fc67424127bb4feb2d92b23a30da0
  $fReadManifest51 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Specificity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Specificity
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.NSPEC) -}
b6dc969c904b9fc4c4a56053b7571d9c
  $fReadManifest52 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NSPEC"#) -}
6c3fc67424127bb4feb2d92b23a30da0
  $fReadManifest53 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Specificity)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest55,
                  InflectionData.$fReadManifest54
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Specificity>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Specificity>_R))))) -}
6c3fc67424127bb4feb2d92b23a30da0
  $fReadManifest54 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Specificity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Specificity
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.SPEC) -}
89e082991d918d1a37ed79839973f7ef
  $fReadManifest55 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SPEC"#) -}
6c3fc67424127bb4feb2d92b23a30da0
  $fReadManifest56 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Specificity)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest58,
                  InflectionData.$fReadManifest57
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Specificity>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Specificity>_R))))) -}
6c3fc67424127bb4feb2d92b23a30da0
  $fReadManifest57 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Specificity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Specificity
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.USPE) -}
e1c93b8789aaa670e3f7eab38fa546f6
  $fReadManifest58 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "USPE"#) -}
d7d9308a749ea9af7fd5dbc25ba4320a
  $fReadManifest6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NoManifest"#) -}
6d613503f5bb22728ab8c6b1945c6b9b
  $fReadManifest60 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Manifest [InflectionData.Topic]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)>,
     Unfolding: (\ n :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Manifest [InflectionData.Topic]
                          -> Text.ParserCombinators.ReadP.P b ->
                 let {
                   lvl122 :: Text.ParserCombinators.ReadP.P b
                   = let {
                       lvl123 :: Text.ParserCombinators.ReadP.P b
                       = eta (InflectionData.NoManifest @ [InflectionData.Topic])
                     } in
                     Text.Read.Lex.expect2
                       @ b
                       (\ a98 :: Text.Read.Lex.Lexeme ->
                        case a98 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                          Text.Read.Lex.Ident a41
                          -> case GHC.Base.eqString
                                    a41
                                    InflectionData.$fReadManifest6 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                               GHC.Types.True -> lvl123 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl122) -}
                   = \ w2 :: () -> lvl122
                 } in
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b
                   (Text.ParserCombinators.ReadP.Look
                      @ b
                      (\ a98 :: GHC.Base.String ->
                       (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                         `cast`
                       (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                         @ b
                         k))
                   (case n of wild { GHC.Types.I# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x 10) of wild2 {
                      GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                      GHC.Types.True
                      -> let {
                           lvl123 :: Text.ParserCombinators.ReadP.P b
                           = let {
                               lvl124 :: Text.ParserCombinators.ReadP.P b
                               = GHC.Read.$wa
                                   @ (InflectionData.LexCat,
                                      InflectionData.ManifestType,
                                      GHC.Types.Int)
                                   InflectionData.$fReadManifest5
                                     `cast`
                                   (Trans
                                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                       <(InflectionData.LexCat,
                                                         InflectionData.ManifestType,
                                                         GHC.Types.Int)>_R))
                                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                  <(InflectionData.LexCat,
                                                    InflectionData.ManifestType,
                                                    GHC.Types.Int)>_R)))
                                   @ b
                                   (\ a41 :: [(InflectionData.LexCat,
                                               InflectionData.ManifestType,
                                               GHC.Types.Int)] ->
                                    GHC.Read.$wa
                                      @ InflectionData.Topic
                                      InflectionData.$fReadManifest61
                                        `cast`
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <InflectionData.Topic>_R))
                                      @ b
                                      (\ a42 :: [InflectionData.Topic] ->
                                       eta
                                         (InflectionData.Manifest
                                            @ [InflectionData.Topic]
                                            a41
                                            a42)))
                             } in
                             Text.Read.Lex.expect2
                               @ b
                               (\ a98 :: Text.Read.Lex.Lexeme ->
                                case a98 of wild1 {
                                  DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                  Text.Read.Lex.Ident a41
                                  -> case GHC.Base.eqString
                                            a41
                                            InflectionData.$fReadManifest3 of wild3 {
                                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                       GHC.Types.True -> lvl124 } })
                         } in
                         let {
                           k1 :: () -> Text.ParserCombinators.ReadP.P b
                             {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl123) -}
                           = \ w2 :: () -> lvl123
                         } in
                         Text.ParserCombinators.ReadP.Look
                           @ b
                           (\ a98 :: GHC.Base.String ->
                            (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                              `cast`
                            (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                              @ b
                              k1) } })) -}
f2502f7485a2c7bc47bb080f20b26aeb
  $fReadManifest61 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Topic
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Topic
                   InflectionData.$fReadManifest62
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.Topic>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.Topic>_R)))) -}
f2502f7485a2c7bc47bb080f20b26aeb
  $fReadManifest62 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Topic -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: InflectionData.Topic -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ InflectionData.Topic
                   InflectionData.$fReadManifest63
                   eta
                   @ b
                   eta1) -}
f2502f7485a2c7bc47bb080f20b26aeb
  $fReadManifest63 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Topic)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Topic)
                   InflectionData.$fReadManifest72
                   InflectionData.$fReadManifest64) -}
f2502f7485a2c7bc47bb080f20b26aeb
  $fReadManifest64 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Topic)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Topic)
                   InflectionData.$fReadManifest69
                   InflectionData.$fReadManifest65) -}
f2502f7485a2c7bc47bb080f20b26aeb
  $fReadManifest65 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Topic)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Topic)
                   InflectionData.$fReadManifest66
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Topic))) -}
f2502f7485a2c7bc47bb080f20b26aeb
  $fReadManifest66 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Topic)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest68,
                  InflectionData.$fReadManifest67
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Topic>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Topic>_R))))) -}
f2502f7485a2c7bc47bb080f20b26aeb
  $fReadManifest67 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Topic -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Topic -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.NTOP) -}
e6f4788a9330a4031927bd6d1cb5383e
  $fReadManifest68 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NTOP"#) -}
f2502f7485a2c7bc47bb080f20b26aeb
  $fReadManifest69 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Topic)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest71,
                  InflectionData.$fReadManifest70
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Topic>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Topic>_R))))) -}
f2502f7485a2c7bc47bb080f20b26aeb
  $fReadManifest70 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Topic -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Topic -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.TOP) -}
d362258f44d3b87bac011edb74e2e2be
  $fReadManifest71 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TOP"#) -}
f2502f7485a2c7bc47bb080f20b26aeb
  $fReadManifest72 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Topic)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest74,
                  InflectionData.$fReadManifest73
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Topic>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Topic>_R))))) -}
f2502f7485a2c7bc47bb080f20b26aeb
  $fReadManifest73 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Topic -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Topic -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.UTOP) -}
01609ae12605c135148be22059b7ecd4
  $fReadManifest74 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "UTOP"#) -}
73d35de4284bb245888643322bb98159
  $fReadManifest76 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Manifest [InflectionData.Person]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)>,
     Unfolding: (\ n :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Manifest [InflectionData.Person]
                          -> Text.ParserCombinators.ReadP.P b ->
                 let {
                   lvl122 :: Text.ParserCombinators.ReadP.P b
                   = let {
                       lvl123 :: Text.ParserCombinators.ReadP.P b
                       = eta (InflectionData.NoManifest @ [InflectionData.Person])
                     } in
                     Text.Read.Lex.expect2
                       @ b
                       (\ a98 :: Text.Read.Lex.Lexeme ->
                        case a98 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                          Text.Read.Lex.Ident a41
                          -> case GHC.Base.eqString
                                    a41
                                    InflectionData.$fReadManifest6 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                               GHC.Types.True -> lvl123 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl122) -}
                   = \ w2 :: () -> lvl122
                 } in
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b
                   (Text.ParserCombinators.ReadP.Look
                      @ b
                      (\ a98 :: GHC.Base.String ->
                       (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                         `cast`
                       (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                         @ b
                         k))
                   (case n of wild { GHC.Types.I# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x 10) of wild2 {
                      GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                      GHC.Types.True
                      -> let {
                           lvl123 :: Text.ParserCombinators.ReadP.P b
                           = let {
                               lvl124 :: Text.ParserCombinators.ReadP.P b
                               = GHC.Read.$wa
                                   @ (InflectionData.LexCat,
                                      InflectionData.ManifestType,
                                      GHC.Types.Int)
                                   InflectionData.$fReadManifest5
                                     `cast`
                                   (Trans
                                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                       <(InflectionData.LexCat,
                                                         InflectionData.ManifestType,
                                                         GHC.Types.Int)>_R))
                                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                  <(InflectionData.LexCat,
                                                    InflectionData.ManifestType,
                                                    GHC.Types.Int)>_R)))
                                   @ b
                                   (\ a41 :: [(InflectionData.LexCat,
                                               InflectionData.ManifestType,
                                               GHC.Types.Int)] ->
                                    GHC.Read.$wa
                                      @ InflectionData.Person
                                      InflectionData.$fReadManifest77
                                        `cast`
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <InflectionData.Person>_R))
                                      @ b
                                      (\ a42 :: [InflectionData.Person] ->
                                       eta
                                         (InflectionData.Manifest
                                            @ [InflectionData.Person]
                                            a41
                                            a42)))
                             } in
                             Text.Read.Lex.expect2
                               @ b
                               (\ a98 :: Text.Read.Lex.Lexeme ->
                                case a98 of wild1 {
                                  DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                  Text.Read.Lex.Ident a41
                                  -> case GHC.Base.eqString
                                            a41
                                            InflectionData.$fReadManifest3 of wild3 {
                                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                       GHC.Types.True -> lvl124 } })
                         } in
                         let {
                           k1 :: () -> Text.ParserCombinators.ReadP.P b
                             {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl123) -}
                           = \ w2 :: () -> lvl123
                         } in
                         Text.ParserCombinators.ReadP.Look
                           @ b
                           (\ a98 :: GHC.Base.String ->
                            (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                              `cast`
                            (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                              @ b
                              k1) } })) -}
cbc274f5b3d6239101cd9764b7773be5
  $fReadManifest77 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Person
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Person
                   InflectionData.$fReadManifest78
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.Person>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.Person>_R)))) -}
cbc274f5b3d6239101cd9764b7773be5
  $fReadManifest78 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Person -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: InflectionData.Person
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ InflectionData.Person
                   InflectionData.$fReadManifest79
                   eta
                   @ b
                   eta1) -}
cbc274f5b3d6239101cd9764b7773be5
  $fReadManifest79 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)
                   InflectionData.$fReadManifest108
                   InflectionData.$fReadManifest80) -}
03a5f59d194523b2362d9183633e537f
  $fReadManifest8 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Manifest [InflectionData.Gender]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)>,
     Unfolding: (\ n :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Manifest [InflectionData.Gender]
                          -> Text.ParserCombinators.ReadP.P b ->
                 let {
                   lvl122 :: Text.ParserCombinators.ReadP.P b
                   = let {
                       lvl123 :: Text.ParserCombinators.ReadP.P b
                       = eta (InflectionData.NoManifest @ [InflectionData.Gender])
                     } in
                     Text.Read.Lex.expect2
                       @ b
                       (\ a98 :: Text.Read.Lex.Lexeme ->
                        case a98 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                          Text.Read.Lex.Ident a41
                          -> case GHC.Base.eqString
                                    a41
                                    InflectionData.$fReadManifest6 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                               GHC.Types.True -> lvl123 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl122) -}
                   = \ w2 :: () -> lvl122
                 } in
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b
                   (Text.ParserCombinators.ReadP.Look
                      @ b
                      (\ a98 :: GHC.Base.String ->
                       (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                         `cast`
                       (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                         @ b
                         k))
                   (case n of wild { GHC.Types.I# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x 10) of wild2 {
                      GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                      GHC.Types.True
                      -> let {
                           lvl123 :: Text.ParserCombinators.ReadP.P b
                           = let {
                               lvl124 :: Text.ParserCombinators.ReadP.P b
                               = GHC.Read.$wa
                                   @ (InflectionData.LexCat,
                                      InflectionData.ManifestType,
                                      GHC.Types.Int)
                                   InflectionData.$fReadManifest5
                                     `cast`
                                   (Trans
                                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                       <(InflectionData.LexCat,
                                                         InflectionData.ManifestType,
                                                         GHC.Types.Int)>_R))
                                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                  <(InflectionData.LexCat,
                                                    InflectionData.ManifestType,
                                                    GHC.Types.Int)>_R)))
                                   @ b
                                   (\ a41 :: [(InflectionData.LexCat,
                                               InflectionData.ManifestType,
                                               GHC.Types.Int)] ->
                                    GHC.Read.$wa
                                      @ InflectionData.Gender
                                      InflectionData.$fReadGender2
                                        `cast`
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <InflectionData.Gender>_R))
                                      @ b
                                      (\ a42 :: [InflectionData.Gender] ->
                                       eta
                                         (InflectionData.Manifest
                                            @ [InflectionData.Gender]
                                            a41
                                            a42)))
                             } in
                             Text.Read.Lex.expect2
                               @ b
                               (\ a98 :: Text.Read.Lex.Lexeme ->
                                case a98 of wild1 {
                                  DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                  Text.Read.Lex.Ident a41
                                  -> case GHC.Base.eqString
                                            a41
                                            InflectionData.$fReadManifest3 of wild3 {
                                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                       GHC.Types.True -> lvl124 } })
                         } in
                         let {
                           k1 :: () -> Text.ParserCombinators.ReadP.P b
                             {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl123) -}
                           = \ w2 :: () -> lvl123
                         } in
                         Text.ParserCombinators.ReadP.Look
                           @ b
                           (\ a98 :: GHC.Base.String ->
                            (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                              `cast`
                            (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                              @ b
                              k1) } })) -}
cbc274f5b3d6239101cd9764b7773be5
  $fReadManifest80 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)
                   InflectionData.$fReadManifest105
                   InflectionData.$fReadManifest81) -}
cbc274f5b3d6239101cd9764b7773be5
  $fReadManifest81 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)
                   InflectionData.$fReadManifest102
                   InflectionData.$fReadManifest82) -}
cbc274f5b3d6239101cd9764b7773be5
  $fReadManifest82 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)
                   InflectionData.$fReadManifest99
                   InflectionData.$fReadManifest83) -}
cbc274f5b3d6239101cd9764b7773be5
  $fReadManifest83 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)
                   InflectionData.$fReadManifest96
                   InflectionData.$fReadManifest84) -}
cbc274f5b3d6239101cd9764b7773be5
  $fReadManifest84 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)
                   InflectionData.$fReadManifest93
                   InflectionData.$fReadManifest85) -}
cbc274f5b3d6239101cd9764b7773be5
  $fReadManifest85 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)
                   InflectionData.$fReadManifest90
                   InflectionData.$fReadManifest86) -}
cbc274f5b3d6239101cd9764b7773be5
  $fReadManifest86 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)
                   InflectionData.$fReadManifest87
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           InflectionData.Person))) -}
cbc274f5b3d6239101cd9764b7773be5
  $fReadManifest87 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest89,
                  InflectionData.$fReadManifest88
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Person>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Person>_R))))) -}
cbc274f5b3d6239101cd9764b7773be5
  $fReadManifest88 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Person -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Person -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.THRDOBV) -}
b53d02667a97e8df8e2f77670b21278d
  $fReadManifest89 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "THRDOBV"#) -}
cbc274f5b3d6239101cd9764b7773be5
  $fReadManifest90 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest92,
                  InflectionData.$fReadManifest91
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Person>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Person>_R))))) -}
cbc274f5b3d6239101cd9764b7773be5
  $fReadManifest91 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Person -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Person -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.THRDPROX) -}
c6e7b76b4c33f8eccbed2d647e50a0fa
  $fReadManifest92 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "THRDPROX"#) -}
cbc274f5b3d6239101cd9764b7773be5
  $fReadManifest93 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest95,
                  InflectionData.$fReadManifest94
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Person>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Person>_R))))) -}
cbc274f5b3d6239101cd9764b7773be5
  $fReadManifest94 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Person -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Person -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.THIRD) -}
8f97aae79ae8b56d52dd11e7934c9a66
  $fReadManifest95 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "THIRD"#) -}
cbc274f5b3d6239101cd9764b7773be5
  $fReadManifest96 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest98,
                  InflectionData.$fReadManifest97
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Person>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Person>_R))))) -}
cbc274f5b3d6239101cd9764b7773be5
  $fReadManifest97 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Person -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Person -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.SECOND) -}
95ada23b0b469827233349a382b6768e
  $fReadManifest98 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SECOND"#) -}
cbc274f5b3d6239101cd9764b7773be5
  $fReadManifest99 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest101,
                  InflectionData.$fReadManifest100
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Person>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Person>_R))))) -}
339a9cc5bd8d02624186a930ed6d9c71
  $fReadManifestType :: GHC.Read.Read InflectionData.ManifestType
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.ManifestType
                  InflectionData.$fReadManifestType_$s$dmreadsPrec
                  InflectionData.$fReadManifestType_$sreadListDefault
                  InflectionData.$fReadManifestType_$creadPrec
                  InflectionData.$fReadManifestType_$creadListPrec -}
339a9cc5bd8d02624186a930ed6d9c71
  $fReadManifestType1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.ManifestType] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.ManifestType]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.ManifestType
                   InflectionData.$fReadManifestType2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.ManifestType>_R))
                   @ b
                   eta1) -}
339a9cc5bd8d02624186a930ed6d9c71
  $fReadManifestType10 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.ManifestType)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifestType12,
                  InflectionData.$fReadManifestType11
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.ManifestType>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.ManifestType>_R))))) -}
339a9cc5bd8d02624186a930ed6d9c71
  $fReadManifestType11 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.ManifestType -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.ManifestType
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.Prefix) -}
b42c06bb90daee227e775c5814a8956c
  $fReadManifestType12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Prefix"#) -}
339a9cc5bd8d02624186a930ed6d9c71
  $fReadManifestType13 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.ManifestType)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifestType15,
                  InflectionData.$fReadManifestType14
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.ManifestType>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.ManifestType>_R))))) -}
339a9cc5bd8d02624186a930ed6d9c71
  $fReadManifestType14 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.ManifestType -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.ManifestType
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.Particle) -}
86bbbbaacd872f416579a15338e78b6a
  $fReadManifestType15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Particle"#) -}
339a9cc5bd8d02624186a930ed6d9c71
  $fReadManifestType2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.ManifestType
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.ManifestType
                   InflectionData.$fReadManifestType3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.ManifestType>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.ManifestType>_R)))) -}
339a9cc5bd8d02624186a930ed6d9c71
  $fReadManifestType3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.ManifestType -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: InflectionData.ManifestType
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ InflectionData.ManifestType
                   InflectionData.$fReadManifestType4
                   eta
                   @ b
                   eta1) -}
339a9cc5bd8d02624186a930ed6d9c71
  $fReadManifestType4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.ManifestType)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.ManifestType)
                   InflectionData.$fReadManifestType13
                   InflectionData.$fReadManifestType5) -}
339a9cc5bd8d02624186a930ed6d9c71
  $fReadManifestType5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.ManifestType)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.ManifestType)
                   InflectionData.$fReadManifestType10
                   InflectionData.$fReadManifestType6) -}
339a9cc5bd8d02624186a930ed6d9c71
  $fReadManifestType6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.ManifestType)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.ManifestType)
                   InflectionData.$fReadManifestType7
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           InflectionData.ManifestType))) -}
339a9cc5bd8d02624186a930ed6d9c71
  $fReadManifestType7 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.ManifestType)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifestType9,
                  InflectionData.$fReadManifestType8
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.ManifestType>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.ManifestType>_R))))) -}
339a9cc5bd8d02624186a930ed6d9c71
  $fReadManifestType8 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.ManifestType -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.ManifestType
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.Suffix) -}
72321921727741471a6b26a52a18a2e4
  $fReadManifestType9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Suffix"#) -}
339a9cc5bd8d02624186a930ed6d9c71
  $fReadManifestType_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [InflectionData.ManifestType]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadManifestType1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.ManifestType]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.ManifestType]>_R))) -}
339a9cc5bd8d02624186a930ed6d9c71
  $fReadManifestType_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      InflectionData.ManifestType
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadManifestType2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.ManifestType>_R)) -}
339a9cc5bd8d02624186a930ed6d9c71
  $fReadManifestType_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.ManifestType
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ InflectionData.ManifestType
                   InflectionData.$fReadManifestType_$creadPrec
                   eta) -}
339a9cc5bd8d02624186a930ed6d9c71
  $fReadManifestType_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.ManifestType]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.ManifestType]
                   ((InflectionData.$fReadManifestType_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[InflectionData.ManifestType]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[InflectionData.ManifestType]>_R)
                      @ [InflectionData.ManifestType]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [InflectionData.ManifestType]))) -}
402c727bb1d5614cf0c6243ee3fa7337
  $fReadManifest_$creadList ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Manifest a]
  {- Arity: 1, Strictness: <L,U(A,A,U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a41 $dRead :: GHC.Read.Read a41 ->
                 Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Manifest a41]
                   (GHC.Read.$wa
                      @ (InflectionData.Manifest a41)
                      (InflectionData.$fReadManifest2 @ a41 $dRead)
                        `cast`
                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                <InflectionData.Manifest a41>_R))
                      @ [InflectionData.Manifest a41]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [InflectionData.Manifest a41]))) -}
402c727bb1d5614cf0c6243ee3fa7337
  $fReadManifest_$creadListPrec ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadPrec.ReadPrec
      [InflectionData.Manifest a]
  {- Arity: 3, Strictness: <L,U(A,A,U,A)><L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadManifest1
                  `cast`
                (forall a41.
                 <GHC.Read.Read a41>_R
                 ->_R Trans
                          (<Text.ParserCombinators.ReadPrec.Prec>_R
                           ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                         <[InflectionData.Manifest a41]>_R))
                          (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                    <[InflectionData.Manifest a41]>_R))) -}
402c727bb1d5614cf0c6243ee3fa7337
  $fReadManifest_$creadPrec ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadPrec.ReadPrec
      (InflectionData.Manifest a)
  {- Arity: 2, Strictness: <L,1*U(A,A,1*U,A)><L,U>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadManifest2
                  `cast`
                (forall a41.
                 <GHC.Read.Read a41>_R
                 ->_R Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <InflectionData.Manifest a41>_R)) -}
402c727bb1d5614cf0c6243ee3fa7337
  $fReadManifest_$creadsPrec ::
    GHC.Read.Read a =>
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS (InflectionData.Manifest a)
  {- Arity: 2, Strictness: <L,1*U(A,A,1*U,A)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a41 $dRead :: GHC.Read.Read a41 eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadP.run
                   @ (InflectionData.Manifest a41)
                   ((InflectionData.$fReadManifest2 @ a41 $dRead eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <InflectionData.Manifest a41>_R)
                      @ (InflectionData.Manifest a41)
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ (InflectionData.Manifest a41)))) -}
987f478754e08db3236fd0a739247bf9
  $fReadMood :: GHC.Read.Read InflectionData.Mood
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Mood
                  InflectionData.$fReadMood_$s$dmreadsPrec
                  InflectionData.$fReadMood2
                  InflectionData.$fReadMood_$creadPrec
                  InflectionData.$fReadMood_$creadListPrec -}
987f478754e08db3236fd0a739247bf9
  $fReadMood1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Mood] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.Mood]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.Mood
                   InflectionData.$fReadManifest213
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Mood>_R))
                   @ b
                   eta1) -}
987f478754e08db3236fd0a739247bf9
  $fReadMood2 ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Mood]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Mood]
                   InflectionData.$fReadMood3) -}
987f478754e08db3236fd0a739247bf9
  $fReadMood3 :: Text.ParserCombinators.ReadP.P [InflectionData.Mood]
  {- Unfolding: (GHC.Read.$wa
                   @ InflectionData.Mood
                   InflectionData.$fReadManifest213
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Mood>_R))
                   @ [InflectionData.Mood]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                      @ [InflectionData.Mood])) -}
987f478754e08db3236fd0a739247bf9
  $fReadMood_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [InflectionData.Mood]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadMood1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.Mood]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.Mood]>_R))) -}
987f478754e08db3236fd0a739247bf9
  $fReadMood_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadManifest213
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.Mood>_R)) -}
987f478754e08db3236fd0a739247bf9
  $fReadMood_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Mood
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ InflectionData.Mood
                   InflectionData.$fReadMood_$creadPrec
                   eta) -}
111b9dd7881655400daece83d7690898
  $fReadNumber :: GHC.Read.Read InflectionData.Number
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Number
                  InflectionData.$fReadNumber_$s$dmreadsPrec
                  InflectionData.$fReadNumber2
                  InflectionData.$fReadNumber_$creadPrec
                  InflectionData.$fReadNumber_$creadListPrec -}
111b9dd7881655400daece83d7690898
  $fReadNumber1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Number] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.Number]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.Number
                   InflectionData.$fReadManifest15
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Number>_R))
                   @ b
                   eta1) -}
111b9dd7881655400daece83d7690898
  $fReadNumber2 ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Number]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Number]
                   InflectionData.$fReadNumber3) -}
111b9dd7881655400daece83d7690898
  $fReadNumber3 ::
    Text.ParserCombinators.ReadP.P [InflectionData.Number]
  {- Unfolding: (GHC.Read.$wa
                   @ InflectionData.Number
                   InflectionData.$fReadManifest15
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Number>_R))
                   @ [InflectionData.Number]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                      @ [InflectionData.Number])) -}
111b9dd7881655400daece83d7690898
  $fReadNumber_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [InflectionData.Number]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadNumber1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.Number]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.Number]>_R))) -}
111b9dd7881655400daece83d7690898
  $fReadNumber_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadManifest15
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.Number>_R)) -}
111b9dd7881655400daece83d7690898
  $fReadNumber_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Number
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ InflectionData.Number
                   InflectionData.$fReadNumber_$creadPrec
                   eta) -}
cbc274f5b3d6239101cd9764b7773be5
  $fReadPerson :: GHC.Read.Read InflectionData.Person
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Person
                  InflectionData.$fReadPerson_$s$dmreadsPrec
                  InflectionData.$fReadPerson2
                  InflectionData.$fReadPerson_$creadPrec
                  InflectionData.$fReadPerson_$creadListPrec -}
cbc274f5b3d6239101cd9764b7773be5
  $fReadPerson1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Person] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.Person]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.Person
                   InflectionData.$fReadManifest77
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Person>_R))
                   @ b
                   eta1) -}
cbc274f5b3d6239101cd9764b7773be5
  $fReadPerson2 ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Person]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Person]
                   InflectionData.$fReadPerson3) -}
cbc274f5b3d6239101cd9764b7773be5
  $fReadPerson3 ::
    Text.ParserCombinators.ReadP.P [InflectionData.Person]
  {- Unfolding: (GHC.Read.$wa
                   @ InflectionData.Person
                   InflectionData.$fReadManifest77
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Person>_R))
                   @ [InflectionData.Person]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                      @ [InflectionData.Person])) -}
cbc274f5b3d6239101cd9764b7773be5
  $fReadPerson_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [InflectionData.Person]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadPerson1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.Person]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.Person]>_R))) -}
cbc274f5b3d6239101cd9764b7773be5
  $fReadPerson_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadManifest77
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.Person>_R)) -}
cbc274f5b3d6239101cd9764b7773be5
  $fReadPerson_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Person
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ InflectionData.Person
                   InflectionData.$fReadPerson_$creadPrec
                   eta) -}
961c5eb0bc4c139961b0a440a23b769f
  $fReadPolarity :: GHC.Read.Read InflectionData.Polarity
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Polarity
                  InflectionData.$fReadPolarity_$s$dmreadsPrec
                  InflectionData.$fReadPolarity2
                  InflectionData.$fReadPolarity_$creadPrec
                  InflectionData.$fReadPolarity_$creadListPrec -}
961c5eb0bc4c139961b0a440a23b769f
  $fReadPolarity1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Polarity] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.Polarity]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.Polarity
                   InflectionData.$fReadManifest115
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Polarity>_R))
                   @ b
                   eta1) -}
961c5eb0bc4c139961b0a440a23b769f
  $fReadPolarity2 ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Polarity]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Polarity]
                   InflectionData.$fReadPolarity3) -}
961c5eb0bc4c139961b0a440a23b769f
  $fReadPolarity3 ::
    Text.ParserCombinators.ReadP.P [InflectionData.Polarity]
  {- Unfolding: (GHC.Read.$wa
                   @ InflectionData.Polarity
                   InflectionData.$fReadManifest115
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Polarity>_R))
                   @ [InflectionData.Polarity]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                      @ [InflectionData.Polarity])) -}
961c5eb0bc4c139961b0a440a23b769f
  $fReadPolarity_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [InflectionData.Polarity]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadPolarity1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.Polarity]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.Polarity]>_R))) -}
961c5eb0bc4c139961b0a440a23b769f
  $fReadPolarity_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Polarity
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadManifest115
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.Polarity>_R)) -}
961c5eb0bc4c139961b0a440a23b769f
  $fReadPolarity_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Polarity
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ InflectionData.Polarity
                   InflectionData.$fReadPolarity_$creadPrec
                   eta) -}
6c3fc67424127bb4feb2d92b23a30da0
  $fReadSpecificity :: GHC.Read.Read InflectionData.Specificity
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Specificity
                  InflectionData.$fReadSpecificity_$s$dmreadsPrec
                  InflectionData.$fReadSpecificity2
                  InflectionData.$fReadSpecificity_$creadPrec
                  InflectionData.$fReadSpecificity_$creadListPrec -}
6c3fc67424127bb4feb2d92b23a30da0
  $fReadSpecificity1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Specificity] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.Specificity]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.Specificity
                   InflectionData.$fReadManifest45
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Specificity>_R))
                   @ b
                   eta1) -}
6c3fc67424127bb4feb2d92b23a30da0
  $fReadSpecificity2 ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Specificity]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Specificity]
                   InflectionData.$fReadSpecificity3) -}
6c3fc67424127bb4feb2d92b23a30da0
  $fReadSpecificity3 ::
    Text.ParserCombinators.ReadP.P [InflectionData.Specificity]
  {- Unfolding: (GHC.Read.$wa
                   @ InflectionData.Specificity
                   InflectionData.$fReadManifest45
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Specificity>_R))
                   @ [InflectionData.Specificity]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                      @ [InflectionData.Specificity])) -}
6c3fc67424127bb4feb2d92b23a30da0
  $fReadSpecificity_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [InflectionData.Specificity]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadSpecificity1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.Specificity]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.Specificity]>_R))) -}
6c3fc67424127bb4feb2d92b23a30da0
  $fReadSpecificity_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Specificity
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadManifest45
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.Specificity>_R)) -}
6c3fc67424127bb4feb2d92b23a30da0
  $fReadSpecificity_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Specificity
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ InflectionData.Specificity
                   InflectionData.$fReadSpecificity_$creadPrec
                   eta) -}
5f476bea2da27cbe0ffe1e5cde3d9551
  $fReadTense :: GHC.Read.Read InflectionData.Tense
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Tense
                  InflectionData.$fReadTense_$s$dmreadsPrec
                  InflectionData.$fReadTense2
                  InflectionData.$fReadTense_$creadPrec
                  InflectionData.$fReadTense_$creadListPrec -}
5f476bea2da27cbe0ffe1e5cde3d9551
  $fReadTense1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Tense] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.Tense]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.Tense
                   InflectionData.$fReadManifest131
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Tense>_R))
                   @ b
                   eta1) -}
5f476bea2da27cbe0ffe1e5cde3d9551
  $fReadTense2 ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Tense]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Tense]
                   InflectionData.$fReadTense3) -}
5f476bea2da27cbe0ffe1e5cde3d9551
  $fReadTense3 ::
    Text.ParserCombinators.ReadP.P [InflectionData.Tense]
  {- Unfolding: (GHC.Read.$wa
                   @ InflectionData.Tense
                   InflectionData.$fReadManifest131
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Tense>_R))
                   @ [InflectionData.Tense]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                      @ [InflectionData.Tense])) -}
5f476bea2da27cbe0ffe1e5cde3d9551
  $fReadTense_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [InflectionData.Tense]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadTense1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.Tense]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.Tense]>_R))) -}
5f476bea2da27cbe0ffe1e5cde3d9551
  $fReadTense_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadManifest131
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.Tense>_R)) -}
5f476bea2da27cbe0ffe1e5cde3d9551
  $fReadTense_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Tense
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ InflectionData.Tense
                   InflectionData.$fReadTense_$creadPrec
                   eta) -}
f2502f7485a2c7bc47bb080f20b26aeb
  $fReadTopic :: GHC.Read.Read InflectionData.Topic
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Topic
                  InflectionData.$fReadTopic_$s$dmreadsPrec
                  InflectionData.$fReadTopic2
                  InflectionData.$fReadTopic_$creadPrec
                  InflectionData.$fReadTopic_$creadListPrec -}
f2502f7485a2c7bc47bb080f20b26aeb
  $fReadTopic1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Topic] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.Topic]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.Topic
                   InflectionData.$fReadManifest61
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Topic>_R))
                   @ b
                   eta1) -}
f2502f7485a2c7bc47bb080f20b26aeb
  $fReadTopic2 ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Topic]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Topic]
                   InflectionData.$fReadTopic3) -}
f2502f7485a2c7bc47bb080f20b26aeb
  $fReadTopic3 ::
    Text.ParserCombinators.ReadP.P [InflectionData.Topic]
  {- Unfolding: (GHC.Read.$wa
                   @ InflectionData.Topic
                   InflectionData.$fReadManifest61
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Topic>_R))
                   @ [InflectionData.Topic]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                      @ [InflectionData.Topic])) -}
f2502f7485a2c7bc47bb080f20b26aeb
  $fReadTopic_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [InflectionData.Topic]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadTopic1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.Topic]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.Topic]>_R))) -}
f2502f7485a2c7bc47bb080f20b26aeb
  $fReadTopic_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Topic
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadManifest61
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.Topic>_R)) -}
f2502f7485a2c7bc47bb080f20b26aeb
  $fReadTopic_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Topic
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ InflectionData.Topic
                   InflectionData.$fReadTopic_$creadPrec
                   eta) -}
8463dae3116062b076dc25e0f6b8c749
  $fReadTransitivity :: GHC.Read.Read InflectionData.Transitivity
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Transitivity
                  InflectionData.$fReadTransitivity_$s$dmreadsPrec
                  InflectionData.$fReadTransitivity2
                  InflectionData.$fReadTransitivity_$creadPrec
                  InflectionData.$fReadTransitivity_$creadListPrec -}
8463dae3116062b076dc25e0f6b8c749
  $fReadTransitivity1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Transitivity] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.Transitivity]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.Transitivity
                   InflectionData.$fReadManifest283
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Transitivity>_R))
                   @ b
                   eta1) -}
8463dae3116062b076dc25e0f6b8c749
  $fReadTransitivity2 ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Transitivity]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Transitivity]
                   InflectionData.$fReadTransitivity3) -}
8463dae3116062b076dc25e0f6b8c749
  $fReadTransitivity3 ::
    Text.ParserCombinators.ReadP.P [InflectionData.Transitivity]
  {- Unfolding: (GHC.Read.$wa
                   @ InflectionData.Transitivity
                   InflectionData.$fReadManifest283
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Transitivity>_R))
                   @ [InflectionData.Transitivity]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                      @ [InflectionData.Transitivity])) -}
8463dae3116062b076dc25e0f6b8c749
  $fReadTransitivity_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [InflectionData.Transitivity]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadTransitivity1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.Transitivity]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.Transitivity]>_R))) -}
8463dae3116062b076dc25e0f6b8c749
  $fReadTransitivity_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      InflectionData.Transitivity
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadManifest283
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.Transitivity>_R)) -}
8463dae3116062b076dc25e0f6b8c749
  $fReadTransitivity_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Transitivity
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ InflectionData.Transitivity
                   InflectionData.$fReadTransitivity_$creadPrec
                   eta) -}
66f849eb0df273279725c8472ced02cc
  $fReadVoice :: GHC.Read.Read InflectionData.Voice
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Voice
                  InflectionData.$fReadVoice_$s$dmreadsPrec
                  InflectionData.$fReadVoice2
                  InflectionData.$fReadVoice_$creadPrec
                  InflectionData.$fReadVoice_$creadListPrec -}
66f849eb0df273279725c8472ced02cc
  $fReadVoice1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Voice] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.Voice]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.Voice
                   InflectionData.$fReadManifest261
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Voice>_R))
                   @ b
                   eta1) -}
66f849eb0df273279725c8472ced02cc
  $fReadVoice2 ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Voice]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Voice]
                   InflectionData.$fReadVoice3) -}
66f849eb0df273279725c8472ced02cc
  $fReadVoice3 ::
    Text.ParserCombinators.ReadP.P [InflectionData.Voice]
  {- Unfolding: (GHC.Read.$wa
                   @ InflectionData.Voice
                   InflectionData.$fReadManifest261
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Voice>_R))
                   @ [InflectionData.Voice]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                      @ [InflectionData.Voice])) -}
66f849eb0df273279725c8472ced02cc
  $fReadVoice_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [InflectionData.Voice]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadVoice1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.Voice]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.Voice]>_R))) -}
66f849eb0df273279725c8472ced02cc
  $fReadVoice_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Voice
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadManifest261
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.Voice>_R)) -}
66f849eb0df273279725c8472ced02cc
  $fReadVoice_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Voice
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ InflectionData.Voice
                   InflectionData.$fReadVoice_$creadPrec
                   eta) -}
3a73fa2d976f240c7ba768b809a25328
  $fReadVolition :: GHC.Read.Read InflectionData.Volition
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Volition
                  InflectionData.$fReadVolition_$s$dmreadsPrec
                  InflectionData.$fReadVolition2
                  InflectionData.$fReadVolition_$creadPrec
                  InflectionData.$fReadVolition_$creadListPrec -}
3a73fa2d976f240c7ba768b809a25328
  $fReadVolition1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Volition] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.Volition]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.Volition
                   InflectionData.$fReadManifest307
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Volition>_R))
                   @ b
                   eta1) -}
3a73fa2d976f240c7ba768b809a25328
  $fReadVolition2 ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Volition]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Volition]
                   InflectionData.$fReadVolition3) -}
3a73fa2d976f240c7ba768b809a25328
  $fReadVolition3 ::
    Text.ParserCombinators.ReadP.P [InflectionData.Volition]
  {- Unfolding: (GHC.Read.$wa
                   @ InflectionData.Volition
                   InflectionData.$fReadManifest307
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Volition>_R))
                   @ [InflectionData.Volition]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                      @ [InflectionData.Volition])) -}
3a73fa2d976f240c7ba768b809a25328
  $fReadVolition_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [InflectionData.Volition]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadVolition1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.Volition]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.Volition]>_R))) -}
3a73fa2d976f240c7ba768b809a25328
  $fReadVolition_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Volition
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadManifest307
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.Volition>_R)) -}
3a73fa2d976f240c7ba768b809a25328
  $fReadVolition_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Volition
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ InflectionData.Volition
                   InflectionData.$fReadVolition_$creadPrec
                   eta) -}
9447f153f46425b5e59b978eb1af0b89
  $fShow(,,,,,,,,,,,,,,,,) ::
    (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
     GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
     GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
     GHC.Show.Show l, GHC.Show.Show m, GHC.Show.Show n, GHC.Show.Show o,
     GHC.Show.Show p, GHC.Show.Show q) =>
    GHC.Show.Show (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)
  DFunId[0]
  {- Arity: 17,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a41
                      @ b
                      @ c
                      @ d
                      @ e
                      @ f
                      @ g
                      @ h
                      @ i
                      @ j
                      @ k
                      @ l
                      @ m
                      @ n
                      @ o
                      @ p
                      @ q
                      $dShow :: GHC.Show.Show a41
                      $dShow1 :: GHC.Show.Show b
                      $dShow2 :: GHC.Show.Show c
                      $dShow3 :: GHC.Show.Show d
                      $dShow4 :: GHC.Show.Show e
                      $dShow5 :: GHC.Show.Show f
                      $dShow6 :: GHC.Show.Show g
                      $dShow7 :: GHC.Show.Show h
                      $dShow8 :: GHC.Show.Show i
                      $dShow9 :: GHC.Show.Show j
                      $dShow10 :: GHC.Show.Show k
                      $dShow11 :: GHC.Show.Show l
                      $dShow12 :: GHC.Show.Show m
                      $dShow13 :: GHC.Show.Show n
                      $dShow14 :: GHC.Show.Show o
                      $dShow15 :: GHC.Show.Show p
                      $dShow16 :: GHC.Show.Show q.
                  @ (a41, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)
                  (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec
                     @ a41
                     @ b
                     @ c
                     @ d
                     @ e
                     @ f
                     @ g
                     @ h
                     @ i
                     @ j
                     @ k
                     @ l
                     @ m
                     @ n
                     @ o
                     @ p
                     @ q
                     $dShow
                     $dShow1
                     $dShow2
                     $dShow3
                     $dShow4
                     $dShow5
                     $dShow6
                     $dShow7
                     $dShow8
                     $dShow9
                     $dShow10
                     $dShow11
                     $dShow12
                     $dShow13
                     $dShow14
                     $dShow15
                     $dShow16)
                  (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$cshow
                     @ a41
                     @ b
                     @ c
                     @ d
                     @ e
                     @ f
                     @ g
                     @ h
                     @ i
                     @ j
                     @ k
                     @ l
                     @ m
                     @ n
                     @ o
                     @ p
                     @ q
                     $dShow
                     $dShow1
                     $dShow2
                     $dShow3
                     $dShow4
                     $dShow5
                     $dShow6
                     $dShow7
                     $dShow8
                     $dShow9
                     $dShow10
                     $dShow11
                     $dShow12
                     $dShow13
                     $dShow14
                     $dShow15
                     $dShow16)
                  (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$cshowList
                     @ a41
                     @ b
                     @ c
                     @ d
                     @ e
                     @ f
                     @ g
                     @ h
                     @ i
                     @ j
                     @ k
                     @ l
                     @ m
                     @ n
                     @ o
                     @ p
                     @ q
                     $dShow
                     $dShow1
                     $dShow2
                     $dShow3
                     $dShow4
                     $dShow5
                     $dShow6
                     $dShow7
                     $dShow8
                     $dShow9
                     $dShow10
                     $dShow11
                     $dShow12
                     $dShow13
                     $dShow14
                     $dShow15
                     $dShow16) -}
eb9148866a7208c140142cf9c7adb474
  $fShow(,,,,,,,,,,,,,,,,)1 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# ')') -}
85dabc27d66961b6f2c345591472a4d4
  $fShow(,,,,,,,,,,,,,,,,)2 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '(') -}
964c5a2cb056c4134a489ee8b31607b1
  $fShow(,,,,,,,,,,,,,,,,)3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "}"#) -}
affb475a23e321f372bda08015a7dd1d
  $fShow(,,,,,,,,,,,,,,,,)4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "getExp = "#) -}
86a4486267306d2b14c19887d771db04
  $fShow(,,,,,,,,,,,,,,,,)5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Express {"#) -}
1d3cfc51e73af7f503c4a2deb9d0cb76
  $fShow(,,,,,,,,,,,,,,,,)6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NoExpress"#) -}
b55114d8a829cc48a937388b949efca3
  $fShow(,,,,,,,,,,,,,,,,)_$cshow ::
    (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
     GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
     GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
     GHC.Show.Show l, GHC.Show.Show m, GHC.Show.Show n, GHC.Show.Show o,
     GHC.Show.Show p, GHC.Show.Show q) =>
    (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)
    -> GHC.Base.String
  {- Arity: 18,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Unfolding: InlineRule (18, True, False)
                (\ @ a41
                   @ b
                   @ c
                   @ d
                   @ e
                   @ f
                   @ g
                   @ h
                   @ i
                   @ j
                   @ k
                   @ l
                   @ m
                   @ n
                   @ o
                   @ p
                   @ q
                   $dShow :: GHC.Show.Show a41
                   $dShow1 :: GHC.Show.Show b
                   $dShow2 :: GHC.Show.Show c
                   $dShow3 :: GHC.Show.Show d
                   $dShow4 :: GHC.Show.Show e
                   $dShow5 :: GHC.Show.Show f
                   $dShow6 :: GHC.Show.Show g
                   $dShow7 :: GHC.Show.Show h
                   $dShow8 :: GHC.Show.Show i
                   $dShow9 :: GHC.Show.Show j
                   $dShow10 :: GHC.Show.Show k
                   $dShow11 :: GHC.Show.Show l
                   $dShow12 :: GHC.Show.Show m
                   $dShow13 :: GHC.Show.Show n
                   $dShow14 :: GHC.Show.Show o
                   $dShow15 :: GHC.Show.Show p
                   $dShow16 :: GHC.Show.Show q
                   x :: (a41, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) ->
                 InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec
                   @ a41
                   @ b
                   @ c
                   @ d
                   @ e
                   @ f
                   @ g
                   @ h
                   @ i
                   @ j
                   @ k
                   @ l
                   @ m
                   @ n
                   @ o
                   @ p
                   @ q
                   $dShow
                   $dShow1
                   $dShow2
                   $dShow3
                   $dShow4
                   $dShow5
                   $dShow6
                   $dShow7
                   $dShow8
                   $dShow9
                   $dShow10
                   $dShow11
                   $dShow12
                   $dShow13
                   $dShow14
                   $dShow15
                   $dShow16
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
4459d56fde0bfeb74eb0895170c17c9a
  $fShow(,,,,,,,,,,,,,,,,)_$cshowList ::
    (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
     GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
     GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
     GHC.Show.Show l, GHC.Show.Show m, GHC.Show.Show n, GHC.Show.Show o,
     GHC.Show.Show p, GHC.Show.Show q) =>
    [(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)]
    -> GHC.Show.ShowS
  {- Arity: 19,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (19, True, False)
                (\ @ a41
                   @ b
                   @ c
                   @ d
                   @ e
                   @ f
                   @ g
                   @ h
                   @ i
                   @ j
                   @ k
                   @ l
                   @ m
                   @ n
                   @ o
                   @ p
                   @ q
                   $dShow :: GHC.Show.Show a41
                   $dShow1 :: GHC.Show.Show b
                   $dShow2 :: GHC.Show.Show c
                   $dShow3 :: GHC.Show.Show d
                   $dShow4 :: GHC.Show.Show e
                   $dShow5 :: GHC.Show.Show f
                   $dShow6 :: GHC.Show.Show g
                   $dShow7 :: GHC.Show.Show h
                   $dShow8 :: GHC.Show.Show i
                   $dShow9 :: GHC.Show.Show j
                   $dShow10 :: GHC.Show.Show k
                   $dShow11 :: GHC.Show.Show l
                   $dShow12 :: GHC.Show.Show m
                   $dShow13 :: GHC.Show.Show n
                   $dShow14 :: GHC.Show.Show o
                   $dShow15 :: GHC.Show.Show p
                   $dShow16 :: GHC.Show.Show q
                   ls :: [(a41, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)]
                   s :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (a41, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)
                   (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec
                      @ a41
                      @ b
                      @ c
                      @ d
                      @ e
                      @ f
                      @ g
                      @ h
                      @ i
                      @ j
                      @ k
                      @ l
                      @ m
                      @ n
                      @ o
                      @ p
                      @ q
                      $dShow
                      $dShow1
                      $dShow2
                      $dShow3
                      $dShow4
                      $dShow5
                      $dShow6
                      $dShow7
                      $dShow8
                      $dShow9
                      $dShow10
                      $dShow11
                      $dShow12
                      $dShow13
                      $dShow14
                      $dShow15
                      $dShow16
                      GHC.Show.shows18)
                   ls
                   s) -}
84b00a922ff9240aab37bc589c9c2339
  $fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec ::
    (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
     GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
     GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
     GHC.Show.Show l, GHC.Show.Show m, GHC.Show.Show n, GHC.Show.Show o,
     GHC.Show.Show p, GHC.Show.Show q) =>
    GHC.Types.Int
    -> (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)
    -> GHC.Show.ShowS
  {- Arity: 19,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,A><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (19, True, False)
                (\ @ a41
                   @ b
                   @ c
                   @ d
                   @ e
                   @ f
                   @ g
                   @ h
                   @ i
                   @ j
                   @ k
                   @ l
                   @ m
                   @ n
                   @ o
                   @ p
                   @ q
                   w :: GHC.Show.Show a41
                   w1 :: GHC.Show.Show b
                   w2 :: GHC.Show.Show c
                   w3 :: GHC.Show.Show d
                   w4 :: GHC.Show.Show e
                   w5 :: GHC.Show.Show f
                   w6 :: GHC.Show.Show g
                   w7 :: GHC.Show.Show h
                   w8 :: GHC.Show.Show i
                   w9 :: GHC.Show.Show j
                   w10 :: GHC.Show.Show k
                   w11 :: GHC.Show.Show l
                   w12 :: GHC.Show.Show m
                   w13 :: GHC.Show.Show n
                   w14 :: GHC.Show.Show o
                   w15 :: GHC.Show.Show p
                   w16 :: GHC.Show.Show q
                   w17 :: GHC.Types.Int
                   w18 :: (a41, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) ->
                 case w18 of ww { (,,,,,,,,,,,,,,,,) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ->
                 InflectionData.$w$cshowsPrec12
                   @ a41
                   @ b
                   @ c
                   @ d
                   @ e
                   @ f
                   @ g
                   @ h
                   @ i
                   @ j
                   @ k
                   @ l
                   @ m
                   @ n
                   @ o
                   @ p
                   @ q
                   w
                   w1
                   w2
                   w3
                   w4
                   w5
                   w6
                   w7
                   w8
                   w9
                   w10
                   w11
                   w12
                   w13
                   w14
                   w15
                   w16
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww17 }) -}
7db1293492fb13d85da0dc5052fba7db
  $fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec1 ::
    GHC.Types.Int
    -> InflectionData.Express InflectionData.Volition -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Express InflectionData.Volition
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoExpress
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fShow(,,,,,,,,,,,,,,,,)6
                        eta
                   InflectionData.Express b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShow(,,,,,,,,,,,,,,,,)5
                            (GHC.Base.++
                               @ GHC.Types.Char
                               InflectionData.$fShow(,,,,,,,,,,,,,,,,)4
                               (case b1 of wild2 {
                                  InflectionData.UVOL
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       InflectionData.$fReadManifest320
                                       (GHC.Base.++
                                          @ GHC.Types.Char
                                          InflectionData.$fShow(,,,,,,,,,,,,,,,,)3
                                          x1)
                                  InflectionData.VOL
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       InflectionData.$fReadManifest317
                                       (GHC.Base.++
                                          @ GHC.Types.Char
                                          InflectionData.$fShow(,,,,,,,,,,,,,,,,)3
                                          x1)
                                  InflectionData.NVOL
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       InflectionData.$fReadManifest314
                                       (GHC.Base.++
                                          @ GHC.Types.Char
                                          InflectionData.$fShow(,,,,,,,,,,,,,,,,)3
                                          x1) }))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
1f6c0fd393e6150548d52f17f4706da8
  $fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec10 ::
    GHC.Types.Int
    -> InflectionData.Express InflectionData.Person -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Express InflectionData.Person
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoExpress
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fShow(,,,,,,,,,,,,,,,,)6
                        eta
                   InflectionData.Express b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShow(,,,,,,,,,,,,,,,,)5
                            (GHC.Base.++
                               @ GHC.Types.Char
                               InflectionData.$fShow(,,,,,,,,,,,,,,,,)4
                               (InflectionData.$w$cshowsPrec7
                                  b1
                                  (GHC.Base.++
                                     @ GHC.Types.Char
                                     InflectionData.$fShow(,,,,,,,,,,,,,,,,)3
                                     x1)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
c7d4a4cca6b569658d2a517da4149467
  $fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec11 ::
    GHC.Types.Int
    -> InflectionData.Express InflectionData.Topic -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Express InflectionData.Topic
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoExpress
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fShow(,,,,,,,,,,,,,,,,)6
                        eta
                   InflectionData.Express b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShow(,,,,,,,,,,,,,,,,)5
                            (GHC.Base.++
                               @ GHC.Types.Char
                               InflectionData.$fShow(,,,,,,,,,,,,,,,,)4
                               (case b1 of wild2 {
                                  InflectionData.UTOP
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       InflectionData.$fReadManifest74
                                       (GHC.Base.++
                                          @ GHC.Types.Char
                                          InflectionData.$fShow(,,,,,,,,,,,,,,,,)3
                                          x1)
                                  InflectionData.TOP
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       InflectionData.$fReadManifest71
                                       (GHC.Base.++
                                          @ GHC.Types.Char
                                          InflectionData.$fShow(,,,,,,,,,,,,,,,,)3
                                          x1)
                                  InflectionData.NTOP
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       InflectionData.$fReadManifest68
                                       (GHC.Base.++
                                          @ GHC.Types.Char
                                          InflectionData.$fShow(,,,,,,,,,,,,,,,,)3
                                          x1) }))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
0f0009df34e6826a073713aec33feab0
  $fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec12 ::
    GHC.Types.Int
    -> InflectionData.Express InflectionData.Specificity
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Express InflectionData.Specificity
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoExpress
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fShow(,,,,,,,,,,,,,,,,)6
                        eta
                   InflectionData.Express b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShow(,,,,,,,,,,,,,,,,)5
                            (GHC.Base.++
                               @ GHC.Types.Char
                               InflectionData.$fShow(,,,,,,,,,,,,,,,,)4
                               (case b1 of wild2 {
                                  InflectionData.USPE
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       InflectionData.$fReadManifest58
                                       (GHC.Base.++
                                          @ GHC.Types.Char
                                          InflectionData.$fShow(,,,,,,,,,,,,,,,,)3
                                          x1)
                                  InflectionData.SPEC
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       InflectionData.$fReadManifest55
                                       (GHC.Base.++
                                          @ GHC.Types.Char
                                          InflectionData.$fShow(,,,,,,,,,,,,,,,,)3
                                          x1)
                                  InflectionData.NSPEC
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       InflectionData.$fReadManifest52
                                       (GHC.Base.++
                                          @ GHC.Types.Char
                                          InflectionData.$fShow(,,,,,,,,,,,,,,,,)3
                                          x1) }))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
9de004217428585105c209aca669485a
  $fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec13 ::
    GHC.Types.Int
    -> InflectionData.Express InflectionData.Definiteness
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Express InflectionData.Definiteness
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoExpress
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fShow(,,,,,,,,,,,,,,,,)6
                        eta
                   InflectionData.Express b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShow(,,,,,,,,,,,,,,,,)5
                            (GHC.Base.++
                               @ GHC.Types.Char
                               InflectionData.$fShow(,,,,,,,,,,,,,,,,)4
                               (case b1 of wild2 {
                                  InflectionData.UDEF
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       InflectionData.$fReadDefiniteness15
                                       (GHC.Base.++
                                          @ GHC.Types.Char
                                          InflectionData.$fShow(,,,,,,,,,,,,,,,,)3
                                          x1)
                                  InflectionData.DEF
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       InflectionData.$fReadDefiniteness12
                                       (GHC.Base.++
                                          @ GHC.Types.Char
                                          InflectionData.$fShow(,,,,,,,,,,,,,,,,)3
                                          x1)
                                  InflectionData.INDF
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       InflectionData.$fReadDefiniteness9
                                       (GHC.Base.++
                                          @ GHC.Types.Char
                                          InflectionData.$fShow(,,,,,,,,,,,,,,,,)3
                                          x1) }))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
7d705becedc3322705ec2cbc09bed193
  $fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec14 ::
    GHC.Types.Int
    -> InflectionData.Express InflectionData.Number -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Express InflectionData.Number
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoExpress
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fShow(,,,,,,,,,,,,,,,,)6
                        eta
                   InflectionData.Express b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShow(,,,,,,,,,,,,,,,,)5
                            (GHC.Base.++
                               @ GHC.Types.Char
                               InflectionData.$fShow(,,,,,,,,,,,,,,,,)4
                               (InflectionData.$w$cshowsPrec8
                                  b1
                                  (GHC.Base.++
                                     @ GHC.Types.Char
                                     InflectionData.$fShow(,,,,,,,,,,,,,,,,)3
                                     x1)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
b348c4118655b2d825f080e62dcc02ca
  $fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec15 ::
    GHC.Types.Int
    -> InflectionData.Express InflectionData.Case -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Express InflectionData.Case
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoExpress
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fShow(,,,,,,,,,,,,,,,,)6
                        eta
                   InflectionData.Express b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShow(,,,,,,,,,,,,,,,,)5
                            (GHC.Base.++
                               @ GHC.Types.Char
                               InflectionData.$fShow(,,,,,,,,,,,,,,,,)4
                               (InflectionData.$w$cshowsPrec9
                                  b1
                                  (GHC.Base.++
                                     @ GHC.Types.Char
                                     InflectionData.$fShow(,,,,,,,,,,,,,,,,)3
                                     x1)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
e1a681a4de726bc5186683c6148dccf6
  $fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec16 ::
    GHC.Types.Int
    -> InflectionData.Express InflectionData.Animacy -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Express InflectionData.Animacy
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoExpress
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fShow(,,,,,,,,,,,,,,,,)6
                        eta
                   InflectionData.Express b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShow(,,,,,,,,,,,,,,,,)5
                            (GHC.Base.++
                               @ GHC.Types.Char
                               InflectionData.$fShow(,,,,,,,,,,,,,,,,)4
                               (InflectionData.$w$cshowsPrec10
                                  b1
                                  (GHC.Base.++
                                     @ GHC.Types.Char
                                     InflectionData.$fShow(,,,,,,,,,,,,,,,,)3
                                     x1)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
255e3cd3653c16674c51a841fde0359e
  $fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec17 ::
    GHC.Types.Int
    -> InflectionData.Express InflectionData.Gender -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Express InflectionData.Gender
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoExpress
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fShow(,,,,,,,,,,,,,,,,)6
                        eta
                   InflectionData.Express b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShow(,,,,,,,,,,,,,,,,)5
                            (GHC.Base.++
                               @ GHC.Types.Char
                               InflectionData.$fShow(,,,,,,,,,,,,,,,,)4
                               (InflectionData.$w$cshowsPrec11
                                  b1
                                  (GHC.Base.++
                                     @ GHC.Types.Char
                                     InflectionData.$fShow(,,,,,,,,,,,,,,,,)3
                                     x1)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
24457976857bc0fbed9df1aebc0d5198
  $fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec2 ::
    GHC.Types.Int
    -> InflectionData.Express InflectionData.Transitivity
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Express InflectionData.Transitivity
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoExpress
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fShow(,,,,,,,,,,,,,,,,)6
                        eta
                   InflectionData.Express b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShow(,,,,,,,,,,,,,,,,)5
                            (GHC.Base.++
                               @ GHC.Types.Char
                               InflectionData.$fShow(,,,,,,,,,,,,,,,,)4
                               (InflectionData.$w$cshowsPrec
                                  b1
                                  (GHC.Base.++
                                     @ GHC.Types.Char
                                     InflectionData.$fShow(,,,,,,,,,,,,,,,,)3
                                     x1)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
91955cbdaa12ab12c593664df62ae366
  $fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec3 ::
    GHC.Types.Int
    -> InflectionData.Express InflectionData.Evidentiality
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Express InflectionData.Evidentiality
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoExpress
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fShow(,,,,,,,,,,,,,,,,)6
                        eta
                   InflectionData.Express b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShow(,,,,,,,,,,,,,,,,)5
                            (GHC.Base.++
                               @ GHC.Types.Char
                               InflectionData.$fShow(,,,,,,,,,,,,,,,,)4
                               (InflectionData.$w$cshowsPrec1
                                  b1
                                  (GHC.Base.++
                                     @ GHC.Types.Char
                                     InflectionData.$fShow(,,,,,,,,,,,,,,,,)3
                                     x1)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
8f4b9556b3160c6702fc40a6049f1bf4
  $fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec4 ::
    GHC.Types.Int
    -> InflectionData.Express InflectionData.Voice -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Express InflectionData.Voice
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoExpress
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fShow(,,,,,,,,,,,,,,,,)6
                        eta
                   InflectionData.Express b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShow(,,,,,,,,,,,,,,,,)5
                            (GHC.Base.++
                               @ GHC.Types.Char
                               InflectionData.$fShow(,,,,,,,,,,,,,,,,)4
                               (InflectionData.$w$cshowsPrec2
                                  b1
                                  (GHC.Base.++
                                     @ GHC.Types.Char
                                     InflectionData.$fShow(,,,,,,,,,,,,,,,,)3
                                     x1)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
7fd146e7d3ae4130c2451bcc1a3d4499
  $fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec5 ::
    GHC.Types.Int
    -> InflectionData.Express InflectionData.Mood -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Express InflectionData.Mood
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoExpress
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fShow(,,,,,,,,,,,,,,,,)6
                        eta
                   InflectionData.Express b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShow(,,,,,,,,,,,,,,,,)5
                            (GHC.Base.++
                               @ GHC.Types.Char
                               InflectionData.$fShow(,,,,,,,,,,,,,,,,)4
                               (InflectionData.$w$cshowsPrec3
                                  b1
                                  (GHC.Base.++
                                     @ GHC.Types.Char
                                     InflectionData.$fShow(,,,,,,,,,,,,,,,,)3
                                     x1)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
6498f8b8edb1050a354b29499c594279
  $fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec6 ::
    GHC.Types.Int
    -> InflectionData.Express InflectionData.Aspect -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Express InflectionData.Aspect
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoExpress
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fShow(,,,,,,,,,,,,,,,,)6
                        eta
                   InflectionData.Express b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShow(,,,,,,,,,,,,,,,,)5
                            (GHC.Base.++
                               @ GHC.Types.Char
                               InflectionData.$fShow(,,,,,,,,,,,,,,,,)4
                               (InflectionData.$w$cshowsPrec4
                                  b1
                                  (GHC.Base.++
                                     @ GHC.Types.Char
                                     InflectionData.$fShow(,,,,,,,,,,,,,,,,)3
                                     x1)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
b2a5da1a695df9e11468be37dbc6c4d0
  $fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec7 ::
    GHC.Types.Int
    -> InflectionData.Express InflectionData.Tense -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Express InflectionData.Tense
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoExpress
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fShow(,,,,,,,,,,,,,,,,)6
                        eta
                   InflectionData.Express b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShow(,,,,,,,,,,,,,,,,)5
                            (GHC.Base.++
                               @ GHC.Types.Char
                               InflectionData.$fShow(,,,,,,,,,,,,,,,,)4
                               (InflectionData.$w$cshowsPrec5
                                  b1
                                  (GHC.Base.++
                                     @ GHC.Types.Char
                                     InflectionData.$fShow(,,,,,,,,,,,,,,,,)3
                                     x1)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
e6ca079974b43d199f774d7c4cdbf2ca
  $fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec8 ::
    GHC.Types.Int
    -> InflectionData.Express InflectionData.Polarity -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Express InflectionData.Polarity
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoExpress
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fShow(,,,,,,,,,,,,,,,,)6
                        eta
                   InflectionData.Express b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShow(,,,,,,,,,,,,,,,,)5
                            (GHC.Base.++
                               @ GHC.Types.Char
                               InflectionData.$fShow(,,,,,,,,,,,,,,,,)4
                               (case b1 of wild2 {
                                  InflectionData.UPOL
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       InflectionData.$fReadManifest128
                                       (GHC.Base.++
                                          @ GHC.Types.Char
                                          InflectionData.$fShow(,,,,,,,,,,,,,,,,)3
                                          x1)
                                  InflectionData.AFF
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       InflectionData.$fReadManifest125
                                       (GHC.Base.++
                                          @ GHC.Types.Char
                                          InflectionData.$fShow(,,,,,,,,,,,,,,,,)3
                                          x1)
                                  InflectionData.NEG
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       InflectionData.$fReadManifest122
                                       (GHC.Base.++
                                          @ GHC.Types.Char
                                          InflectionData.$fShow(,,,,,,,,,,,,,,,,)3
                                          x1) }))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
2b2856fcfe20032674d89558d142faa0
  $fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec9 ::
    GHC.Types.Int
    -> InflectionData.Express InflectionData.Honorific
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Express InflectionData.Honorific
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoExpress
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fShow(,,,,,,,,,,,,,,,,)6
                        eta
                   InflectionData.Express b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShow(,,,,,,,,,,,,,,,,)5
                            (GHC.Base.++
                               @ GHC.Types.Char
                               InflectionData.$fShow(,,,,,,,,,,,,,,,,)4
                               (InflectionData.$w$cshowsPrec6
                                  b1
                                  (GHC.Base.++
                                     @ GHC.Types.Char
                                     InflectionData.$fShow(,,,,,,,,,,,,,,,,)3
                                     x1)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
8301f6a93092ff3873c86d1ecce7e0cd
  $fShow(,,,,,,,,,,,,,,,,)_go ::
    [GHC.Base.String -> GHC.Base.String]
    -> GHC.Base.String -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U> -}
91fb0b41f9ef14c662c70b3629b6b5fe
  $fShowAnimacy :: GHC.Show.Show InflectionData.Animacy
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Animacy
                  InflectionData.$fShowAnimacy_$cshowsPrec
                  InflectionData.$fShowAnimacy_$cshow
                  InflectionData.$fShowAnimacy_$cshowList -}
91fb0b41f9ef14c662c70b3629b6b5fe
  $fShowAnimacy_$cshow :: InflectionData.Animacy -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.Animacy ->
                 InflectionData.$fShowAnimacy_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
91fb0b41f9ef14c662c70b3629b6b5fe
  $fShowAnimacy_$cshowList ::
    [InflectionData.Animacy] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Animacy
                   InflectionData.$w$cshowsPrec10) -}
91fb0b41f9ef14c662c70b3629b6b5fe
  $fShowAnimacy_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Animacy -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: InflectionData.Animacy
                   w2 :: GHC.Base.String ->
                 InflectionData.$w$cshowsPrec10 w1 w2) -}
8bbea98a3b619c1fafa2f31c2f747273
  $fShowAspect :: GHC.Show.Show InflectionData.Aspect
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Aspect
                  InflectionData.$fShowAspect_$cshowsPrec
                  InflectionData.$fShowAspect_$cshow
                  InflectionData.$fShowAspect_$cshowList -}
8bbea98a3b619c1fafa2f31c2f747273
  $fShowAspect_$cshow :: InflectionData.Aspect -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.Aspect ->
                 InflectionData.$fShowAspect_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
8bbea98a3b619c1fafa2f31c2f747273
  $fShowAspect_$cshowList ::
    [InflectionData.Aspect] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Aspect
                   InflectionData.$w$cshowsPrec4) -}
8bbea98a3b619c1fafa2f31c2f747273
  $fShowAspect_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Aspect -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: InflectionData.Aspect
                   w2 :: GHC.Base.String ->
                 InflectionData.$w$cshowsPrec4 w1 w2) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fShowCase :: GHC.Show.Show InflectionData.Case
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Case
                  InflectionData.$fShowCase_$cshowsPrec
                  InflectionData.$fShowCase_$cshow
                  InflectionData.$fShowCase_$cshowList -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fShowCase_$cshow :: InflectionData.Case -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.Case ->
                 InflectionData.$fShowCase_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fShowCase_$cshowList :: [InflectionData.Case] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Case
                   InflectionData.$w$cshowsPrec9) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $fShowCase_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Case -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: InflectionData.Case
                   w2 :: GHC.Base.String ->
                 InflectionData.$w$cshowsPrec9 w1 w2) -}
69e12afea565be2617200bf9671a6c0d
  $fShowDefiniteness :: GHC.Show.Show InflectionData.Definiteness
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Definiteness
                  InflectionData.$fShowDefiniteness_$cshowsPrec
                  InflectionData.$fShowDefiniteness_$cshow
                  InflectionData.$fShowDefiniteness_$cshowList -}
69e12afea565be2617200bf9671a6c0d
  $fShowDefiniteness_$cshow ::
    InflectionData.Definiteness -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.Definiteness ->
                 case x of wild {
                   InflectionData.UDEF -> InflectionData.$fReadDefiniteness15
                   InflectionData.DEF -> InflectionData.$fReadDefiniteness12
                   InflectionData.INDF -> InflectionData.$fReadDefiniteness9 }) -}
69e12afea565be2617200bf9671a6c0d
  $fShowDefiniteness_$cshowList ::
    [InflectionData.Definiteness] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Definiteness
                   InflectionData.$w$cshowsPrec13) -}
69e12afea565be2617200bf9671a6c0d
  $fShowDefiniteness_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Definiteness -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: InflectionData.Definiteness
                   w2 :: GHC.Base.String ->
                 InflectionData.$w$cshowsPrec13 w1 w2) -}
1261593b396b3f8b4367998b51bf6d8a
  $fShowEvidentiality :: GHC.Show.Show InflectionData.Evidentiality
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Evidentiality
                  InflectionData.$fShowEvidentiality_$cshowsPrec
                  InflectionData.$fShowEvidentiality_$cshow
                  InflectionData.$fShowEvidentiality_$cshowList -}
1261593b396b3f8b4367998b51bf6d8a
  $fShowEvidentiality_$cshow ::
    InflectionData.Evidentiality -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.Evidentiality ->
                 InflectionData.$fShowEvidentiality_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
1261593b396b3f8b4367998b51bf6d8a
  $fShowEvidentiality_$cshowList ::
    [InflectionData.Evidentiality] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Evidentiality
                   InflectionData.$w$cshowsPrec1) -}
1261593b396b3f8b4367998b51bf6d8a
  $fShowEvidentiality_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Evidentiality -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: InflectionData.Evidentiality
                   w2 :: GHC.Base.String ->
                 InflectionData.$w$cshowsPrec1 w1 w2) -}
7e958650c7791002a2540390e3aca90e
  $fShowExpress ::
    GHC.Show.Show a => GHC.Show.Show (InflectionData.Express a)
  DFunId[0]
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a41 $dShow :: GHC.Show.Show a41.
                  @ (InflectionData.Express a41)
                  (InflectionData.$fShowExpress_$cshowsPrec @ a41 $dShow)
                  (InflectionData.$fShowExpress_$cshow @ a41 $dShow)
                  (InflectionData.$fShowExpress_$cshowList @ a41 $dShow) -}
9e27ccc8542bddf68a4e2a4b764c205c
  $fShowExpress19 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   InflectionData.$fShow(,,,,,,,,,,,,,,,,)6) -}
d466f4cf05a7cee33a107bba9978758d
  $fShowExpress2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0) -}
7e958650c7791002a2540390e3aca90e
  $fShowExpress_$cshow ::
    GHC.Show.Show a => InflectionData.Express a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(1*C1(C1(C1(U))),A,A)><S,1*U>,
     Unfolding: (\ @ a41
                   $dShow :: GHC.Show.Show a41
                   x :: InflectionData.Express a41 ->
                 case x of wild {
                   InflectionData.NoExpress
                   -> InflectionData.$fShow(,,,,,,,,,,,,,,,,)6
                   InflectionData.Express b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fShow(,,,,,,,,,,,,,,,,)5
                        (GHC.Base.++
                           @ GHC.Types.Char
                           InflectionData.$fShow(,,,,,,,,,,,,,,,,)4
                           (GHC.Show.showsPrec
                              @ a41
                              $dShow
                              InflectionData.$fShowExpress2
                              b1
                              InflectionData.$fShow(,,,,,,,,,,,,,,,,)3)) }) -}
7e958650c7791002a2540390e3aca90e
  $fShowExpress_$cshowList ::
    GHC.Show.Show a => [InflectionData.Express a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a41
                   $dShow :: GHC.Show.Show a41
                   eta :: [InflectionData.Express a41]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (InflectionData.Express a41)
                   (InflectionData.$fShowExpress_$cshowsPrec
                      @ a41
                      $dShow
                      InflectionData.$fShowExpress2)
                   eta
                   eta1) -}
7e958650c7791002a2540390e3aca90e
  $fShowExpress_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int -> InflectionData.Express a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(U)><S,1*U>,
     Unfolding: (\ @ a41
                   $dShow :: GHC.Show.Show a41
                   ds :: GHC.Types.Int
                   ds1 :: InflectionData.Express a41 ->
                 case ds1 of wild {
                   InflectionData.NoExpress -> InflectionData.$fShowExpress19
                   InflectionData.Express b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        f :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.showsPrec @ a41 $dShow InflectionData.$fShowExpress2 b1
                      } in
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ x1 :: GHC.Base.String ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShow(,,,,,,,,,,,,,,,,)5
                            (GHC.Base.++
                               @ GHC.Types.Char
                               InflectionData.$fShow(,,,,,,,,,,,,,,,,)4
                               (f (GHC.Base.++
                                     @ GHC.Types.Char
                                     InflectionData.$fShow(,,,,,,,,,,,,,,,,)3
                                     x1)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p
                        GHC.Types.True
                        -> \ x1 :: GHC.Base.String ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x1)) } } }) -}
e443e52c146978100c75258afee70577
  $fShowGender :: GHC.Show.Show InflectionData.Gender
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Gender
                  InflectionData.$fShowGender_$cshowsPrec
                  InflectionData.$fShowGender_$cshow
                  InflectionData.$fShowGender_$cshowList -}
e443e52c146978100c75258afee70577
  $fShowGender_$cshow :: InflectionData.Gender -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.Gender ->
                 InflectionData.$fShowGender_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
e443e52c146978100c75258afee70577
  $fShowGender_$cshowList ::
    [InflectionData.Gender] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Gender
                   InflectionData.$w$cshowsPrec11) -}
e443e52c146978100c75258afee70577
  $fShowGender_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Gender -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: InflectionData.Gender
                   w2 :: GHC.Base.String ->
                 InflectionData.$w$cshowsPrec11 w1 w2) -}
9f709bf4194f93c1f39907f3dcd0aede
  $fShowHonorific :: GHC.Show.Show InflectionData.Honorific
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Honorific
                  InflectionData.$fShowHonorific_$cshowsPrec
                  InflectionData.$fShowHonorific_$cshow
                  InflectionData.$fShowHonorific_$cshowList -}
9f709bf4194f93c1f39907f3dcd0aede
  $fShowHonorific_$cshow ::
    InflectionData.Honorific -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.Honorific ->
                 InflectionData.$fShowHonorific_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
9f709bf4194f93c1f39907f3dcd0aede
  $fShowHonorific_$cshowList ::
    [InflectionData.Honorific] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Honorific
                   InflectionData.$w$cshowsPrec6) -}
9f709bf4194f93c1f39907f3dcd0aede
  $fShowHonorific_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Honorific -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: InflectionData.Honorific
                   w2 :: GHC.Base.String ->
                 InflectionData.$w$cshowsPrec6 w1 w2) -}
d140bda0afaf2a222d43f8ac1fd40fcf
  $fShowInflectionSystem ::
    GHC.Show.Show InflectionData.InflectionSystem
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.InflectionSystem
                  InflectionData.$fShowInflectionSystem_$cshowsPrec
                  InflectionData.$fShowInflectionSystem_$cshow
                  InflectionData.$fShowInflectionSystem_$cshowList -}
d140bda0afaf2a222d43f8ac1fd40fcf
  $fShowInflectionSystem1 ::
    InflectionData.InflectionSystem -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: InflectionData.InflectionSystem
                   w1 :: GHC.Base.String ->
                 case w of ww { InflectionData.InflectionSystem ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ->
                 InflectionData.$w$cshowsPrec14
                   0
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww17
                   w1 }) -}
d140bda0afaf2a222d43f8ac1fd40fcf
  $fShowInflectionSystem_$cshow ::
    InflectionData.InflectionSystem -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.InflectionSystem ->
                 InflectionData.$fShowInflectionSystem_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
d140bda0afaf2a222d43f8ac1fd40fcf
  $fShowInflectionSystem_$cshowList ::
    [InflectionData.InflectionSystem] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.InflectionSystem
                   InflectionData.$fShowInflectionSystem1) -}
d140bda0afaf2a222d43f8ac1fd40fcf
  $fShowInflectionSystem_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.InflectionSystem -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <S,1*U(U)><S,1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int
                   w1 :: InflectionData.InflectionSystem
                   w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { InflectionData.InflectionSystem ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ->
                 InflectionData.$w$cshowsPrec14
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww17
                   ww18
                   ww19
                   w2 } }) -}
406c10c56e8fc899b6f590771b3372e0
  $fShowLexCat :: GHC.Show.Show InflectionData.LexCat
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.LexCat
                  InflectionData.$fShowLexCat_$cshowsPrec
                  InflectionData.$fShowLexCat_$cshow
                  InflectionData.$fShowLexCat_$cshowList -}
406c10c56e8fc899b6f590771b3372e0
  $fShowLexCat_$cshow :: InflectionData.LexCat -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.LexCat ->
                 InflectionData.$fShowLexCat_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
406c10c56e8fc899b6f590771b3372e0
  $fShowLexCat_$cshowList ::
    [InflectionData.LexCat] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.LexCat
                   InflectionData.$w$cshowsPrec15) -}
406c10c56e8fc899b6f590771b3372e0
  $fShowLexCat_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.LexCat -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: InflectionData.LexCat
                   w2 :: GHC.Base.String ->
                 InflectionData.$w$cshowsPrec15 w1 w2) -}
402c727bb1d5614cf0c6243ee3fa7337
  $fShowManifest ::
    GHC.Show.Show a => GHC.Show.Show (InflectionData.Manifest a)
  DFunId[0]
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a41 $dShow :: GHC.Show.Show a41.
                  @ (InflectionData.Manifest a41)
                  (InflectionData.$fShowManifest_$cshowsPrec @ a41 $dShow)
                  (InflectionData.$fShowManifest_$cshow @ a41 $dShow)
                  (InflectionData.$fShowManifest_$cshowList @ a41 $dShow) -}
e56f426fcde3520723e6d581a811d0f1
  $fShowManifest1 ::
    (InflectionData.LexCat, InflectionData.ManifestType, GHC.Types.Int)
    -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ w4 :: (InflectionData.LexCat,
                          InflectionData.ManifestType,
                          GHC.Types.Int)
                   w5 :: GHC.Base.String[OneShot] ->
                 case w4 of ww { (,,) ww1 ww2 ww3 ->
                 GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows9
                   (InflectionData.$w$cshowsPrec15
                      ww1
                      (GHC.Types.:
                         @ GHC.Types.Char
                         GHC.Show.showList__1
                         (GHC.Show.$fShow(,,)_$sgo
                            (\ w :: GHC.Base.String -> InflectionData.$w$cshowsPrec16 ww2 w)
                            (GHC.Types.:
                               @ GHC.Show.ShowS
                               (\ w2 :: GHC.Base.String ->
                                case ww3 of ww4 { GHC.Types.I# ww5 ->
                                case GHC.Show.$wshowSignedInt 0 ww5 w2 of ww6 { (#,#) ww7 ww8 ->
                                GHC.Types.: @ GHC.Types.Char ww7 ww8 } })
                               (GHC.Types.[] @ GHC.Show.ShowS))
                            (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w5)))) }) -}
6da335ccf0fbfd7d4f9690037ed0b247
  $fShowManifest2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Manifest "#) -}
d85bde52a4877cb7fef333f2e07e15c3
  $fShowManifest3 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   InflectionData.$fReadManifest6) -}
d00ca9fc0955f2d18fcf424b683d5934
  $fShowManifestSystem :: GHC.Show.Show InflectionData.ManifestSystem
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.ManifestSystem
                  InflectionData.$fShowManifestSystem_$cshowsPrec
                  InflectionData.$fShowManifestSystem_$cshow
                  InflectionData.$fShowManifestSystem_$cshowList -}
d00ca9fc0955f2d18fcf424b683d5934
  $fShowManifestSystem1 ::
    InflectionData.ManifestSystem -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: InflectionData.ManifestSystem
                   w1 :: GHC.Base.String ->
                 case w of ww { InflectionData.ManifestSystem ww1 ww2 ww3 ->
                 InflectionData.$w$cshowsPrec21 0 ww1 ww2 ww3 w1 }) -}
d00ca9fc0955f2d18fcf424b683d5934
  $fShowManifestSystem_$cshow ::
    InflectionData.ManifestSystem -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.ManifestSystem ->
                 InflectionData.$fShowManifestSystem_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
d00ca9fc0955f2d18fcf424b683d5934
  $fShowManifestSystem_$cshowList ::
    [InflectionData.ManifestSystem] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.ManifestSystem
                   InflectionData.$fShowManifestSystem1) -}
d00ca9fc0955f2d18fcf424b683d5934
  $fShowManifestSystem_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.ManifestSystem -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S,1*U(1*U,1*U,1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int
                   w1 :: InflectionData.ManifestSystem
                   w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { InflectionData.ManifestSystem ww3 ww4 ww5 ->
                 InflectionData.$w$cshowsPrec21 ww1 ww3 ww4 ww5 w2 } }) -}
339a9cc5bd8d02624186a930ed6d9c71
  $fShowManifestType :: GHC.Show.Show InflectionData.ManifestType
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.ManifestType
                  InflectionData.$fShowManifestType_$cshowsPrec
                  InflectionData.$fShowManifestType_$cshow
                  InflectionData.$fShowManifestType_$cshowList -}
339a9cc5bd8d02624186a930ed6d9c71
  $fShowManifestType_$cshow ::
    InflectionData.ManifestType -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.ManifestType ->
                 case x of wild {
                   InflectionData.Particle -> InflectionData.$fReadManifestType15
                   InflectionData.Prefix -> InflectionData.$fReadManifestType12
                   InflectionData.Suffix -> InflectionData.$fReadManifestType9 }) -}
339a9cc5bd8d02624186a930ed6d9c71
  $fShowManifestType_$cshowList ::
    [InflectionData.ManifestType] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.ManifestType
                   InflectionData.$w$cshowsPrec16) -}
339a9cc5bd8d02624186a930ed6d9c71
  $fShowManifestType_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.ManifestType -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: InflectionData.ManifestType
                   w2 :: GHC.Base.String ->
                 InflectionData.$w$cshowsPrec16 w1 w2) -}
402c727bb1d5614cf0c6243ee3fa7337
  $fShowManifest_$cshow ::
    GHC.Show.Show a => InflectionData.Manifest a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(1*C1(C1(C1(U))),A,A)><S,1*U>,
     Unfolding: (\ @ a41
                   $dShow :: GHC.Show.Show a41
                   x :: InflectionData.Manifest a41 ->
                 case x of wild {
                   InflectionData.NoManifest -> InflectionData.$fReadManifest6
                   InflectionData.Manifest b1 b2
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fShowManifest2
                        (GHC.Show.showList__
                           @ (InflectionData.LexCat,
                              InflectionData.ManifestType,
                              GHC.Types.Int)
                           InflectionData.$fShowManifest1
                           b1
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.showSpace1
                              (GHC.Show.showsPrec
                                 @ a41
                                 $dShow
                                 InflectionData.$fReadManifest4
                                 b2
                                 (GHC.Types.[] @ GHC.Types.Char)))) }) -}
402c727bb1d5614cf0c6243ee3fa7337
  $fShowManifest_$cshowList ::
    GHC.Show.Show a => [InflectionData.Manifest a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a41
                   $dShow :: GHC.Show.Show a41
                   eta :: [InflectionData.Manifest a41]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (InflectionData.Manifest a41)
                   (InflectionData.$fShowManifest_$cshowsPrec
                      @ a41
                      $dShow
                      InflectionData.$fShowExpress2)
                   eta
                   eta1) -}
402c727bb1d5614cf0c6243ee3fa7337
  $fShowManifest_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int -> InflectionData.Manifest a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(U)><S,1*U>,
     Unfolding: (\ @ a41
                   $dShow :: GHC.Show.Show a41
                   ds :: GHC.Types.Int
                   ds1 :: InflectionData.Manifest a41 ->
                 case ds1 of wild {
                   InflectionData.NoManifest -> InflectionData.$fShowManifest3
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.showsPrec @ a41 $dShow InflectionData.$fReadManifest4 b2
                      } in
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ x1 :: GHC.Base.String ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShowManifest2
                            (GHC.Show.showList__
                               @ (InflectionData.LexCat,
                                  InflectionData.ManifestType,
                                  GHC.Types.Int)
                               InflectionData.$fShowManifest1
                               b1
                               (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x1)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p
                        GHC.Types.True
                        -> \ x1 :: GHC.Base.String ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x1)) } } }) -}
7ac5d8caf0e7500c5a8cc1a53b816323
  $fShowManifest_$s$cshowsPrec ::
    GHC.Types.Int
    -> InflectionData.Manifest [InflectionData.Gender]
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Manifest [InflectionData.Gender]
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest6 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShowManifest2
                            (GHC.Show.showList__
                               @ (InflectionData.LexCat,
                                  InflectionData.ManifestType,
                                  GHC.Types.Int)
                               InflectionData.$fShowManifest1
                               b1
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (GHC.Show.showList__
                                     @ InflectionData.Gender
                                     InflectionData.$w$cshowsPrec11
                                     b2
                                     x1)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
cfb3b0765c370862150a5be468b8271c
  $fShowManifest_$s$cshowsPrec1 ::
    GHC.Types.Int
    -> InflectionData.Manifest [InflectionData.Animacy]
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Manifest [InflectionData.Animacy]
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest6 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShowManifest2
                            (GHC.Show.showList__
                               @ (InflectionData.LexCat,
                                  InflectionData.ManifestType,
                                  GHC.Types.Int)
                               InflectionData.$fShowManifest1
                               b1
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (GHC.Show.showList__
                                     @ InflectionData.Animacy
                                     InflectionData.$w$cshowsPrec10
                                     b2
                                     x1)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
023743b3f72a447bd225e2f0c4565f31
  $fShowManifest_$s$cshowsPrec10 ::
    GHC.Types.Int
    -> InflectionData.Manifest [InflectionData.Tense] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Manifest [InflectionData.Tense]
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest6 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShowManifest2
                            (GHC.Show.showList__
                               @ (InflectionData.LexCat,
                                  InflectionData.ManifestType,
                                  GHC.Types.Int)
                               InflectionData.$fShowManifest1
                               b1
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (GHC.Show.showList__
                                     @ InflectionData.Tense
                                     InflectionData.$w$cshowsPrec5
                                     b2
                                     x1)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
4c323f0cddb0b21750838d8d3366dfb4
  $fShowManifest_$s$cshowsPrec11 ::
    GHC.Types.Int
    -> InflectionData.Manifest [InflectionData.Aspect]
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Manifest [InflectionData.Aspect]
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest6 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShowManifest2
                            (GHC.Show.showList__
                               @ (InflectionData.LexCat,
                                  InflectionData.ManifestType,
                                  GHC.Types.Int)
                               InflectionData.$fShowManifest1
                               b1
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (GHC.Show.showList__
                                     @ InflectionData.Aspect
                                     InflectionData.$w$cshowsPrec4
                                     b2
                                     x1)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
5672ff2dcb93467d8d4c9c825d41f85b
  $fShowManifest_$s$cshowsPrec12 ::
    GHC.Types.Int
    -> InflectionData.Manifest [InflectionData.Mood] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Manifest [InflectionData.Mood]
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest6 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShowManifest2
                            (GHC.Show.showList__
                               @ (InflectionData.LexCat,
                                  InflectionData.ManifestType,
                                  GHC.Types.Int)
                               InflectionData.$fShowManifest1
                               b1
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (GHC.Show.showList__
                                     @ InflectionData.Mood
                                     InflectionData.$w$cshowsPrec3
                                     b2
                                     x1)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
8bb24dec73d39de3d4871d6b8b644b80
  $fShowManifest_$s$cshowsPrec13 ::
    GHC.Types.Int
    -> InflectionData.Manifest [InflectionData.Voice] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Manifest [InflectionData.Voice]
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest6 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShowManifest2
                            (GHC.Show.showList__
                               @ (InflectionData.LexCat,
                                  InflectionData.ManifestType,
                                  GHC.Types.Int)
                               InflectionData.$fShowManifest1
                               b1
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (GHC.Show.showList__
                                     @ InflectionData.Voice
                                     InflectionData.$w$cshowsPrec2
                                     b2
                                     x1)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
b2ea78720b8e118cf7a086be59477495
  $fShowManifest_$s$cshowsPrec14 ::
    GHC.Types.Int
    -> InflectionData.Manifest [InflectionData.Evidentiality]
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Manifest [InflectionData.Evidentiality]
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest6 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShowManifest2
                            (GHC.Show.showList__
                               @ (InflectionData.LexCat,
                                  InflectionData.ManifestType,
                                  GHC.Types.Int)
                               InflectionData.$fShowManifest1
                               b1
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (GHC.Show.showList__
                                     @ InflectionData.Evidentiality
                                     InflectionData.$w$cshowsPrec1
                                     b2
                                     x1)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
bf150b6caae75f5915039231324c7103
  $fShowManifest_$s$cshowsPrec15 ::
    GHC.Types.Int
    -> InflectionData.Manifest [InflectionData.Transitivity]
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Manifest [InflectionData.Transitivity]
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest6 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShowManifest2
                            (GHC.Show.showList__
                               @ (InflectionData.LexCat,
                                  InflectionData.ManifestType,
                                  GHC.Types.Int)
                               InflectionData.$fShowManifest1
                               b1
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (GHC.Show.showList__
                                     @ InflectionData.Transitivity
                                     InflectionData.$w$cshowsPrec
                                     b2
                                     x1)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
973bcfed158b861f59d74dbdcdf1bc28
  $fShowManifest_$s$cshowsPrec16 ::
    GHC.Types.Int
    -> InflectionData.Manifest [InflectionData.Volition]
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Manifest [InflectionData.Volition]
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest6 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShowManifest2
                            (GHC.Show.showList__
                               @ (InflectionData.LexCat,
                                  InflectionData.ManifestType,
                                  GHC.Types.Int)
                               InflectionData.$fShowManifest1
                               b1
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (GHC.Show.showList__
                                     @ InflectionData.Volition
                                     InflectionData.$w$cshowsPrec20
                                     b2
                                     x1)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
5ab346717862dad7f3da181c4ab80f70
  $fShowManifest_$s$cshowsPrec2 ::
    GHC.Types.Int
    -> InflectionData.Manifest [InflectionData.Case] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Manifest [InflectionData.Case]
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest6 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShowManifest2
                            (GHC.Show.showList__
                               @ (InflectionData.LexCat,
                                  InflectionData.ManifestType,
                                  GHC.Types.Int)
                               InflectionData.$fShowManifest1
                               b1
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (GHC.Show.showList__
                                     @ InflectionData.Case
                                     InflectionData.$w$cshowsPrec9
                                     b2
                                     x1)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
5f1c6ca1d38084ea2e0ed3572359eed1
  $fShowManifest_$s$cshowsPrec3 ::
    GHC.Types.Int
    -> InflectionData.Manifest [InflectionData.Number]
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Manifest [InflectionData.Number]
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest6 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShowManifest2
                            (GHC.Show.showList__
                               @ (InflectionData.LexCat,
                                  InflectionData.ManifestType,
                                  GHC.Types.Int)
                               InflectionData.$fShowManifest1
                               b1
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (GHC.Show.showList__
                                     @ InflectionData.Number
                                     InflectionData.$w$cshowsPrec8
                                     b2
                                     x1)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
86a8d1c2ecd33a7fcd67fc88d2223011
  $fShowManifest_$s$cshowsPrec4 ::
    GHC.Types.Int
    -> InflectionData.Manifest [InflectionData.Definiteness]
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Manifest [InflectionData.Definiteness]
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest6 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShowManifest2
                            (GHC.Show.showList__
                               @ (InflectionData.LexCat,
                                  InflectionData.ManifestType,
                                  GHC.Types.Int)
                               InflectionData.$fShowManifest1
                               b1
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (GHC.Show.showList__
                                     @ InflectionData.Definiteness
                                     InflectionData.$w$cshowsPrec13
                                     b2
                                     x1)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
87b5d5d8c353d2d67003568534829588
  $fShowManifest_$s$cshowsPrec5 ::
    GHC.Types.Int
    -> InflectionData.Manifest [InflectionData.Specificity]
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Manifest [InflectionData.Specificity]
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest6 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShowManifest2
                            (GHC.Show.showList__
                               @ (InflectionData.LexCat,
                                  InflectionData.ManifestType,
                                  GHC.Types.Int)
                               InflectionData.$fShowManifest1
                               b1
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (GHC.Show.showList__
                                     @ InflectionData.Specificity
                                     InflectionData.$w$cshowsPrec17
                                     b2
                                     x1)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
fee6b3eee5cbdfdb76ac9bd8b81c2509
  $fShowManifest_$s$cshowsPrec6 ::
    GHC.Types.Int
    -> InflectionData.Manifest [InflectionData.Topic] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Manifest [InflectionData.Topic]
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest6 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShowManifest2
                            (GHC.Show.showList__
                               @ (InflectionData.LexCat,
                                  InflectionData.ManifestType,
                                  GHC.Types.Int)
                               InflectionData.$fShowManifest1
                               b1
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (GHC.Show.showList__
                                     @ InflectionData.Topic
                                     InflectionData.$w$cshowsPrec18
                                     b2
                                     x1)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
a2a0c6dce90bddd448ffb8b2415733dc
  $fShowManifest_$s$cshowsPrec7 ::
    GHC.Types.Int
    -> InflectionData.Manifest [InflectionData.Person]
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Manifest [InflectionData.Person]
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest6 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShowManifest2
                            (GHC.Show.showList__
                               @ (InflectionData.LexCat,
                                  InflectionData.ManifestType,
                                  GHC.Types.Int)
                               InflectionData.$fShowManifest1
                               b1
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (GHC.Show.showList__
                                     @ InflectionData.Person
                                     InflectionData.$w$cshowsPrec7
                                     b2
                                     x1)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
f6764321048c195fdaa7073795bef9be
  $fShowManifest_$s$cshowsPrec8 ::
    GHC.Types.Int
    -> InflectionData.Manifest [InflectionData.Honorific]
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Manifest [InflectionData.Honorific]
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest6 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShowManifest2
                            (GHC.Show.showList__
                               @ (InflectionData.LexCat,
                                  InflectionData.ManifestType,
                                  GHC.Types.Int)
                               InflectionData.$fShowManifest1
                               b1
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (GHC.Show.showList__
                                     @ InflectionData.Honorific
                                     InflectionData.$w$cshowsPrec6
                                     b2
                                     x1)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
9f59925768660d37b20614bf167a063c
  $fShowManifest_$s$cshowsPrec9 ::
    GHC.Types.Int
    -> InflectionData.Manifest [InflectionData.Polarity]
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Manifest [InflectionData.Polarity]
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest6 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShowManifest2
                            (GHC.Show.showList__
                               @ (InflectionData.LexCat,
                                  InflectionData.ManifestType,
                                  GHC.Types.Int)
                               InflectionData.$fShowManifest1
                               b1
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (GHC.Show.showList__
                                     @ InflectionData.Polarity
                                     InflectionData.$w$cshowsPrec19
                                     b2
                                     x1)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
987f478754e08db3236fd0a739247bf9
  $fShowMood :: GHC.Show.Show InflectionData.Mood
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Mood
                  InflectionData.$fShowMood_$cshowsPrec
                  InflectionData.$fShowMood_$cshow
                  InflectionData.$fShowMood_$cshowList -}
987f478754e08db3236fd0a739247bf9
  $fShowMood_$cshow :: InflectionData.Mood -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.Mood ->
                 InflectionData.$fShowMood_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
987f478754e08db3236fd0a739247bf9
  $fShowMood_$cshowList :: [InflectionData.Mood] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Mood
                   InflectionData.$w$cshowsPrec3) -}
987f478754e08db3236fd0a739247bf9
  $fShowMood_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Mood -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: InflectionData.Mood
                   w2 :: GHC.Base.String ->
                 InflectionData.$w$cshowsPrec3 w1 w2) -}
111b9dd7881655400daece83d7690898
  $fShowNumber :: GHC.Show.Show InflectionData.Number
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Number
                  InflectionData.$fShowNumber_$cshowsPrec
                  InflectionData.$fShowNumber_$cshow
                  InflectionData.$fShowNumber_$cshowList -}
111b9dd7881655400daece83d7690898
  $fShowNumber_$cshow :: InflectionData.Number -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.Number ->
                 InflectionData.$fShowNumber_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
111b9dd7881655400daece83d7690898
  $fShowNumber_$cshowList ::
    [InflectionData.Number] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Number
                   InflectionData.$w$cshowsPrec8) -}
111b9dd7881655400daece83d7690898
  $fShowNumber_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Number -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: InflectionData.Number
                   w2 :: GHC.Base.String ->
                 InflectionData.$w$cshowsPrec8 w1 w2) -}
cbc274f5b3d6239101cd9764b7773be5
  $fShowPerson :: GHC.Show.Show InflectionData.Person
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Person
                  InflectionData.$fShowPerson_$cshowsPrec
                  InflectionData.$fShowPerson_$cshow
                  InflectionData.$fShowPerson_$cshowList -}
cbc274f5b3d6239101cd9764b7773be5
  $fShowPerson_$cshow :: InflectionData.Person -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.Person ->
                 InflectionData.$fShowPerson_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
cbc274f5b3d6239101cd9764b7773be5
  $fShowPerson_$cshowList ::
    [InflectionData.Person] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Person
                   InflectionData.$w$cshowsPrec7) -}
cbc274f5b3d6239101cd9764b7773be5
  $fShowPerson_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Person -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: InflectionData.Person
                   w2 :: GHC.Base.String ->
                 InflectionData.$w$cshowsPrec7 w1 w2) -}
961c5eb0bc4c139961b0a440a23b769f
  $fShowPolarity :: GHC.Show.Show InflectionData.Polarity
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Polarity
                  InflectionData.$fShowPolarity_$cshowsPrec
                  InflectionData.$fShowPolarity_$cshow
                  InflectionData.$fShowPolarity_$cshowList -}
961c5eb0bc4c139961b0a440a23b769f
  $fShowPolarity_$cshow :: InflectionData.Polarity -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.Polarity ->
                 case x of wild {
                   InflectionData.UPOL -> InflectionData.$fReadManifest128
                   InflectionData.AFF -> InflectionData.$fReadManifest125
                   InflectionData.NEG -> InflectionData.$fReadManifest122 }) -}
961c5eb0bc4c139961b0a440a23b769f
  $fShowPolarity_$cshowList ::
    [InflectionData.Polarity] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Polarity
                   InflectionData.$w$cshowsPrec19) -}
961c5eb0bc4c139961b0a440a23b769f
  $fShowPolarity_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Polarity -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: InflectionData.Polarity
                   w2 :: GHC.Base.String ->
                 InflectionData.$w$cshowsPrec19 w1 w2) -}
6c3fc67424127bb4feb2d92b23a30da0
  $fShowSpecificity :: GHC.Show.Show InflectionData.Specificity
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Specificity
                  InflectionData.$fShowSpecificity_$cshowsPrec
                  InflectionData.$fShowSpecificity_$cshow
                  InflectionData.$fShowSpecificity_$cshowList -}
6c3fc67424127bb4feb2d92b23a30da0
  $fShowSpecificity_$cshow ::
    InflectionData.Specificity -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.Specificity ->
                 case x of wild {
                   InflectionData.USPE -> InflectionData.$fReadManifest58
                   InflectionData.SPEC -> InflectionData.$fReadManifest55
                   InflectionData.NSPEC -> InflectionData.$fReadManifest52 }) -}
6c3fc67424127bb4feb2d92b23a30da0
  $fShowSpecificity_$cshowList ::
    [InflectionData.Specificity] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Specificity
                   InflectionData.$w$cshowsPrec17) -}
6c3fc67424127bb4feb2d92b23a30da0
  $fShowSpecificity_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Specificity -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: InflectionData.Specificity
                   w2 :: GHC.Base.String ->
                 InflectionData.$w$cshowsPrec17 w1 w2) -}
5f476bea2da27cbe0ffe1e5cde3d9551
  $fShowTense :: GHC.Show.Show InflectionData.Tense
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Tense
                  InflectionData.$fShowTense_$cshowsPrec
                  InflectionData.$fShowTense_$cshow
                  InflectionData.$fShowTense_$cshowList -}
5f476bea2da27cbe0ffe1e5cde3d9551
  $fShowTense_$cshow :: InflectionData.Tense -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.Tense ->
                 InflectionData.$fShowTense_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
5f476bea2da27cbe0ffe1e5cde3d9551
  $fShowTense_$cshowList :: [InflectionData.Tense] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Tense
                   InflectionData.$w$cshowsPrec5) -}
5f476bea2da27cbe0ffe1e5cde3d9551
  $fShowTense_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Tense -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: InflectionData.Tense
                   w2 :: GHC.Base.String ->
                 InflectionData.$w$cshowsPrec5 w1 w2) -}
f2502f7485a2c7bc47bb080f20b26aeb
  $fShowTopic :: GHC.Show.Show InflectionData.Topic
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Topic
                  InflectionData.$fShowTopic_$cshowsPrec
                  InflectionData.$fShowTopic_$cshow
                  InflectionData.$fShowTopic_$cshowList -}
f2502f7485a2c7bc47bb080f20b26aeb
  $fShowTopic_$cshow :: InflectionData.Topic -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.Topic ->
                 case x of wild {
                   InflectionData.UTOP -> InflectionData.$fReadManifest74
                   InflectionData.TOP -> InflectionData.$fReadManifest71
                   InflectionData.NTOP -> InflectionData.$fReadManifest68 }) -}
f2502f7485a2c7bc47bb080f20b26aeb
  $fShowTopic_$cshowList :: [InflectionData.Topic] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Topic
                   InflectionData.$w$cshowsPrec18) -}
f2502f7485a2c7bc47bb080f20b26aeb
  $fShowTopic_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Topic -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: InflectionData.Topic
                   w2 :: GHC.Base.String ->
                 InflectionData.$w$cshowsPrec18 w1 w2) -}
8463dae3116062b076dc25e0f6b8c749
  $fShowTransitivity :: GHC.Show.Show InflectionData.Transitivity
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Transitivity
                  InflectionData.$fShowTransitivity_$cshowsPrec
                  InflectionData.$fShowTransitivity_$cshow
                  InflectionData.$fShowTransitivity_$cshowList -}
8463dae3116062b076dc25e0f6b8c749
  $fShowTransitivity_$cshow ::
    InflectionData.Transitivity -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.Transitivity ->
                 InflectionData.$fShowTransitivity_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
8463dae3116062b076dc25e0f6b8c749
  $fShowTransitivity_$cshowList ::
    [InflectionData.Transitivity] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Transitivity
                   InflectionData.$w$cshowsPrec) -}
8463dae3116062b076dc25e0f6b8c749
  $fShowTransitivity_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Transitivity -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: InflectionData.Transitivity
                   w2 :: GHC.Base.String ->
                 InflectionData.$w$cshowsPrec w1 w2) -}
66f849eb0df273279725c8472ced02cc
  $fShowVoice :: GHC.Show.Show InflectionData.Voice
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Voice
                  InflectionData.$fShowVoice_$cshowsPrec
                  InflectionData.$fShowVoice_$cshow
                  InflectionData.$fShowVoice_$cshowList -}
66f849eb0df273279725c8472ced02cc
  $fShowVoice_$cshow :: InflectionData.Voice -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.Voice ->
                 InflectionData.$fShowVoice_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
66f849eb0df273279725c8472ced02cc
  $fShowVoice_$cshowList :: [InflectionData.Voice] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Voice
                   InflectionData.$w$cshowsPrec2) -}
66f849eb0df273279725c8472ced02cc
  $fShowVoice_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Voice -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: InflectionData.Voice
                   w2 :: GHC.Base.String ->
                 InflectionData.$w$cshowsPrec2 w1 w2) -}
3a73fa2d976f240c7ba768b809a25328
  $fShowVolition :: GHC.Show.Show InflectionData.Volition
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Volition
                  InflectionData.$fShowVolition_$cshowsPrec
                  InflectionData.$fShowVolition_$cshow
                  InflectionData.$fShowVolition_$cshowList -}
3a73fa2d976f240c7ba768b809a25328
  $fShowVolition_$cshow :: InflectionData.Volition -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.Volition ->
                 case x of wild {
                   InflectionData.UVOL -> InflectionData.$fReadManifest320
                   InflectionData.VOL -> InflectionData.$fReadManifest317
                   InflectionData.NVOL -> InflectionData.$fReadManifest314 }) -}
3a73fa2d976f240c7ba768b809a25328
  $fShowVolition_$cshowList ::
    [InflectionData.Volition] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Volition
                   InflectionData.$w$cshowsPrec20) -}
3a73fa2d976f240c7ba768b809a25328
  $fShowVolition_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Volition -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: InflectionData.Volition
                   w2 :: GHC.Base.String ->
                 InflectionData.$w$cshowsPrec20 w1 w2) -}
d7ab917227c450cc0510a5c1d903e283
  $w$c== ::
    (GHC.Classes.Eq a, GHC.Classes.Eq b, GHC.Classes.Eq c,
     GHC.Classes.Eq d, GHC.Classes.Eq e, GHC.Classes.Eq f,
     GHC.Classes.Eq g, GHC.Classes.Eq h, GHC.Classes.Eq i,
     GHC.Classes.Eq j, GHC.Classes.Eq k, GHC.Classes.Eq l,
     GHC.Classes.Eq m, GHC.Classes.Eq n, GHC.Classes.Eq o,
     GHC.Classes.Eq p, GHC.Classes.Eq q) =>
    a
    -> b
    -> c
    -> d
    -> e
    -> f
    -> g
    -> h
    -> i
    -> j
    -> k
    -> l
    -> m
    -> n
    -> o
    -> p
    -> q
    -> a
    -> b
    -> c
    -> d
    -> e
    -> f
    -> g
    -> h
    -> i
    -> j
    -> k
    -> l
    -> m
    -> n
    -> o
    -> p
    -> q
    -> GHC.Types.Bool
  {- Arity: 51, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
11457aef792db1587374eaadbda7b542
  $w$c==1 ::
    InflectionData.Manifest [InflectionData.Gender]
    -> InflectionData.Manifest [InflectionData.Animacy]
    -> InflectionData.Manifest [InflectionData.Case]
    -> InflectionData.Manifest [InflectionData.Number]
    -> InflectionData.Manifest [InflectionData.Definiteness]
    -> InflectionData.Manifest [InflectionData.Specificity]
    -> InflectionData.Manifest [InflectionData.Topic]
    -> InflectionData.Manifest [InflectionData.Person]
    -> InflectionData.Manifest [InflectionData.Honorific]
    -> InflectionData.Manifest [InflectionData.Polarity]
    -> InflectionData.Manifest [InflectionData.Tense]
    -> InflectionData.Manifest [InflectionData.Aspect]
    -> InflectionData.Manifest [InflectionData.Mood]
    -> InflectionData.Manifest [InflectionData.Voice]
    -> InflectionData.Manifest [InflectionData.Evidentiality]
    -> InflectionData.Manifest [InflectionData.Transitivity]
    -> InflectionData.Manifest [InflectionData.Volition]
    -> InflectionData.Manifest [InflectionData.Gender]
    -> InflectionData.Manifest [InflectionData.Animacy]
    -> InflectionData.Manifest [InflectionData.Case]
    -> InflectionData.Manifest [InflectionData.Number]
    -> InflectionData.Manifest [InflectionData.Definiteness]
    -> InflectionData.Manifest [InflectionData.Specificity]
    -> InflectionData.Manifest [InflectionData.Topic]
    -> InflectionData.Manifest [InflectionData.Person]
    -> InflectionData.Manifest [InflectionData.Honorific]
    -> InflectionData.Manifest [InflectionData.Polarity]
    -> InflectionData.Manifest [InflectionData.Tense]
    -> InflectionData.Manifest [InflectionData.Aspect]
    -> InflectionData.Manifest [InflectionData.Mood]
    -> InflectionData.Manifest [InflectionData.Voice]
    -> InflectionData.Manifest [InflectionData.Evidentiality]
    -> InflectionData.Manifest [InflectionData.Transitivity]
    -> InflectionData.Manifest [InflectionData.Volition]
    -> GHC.Types.Bool
  {- Arity: 34, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0] -}
45bb6eacb7cdde4afc1974b3aabad4a1
  $w$c==2 ::
    InflectionData.LexCat
    -> InflectionData.ManifestType
    -> [(PhonemeData.Morpheme,
         (InflectionData.Express InflectionData.Gender,
          InflectionData.Express InflectionData.Animacy,
          InflectionData.Express InflectionData.Case,
          InflectionData.Express InflectionData.Number,
          InflectionData.Express InflectionData.Definiteness,
          InflectionData.Express InflectionData.Specificity,
          InflectionData.Express InflectionData.Topic,
          InflectionData.Express InflectionData.Person,
          InflectionData.Express InflectionData.Honorific,
          InflectionData.Express InflectionData.Polarity,
          InflectionData.Express InflectionData.Tense,
          InflectionData.Express InflectionData.Aspect,
          InflectionData.Express InflectionData.Mood,
          InflectionData.Express InflectionData.Voice,
          InflectionData.Express InflectionData.Evidentiality,
          InflectionData.Express InflectionData.Transitivity,
          InflectionData.Express InflectionData.Volition))]
    -> InflectionData.LexCat
    -> InflectionData.ManifestType
    -> [(PhonemeData.Morpheme,
         (InflectionData.Express InflectionData.Gender,
          InflectionData.Express InflectionData.Animacy,
          InflectionData.Express InflectionData.Case,
          InflectionData.Express InflectionData.Number,
          InflectionData.Express InflectionData.Definiteness,
          InflectionData.Express InflectionData.Specificity,
          InflectionData.Express InflectionData.Topic,
          InflectionData.Express InflectionData.Person,
          InflectionData.Express InflectionData.Honorific,
          InflectionData.Express InflectionData.Polarity,
          InflectionData.Express InflectionData.Tense,
          InflectionData.Express InflectionData.Aspect,
          InflectionData.Express InflectionData.Mood,
          InflectionData.Express InflectionData.Voice,
          InflectionData.Express InflectionData.Evidentiality,
          InflectionData.Express InflectionData.Transitivity,
          InflectionData.Express InflectionData.Volition))]
    -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ ww :: InflectionData.LexCat
                   ww1 :: InflectionData.ManifestType
                   ww2 :: [(PhonemeData.Morpheme,
                            (InflectionData.Express InflectionData.Gender,
                             InflectionData.Express InflectionData.Animacy,
                             InflectionData.Express InflectionData.Case,
                             InflectionData.Express InflectionData.Number,
                             InflectionData.Express InflectionData.Definiteness,
                             InflectionData.Express InflectionData.Specificity,
                             InflectionData.Express InflectionData.Topic,
                             InflectionData.Express InflectionData.Person,
                             InflectionData.Express InflectionData.Honorific,
                             InflectionData.Express InflectionData.Polarity,
                             InflectionData.Express InflectionData.Tense,
                             InflectionData.Express InflectionData.Aspect,
                             InflectionData.Express InflectionData.Mood,
                             InflectionData.Express InflectionData.Voice,
                             InflectionData.Express InflectionData.Evidentiality,
                             InflectionData.Express InflectionData.Transitivity,
                             InflectionData.Express InflectionData.Volition))]
                   ww3 :: InflectionData.LexCat
                   ww4 :: InflectionData.ManifestType
                   ww5 :: [(PhonemeData.Morpheme,
                            (InflectionData.Express InflectionData.Gender,
                             InflectionData.Express InflectionData.Animacy,
                             InflectionData.Express InflectionData.Case,
                             InflectionData.Express InflectionData.Number,
                             InflectionData.Express InflectionData.Definiteness,
                             InflectionData.Express InflectionData.Specificity,
                             InflectionData.Express InflectionData.Topic,
                             InflectionData.Express InflectionData.Person,
                             InflectionData.Express InflectionData.Honorific,
                             InflectionData.Express InflectionData.Polarity,
                             InflectionData.Express InflectionData.Tense,
                             InflectionData.Express InflectionData.Aspect,
                             InflectionData.Express InflectionData.Mood,
                             InflectionData.Express InflectionData.Voice,
                             InflectionData.Express InflectionData.Evidentiality,
                             InflectionData.Express InflectionData.Transitivity,
                             InflectionData.Express InflectionData.Volition))] ->
                 case ww of x1 { DEFAULT ->
                 case ww3 of x2 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==#
                           (GHC.Prim.dataToTag# @ InflectionData.LexCat x1)
                           (GHC.Prim.dataToTag# @ InflectionData.LexCat x2)) of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case ww1 of wild1 {
                        InflectionData.Particle
                        -> case ww4 of wild2 {
                             DEFAULT -> GHC.Types.False
                             InflectionData.Particle
                             -> GHC.Classes.$fEq[]_$c==
                                  @ (PhonemeData.Morpheme,
                                     (InflectionData.Express InflectionData.Gender,
                                      InflectionData.Express InflectionData.Animacy,
                                      InflectionData.Express InflectionData.Case,
                                      InflectionData.Express InflectionData.Number,
                                      InflectionData.Express InflectionData.Definiteness,
                                      InflectionData.Express InflectionData.Specificity,
                                      InflectionData.Express InflectionData.Topic,
                                      InflectionData.Express InflectionData.Person,
                                      InflectionData.Express InflectionData.Honorific,
                                      InflectionData.Express InflectionData.Polarity,
                                      InflectionData.Express InflectionData.Tense,
                                      InflectionData.Express InflectionData.Aspect,
                                      InflectionData.Express InflectionData.Mood,
                                      InflectionData.Express InflectionData.Voice,
                                      InflectionData.Express InflectionData.Evidentiality,
                                      InflectionData.Express InflectionData.Transitivity,
                                      InflectionData.Express InflectionData.Volition))
                                  InflectionData.$fEqManifestSystem_$s$fEq(,)
                                  ww2
                                  ww5 }
                        InflectionData.Prefix
                        -> case ww4 of wild2 {
                             DEFAULT -> GHC.Types.False
                             InflectionData.Prefix
                             -> GHC.Classes.$fEq[]_$c==
                                  @ (PhonemeData.Morpheme,
                                     (InflectionData.Express InflectionData.Gender,
                                      InflectionData.Express InflectionData.Animacy,
                                      InflectionData.Express InflectionData.Case,
                                      InflectionData.Express InflectionData.Number,
                                      InflectionData.Express InflectionData.Definiteness,
                                      InflectionData.Express InflectionData.Specificity,
                                      InflectionData.Express InflectionData.Topic,
                                      InflectionData.Express InflectionData.Person,
                                      InflectionData.Express InflectionData.Honorific,
                                      InflectionData.Express InflectionData.Polarity,
                                      InflectionData.Express InflectionData.Tense,
                                      InflectionData.Express InflectionData.Aspect,
                                      InflectionData.Express InflectionData.Mood,
                                      InflectionData.Express InflectionData.Voice,
                                      InflectionData.Express InflectionData.Evidentiality,
                                      InflectionData.Express InflectionData.Transitivity,
                                      InflectionData.Express InflectionData.Volition))
                                  InflectionData.$fEqManifestSystem_$s$fEq(,)
                                  ww2
                                  ww5 }
                        InflectionData.Suffix
                        -> case ww4 of wild2 {
                             DEFAULT -> GHC.Types.False
                             InflectionData.Suffix
                             -> GHC.Classes.$fEq[]_$c==
                                  @ (PhonemeData.Morpheme,
                                     (InflectionData.Express InflectionData.Gender,
                                      InflectionData.Express InflectionData.Animacy,
                                      InflectionData.Express InflectionData.Case,
                                      InflectionData.Express InflectionData.Number,
                                      InflectionData.Express InflectionData.Definiteness,
                                      InflectionData.Express InflectionData.Specificity,
                                      InflectionData.Express InflectionData.Topic,
                                      InflectionData.Express InflectionData.Person,
                                      InflectionData.Express InflectionData.Honorific,
                                      InflectionData.Express InflectionData.Polarity,
                                      InflectionData.Express InflectionData.Tense,
                                      InflectionData.Express InflectionData.Aspect,
                                      InflectionData.Express InflectionData.Mood,
                                      InflectionData.Express InflectionData.Voice,
                                      InflectionData.Express InflectionData.Evidentiality,
                                      InflectionData.Express InflectionData.Transitivity,
                                      InflectionData.Express InflectionData.Volition))
                                  InflectionData.$fEqManifestSystem_$s$fEq(,)
                                  ww2
                                  ww5 } } } } }) -}
8463dae3116062b076dc25e0f6b8c749
  $w$cshowsPrec ::
    InflectionData.Transitivity -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: InflectionData.Transitivity
                   w1 :: GHC.Base.String ->
                 case w of wild {
                   InflectionData.UTRA
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest304 w1
                   InflectionData.NTRANS
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest301 w1
                   InflectionData.TRANS
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest298 w1
                   InflectionData.MTRANS
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest295 w1
                   InflectionData.DITRANS
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadManifest292
                        w1 }) -}
1261593b396b3f8b4367998b51bf6d8a
  $w$cshowsPrec1 ::
    InflectionData.Evidentiality -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: InflectionData.Evidentiality
                   w1 :: GHC.Base.String ->
                 case w of wild {
                   InflectionData.UEVI
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadEvidentiality43
                        w1
                   InflectionData.EXP
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadEvidentiality40
                        w1
                   InflectionData.VIS
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadEvidentiality37
                        w1
                   InflectionData.NVIS
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadEvidentiality34
                        w1
                   InflectionData.AUD
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadEvidentiality31
                        w1
                   InflectionData.INFER
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadEvidentiality28
                        w1
                   InflectionData.REP
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadEvidentiality25
                        w1
                   InflectionData.HSY
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadEvidentiality22
                        w1
                   InflectionData.QUO
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadEvidentiality19
                        w1
                   InflectionData.ASS
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadEvidentiality16
                        w1 }) -}
91fb0b41f9ef14c662c70b3629b6b5fe
  $w$cshowsPrec10 ::
    InflectionData.Animacy -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: InflectionData.Animacy w1 :: GHC.Base.String ->
                 case w of wild {
                   InflectionData.UANI
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadAnimacy27 w1
                   InflectionData.AN
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadAnimacy24 w1
                   InflectionData.HUM
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadAnimacy21 w1
                   InflectionData.NHUM
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadAnimacy18 w1
                   InflectionData.ZO
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadAnimacy15 w1
                   InflectionData.INAN
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadAnimacy12
                        w1 }) -}
e443e52c146978100c75258afee70577
  $w$cshowsPrec11 ::
    InflectionData.Gender -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: InflectionData.Gender w1 :: GHC.Base.String ->
                 case w of wild {
                   InflectionData.UGEN
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadGender23 w1
                   InflectionData.M
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadGender20 w1
                   InflectionData.F
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadGender17 w1
                   InflectionData.COM
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadGender14 w1
                   InflectionData.N
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadGender11
                        w1 }) -}
dbd47231eb095970d74ab78cb09c0323
  $w$cshowsPrec12 ::
    (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
     GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
     GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
     GHC.Show.Show l, GHC.Show.Show m, GHC.Show.Show n, GHC.Show.Show o,
     GHC.Show.Show p, GHC.Show.Show q) =>
    a
    -> b
    -> c
    -> d
    -> e
    -> f
    -> g
    -> h
    -> i
    -> j
    -> k
    -> l
    -> m
    -> n
    -> o
    -> p
    -> q
    -> GHC.Show.ShowS
  {- Arity: 34,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
69e12afea565be2617200bf9671a6c0d
  $w$cshowsPrec13 ::
    InflectionData.Definiteness -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: InflectionData.Definiteness
                   w1 :: GHC.Base.String ->
                 case w of wild {
                   InflectionData.UDEF
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadDefiniteness15
                        w1
                   InflectionData.DEF
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadDefiniteness12
                        w1
                   InflectionData.INDF
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadDefiniteness9
                        w1 }) -}
6fbc3c569cc3773347b5f6a815064900
  $w$cshowsPrec14 ::
    GHC.Prim.Int#
    -> InflectionData.Manifest [InflectionData.Gender]
    -> InflectionData.Manifest [InflectionData.Animacy]
    -> InflectionData.Manifest [InflectionData.Case]
    -> InflectionData.Manifest [InflectionData.Number]
    -> InflectionData.Manifest [InflectionData.Definiteness]
    -> InflectionData.Manifest [InflectionData.Specificity]
    -> InflectionData.Manifest [InflectionData.Topic]
    -> InflectionData.Manifest [InflectionData.Person]
    -> InflectionData.Manifest [InflectionData.Honorific]
    -> InflectionData.Manifest [InflectionData.Polarity]
    -> InflectionData.Manifest [InflectionData.Tense]
    -> InflectionData.Manifest [InflectionData.Aspect]
    -> InflectionData.Manifest [InflectionData.Mood]
    -> InflectionData.Manifest [InflectionData.Voice]
    -> InflectionData.Manifest [InflectionData.Evidentiality]
    -> InflectionData.Manifest [InflectionData.Transitivity]
    -> InflectionData.Manifest [InflectionData.Volition]
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 19,
     Strictness: <L,U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,U>,
     Inline: [0] -}
406c10c56e8fc899b6f590771b3372e0
  $w$cshowsPrec15 ::
    InflectionData.LexCat -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: InflectionData.LexCat w1 :: GHC.Base.String ->
                 case w of wild {
                   InflectionData.Comp
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadLexCat47 w1
                   InflectionData.Infl
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadLexCat44 w1
                   InflectionData.Verb
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadLexCat41 w1
                   InflectionData.Det
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadLexCat38 w1
                   InflectionData.Noun
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadLexCat35 w1
                   InflectionData.Adpo
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadLexCat32 w1
                   InflectionData.Adj
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadLexCat29 w1
                   InflectionData.Adv
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadLexCat26 w1
                   InflectionData.Obj
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadLexCat23 w1
                   InflectionData.Subj
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadLexCat20 w1
                   InflectionData.Pron
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadLexCat17
                        w1 }) -}
339a9cc5bd8d02624186a930ed6d9c71
  $w$cshowsPrec16 ::
    InflectionData.ManifestType -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: InflectionData.ManifestType
                   w1 :: GHC.Base.String ->
                 case w of wild {
                   InflectionData.Particle
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadManifestType15
                        w1
                   InflectionData.Prefix
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadManifestType12
                        w1
                   InflectionData.Suffix
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadManifestType9
                        w1 }) -}
6c3fc67424127bb4feb2d92b23a30da0
  $w$cshowsPrec17 ::
    InflectionData.Specificity -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: InflectionData.Specificity
                   w1 :: GHC.Base.String ->
                 case w of wild {
                   InflectionData.USPE
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest58 w1
                   InflectionData.SPEC
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest55 w1
                   InflectionData.NSPEC
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadManifest52
                        w1 }) -}
f2502f7485a2c7bc47bb080f20b26aeb
  $w$cshowsPrec18 ::
    InflectionData.Topic -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: InflectionData.Topic w1 :: GHC.Base.String ->
                 case w of wild {
                   InflectionData.UTOP
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest74 w1
                   InflectionData.TOP
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest71 w1
                   InflectionData.NTOP
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadManifest68
                        w1 }) -}
961c5eb0bc4c139961b0a440a23b769f
  $w$cshowsPrec19 ::
    InflectionData.Polarity -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: InflectionData.Polarity w1 :: GHC.Base.String ->
                 case w of wild {
                   InflectionData.UPOL
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest128 w1
                   InflectionData.AFF
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest125 w1
                   InflectionData.NEG
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadManifest122
                        w1 }) -}
66f849eb0df273279725c8472ced02cc
  $w$cshowsPrec2 ::
    InflectionData.Voice -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: InflectionData.Voice w1 :: GHC.Base.String ->
                 case w of wild {
                   InflectionData.UVOI
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest278 w1
                   InflectionData.ACTIVE
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest275 w1
                   InflectionData.MIDDLE
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest272 w1
                   InflectionData.PASSIVE
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadManifest269
                        w1 }) -}
3a73fa2d976f240c7ba768b809a25328
  $w$cshowsPrec20 ::
    InflectionData.Volition -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: InflectionData.Volition w1 :: GHC.Base.String ->
                 case w of wild {
                   InflectionData.UVOL
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest320 w1
                   InflectionData.VOL
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest317 w1
                   InflectionData.NVOL
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadManifest314
                        w1 }) -}
446fea735002619cab36ba21cfed982b
  $w$cshowsPrec21 ::
    GHC.Prim.Int#
    -> InflectionData.LexCat
    -> InflectionData.ManifestType
    -> [(PhonemeData.Morpheme,
         (InflectionData.Express InflectionData.Gender,
          InflectionData.Express InflectionData.Animacy,
          InflectionData.Express InflectionData.Case,
          InflectionData.Express InflectionData.Number,
          InflectionData.Express InflectionData.Definiteness,
          InflectionData.Express InflectionData.Specificity,
          InflectionData.Express InflectionData.Topic,
          InflectionData.Express InflectionData.Person,
          InflectionData.Express InflectionData.Honorific,
          InflectionData.Express InflectionData.Polarity,
          InflectionData.Express InflectionData.Tense,
          InflectionData.Express InflectionData.Aspect,
          InflectionData.Express InflectionData.Mood,
          InflectionData.Express InflectionData.Voice,
          InflectionData.Express InflectionData.Evidentiality,
          InflectionData.Express InflectionData.Transitivity,
          InflectionData.Express InflectionData.Volition))]
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 5, Strictness: <L,U><L,1*U><L,1*U><L,1*U><L,U>,
     Inline: [0] -}
987f478754e08db3236fd0a739247bf9
  $w$cshowsPrec3 ::
    InflectionData.Mood -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: InflectionData.Mood w1 :: GHC.Base.String ->
                 case w of wild {
                   InflectionData.UMOO
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest258 w1
                   InflectionData.IND
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest255 w1
                   InflectionData.IRR
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest252 w1
                   InflectionData.DEO
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest249 w1
                   InflectionData.IMP
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest246 w1
                   InflectionData.JUS
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest243 w1
                   InflectionData.OPT
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest240 w1
                   InflectionData.EPIS
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest237 w1
                   InflectionData.SBJV
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest234 w1
                   InflectionData.POT
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest231 w1
                   InflectionData.COND
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadManifest228
                        w1 }) -}
8bbea98a3b619c1fafa2f31c2f747273
  $w$cshowsPrec4 ::
    InflectionData.Aspect -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: InflectionData.Aspect w1 :: GHC.Base.String ->
                 case w of wild {
                   InflectionData.UASP
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadAspect35 w1
                   InflectionData.NNPROG
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadAspect32 w1
                   InflectionData.PFV
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadAspect29 w1
                   InflectionData.IPFV
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadAspect26 w1
                   InflectionData.HAB
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadAspect23 w1
                   InflectionData.CONT
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadAspect20 w1
                   InflectionData.NPROG
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadAspect17 w1
                   InflectionData.PROG
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadAspect14
                        w1 }) -}
5f476bea2da27cbe0ffe1e5cde3d9551
  $w$cshowsPrec5 ::
    InflectionData.Tense -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0] -}
9f709bf4194f93c1f39907f3dcd0aede
  $w$cshowsPrec6 ::
    InflectionData.Honorific -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: InflectionData.Honorific
                   w1 :: GHC.Base.String ->
                 case w of wild {
                   InflectionData.UHON
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadHonorific19 w1
                   InflectionData.FAM
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadHonorific16 w1
                   InflectionData.NEU
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadHonorific13 w1
                   InflectionData.FORM
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadHonorific10
                        w1 }) -}
cbc274f5b3d6239101cd9764b7773be5
  $w$cshowsPrec7 ::
    InflectionData.Person -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: InflectionData.Person w1 :: GHC.Base.String ->
                 case w of wild {
                   InflectionData.UPER
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest110 w1
                   InflectionData.FIRST
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest107 w1
                   InflectionData.FSTINCL
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest104 w1
                   InflectionData.FSTEXCL
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest101 w1
                   InflectionData.SECOND
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest98 w1
                   InflectionData.THIRD
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest95 w1
                   InflectionData.THRDPROX
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest92 w1
                   InflectionData.THRDOBV
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadManifest89
                        w1 }) -}
111b9dd7881655400daece83d7690898
  $w$cshowsPrec8 ::
    InflectionData.Number -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: InflectionData.Number w1 :: GHC.Base.String ->
                 case w of wild {
                   InflectionData.UNUM
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest40 w1
                   InflectionData.SG
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest37 w1
                   InflectionData.DU
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest34 w1
                   InflectionData.TRI
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest31 w1
                   InflectionData.PA
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest28 w1
                   InflectionData.PL
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadManifest25
                        w1 }) -}
6c10cc277989f00ac96ff5f8d0b9d977
  $w$cshowsPrec9 ::
    InflectionData.Case -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0] -}
406c10c56e8fc899b6f590771b3372e0
  $w$ctoEnum :: GHC.Prim.Int# -> InflectionData.LexCat
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 0) of wild {
                   GHC.Types.False -> InflectionData.$fEnumLexCat1 ww
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ww 10) of wild1 {
                        GHC.Types.False -> InflectionData.$fEnumLexCat1 ww
                        GHC.Types.True
                        -> GHC.Prim.tagToEnum# @ InflectionData.LexCat ww } }) -}
3c10d516d035f80acec9de563efbdb93
  $w$s$c== ::
    InflectionData.Express InflectionData.Gender
    -> InflectionData.Express InflectionData.Animacy
    -> InflectionData.Express InflectionData.Case
    -> InflectionData.Express InflectionData.Number
    -> InflectionData.Express InflectionData.Definiteness
    -> InflectionData.Express InflectionData.Specificity
    -> InflectionData.Express InflectionData.Topic
    -> InflectionData.Express InflectionData.Person
    -> InflectionData.Express InflectionData.Honorific
    -> InflectionData.Express InflectionData.Polarity
    -> InflectionData.Express InflectionData.Tense
    -> InflectionData.Express InflectionData.Aspect
    -> InflectionData.Express InflectionData.Mood
    -> InflectionData.Express InflectionData.Voice
    -> InflectionData.Express InflectionData.Evidentiality
    -> InflectionData.Express InflectionData.Transitivity
    -> InflectionData.Express InflectionData.Volition
    -> InflectionData.Express InflectionData.Gender
    -> InflectionData.Express InflectionData.Animacy
    -> InflectionData.Express InflectionData.Case
    -> InflectionData.Express InflectionData.Number
    -> InflectionData.Express InflectionData.Definiteness
    -> InflectionData.Express InflectionData.Specificity
    -> InflectionData.Express InflectionData.Topic
    -> InflectionData.Express InflectionData.Person
    -> InflectionData.Express InflectionData.Honorific
    -> InflectionData.Express InflectionData.Polarity
    -> InflectionData.Express InflectionData.Tense
    -> InflectionData.Express InflectionData.Aspect
    -> InflectionData.Express InflectionData.Mood
    -> InflectionData.Express InflectionData.Voice
    -> InflectionData.Express InflectionData.Evidentiality
    -> InflectionData.Express InflectionData.Transitivity
    -> InflectionData.Express InflectionData.Volition
    -> GHC.Types.Bool
  {- Arity: 34, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0] -}
40e5877055ae28a7e2e6d1dc853db5ac
  $w$s$cshowsPrec ::
    InflectionData.Express InflectionData.Gender
    -> InflectionData.Express InflectionData.Animacy
    -> InflectionData.Express InflectionData.Case
    -> InflectionData.Express InflectionData.Number
    -> InflectionData.Express InflectionData.Definiteness
    -> InflectionData.Express InflectionData.Specificity
    -> InflectionData.Express InflectionData.Topic
    -> InflectionData.Express InflectionData.Person
    -> InflectionData.Express InflectionData.Honorific
    -> InflectionData.Express InflectionData.Polarity
    -> InflectionData.Express InflectionData.Tense
    -> InflectionData.Express InflectionData.Aspect
    -> InflectionData.Express InflectionData.Mood
    -> InflectionData.Express InflectionData.Voice
    -> InflectionData.Express InflectionData.Evidentiality
    -> InflectionData.Express InflectionData.Transitivity
    -> InflectionData.Express InflectionData.Volition
    -> GHC.Show.ShowS
  {- Arity: 17,
     Strictness: <L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ ww :: InflectionData.Express InflectionData.Gender
                   ww1 :: InflectionData.Express InflectionData.Animacy
                   ww2 :: InflectionData.Express InflectionData.Case
                   ww3 :: InflectionData.Express InflectionData.Number
                   ww4 :: InflectionData.Express InflectionData.Definiteness
                   ww5 :: InflectionData.Express InflectionData.Specificity
                   ww6 :: InflectionData.Express InflectionData.Topic
                   ww7 :: InflectionData.Express InflectionData.Person
                   ww8 :: InflectionData.Express InflectionData.Honorific
                   ww9 :: InflectionData.Express InflectionData.Polarity
                   ww10 :: InflectionData.Express InflectionData.Tense
                   ww11 :: InflectionData.Express InflectionData.Aspect
                   ww12 :: InflectionData.Express InflectionData.Mood
                   ww13 :: InflectionData.Express InflectionData.Voice
                   ww14 :: InflectionData.Express InflectionData.Evidentiality
                   ww15 :: InflectionData.Express InflectionData.Transitivity
                   ww16 :: InflectionData.Express InflectionData.Volition ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = InflectionData.$fShow(,,,,,,,,,,,,,,,,)_go
                       (GHC.Types.:
                          @ GHC.Show.ShowS
                          (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec17
                             GHC.Show.shows18
                             ww)
                          (GHC.Types.:
                             @ GHC.Show.ShowS
                             (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec16
                                GHC.Show.shows18
                                ww1)
                             (GHC.Types.:
                                @ GHC.Show.ShowS
                                (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec15
                                   GHC.Show.shows18
                                   ww2)
                                (GHC.Types.:
                                   @ GHC.Show.ShowS
                                   (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec14
                                      GHC.Show.shows18
                                      ww3)
                                   (GHC.Types.:
                                      @ GHC.Show.ShowS
                                      (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec13
                                         GHC.Show.shows18
                                         ww4)
                                      (GHC.Types.:
                                         @ GHC.Show.ShowS
                                         (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec12
                                            GHC.Show.shows18
                                            ww5)
                                         (GHC.Types.:
                                            @ GHC.Show.ShowS
                                            (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec11
                                               GHC.Show.shows18
                                               ww6)
                                            (GHC.Types.:
                                               @ GHC.Show.ShowS
                                               (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec10
                                                  GHC.Show.shows18
                                                  ww7)
                                               (GHC.Types.:
                                                  @ GHC.Show.ShowS
                                                  (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec9
                                                     GHC.Show.shows18
                                                     ww8)
                                                  (GHC.Types.:
                                                     @ GHC.Show.ShowS
                                                     (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec8
                                                        GHC.Show.shows18
                                                        ww9)
                                                     (GHC.Types.:
                                                        @ GHC.Show.ShowS
                                                        (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec7
                                                           GHC.Show.shows18
                                                           ww10)
                                                        (GHC.Types.:
                                                           @ GHC.Show.ShowS
                                                           (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec6
                                                              GHC.Show.shows18
                                                              ww11)
                                                           (GHC.Types.:
                                                              @ GHC.Show.ShowS
                                                              (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec5
                                                                 GHC.Show.shows18
                                                                 ww12)
                                                              (GHC.Types.:
                                                                 @ GHC.Show.ShowS
                                                                 (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec4
                                                                    GHC.Show.shows18
                                                                    ww13)
                                                                 (GHC.Types.:
                                                                    @ GHC.Show.ShowS
                                                                    (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec3
                                                                       GHC.Show.shows18
                                                                       ww14)
                                                                    (GHC.Types.:
                                                                       @ GHC.Show.ShowS
                                                                       (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec2
                                                                          GHC.Show.shows18
                                                                          ww15)
                                                                       (GHC.Types.:
                                                                          @ GHC.Show.ShowS
                                                                          (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec1
                                                                             GHC.Show.shows18
                                                                             ww16)
                                                                          (GHC.Types.[]
                                                                             @ GHC.Show.ShowS))))))))))))))))))
                 } in
                 \ x :: GHC.Base.String ->
                 GHC.Types.:
                   @ GHC.Types.Char
                   InflectionData.$fShow(,,,,,,,,,,,,,,,,)2
                   (f (GHC.Types.:
                         @ GHC.Types.Char
                         InflectionData.$fShow(,,,,,,,,,,,,,,,,)1
                         x))) -}
d140bda0afaf2a222d43f8ac1fd40fcf
  $wa ::
    GHC.Prim.Int#
    -> forall b.
       (InflectionData.InflectionSystem
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0] -}
91fb0b41f9ef14c662c70b3629b6b5fe
  data Animacy = UANI | AN | HUM | NHUM | ZO | INAN
    Promotable
8bbea98a3b619c1fafa2f31c2f747273
  data Aspect
    = UASP | NNPROG | PFV | IPFV | HAB | CONT | NPROG | PROG
    Promotable
6c10cc277989f00ac96ff5f8d0b9d977
  data Case
    = UCAS
    | INTR
    | ACC
    | ERG
    | PEG
    | INDIR
    | SEC
    | NOM
    | ABS
    | MTR
    | DIR
    | PRIM
    | ERG2
    | NOM2
    | ABS2
    | ABS3
    | DTR
    | OBJ
    | DRT1
    | TR
    | DRT2
    | OBL1
    | OBL2
    | OBL3
    | OBL4
    | OBL5
    | OBL6
    | ADP
    | PREP
    | POST
    | LAT
    | LOC
    | ABL
    | COMP
    | EQU
    | IDEN
    | ABE
    | DAT
    | INS
    | COMIT
    | INSCOMIT
    | ORN
    | BEN
    | CAUS
    | DISTR
    | GEN
    | POSS
    | PART
    | VOC
    Promotable
69e12afea565be2617200bf9671a6c0d
  data Definiteness = UDEF | DEF | INDF
    Promotable
1261593b396b3f8b4367998b51bf6d8a
  data Evidentiality
    = UEVI | EXP | VIS | NVIS | AUD | INFER | REP | HSY | QUO | ASS
    Promotable
7e958650c7791002a2540390e3aca90e
  data Express a = NoExpress | Express {getExp :: a}
    Promotable
e443e52c146978100c75258afee70577
  data Gender = UGEN | M | F | COM | N
    Promotable
9f709bf4194f93c1f39907f3dcd0aede
  data Honorific = UHON | FAM | NEU | FORM
    Promotable
d140bda0afaf2a222d43f8ac1fd40fcf
  data InflectionSystem
    = InflectionSystem {genSys :: InflectionData.Manifest
                                    [InflectionData.Gender],
                        aniSys :: InflectionData.Manifest [InflectionData.Animacy],
                        casSys :: InflectionData.Manifest [InflectionData.Case],
                        numSys :: InflectionData.Manifest [InflectionData.Number],
                        defSys :: InflectionData.Manifest [InflectionData.Definiteness],
                        speSys :: InflectionData.Manifest [InflectionData.Specificity],
                        topSys :: InflectionData.Manifest [InflectionData.Topic],
                        perSys :: InflectionData.Manifest [InflectionData.Person],
                        honSys :: InflectionData.Manifest [InflectionData.Honorific],
                        polSys :: InflectionData.Manifest [InflectionData.Polarity],
                        tenSys :: InflectionData.Manifest [InflectionData.Tense],
                        aspSys :: InflectionData.Manifest [InflectionData.Aspect],
                        mooSys :: InflectionData.Manifest [InflectionData.Mood],
                        voiSys :: InflectionData.Manifest [InflectionData.Voice],
                        eviSys :: InflectionData.Manifest [InflectionData.Evidentiality],
                        traSys :: InflectionData.Manifest [InflectionData.Transitivity],
                        volSys :: InflectionData.Manifest [InflectionData.Volition]}
406c10c56e8fc899b6f590771b3372e0
  data LexCat
    = Comp
    | Infl
    | Verb
    | Det
    | Noun
    | Adpo
    | Adj
    | Adv
    | Obj
    | Subj
    | Pron
    Promotable
402c727bb1d5614cf0c6243ee3fa7337
  data Manifest a
    = NoManifest
    | Manifest [(InflectionData.LexCat,
                 InflectionData.ManifestType,
                 GHC.Types.Int)]
               a
d00ca9fc0955f2d18fcf424b683d5934
  data ManifestSystem
    = ManifestSystem {manSysLC :: InflectionData.LexCat,
                      manSysType :: InflectionData.ManifestType,
                      manSysCombos :: [(PhonemeData.Morpheme,
                                        (InflectionData.Express InflectionData.Gender,
                                         InflectionData.Express InflectionData.Animacy,
                                         InflectionData.Express InflectionData.Case,
                                         InflectionData.Express InflectionData.Number,
                                         InflectionData.Express InflectionData.Definiteness,
                                         InflectionData.Express InflectionData.Specificity,
                                         InflectionData.Express InflectionData.Topic,
                                         InflectionData.Express InflectionData.Person,
                                         InflectionData.Express InflectionData.Honorific,
                                         InflectionData.Express InflectionData.Polarity,
                                         InflectionData.Express InflectionData.Tense,
                                         InflectionData.Express InflectionData.Aspect,
                                         InflectionData.Express InflectionData.Mood,
                                         InflectionData.Express InflectionData.Voice,
                                         InflectionData.Express InflectionData.Evidentiality,
                                         InflectionData.Express InflectionData.Transitivity,
                                         InflectionData.Express InflectionData.Volition))]}
339a9cc5bd8d02624186a930ed6d9c71
  data ManifestType = Particle | Prefix | Suffix
    Promotable
987f478754e08db3236fd0a739247bf9
  data Mood
    = UMOO
    | IND
    | IRR
    | DEO
    | IMP
    | JUS
    | OPT
    | EPIS
    | SBJV
    | POT
    | COND
    Promotable
111b9dd7881655400daece83d7690898
  data Number = UNUM | SG | DU | TRI | PA | PL
    Promotable
cbc274f5b3d6239101cd9764b7773be5
  data Person
    = UPER
    | FIRST
    | FSTINCL
    | FSTEXCL
    | SECOND
    | THIRD
    | THRDPROX
    | THRDOBV
    Promotable
961c5eb0bc4c139961b0a440a23b769f
  data Polarity = UPOL | AFF | NEG
    Promotable
6c3fc67424127bb4feb2d92b23a30da0
  data Specificity = USPE | SPEC | NSPEC
    Promotable
5f476bea2da27cbe0ffe1e5cde3d9551
  data Tense
    = UTEN
    | PST
    | PRS
    | FUT
    | APRS
    | APST
    | AFUT
    | AFUT1
    | AFUT2
    | AFUT3
    | PPRS
    | PFUT
    | PPST
    | PPST1
    | PPST2
    | PPST3
    | PSTPER
    | PRSPER
    | FUTPER
    Promotable
f2502f7485a2c7bc47bb080f20b26aeb
  data Topic = UTOP | TOP | NTOP
    Promotable
8463dae3116062b076dc25e0f6b8c749
  data Transitivity = UTRA | NTRANS | TRANS | MTRANS | DITRANS
    Promotable
66f849eb0df273279725c8472ced02cc
  data Voice = UVOI | ACTIVE | MIDDLE | PASSIVE
    Promotable
3a73fa2d976f240c7ba768b809a25328
  data Volition = UVOL | VOL | NVOL
    Promotable
77b3a4432edfccebb3b22d1c9b24ac4d
  aniSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest [InflectionData.Animacy]
  RecSel InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLLLLLLLLLLLLL),1*U(A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.InflectionSystem ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ->
                 ds2 }) -}
b8fda4d4df735d7364c18984ec33d22d
  aspSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest [InflectionData.Aspect]
  RecSel InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLSLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,1*U,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.InflectionSystem ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ->
                 ds12 }) -}
0742e33feebcc2aedfa503cbac8da46c
  casSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest [InflectionData.Case]
  RecSel InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLLLLLLLLLLLLL),1*U(A,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.InflectionSystem ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ->
                 ds3 }) -}
32998dbfeb4e34fb6c5d335c07211467
  defSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest [InflectionData.Definiteness]
  RecSel InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSLLLLLLLLLLLL),1*U(A,A,A,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.InflectionSystem ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ->
                 ds5 }) -}
bf96f69c433d29648ef52d67868a021f
  eviSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest [InflectionData.Evidentiality]
  RecSel InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLSLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.InflectionSystem ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ->
                 ds15 }) -}
9381ca4fedbf8ceed1ccbf87d7c5ea11
  genSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest [InflectionData.Gender]
  RecSel InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLLLLLLLLLLLLL),1*U(1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.InflectionSystem ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ->
                 ds1 }) -}
e8d8ee9a1de81f506aa3491726d1f060
  getExp :: InflectionData.Express a -> a
  RecSel InflectionData.Express
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a41 ds :: InflectionData.Express a41 ->
                 case ds of wild {
                   InflectionData.NoExpress -> InflectionData.getExp1 @ a41
                   InflectionData.Express ds1 -> ds1 }) -}
add51f894a81d7697d9d2c3be82da105
  getExp1 :: a
  {- Strictness: b -}
0d571c6678cc881fd60d97ead23d7dfc
  honSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest [InflectionData.Honorific]
  RecSel InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLSLLLLLLLL),1*U(A,A,A,A,A,A,A,A,1*U,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.InflectionSystem ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ->
                 ds9 }) -}
c4e6f673c4760d3721cbfe0ccf301060
  manSysCombos ::
    InflectionData.ManifestSystem
    -> [(PhonemeData.Morpheme,
         (InflectionData.Express InflectionData.Gender,
          InflectionData.Express InflectionData.Animacy,
          InflectionData.Express InflectionData.Case,
          InflectionData.Express InflectionData.Number,
          InflectionData.Express InflectionData.Definiteness,
          InflectionData.Express InflectionData.Specificity,
          InflectionData.Express InflectionData.Topic,
          InflectionData.Express InflectionData.Person,
          InflectionData.Express InflectionData.Honorific,
          InflectionData.Express InflectionData.Polarity,
          InflectionData.Express InflectionData.Tense,
          InflectionData.Express InflectionData.Aspect,
          InflectionData.Express InflectionData.Mood,
          InflectionData.Express InflectionData.Voice,
          InflectionData.Express InflectionData.Evidentiality,
          InflectionData.Express InflectionData.Transitivity,
          InflectionData.Express InflectionData.Volition))]
  RecSel InflectionData.ManifestSystem
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.ManifestSystem ->
                 case ds of wild { InflectionData.ManifestSystem ds1 ds2 ds3 ->
                 ds3 }) -}
3a99c2f4f23d6aaec15d9c041aa72ec7
  manSysLC :: InflectionData.ManifestSystem -> InflectionData.LexCat
  RecSel InflectionData.ManifestSystem
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.ManifestSystem ->
                 case ds of wild { InflectionData.ManifestSystem ds1 ds2 ds3 ->
                 ds1 }) -}
4c2364481e001c0d82f7b653fe5a23b5
  manSysType ::
    InflectionData.ManifestSystem -> InflectionData.ManifestType
  RecSel InflectionData.ManifestSystem
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.ManifestSystem ->
                 case ds of wild { InflectionData.ManifestSystem ds1 ds2 ds3 ->
                 ds2 }) -}
d90942dd715cf7190a76153b176213fb
  mooSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest [InflectionData.Mood]
  RecSel InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLSLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,1*U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.InflectionSystem ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ->
                 ds13 }) -}
e3f0341cfb574429476d3eef73dc9b22
  numSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest [InflectionData.Number]
  RecSel InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLLLLLLLLLLLLL),1*U(A,A,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.InflectionSystem ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ->
                 ds4 }) -}
b556a32261e8c80f3f8a544ec8ca9305
  perSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest [InflectionData.Person]
  RecSel InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLSLLLLLLLLL),1*U(A,A,A,A,A,A,A,1*U,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.InflectionSystem ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ->
                 ds8 }) -}
dd1e1dde879856f37659781ab72a7cd9
  polSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest [InflectionData.Polarity]
  RecSel InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLSLLLLLLL),1*U(A,A,A,A,A,A,A,A,A,1*U,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.InflectionSystem ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ->
                 ds10 }) -}
db725844404908ae2faa7ea16c653f57
  speSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest [InflectionData.Specificity]
  RecSel InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLSLLLLLLLLLLL),1*U(A,A,A,A,A,1*U,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.InflectionSystem ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ->
                 ds6 }) -}
a84f08c83ed8f33a17989dcde7856121
  tenSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest [InflectionData.Tense]
  RecSel InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLSLLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,1*U,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.InflectionSystem ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ->
                 ds11 }) -}
94ae191c7be8b8307ec5a07176b30931
  topSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest [InflectionData.Topic]
  RecSel InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLSLLLLLLLLLL),1*U(A,A,A,A,A,A,1*U,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.InflectionSystem ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ->
                 ds7 }) -}
17d7b2e9ec588d6bd99bab7f098f36f7
  traSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest [InflectionData.Transitivity]
  RecSel InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLLSL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.InflectionSystem ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ->
                 ds16 }) -}
629ad62232c211277f83c5bfbea3bcb1
  voiSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest [InflectionData.Voice]
  RecSel InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLSLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.InflectionSystem ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ->
                 ds14 }) -}
5fdcf2bef393c39136e0bea7f04d5cde
  volSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest [InflectionData.Volition]
  RecSel InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLLLS),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.InflectionSystem ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ->
                 ds17 }) -}
instance GHC.Enum.Enum [InflectionData.LexCat]
  = InflectionData.$fEnumLexCat
instance GHC.Classes.Eq [(,,,,,,,,,,,,,,,,)]
  = InflectionData.$fEq(,,,,,,,,,,,,,,,,)
instance GHC.Classes.Eq [InflectionData.Animacy]
  = InflectionData.$fEqAnimacy
instance GHC.Classes.Eq [InflectionData.Aspect]
  = InflectionData.$fEqAspect
instance GHC.Classes.Eq [InflectionData.Case]
  = InflectionData.$fEqCase
instance GHC.Classes.Eq [InflectionData.Definiteness]
  = InflectionData.$fEqDefiniteness
instance GHC.Classes.Eq [InflectionData.Evidentiality]
  = InflectionData.$fEqEvidentiality
instance GHC.Classes.Eq [InflectionData.Express]
  = InflectionData.$fEqExpress
instance GHC.Classes.Eq [InflectionData.Gender]
  = InflectionData.$fEqGender
instance GHC.Classes.Eq [InflectionData.Honorific]
  = InflectionData.$fEqHonorific
instance GHC.Classes.Eq [InflectionData.InflectionSystem]
  = InflectionData.$fEqInflectionSystem
instance GHC.Classes.Eq [InflectionData.LexCat]
  = InflectionData.$fEqLexCat
instance GHC.Classes.Eq [InflectionData.Manifest]
  = InflectionData.$fEqManifest
instance GHC.Classes.Eq [InflectionData.ManifestSystem]
  = InflectionData.$fEqManifestSystem
instance GHC.Classes.Eq [InflectionData.ManifestType]
  = InflectionData.$fEqManifestType
instance GHC.Classes.Eq [InflectionData.Mood]
  = InflectionData.$fEqMood
instance GHC.Classes.Eq [InflectionData.Number]
  = InflectionData.$fEqNumber
instance GHC.Classes.Eq [InflectionData.Person]
  = InflectionData.$fEqPerson
instance GHC.Classes.Eq [InflectionData.Polarity]
  = InflectionData.$fEqPolarity
instance GHC.Classes.Eq [InflectionData.Specificity]
  = InflectionData.$fEqSpecificity
instance GHC.Classes.Eq [InflectionData.Tense]
  = InflectionData.$fEqTense
instance GHC.Classes.Eq [InflectionData.Topic]
  = InflectionData.$fEqTopic
instance GHC.Classes.Eq [InflectionData.Transitivity]
  = InflectionData.$fEqTransitivity
instance GHC.Classes.Eq [InflectionData.Voice]
  = InflectionData.$fEqVoice
instance GHC.Classes.Eq [InflectionData.Volition]
  = InflectionData.$fEqVolition
instance GHC.Read.Read [InflectionData.Animacy]
  = InflectionData.$fReadAnimacy
instance GHC.Read.Read [InflectionData.Aspect]
  = InflectionData.$fReadAspect
instance GHC.Read.Read [InflectionData.Case]
  = InflectionData.$fReadCase
instance GHC.Read.Read [InflectionData.Definiteness]
  = InflectionData.$fReadDefiniteness
instance GHC.Read.Read [InflectionData.Evidentiality]
  = InflectionData.$fReadEvidentiality
instance GHC.Read.Read [InflectionData.Express]
  = InflectionData.$fReadExpress
instance GHC.Read.Read [InflectionData.Gender]
  = InflectionData.$fReadGender
instance GHC.Read.Read [InflectionData.Honorific]
  = InflectionData.$fReadHonorific
instance GHC.Read.Read [InflectionData.InflectionSystem]
  = InflectionData.$fReadInflectionSystem
instance GHC.Read.Read [InflectionData.LexCat]
  = InflectionData.$fReadLexCat
instance GHC.Read.Read [InflectionData.Manifest]
  = InflectionData.$fReadManifest
instance GHC.Read.Read [InflectionData.ManifestType]
  = InflectionData.$fReadManifestType
instance GHC.Read.Read [InflectionData.Mood]
  = InflectionData.$fReadMood
instance GHC.Read.Read [InflectionData.Number]
  = InflectionData.$fReadNumber
instance GHC.Read.Read [InflectionData.Person]
  = InflectionData.$fReadPerson
instance GHC.Read.Read [InflectionData.Polarity]
  = InflectionData.$fReadPolarity
instance GHC.Read.Read [InflectionData.Specificity]
  = InflectionData.$fReadSpecificity
instance GHC.Read.Read [InflectionData.Tense]
  = InflectionData.$fReadTense
instance GHC.Read.Read [InflectionData.Topic]
  = InflectionData.$fReadTopic
instance GHC.Read.Read [InflectionData.Transitivity]
  = InflectionData.$fReadTransitivity
instance GHC.Read.Read [InflectionData.Voice]
  = InflectionData.$fReadVoice
instance GHC.Read.Read [InflectionData.Volition]
  = InflectionData.$fReadVolition
instance GHC.Show.Show [(,,,,,,,,,,,,,,,,)]
  = InflectionData.$fShow(,,,,,,,,,,,,,,,,)
instance GHC.Show.Show [InflectionData.Animacy]
  = InflectionData.$fShowAnimacy
instance GHC.Show.Show [InflectionData.Aspect]
  = InflectionData.$fShowAspect
instance GHC.Show.Show [InflectionData.Case]
  = InflectionData.$fShowCase
instance GHC.Show.Show [InflectionData.Definiteness]
  = InflectionData.$fShowDefiniteness
instance GHC.Show.Show [InflectionData.Evidentiality]
  = InflectionData.$fShowEvidentiality
instance GHC.Show.Show [InflectionData.Express]
  = InflectionData.$fShowExpress
instance GHC.Show.Show [InflectionData.Gender]
  = InflectionData.$fShowGender
instance GHC.Show.Show [InflectionData.Honorific]
  = InflectionData.$fShowHonorific
instance GHC.Show.Show [InflectionData.InflectionSystem]
  = InflectionData.$fShowInflectionSystem
instance GHC.Show.Show [InflectionData.LexCat]
  = InflectionData.$fShowLexCat
instance GHC.Show.Show [InflectionData.Manifest]
  = InflectionData.$fShowManifest
instance GHC.Show.Show [InflectionData.ManifestSystem]
  = InflectionData.$fShowManifestSystem
instance GHC.Show.Show [InflectionData.ManifestType]
  = InflectionData.$fShowManifestType
instance GHC.Show.Show [InflectionData.Mood]
  = InflectionData.$fShowMood
instance GHC.Show.Show [InflectionData.Number]
  = InflectionData.$fShowNumber
instance GHC.Show.Show [InflectionData.Person]
  = InflectionData.$fShowPerson
instance GHC.Show.Show [InflectionData.Polarity]
  = InflectionData.$fShowPolarity
instance GHC.Show.Show [InflectionData.Specificity]
  = InflectionData.$fShowSpecificity
instance GHC.Show.Show [InflectionData.Tense]
  = InflectionData.$fShowTense
instance GHC.Show.Show [InflectionData.Topic]
  = InflectionData.$fShowTopic
instance GHC.Show.Show [InflectionData.Transitivity]
  = InflectionData.$fShowTransitivity
instance GHC.Show.Show [InflectionData.Voice]
  = InflectionData.$fShowVoice
instance GHC.Show.Show [InflectionData.Volition]
  = InflectionData.$fShowVolition
"SPEC $c/= @ (Express Gender) @ (Express Animacy) @ (Express
                                                      Case) @ (Express Number) @ (Express
                                                                                    Definiteness) @ (Express
                                                                                                       Specificity) @ (Express
                                                                                                                         Topic) @ (Express
                                                                                                                                     Person) @ (Express
                                                                                                                                                  Honorific) @ (Express
                                                                                                                                                                  Polarity) @ (Express
                                                                                                                                                                                 Tense) @ (Express
                                                                                                                                                                                             Aspect) @ (Express
                                                                                                                                                                                                          Mood) @ (Express
                                                                                                                                                                                                                     Voice) @ (Express
                                                                                                                                                                                                                                 Evidentiality) @ (Express
                                                                                                                                                                                                                                                     Transitivity) @ (Express
                                                                                                                                                                                                                                                                        Volition)" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                (InflectionData.Express
nflectionData.Gender)
dEq1 :: GHC.Classes.Eq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 (InflectionData.Express
nflectionData.Animacy)
dEq2 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Case)
dEq3 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Number)
dEq4 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Definiteness)
dEq5 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Specificity)
dEq6 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Topic)
dEq7 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Person)
dEq8 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Honorific)
dEq9 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Polarity)
dEq10 :: GHC.Classes.Eq
nflectionData.Express
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     InflectionData.Tense)
dEq11 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Aspect)
dEq12 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Mood)
dEq13 :: GHC.Classes.Eq
nflectionData.Express
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     InflectionData.Voice)
dEq14 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Evidentiality)
dEq15 :: GHC.Classes.Eq
nflectionData.Express
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     InflectionData.Transitivity)
dEq16 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Volition)
  InflectionData.$fEq(,,,,,,,,,,,,,,,,)_$c/= @ (InflectionData.Express
                                                  InflectionData.Gender)
                                             @ (InflectionData.Express InflectionData.Animacy)
                                             @ (InflectionData.Express InflectionData.Case)
                                             @ (InflectionData.Express InflectionData.Number)
                                             @ (InflectionData.Express InflectionData.Definiteness)
                                             @ (InflectionData.Express InflectionData.Specificity)
                                             @ (InflectionData.Express InflectionData.Topic)
                                             @ (InflectionData.Express InflectionData.Person)
                                             @ (InflectionData.Express InflectionData.Honorific)
                                             @ (InflectionData.Express InflectionData.Polarity)
                                             @ (InflectionData.Express InflectionData.Tense)
                                             @ (InflectionData.Express InflectionData.Aspect)
                                             @ (InflectionData.Express InflectionData.Mood)
                                             @ (InflectionData.Express InflectionData.Voice)
                                             @ (InflectionData.Express InflectionData.Evidentiality)
                                             @ (InflectionData.Express InflectionData.Transitivity)
                                             @ (InflectionData.Express InflectionData.Volition)
                                             $dEq
                                             $dEq1
                                             $dEq2
                                             $dEq3
                                             $dEq4
                                             $dEq5
                                             $dEq6
                                             $dEq7
                                             $dEq8
                                             $dEq9
                                             $dEq10
                                             $dEq11
                                             $dEq12
                                             $dEq13
                                             $dEq14
                                             $dEq15
                                             $dEq16
  = InflectionData.$fEq(,,,,,,,,,,,,,,,,)_$s$c/=
"SPEC $c== @ (Express Gender) @ (Express Animacy) @ (Express
                                                      Case) @ (Express Number) @ (Express
                                                                                    Definiteness) @ (Express
                                                                                                       Specificity) @ (Express
                                                                                                                         Topic) @ (Express
                                                                                                                                     Person) @ (Express
                                                                                                                                                  Honorific) @ (Express
                                                                                                                                                                  Polarity) @ (Express
                                                                                                                                                                                 Tense) @ (Express
                                                                                                                                                                                             Aspect) @ (Express
                                                                                                                                                                                                          Mood) @ (Express
                                                                                                                                                                                                                     Voice) @ (Express
                                                                                                                                                                                                                                 Evidentiality) @ (Express
                                                                                                                                                                                                                                                     Transitivity) @ (Express
                                                                                                                                                                                                                                                                        Volition)" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                (InflectionData.Express
nflectionData.Gender)
dEq1 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Animacy)
dEq2 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Case)
dEq3 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Number)
dEq4 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Definiteness)
dEq5 :: GHC.Classes.Eq
nflectionData.Express
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    InflectionData.Specificity)
dEq6 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Topic)
dEq7 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Person)
dEq8 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Honorific)
dEq9 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Polarity)
dEq10 :: GHC.Classes.Eq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  (InflectionData.Express
nflectionData.Tense)
dEq11 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Aspect)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      $dEq12 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Mood)
dEq13 :: GHC.Classes.Eq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  (InflectionData.Express
nflectionData.Voice)
dEq14 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Evidentiality)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      $dEq15 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Transitivity)
dEq16 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Volition)
  InflectionData.$fEq(,,,,,,,,,,,,,,,,)_$c== @ (InflectionData.Express
                                                  InflectionData.Gender)
                                             @ (InflectionData.Express InflectionData.Animacy)
                                             @ (InflectionData.Express InflectionData.Case)
                                             @ (InflectionData.Express InflectionData.Number)
                                             @ (InflectionData.Express InflectionData.Definiteness)
                                             @ (InflectionData.Express InflectionData.Specificity)
                                             @ (InflectionData.Express InflectionData.Topic)
                                             @ (InflectionData.Express InflectionData.Person)
                                             @ (InflectionData.Express InflectionData.Honorific)
                                             @ (InflectionData.Express InflectionData.Polarity)
                                             @ (InflectionData.Express InflectionData.Tense)
                                             @ (InflectionData.Express InflectionData.Aspect)
                                             @ (InflectionData.Express InflectionData.Mood)
                                             @ (InflectionData.Express InflectionData.Voice)
                                             @ (InflectionData.Express InflectionData.Evidentiality)
                                             @ (InflectionData.Express InflectionData.Transitivity)
                                             @ (InflectionData.Express InflectionData.Volition)
                                             $dEq
                                             $dEq1
                                             $dEq2
                                             $dEq3
                                             $dEq4
                                             $dEq5
                                             $dEq6
                                             $dEq7
                                             $dEq8
                                             $dEq9
                                             $dEq10
                                             $dEq11
                                             $dEq12
                                             $dEq13
                                             $dEq14
                                             $dEq15
                                             $dEq16
  = InflectionData.$fEq(,,,,,,,,,,,,,,,,)_$s$c==
"SPEC $c== @ Volition" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                 InflectionData.Volition
  InflectionData.$fEqExpress_$c==10 @ InflectionData.Volition $dEq
  = InflectionData.$fEqExpress_$s$c==13
"SPEC $c== @ [Volition]" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                   [InflectionData.Volition]
  InflectionData.$fEqManifest_$c== @ [InflectionData.Volition] $dEq
  = InflectionData.$fEqManifest_$s$c==16
"SPEC $cshowsPrec @ Animacy" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                         InflectionData.Animacy
  InflectionData.$fShowExpress_$cshowsPrec @ InflectionData.Animacy
                                           $dShow
  = InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec16
"SPEC $cshowsPrec @ Aspect" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                        InflectionData.Aspect
  InflectionData.$fShowExpress_$cshowsPrec @ InflectionData.Aspect
                                           $dShow
  = InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec6
"SPEC $cshowsPrec @ Case" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                      InflectionData.Case
  InflectionData.$fShowExpress_$cshowsPrec @ InflectionData.Case
                                           $dShow
  = InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec15
"SPEC $cshowsPrec @ Definiteness" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                              InflectionData.Definiteness
  InflectionData.$fShowExpress_$cshowsPrec @ InflectionData.Definiteness
                                           $dShow
  = InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec13
"SPEC $cshowsPrec @ Evidentiality" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                               InflectionData.Evidentiality
  InflectionData.$fShowExpress_$cshowsPrec @ InflectionData.Evidentiality
                                           $dShow
  = InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec3
"SPEC $cshowsPrec @ Gender" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                        InflectionData.Gender
  InflectionData.$fShowExpress_$cshowsPrec @ InflectionData.Gender
                                           $dShow
  = InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec17
"SPEC $cshowsPrec @ Honorific" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                           InflectionData.Honorific
  InflectionData.$fShowExpress_$cshowsPrec @ InflectionData.Honorific
                                           $dShow
  = InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec9
"SPEC $cshowsPrec @ Mood" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                      InflectionData.Mood
  InflectionData.$fShowExpress_$cshowsPrec @ InflectionData.Mood
                                           $dShow
  = InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec5
"SPEC $cshowsPrec @ Number" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                        InflectionData.Number
  InflectionData.$fShowExpress_$cshowsPrec @ InflectionData.Number
                                           $dShow
  = InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec14
"SPEC $cshowsPrec @ Person" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                        InflectionData.Person
  InflectionData.$fShowExpress_$cshowsPrec @ InflectionData.Person
                                           $dShow
  = InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec10
"SPEC $cshowsPrec @ Polarity" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                          InflectionData.Polarity
  InflectionData.$fShowExpress_$cshowsPrec @ InflectionData.Polarity
                                           $dShow
  = InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec8
"SPEC $cshowsPrec @ Specificity" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                             InflectionData.Specificity
  InflectionData.$fShowExpress_$cshowsPrec @ InflectionData.Specificity
                                           $dShow
  = InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec12
"SPEC $cshowsPrec @ Tense" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                       InflectionData.Tense
  InflectionData.$fShowExpress_$cshowsPrec @ InflectionData.Tense
                                           $dShow
  = InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec7
"SPEC $cshowsPrec @ Topic" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                       InflectionData.Topic
  InflectionData.$fShowExpress_$cshowsPrec @ InflectionData.Topic
                                           $dShow
  = InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec11
"SPEC $cshowsPrec @ Transitivity" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                              InflectionData.Transitivity
  InflectionData.$fShowExpress_$cshowsPrec @ InflectionData.Transitivity
                                           $dShow
  = InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec2
"SPEC $cshowsPrec @ Voice" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                       InflectionData.Voice
  InflectionData.$fShowExpress_$cshowsPrec @ InflectionData.Voice
                                           $dShow
  = InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec4
"SPEC $cshowsPrec @ Volition" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                          InflectionData.Volition
  InflectionData.$fShowExpress_$cshowsPrec @ InflectionData.Volition
                                           $dShow
  = InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec1
"SPEC $cshowsPrec @ [Animacy]" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                           [InflectionData.Animacy]
  InflectionData.$fShowManifest_$cshowsPrec @ [InflectionData.Animacy]
                                            $dShow
  = InflectionData.$fShowManifest_$s$cshowsPrec1
"SPEC $cshowsPrec @ [Aspect]" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                          [InflectionData.Aspect]
  InflectionData.$fShowManifest_$cshowsPrec @ [InflectionData.Aspect]
                                            $dShow
  = InflectionData.$fShowManifest_$s$cshowsPrec11
"SPEC $cshowsPrec @ [Case]" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                        [InflectionData.Case]
  InflectionData.$fShowManifest_$cshowsPrec @ [InflectionData.Case]
                                            $dShow
  = InflectionData.$fShowManifest_$s$cshowsPrec2
"SPEC $cshowsPrec @ [Definiteness]" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                [InflectionData.Definiteness]
  InflectionData.$fShowManifest_$cshowsPrec @ [InflectionData.Definiteness]
                                            $dShow
  = InflectionData.$fShowManifest_$s$cshowsPrec4
"SPEC $cshowsPrec @ [Evidentiality]" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                 [InflectionData.Evidentiality]
  InflectionData.$fShowManifest_$cshowsPrec @ [InflectionData.Evidentiality]
                                            $dShow
  = InflectionData.$fShowManifest_$s$cshowsPrec14
"SPEC $cshowsPrec @ [Gender]" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                          [InflectionData.Gender]
  InflectionData.$fShowManifest_$cshowsPrec @ [InflectionData.Gender]
                                            $dShow
  = InflectionData.$fShowManifest_$s$cshowsPrec
"SPEC $cshowsPrec @ [Honorific]" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                             [InflectionData.Honorific]
  InflectionData.$fShowManifest_$cshowsPrec @ [InflectionData.Honorific]
                                            $dShow
  = InflectionData.$fShowManifest_$s$cshowsPrec8
"SPEC $cshowsPrec @ [Mood]" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                        [InflectionData.Mood]
  InflectionData.$fShowManifest_$cshowsPrec @ [InflectionData.Mood]
                                            $dShow
  = InflectionData.$fShowManifest_$s$cshowsPrec12
"SPEC $cshowsPrec @ [Number]" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                          [InflectionData.Number]
  InflectionData.$fShowManifest_$cshowsPrec @ [InflectionData.Number]
                                            $dShow
  = InflectionData.$fShowManifest_$s$cshowsPrec3
"SPEC $cshowsPrec @ [Person]" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                          [InflectionData.Person]
  InflectionData.$fShowManifest_$cshowsPrec @ [InflectionData.Person]
                                            $dShow
  = InflectionData.$fShowManifest_$s$cshowsPrec7
"SPEC $cshowsPrec @ [Polarity]" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                            [InflectionData.Polarity]
  InflectionData.$fShowManifest_$cshowsPrec @ [InflectionData.Polarity]
                                            $dShow
  = InflectionData.$fShowManifest_$s$cshowsPrec9
"SPEC $cshowsPrec @ [Specificity]" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                               [InflectionData.Specificity]
  InflectionData.$fShowManifest_$cshowsPrec @ [InflectionData.Specificity]
                                            $dShow
  = InflectionData.$fShowManifest_$s$cshowsPrec5
"SPEC $cshowsPrec @ [Tense]" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                         [InflectionData.Tense]
  InflectionData.$fShowManifest_$cshowsPrec @ [InflectionData.Tense]
                                            $dShow
  = InflectionData.$fShowManifest_$s$cshowsPrec10
"SPEC $cshowsPrec @ [Topic]" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                         [InflectionData.Topic]
  InflectionData.$fShowManifest_$cshowsPrec @ [InflectionData.Topic]
                                            $dShow
  = InflectionData.$fShowManifest_$s$cshowsPrec6
"SPEC $cshowsPrec @ [Transitivity]" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                [InflectionData.Transitivity]
  InflectionData.$fShowManifest_$cshowsPrec @ [InflectionData.Transitivity]
                                            $dShow
  = InflectionData.$fShowManifest_$s$cshowsPrec15
"SPEC $cshowsPrec @ [Voice]" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                         [InflectionData.Voice]
  InflectionData.$fShowManifest_$cshowsPrec @ [InflectionData.Voice]
                                            $dShow
  = InflectionData.$fShowManifest_$s$cshowsPrec13
"SPEC $cshowsPrec @ [Volition]" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                            [InflectionData.Volition]
  InflectionData.$fShowManifest_$cshowsPrec @ [InflectionData.Volition]
                                            $dShow
  = InflectionData.$fShowManifest_$s$cshowsPrec16
"SPEC $fEq(,,,,,,,,,,,,,,,,) @ (Express Gender) @ (Express
                                                    Animacy) @ (Express Case) @ (Express
                                                                                   Number) @ (Express
                                                                                                Definiteness) @ (Express
                                                                                                                   Specificity) @ (Express
                                                                                                                                     Topic) @ (Express
                                                                                                                                                 Person) @ (Express
                                                                                                                                                              Honorific) @ (Express
                                                                                                                                                                              Polarity) @ (Express
                                                                                                                                                                                             Tense) @ (Express
                                                                                                                                                                                                         Aspect) @ (Express
                                                                                                                                                                                                                      Mood) @ (Express
                                                                                                                                                                                                                                 Voice) @ (Express
                                                                                                                                                                                                                                             Evidentiality) @ (Express
                                                                                                                                                                                                                                                                 Transitivity) @ (Express
                                                                                                                                                                                                                                                                                    Volition)" [ALWAYS] forall $dEq :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Gender)
dEq1 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Animacy)
dEq2 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Case)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     $dEq3 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Number)
dEq4 :: GHC.Classes.Eq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                (InflectionData.Express
nflectionData.Definiteness)
dEq5 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Specificity)
dEq6 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Topic)
dEq7 :: GHC.Classes.Eq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                (InflectionData.Express
nflectionData.Person)
dEq8 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Honorific)
dEq9 :: GHC.Classes.Eq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                (InflectionData.Express
nflectionData.Polarity)
dEq10 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Tense)
dEq11 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Aspect)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     $dEq12 :: GHC.Classes.Eq
nflectionData.Express
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    InflectionData.Mood)
dEq13 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Voice)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     $dEq14 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Evidentiality)
dEq15 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Transitivity)
dEq16 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Volition)
  InflectionData.$fEq(,,,,,,,,,,,,,,,,) @ (InflectionData.Express
                                             InflectionData.Gender)
                                        @ (InflectionData.Express InflectionData.Animacy)
                                        @ (InflectionData.Express InflectionData.Case)
                                        @ (InflectionData.Express InflectionData.Number)
                                        @ (InflectionData.Express InflectionData.Definiteness)
                                        @ (InflectionData.Express InflectionData.Specificity)
                                        @ (InflectionData.Express InflectionData.Topic)
                                        @ (InflectionData.Express InflectionData.Person)
                                        @ (InflectionData.Express InflectionData.Honorific)
                                        @ (InflectionData.Express InflectionData.Polarity)
                                        @ (InflectionData.Express InflectionData.Tense)
                                        @ (InflectionData.Express InflectionData.Aspect)
                                        @ (InflectionData.Express InflectionData.Mood)
                                        @ (InflectionData.Express InflectionData.Voice)
                                        @ (InflectionData.Express InflectionData.Evidentiality)
                                        @ (InflectionData.Express InflectionData.Transitivity)
                                        @ (InflectionData.Express InflectionData.Volition)
                                        $dEq
                                        $dEq1
                                        $dEq2
                                        $dEq3
                                        $dEq4
                                        $dEq5
                                        $dEq6
                                        $dEq7
                                        $dEq8
                                        $dEq9
                                        $dEq10
                                        $dEq11
                                        $dEq12
                                        $dEq13
                                        $dEq14
                                        $dEq15
                                        $dEq16
  = InflectionData.$fEq(,,,,,,,,,,,,,,,,)_$s$fEq(,,,,,,,,,,,,,,,,)
"SPEC/InflectionData $dmreadsPrec @ Animacy" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                         InflectionData.Animacy
  GHC.Read.$dmreadsPrec @ InflectionData.Animacy $dRead
  = InflectionData.$fReadAnimacy_$s$dmreadsPrec
"SPEC/InflectionData $dmreadsPrec @ Aspect" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                        InflectionData.Aspect
  GHC.Read.$dmreadsPrec @ InflectionData.Aspect $dRead
  = InflectionData.$fReadAspect_$s$dmreadsPrec
"SPEC/InflectionData $dmreadsPrec @ Case" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                      InflectionData.Case
  GHC.Read.$dmreadsPrec @ InflectionData.Case $dRead
  = InflectionData.$fReadCase_$s$dmreadsPrec
"SPEC/InflectionData $dmreadsPrec @ Definiteness" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                              InflectionData.Definiteness
  GHC.Read.$dmreadsPrec @ InflectionData.Definiteness $dRead
  = InflectionData.$fReadDefiniteness_$s$dmreadsPrec
"SPEC/InflectionData $dmreadsPrec @ Evidentiality" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                               InflectionData.Evidentiality
  GHC.Read.$dmreadsPrec @ InflectionData.Evidentiality $dRead
  = InflectionData.$fReadEvidentiality_$s$dmreadsPrec
"SPEC/InflectionData $dmreadsPrec @ Gender" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                        InflectionData.Gender
  GHC.Read.$dmreadsPrec @ InflectionData.Gender $dRead
  = InflectionData.$fReadGender_$s$dmreadsPrec
"SPEC/InflectionData $dmreadsPrec @ Honorific" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                           InflectionData.Honorific
  GHC.Read.$dmreadsPrec @ InflectionData.Honorific $dRead
  = InflectionData.$fReadHonorific_$s$dmreadsPrec
"SPEC/InflectionData $dmreadsPrec @ LexCat" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                        InflectionData.LexCat
  GHC.Read.$dmreadsPrec @ InflectionData.LexCat $dRead
  = InflectionData.$fReadLexCat_$s$dmreadsPrec
"SPEC/InflectionData $dmreadsPrec @ ManifestType" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                              InflectionData.ManifestType
  GHC.Read.$dmreadsPrec @ InflectionData.ManifestType $dRead
  = InflectionData.$fReadManifestType_$s$dmreadsPrec
"SPEC/InflectionData $dmreadsPrec @ Mood" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                      InflectionData.Mood
  GHC.Read.$dmreadsPrec @ InflectionData.Mood $dRead
  = InflectionData.$fReadMood_$s$dmreadsPrec
"SPEC/InflectionData $dmreadsPrec @ Number" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                        InflectionData.Number
  GHC.Read.$dmreadsPrec @ InflectionData.Number $dRead
  = InflectionData.$fReadNumber_$s$dmreadsPrec
"SPEC/InflectionData $dmreadsPrec @ Person" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                        InflectionData.Person
  GHC.Read.$dmreadsPrec @ InflectionData.Person $dRead
  = InflectionData.$fReadPerson_$s$dmreadsPrec
"SPEC/InflectionData $dmreadsPrec @ Polarity" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                          InflectionData.Polarity
  GHC.Read.$dmreadsPrec @ InflectionData.Polarity $dRead
  = InflectionData.$fReadPolarity_$s$dmreadsPrec
"SPEC/InflectionData $dmreadsPrec @ Specificity" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                             InflectionData.Specificity
  GHC.Read.$dmreadsPrec @ InflectionData.Specificity $dRead
  = InflectionData.$fReadSpecificity_$s$dmreadsPrec
"SPEC/InflectionData $dmreadsPrec @ Tense" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                       InflectionData.Tense
  GHC.Read.$dmreadsPrec @ InflectionData.Tense $dRead
  = InflectionData.$fReadTense_$s$dmreadsPrec
"SPEC/InflectionData $dmreadsPrec @ Topic" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                       InflectionData.Topic
  GHC.Read.$dmreadsPrec @ InflectionData.Topic $dRead
  = InflectionData.$fReadTopic_$s$dmreadsPrec
"SPEC/InflectionData $dmreadsPrec @ Transitivity" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                              InflectionData.Transitivity
  GHC.Read.$dmreadsPrec @ InflectionData.Transitivity $dRead
  = InflectionData.$fReadTransitivity_$s$dmreadsPrec
"SPEC/InflectionData $dmreadsPrec @ Voice" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                       InflectionData.Voice
  GHC.Read.$dmreadsPrec @ InflectionData.Voice $dRead
  = InflectionData.$fReadVoice_$s$dmreadsPrec
"SPEC/InflectionData $dmreadsPrec @ Volition" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                          InflectionData.Volition
  GHC.Read.$dmreadsPrec @ InflectionData.Volition $dRead
  = InflectionData.$fReadVolition_$s$dmreadsPrec
"SPEC/InflectionData $fEq(,) @ Morpheme @ (Express Gender,
                                          Express Animacy,
                                          Express Case,
                                          Express Number,
                                          Express Definiteness,
                                          Express Specificity,
                                          Express Topic,
                                          Express Person,
                                          Express Honorific,
                                          Express Polarity,
                                          Express Tense,
                                          Express Aspect,
                                          Express Mood,
                                          Express Voice,
                                          Express Evidentiality,
                                          Express Transitivity,
                                          Express Volition)" [ALWAYS] forall $dEq :: GHC.Classes.Eq
honemeData.Morpheme
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     $dEq1 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Gender,
nflectionData.Express
nflectionData.Animacy,
nflectionData.Express
nflectionData.Case,
nflectionData.Express
nflectionData.Number,
nflectionData.Express
nflectionData.Definiteness,
nflectionData.Express
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   InflectionData.Specificity,
nflectionData.Express
nflectionData.Topic,
nflectionData.Express
nflectionData.Person,
nflectionData.Express
nflectionData.Honorific,
nflectionData.Express
nflectionData.Polarity,
nflectionData.Express
nflectionData.Tense,
nflectionData.Express
nflectionData.Aspect,
nflectionData.Express
nflectionData.Mood,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 InflectionData.Express
nflectionData.Voice,
nflectionData.Express
nflectionData.Evidentiality,
nflectionData.Express
nflectionData.Transitivity,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 InflectionData.Express
nflectionData.Volition)
  GHC.Classes.$fEq(,) @ PhonemeData.Morpheme
                      @ (InflectionData.Express InflectionData.Gender,
                         InflectionData.Express InflectionData.Animacy,
                         InflectionData.Express InflectionData.Case,
                         InflectionData.Express InflectionData.Number,
                         InflectionData.Express InflectionData.Definiteness,
                         InflectionData.Express InflectionData.Specificity,
                         InflectionData.Express InflectionData.Topic,
                         InflectionData.Express InflectionData.Person,
                         InflectionData.Express InflectionData.Honorific,
                         InflectionData.Express InflectionData.Polarity,
                         InflectionData.Express InflectionData.Tense,
                         InflectionData.Express InflectionData.Aspect,
                         InflectionData.Express InflectionData.Mood,
                         InflectionData.Express InflectionData.Voice,
                         InflectionData.Express InflectionData.Evidentiality,
                         InflectionData.Express InflectionData.Transitivity,
                         InflectionData.Express InflectionData.Volition)
                      $dEq
                      $dEq1
  = InflectionData.$fEqManifestSystem_$s$fEq(,)
"SPEC/InflectionData $fEq(,,) @ LexCat @ ManifestType @ Int" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                                       InflectionData.LexCat
                                                                             $dEq1 :: GHC.Classes.Eq
                                                                                        InflectionData.ManifestType
                                                                             $dEq2 :: GHC.Classes.Eq
                                                                                        GHC.Types.Int
  GHC.Classes.$fEq(,,) @ InflectionData.LexCat
                       @ InflectionData.ManifestType
                       @ GHC.Types.Int
                       $dEq
                       $dEq1
                       $dEq2
  = InflectionData.$fEqManifest_$s$fEq(,,)
"SPEC/InflectionData $fEq(,,)_$c/= @ LexCat @ ManifestType @ Int" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                                            InflectionData.LexCat
                                                                                  $dEq1 :: GHC.Classes.Eq
                                                                                             InflectionData.ManifestType
                                                                                  $dEq2 :: GHC.Classes.Eq
                                                                                             GHC.Types.Int
  GHC.Classes.$fEq(,,)_$c/= @ InflectionData.LexCat
                            @ InflectionData.ManifestType
                            @ GHC.Types.Int
                            $dEq
                            $dEq1
                            $dEq2
  = InflectionData.$fEqManifest_$s$fEq(,,)_$c/=
"SPEC/InflectionData readListDefault @ InflectionSystem" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                                     InflectionData.InflectionSystem
  GHC.Read.readListDefault @ InflectionData.InflectionSystem $dRead
  = InflectionData.$fReadInflectionSystem_$sreadListDefault
"SPEC/InflectionData readListDefault @ LexCat" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                           InflectionData.LexCat
  GHC.Read.readListDefault @ InflectionData.LexCat $dRead
  = InflectionData.$fReadLexCat_$sreadListDefault
"SPEC/InflectionData readListDefault @ ManifestType" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                                 InflectionData.ManifestType
  GHC.Read.readListDefault @ InflectionData.ManifestType $dRead
  = InflectionData.$fReadManifestType_$sreadListDefault
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

