
==================== FINAL INTERFACE ====================
2016-12-06 20:48:58.722274 UTC

interface conla_1eA9qWUPH9nBowcXqqaV8r:InflectionData [orphan module] 7103
  interface hash: bdf53ed9c0fc4e19ab7f092c47b331ad
  ABI hash: 3d10fd8ebdfb88f2d9b18403b3318120
  export-list hash: bbf9a431e828cdbe291def24777d4f2e
  orphan hash: 8a9c3e952885696434b3f8b0772ebbc1
  flag hash: f6794f28a1d9a693363b149a5d158050
  sig of: Nothing
  used TH splices: False
  where
exports:
  InflectionData.Animacy{InflectionData.AN InflectionData.HUM InflectionData.INAN InflectionData.NHUM InflectionData.UANI InflectionData.ZO}
  InflectionData.Aspect{InflectionData.CONT InflectionData.HAB InflectionData.IPFV InflectionData.NNPROG InflectionData.NPROG InflectionData.PFV InflectionData.PROG InflectionData.UASP}
  InflectionData.Case{InflectionData.ABE InflectionData.ABL InflectionData.ABS InflectionData.ABS2 InflectionData.ABS3 InflectionData.ACC InflectionData.ADP InflectionData.BEN InflectionData.CAUS InflectionData.COMIT InflectionData.COMP InflectionData.DAT InflectionData.DIR InflectionData.DISTR InflectionData.DRT1 InflectionData.DRT2 InflectionData.DTR InflectionData.EQU InflectionData.ERG InflectionData.ERG2 InflectionData.GEN InflectionData.IDEN InflectionData.INDIR InflectionData.INS InflectionData.INSCOMIT InflectionData.INTR InflectionData.LAT InflectionData.LOC InflectionData.MTR InflectionData.NOM InflectionData.NOM2 InflectionData.OBJ InflectionData.OBL1 InflectionData.OBL2 InflectionData.OBL3 InflectionData.OBL4 InflectionData.OBL5 InflectionData.OBL6 InflectionData.ORN InflectionData.PART InflectionData.PEG InflectionData.POSS InflectionData.POST InflectionData.PREP InflectionData.PRIM InflectionData.SEC InflectionData.TR InflectionData.UCAS InflectionData.VOC}
  InflectionData.Definiteness{InflectionData.DEF InflectionData.INDF InflectionData.UDEF}
  InflectionData.Evidentiality{InflectionData.ASS InflectionData.AUD InflectionData.EXP InflectionData.HSY InflectionData.INFER InflectionData.NVIS InflectionData.QUO InflectionData.REP InflectionData.UEVI InflectionData.VIS}
  InflectionData.Express{InflectionData.Express InflectionData.NoExpress InflectionData.getExp}
  InflectionData.Gender{InflectionData.COM InflectionData.F InflectionData.M InflectionData.N InflectionData.UGEN}
  InflectionData.Honorific{InflectionData.FAM InflectionData.FORM InflectionData.NEU InflectionData.UHON}
  InflectionData.InflectionSystem{InflectionData.InflectionSystem InflectionData.aniSys InflectionData.aspSys InflectionData.casSys InflectionData.defSys InflectionData.eviSys InflectionData.genSys InflectionData.honSys InflectionData.mooSys InflectionData.numSys InflectionData.perSys InflectionData.polSys InflectionData.speSys InflectionData.tenSys InflectionData.topSys InflectionData.traSys InflectionData.voiSys InflectionData.volSys}
  InflectionData.LexCat{InflectionData.Adj InflectionData.Adpo InflectionData.Adv InflectionData.Comp InflectionData.Det InflectionData.Infl InflectionData.Noun InflectionData.Obj InflectionData.Pron InflectionData.Subj InflectionData.Verb}
  InflectionData.Manifest{InflectionData.Manifest InflectionData.NoManifest}
  InflectionData.ManifestSystem{InflectionData.ManifestSystem InflectionData.manSysCombos InflectionData.manSysLC InflectionData.manSysType}
  InflectionData.ManifestType{InflectionData.Particle InflectionData.Prefix InflectionData.Suffix}
  InflectionData.Mood{InflectionData.COND InflectionData.DEO InflectionData.EPIS InflectionData.IMP InflectionData.IND InflectionData.IRR InflectionData.JUS InflectionData.OPT InflectionData.POT InflectionData.SBJV InflectionData.UMOO}
  InflectionData.Number{InflectionData.DU InflectionData.PA InflectionData.PL InflectionData.SG InflectionData.TRI InflectionData.UNUM}
  InflectionData.Person{InflectionData.FIRST InflectionData.FSTEXCL InflectionData.FSTINCL InflectionData.SECOND InflectionData.THIRD InflectionData.THRDOBV InflectionData.THRDPROX InflectionData.UPER}
  InflectionData.Polarity{InflectionData.AFF InflectionData.NEG InflectionData.UPOL}
  InflectionData.Specificity{InflectionData.NSPEC InflectionData.SPEC InflectionData.USPE}
  InflectionData.Tense{InflectionData.AFUT InflectionData.AFUT1 InflectionData.AFUT2 InflectionData.AFUT3 InflectionData.APRS InflectionData.APST InflectionData.FUT InflectionData.FUTPER InflectionData.PFUT InflectionData.PPRS InflectionData.PPST InflectionData.PPST1 InflectionData.PPST2 InflectionData.PPST3 InflectionData.PRS InflectionData.PRSPER InflectionData.PST InflectionData.PSTPER InflectionData.UTEN}
  InflectionData.Topic{InflectionData.NTOP InflectionData.TOP InflectionData.UTOP}
  InflectionData.Transitivity{InflectionData.DITRANS InflectionData.MTRANS InflectionData.NTRANS InflectionData.TRANS InflectionData.UTRA}
  InflectionData.Voice{InflectionData.ACTIVE InflectionData.MIDDLE InflectionData.PASSIVE InflectionData.UVOI}
  InflectionData.Volition{InflectionData.NVOL InflectionData.UVOL InflectionData.VOL}
module dependencies: OtherData PhonemeData
package dependencies: base-4.8.2.0* ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Monoid
                         base-4.8.2.0:Data.Type.Equality base-4.8.2.0:GHC.Generics
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.Enum debc6de3086023a15993ab0cecffb90b
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:GHC.Read b423b4506a014855edbd329b567629f3
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  base-4.8.2.0:Text.ParserCombinators.ReadPrec 2590e0e0a57a86ac7c62727f4d868dd2
import  -/  base-4.8.2.0:Text.Read.Lex 724ca44ddd38ddc5f47a501d62736c26
import  -/  OtherData 37db5ddc38f8875c91a0806c561b30cd
  exports: f505dec72f229982fb85e59b44566731
import  -/  PhonemeData 408b6488aa28ce44ef05793241013f6f
  exports: c711b36c9b7415c6d00ea9681146dbcb
  Morpheme 383812fe40de4e6210cee815bfc93a6d
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
b0a24ad20939906e8d87ed3073f32603
  $fEnumLexCat :: GHC.Enum.Enum InflectionData.LexCat
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.LexCat
                  InflectionData.$fEnumLexCat_$csucc
                  InflectionData.$fEnumLexCat_$cpred
                  InflectionData.$fEnumLexCat_$ctoEnum
                  InflectionData.$fEnumLexCat_$cfromEnum
                  InflectionData.$fEnumLexCat_$cenumFrom
                  InflectionData.$fEnumLexCat_$cenumFromThen
                  InflectionData.$fEnumLexCat_$cenumFromTo
                  InflectionData.$fEnumLexCat_$cenumFromThenTo -}
b0a24ad20939906e8d87ed3073f32603
  $fEnumLexCat1 :: GHC.Prim.Int# -> InflectionData.LexCat
  {- Arity: 1, Strictness: <L,U>b -}
b0a24ad20939906e8d87ed3073f32603
  $fEnumLexCat2 :: InflectionData.LexCat
  {- Strictness: b -}
b0a24ad20939906e8d87ed3073f32603
  $fEnumLexCat3 :: InflectionData.LexCat
  {- Strictness: b -}
b0a24ad20939906e8d87ed3073f32603
  $fEnumLexCat_$cenumFrom ::
    InflectionData.LexCat -> [InflectionData.LexCat]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ a40 :: InflectionData.LexCat ->
                 case a40 of x1 { DEFAULT ->
                 let {
                   x0 :: GHC.Prim.Int#
                   = GHC.Prim.dataToTag# @ InflectionData.LexCat x1
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.># x0 10) of wild {
                   GHC.Types.False -> InflectionData.$fEnumLexCat_go x0
                   GHC.Types.True -> GHC.Types.[] @ InflectionData.LexCat } }) -}
b0a24ad20939906e8d87ed3073f32603
  $fEnumLexCat_$cenumFromThen ::
    InflectionData.LexCat
    -> InflectionData.LexCat -> [InflectionData.LexCat]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a40 :: InflectionData.LexCat
                   b :: InflectionData.LexCat ->
                 case a40 of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 let {
                   a# :: GHC.Prim.Int#
                   = GHC.Prim.dataToTag# @ InflectionData.LexCat x1
                 } in
                 let {
                   b# :: GHC.Prim.Int#
                   = GHC.Prim.dataToTag# @ InflectionData.LexCat x2
                 } in
                 let {
                   $j :: GHC.Prim.Int# -> [InflectionData.LexCat]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ y :: GHC.Prim.Int#[OneShot] ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# b# a#) of wild {
                       GHC.Types.False
                       -> GHC.Enum.efdtIntDnFB
                            @ [InflectionData.LexCat]
                            InflectionData.$fEnumLexCat_c1
                            (GHC.Types.[] @ InflectionData.LexCat)
                            a#
                            b#
                            y
                       GHC.Types.True
                       -> GHC.Enum.efdtIntUpFB
                            @ [InflectionData.LexCat]
                            InflectionData.$fEnumLexCat_c1
                            (GHC.Types.[] @ InflectionData.LexCat)
                            a#
                            b#
                            y }
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.># a# b#) of wild {
                   GHC.Types.False -> $j 10 GHC.Types.True -> $j 0 } } }) -}
b0a24ad20939906e8d87ed3073f32603
  $fEnumLexCat_$cenumFromThenTo ::
    InflectionData.LexCat
    -> InflectionData.LexCat
    -> InflectionData.LexCat
    -> [InflectionData.LexCat]
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U>,
     Unfolding: (\ x1 :: InflectionData.LexCat
                   x2 :: InflectionData.LexCat
                   y :: InflectionData.LexCat ->
                 case x1 of x4 { DEFAULT ->
                 case x2 of x5 { DEFAULT ->
                 case y of x6 { DEFAULT ->
                 let {
                   x7 :: GHC.Prim.Int#
                   = GHC.Prim.dataToTag# @ InflectionData.LexCat x4
                 } in
                 let {
                   x8 :: GHC.Prim.Int#
                   = GHC.Prim.dataToTag# @ InflectionData.LexCat x5
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# x8 x7) of wild {
                   GHC.Types.False
                   -> GHC.Enum.efdtIntDnFB
                        @ [InflectionData.LexCat]
                        InflectionData.$fEnumLexCat_c
                        (GHC.Types.[] @ InflectionData.LexCat)
                        x7
                        x8
                        (GHC.Prim.dataToTag# @ InflectionData.LexCat x6)
                   GHC.Types.True
                   -> GHC.Enum.efdtIntUpFB
                        @ [InflectionData.LexCat]
                        InflectionData.$fEnumLexCat_c
                        (GHC.Types.[] @ InflectionData.LexCat)
                        x7
                        x8
                        (GHC.Prim.dataToTag# @ InflectionData.LexCat x6) } } } }) -}
b0a24ad20939906e8d87ed3073f32603
  $fEnumLexCat_$cenumFromTo ::
    InflectionData.LexCat
    -> InflectionData.LexCat -> [InflectionData.LexCat]
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ x :: InflectionData.LexCat
                   y :: InflectionData.LexCat ->
                 case x of x1 { DEFAULT ->
                 case y of x2 { DEFAULT ->
                 let {
                   x0 :: GHC.Prim.Int#
                   = GHC.Prim.dataToTag# @ InflectionData.LexCat x1
                 } in
                 let {
                   y1 :: GHC.Prim.Int#
                   = GHC.Prim.dataToTag# @ InflectionData.LexCat x2
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.># x0 y1) of wild {
                   GHC.Types.False
                   -> letrec {
                        go1 :: GHC.Prim.Int# -> [InflectionData.LexCat]
                          {- Arity: 1, Strictness: <L,U> -}
                        = \ x3 :: GHC.Prim.Int# ->
                          GHC.Types.:
                            @ InflectionData.LexCat
                            (case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# x3 0) of wild1 {
                               GHC.Types.False -> InflectionData.$fEnumLexCat1 x3
                               GHC.Types.True
                               -> case GHC.Prim.tagToEnum#
                                         @ GHC.Types.Bool
                                         (GHC.Prim.<=# x3 10) of wild2 {
                                    GHC.Types.False -> InflectionData.$fEnumLexCat1 x3
                                    GHC.Types.True
                                    -> GHC.Prim.tagToEnum# @ InflectionData.LexCat x3 } })
                            (case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.==# x3 y1) of wild1 {
                               GHC.Types.False -> go1 (GHC.Prim.+# x3 1)
                               GHC.Types.True -> GHC.Types.[] @ InflectionData.LexCat })
                      } in
                      go1 x0
                   GHC.Types.True -> GHC.Types.[] @ InflectionData.LexCat } } }) -}
b0a24ad20939906e8d87ed3073f32603
  $fEnumLexCat_$cfromEnum :: InflectionData.LexCat -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ a40 :: InflectionData.LexCat ->
                 case a40 of x1 { DEFAULT ->
                 GHC.Types.I# (GHC.Prim.dataToTag# @ InflectionData.LexCat x1) }) -}
b0a24ad20939906e8d87ed3073f32603
  $fEnumLexCat_$cpred ::
    InflectionData.LexCat -> InflectionData.LexCat
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a40 :: InflectionData.LexCat ->
                 case a40 of x1 { DEFAULT ->
                 case GHC.Prim.dataToTag# @ InflectionData.LexCat x1 of wild {
                   DEFAULT
                   -> GHC.Prim.tagToEnum#
                        @ InflectionData.LexCat
                        (GHC.Prim.+# wild (-1))
                   0 -> InflectionData.$fEnumLexCat2 } }) -}
b0a24ad20939906e8d87ed3073f32603
  $fEnumLexCat_$csucc ::
    InflectionData.LexCat -> InflectionData.LexCat
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a40 :: InflectionData.LexCat ->
                 case a40 of x1 { DEFAULT ->
                 case GHC.Prim.dataToTag# @ InflectionData.LexCat x1 of wild {
                   DEFAULT
                   -> GHC.Prim.tagToEnum# @ InflectionData.LexCat (GHC.Prim.+# wild 1)
                   10 -> InflectionData.$fEnumLexCat3 } }) -}
b0a24ad20939906e8d87ed3073f32603
  $fEnumLexCat_$ctoEnum :: GHC.Types.Int -> InflectionData.LexCat
  {- Arity: 1, Strictness: <S,1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: GHC.Types.Int ->
                 case w of ww { GHC.Types.I# ww1 ->
                 InflectionData.$w$ctoEnum ww1 }) -}
b0a24ad20939906e8d87ed3073f32603
  $fEnumLexCat_c ::
    GHC.Types.Int -> [InflectionData.LexCat] -> [InflectionData.LexCat]
  {- Arity: 2, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int ys :: [InflectionData.LexCat] ->
                 GHC.Types.:
                   @ InflectionData.LexCat
                   (InflectionData.$fEnumLexCat_$ctoEnum x)
                   ys) -}
b0a24ad20939906e8d87ed3073f32603
  $fEnumLexCat_c1 ::
    GHC.Types.Int -> [InflectionData.LexCat] -> [InflectionData.LexCat]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int ys :: [InflectionData.LexCat] ->
                 GHC.Types.:
                   @ InflectionData.LexCat
                   (case x of wild { GHC.Types.I# a40 ->
                    GHC.Prim.tagToEnum# @ InflectionData.LexCat a40 })
                   ys) -}
b0a24ad20939906e8d87ed3073f32603
  $fEnumLexCat_go :: GHC.Prim.Int# -> [InflectionData.LexCat]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
cb19d1abb62545c37dc9950250fbe424
  $fEq(,,,,,,,,,,,,,,,,) ::
    (GHC.Classes.Eq a, GHC.Classes.Eq b, GHC.Classes.Eq c,
     GHC.Classes.Eq d, GHC.Classes.Eq e, GHC.Classes.Eq f,
     GHC.Classes.Eq g, GHC.Classes.Eq h, GHC.Classes.Eq i,
     GHC.Classes.Eq j, GHC.Classes.Eq k, GHC.Classes.Eq l,
     GHC.Classes.Eq m, GHC.Classes.Eq n, GHC.Classes.Eq o,
     GHC.Classes.Eq p, GHC.Classes.Eq q) =>
    GHC.Classes.Eq (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)
  DFunId[0]
  {- Arity: 17, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a40
                      @ b
                      @ c
                      @ d
                      @ e
                      @ f
                      @ g
                      @ h
                      @ i
                      @ j
                      @ k
                      @ l
                      @ m
                      @ n
                      @ o
                      @ p
                      @ q
                      $dEq :: GHC.Classes.Eq a40
                      $dEq1 :: GHC.Classes.Eq b
                      $dEq2 :: GHC.Classes.Eq c
                      $dEq3 :: GHC.Classes.Eq d
                      $dEq4 :: GHC.Classes.Eq e
                      $dEq5 :: GHC.Classes.Eq f
                      $dEq6 :: GHC.Classes.Eq g
                      $dEq7 :: GHC.Classes.Eq h
                      $dEq8 :: GHC.Classes.Eq i
                      $dEq9 :: GHC.Classes.Eq j
                      $dEq10 :: GHC.Classes.Eq k
                      $dEq11 :: GHC.Classes.Eq l
                      $dEq12 :: GHC.Classes.Eq m
                      $dEq13 :: GHC.Classes.Eq n
                      $dEq14 :: GHC.Classes.Eq o
                      $dEq15 :: GHC.Classes.Eq p
                      $dEq16 :: GHC.Classes.Eq q.
                  @ (a40, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)
                  (InflectionData.$fEq(,,,,,,,,,,,,,,,,)_$c==
                     @ a40
                     @ b
                     @ c
                     @ d
                     @ e
                     @ f
                     @ g
                     @ h
                     @ i
                     @ j
                     @ k
                     @ l
                     @ m
                     @ n
                     @ o
                     @ p
                     @ q
                     $dEq
                     $dEq1
                     $dEq2
                     $dEq3
                     $dEq4
                     $dEq5
                     $dEq6
                     $dEq7
                     $dEq8
                     $dEq9
                     $dEq10
                     $dEq11
                     $dEq12
                     $dEq13
                     $dEq14
                     $dEq15
                     $dEq16)
                  (InflectionData.$fEq(,,,,,,,,,,,,,,,,)_$c/=
                     @ a40
                     @ b
                     @ c
                     @ d
                     @ e
                     @ f
                     @ g
                     @ h
                     @ i
                     @ j
                     @ k
                     @ l
                     @ m
                     @ n
                     @ o
                     @ p
                     @ q
                     $dEq
                     $dEq1
                     $dEq2
                     $dEq3
                     $dEq4
                     $dEq5
                     $dEq6
                     $dEq7
                     $dEq8
                     $dEq9
                     $dEq10
                     $dEq11
                     $dEq12
                     $dEq13
                     $dEq14
                     $dEq15
                     $dEq16) -}
bfe0851f0e437804e2ff89eeb11f517d
  $fEq(,,,,,,,,,,,,,,,,)_$c/= ::
    (GHC.Classes.Eq a, GHC.Classes.Eq b, GHC.Classes.Eq c,
     GHC.Classes.Eq d, GHC.Classes.Eq e, GHC.Classes.Eq f,
     GHC.Classes.Eq g, GHC.Classes.Eq h, GHC.Classes.Eq i,
     GHC.Classes.Eq j, GHC.Classes.Eq k, GHC.Classes.Eq l,
     GHC.Classes.Eq m, GHC.Classes.Eq n, GHC.Classes.Eq o,
     GHC.Classes.Eq p, GHC.Classes.Eq q) =>
    (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)
    -> (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)
    -> GHC.Types.Bool
  {- Arity: 19, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Unfolding: InlineRule (19, True, False)
                (\ @ a40
                   @ b
                   @ c
                   @ d
                   @ e
                   @ f
                   @ g
                   @ h
                   @ i
                   @ j
                   @ k
                   @ l
                   @ m
                   @ n
                   @ o
                   @ p
                   @ q
                   $dEq :: GHC.Classes.Eq a40
                   $dEq1 :: GHC.Classes.Eq b
                   $dEq2 :: GHC.Classes.Eq c
                   $dEq3 :: GHC.Classes.Eq d
                   $dEq4 :: GHC.Classes.Eq e
                   $dEq5 :: GHC.Classes.Eq f
                   $dEq6 :: GHC.Classes.Eq g
                   $dEq7 :: GHC.Classes.Eq h
                   $dEq8 :: GHC.Classes.Eq i
                   $dEq9 :: GHC.Classes.Eq j
                   $dEq10 :: GHC.Classes.Eq k
                   $dEq11 :: GHC.Classes.Eq l
                   $dEq12 :: GHC.Classes.Eq m
                   $dEq13 :: GHC.Classes.Eq n
                   $dEq14 :: GHC.Classes.Eq o
                   $dEq15 :: GHC.Classes.Eq p
                   $dEq16 :: GHC.Classes.Eq q
                   a41 :: (a40, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)
                   b1 :: (a40, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) ->
                 case InflectionData.$fEq(,,,,,,,,,,,,,,,,)_$c==
                        @ a40
                        @ b
                        @ c
                        @ d
                        @ e
                        @ f
                        @ g
                        @ h
                        @ i
                        @ j
                        @ k
                        @ l
                        @ m
                        @ n
                        @ o
                        @ p
                        @ q
                        $dEq
                        $dEq1
                        $dEq2
                        $dEq3
                        $dEq4
                        $dEq5
                        $dEq6
                        $dEq7
                        $dEq8
                        $dEq9
                        $dEq10
                        $dEq11
                        $dEq12
                        $dEq13
                        $dEq14
                        $dEq15
                        $dEq16
                        a41
                        b1 of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
f3939792c0564748dbf09caf6b618b54
  $fEq(,,,,,,,,,,,,,,,,)_$c== ::
    (GHC.Classes.Eq a, GHC.Classes.Eq b, GHC.Classes.Eq c,
     GHC.Classes.Eq d, GHC.Classes.Eq e, GHC.Classes.Eq f,
     GHC.Classes.Eq g, GHC.Classes.Eq h, GHC.Classes.Eq i,
     GHC.Classes.Eq j, GHC.Classes.Eq k, GHC.Classes.Eq l,
     GHC.Classes.Eq m, GHC.Classes.Eq n, GHC.Classes.Eq o,
     GHC.Classes.Eq p, GHC.Classes.Eq q) =>
    (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)
    -> (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)
    -> GHC.Types.Bool
  {- Arity: 19, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (19, True, False)
                (\ @ a40
                   @ b
                   @ c
                   @ d
                   @ e
                   @ f
                   @ g
                   @ h
                   @ i
                   @ j
                   @ k
                   @ l
                   @ m
                   @ n
                   @ o
                   @ p
                   @ q
                   w :: GHC.Classes.Eq a40
                   w1 :: GHC.Classes.Eq b
                   w2 :: GHC.Classes.Eq c
                   w3 :: GHC.Classes.Eq d
                   w4 :: GHC.Classes.Eq e
                   w5 :: GHC.Classes.Eq f
                   w6 :: GHC.Classes.Eq g
                   w7 :: GHC.Classes.Eq h
                   w8 :: GHC.Classes.Eq i
                   w9 :: GHC.Classes.Eq j
                   w10 :: GHC.Classes.Eq k
                   w11 :: GHC.Classes.Eq l
                   w12 :: GHC.Classes.Eq m
                   w13 :: GHC.Classes.Eq n
                   w14 :: GHC.Classes.Eq o
                   w15 :: GHC.Classes.Eq p
                   w16 :: GHC.Classes.Eq q
                   w17 :: (a40, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)
                   w18 :: (a40, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) ->
                 case w17 of ww { (,,,,,,,,,,,,,,,,) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ->
                 case w18 of ww18 { (,,,,,,,,,,,,,,,,) ww19 ww20 ww21 ww22 ww23 ww24 ww25 ww26 ww27 ww28 ww29 ww30 ww31 ww32 ww33 ww34 ww35 ->
                 InflectionData.$w$c==
                   @ a40
                   @ b
                   @ c
                   @ d
                   @ e
                   @ f
                   @ g
                   @ h
                   @ i
                   @ j
                   @ k
                   @ l
                   @ m
                   @ n
                   @ o
                   @ p
                   @ q
                   w
                   w1
                   w2
                   w3
                   w4
                   w5
                   w6
                   w7
                   w8
                   w9
                   w10
                   w11
                   w12
                   w13
                   w14
                   w15
                   w16
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww17
                   ww19
                   ww20
                   ww21
                   ww22
                   ww23
                   ww24
                   ww25
                   ww26
                   ww27
                   ww28
                   ww29
                   ww30
                   ww31
                   ww32
                   ww33
                   ww34
                   ww35 } }) -}
be127c50826e34bf6f5437752bc25cf6
  $fEq(,,,,,,,,,,,,,,,,)_$s$c/= ::
    (InflectionData.Express InflectionData.Gender,
     InflectionData.Express InflectionData.Animacy,
     InflectionData.Express InflectionData.Case,
     InflectionData.Express InflectionData.Number,
     InflectionData.Express InflectionData.Definiteness,
     InflectionData.Express InflectionData.Specificity,
     InflectionData.Express InflectionData.Topic,
     InflectionData.Express InflectionData.Person,
     InflectionData.Express InflectionData.Honorific,
     InflectionData.Express InflectionData.Polarity,
     InflectionData.Express InflectionData.Tense,
     InflectionData.Express InflectionData.Aspect,
     InflectionData.Express InflectionData.Mood,
     InflectionData.Express InflectionData.Voice,
     InflectionData.Express InflectionData.Evidentiality,
     InflectionData.Express InflectionData.Transitivity,
     InflectionData.Express InflectionData.Volition)
    -> (InflectionData.Express InflectionData.Gender,
        InflectionData.Express InflectionData.Animacy,
        InflectionData.Express InflectionData.Case,
        InflectionData.Express InflectionData.Number,
        InflectionData.Express InflectionData.Definiteness,
        InflectionData.Express InflectionData.Specificity,
        InflectionData.Express InflectionData.Topic,
        InflectionData.Express InflectionData.Person,
        InflectionData.Express InflectionData.Honorific,
        InflectionData.Express InflectionData.Polarity,
        InflectionData.Express InflectionData.Tense,
        InflectionData.Express InflectionData.Aspect,
        InflectionData.Express InflectionData.Mood,
        InflectionData.Express InflectionData.Voice,
        InflectionData.Express InflectionData.Evidentiality,
        InflectionData.Express InflectionData.Transitivity,
        InflectionData.Express InflectionData.Volition)
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLLLLLLLLLLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)><S(SLLLLLLLLLLLLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ a40 :: (InflectionData.Express InflectionData.Gender,
                           InflectionData.Express InflectionData.Animacy,
                           InflectionData.Express InflectionData.Case,
                           InflectionData.Express InflectionData.Number,
                           InflectionData.Express InflectionData.Definiteness,
                           InflectionData.Express InflectionData.Specificity,
                           InflectionData.Express InflectionData.Topic,
                           InflectionData.Express InflectionData.Person,
                           InflectionData.Express InflectionData.Honorific,
                           InflectionData.Express InflectionData.Polarity,
                           InflectionData.Express InflectionData.Tense,
                           InflectionData.Express InflectionData.Aspect,
                           InflectionData.Express InflectionData.Mood,
                           InflectionData.Express InflectionData.Voice,
                           InflectionData.Express InflectionData.Evidentiality,
                           InflectionData.Express InflectionData.Transitivity,
                           InflectionData.Express InflectionData.Volition)
                   b :: (InflectionData.Express InflectionData.Gender,
                         InflectionData.Express InflectionData.Animacy,
                         InflectionData.Express InflectionData.Case,
                         InflectionData.Express InflectionData.Number,
                         InflectionData.Express InflectionData.Definiteness,
                         InflectionData.Express InflectionData.Specificity,
                         InflectionData.Express InflectionData.Topic,
                         InflectionData.Express InflectionData.Person,
                         InflectionData.Express InflectionData.Honorific,
                         InflectionData.Express InflectionData.Polarity,
                         InflectionData.Express InflectionData.Tense,
                         InflectionData.Express InflectionData.Aspect,
                         InflectionData.Express InflectionData.Mood,
                         InflectionData.Express InflectionData.Voice,
                         InflectionData.Express InflectionData.Evidentiality,
                         InflectionData.Express InflectionData.Transitivity,
                         InflectionData.Express InflectionData.Volition) ->
                 case InflectionData.$fEq(,,,,,,,,,,,,,,,,)_$s$c== a40 b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
be90a960ada04d691285564c903d42cc
  $fEq(,,,,,,,,,,,,,,,,)_$s$c== ::
    (InflectionData.Express InflectionData.Gender,
     InflectionData.Express InflectionData.Animacy,
     InflectionData.Express InflectionData.Case,
     InflectionData.Express InflectionData.Number,
     InflectionData.Express InflectionData.Definiteness,
     InflectionData.Express InflectionData.Specificity,
     InflectionData.Express InflectionData.Topic,
     InflectionData.Express InflectionData.Person,
     InflectionData.Express InflectionData.Honorific,
     InflectionData.Express InflectionData.Polarity,
     InflectionData.Express InflectionData.Tense,
     InflectionData.Express InflectionData.Aspect,
     InflectionData.Express InflectionData.Mood,
     InflectionData.Express InflectionData.Voice,
     InflectionData.Express InflectionData.Evidentiality,
     InflectionData.Express InflectionData.Transitivity,
     InflectionData.Express InflectionData.Volition)
    -> (InflectionData.Express InflectionData.Gender,
        InflectionData.Express InflectionData.Animacy,
        InflectionData.Express InflectionData.Case,
        InflectionData.Express InflectionData.Number,
        InflectionData.Express InflectionData.Definiteness,
        InflectionData.Express InflectionData.Specificity,
        InflectionData.Express InflectionData.Topic,
        InflectionData.Express InflectionData.Person,
        InflectionData.Express InflectionData.Honorific,
        InflectionData.Express InflectionData.Polarity,
        InflectionData.Express InflectionData.Tense,
        InflectionData.Express InflectionData.Aspect,
        InflectionData.Express InflectionData.Mood,
        InflectionData.Express InflectionData.Voice,
        InflectionData.Express InflectionData.Evidentiality,
        InflectionData.Express InflectionData.Transitivity,
        InflectionData.Express InflectionData.Volition)
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLLLLLLLLLLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)><S(SLLLLLLLLLLLLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: (InflectionData.Express InflectionData.Gender,
                         InflectionData.Express InflectionData.Animacy,
                         InflectionData.Express InflectionData.Case,
                         InflectionData.Express InflectionData.Number,
                         InflectionData.Express InflectionData.Definiteness,
                         InflectionData.Express InflectionData.Specificity,
                         InflectionData.Express InflectionData.Topic,
                         InflectionData.Express InflectionData.Person,
                         InflectionData.Express InflectionData.Honorific,
                         InflectionData.Express InflectionData.Polarity,
                         InflectionData.Express InflectionData.Tense,
                         InflectionData.Express InflectionData.Aspect,
                         InflectionData.Express InflectionData.Mood,
                         InflectionData.Express InflectionData.Voice,
                         InflectionData.Express InflectionData.Evidentiality,
                         InflectionData.Express InflectionData.Transitivity,
                         InflectionData.Express InflectionData.Volition)
                   w1 :: (InflectionData.Express InflectionData.Gender,
                          InflectionData.Express InflectionData.Animacy,
                          InflectionData.Express InflectionData.Case,
                          InflectionData.Express InflectionData.Number,
                          InflectionData.Express InflectionData.Definiteness,
                          InflectionData.Express InflectionData.Specificity,
                          InflectionData.Express InflectionData.Topic,
                          InflectionData.Express InflectionData.Person,
                          InflectionData.Express InflectionData.Honorific,
                          InflectionData.Express InflectionData.Polarity,
                          InflectionData.Express InflectionData.Tense,
                          InflectionData.Express InflectionData.Aspect,
                          InflectionData.Express InflectionData.Mood,
                          InflectionData.Express InflectionData.Voice,
                          InflectionData.Express InflectionData.Evidentiality,
                          InflectionData.Express InflectionData.Transitivity,
                          InflectionData.Express InflectionData.Volition) ->
                 case w of ww { (,,,,,,,,,,,,,,,,) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ->
                 case w1 of ww18 { (,,,,,,,,,,,,,,,,) ww19 ww20 ww21 ww22 ww23 ww24 ww25 ww26 ww27 ww28 ww29 ww30 ww31 ww32 ww33 ww34 ww35 ->
                 InflectionData.$w$s$c==
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww17
                   ww19
                   ww20
                   ww21
                   ww22
                   ww23
                   ww24
                   ww25
                   ww26
                   ww27
                   ww28
                   ww29
                   ww30
                   ww31
                   ww32
                   ww33
                   ww34
                   ww35 } }) -}
4be40c34fae881fd20948ae76fa2866e
  $fEq(,,,,,,,,,,,,,,,,)_$s$fEq(,,,,,,,,,,,,,,,,) ::
    GHC.Classes.Eq
      (InflectionData.Express InflectionData.Gender,
       InflectionData.Express InflectionData.Animacy,
       InflectionData.Express InflectionData.Case,
       InflectionData.Express InflectionData.Number,
       InflectionData.Express InflectionData.Definiteness,
       InflectionData.Express InflectionData.Specificity,
       InflectionData.Express InflectionData.Topic,
       InflectionData.Express InflectionData.Person,
       InflectionData.Express InflectionData.Honorific,
       InflectionData.Express InflectionData.Polarity,
       InflectionData.Express InflectionData.Tense,
       InflectionData.Express InflectionData.Aspect,
       InflectionData.Express InflectionData.Mood,
       InflectionData.Express InflectionData.Voice,
       InflectionData.Express InflectionData.Evidentiality,
       InflectionData.Express InflectionData.Transitivity,
       InflectionData.Express InflectionData.Volition)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Gender,
                     InflectionData.Express InflectionData.Animacy,
                     InflectionData.Express InflectionData.Case,
                     InflectionData.Express InflectionData.Number,
                     InflectionData.Express InflectionData.Definiteness,
                     InflectionData.Express InflectionData.Specificity,
                     InflectionData.Express InflectionData.Topic,
                     InflectionData.Express InflectionData.Person,
                     InflectionData.Express InflectionData.Honorific,
                     InflectionData.Express InflectionData.Polarity,
                     InflectionData.Express InflectionData.Tense,
                     InflectionData.Express InflectionData.Aspect,
                     InflectionData.Express InflectionData.Mood,
                     InflectionData.Express InflectionData.Voice,
                     InflectionData.Express InflectionData.Evidentiality,
                     InflectionData.Express InflectionData.Transitivity,
                     InflectionData.Express InflectionData.Volition)
                  InflectionData.$fEq(,,,,,,,,,,,,,,,,)_$s$c==
                  InflectionData.$fEq(,,,,,,,,,,,,,,,,)_$s$c/= -}
3fb8f806ac431419336914d62e0692e1
  $fEqAnimacy :: GHC.Classes.Eq InflectionData.Animacy
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Animacy
                  InflectionData.$fEqAnimacy_$c==
                  InflectionData.$fEqAnimacy_$c/= -}
3fb8f806ac431419336914d62e0692e1
  $fEqAnimacy_$c/= ::
    InflectionData.Animacy -> InflectionData.Animacy -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a40 :: InflectionData.Animacy
                   b :: InflectionData.Animacy ->
                 case a40 of wild {
                   InflectionData.UANI
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.UANI -> GHC.Types.False }
                   InflectionData.AN
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.AN -> GHC.Types.False }
                   InflectionData.HUM
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.HUM -> GHC.Types.False }
                   InflectionData.NHUM
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.NHUM -> GHC.Types.False }
                   InflectionData.ZO
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.ZO -> GHC.Types.False }
                   InflectionData.INAN
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.INAN -> GHC.Types.False } }) -}
3fb8f806ac431419336914d62e0692e1
  $fEqAnimacy_$c== ::
    InflectionData.Animacy -> InflectionData.Animacy -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: InflectionData.Animacy
                   ds1 :: InflectionData.Animacy ->
                 case ds of wild {
                   InflectionData.UANI
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.UANI -> GHC.Types.True }
                   InflectionData.AN
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.AN -> GHC.Types.True }
                   InflectionData.HUM
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.HUM -> GHC.Types.True }
                   InflectionData.NHUM
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.NHUM -> GHC.Types.True }
                   InflectionData.ZO
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.ZO -> GHC.Types.True }
                   InflectionData.INAN
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.INAN -> GHC.Types.True } }) -}
3260581e2888098e95013c9746eb2927
  $fEqAspect :: GHC.Classes.Eq InflectionData.Aspect
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Aspect
                  InflectionData.$fEqAspect_$c==
                  InflectionData.$fEqAspect_$c/= -}
3260581e2888098e95013c9746eb2927
  $fEqAspect_$c/= ::
    InflectionData.Aspect -> InflectionData.Aspect -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a40 :: InflectionData.Aspect
                   b :: InflectionData.Aspect ->
                 case a40 of wild {
                   InflectionData.UASP
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.UASP -> GHC.Types.False }
                   InflectionData.NNPROG
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.NNPROG -> GHC.Types.False }
                   InflectionData.PFV
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.PFV -> GHC.Types.False }
                   InflectionData.IPFV
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.IPFV -> GHC.Types.False }
                   InflectionData.HAB
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.HAB -> GHC.Types.False }
                   InflectionData.CONT
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.CONT -> GHC.Types.False }
                   InflectionData.NPROG
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.NPROG -> GHC.Types.False }
                   InflectionData.PROG
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.PROG -> GHC.Types.False } }) -}
3260581e2888098e95013c9746eb2927
  $fEqAspect_$c== ::
    InflectionData.Aspect -> InflectionData.Aspect -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: InflectionData.Aspect
                   ds1 :: InflectionData.Aspect ->
                 case ds of wild {
                   InflectionData.UASP
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.UASP -> GHC.Types.True }
                   InflectionData.NNPROG
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.NNPROG -> GHC.Types.True }
                   InflectionData.PFV
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.PFV -> GHC.Types.True }
                   InflectionData.IPFV
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.IPFV -> GHC.Types.True }
                   InflectionData.HAB
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.HAB -> GHC.Types.True }
                   InflectionData.CONT
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.CONT -> GHC.Types.True }
                   InflectionData.NPROG
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.NPROG -> GHC.Types.True }
                   InflectionData.PROG
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.PROG -> GHC.Types.True } }) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fEqCase :: GHC.Classes.Eq InflectionData.Case
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Case
                  InflectionData.$fEqCase_$c==
                  InflectionData.$fEqCase_$c/= -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fEqCase_$c/= ::
    InflectionData.Case -> InflectionData.Case -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a40 :: InflectionData.Case b :: InflectionData.Case ->
                 case a40 of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==#
                           (GHC.Prim.dataToTag# @ InflectionData.Case x1)
                           (GHC.Prim.dataToTag# @ InflectionData.Case x2)) of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fEqCase_$c== ::
    InflectionData.Case -> InflectionData.Case -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a40 :: InflectionData.Case b :: InflectionData.Case ->
                 case a40 of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.==#
                      (GHC.Prim.dataToTag# @ InflectionData.Case x1)
                      (GHC.Prim.dataToTag# @ InflectionData.Case x2)) } }) -}
f57cbd9dbed35919833216936d0e066e
  $fEqDefiniteness :: GHC.Classes.Eq InflectionData.Definiteness
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Definiteness
                  InflectionData.$fEqDefiniteness_$c==
                  InflectionData.$fEqDefiniteness_$c/= -}
f57cbd9dbed35919833216936d0e066e
  $fEqDefiniteness_$c/= ::
    InflectionData.Definiteness
    -> InflectionData.Definiteness -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a40 :: InflectionData.Definiteness
                   b :: InflectionData.Definiteness ->
                 case a40 of wild {
                   InflectionData.UDEF
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.UDEF -> GHC.Types.False }
                   InflectionData.DEF
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.DEF -> GHC.Types.False }
                   InflectionData.INDF
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.INDF -> GHC.Types.False } }) -}
f57cbd9dbed35919833216936d0e066e
  $fEqDefiniteness_$c== ::
    InflectionData.Definiteness
    -> InflectionData.Definiteness -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.Definiteness
                   ds1 :: InflectionData.Definiteness ->
                 case ds of wild {
                   InflectionData.UDEF
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.UDEF -> GHC.Types.True }
                   InflectionData.DEF
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.DEF -> GHC.Types.True }
                   InflectionData.INDF
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.INDF -> GHC.Types.True } }) -}
8c39249ddb7859f10b018a2526e04a45
  $fEqEvidentiality :: GHC.Classes.Eq InflectionData.Evidentiality
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Evidentiality
                  InflectionData.$fEqEvidentiality_$c==
                  InflectionData.$fEqEvidentiality_$c/= -}
8c39249ddb7859f10b018a2526e04a45
  $fEqEvidentiality_$c/= ::
    InflectionData.Evidentiality
    -> InflectionData.Evidentiality -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a40 :: InflectionData.Evidentiality
                   b :: InflectionData.Evidentiality ->
                 case a40 of wild {
                   InflectionData.UEVI
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.UEVI -> GHC.Types.False }
                   InflectionData.EXP
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.EXP -> GHC.Types.False }
                   InflectionData.VIS
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.VIS -> GHC.Types.False }
                   InflectionData.NVIS
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.NVIS -> GHC.Types.False }
                   InflectionData.AUD
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.AUD -> GHC.Types.False }
                   InflectionData.INFER
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.INFER -> GHC.Types.False }
                   InflectionData.REP
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.REP -> GHC.Types.False }
                   InflectionData.HSY
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.HSY -> GHC.Types.False }
                   InflectionData.QUO
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.QUO -> GHC.Types.False }
                   InflectionData.ASS
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.ASS -> GHC.Types.False } }) -}
8c39249ddb7859f10b018a2526e04a45
  $fEqEvidentiality_$c== ::
    InflectionData.Evidentiality
    -> InflectionData.Evidentiality -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: InflectionData.Evidentiality
                   ds1 :: InflectionData.Evidentiality ->
                 case ds of wild {
                   InflectionData.UEVI
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.UEVI -> GHC.Types.True }
                   InflectionData.EXP
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.EXP -> GHC.Types.True }
                   InflectionData.VIS
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.VIS -> GHC.Types.True }
                   InflectionData.NVIS
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.NVIS -> GHC.Types.True }
                   InflectionData.AUD
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.AUD -> GHC.Types.True }
                   InflectionData.INFER
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.INFER -> GHC.Types.True }
                   InflectionData.REP
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.REP -> GHC.Types.True }
                   InflectionData.HSY
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.HSY -> GHC.Types.True }
                   InflectionData.QUO
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.QUO -> GHC.Types.True }
                   InflectionData.ASS
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.ASS -> GHC.Types.True } }) -}
ce522c1d99b503cc50c6a04abbeb7ec2
  $fEqExpress ::
    GHC.Classes.Eq a => GHC.Classes.Eq (InflectionData.Express a)
  DFunId[0]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a40 $dEq :: GHC.Classes.Eq a40.
                  @ (InflectionData.Express a40)
                  (InflectionData.$fEqExpress_$c==10 @ a40 $dEq)
                  (InflectionData.$fEqExpress_$c/= @ a40 $dEq) -}
ce522c1d99b503cc50c6a04abbeb7ec2
  $fEqExpress_$c/= ::
    GHC.Classes.Eq a =>
    InflectionData.Express a
    -> InflectionData.Express a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a40
                   $dEq :: GHC.Classes.Eq a40
                   a41 :: InflectionData.Express a40
                   b :: InflectionData.Express a40 ->
                 case a41 of wild {
                   InflectionData.NoExpress
                   -> case b of wild1 {
                        InflectionData.NoExpress -> GHC.Types.False
                        InflectionData.Express ipv -> GHC.Types.True }
                   InflectionData.Express a42
                   -> case b of wild1 {
                        InflectionData.NoExpress -> GHC.Types.True
                        InflectionData.Express b1
                        -> case GHC.Classes.== @ a40 $dEq a42 b1 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } } }) -}
8b595aff125f95a2b35fe330b0ba7fad
  $fEqExpress_$c== ::
    InflectionData.Gender -> InflectionData.Gender -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: InflectionData.Gender
                   ds1 :: InflectionData.Gender ->
                 case ds of wild {
                   InflectionData.UGEN
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.UGEN -> GHC.Types.True }
                   InflectionData.M
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.M -> GHC.Types.True }
                   InflectionData.F
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.F -> GHC.Types.True }
                   InflectionData.COM
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.COM -> GHC.Types.True }
                   InflectionData.N
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.N -> GHC.Types.True } }) -}
38ff9a9c45f96d99123b457fda219bfb
  $fEqExpress_$c==1 ::
    InflectionData.Honorific
    -> InflectionData.Honorific -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: InflectionData.Honorific
                   ds1 :: InflectionData.Honorific ->
                 case ds of wild {
                   InflectionData.UHON
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.UHON -> GHC.Types.True }
                   InflectionData.FAM
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.FAM -> GHC.Types.True }
                   InflectionData.NEU
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.NEU -> GHC.Types.True }
                   InflectionData.FORM
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.FORM -> GHC.Types.True } }) -}
ce522c1d99b503cc50c6a04abbeb7ec2
  $fEqExpress_$c==10 ::
    GHC.Classes.Eq a =>
    InflectionData.Express a
    -> InflectionData.Express a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a40
                   $dEq :: GHC.Classes.Eq a40
                   ds :: InflectionData.Express a40
                   ds1 :: InflectionData.Express a40 ->
                 case ds of wild {
                   InflectionData.NoExpress
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.True
                        InflectionData.Express ipv -> GHC.Types.False }
                   InflectionData.Express a41
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.False
                        InflectionData.Express b1
                        -> GHC.Classes.== @ a40 $dEq a41 b1 } }) -}
c1e8fbfb7380effdacb7c7c192e40bf5
  $fEqExpress_$c==2 ::
    InflectionData.Number -> InflectionData.Number -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: InflectionData.Number
                   ds1 :: InflectionData.Number ->
                 case ds of wild {
                   InflectionData.UNUM
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.UNUM -> GHC.Types.True }
                   InflectionData.SG
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.SG -> GHC.Types.True }
                   InflectionData.DU
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.DU -> GHC.Types.True }
                   InflectionData.TRI
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.TRI -> GHC.Types.True }
                   InflectionData.PA
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.PA -> GHC.Types.True }
                   InflectionData.PL
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.PL -> GHC.Types.True } }) -}
02346c3aafaeac9909a5db7a01e8ca09
  $fEqExpress_$c==3 ::
    InflectionData.Person -> InflectionData.Person -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: InflectionData.Person
                   ds1 :: InflectionData.Person ->
                 case ds of wild {
                   InflectionData.UPER
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.UPER -> GHC.Types.True }
                   InflectionData.FIRST
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.FIRST -> GHC.Types.True }
                   InflectionData.FSTINCL
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.FSTINCL -> GHC.Types.True }
                   InflectionData.FSTEXCL
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.FSTEXCL -> GHC.Types.True }
                   InflectionData.SECOND
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.SECOND -> GHC.Types.True }
                   InflectionData.THIRD
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.THIRD -> GHC.Types.True }
                   InflectionData.THRDPROX
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.THRDPROX -> GHC.Types.True }
                   InflectionData.THRDOBV
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.THRDOBV -> GHC.Types.True } }) -}
ad1fe4829d26ee371daeb2b0168138e4
  $fEqExpress_$c==4 ::
    InflectionData.Polarity
    -> InflectionData.Polarity -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.Polarity ds1 :: InflectionData.Polarity ->
                 case ds of wild {
                   InflectionData.UPOL
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.UPOL -> GHC.Types.True }
                   InflectionData.AFF
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.AFF -> GHC.Types.True }
                   InflectionData.NEG
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.NEG -> GHC.Types.True } }) -}
a4a6522da9f32c4a22fdcdb048233e77
  $fEqExpress_$c==5 ::
    InflectionData.Specificity
    -> InflectionData.Specificity -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.Specificity
                   ds1 :: InflectionData.Specificity ->
                 case ds of wild {
                   InflectionData.USPE
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.USPE -> GHC.Types.True }
                   InflectionData.SPEC
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.SPEC -> GHC.Types.True }
                   InflectionData.NSPEC
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.NSPEC -> GHC.Types.True } }) -}
91b970df1d2f65a770d84bd1b0e168b5
  $fEqExpress_$c==6 ::
    InflectionData.Topic -> InflectionData.Topic -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.Topic ds1 :: InflectionData.Topic ->
                 case ds of wild {
                   InflectionData.UTOP
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.UTOP -> GHC.Types.True }
                   InflectionData.TOP
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.TOP -> GHC.Types.True }
                   InflectionData.NTOP
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.NTOP -> GHC.Types.True } }) -}
c432d94948e8418512e7b069e8d02e7a
  $fEqExpress_$c==7 ::
    InflectionData.Transitivity
    -> InflectionData.Transitivity -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: InflectionData.Transitivity
                   ds1 :: InflectionData.Transitivity ->
                 case ds of wild {
                   InflectionData.UTRA
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.UTRA -> GHC.Types.True }
                   InflectionData.NTRANS
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.NTRANS -> GHC.Types.True }
                   InflectionData.TRANS
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.TRANS -> GHC.Types.True }
                   InflectionData.MTRANS
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.MTRANS -> GHC.Types.True }
                   InflectionData.DITRANS
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.DITRANS -> GHC.Types.True } }) -}
1f59333afb1b3b92a8af1e5489e1e630
  $fEqExpress_$c==8 ::
    InflectionData.Voice -> InflectionData.Voice -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: InflectionData.Voice
                   ds1 :: InflectionData.Voice ->
                 case ds of wild {
                   InflectionData.UVOI
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.UVOI -> GHC.Types.True }
                   InflectionData.ACTIVE
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.ACTIVE -> GHC.Types.True }
                   InflectionData.MIDDLE
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.MIDDLE -> GHC.Types.True }
                   InflectionData.PASSIVE
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.PASSIVE -> GHC.Types.True } }) -}
91017ab7ea71228801f74c069cd5baf7
  $fEqExpress_$c==9 ::
    InflectionData.Volition
    -> InflectionData.Volition -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.Volition ds1 :: InflectionData.Volition ->
                 case ds of wild {
                   InflectionData.UVOL
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.UVOL -> GHC.Types.True }
                   InflectionData.VOL
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.VOL -> GHC.Types.True }
                   InflectionData.NVOL
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.NVOL -> GHC.Types.True } }) -}
ce522c1d99b503cc50c6a04abbeb7ec2
  $fEqExpress_$s$c==9 ::
    InflectionData.Express InflectionData.Volition
    -> InflectionData.Express InflectionData.Volition -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.Express InflectionData.Volition
                   ds1 :: InflectionData.Express InflectionData.Volition ->
                 case ds of wild {
                   InflectionData.NoExpress
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.True
                        InflectionData.Express ipv -> GHC.Types.False }
                   InflectionData.Express a40
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.False
                        InflectionData.Express b1
                        -> InflectionData.$fEqExpress_$c==9 a40 b1 } }) -}
8b595aff125f95a2b35fe330b0ba7fad
  $fEqGender :: GHC.Classes.Eq InflectionData.Gender
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Gender
                  InflectionData.$fEqExpress_$c==
                  InflectionData.$fEqGender_$c/= -}
8b595aff125f95a2b35fe330b0ba7fad
  $fEqGender_$c/= ::
    InflectionData.Gender -> InflectionData.Gender -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a40 :: InflectionData.Gender
                   b :: InflectionData.Gender ->
                 case a40 of wild {
                   InflectionData.UGEN
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.UGEN -> GHC.Types.False }
                   InflectionData.M
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.M -> GHC.Types.False }
                   InflectionData.F
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.F -> GHC.Types.False }
                   InflectionData.COM
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.COM -> GHC.Types.False }
                   InflectionData.N
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.N -> GHC.Types.False } }) -}
38ff9a9c45f96d99123b457fda219bfb
  $fEqHonorific :: GHC.Classes.Eq InflectionData.Honorific
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Honorific
                  InflectionData.$fEqExpress_$c==1
                  InflectionData.$fEqHonorific_$c/= -}
38ff9a9c45f96d99123b457fda219bfb
  $fEqHonorific_$c/= ::
    InflectionData.Honorific
    -> InflectionData.Honorific -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a40 :: InflectionData.Honorific
                   b :: InflectionData.Honorific ->
                 case a40 of wild {
                   InflectionData.UHON
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.UHON -> GHC.Types.False }
                   InflectionData.FAM
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.FAM -> GHC.Types.False }
                   InflectionData.NEU
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.NEU -> GHC.Types.False }
                   InflectionData.FORM
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.FORM -> GHC.Types.False } }) -}
e87dedc6ee0613212a8838da9054e9ca
  $fEqInflectionSystem ::
    GHC.Classes.Eq InflectionData.InflectionSystem
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.InflectionSystem
                  InflectionData.$fEqInflectionSystem_$c==
                  InflectionData.$fEqInflectionSystem_$c/= -}
e87dedc6ee0613212a8838da9054e9ca
  $fEqInflectionSystem_$c/= ::
    InflectionData.InflectionSystem
    -> InflectionData.InflectionSystem -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLLLLLLLLLLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)><S(SLLLLLLLLLLLLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ a40 :: InflectionData.InflectionSystem
                   b :: InflectionData.InflectionSystem ->
                 case InflectionData.$fEqInflectionSystem_$c== a40 b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
e87dedc6ee0613212a8838da9054e9ca
  $fEqInflectionSystem_$c== ::
    InflectionData.InflectionSystem
    -> InflectionData.InflectionSystem -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLLLLLLLLLLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)><S(SLLLLLLLLLLLLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: InflectionData.InflectionSystem
                   w1 :: InflectionData.InflectionSystem ->
                 case w of ww { InflectionData.InflectionSystem ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ->
                 case w1 of ww18 { InflectionData.InflectionSystem ww19 ww20 ww21 ww22 ww23 ww24 ww25 ww26 ww27 ww28 ww29 ww30 ww31 ww32 ww33 ww34 ww35 ->
                 InflectionData.$w$c==1
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww17
                   ww19
                   ww20
                   ww21
                   ww22
                   ww23
                   ww24
                   ww25
                   ww26
                   ww27
                   ww28
                   ww29
                   ww30
                   ww31
                   ww32
                   ww33
                   ww34
                   ww35 } }) -}
b0a24ad20939906e8d87ed3073f32603
  $fEqLexCat :: GHC.Classes.Eq InflectionData.LexCat
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.LexCat
                  InflectionData.$fEqLexCat_$c==
                  InflectionData.$fEqLexCat_$c/= -}
b0a24ad20939906e8d87ed3073f32603
  $fEqLexCat_$c/= ::
    InflectionData.LexCat -> InflectionData.LexCat -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a40 :: InflectionData.LexCat b :: InflectionData.LexCat ->
                 case a40 of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==#
                           (GHC.Prim.dataToTag# @ InflectionData.LexCat x1)
                           (GHC.Prim.dataToTag# @ InflectionData.LexCat x2)) of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
b0a24ad20939906e8d87ed3073f32603
  $fEqLexCat_$c== ::
    InflectionData.LexCat -> InflectionData.LexCat -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a40 :: InflectionData.LexCat b :: InflectionData.LexCat ->
                 case a40 of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.==#
                      (GHC.Prim.dataToTag# @ InflectionData.LexCat x1)
                      (GHC.Prim.dataToTag# @ InflectionData.LexCat x2)) } }) -}
f539d8313c5a8ab2854680bd81c6cecb
  $fEqManifest ::
    GHC.Classes.Eq a => GHC.Classes.Eq (InflectionData.Manifest a)
  DFunId[0]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a40 $dEq :: GHC.Classes.Eq a40.
                  @ (InflectionData.Manifest a40)
                  (InflectionData.$fEqManifest_$c== @ a40 $dEq)
                  (InflectionData.$fEqManifest_$c/= @ a40 $dEq) -}
e7fb9cb536022bc8f9fdd7f94d3c9e4a
  $fEqManifestSystem :: GHC.Classes.Eq InflectionData.ManifestSystem
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.ManifestSystem
                  InflectionData.$fEqManifestSystem_$c==
                  InflectionData.$fEqManifestSystem_$c/= -}
c781f927fa37ef9aaa7a6a183963e227
  $fEqManifestSystem1 ::
    GHC.Classes.Eq
      (InflectionData.Express InflectionData.Gender,
       InflectionData.Express InflectionData.Animacy,
       InflectionData.Express InflectionData.Case,
       InflectionData.Express InflectionData.Number,
       InflectionData.Express InflectionData.Definiteness,
       InflectionData.Express InflectionData.Specificity,
       InflectionData.Express InflectionData.Topic,
       InflectionData.Express InflectionData.Person,
       InflectionData.Express InflectionData.Honorific,
       InflectionData.Express InflectionData.Polarity,
       InflectionData.Express InflectionData.Tense,
       InflectionData.Express InflectionData.Aspect,
       InflectionData.Express InflectionData.Mood,
       InflectionData.Express InflectionData.Voice,
       InflectionData.Express InflectionData.Evidentiality,
       InflectionData.Express InflectionData.Transitivity,
       InflectionData.Express InflectionData.Volition)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fEq(,,,,,,,,,,,,,,,,)_$s$fEq(,,,,,,,,,,,,,,,,) -}
e7fb9cb536022bc8f9fdd7f94d3c9e4a
  $fEqManifestSystem_$c/= ::
    InflectionData.ManifestSystem
    -> InflectionData.ManifestSystem -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U,1*U,1*U)><S(SLL),1*U(1*U,1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ a40 :: InflectionData.ManifestSystem
                   b :: InflectionData.ManifestSystem ->
                 case InflectionData.$fEqManifestSystem_$c== a40 b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
e7fb9cb536022bc8f9fdd7f94d3c9e4a
  $fEqManifestSystem_$c== ::
    InflectionData.ManifestSystem
    -> InflectionData.ManifestSystem -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U,1*U,1*U)><S(SLL),1*U(1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: InflectionData.ManifestSystem
                   w1 :: InflectionData.ManifestSystem ->
                 case w of ww { InflectionData.ManifestSystem ww1 ww2 ww3 ->
                 case w1 of ww4 { InflectionData.ManifestSystem ww5 ww6 ww7 ->
                 InflectionData.$w$c==2 ww1 ww2 ww3 ww5 ww6 ww7 } }) -}
9103be1f458180312a37091ade78ac38
  $fEqManifestSystem_$s$fEq(,) ::
    GHC.Classes.Eq
      (PhonemeData.Morpheme,
       (InflectionData.Express InflectionData.Gender,
        InflectionData.Express InflectionData.Animacy,
        InflectionData.Express InflectionData.Case,
        InflectionData.Express InflectionData.Number,
        InflectionData.Express InflectionData.Definiteness,
        InflectionData.Express InflectionData.Specificity,
        InflectionData.Express InflectionData.Topic,
        InflectionData.Express InflectionData.Person,
        InflectionData.Express InflectionData.Honorific,
        InflectionData.Express InflectionData.Polarity,
        InflectionData.Express InflectionData.Tense,
        InflectionData.Express InflectionData.Aspect,
        InflectionData.Express InflectionData.Mood,
        InflectionData.Express InflectionData.Voice,
        InflectionData.Express InflectionData.Evidentiality,
        InflectionData.Express InflectionData.Transitivity,
        InflectionData.Express InflectionData.Volition))
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (PhonemeData.Morpheme,
                     (InflectionData.Express InflectionData.Gender,
                      InflectionData.Express InflectionData.Animacy,
                      InflectionData.Express InflectionData.Case,
                      InflectionData.Express InflectionData.Number,
                      InflectionData.Express InflectionData.Definiteness,
                      InflectionData.Express InflectionData.Specificity,
                      InflectionData.Express InflectionData.Topic,
                      InflectionData.Express InflectionData.Person,
                      InflectionData.Express InflectionData.Honorific,
                      InflectionData.Express InflectionData.Polarity,
                      InflectionData.Express InflectionData.Tense,
                      InflectionData.Express InflectionData.Aspect,
                      InflectionData.Express InflectionData.Mood,
                      InflectionData.Express InflectionData.Voice,
                      InflectionData.Express InflectionData.Evidentiality,
                      InflectionData.Express InflectionData.Transitivity,
                      InflectionData.Express InflectionData.Volition))
                  (GHC.Classes.$fEq(,)_$c==
                     @ PhonemeData.Morpheme
                     @ (InflectionData.Express InflectionData.Gender,
                        InflectionData.Express InflectionData.Animacy,
                        InflectionData.Express InflectionData.Case,
                        InflectionData.Express InflectionData.Number,
                        InflectionData.Express InflectionData.Definiteness,
                        InflectionData.Express InflectionData.Specificity,
                        InflectionData.Express InflectionData.Topic,
                        InflectionData.Express InflectionData.Person,
                        InflectionData.Express InflectionData.Honorific,
                        InflectionData.Express InflectionData.Polarity,
                        InflectionData.Express InflectionData.Tense,
                        InflectionData.Express InflectionData.Aspect,
                        InflectionData.Express InflectionData.Mood,
                        InflectionData.Express InflectionData.Voice,
                        InflectionData.Express InflectionData.Evidentiality,
                        InflectionData.Express InflectionData.Transitivity,
                        InflectionData.Express InflectionData.Volition)
                     PhonemeData.$fEqMorpheme
                     InflectionData.$fEqManifestSystem1)
                  (GHC.Classes.$fEq(,)_$c/=
                     @ PhonemeData.Morpheme
                     @ (InflectionData.Express InflectionData.Gender,
                        InflectionData.Express InflectionData.Animacy,
                        InflectionData.Express InflectionData.Case,
                        InflectionData.Express InflectionData.Number,
                        InflectionData.Express InflectionData.Definiteness,
                        InflectionData.Express InflectionData.Specificity,
                        InflectionData.Express InflectionData.Topic,
                        InflectionData.Express InflectionData.Person,
                        InflectionData.Express InflectionData.Honorific,
                        InflectionData.Express InflectionData.Polarity,
                        InflectionData.Express InflectionData.Tense,
                        InflectionData.Express InflectionData.Aspect,
                        InflectionData.Express InflectionData.Mood,
                        InflectionData.Express InflectionData.Voice,
                        InflectionData.Express InflectionData.Evidentiality,
                        InflectionData.Express InflectionData.Transitivity,
                        InflectionData.Express InflectionData.Volition)
                     PhonemeData.$fEqMorpheme
                     InflectionData.$fEqManifestSystem1) -}
21626b080cf2e0731be3b700433e03eb
  $fEqManifestType :: GHC.Classes.Eq InflectionData.ManifestType
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.ManifestType
                  InflectionData.$fEqManifestType_$c==
                  InflectionData.$fEqManifestType_$c/= -}
21626b080cf2e0731be3b700433e03eb
  $fEqManifestType_$c/= ::
    InflectionData.ManifestType
    -> InflectionData.ManifestType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a40 :: InflectionData.ManifestType
                   b :: InflectionData.ManifestType ->
                 case a40 of wild {
                   InflectionData.Particle
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.Particle -> GHC.Types.False }
                   InflectionData.Prefix
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.Prefix -> GHC.Types.False }
                   InflectionData.Suffix
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.Suffix -> GHC.Types.False } }) -}
21626b080cf2e0731be3b700433e03eb
  $fEqManifestType_$c== ::
    InflectionData.ManifestType
    -> InflectionData.ManifestType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.ManifestType
                   ds1 :: InflectionData.ManifestType ->
                 case ds of wild {
                   InflectionData.Particle
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.Particle -> GHC.Types.True }
                   InflectionData.Prefix
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.Prefix -> GHC.Types.True }
                   InflectionData.Suffix
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.Suffix -> GHC.Types.True } }) -}
f539d8313c5a8ab2854680bd81c6cecb
  $fEqManifest_$c/= ::
    GHC.Classes.Eq a =>
    InflectionData.Manifest a
    -> InflectionData.Manifest a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a40
                   $dEq :: GHC.Classes.Eq a40
                   a41 :: InflectionData.Manifest a40
                   b :: InflectionData.Manifest a40 ->
                 case a41 of wild {
                   InflectionData.NoManifest
                   -> case b of wild1 {
                        InflectionData.NoManifest -> GHC.Types.False
                        InflectionData.Manifest ipv ipv1 -> GHC.Types.True }
                   InflectionData.Manifest a42 a43
                   -> case b of wild1 {
                        InflectionData.NoManifest -> GHC.Types.True
                        InflectionData.Manifest b1 b2
                        -> case GHC.Classes.$fEq[]_$c==
                                  @ (InflectionData.LexCat,
                                     InflectionData.ManifestType,
                                     GHC.Types.Int)
                                  InflectionData.$fEqManifest_$s$fEq(,,)
                                  a42
                                  b1 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True
                             -> case GHC.Classes.== @ a40 $dEq a43 b2 of wild3 {
                                  GHC.Types.False -> GHC.Types.True
                                  GHC.Types.True -> GHC.Types.False } } } }) -}
f539d8313c5a8ab2854680bd81c6cecb
  $fEqManifest_$c== ::
    GHC.Classes.Eq a =>
    InflectionData.Manifest a
    -> InflectionData.Manifest a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a40
                   $dEq :: GHC.Classes.Eq a40
                   ds :: InflectionData.Manifest a40
                   ds1 :: InflectionData.Manifest a40 ->
                 case ds of wild {
                   InflectionData.NoManifest
                   -> case ds1 of wild1 {
                        InflectionData.NoManifest -> GHC.Types.True
                        InflectionData.Manifest ipv ipv1 -> GHC.Types.False }
                   InflectionData.Manifest a41 a42
                   -> case ds1 of wild1 {
                        InflectionData.NoManifest -> GHC.Types.False
                        InflectionData.Manifest b1 b2
                        -> case GHC.Classes.$fEq[]_$c==
                                  @ (InflectionData.LexCat,
                                     InflectionData.ManifestType,
                                     GHC.Types.Int)
                                  InflectionData.$fEqManifest_$s$fEq(,,)
                                  a41
                                  b1 of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True -> GHC.Classes.== @ a40 $dEq a42 b2 } } }) -}
f539d8313c5a8ab2854680bd81c6cecb
  $fEqManifest_$s$c==16 ::
    InflectionData.Manifest [InflectionData.Volition]
    -> InflectionData.Manifest [InflectionData.Volition]
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: InflectionData.Manifest
                           [InflectionData.Volition]
                   ds1 :: InflectionData.Manifest [InflectionData.Volition] ->
                 case ds of wild {
                   InflectionData.NoManifest
                   -> case ds1 of wild1 {
                        InflectionData.NoManifest -> GHC.Types.True
                        InflectionData.Manifest ipv ipv1 -> GHC.Types.False }
                   InflectionData.Manifest a40 a41
                   -> case ds1 of wild1 {
                        InflectionData.NoManifest -> GHC.Types.False
                        InflectionData.Manifest b1 b2
                        -> case GHC.Classes.$fEq[]_$c==
                                  @ (InflectionData.LexCat,
                                     InflectionData.ManifestType,
                                     GHC.Types.Int)
                                  InflectionData.$fEqManifest_$s$fEq(,,)
                                  a40
                                  b1 of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> GHC.Classes.$fEq[]_$c==
                                  @ InflectionData.Volition
                                  InflectionData.$fEqVolition
                                  a41
                                  b2 } } }) -}
13980871bd2a7c2eb053f4ff2101bc29
  $fEqManifest_$s$fEq(,,) ::
    GHC.Classes.Eq
      (InflectionData.LexCat, InflectionData.ManifestType, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.LexCat,
                     InflectionData.ManifestType,
                     GHC.Types.Int)
                  (GHC.Classes.$fEq(,,)_$c==
                     @ InflectionData.LexCat
                     @ InflectionData.ManifestType
                     @ GHC.Types.Int
                     InflectionData.$fEqLexCat
                     InflectionData.$fEqManifestType
                     GHC.Classes.$fEqInt)
                  InflectionData.$fEqManifest_$s$fEq(,,)_$c/= -}
5684c4086b584d8f910df28566ef7de2
  $fEqManifest_$s$fEq(,,)_$c/= ::
    (InflectionData.LexCat, InflectionData.ManifestType, GHC.Types.Int)
    -> (InflectionData.LexCat,
        InflectionData.ManifestType,
        GHC.Types.Int)
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U,1*U,1*U(U))><S(SLL),1*U(1*U,1*U,1*U(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ a40 :: (InflectionData.LexCat,
                           InflectionData.ManifestType,
                           GHC.Types.Int)
                   b1 :: (InflectionData.LexCat,
                          InflectionData.ManifestType,
                          GHC.Types.Int) ->
                 case GHC.Classes.$fEq(,,)_$c==
                        @ InflectionData.LexCat
                        @ InflectionData.ManifestType
                        @ GHC.Types.Int
                        InflectionData.$fEqLexCat
                        InflectionData.$fEqManifestType
                        GHC.Classes.$fEqInt
                        a40
                        b1 of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
170a49091e965c69ca2b81c9942aa234
  $fEqMood :: GHC.Classes.Eq InflectionData.Mood
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Mood
                  InflectionData.$fEqMood_$c==
                  InflectionData.$fEqMood_$c/= -}
170a49091e965c69ca2b81c9942aa234
  $fEqMood_$c/= ::
    InflectionData.Mood -> InflectionData.Mood -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a40 :: InflectionData.Mood b :: InflectionData.Mood ->
                 case a40 of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==#
                           (GHC.Prim.dataToTag# @ InflectionData.Mood x1)
                           (GHC.Prim.dataToTag# @ InflectionData.Mood x2)) of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
170a49091e965c69ca2b81c9942aa234
  $fEqMood_$c== ::
    InflectionData.Mood -> InflectionData.Mood -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a40 :: InflectionData.Mood b :: InflectionData.Mood ->
                 case a40 of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.==#
                      (GHC.Prim.dataToTag# @ InflectionData.Mood x1)
                      (GHC.Prim.dataToTag# @ InflectionData.Mood x2)) } }) -}
c1e8fbfb7380effdacb7c7c192e40bf5
  $fEqNumber :: GHC.Classes.Eq InflectionData.Number
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Number
                  InflectionData.$fEqExpress_$c==2
                  InflectionData.$fEqNumber_$c/= -}
c1e8fbfb7380effdacb7c7c192e40bf5
  $fEqNumber_$c/= ::
    InflectionData.Number -> InflectionData.Number -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a40 :: InflectionData.Number
                   b :: InflectionData.Number ->
                 case a40 of wild {
                   InflectionData.UNUM
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.UNUM -> GHC.Types.False }
                   InflectionData.SG
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.SG -> GHC.Types.False }
                   InflectionData.DU
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.DU -> GHC.Types.False }
                   InflectionData.TRI
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.TRI -> GHC.Types.False }
                   InflectionData.PA
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.PA -> GHC.Types.False }
                   InflectionData.PL
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.PL -> GHC.Types.False } }) -}
02346c3aafaeac9909a5db7a01e8ca09
  $fEqPerson :: GHC.Classes.Eq InflectionData.Person
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Person
                  InflectionData.$fEqExpress_$c==3
                  InflectionData.$fEqPerson_$c/= -}
02346c3aafaeac9909a5db7a01e8ca09
  $fEqPerson_$c/= ::
    InflectionData.Person -> InflectionData.Person -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a40 :: InflectionData.Person
                   b :: InflectionData.Person ->
                 case a40 of wild {
                   InflectionData.UPER
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.UPER -> GHC.Types.False }
                   InflectionData.FIRST
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.FIRST -> GHC.Types.False }
                   InflectionData.FSTINCL
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.FSTINCL -> GHC.Types.False }
                   InflectionData.FSTEXCL
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.FSTEXCL -> GHC.Types.False }
                   InflectionData.SECOND
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.SECOND -> GHC.Types.False }
                   InflectionData.THIRD
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.THIRD -> GHC.Types.False }
                   InflectionData.THRDPROX
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.THRDPROX -> GHC.Types.False }
                   InflectionData.THRDOBV
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.THRDOBV -> GHC.Types.False } }) -}
ad1fe4829d26ee371daeb2b0168138e4
  $fEqPolarity :: GHC.Classes.Eq InflectionData.Polarity
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Polarity
                  InflectionData.$fEqExpress_$c==4
                  InflectionData.$fEqPolarity_$c/= -}
ad1fe4829d26ee371daeb2b0168138e4
  $fEqPolarity_$c/= ::
    InflectionData.Polarity
    -> InflectionData.Polarity -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a40 :: InflectionData.Polarity b :: InflectionData.Polarity ->
                 case a40 of wild {
                   InflectionData.UPOL
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.UPOL -> GHC.Types.False }
                   InflectionData.AFF
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.AFF -> GHC.Types.False }
                   InflectionData.NEG
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.NEG -> GHC.Types.False } }) -}
a4a6522da9f32c4a22fdcdb048233e77
  $fEqSpecificity :: GHC.Classes.Eq InflectionData.Specificity
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Specificity
                  InflectionData.$fEqExpress_$c==5
                  InflectionData.$fEqSpecificity_$c/= -}
a4a6522da9f32c4a22fdcdb048233e77
  $fEqSpecificity_$c/= ::
    InflectionData.Specificity
    -> InflectionData.Specificity -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a40 :: InflectionData.Specificity
                   b :: InflectionData.Specificity ->
                 case a40 of wild {
                   InflectionData.USPE
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.USPE -> GHC.Types.False }
                   InflectionData.SPEC
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.SPEC -> GHC.Types.False }
                   InflectionData.NSPEC
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.NSPEC -> GHC.Types.False } }) -}
b64289664290fdc9c5510c85a7afdd78
  $fEqTense :: GHC.Classes.Eq InflectionData.Tense
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Tense
                  InflectionData.$fEqTense_$c==
                  InflectionData.$fEqTense_$c/= -}
b64289664290fdc9c5510c85a7afdd78
  $fEqTense_$c/= ::
    InflectionData.Tense -> InflectionData.Tense -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a40 :: InflectionData.Tense b :: InflectionData.Tense ->
                 case a40 of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==#
                           (GHC.Prim.dataToTag# @ InflectionData.Tense x1)
                           (GHC.Prim.dataToTag# @ InflectionData.Tense x2)) of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
b64289664290fdc9c5510c85a7afdd78
  $fEqTense_$c== ::
    InflectionData.Tense -> InflectionData.Tense -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a40 :: InflectionData.Tense b :: InflectionData.Tense ->
                 case a40 of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.==#
                      (GHC.Prim.dataToTag# @ InflectionData.Tense x1)
                      (GHC.Prim.dataToTag# @ InflectionData.Tense x2)) } }) -}
91b970df1d2f65a770d84bd1b0e168b5
  $fEqTopic :: GHC.Classes.Eq InflectionData.Topic
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Topic
                  InflectionData.$fEqExpress_$c==6
                  InflectionData.$fEqTopic_$c/= -}
91b970df1d2f65a770d84bd1b0e168b5
  $fEqTopic_$c/= ::
    InflectionData.Topic -> InflectionData.Topic -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a40 :: InflectionData.Topic b :: InflectionData.Topic ->
                 case a40 of wild {
                   InflectionData.UTOP
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.UTOP -> GHC.Types.False }
                   InflectionData.TOP
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.TOP -> GHC.Types.False }
                   InflectionData.NTOP
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.NTOP -> GHC.Types.False } }) -}
c432d94948e8418512e7b069e8d02e7a
  $fEqTransitivity :: GHC.Classes.Eq InflectionData.Transitivity
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Transitivity
                  InflectionData.$fEqExpress_$c==7
                  InflectionData.$fEqTransitivity_$c/= -}
c432d94948e8418512e7b069e8d02e7a
  $fEqTransitivity_$c/= ::
    InflectionData.Transitivity
    -> InflectionData.Transitivity -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a40 :: InflectionData.Transitivity
                   b :: InflectionData.Transitivity ->
                 case a40 of wild {
                   InflectionData.UTRA
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.UTRA -> GHC.Types.False }
                   InflectionData.NTRANS
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.NTRANS -> GHC.Types.False }
                   InflectionData.TRANS
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.TRANS -> GHC.Types.False }
                   InflectionData.MTRANS
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.MTRANS -> GHC.Types.False }
                   InflectionData.DITRANS
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.DITRANS -> GHC.Types.False } }) -}
1f59333afb1b3b92a8af1e5489e1e630
  $fEqVoice :: GHC.Classes.Eq InflectionData.Voice
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Voice
                  InflectionData.$fEqExpress_$c==8
                  InflectionData.$fEqVoice_$c/= -}
1f59333afb1b3b92a8af1e5489e1e630
  $fEqVoice_$c/= ::
    InflectionData.Voice -> InflectionData.Voice -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a40 :: InflectionData.Voice
                   b :: InflectionData.Voice ->
                 case a40 of wild {
                   InflectionData.UVOI
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.UVOI -> GHC.Types.False }
                   InflectionData.ACTIVE
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.ACTIVE -> GHC.Types.False }
                   InflectionData.MIDDLE
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.MIDDLE -> GHC.Types.False }
                   InflectionData.PASSIVE
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.PASSIVE -> GHC.Types.False } }) -}
91017ab7ea71228801f74c069cd5baf7
  $fEqVolition :: GHC.Classes.Eq InflectionData.Volition
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Volition
                  InflectionData.$fEqExpress_$c==9
                  InflectionData.$fEqVolition_$c/= -}
91017ab7ea71228801f74c069cd5baf7
  $fEqVolition_$c/= ::
    InflectionData.Volition
    -> InflectionData.Volition -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a40 :: InflectionData.Volition b :: InflectionData.Volition ->
                 case a40 of wild {
                   InflectionData.UVOL
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.UVOL -> GHC.Types.False }
                   InflectionData.VOL
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.VOL -> GHC.Types.False }
                   InflectionData.NVOL
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.NVOL -> GHC.Types.False } }) -}
3fb8f806ac431419336914d62e0692e1
  $fReadAnimacy :: GHC.Read.Read InflectionData.Animacy
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Animacy
                  InflectionData.$fReadAnimacy_$s$dmreadsPrec
                  InflectionData.$fReadAnimacy28
                  InflectionData.$fReadAnimacy_$creadPrec
                  InflectionData.$fReadAnimacy_$creadListPrec -}
3fb8f806ac431419336914d62e0692e1
  $fReadAnimacy1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Animacy] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.Animacy]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.Animacy
                   InflectionData.$fReadAnimacy2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Animacy>_R))
                   @ b
                   eta1) -}
3fb8f806ac431419336914d62e0692e1
  $fReadAnimacy10 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadAnimacy12,
                  InflectionData.$fReadAnimacy11
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Animacy>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Animacy>_R))))) -}
3fb8f806ac431419336914d62e0692e1
  $fReadAnimacy11 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Animacy -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Animacy
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.INAN) -}
19439436e44bf402d905271fd0074710
  $fReadAnimacy12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "INAN"#) -}
3fb8f806ac431419336914d62e0692e1
  $fReadAnimacy13 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadAnimacy15,
                  InflectionData.$fReadAnimacy14
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Animacy>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Animacy>_R))))) -}
3fb8f806ac431419336914d62e0692e1
  $fReadAnimacy14 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Animacy -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Animacy
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.ZO) -}
d10a2a0ec3a6e2736ec95cb61a2fccba
  $fReadAnimacy15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ZO"#) -}
3fb8f806ac431419336914d62e0692e1
  $fReadAnimacy16 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadAnimacy18,
                  InflectionData.$fReadAnimacy17
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Animacy>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Animacy>_R))))) -}
3fb8f806ac431419336914d62e0692e1
  $fReadAnimacy17 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Animacy -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Animacy
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.NHUM) -}
d0b65d941fdd01d5fcfb71cc8fbc937d
  $fReadAnimacy18 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NHUM"#) -}
3fb8f806ac431419336914d62e0692e1
  $fReadAnimacy19 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadAnimacy21,
                  InflectionData.$fReadAnimacy20
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Animacy>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Animacy>_R))))) -}
3fb8f806ac431419336914d62e0692e1
  $fReadAnimacy2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Animacy
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Animacy
                   InflectionData.$fReadAnimacy3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.Animacy>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.Animacy>_R)))) -}
3fb8f806ac431419336914d62e0692e1
  $fReadAnimacy20 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Animacy -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Animacy
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.HUM) -}
a1b1033c2f380ca44bfffacda474dc60
  $fReadAnimacy21 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "HUM"#) -}
3fb8f806ac431419336914d62e0692e1
  $fReadAnimacy22 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadAnimacy24,
                  InflectionData.$fReadAnimacy23
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Animacy>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Animacy>_R))))) -}
3fb8f806ac431419336914d62e0692e1
  $fReadAnimacy23 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Animacy -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Animacy
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.AN) -}
5daee821abc081b050cde3e9ba0e5966
  $fReadAnimacy24 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AN"#) -}
3fb8f806ac431419336914d62e0692e1
  $fReadAnimacy25 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadAnimacy27,
                  InflectionData.$fReadAnimacy26
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Animacy>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Animacy>_R))))) -}
3fb8f806ac431419336914d62e0692e1
  $fReadAnimacy26 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Animacy -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Animacy
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.UANI) -}
ca49006d720543d465081afe8f2368fb
  $fReadAnimacy27 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "UANI"#) -}
3fb8f806ac431419336914d62e0692e1
  $fReadAnimacy28 ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Animacy]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Animacy]
                   InflectionData.$fReadAnimacy29) -}
3fb8f806ac431419336914d62e0692e1
  $fReadAnimacy29 ::
    Text.ParserCombinators.ReadP.P [InflectionData.Animacy]
  {- Unfolding: (GHC.Read.$wa
                   @ InflectionData.Animacy
                   InflectionData.$fReadAnimacy2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Animacy>_R))
                   @ [InflectionData.Animacy]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                      @ [InflectionData.Animacy])) -}
3fb8f806ac431419336914d62e0692e1
  $fReadAnimacy3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Animacy -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: InflectionData.Animacy
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ InflectionData.Animacy
                   InflectionData.$fReadAnimacy4
                   eta
                   @ b
                   eta1) -}
3fb8f806ac431419336914d62e0692e1
  $fReadAnimacy4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)
                   InflectionData.$fReadAnimacy25
                   InflectionData.$fReadAnimacy5) -}
3fb8f806ac431419336914d62e0692e1
  $fReadAnimacy5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)
                   InflectionData.$fReadAnimacy22
                   InflectionData.$fReadAnimacy6) -}
3fb8f806ac431419336914d62e0692e1
  $fReadAnimacy6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)
                   InflectionData.$fReadAnimacy19
                   InflectionData.$fReadAnimacy7) -}
3fb8f806ac431419336914d62e0692e1
  $fReadAnimacy7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)
                   InflectionData.$fReadAnimacy16
                   InflectionData.$fReadAnimacy8) -}
3fb8f806ac431419336914d62e0692e1
  $fReadAnimacy8 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)
                   InflectionData.$fReadAnimacy13
                   InflectionData.$fReadAnimacy9) -}
3fb8f806ac431419336914d62e0692e1
  $fReadAnimacy9 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)
                   InflectionData.$fReadAnimacy10
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           InflectionData.Animacy))) -}
3fb8f806ac431419336914d62e0692e1
  $fReadAnimacy_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [InflectionData.Animacy]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadAnimacy1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.Animacy]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.Animacy]>_R))) -}
3fb8f806ac431419336914d62e0692e1
  $fReadAnimacy_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadAnimacy2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.Animacy>_R)) -}
3fb8f806ac431419336914d62e0692e1
  $fReadAnimacy_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Animacy
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ InflectionData.Animacy
                   InflectionData.$fReadAnimacy_$creadPrec
                   eta) -}
3260581e2888098e95013c9746eb2927
  $fReadAspect :: GHC.Read.Read InflectionData.Aspect
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Aspect
                  InflectionData.$fReadAspect_$s$dmreadsPrec
                  InflectionData.$fReadAspect36
                  InflectionData.$fReadAspect_$creadPrec
                  InflectionData.$fReadAspect_$creadListPrec -}
3260581e2888098e95013c9746eb2927
  $fReadAspect1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Aspect] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.Aspect]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.Aspect
                   InflectionData.$fReadAspect2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Aspect>_R))
                   @ b
                   eta1) -}
3260581e2888098e95013c9746eb2927
  $fReadAspect10 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)
                   InflectionData.$fReadAspect15
                   InflectionData.$fReadAspect11) -}
3260581e2888098e95013c9746eb2927
  $fReadAspect11 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)
                   InflectionData.$fReadAspect12
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           InflectionData.Aspect))) -}
3260581e2888098e95013c9746eb2927
  $fReadAspect12 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadAspect14,
                  InflectionData.$fReadAspect13
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Aspect>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Aspect>_R))))) -}
3260581e2888098e95013c9746eb2927
  $fReadAspect13 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Aspect -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Aspect -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.PROG) -}
bb661dbb922c356269caf31e135a69c6
  $fReadAspect14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PROG"#) -}
3260581e2888098e95013c9746eb2927
  $fReadAspect15 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadAspect17,
                  InflectionData.$fReadAspect16
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Aspect>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Aspect>_R))))) -}
3260581e2888098e95013c9746eb2927
  $fReadAspect16 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Aspect -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Aspect -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.NPROG) -}
955b4adb5629d1fe75707e31425b2844
  $fReadAspect17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NPROG"#) -}
3260581e2888098e95013c9746eb2927
  $fReadAspect18 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadAspect20,
                  InflectionData.$fReadAspect19
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Aspect>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Aspect>_R))))) -}
3260581e2888098e95013c9746eb2927
  $fReadAspect19 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Aspect -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Aspect -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.CONT) -}
3260581e2888098e95013c9746eb2927
  $fReadAspect2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Aspect
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Aspect
                   InflectionData.$fReadAspect3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.Aspect>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.Aspect>_R)))) -}
7df2236fde1b6c07ddadd52f72528ace
  $fReadAspect20 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "CONT"#) -}
3260581e2888098e95013c9746eb2927
  $fReadAspect21 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadAspect23,
                  InflectionData.$fReadAspect22
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Aspect>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Aspect>_R))))) -}
3260581e2888098e95013c9746eb2927
  $fReadAspect22 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Aspect -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Aspect -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.HAB) -}
c0370ecb648af995fbb4782a49942087
  $fReadAspect23 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "HAB"#) -}
3260581e2888098e95013c9746eb2927
  $fReadAspect24 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadAspect26,
                  InflectionData.$fReadAspect25
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Aspect>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Aspect>_R))))) -}
3260581e2888098e95013c9746eb2927
  $fReadAspect25 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Aspect -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Aspect -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.IPFV) -}
5a253480b3312fb2f3d269e2c7465dcf
  $fReadAspect26 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "IPFV"#) -}
3260581e2888098e95013c9746eb2927
  $fReadAspect27 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadAspect29,
                  InflectionData.$fReadAspect28
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Aspect>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Aspect>_R))))) -}
3260581e2888098e95013c9746eb2927
  $fReadAspect28 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Aspect -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Aspect -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.PFV) -}
4a335c145b1e2faf19570196fe46c33e
  $fReadAspect29 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PFV"#) -}
3260581e2888098e95013c9746eb2927
  $fReadAspect3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Aspect -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: InflectionData.Aspect
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ InflectionData.Aspect
                   InflectionData.$fReadAspect4
                   eta
                   @ b
                   eta1) -}
3260581e2888098e95013c9746eb2927
  $fReadAspect30 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadAspect32,
                  InflectionData.$fReadAspect31
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Aspect>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Aspect>_R))))) -}
3260581e2888098e95013c9746eb2927
  $fReadAspect31 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Aspect -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Aspect -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.NNPROG) -}
b893f1afb0286e39b2c99c15347eaf9c
  $fReadAspect32 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NNPROG"#) -}
3260581e2888098e95013c9746eb2927
  $fReadAspect33 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadAspect35,
                  InflectionData.$fReadAspect34
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Aspect>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Aspect>_R))))) -}
3260581e2888098e95013c9746eb2927
  $fReadAspect34 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Aspect -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Aspect -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.UASP) -}
72d4c078420063342af5723a047d2dc4
  $fReadAspect35 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "UASP"#) -}
3260581e2888098e95013c9746eb2927
  $fReadAspect36 ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Aspect]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Aspect]
                   InflectionData.$fReadAspect37) -}
3260581e2888098e95013c9746eb2927
  $fReadAspect37 ::
    Text.ParserCombinators.ReadP.P [InflectionData.Aspect]
  {- Unfolding: (GHC.Read.$wa
                   @ InflectionData.Aspect
                   InflectionData.$fReadAspect2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Aspect>_R))
                   @ [InflectionData.Aspect]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                      @ [InflectionData.Aspect])) -}
3260581e2888098e95013c9746eb2927
  $fReadAspect4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)
                   InflectionData.$fReadAspect33
                   InflectionData.$fReadAspect5) -}
3260581e2888098e95013c9746eb2927
  $fReadAspect5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)
                   InflectionData.$fReadAspect30
                   InflectionData.$fReadAspect6) -}
3260581e2888098e95013c9746eb2927
  $fReadAspect6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)
                   InflectionData.$fReadAspect27
                   InflectionData.$fReadAspect7) -}
3260581e2888098e95013c9746eb2927
  $fReadAspect7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)
                   InflectionData.$fReadAspect24
                   InflectionData.$fReadAspect8) -}
3260581e2888098e95013c9746eb2927
  $fReadAspect8 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)
                   InflectionData.$fReadAspect21
                   InflectionData.$fReadAspect9) -}
3260581e2888098e95013c9746eb2927
  $fReadAspect9 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)
                   InflectionData.$fReadAspect18
                   InflectionData.$fReadAspect10) -}
3260581e2888098e95013c9746eb2927
  $fReadAspect_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [InflectionData.Aspect]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadAspect1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.Aspect]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.Aspect]>_R))) -}
3260581e2888098e95013c9746eb2927
  $fReadAspect_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadAspect2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.Aspect>_R)) -}
3260581e2888098e95013c9746eb2927
  $fReadAspect_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Aspect
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ InflectionData.Aspect
                   InflectionData.$fReadAspect_$creadPrec
                   eta) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase :: GHC.Read.Read InflectionData.Case
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Case
                  InflectionData.$fReadCase_$s$dmreadsPrec
                  InflectionData.$fReadCase200
                  InflectionData.$fReadCase_$creadPrec
                  InflectionData.$fReadCase_$creadListPrec -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Case] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.Case]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.Case
                   InflectionData.$fReadCase2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Case>_R))
                   @ b
                   eta1) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase10 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase179
                   InflectionData.$fReadCase11) -}
a6a29ffd4ac0a3abf04dd8ec1f9b120a
  $fReadCase100 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "COMP"#) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase101 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase103,
                  InflectionData.$fReadCase102
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase102 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.ABL) -}
7e81221ff1d50300b7414432395d1c8c
  $fReadCase103 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ABL"#) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase104 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase106,
                  InflectionData.$fReadCase105
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase105 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.LOC) -}
c47d2730ca1a44b978cc29d7eceb5df3
  $fReadCase106 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "LOC"#) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase107 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase109,
                  InflectionData.$fReadCase108
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase108 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.LAT) -}
125c58500a549a08e1eb9609f2550925
  $fReadCase109 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "LAT"#) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase11 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase176
                   InflectionData.$fReadCase12) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase110 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase112,
                  InflectionData.$fReadCase111
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase111 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.POST) -}
7e5147fc93b3aac48c7db2edfa34e803
  $fReadCase112 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "POST"#) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase113 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase115,
                  InflectionData.$fReadCase114
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase114 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.PREP) -}
ca802d96dbe57cd2c4bf27de001d111c
  $fReadCase115 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PREP"#) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase116 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase118,
                  InflectionData.$fReadCase117
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase117 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.ADP) -}
b821da500e8509c4f43169af37d45332
  $fReadCase118 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ADP"#) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase119 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase121,
                  InflectionData.$fReadCase120
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase12 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase173
                   InflectionData.$fReadCase13) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase120 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.OBL6) -}
e9b23f4eb915219d5d2484ed9eaa5654
  $fReadCase121 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OBL6"#) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase122 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase124,
                  InflectionData.$fReadCase123
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase123 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.OBL5) -}
bb50e33610f2624f6c7bbf59428dbcd9
  $fReadCase124 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OBL5"#) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase125 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase127,
                  InflectionData.$fReadCase126
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase126 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.OBL4) -}
9d340f4c457bb454dc8792256aca6d21
  $fReadCase127 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OBL4"#) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase128 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase130,
                  InflectionData.$fReadCase129
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase129 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.OBL3) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase13 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase170
                   InflectionData.$fReadCase14) -}
5466bbfeb42e16c531fb7f02e64795bd
  $fReadCase130 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OBL3"#) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase131 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase133,
                  InflectionData.$fReadCase132
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase132 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.OBL2) -}
b72cd3389452df8f0be56d9335e084c7
  $fReadCase133 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OBL2"#) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase134 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase136,
                  InflectionData.$fReadCase135
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase135 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.OBL1) -}
3816e577fc70d708f10ebd523fe19b95
  $fReadCase136 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OBL1"#) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase137 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase139,
                  InflectionData.$fReadCase138
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase138 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.DRT2) -}
c791fb3ec43ff6e87ef19488153ca8c2
  $fReadCase139 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DRT2"#) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase14 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase167
                   InflectionData.$fReadCase15) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase140 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase142,
                  InflectionData.$fReadCase141
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase141 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.TR) -}
6f91f32525d768b552d4688564451063
  $fReadCase142 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TR"#) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase143 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase145,
                  InflectionData.$fReadCase144
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase144 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.DRT1) -}
20b6b0ec732910593cbb4757a4ceef1f
  $fReadCase145 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DRT1"#) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase146 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase148,
                  InflectionData.$fReadCase147
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase147 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.OBJ) -}
b86187c0c2478614f287e3d02b897944
  $fReadCase148 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OBJ"#) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase149 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase151,
                  InflectionData.$fReadCase150
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase15 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase164
                   InflectionData.$fReadCase16) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase150 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.DTR) -}
d437ec9564fa2cf992427bb3e19f746e
  $fReadCase151 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DTR"#) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase152 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase154,
                  InflectionData.$fReadCase153
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase153 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.ABS3) -}
299e5ad94c7505e6b82370685b145f7d
  $fReadCase154 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ABS3"#) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase155 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase157,
                  InflectionData.$fReadCase156
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase156 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.ABS2) -}
64fb003431fe84e6af7bb2c95cd1093d
  $fReadCase157 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ABS2"#) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase158 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase160,
                  InflectionData.$fReadCase159
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase159 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.NOM2) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase16 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase161
                   InflectionData.$fReadCase17) -}
ca98a853b105547bcbd8abf5842be6f7
  $fReadCase160 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NOM2"#) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase161 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase163,
                  InflectionData.$fReadCase162
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase162 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.ERG2) -}
adc465566840a5cffe6375eb60addd34
  $fReadCase163 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ERG2"#) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase164 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase166,
                  InflectionData.$fReadCase165
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase165 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.PRIM) -}
d219bfae9933d753e0161490ee344b03
  $fReadCase166 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PRIM"#) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase167 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase169,
                  InflectionData.$fReadCase168
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase168 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.DIR) -}
55aba7a839b17bdbaef54c5cf7a26dcf
  $fReadCase169 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DIR"#) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase17 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase158
                   InflectionData.$fReadCase18) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase170 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase172,
                  InflectionData.$fReadCase171
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase171 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.MTR) -}
1273d6ac86c75ba1dc303254d1d2f339
  $fReadCase172 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "MTR"#) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase173 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase175,
                  InflectionData.$fReadCase174
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase174 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.ABS) -}
e2d3da0e75eeb3b92732c39c7a66f8cb
  $fReadCase175 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ABS"#) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase176 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase178,
                  InflectionData.$fReadCase177
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase177 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.NOM) -}
c8738f6af9b3597d60d0b625de1d7b5d
  $fReadCase178 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NOM"#) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase179 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase181,
                  InflectionData.$fReadCase180
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase18 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase155
                   InflectionData.$fReadCase19) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase180 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.SEC) -}
6d82a5cacab8a341324351fb7824594d
  $fReadCase181 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SEC"#) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase182 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase184,
                  InflectionData.$fReadCase183
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase183 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.INDIR) -}
ae27bcacbb5d3b39230136419cb40b80
  $fReadCase184 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "INDIR"#) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase185 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase187,
                  InflectionData.$fReadCase186
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase186 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.PEG) -}
65adfa3aee87820ff1bfa9a6634c56d9
  $fReadCase187 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PEG"#) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase188 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase190,
                  InflectionData.$fReadCase189
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase189 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.ERG) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase19 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase152
                   InflectionData.$fReadCase20) -}
38fa1293bebd3ac05ca186c0aab1b635
  $fReadCase190 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ERG"#) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase191 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase193,
                  InflectionData.$fReadCase192
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase192 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.ACC) -}
b32c4b409699753895eecd54c1cd7ccb
  $fReadCase193 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ACC"#) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase194 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase196,
                  InflectionData.$fReadCase195
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase195 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.INTR) -}
8c1808c067425ac21d57369577f2fd74
  $fReadCase196 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "INTR"#) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase197 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase199,
                  InflectionData.$fReadCase198
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase198 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.UCAS) -}
5b39f7d562afddb809fa513ac4ca0734
  $fReadCase199 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "UCAS"#) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Case
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Case
                   InflectionData.$fReadCase3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.Case>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.Case>_R)))) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase20 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase149
                   InflectionData.$fReadCase21) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase200 ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Case]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Case]
                   InflectionData.$fReadCase201) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase201 ::
    Text.ParserCombinators.ReadP.P [InflectionData.Case]
  {- Unfolding: (GHC.Read.$wa
                   @ InflectionData.Case
                   InflectionData.$fReadCase2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Case>_R))
                   @ [InflectionData.Case]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                      @ [InflectionData.Case])) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase21 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase146
                   InflectionData.$fReadCase22) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase22 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase143
                   InflectionData.$fReadCase23) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase23 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase140
                   InflectionData.$fReadCase24) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase24 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase137
                   InflectionData.$fReadCase25) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase25 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase134
                   InflectionData.$fReadCase26) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase26 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase131
                   InflectionData.$fReadCase27) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase27 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase128
                   InflectionData.$fReadCase28) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase28 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase125
                   InflectionData.$fReadCase29) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase29 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase122
                   InflectionData.$fReadCase30) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ InflectionData.Case
                   InflectionData.$fReadCase4
                   eta
                   @ b
                   eta1) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase30 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase119
                   InflectionData.$fReadCase31) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase31 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase116
                   InflectionData.$fReadCase32) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase32 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase113
                   InflectionData.$fReadCase33) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase33 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase110
                   InflectionData.$fReadCase34) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase34 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase107
                   InflectionData.$fReadCase35) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase35 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase104
                   InflectionData.$fReadCase36) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase36 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase101
                   InflectionData.$fReadCase37) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase37 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase98
                   InflectionData.$fReadCase38) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase38 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase95
                   InflectionData.$fReadCase39) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase39 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase92
                   InflectionData.$fReadCase40) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase197
                   InflectionData.$fReadCase5) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase40 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase89
                   InflectionData.$fReadCase41) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase41 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase86
                   InflectionData.$fReadCase42) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase42 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase83
                   InflectionData.$fReadCase43) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase43 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase80
                   InflectionData.$fReadCase44) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase44 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase77
                   InflectionData.$fReadCase45) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase45 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase74
                   InflectionData.$fReadCase46) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase46 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase71
                   InflectionData.$fReadCase47) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase47 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase68
                   InflectionData.$fReadCase48) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase48 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase65
                   InflectionData.$fReadCase49) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase49 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase62
                   InflectionData.$fReadCase50) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase194
                   InflectionData.$fReadCase6) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase50 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase59
                   InflectionData.$fReadCase51) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase51 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase56
                   InflectionData.$fReadCase52) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase52 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase53
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case))) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase53 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase55,
                  InflectionData.$fReadCase54
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase54 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.VOC) -}
bdbda448ee639032aabf1f115b93e5e6
  $fReadCase55 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "VOC"#) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase56 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase58,
                  InflectionData.$fReadCase57
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase57 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.PART) -}
45f454d880d3e098b89260b711a6a113
  $fReadCase58 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PART"#) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase59 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase61,
                  InflectionData.$fReadCase60
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase191
                   InflectionData.$fReadCase7) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase60 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.POSS) -}
0dd56963b1689da0cb0e8fa5e7ac9ab7
  $fReadCase61 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "POSS"#) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase62 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase64,
                  InflectionData.$fReadCase63
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase63 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.GEN) -}
35bb0eec1e2125dd87c721a5afe5e069
  $fReadCase64 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "GEN"#) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase65 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase67,
                  InflectionData.$fReadCase66
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase66 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.DISTR) -}
69ec84467d0089ee5013364b9fe7c45b
  $fReadCase67 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DISTR"#) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase68 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase70,
                  InflectionData.$fReadCase69
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase69 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.CAUS) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase188
                   InflectionData.$fReadCase8) -}
6866c58286977d696f7c2af7e66f5689
  $fReadCase70 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "CAUS"#) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase71 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase73,
                  InflectionData.$fReadCase72
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase72 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.BEN) -}
2006fd1bc88980911ffbd4b884d89370
  $fReadCase73 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "BEN"#) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase74 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase76,
                  InflectionData.$fReadCase75
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase75 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.ORN) -}
fb05e97148ed33287cd4226ab2edc4ae
  $fReadCase76 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ORN"#) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase77 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase79,
                  InflectionData.$fReadCase78
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase78 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.INSCOMIT) -}
f51a225830f69e5fc3641f6ea379ac0c
  $fReadCase79 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "INSCOMIT"#) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase8 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase185
                   InflectionData.$fReadCase9) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase80 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase82,
                  InflectionData.$fReadCase81
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase81 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.COMIT) -}
91efc6da462386bedc77553b0db137cb
  $fReadCase82 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "COMIT"#) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase83 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase85,
                  InflectionData.$fReadCase84
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase84 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.INS) -}
4e32de4b39b061f0289ddb7ff7c822fa
  $fReadCase85 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "INS"#) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase86 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase88,
                  InflectionData.$fReadCase87
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase87 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.DAT) -}
94fdc7ee9595131dca1b244247c2d7db
  $fReadCase88 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DAT"#) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase89 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase91,
                  InflectionData.$fReadCase90
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase9 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase182
                   InflectionData.$fReadCase10) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase90 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.ABE) -}
c94fb5602df67d402e948372988f50c2
  $fReadCase91 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ABE"#) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase92 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase94,
                  InflectionData.$fReadCase93
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase93 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.IDEN) -}
81c457dd6b1a71cf5ccd6fa2a9a02749
  $fReadCase94 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "IDEN"#) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase95 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase97,
                  InflectionData.$fReadCase96
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase96 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.EQU) -}
a89bf0b100b3b89c26d0cb89d3c24fb1
  $fReadCase97 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "EQU"#) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase98 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase100,
                  InflectionData.$fReadCase99
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase99 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.COMP) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [InflectionData.Case]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadCase1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.Case]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.Case]>_R))) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadCase2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.Case>_R)) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fReadCase_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Case
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ InflectionData.Case
                   InflectionData.$fReadCase_$creadPrec
                   eta) -}
f57cbd9dbed35919833216936d0e066e
  $fReadDefiniteness :: GHC.Read.Read InflectionData.Definiteness
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Definiteness
                  InflectionData.$fReadDefiniteness_$s$dmreadsPrec
                  InflectionData.$fReadDefiniteness16
                  InflectionData.$fReadDefiniteness_$creadPrec
                  InflectionData.$fReadDefiniteness_$creadListPrec -}
f57cbd9dbed35919833216936d0e066e
  $fReadDefiniteness1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Definiteness] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.Definiteness]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.Definiteness
                   InflectionData.$fReadDefiniteness2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Definiteness>_R))
                   @ b
                   eta1) -}
f57cbd9dbed35919833216936d0e066e
  $fReadDefiniteness10 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Definiteness)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadDefiniteness12,
                  InflectionData.$fReadDefiniteness11
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Definiteness>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Definiteness>_R))))) -}
f57cbd9dbed35919833216936d0e066e
  $fReadDefiniteness11 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Definiteness -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Definiteness
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.DEF) -}
b512b959535903fd401075595051618e
  $fReadDefiniteness12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DEF"#) -}
f57cbd9dbed35919833216936d0e066e
  $fReadDefiniteness13 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Definiteness)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadDefiniteness15,
                  InflectionData.$fReadDefiniteness14
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Definiteness>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Definiteness>_R))))) -}
f57cbd9dbed35919833216936d0e066e
  $fReadDefiniteness14 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Definiteness -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Definiteness
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.UDEF) -}
f49a57ea35ec0d9ba55936d04c1796d8
  $fReadDefiniteness15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "UDEF"#) -}
f57cbd9dbed35919833216936d0e066e
  $fReadDefiniteness16 ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Definiteness]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Definiteness]
                   InflectionData.$fReadDefiniteness17) -}
f57cbd9dbed35919833216936d0e066e
  $fReadDefiniteness17 ::
    Text.ParserCombinators.ReadP.P [InflectionData.Definiteness]
  {- Unfolding: (GHC.Read.$wa
                   @ InflectionData.Definiteness
                   InflectionData.$fReadDefiniteness2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Definiteness>_R))
                   @ [InflectionData.Definiteness]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                      @ [InflectionData.Definiteness])) -}
f57cbd9dbed35919833216936d0e066e
  $fReadDefiniteness2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Definiteness
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Definiteness
                   InflectionData.$fReadDefiniteness3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.Definiteness>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.Definiteness>_R)))) -}
f57cbd9dbed35919833216936d0e066e
  $fReadDefiniteness3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Definiteness -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: InflectionData.Definiteness
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ InflectionData.Definiteness
                   InflectionData.$fReadDefiniteness4
                   eta
                   @ b
                   eta1) -}
f57cbd9dbed35919833216936d0e066e
  $fReadDefiniteness4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Definiteness)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Definiteness)
                   InflectionData.$fReadDefiniteness13
                   InflectionData.$fReadDefiniteness5) -}
f57cbd9dbed35919833216936d0e066e
  $fReadDefiniteness5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Definiteness)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Definiteness)
                   InflectionData.$fReadDefiniteness10
                   InflectionData.$fReadDefiniteness6) -}
f57cbd9dbed35919833216936d0e066e
  $fReadDefiniteness6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Definiteness)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Definiteness)
                   InflectionData.$fReadDefiniteness7
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           InflectionData.Definiteness))) -}
f57cbd9dbed35919833216936d0e066e
  $fReadDefiniteness7 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Definiteness)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadDefiniteness9,
                  InflectionData.$fReadDefiniteness8
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Definiteness>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Definiteness>_R))))) -}
f57cbd9dbed35919833216936d0e066e
  $fReadDefiniteness8 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Definiteness -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Definiteness
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.INDF) -}
1221659d8d60ad3f80ac1ae25a507703
  $fReadDefiniteness9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "INDF"#) -}
f57cbd9dbed35919833216936d0e066e
  $fReadDefiniteness_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [InflectionData.Definiteness]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadDefiniteness1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.Definiteness]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.Definiteness]>_R))) -}
f57cbd9dbed35919833216936d0e066e
  $fReadDefiniteness_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      InflectionData.Definiteness
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadDefiniteness2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.Definiteness>_R)) -}
f57cbd9dbed35919833216936d0e066e
  $fReadDefiniteness_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Definiteness
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ InflectionData.Definiteness
                   InflectionData.$fReadDefiniteness_$creadPrec
                   eta) -}
8c39249ddb7859f10b018a2526e04a45
  $fReadEvidentiality :: GHC.Read.Read InflectionData.Evidentiality
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Evidentiality
                  InflectionData.$fReadEvidentiality_$s$dmreadsPrec
                  InflectionData.$fReadEvidentiality44
                  InflectionData.$fReadEvidentiality_$creadPrec
                  InflectionData.$fReadEvidentiality_$creadListPrec -}
8c39249ddb7859f10b018a2526e04a45
  $fReadEvidentiality1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Evidentiality]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.Evidentiality]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.Evidentiality
                   InflectionData.$fReadEvidentiality2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Evidentiality>_R))
                   @ b
                   eta1) -}
8c39249ddb7859f10b018a2526e04a45
  $fReadEvidentiality10 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Evidentiality)
                   InflectionData.$fReadEvidentiality23
                   InflectionData.$fReadEvidentiality11) -}
8c39249ddb7859f10b018a2526e04a45
  $fReadEvidentiality11 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Evidentiality)
                   InflectionData.$fReadEvidentiality20
                   InflectionData.$fReadEvidentiality12) -}
8c39249ddb7859f10b018a2526e04a45
  $fReadEvidentiality12 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Evidentiality)
                   InflectionData.$fReadEvidentiality17
                   InflectionData.$fReadEvidentiality13) -}
8c39249ddb7859f10b018a2526e04a45
  $fReadEvidentiality13 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Evidentiality)
                   InflectionData.$fReadEvidentiality14
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           InflectionData.Evidentiality))) -}
8c39249ddb7859f10b018a2526e04a45
  $fReadEvidentiality14 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Evidentiality)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadEvidentiality16,
                  InflectionData.$fReadEvidentiality15
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Evidentiality>_R))))) -}
8c39249ddb7859f10b018a2526e04a45
  $fReadEvidentiality15 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Evidentiality
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.ASS) -}
4efe24ac52ba03b73d42a7d32b4265cc
  $fReadEvidentiality16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ASS"#) -}
8c39249ddb7859f10b018a2526e04a45
  $fReadEvidentiality17 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Evidentiality)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadEvidentiality19,
                  InflectionData.$fReadEvidentiality18
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Evidentiality>_R))))) -}
8c39249ddb7859f10b018a2526e04a45
  $fReadEvidentiality18 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Evidentiality
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.QUO) -}
9e111d06eba8818c24f0bc706fc97e5e
  $fReadEvidentiality19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "QUO"#) -}
8c39249ddb7859f10b018a2526e04a45
  $fReadEvidentiality2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Evidentiality
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Evidentiality
                   InflectionData.$fReadEvidentiality3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.Evidentiality>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.Evidentiality>_R)))) -}
8c39249ddb7859f10b018a2526e04a45
  $fReadEvidentiality20 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Evidentiality)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadEvidentiality22,
                  InflectionData.$fReadEvidentiality21
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Evidentiality>_R))))) -}
8c39249ddb7859f10b018a2526e04a45
  $fReadEvidentiality21 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Evidentiality
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.HSY) -}
a96f2368cb6cfeb40500390ae93f3698
  $fReadEvidentiality22 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "HSY"#) -}
8c39249ddb7859f10b018a2526e04a45
  $fReadEvidentiality23 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Evidentiality)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadEvidentiality25,
                  InflectionData.$fReadEvidentiality24
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Evidentiality>_R))))) -}
8c39249ddb7859f10b018a2526e04a45
  $fReadEvidentiality24 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Evidentiality
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.REP) -}
72dbd746cf5011685b45aa364badad4a
  $fReadEvidentiality25 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "REP"#) -}
8c39249ddb7859f10b018a2526e04a45
  $fReadEvidentiality26 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Evidentiality)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadEvidentiality28,
                  InflectionData.$fReadEvidentiality27
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Evidentiality>_R))))) -}
8c39249ddb7859f10b018a2526e04a45
  $fReadEvidentiality27 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Evidentiality
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.INFER) -}
efd4463f897659dc1c2c288e172b9f7b
  $fReadEvidentiality28 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "INFER"#) -}
8c39249ddb7859f10b018a2526e04a45
  $fReadEvidentiality29 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Evidentiality)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadEvidentiality31,
                  InflectionData.$fReadEvidentiality30
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Evidentiality>_R))))) -}
8c39249ddb7859f10b018a2526e04a45
  $fReadEvidentiality3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: InflectionData.Evidentiality
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ InflectionData.Evidentiality
                   InflectionData.$fReadEvidentiality4
                   eta
                   @ b
                   eta1) -}
8c39249ddb7859f10b018a2526e04a45
  $fReadEvidentiality30 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Evidentiality
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.AUD) -}
523a6d84548c343eb13a0d38d15617fe
  $fReadEvidentiality31 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AUD"#) -}
8c39249ddb7859f10b018a2526e04a45
  $fReadEvidentiality32 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Evidentiality)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadEvidentiality34,
                  InflectionData.$fReadEvidentiality33
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Evidentiality>_R))))) -}
8c39249ddb7859f10b018a2526e04a45
  $fReadEvidentiality33 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Evidentiality
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.NVIS) -}
f4241589a3501e38b72f89a7d3f59aae
  $fReadEvidentiality34 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NVIS"#) -}
8c39249ddb7859f10b018a2526e04a45
  $fReadEvidentiality35 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Evidentiality)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadEvidentiality37,
                  InflectionData.$fReadEvidentiality36
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Evidentiality>_R))))) -}
8c39249ddb7859f10b018a2526e04a45
  $fReadEvidentiality36 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Evidentiality
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.VIS) -}
a52dfb4a70b45a66750c2c79210d5519
  $fReadEvidentiality37 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "VIS"#) -}
8c39249ddb7859f10b018a2526e04a45
  $fReadEvidentiality38 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Evidentiality)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadEvidentiality40,
                  InflectionData.$fReadEvidentiality39
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Evidentiality>_R))))) -}
8c39249ddb7859f10b018a2526e04a45
  $fReadEvidentiality39 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Evidentiality
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.EXP) -}
8c39249ddb7859f10b018a2526e04a45
  $fReadEvidentiality4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Evidentiality)
                   InflectionData.$fReadEvidentiality41
                   InflectionData.$fReadEvidentiality5) -}
87e4f0612caeb79c5f045ce9a42bc43b
  $fReadEvidentiality40 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "EXP"#) -}
8c39249ddb7859f10b018a2526e04a45
  $fReadEvidentiality41 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Evidentiality)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadEvidentiality43,
                  InflectionData.$fReadEvidentiality42
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Evidentiality>_R))))) -}
8c39249ddb7859f10b018a2526e04a45
  $fReadEvidentiality42 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Evidentiality
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.UEVI) -}
0e337ae1a9e3ef725abecf628fc3a074
  $fReadEvidentiality43 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "UEVI"#) -}
8c39249ddb7859f10b018a2526e04a45
  $fReadEvidentiality44 ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Evidentiality]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Evidentiality]
                   InflectionData.$fReadEvidentiality45) -}
8c39249ddb7859f10b018a2526e04a45
  $fReadEvidentiality45 ::
    Text.ParserCombinators.ReadP.P [InflectionData.Evidentiality]
  {- Unfolding: (GHC.Read.$wa
                   @ InflectionData.Evidentiality
                   InflectionData.$fReadEvidentiality2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Evidentiality>_R))
                   @ [InflectionData.Evidentiality]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                      @ [InflectionData.Evidentiality])) -}
8c39249ddb7859f10b018a2526e04a45
  $fReadEvidentiality5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Evidentiality)
                   InflectionData.$fReadEvidentiality38
                   InflectionData.$fReadEvidentiality6) -}
8c39249ddb7859f10b018a2526e04a45
  $fReadEvidentiality6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Evidentiality)
                   InflectionData.$fReadEvidentiality35
                   InflectionData.$fReadEvidentiality7) -}
8c39249ddb7859f10b018a2526e04a45
  $fReadEvidentiality7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Evidentiality)
                   InflectionData.$fReadEvidentiality32
                   InflectionData.$fReadEvidentiality8) -}
8c39249ddb7859f10b018a2526e04a45
  $fReadEvidentiality8 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Evidentiality)
                   InflectionData.$fReadEvidentiality29
                   InflectionData.$fReadEvidentiality9) -}
8c39249ddb7859f10b018a2526e04a45
  $fReadEvidentiality9 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Evidentiality)
                   InflectionData.$fReadEvidentiality26
                   InflectionData.$fReadEvidentiality10) -}
8c39249ddb7859f10b018a2526e04a45
  $fReadEvidentiality_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [InflectionData.Evidentiality]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadEvidentiality1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.Evidentiality]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.Evidentiality]>_R))) -}
8c39249ddb7859f10b018a2526e04a45
  $fReadEvidentiality_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      InflectionData.Evidentiality
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadEvidentiality2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.Evidentiality>_R)) -}
8c39249ddb7859f10b018a2526e04a45
  $fReadEvidentiality_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Evidentiality
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ InflectionData.Evidentiality
                   InflectionData.$fReadEvidentiality_$creadPrec
                   eta) -}
ce522c1d99b503cc50c6a04abbeb7ec2
  $fReadExpress ::
    GHC.Read.Read a => GHC.Read.Read (InflectionData.Express a)
  DFunId[0]
  {- Arity: 1, Strictness: <L,U(A,A,U,A)>m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a40 $dRead :: GHC.Read.Read a40.
                  @ (InflectionData.Express a40)
                  (InflectionData.$fReadExpress_$creadsPrec @ a40 $dRead)
                  (InflectionData.$fReadExpress_$creadList @ a40 $dRead)
                  (InflectionData.$fReadExpress_$creadPrec @ a40 $dRead)
                  (InflectionData.$fReadExpress_$creadListPrec @ a40 $dRead) -}
ce522c1d99b503cc50c6a04abbeb7ec2
  $fReadExpress1 ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Express a] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 3, Strictness: <L,U(A,A,U,A)><L,A><L,C(U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a40
                   $dRead :: GHC.Read.Read a40
                   eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.Express a40]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ (InflectionData.Express a40)
                   (InflectionData.$fReadExpress2 @ a40 $dRead)
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Express a40>_R))
                   @ b
                   eta1) -}
ce522c1d99b503cc50c6a04abbeb7ec2
  $fReadExpress2 ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP (InflectionData.Express a)
  {- Arity: 2, Strictness: <L,1*U(A,A,1*U,A)><L,U> -}
ce522c1d99b503cc50c6a04abbeb7ec2
  $fReadExpress_$creadList ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Express a]
  {- Arity: 1, Strictness: <L,U(A,A,U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a40 $dRead :: GHC.Read.Read a40 ->
                 Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Express a40]
                   (GHC.Read.$wa
                      @ (InflectionData.Express a40)
                      (InflectionData.$fReadExpress2 @ a40 $dRead)
                        `cast`
                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                <InflectionData.Express a40>_R))
                      @ [InflectionData.Express a40]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [InflectionData.Express a40]))) -}
ce522c1d99b503cc50c6a04abbeb7ec2
  $fReadExpress_$creadListPrec ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadPrec.ReadPrec [InflectionData.Express a]
  {- Arity: 3, Strictness: <L,U(A,A,U,A)><L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadExpress1
                  `cast`
                (forall a40.
                 <GHC.Read.Read a40>_R
                 ->_R Trans
                          (<Text.ParserCombinators.ReadPrec.Prec>_R
                           ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                         <[InflectionData.Express a40]>_R))
                          (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                    <[InflectionData.Express a40]>_R))) -}
ce522c1d99b503cc50c6a04abbeb7ec2
  $fReadExpress_$creadPrec ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadPrec.ReadPrec (InflectionData.Express a)
  {- Arity: 2, Strictness: <L,1*U(A,A,1*U,A)><L,U>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadExpress2
                  `cast`
                (forall a40.
                 <GHC.Read.Read a40>_R
                 ->_R Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <InflectionData.Express a40>_R)) -}
ce522c1d99b503cc50c6a04abbeb7ec2
  $fReadExpress_$creadsPrec ::
    GHC.Read.Read a =>
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS (InflectionData.Express a)
  {- Arity: 2, Strictness: <L,1*U(A,A,1*U,A)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a40 $dRead :: GHC.Read.Read a40 eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadP.run
                   @ (InflectionData.Express a40)
                   ((InflectionData.$fReadExpress2 @ a40 $dRead eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <InflectionData.Express a40>_R)
                      @ (InflectionData.Express a40)
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ (InflectionData.Express a40)))) -}
8b595aff125f95a2b35fe330b0ba7fad
  $fReadGender :: GHC.Read.Read InflectionData.Gender
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Gender
                  InflectionData.$fReadGender_$s$dmreadsPrec
                  InflectionData.$fReadGender24
                  InflectionData.$fReadGender_$creadPrec
                  InflectionData.$fReadGender_$creadListPrec -}
8b595aff125f95a2b35fe330b0ba7fad
  $fReadGender1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Gender] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.Gender]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.Gender
                   InflectionData.$fReadGender2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Gender>_R))
                   @ b
                   eta1) -}
8b595aff125f95a2b35fe330b0ba7fad
  $fReadGender10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Gender -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Gender -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.N) -}
403c1ebe59617722b959234ec81d9f2f
  $fReadGender11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "N"#) -}
8b595aff125f95a2b35fe330b0ba7fad
  $fReadGender12 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Gender)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadGender14,
                  InflectionData.$fReadGender13
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Gender>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Gender>_R))))) -}
8b595aff125f95a2b35fe330b0ba7fad
  $fReadGender13 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Gender -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Gender -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.COM) -}
463e701b1580b031f6f9beee5f697eac
  $fReadGender14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "COM"#) -}
8b595aff125f95a2b35fe330b0ba7fad
  $fReadGender15 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Gender)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadGender17,
                  InflectionData.$fReadGender16
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Gender>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Gender>_R))))) -}
8b595aff125f95a2b35fe330b0ba7fad
  $fReadGender16 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Gender -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Gender -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.F) -}
77c69a4893716a27ccc6b454b93ea74e
  $fReadGender17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "F"#) -}
8b595aff125f95a2b35fe330b0ba7fad
  $fReadGender18 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Gender)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadGender20,
                  InflectionData.$fReadGender19
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Gender>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Gender>_R))))) -}
8b595aff125f95a2b35fe330b0ba7fad
  $fReadGender19 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Gender -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Gender -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.M) -}
8b595aff125f95a2b35fe330b0ba7fad
  $fReadGender2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Gender
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Gender
                   InflectionData.$fReadGender3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.Gender>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.Gender>_R)))) -}
54213169e566c768a1b96075ff3cf2fb
  $fReadGender20 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "M"#) -}
8b595aff125f95a2b35fe330b0ba7fad
  $fReadGender21 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Gender)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadGender23,
                  InflectionData.$fReadGender22
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Gender>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Gender>_R))))) -}
8b595aff125f95a2b35fe330b0ba7fad
  $fReadGender22 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Gender -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Gender -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.UGEN) -}
023414cab865705b2dc02e30f18b0799
  $fReadGender23 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "UGEN"#) -}
8b595aff125f95a2b35fe330b0ba7fad
  $fReadGender24 ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Gender]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Gender]
                   InflectionData.$fReadGender25) -}
8b595aff125f95a2b35fe330b0ba7fad
  $fReadGender25 ::
    Text.ParserCombinators.ReadP.P [InflectionData.Gender]
  {- Unfolding: (GHC.Read.$wa
                   @ InflectionData.Gender
                   InflectionData.$fReadGender2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Gender>_R))
                   @ [InflectionData.Gender]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                      @ [InflectionData.Gender])) -}
8b595aff125f95a2b35fe330b0ba7fad
  $fReadGender3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Gender -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: InflectionData.Gender
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ InflectionData.Gender
                   InflectionData.$fReadGender4
                   eta
                   @ b
                   eta1) -}
8b595aff125f95a2b35fe330b0ba7fad
  $fReadGender4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Gender)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Gender)
                   InflectionData.$fReadGender21
                   InflectionData.$fReadGender5) -}
8b595aff125f95a2b35fe330b0ba7fad
  $fReadGender5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Gender)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Gender)
                   InflectionData.$fReadGender18
                   InflectionData.$fReadGender6) -}
8b595aff125f95a2b35fe330b0ba7fad
  $fReadGender6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Gender)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Gender)
                   InflectionData.$fReadGender15
                   InflectionData.$fReadGender7) -}
8b595aff125f95a2b35fe330b0ba7fad
  $fReadGender7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Gender)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Gender)
                   InflectionData.$fReadGender12
                   InflectionData.$fReadGender8) -}
8b595aff125f95a2b35fe330b0ba7fad
  $fReadGender8 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Gender)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Gender)
                   InflectionData.$fReadGender9
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           InflectionData.Gender))) -}
8b595aff125f95a2b35fe330b0ba7fad
  $fReadGender9 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Gender)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadGender11,
                  InflectionData.$fReadGender10
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Gender>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Gender>_R))))) -}
8b595aff125f95a2b35fe330b0ba7fad
  $fReadGender_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [InflectionData.Gender]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadGender1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.Gender]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.Gender]>_R))) -}
8b595aff125f95a2b35fe330b0ba7fad
  $fReadGender_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Gender
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadGender2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.Gender>_R)) -}
8b595aff125f95a2b35fe330b0ba7fad
  $fReadGender_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Gender
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ InflectionData.Gender
                   InflectionData.$fReadGender_$creadPrec
                   eta) -}
38ff9a9c45f96d99123b457fda219bfb
  $fReadHonorific :: GHC.Read.Read InflectionData.Honorific
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Honorific
                  InflectionData.$fReadHonorific_$s$dmreadsPrec
                  InflectionData.$fReadHonorific20
                  InflectionData.$fReadHonorific_$creadPrec
                  InflectionData.$fReadHonorific_$creadListPrec -}
38ff9a9c45f96d99123b457fda219bfb
  $fReadHonorific1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Honorific] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.Honorific]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.Honorific
                   InflectionData.$fReadHonorific2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Honorific>_R))
                   @ b
                   eta1) -}
8a6b19c47e2124d8972c08cd1372d788
  $fReadHonorific10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FORM"#) -}
38ff9a9c45f96d99123b457fda219bfb
  $fReadHonorific11 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Honorific)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadHonorific13,
                  InflectionData.$fReadHonorific12
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Honorific>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Honorific>_R))))) -}
38ff9a9c45f96d99123b457fda219bfb
  $fReadHonorific12 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Honorific -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Honorific
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.NEU) -}
a50a2aca2ed9c035f185314dafe17c50
  $fReadHonorific13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NEU"#) -}
38ff9a9c45f96d99123b457fda219bfb
  $fReadHonorific14 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Honorific)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadHonorific16,
                  InflectionData.$fReadHonorific15
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Honorific>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Honorific>_R))))) -}
38ff9a9c45f96d99123b457fda219bfb
  $fReadHonorific15 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Honorific -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Honorific
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.FAM) -}
e8403baf1ae36ce5b14f58eb522f068f
  $fReadHonorific16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FAM"#) -}
38ff9a9c45f96d99123b457fda219bfb
  $fReadHonorific17 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Honorific)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadHonorific19,
                  InflectionData.$fReadHonorific18
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Honorific>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Honorific>_R))))) -}
38ff9a9c45f96d99123b457fda219bfb
  $fReadHonorific18 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Honorific -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Honorific
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.UHON) -}
4c1e23be8e5480b163fb8652882ddf45
  $fReadHonorific19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "UHON"#) -}
38ff9a9c45f96d99123b457fda219bfb
  $fReadHonorific2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Honorific
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Honorific
                   InflectionData.$fReadHonorific3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.Honorific>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.Honorific>_R)))) -}
38ff9a9c45f96d99123b457fda219bfb
  $fReadHonorific20 ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Honorific]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Honorific]
                   InflectionData.$fReadHonorific21) -}
38ff9a9c45f96d99123b457fda219bfb
  $fReadHonorific21 ::
    Text.ParserCombinators.ReadP.P [InflectionData.Honorific]
  {- Unfolding: (GHC.Read.$wa
                   @ InflectionData.Honorific
                   InflectionData.$fReadHonorific2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Honorific>_R))
                   @ [InflectionData.Honorific]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                      @ [InflectionData.Honorific])) -}
38ff9a9c45f96d99123b457fda219bfb
  $fReadHonorific3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Honorific -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: InflectionData.Honorific
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ InflectionData.Honorific
                   InflectionData.$fReadHonorific4
                   eta
                   @ b
                   eta1) -}
38ff9a9c45f96d99123b457fda219bfb
  $fReadHonorific4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Honorific)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Honorific)
                   InflectionData.$fReadHonorific17
                   InflectionData.$fReadHonorific5) -}
38ff9a9c45f96d99123b457fda219bfb
  $fReadHonorific5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Honorific)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Honorific)
                   InflectionData.$fReadHonorific14
                   InflectionData.$fReadHonorific6) -}
38ff9a9c45f96d99123b457fda219bfb
  $fReadHonorific6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Honorific)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Honorific)
                   InflectionData.$fReadHonorific11
                   InflectionData.$fReadHonorific7) -}
38ff9a9c45f96d99123b457fda219bfb
  $fReadHonorific7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Honorific)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Honorific)
                   InflectionData.$fReadHonorific8
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           InflectionData.Honorific))) -}
38ff9a9c45f96d99123b457fda219bfb
  $fReadHonorific8 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Honorific)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadHonorific10,
                  InflectionData.$fReadHonorific9
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Honorific>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Honorific>_R))))) -}
38ff9a9c45f96d99123b457fda219bfb
  $fReadHonorific9 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Honorific -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Honorific
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.FORM) -}
38ff9a9c45f96d99123b457fda219bfb
  $fReadHonorific_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [InflectionData.Honorific]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadHonorific1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.Honorific]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.Honorific]>_R))) -}
38ff9a9c45f96d99123b457fda219bfb
  $fReadHonorific_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Honorific
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadHonorific2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.Honorific>_R)) -}
38ff9a9c45f96d99123b457fda219bfb
  $fReadHonorific_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Honorific
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ InflectionData.Honorific
                   InflectionData.$fReadHonorific_$creadPrec
                   eta) -}
e87dedc6ee0613212a8838da9054e9ca
  $fReadInflectionSystem ::
    GHC.Read.Read InflectionData.InflectionSystem
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.InflectionSystem
                  InflectionData.$fReadInflectionSystem_$creadsPrec
                  InflectionData.$fReadInflectionSystem_$sreadListDefault
                  InflectionData.$fReadInflectionSystem_$creadPrec
                  InflectionData.$fReadInflectionSystem_$creadListPrec -}
e87dedc6ee0613212a8838da9054e9ca
  $fReadInflectionSystem1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.InflectionSystem]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.InflectionSystem]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.InflectionSystem
                   InflectionData.$fReadInflectionSystem2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.InflectionSystem>_R))
                   @ b
                   eta1) -}
e87dedc6ee0613212a8838da9054e9ca
  $fReadInflectionSystem2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP
         InflectionData.InflectionSystem
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.InflectionSystem
                   InflectionData.$fReadInflectionSystem3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.InflectionSystem>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.InflectionSystem>_R)))) -}
e87dedc6ee0613212a8838da9054e9ca
  $fReadInflectionSystem3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.InflectionSystem
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: InflectionData.InflectionSystem
                         -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 ->
                 InflectionData.$wa ww1 @ b w1 }) -}
e87dedc6ee0613212a8838da9054e9ca
  $fReadInflectionSystem_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [InflectionData.InflectionSystem]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadInflectionSystem1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.InflectionSystem]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.InflectionSystem]>_R))) -}
e87dedc6ee0613212a8838da9054e9ca
  $fReadInflectionSystem_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      InflectionData.InflectionSystem
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadInflectionSystem2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.InflectionSystem>_R)) -}
e87dedc6ee0613212a8838da9054e9ca
  $fReadInflectionSystem_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS
         InflectionData.InflectionSystem
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadP.run
                   @ InflectionData.InflectionSystem
                   ((GHC.Read.$fReadDouble10
                       @ InflectionData.InflectionSystem
                       InflectionData.$fReadInflectionSystem3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                           <InflectionData.InflectionSystem>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                      <InflectionData.InflectionSystem>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <InflectionData.InflectionSystem>_R)
                      @ InflectionData.InflectionSystem
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ InflectionData.InflectionSystem))) -}
e87dedc6ee0613212a8838da9054e9ca
  $fReadInflectionSystem_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS
      [InflectionData.InflectionSystem]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.InflectionSystem]
                   ((InflectionData.$fReadInflectionSystem_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[InflectionData.InflectionSystem]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[InflectionData.InflectionSystem]>_R)
                      @ [InflectionData.InflectionSystem]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [InflectionData.InflectionSystem]))) -}
b0a24ad20939906e8d87ed3073f32603
  $fReadLexCat :: GHC.Read.Read InflectionData.LexCat
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.LexCat
                  InflectionData.$fReadLexCat_$s$dmreadsPrec
                  InflectionData.$fReadLexCat_$sreadListDefault
                  InflectionData.$fReadLexCat_$creadPrec
                  InflectionData.$fReadLexCat_$creadListPrec -}
b0a24ad20939906e8d87ed3073f32603
  $fReadLexCat1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.LexCat] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.LexCat]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.LexCat
                   InflectionData.$fReadLexCat2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.LexCat>_R))
                   @ b
                   eta1) -}
b0a24ad20939906e8d87ed3073f32603
  $fReadLexCat10 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
                   InflectionData.$fReadLexCat27
                   InflectionData.$fReadLexCat11) -}
b0a24ad20939906e8d87ed3073f32603
  $fReadLexCat11 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
                   InflectionData.$fReadLexCat24
                   InflectionData.$fReadLexCat12) -}
b0a24ad20939906e8d87ed3073f32603
  $fReadLexCat12 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
                   InflectionData.$fReadLexCat21
                   InflectionData.$fReadLexCat13) -}
b0a24ad20939906e8d87ed3073f32603
  $fReadLexCat13 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
                   InflectionData.$fReadLexCat18
                   InflectionData.$fReadLexCat14) -}
b0a24ad20939906e8d87ed3073f32603
  $fReadLexCat14 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
                   InflectionData.$fReadLexCat15
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           InflectionData.LexCat))) -}
b0a24ad20939906e8d87ed3073f32603
  $fReadLexCat15 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadLexCat17,
                  InflectionData.$fReadLexCat16
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.LexCat>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.LexCat>_R))))) -}
b0a24ad20939906e8d87ed3073f32603
  $fReadLexCat16 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.Pron) -}
58960672586e45b4c836665dac8423ed
  $fReadLexCat17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Pron"#) -}
b0a24ad20939906e8d87ed3073f32603
  $fReadLexCat18 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadLexCat20,
                  InflectionData.$fReadLexCat19
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.LexCat>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.LexCat>_R))))) -}
b0a24ad20939906e8d87ed3073f32603
  $fReadLexCat19 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.Subj) -}
b0a24ad20939906e8d87ed3073f32603
  $fReadLexCat2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.LexCat
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.LexCat
                   InflectionData.$fReadLexCat3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.LexCat>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.LexCat>_R)))) -}
d96e6586e3e282c52d25e71607bcb978
  $fReadLexCat20 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Subj"#) -}
b0a24ad20939906e8d87ed3073f32603
  $fReadLexCat21 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadLexCat23,
                  InflectionData.$fReadLexCat22
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.LexCat>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.LexCat>_R))))) -}
b0a24ad20939906e8d87ed3073f32603
  $fReadLexCat22 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.Obj) -}
abdeccb293d8774ac787e5aa1bf57e14
  $fReadLexCat23 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Obj"#) -}
b0a24ad20939906e8d87ed3073f32603
  $fReadLexCat24 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadLexCat26,
                  InflectionData.$fReadLexCat25
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.LexCat>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.LexCat>_R))))) -}
b0a24ad20939906e8d87ed3073f32603
  $fReadLexCat25 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.Adv) -}
84432ffb34fc3306bd45c1b5aea80d0b
  $fReadLexCat26 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Adv"#) -}
b0a24ad20939906e8d87ed3073f32603
  $fReadLexCat27 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadLexCat29,
                  InflectionData.$fReadLexCat28
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.LexCat>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.LexCat>_R))))) -}
b0a24ad20939906e8d87ed3073f32603
  $fReadLexCat28 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.Adj) -}
ad525f567bce2cec0423340c32da25d0
  $fReadLexCat29 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Adj"#) -}
b0a24ad20939906e8d87ed3073f32603
  $fReadLexCat3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: InflectionData.LexCat
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ InflectionData.LexCat
                   InflectionData.$fReadLexCat4
                   eta
                   @ b
                   eta1) -}
b0a24ad20939906e8d87ed3073f32603
  $fReadLexCat30 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadLexCat32,
                  InflectionData.$fReadLexCat31
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.LexCat>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.LexCat>_R))))) -}
b0a24ad20939906e8d87ed3073f32603
  $fReadLexCat31 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.Adpo) -}
2a31b2cb2398f48835df619f23c0d0af
  $fReadLexCat32 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Adpo"#) -}
b0a24ad20939906e8d87ed3073f32603
  $fReadLexCat33 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadLexCat35,
                  InflectionData.$fReadLexCat34
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.LexCat>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.LexCat>_R))))) -}
b0a24ad20939906e8d87ed3073f32603
  $fReadLexCat34 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.Noun) -}
86f73b84b49ebfd4adbf6b38691838c1
  $fReadLexCat35 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Noun"#) -}
b0a24ad20939906e8d87ed3073f32603
  $fReadLexCat36 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadLexCat38,
                  InflectionData.$fReadLexCat37
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.LexCat>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.LexCat>_R))))) -}
b0a24ad20939906e8d87ed3073f32603
  $fReadLexCat37 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.Det) -}
04bb2c9148b03ba835e071d50b9a3639
  $fReadLexCat38 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Det"#) -}
b0a24ad20939906e8d87ed3073f32603
  $fReadLexCat39 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadLexCat41,
                  InflectionData.$fReadLexCat40
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.LexCat>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.LexCat>_R))))) -}
b0a24ad20939906e8d87ed3073f32603
  $fReadLexCat4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
                   InflectionData.$fReadLexCat45
                   InflectionData.$fReadLexCat5) -}
b0a24ad20939906e8d87ed3073f32603
  $fReadLexCat40 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.Verb) -}
9c9afff00b64181eb69f901e20bcb4f2
  $fReadLexCat41 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Verb"#) -}
b0a24ad20939906e8d87ed3073f32603
  $fReadLexCat42 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadLexCat44,
                  InflectionData.$fReadLexCat43
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.LexCat>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.LexCat>_R))))) -}
b0a24ad20939906e8d87ed3073f32603
  $fReadLexCat43 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.Infl) -}
b862db3d7a40b104848f0595f8979dd1
  $fReadLexCat44 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Infl"#) -}
b0a24ad20939906e8d87ed3073f32603
  $fReadLexCat45 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadLexCat47,
                  InflectionData.$fReadLexCat46
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.LexCat>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.LexCat>_R))))) -}
b0a24ad20939906e8d87ed3073f32603
  $fReadLexCat46 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.Comp) -}
f679db164fd39cc92579b8af2440cfcb
  $fReadLexCat47 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Comp"#) -}
b0a24ad20939906e8d87ed3073f32603
  $fReadLexCat5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
                   InflectionData.$fReadLexCat42
                   InflectionData.$fReadLexCat6) -}
b0a24ad20939906e8d87ed3073f32603
  $fReadLexCat6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
                   InflectionData.$fReadLexCat39
                   InflectionData.$fReadLexCat7) -}
b0a24ad20939906e8d87ed3073f32603
  $fReadLexCat7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
                   InflectionData.$fReadLexCat36
                   InflectionData.$fReadLexCat8) -}
b0a24ad20939906e8d87ed3073f32603
  $fReadLexCat8 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
                   InflectionData.$fReadLexCat33
                   InflectionData.$fReadLexCat9) -}
b0a24ad20939906e8d87ed3073f32603
  $fReadLexCat9 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
                   InflectionData.$fReadLexCat30
                   InflectionData.$fReadLexCat10) -}
b0a24ad20939906e8d87ed3073f32603
  $fReadLexCat_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [InflectionData.LexCat]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadLexCat1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.LexCat]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.LexCat]>_R))) -}
b0a24ad20939906e8d87ed3073f32603
  $fReadLexCat_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadLexCat2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.LexCat>_R)) -}
b0a24ad20939906e8d87ed3073f32603
  $fReadLexCat_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.LexCat
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ InflectionData.LexCat
                   InflectionData.$fReadLexCat_$creadPrec
                   eta) -}
b0a24ad20939906e8d87ed3073f32603
  $fReadLexCat_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.LexCat]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.LexCat]
                   ((InflectionData.$fReadLexCat_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[InflectionData.LexCat]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[InflectionData.LexCat]>_R)
                      @ [InflectionData.LexCat]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [InflectionData.LexCat]))) -}
f539d8313c5a8ab2854680bd81c6cecb
  $fReadManifest ::
    GHC.Read.Read a => GHC.Read.Read (InflectionData.Manifest a)
  DFunId[0]
  {- Arity: 1, Strictness: <L,U(A,A,U,A)>m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a40 $dRead :: GHC.Read.Read a40.
                  @ (InflectionData.Manifest a40)
                  (InflectionData.$fReadManifest_$creadsPrec @ a40 $dRead)
                  (InflectionData.$fReadManifest_$creadList @ a40 $dRead)
                  (InflectionData.$fReadManifest_$creadPrec @ a40 $dRead)
                  (InflectionData.$fReadManifest_$creadListPrec @ a40 $dRead) -}
f539d8313c5a8ab2854680bd81c6cecb
  $fReadManifest1 ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Manifest a] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 3, Strictness: <L,U(A,A,U,A)><L,A><L,C(U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a40
                   $dRead :: GHC.Read.Read a40
                   eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.Manifest a40]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ (InflectionData.Manifest a40)
                   (InflectionData.$fReadManifest2 @ a40 $dRead)
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Manifest a40>_R))
                   @ b
                   eta1) -}
76456242f532d9dc0fcafb7500af715a
  $fReadManifest10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Manifest [InflectionData.Aspect]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)>,
     Unfolding: (\ n :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Manifest [InflectionData.Aspect]
                          -> Text.ParserCombinators.ReadP.P b ->
                 let {
                   lvl117 :: Text.ParserCombinators.ReadP.P b
                   = let {
                       lvl118 :: Text.ParserCombinators.ReadP.P b
                       = eta (InflectionData.NoManifest @ [InflectionData.Aspect])
                     } in
                     Text.Read.Lex.expect2
                       @ b
                       (\ a98 :: Text.Read.Lex.Lexeme ->
                        case a98 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                          Text.Read.Lex.Ident a40
                          -> case GHC.Base.eqString
                                    a40
                                    InflectionData.$fReadManifest6 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                               GHC.Types.True -> lvl118 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl117) -}
                   = \ w2 :: () -> lvl117
                 } in
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b
                   (Text.ParserCombinators.ReadP.Look
                      @ b
                      (\ a98 :: GHC.Base.String ->
                       (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                         `cast`
                       (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                         @ b
                         k))
                   (case n of wild { GHC.Types.I# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x 10) of wild2 {
                      GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                      GHC.Types.True
                      -> let {
                           lvl118 :: Text.ParserCombinators.ReadP.P b
                           = let {
                               lvl119 :: Text.ParserCombinators.ReadP.P b
                               = GHC.Read.$wa
                                   @ (InflectionData.LexCat,
                                      InflectionData.ManifestType,
                                      GHC.Types.Int)
                                   InflectionData.$fReadManifest5
                                     `cast`
                                   (Trans
                                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                       <(InflectionData.LexCat,
                                                         InflectionData.ManifestType,
                                                         GHC.Types.Int)>_R))
                                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                  <(InflectionData.LexCat,
                                                    InflectionData.ManifestType,
                                                    GHC.Types.Int)>_R)))
                                   @ b
                                   (\ a40 :: [(InflectionData.LexCat,
                                               InflectionData.ManifestType,
                                               GHC.Types.Int)] ->
                                    GHC.Read.$wa
                                      @ InflectionData.Aspect
                                      InflectionData.$fReadAspect2
                                        `cast`
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <InflectionData.Aspect>_R))
                                      @ b
                                      (\ a41 :: [InflectionData.Aspect] ->
                                       eta
                                         (InflectionData.Manifest
                                            @ [InflectionData.Aspect]
                                            a40
                                            a41)))
                             } in
                             Text.Read.Lex.expect2
                               @ b
                               (\ a98 :: Text.Read.Lex.Lexeme ->
                                case a98 of wild1 {
                                  DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                  Text.Read.Lex.Ident a40
                                  -> case GHC.Base.eqString
                                            a40
                                            InflectionData.$fReadManifest3 of wild3 {
                                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                       GHC.Types.True -> lvl119 } })
                         } in
                         let {
                           k1 :: () -> Text.ParserCombinators.ReadP.P b
                             {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl118) -}
                           = \ w2 :: () -> lvl118
                         } in
                         Text.ParserCombinators.ReadP.Look
                           @ b
                           (\ a98 :: GHC.Base.String ->
                            (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                              `cast`
                            (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                              @ b
                              k1) } })) -}
02346c3aafaeac9909a5db7a01e8ca09
  $fReadManifest100 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Person -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: InflectionData.Person
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ InflectionData.Person
                   InflectionData.$fReadManifest101
                   eta
                   @ b
                   eta1) -}
02346c3aafaeac9909a5db7a01e8ca09
  $fReadManifest101 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)
                   InflectionData.$fReadManifest130
                   InflectionData.$fReadManifest102) -}
02346c3aafaeac9909a5db7a01e8ca09
  $fReadManifest102 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)
                   InflectionData.$fReadManifest127
                   InflectionData.$fReadManifest103) -}
02346c3aafaeac9909a5db7a01e8ca09
  $fReadManifest103 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)
                   InflectionData.$fReadManifest124
                   InflectionData.$fReadManifest104) -}
02346c3aafaeac9909a5db7a01e8ca09
  $fReadManifest104 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)
                   InflectionData.$fReadManifest121
                   InflectionData.$fReadManifest105) -}
02346c3aafaeac9909a5db7a01e8ca09
  $fReadManifest105 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)
                   InflectionData.$fReadManifest118
                   InflectionData.$fReadManifest106) -}
02346c3aafaeac9909a5db7a01e8ca09
  $fReadManifest106 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)
                   InflectionData.$fReadManifest115
                   InflectionData.$fReadManifest107) -}
02346c3aafaeac9909a5db7a01e8ca09
  $fReadManifest107 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)
                   InflectionData.$fReadManifest112
                   InflectionData.$fReadManifest108) -}
02346c3aafaeac9909a5db7a01e8ca09
  $fReadManifest108 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)
                   InflectionData.$fReadManifest109
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           InflectionData.Person))) -}
02346c3aafaeac9909a5db7a01e8ca09
  $fReadManifest109 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest111,
                  InflectionData.$fReadManifest110
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Person>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Person>_R))))) -}
02346c3aafaeac9909a5db7a01e8ca09
  $fReadManifest110 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Person -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Person -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.THRDOBV) -}
4ddf928438a9d2726ccbdc04cce11008
  $fReadManifest111 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "THRDOBV"#) -}
02346c3aafaeac9909a5db7a01e8ca09
  $fReadManifest112 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest114,
                  InflectionData.$fReadManifest113
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Person>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Person>_R))))) -}
02346c3aafaeac9909a5db7a01e8ca09
  $fReadManifest113 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Person -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Person -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.THRDPROX) -}
da2e085de6d914496bf2ef92e615f991
  $fReadManifest114 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "THRDPROX"#) -}
02346c3aafaeac9909a5db7a01e8ca09
  $fReadManifest115 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest117,
                  InflectionData.$fReadManifest116
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Person>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Person>_R))))) -}
02346c3aafaeac9909a5db7a01e8ca09
  $fReadManifest116 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Person -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Person -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.THIRD) -}
19e383d2fd3c74c12f05ac14a5157239
  $fReadManifest117 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "THIRD"#) -}
02346c3aafaeac9909a5db7a01e8ca09
  $fReadManifest118 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest120,
                  InflectionData.$fReadManifest119
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Person>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Person>_R))))) -}
02346c3aafaeac9909a5db7a01e8ca09
  $fReadManifest119 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Person -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Person -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.SECOND) -}
b0c592e6f8ba65946bb6c95f5500a5d1
  $fReadManifest12 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Manifest [InflectionData.Case]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)>,
     Unfolding: (\ n :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Manifest [InflectionData.Case]
                          -> Text.ParserCombinators.ReadP.P b ->
                 let {
                   lvl117 :: Text.ParserCombinators.ReadP.P b
                   = let {
                       lvl118 :: Text.ParserCombinators.ReadP.P b
                       = eta (InflectionData.NoManifest @ [InflectionData.Case])
                     } in
                     Text.Read.Lex.expect2
                       @ b
                       (\ a98 :: Text.Read.Lex.Lexeme ->
                        case a98 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                          Text.Read.Lex.Ident a40
                          -> case GHC.Base.eqString
                                    a40
                                    InflectionData.$fReadManifest6 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                               GHC.Types.True -> lvl118 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl117) -}
                   = \ w2 :: () -> lvl117
                 } in
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b
                   (Text.ParserCombinators.ReadP.Look
                      @ b
                      (\ a98 :: GHC.Base.String ->
                       (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                         `cast`
                       (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                         @ b
                         k))
                   (case n of wild { GHC.Types.I# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x 10) of wild2 {
                      GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                      GHC.Types.True
                      -> let {
                           lvl118 :: Text.ParserCombinators.ReadP.P b
                           = let {
                               lvl119 :: Text.ParserCombinators.ReadP.P b
                               = GHC.Read.$wa
                                   @ (InflectionData.LexCat,
                                      InflectionData.ManifestType,
                                      GHC.Types.Int)
                                   InflectionData.$fReadManifest5
                                     `cast`
                                   (Trans
                                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                       <(InflectionData.LexCat,
                                                         InflectionData.ManifestType,
                                                         GHC.Types.Int)>_R))
                                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                  <(InflectionData.LexCat,
                                                    InflectionData.ManifestType,
                                                    GHC.Types.Int)>_R)))
                                   @ b
                                   (\ a40 :: [(InflectionData.LexCat,
                                               InflectionData.ManifestType,
                                               GHC.Types.Int)] ->
                                    GHC.Read.$wa
                                      @ InflectionData.Case
                                      InflectionData.$fReadCase2
                                        `cast`
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <InflectionData.Case>_R))
                                      @ b
                                      (\ a41 :: [InflectionData.Case] ->
                                       eta
                                         (InflectionData.Manifest @ [InflectionData.Case] a40 a41)))
                             } in
                             Text.Read.Lex.expect2
                               @ b
                               (\ a98 :: Text.Read.Lex.Lexeme ->
                                case a98 of wild1 {
                                  DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                  Text.Read.Lex.Ident a40
                                  -> case GHC.Base.eqString
                                            a40
                                            InflectionData.$fReadManifest3 of wild3 {
                                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                       GHC.Types.True -> lvl119 } })
                         } in
                         let {
                           k1 :: () -> Text.ParserCombinators.ReadP.P b
                             {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl118) -}
                           = \ w2 :: () -> lvl118
                         } in
                         Text.ParserCombinators.ReadP.Look
                           @ b
                           (\ a98 :: GHC.Base.String ->
                            (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                              `cast`
                            (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                              @ b
                              k1) } })) -}
22723828622ce48754c9500d73e4bc35
  $fReadManifest120 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SECOND"#) -}
02346c3aafaeac9909a5db7a01e8ca09
  $fReadManifest121 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest123,
                  InflectionData.$fReadManifest122
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Person>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Person>_R))))) -}
02346c3aafaeac9909a5db7a01e8ca09
  $fReadManifest122 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Person -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Person -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.FSTEXCL) -}
4a83153b47da97366d333e7a84960a7f
  $fReadManifest123 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FSTEXCL"#) -}
02346c3aafaeac9909a5db7a01e8ca09
  $fReadManifest124 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest126,
                  InflectionData.$fReadManifest125
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Person>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Person>_R))))) -}
02346c3aafaeac9909a5db7a01e8ca09
  $fReadManifest125 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Person -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Person -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.FSTINCL) -}
f7a8718839a00fb594df1d678a1267fb
  $fReadManifest126 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FSTINCL"#) -}
02346c3aafaeac9909a5db7a01e8ca09
  $fReadManifest127 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest129,
                  InflectionData.$fReadManifest128
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Person>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Person>_R))))) -}
02346c3aafaeac9909a5db7a01e8ca09
  $fReadManifest128 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Person -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Person -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.FIRST) -}
6edffe7aceb3c52b701491e1af43d948
  $fReadManifest129 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FIRST"#) -}
02346c3aafaeac9909a5db7a01e8ca09
  $fReadManifest130 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest132,
                  InflectionData.$fReadManifest131
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Person>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Person>_R))))) -}
02346c3aafaeac9909a5db7a01e8ca09
  $fReadManifest131 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Person -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Person -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.UPER) -}
9ceeae8d1f6b1a2ba8b2657b3e2a7fd2
  $fReadManifest132 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "UPER"#) -}
de14bb1638ed13c2443e5b24ba189339
  $fReadManifest134 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Manifest [InflectionData.Polarity]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)>,
     Unfolding: (\ n :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Manifest [InflectionData.Polarity]
                          -> Text.ParserCombinators.ReadP.P b ->
                 let {
                   lvl117 :: Text.ParserCombinators.ReadP.P b
                   = let {
                       lvl118 :: Text.ParserCombinators.ReadP.P b
                       = eta (InflectionData.NoManifest @ [InflectionData.Polarity])
                     } in
                     Text.Read.Lex.expect2
                       @ b
                       (\ a98 :: Text.Read.Lex.Lexeme ->
                        case a98 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                          Text.Read.Lex.Ident a40
                          -> case GHC.Base.eqString
                                    a40
                                    InflectionData.$fReadManifest6 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                               GHC.Types.True -> lvl118 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl117) -}
                   = \ w2 :: () -> lvl117
                 } in
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b
                   (Text.ParserCombinators.ReadP.Look
                      @ b
                      (\ a98 :: GHC.Base.String ->
                       (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                         `cast`
                       (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                         @ b
                         k))
                   (case n of wild { GHC.Types.I# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x 10) of wild2 {
                      GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                      GHC.Types.True
                      -> let {
                           lvl118 :: Text.ParserCombinators.ReadP.P b
                           = let {
                               lvl119 :: Text.ParserCombinators.ReadP.P b
                               = GHC.Read.$wa
                                   @ (InflectionData.LexCat,
                                      InflectionData.ManifestType,
                                      GHC.Types.Int)
                                   InflectionData.$fReadManifest5
                                     `cast`
                                   (Trans
                                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                       <(InflectionData.LexCat,
                                                         InflectionData.ManifestType,
                                                         GHC.Types.Int)>_R))
                                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                  <(InflectionData.LexCat,
                                                    InflectionData.ManifestType,
                                                    GHC.Types.Int)>_R)))
                                   @ b
                                   (\ a40 :: [(InflectionData.LexCat,
                                               InflectionData.ManifestType,
                                               GHC.Types.Int)] ->
                                    GHC.Read.$wa
                                      @ InflectionData.Polarity
                                      InflectionData.$fReadManifest135
                                        `cast`
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <InflectionData.Polarity>_R))
                                      @ b
                                      (\ a41 :: [InflectionData.Polarity] ->
                                       eta
                                         (InflectionData.Manifest
                                            @ [InflectionData.Polarity]
                                            a40
                                            a41)))
                             } in
                             Text.Read.Lex.expect2
                               @ b
                               (\ a98 :: Text.Read.Lex.Lexeme ->
                                case a98 of wild1 {
                                  DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                  Text.Read.Lex.Ident a40
                                  -> case GHC.Base.eqString
                                            a40
                                            InflectionData.$fReadManifest3 of wild3 {
                                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                       GHC.Types.True -> lvl119 } })
                         } in
                         let {
                           k1 :: () -> Text.ParserCombinators.ReadP.P b
                             {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl118) -}
                           = \ w2 :: () -> lvl118
                         } in
                         Text.ParserCombinators.ReadP.Look
                           @ b
                           (\ a98 :: GHC.Base.String ->
                            (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                              `cast`
                            (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                              @ b
                              k1) } })) -}
ad1fe4829d26ee371daeb2b0168138e4
  $fReadManifest135 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Polarity
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Polarity
                   InflectionData.$fReadManifest136
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.Polarity>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.Polarity>_R)))) -}
ad1fe4829d26ee371daeb2b0168138e4
  $fReadManifest136 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Polarity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: InflectionData.Polarity
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ InflectionData.Polarity
                   InflectionData.$fReadManifest137
                   eta
                   @ b
                   eta1) -}
ad1fe4829d26ee371daeb2b0168138e4
  $fReadManifest137 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Polarity)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Polarity)
                   InflectionData.$fReadManifest146
                   InflectionData.$fReadManifest138) -}
ad1fe4829d26ee371daeb2b0168138e4
  $fReadManifest138 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Polarity)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Polarity)
                   InflectionData.$fReadManifest143
                   InflectionData.$fReadManifest139) -}
ad1fe4829d26ee371daeb2b0168138e4
  $fReadManifest139 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Polarity)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Polarity)
                   InflectionData.$fReadManifest140
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           InflectionData.Polarity))) -}
6f0fa2786f07bdab445a20b9a4515a72
  $fReadManifest14 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Manifest [InflectionData.Definiteness]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)>,
     Unfolding: (\ n :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Manifest [InflectionData.Definiteness]
                          -> Text.ParserCombinators.ReadP.P b ->
                 let {
                   lvl117 :: Text.ParserCombinators.ReadP.P b
                   = let {
                       lvl118 :: Text.ParserCombinators.ReadP.P b
                       = eta (InflectionData.NoManifest @ [InflectionData.Definiteness])
                     } in
                     Text.Read.Lex.expect2
                       @ b
                       (\ a98 :: Text.Read.Lex.Lexeme ->
                        case a98 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                          Text.Read.Lex.Ident a40
                          -> case GHC.Base.eqString
                                    a40
                                    InflectionData.$fReadManifest6 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                               GHC.Types.True -> lvl118 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl117) -}
                   = \ w2 :: () -> lvl117
                 } in
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b
                   (Text.ParserCombinators.ReadP.Look
                      @ b
                      (\ a98 :: GHC.Base.String ->
                       (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                         `cast`
                       (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                         @ b
                         k))
                   (case n of wild { GHC.Types.I# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x 10) of wild2 {
                      GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                      GHC.Types.True
                      -> let {
                           lvl118 :: Text.ParserCombinators.ReadP.P b
                           = let {
                               lvl119 :: Text.ParserCombinators.ReadP.P b
                               = GHC.Read.$wa
                                   @ (InflectionData.LexCat,
                                      InflectionData.ManifestType,
                                      GHC.Types.Int)
                                   InflectionData.$fReadManifest5
                                     `cast`
                                   (Trans
                                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                       <(InflectionData.LexCat,
                                                         InflectionData.ManifestType,
                                                         GHC.Types.Int)>_R))
                                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                  <(InflectionData.LexCat,
                                                    InflectionData.ManifestType,
                                                    GHC.Types.Int)>_R)))
                                   @ b
                                   (\ a40 :: [(InflectionData.LexCat,
                                               InflectionData.ManifestType,
                                               GHC.Types.Int)] ->
                                    GHC.Read.$wa
                                      @ InflectionData.Definiteness
                                      InflectionData.$fReadDefiniteness2
                                        `cast`
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <InflectionData.Definiteness>_R))
                                      @ b
                                      (\ a41 :: [InflectionData.Definiteness] ->
                                       eta
                                         (InflectionData.Manifest
                                            @ [InflectionData.Definiteness]
                                            a40
                                            a41)))
                             } in
                             Text.Read.Lex.expect2
                               @ b
                               (\ a98 :: Text.Read.Lex.Lexeme ->
                                case a98 of wild1 {
                                  DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                  Text.Read.Lex.Ident a40
                                  -> case GHC.Base.eqString
                                            a40
                                            InflectionData.$fReadManifest3 of wild3 {
                                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                       GHC.Types.True -> lvl119 } })
                         } in
                         let {
                           k1 :: () -> Text.ParserCombinators.ReadP.P b
                             {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl118) -}
                           = \ w2 :: () -> lvl118
                         } in
                         Text.ParserCombinators.ReadP.Look
                           @ b
                           (\ a98 :: GHC.Base.String ->
                            (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                              `cast`
                            (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                              @ b
                              k1) } })) -}
ad1fe4829d26ee371daeb2b0168138e4
  $fReadManifest140 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Polarity)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest142,
                  InflectionData.$fReadManifest141
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Polarity>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Polarity>_R))))) -}
ad1fe4829d26ee371daeb2b0168138e4
  $fReadManifest141 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Polarity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Polarity
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.NEG) -}
1ba544517e3139a8abf5c06545fd51c8
  $fReadManifest142 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NEG"#) -}
ad1fe4829d26ee371daeb2b0168138e4
  $fReadManifest143 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Polarity)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest145,
                  InflectionData.$fReadManifest144
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Polarity>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Polarity>_R))))) -}
ad1fe4829d26ee371daeb2b0168138e4
  $fReadManifest144 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Polarity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Polarity
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.AFF) -}
a0de2825e1063912d1c45851bd8a7321
  $fReadManifest145 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AFF"#) -}
ad1fe4829d26ee371daeb2b0168138e4
  $fReadManifest146 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Polarity)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest148,
                  InflectionData.$fReadManifest147
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Polarity>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Polarity>_R))))) -}
ad1fe4829d26ee371daeb2b0168138e4
  $fReadManifest147 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Polarity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Polarity
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.UPOL) -}
3b98edcf65822aeca830e5fcdbe43077
  $fReadManifest148 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "UPOL"#) -}
b21c413ef4bb0f950329aba196446338
  $fReadManifest150 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Manifest [InflectionData.Specificity]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)>,
     Unfolding: (\ n :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Manifest [InflectionData.Specificity]
                          -> Text.ParserCombinators.ReadP.P b ->
                 let {
                   lvl117 :: Text.ParserCombinators.ReadP.P b
                   = let {
                       lvl118 :: Text.ParserCombinators.ReadP.P b
                       = eta (InflectionData.NoManifest @ [InflectionData.Specificity])
                     } in
                     Text.Read.Lex.expect2
                       @ b
                       (\ a98 :: Text.Read.Lex.Lexeme ->
                        case a98 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                          Text.Read.Lex.Ident a40
                          -> case GHC.Base.eqString
                                    a40
                                    InflectionData.$fReadManifest6 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                               GHC.Types.True -> lvl118 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl117) -}
                   = \ w2 :: () -> lvl117
                 } in
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b
                   (Text.ParserCombinators.ReadP.Look
                      @ b
                      (\ a98 :: GHC.Base.String ->
                       (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                         `cast`
                       (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                         @ b
                         k))
                   (case n of wild { GHC.Types.I# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x 10) of wild2 {
                      GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                      GHC.Types.True
                      -> let {
                           lvl118 :: Text.ParserCombinators.ReadP.P b
                           = let {
                               lvl119 :: Text.ParserCombinators.ReadP.P b
                               = GHC.Read.$wa
                                   @ (InflectionData.LexCat,
                                      InflectionData.ManifestType,
                                      GHC.Types.Int)
                                   InflectionData.$fReadManifest5
                                     `cast`
                                   (Trans
                                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                       <(InflectionData.LexCat,
                                                         InflectionData.ManifestType,
                                                         GHC.Types.Int)>_R))
                                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                  <(InflectionData.LexCat,
                                                    InflectionData.ManifestType,
                                                    GHC.Types.Int)>_R)))
                                   @ b
                                   (\ a40 :: [(InflectionData.LexCat,
                                               InflectionData.ManifestType,
                                               GHC.Types.Int)] ->
                                    GHC.Read.$wa
                                      @ InflectionData.Specificity
                                      InflectionData.$fReadManifest151
                                        `cast`
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <InflectionData.Specificity>_R))
                                      @ b
                                      (\ a41 :: [InflectionData.Specificity] ->
                                       eta
                                         (InflectionData.Manifest
                                            @ [InflectionData.Specificity]
                                            a40
                                            a41)))
                             } in
                             Text.Read.Lex.expect2
                               @ b
                               (\ a98 :: Text.Read.Lex.Lexeme ->
                                case a98 of wild1 {
                                  DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                  Text.Read.Lex.Ident a40
                                  -> case GHC.Base.eqString
                                            a40
                                            InflectionData.$fReadManifest3 of wild3 {
                                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                       GHC.Types.True -> lvl119 } })
                         } in
                         let {
                           k1 :: () -> Text.ParserCombinators.ReadP.P b
                             {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl118) -}
                           = \ w2 :: () -> lvl118
                         } in
                         Text.ParserCombinators.ReadP.Look
                           @ b
                           (\ a98 :: GHC.Base.String ->
                            (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                              `cast`
                            (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                              @ b
                              k1) } })) -}
a4a6522da9f32c4a22fdcdb048233e77
  $fReadManifest151 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Specificity
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Specificity
                   InflectionData.$fReadManifest152
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.Specificity>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.Specificity>_R)))) -}
a4a6522da9f32c4a22fdcdb048233e77
  $fReadManifest152 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Specificity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: InflectionData.Specificity
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ InflectionData.Specificity
                   InflectionData.$fReadManifest153
                   eta
                   @ b
                   eta1) -}
a4a6522da9f32c4a22fdcdb048233e77
  $fReadManifest153 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Specificity)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Specificity)
                   InflectionData.$fReadManifest162
                   InflectionData.$fReadManifest154) -}
a4a6522da9f32c4a22fdcdb048233e77
  $fReadManifest154 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Specificity)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Specificity)
                   InflectionData.$fReadManifest159
                   InflectionData.$fReadManifest155) -}
a4a6522da9f32c4a22fdcdb048233e77
  $fReadManifest155 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Specificity)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Specificity)
                   InflectionData.$fReadManifest156
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           InflectionData.Specificity))) -}
a4a6522da9f32c4a22fdcdb048233e77
  $fReadManifest156 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Specificity)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest158,
                  InflectionData.$fReadManifest157
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Specificity>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Specificity>_R))))) -}
a4a6522da9f32c4a22fdcdb048233e77
  $fReadManifest157 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Specificity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Specificity
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.NSPEC) -}
1bfefe579186ac421b9f660cf7641398
  $fReadManifest158 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NSPEC"#) -}
a4a6522da9f32c4a22fdcdb048233e77
  $fReadManifest159 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Specificity)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest161,
                  InflectionData.$fReadManifest160
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Specificity>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Specificity>_R))))) -}
588996aa6e96cda479199452bb8b778f
  $fReadManifest16 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Manifest [InflectionData.Evidentiality]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)>,
     Unfolding: (\ n :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Manifest [InflectionData.Evidentiality]
                          -> Text.ParserCombinators.ReadP.P b ->
                 let {
                   lvl117 :: Text.ParserCombinators.ReadP.P b
                   = let {
                       lvl118 :: Text.ParserCombinators.ReadP.P b
                       = eta (InflectionData.NoManifest @ [InflectionData.Evidentiality])
                     } in
                     Text.Read.Lex.expect2
                       @ b
                       (\ a98 :: Text.Read.Lex.Lexeme ->
                        case a98 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                          Text.Read.Lex.Ident a40
                          -> case GHC.Base.eqString
                                    a40
                                    InflectionData.$fReadManifest6 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                               GHC.Types.True -> lvl118 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl117) -}
                   = \ w2 :: () -> lvl117
                 } in
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b
                   (Text.ParserCombinators.ReadP.Look
                      @ b
                      (\ a98 :: GHC.Base.String ->
                       (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                         `cast`
                       (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                         @ b
                         k))
                   (case n of wild { GHC.Types.I# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x 10) of wild2 {
                      GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                      GHC.Types.True
                      -> let {
                           lvl118 :: Text.ParserCombinators.ReadP.P b
                           = let {
                               lvl119 :: Text.ParserCombinators.ReadP.P b
                               = GHC.Read.$wa
                                   @ (InflectionData.LexCat,
                                      InflectionData.ManifestType,
                                      GHC.Types.Int)
                                   InflectionData.$fReadManifest5
                                     `cast`
                                   (Trans
                                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                       <(InflectionData.LexCat,
                                                         InflectionData.ManifestType,
                                                         GHC.Types.Int)>_R))
                                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                  <(InflectionData.LexCat,
                                                    InflectionData.ManifestType,
                                                    GHC.Types.Int)>_R)))
                                   @ b
                                   (\ a40 :: [(InflectionData.LexCat,
                                               InflectionData.ManifestType,
                                               GHC.Types.Int)] ->
                                    GHC.Read.$wa
                                      @ InflectionData.Evidentiality
                                      InflectionData.$fReadEvidentiality2
                                        `cast`
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <InflectionData.Evidentiality>_R))
                                      @ b
                                      (\ a41 :: [InflectionData.Evidentiality] ->
                                       eta
                                         (InflectionData.Manifest
                                            @ [InflectionData.Evidentiality]
                                            a40
                                            a41)))
                             } in
                             Text.Read.Lex.expect2
                               @ b
                               (\ a98 :: Text.Read.Lex.Lexeme ->
                                case a98 of wild1 {
                                  DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                  Text.Read.Lex.Ident a40
                                  -> case GHC.Base.eqString
                                            a40
                                            InflectionData.$fReadManifest3 of wild3 {
                                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                       GHC.Types.True -> lvl119 } })
                         } in
                         let {
                           k1 :: () -> Text.ParserCombinators.ReadP.P b
                             {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl118) -}
                           = \ w2 :: () -> lvl118
                         } in
                         Text.ParserCombinators.ReadP.Look
                           @ b
                           (\ a98 :: GHC.Base.String ->
                            (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                              `cast`
                            (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                              @ b
                              k1) } })) -}
a4a6522da9f32c4a22fdcdb048233e77
  $fReadManifest160 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Specificity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Specificity
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.SPEC) -}
14accf52e48fa0ac660011b8bfac1129
  $fReadManifest161 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SPEC"#) -}
a4a6522da9f32c4a22fdcdb048233e77
  $fReadManifest162 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Specificity)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest164,
                  InflectionData.$fReadManifest163
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Specificity>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Specificity>_R))))) -}
a4a6522da9f32c4a22fdcdb048233e77
  $fReadManifest163 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Specificity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Specificity
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.USPE) -}
42a773d4bc6fbb1220628e0c90b7d8c8
  $fReadManifest164 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "USPE"#) -}
456a2b1e383c07879232564eb49c3246
  $fReadManifest166 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Manifest [InflectionData.Tense]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)>,
     Unfolding: (\ n :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Manifest [InflectionData.Tense]
                          -> Text.ParserCombinators.ReadP.P b ->
                 let {
                   lvl117 :: Text.ParserCombinators.ReadP.P b
                   = let {
                       lvl118 :: Text.ParserCombinators.ReadP.P b
                       = eta (InflectionData.NoManifest @ [InflectionData.Tense])
                     } in
                     Text.Read.Lex.expect2
                       @ b
                       (\ a98 :: Text.Read.Lex.Lexeme ->
                        case a98 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                          Text.Read.Lex.Ident a40
                          -> case GHC.Base.eqString
                                    a40
                                    InflectionData.$fReadManifest6 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                               GHC.Types.True -> lvl118 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl117) -}
                   = \ w2 :: () -> lvl117
                 } in
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b
                   (Text.ParserCombinators.ReadP.Look
                      @ b
                      (\ a98 :: GHC.Base.String ->
                       (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                         `cast`
                       (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                         @ b
                         k))
                   (case n of wild { GHC.Types.I# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x 10) of wild2 {
                      GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                      GHC.Types.True
                      -> let {
                           lvl118 :: Text.ParserCombinators.ReadP.P b
                           = let {
                               lvl119 :: Text.ParserCombinators.ReadP.P b
                               = GHC.Read.$wa
                                   @ (InflectionData.LexCat,
                                      InflectionData.ManifestType,
                                      GHC.Types.Int)
                                   InflectionData.$fReadManifest5
                                     `cast`
                                   (Trans
                                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                       <(InflectionData.LexCat,
                                                         InflectionData.ManifestType,
                                                         GHC.Types.Int)>_R))
                                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                  <(InflectionData.LexCat,
                                                    InflectionData.ManifestType,
                                                    GHC.Types.Int)>_R)))
                                   @ b
                                   (\ a40 :: [(InflectionData.LexCat,
                                               InflectionData.ManifestType,
                                               GHC.Types.Int)] ->
                                    GHC.Read.$wa
                                      @ InflectionData.Tense
                                      InflectionData.$fReadManifest167
                                        `cast`
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <InflectionData.Tense>_R))
                                      @ b
                                      (\ a41 :: [InflectionData.Tense] ->
                                       eta
                                         (InflectionData.Manifest
                                            @ [InflectionData.Tense]
                                            a40
                                            a41)))
                             } in
                             Text.Read.Lex.expect2
                               @ b
                               (\ a98 :: Text.Read.Lex.Lexeme ->
                                case a98 of wild1 {
                                  DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                  Text.Read.Lex.Ident a40
                                  -> case GHC.Base.eqString
                                            a40
                                            InflectionData.$fReadManifest3 of wild3 {
                                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                       GHC.Types.True -> lvl119 } })
                         } in
                         let {
                           k1 :: () -> Text.ParserCombinators.ReadP.P b
                             {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl118) -}
                           = \ w2 :: () -> lvl118
                         } in
                         Text.ParserCombinators.ReadP.Look
                           @ b
                           (\ a98 :: GHC.Base.String ->
                            (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                              `cast`
                            (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                              @ b
                              k1) } })) -}
b64289664290fdc9c5510c85a7afdd78
  $fReadManifest167 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Tense
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Tense
                   InflectionData.$fReadManifest168
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.Tense>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.Tense>_R)))) -}
b64289664290fdc9c5510c85a7afdd78
  $fReadManifest168 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: InflectionData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ InflectionData.Tense
                   InflectionData.$fReadManifest169
                   eta
                   @ b
                   eta1) -}
b64289664290fdc9c5510c85a7afdd78
  $fReadManifest169 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadManifest242
                   InflectionData.$fReadManifest170) -}
b64289664290fdc9c5510c85a7afdd78
  $fReadManifest170 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadManifest239
                   InflectionData.$fReadManifest171) -}
b64289664290fdc9c5510c85a7afdd78
  $fReadManifest171 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadManifest236
                   InflectionData.$fReadManifest172) -}
b64289664290fdc9c5510c85a7afdd78
  $fReadManifest172 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadManifest233
                   InflectionData.$fReadManifest173) -}
b64289664290fdc9c5510c85a7afdd78
  $fReadManifest173 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadManifest230
                   InflectionData.$fReadManifest174) -}
b64289664290fdc9c5510c85a7afdd78
  $fReadManifest174 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadManifest227
                   InflectionData.$fReadManifest175) -}
b64289664290fdc9c5510c85a7afdd78
  $fReadManifest175 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadManifest224
                   InflectionData.$fReadManifest176) -}
b64289664290fdc9c5510c85a7afdd78
  $fReadManifest176 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadManifest221
                   InflectionData.$fReadManifest177) -}
b64289664290fdc9c5510c85a7afdd78
  $fReadManifest177 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadManifest218
                   InflectionData.$fReadManifest178) -}
b64289664290fdc9c5510c85a7afdd78
  $fReadManifest178 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadManifest215
                   InflectionData.$fReadManifest179) -}
b64289664290fdc9c5510c85a7afdd78
  $fReadManifest179 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadManifest212
                   InflectionData.$fReadManifest180) -}
c868ab047494aed52c268c65b661331c
  $fReadManifest18 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Manifest [InflectionData.Gender]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)>,
     Unfolding: (\ n :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Manifest [InflectionData.Gender]
                          -> Text.ParserCombinators.ReadP.P b ->
                 let {
                   lvl117 :: Text.ParserCombinators.ReadP.P b
                   = let {
                       lvl118 :: Text.ParserCombinators.ReadP.P b
                       = eta (InflectionData.NoManifest @ [InflectionData.Gender])
                     } in
                     Text.Read.Lex.expect2
                       @ b
                       (\ a98 :: Text.Read.Lex.Lexeme ->
                        case a98 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                          Text.Read.Lex.Ident a40
                          -> case GHC.Base.eqString
                                    a40
                                    InflectionData.$fReadManifest6 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                               GHC.Types.True -> lvl118 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl117) -}
                   = \ w2 :: () -> lvl117
                 } in
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b
                   (Text.ParserCombinators.ReadP.Look
                      @ b
                      (\ a98 :: GHC.Base.String ->
                       (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                         `cast`
                       (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                         @ b
                         k))
                   (case n of wild { GHC.Types.I# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x 10) of wild2 {
                      GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                      GHC.Types.True
                      -> let {
                           lvl118 :: Text.ParserCombinators.ReadP.P b
                           = let {
                               lvl119 :: Text.ParserCombinators.ReadP.P b
                               = GHC.Read.$wa
                                   @ (InflectionData.LexCat,
                                      InflectionData.ManifestType,
                                      GHC.Types.Int)
                                   InflectionData.$fReadManifest5
                                     `cast`
                                   (Trans
                                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                       <(InflectionData.LexCat,
                                                         InflectionData.ManifestType,
                                                         GHC.Types.Int)>_R))
                                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                  <(InflectionData.LexCat,
                                                    InflectionData.ManifestType,
                                                    GHC.Types.Int)>_R)))
                                   @ b
                                   (\ a40 :: [(InflectionData.LexCat,
                                               InflectionData.ManifestType,
                                               GHC.Types.Int)] ->
                                    GHC.Read.$wa
                                      @ InflectionData.Gender
                                      InflectionData.$fReadGender2
                                        `cast`
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <InflectionData.Gender>_R))
                                      @ b
                                      (\ a41 :: [InflectionData.Gender] ->
                                       eta
                                         (InflectionData.Manifest
                                            @ [InflectionData.Gender]
                                            a40
                                            a41)))
                             } in
                             Text.Read.Lex.expect2
                               @ b
                               (\ a98 :: Text.Read.Lex.Lexeme ->
                                case a98 of wild1 {
                                  DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                  Text.Read.Lex.Ident a40
                                  -> case GHC.Base.eqString
                                            a40
                                            InflectionData.$fReadManifest3 of wild3 {
                                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                       GHC.Types.True -> lvl119 } })
                         } in
                         let {
                           k1 :: () -> Text.ParserCombinators.ReadP.P b
                             {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl118) -}
                           = \ w2 :: () -> lvl118
                         } in
                         Text.ParserCombinators.ReadP.Look
                           @ b
                           (\ a98 :: GHC.Base.String ->
                            (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                              `cast`
                            (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                              @ b
                              k1) } })) -}
b64289664290fdc9c5510c85a7afdd78
  $fReadManifest180 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadManifest209
                   InflectionData.$fReadManifest181) -}
b64289664290fdc9c5510c85a7afdd78
  $fReadManifest181 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadManifest206
                   InflectionData.$fReadManifest182) -}
b64289664290fdc9c5510c85a7afdd78
  $fReadManifest182 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadManifest203
                   InflectionData.$fReadManifest183) -}
b64289664290fdc9c5510c85a7afdd78
  $fReadManifest183 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadManifest200
                   InflectionData.$fReadManifest184) -}
b64289664290fdc9c5510c85a7afdd78
  $fReadManifest184 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadManifest197
                   InflectionData.$fReadManifest185) -}
b64289664290fdc9c5510c85a7afdd78
  $fReadManifest185 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadManifest194
                   InflectionData.$fReadManifest186) -}
b64289664290fdc9c5510c85a7afdd78
  $fReadManifest186 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadManifest191
                   InflectionData.$fReadManifest187) -}
b64289664290fdc9c5510c85a7afdd78
  $fReadManifest187 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadManifest188
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense))) -}
b64289664290fdc9c5510c85a7afdd78
  $fReadManifest188 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest190,
                  InflectionData.$fReadManifest189
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
b64289664290fdc9c5510c85a7afdd78
  $fReadManifest189 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.FUTPER) -}
ec23871ef847bffdc7a368d68b5969f2
  $fReadManifest190 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FUTPER"#) -}
b64289664290fdc9c5510c85a7afdd78
  $fReadManifest191 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest193,
                  InflectionData.$fReadManifest192
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
b64289664290fdc9c5510c85a7afdd78
  $fReadManifest192 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.PRSPER) -}
f31caa58e44e640e2d30f1d0961dcd49
  $fReadManifest193 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PRSPER"#) -}
b64289664290fdc9c5510c85a7afdd78
  $fReadManifest194 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest196,
                  InflectionData.$fReadManifest195
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
b64289664290fdc9c5510c85a7afdd78
  $fReadManifest195 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.PSTPER) -}
a09172bfc961bafc5831380e94b225fe
  $fReadManifest196 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PSTPER"#) -}
b64289664290fdc9c5510c85a7afdd78
  $fReadManifest197 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest199,
                  InflectionData.$fReadManifest198
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
b64289664290fdc9c5510c85a7afdd78
  $fReadManifest198 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.PPST3) -}
8bb9b371340e27a7a001b00743cb9714
  $fReadManifest199 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PPST3"#) -}
f539d8313c5a8ab2854680bd81c6cecb
  $fReadManifest2 ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP (InflectionData.Manifest a)
  {- Arity: 2, Strictness: <L,1*U(A,A,1*U,A)><L,U>,
     Unfolding: (\ @ a40
                   $dRead :: GHC.Read.Read a40
                   eta :: Text.ParserCombinators.ReadPrec.Prec ->
                 let {
                   ds :: Text.ParserCombinators.ReadPrec.ReadPrec a40
                   = GHC.Read.readPrec @ a40 $dRead
                 } in
                 GHC.Read.$fReadDouble10
                   @ (InflectionData.Manifest a40)
                   (\ n :: Text.ParserCombinators.ReadPrec.Prec
                      @ b
                      eta1 :: InflectionData.Manifest a40
                              -> Text.ParserCombinators.ReadP.P b ->
                    let {
                      lvl117 :: Text.ParserCombinators.ReadP.P b
                      = let {
                          lvl118 :: Text.ParserCombinators.ReadP.P b
                          = eta1 (InflectionData.NoManifest @ a40)
                        } in
                        Text.Read.Lex.expect2
                          @ b
                          (\ a98 :: Text.Read.Lex.Lexeme ->
                           case a98 of wild {
                             DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                             Text.Read.Lex.Ident a41
                             -> case GHC.Base.eqString
                                       a41
                                       InflectionData.$fReadManifest6 of wild1 {
                                  GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                  GHC.Types.True -> lvl118 } })
                    } in
                    let {
                      k :: () -> Text.ParserCombinators.ReadP.P b
                        {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                           Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl117) -}
                      = \ w2 :: () -> lvl117
                    } in
                    Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                      @ b
                      (Text.ParserCombinators.ReadP.Look
                         @ b
                         (\ a98 :: GHC.Base.String ->
                          (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                            `cast`
                          (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                            @ b
                            k))
                      (case n of wild { GHC.Types.I# x ->
                       case GHC.Prim.tagToEnum#
                              @ GHC.Types.Bool
                              (GHC.Prim.<=# x 10) of wild2 {
                         GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                         GHC.Types.True
                         -> let {
                              lvl118 :: Text.ParserCombinators.ReadP.P b
                              = let {
                                  lvl119 :: Text.ParserCombinators.ReadP.P b
                                  = GHC.Read.$wa
                                      @ (InflectionData.LexCat,
                                         InflectionData.ManifestType,
                                         GHC.Types.Int)
                                      InflectionData.$fReadManifest5
                                        `cast`
                                      (Trans
                                           (<Text.ParserCombinators.ReadPrec.Prec>_R
                                            ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                          <(InflectionData.LexCat,
                                                            InflectionData.ManifestType,
                                                            GHC.Types.Int)>_R))
                                           (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                     <(InflectionData.LexCat,
                                                       InflectionData.ManifestType,
                                                       GHC.Types.Int)>_R)))
                                      @ b
                                      (\ a41 :: [(InflectionData.LexCat,
                                                  InflectionData.ManifestType,
                                                  GHC.Types.Int)] ->
                                       (ds
                                          `cast`
                                        (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0] <a40>_R)
                                          InflectionData.$fReadManifest4)
                                         `cast`
                                       (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <a40>_R)
                                         @ b
                                         (\ a42 :: a40 ->
                                          eta1 (InflectionData.Manifest @ a40 a41 a42)))
                                } in
                                Text.Read.Lex.expect2
                                  @ b
                                  (\ a98 :: Text.Read.Lex.Lexeme ->
                                   case a98 of wild1 {
                                     DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                     Text.Read.Lex.Ident a41
                                     -> case GHC.Base.eqString
                                               a41
                                               InflectionData.$fReadManifest3 of wild3 {
                                          GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                          GHC.Types.True -> lvl119 } })
                            } in
                            let {
                              k1 :: () -> Text.ParserCombinators.ReadP.P b
                                {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                   Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl118) -}
                              = \ w2 :: () -> lvl118
                            } in
                            Text.ParserCombinators.ReadP.Look
                              @ b
                              (\ a98 :: GHC.Base.String ->
                               (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                                 `cast`
                               (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                                 @ b
                                 k1) } }))
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.Manifest a40>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.Manifest a40>_R)))
                   eta) -}
10b2cdf0c518a9db01d4a48d34ba5fb4
  $fReadManifest20 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Manifest [InflectionData.Honorific]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)>,
     Unfolding: (\ n :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Manifest [InflectionData.Honorific]
                          -> Text.ParserCombinators.ReadP.P b ->
                 let {
                   lvl117 :: Text.ParserCombinators.ReadP.P b
                   = let {
                       lvl118 :: Text.ParserCombinators.ReadP.P b
                       = eta (InflectionData.NoManifest @ [InflectionData.Honorific])
                     } in
                     Text.Read.Lex.expect2
                       @ b
                       (\ a98 :: Text.Read.Lex.Lexeme ->
                        case a98 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                          Text.Read.Lex.Ident a40
                          -> case GHC.Base.eqString
                                    a40
                                    InflectionData.$fReadManifest6 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                               GHC.Types.True -> lvl118 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl117) -}
                   = \ w2 :: () -> lvl117
                 } in
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b
                   (Text.ParserCombinators.ReadP.Look
                      @ b
                      (\ a98 :: GHC.Base.String ->
                       (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                         `cast`
                       (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                         @ b
                         k))
                   (case n of wild { GHC.Types.I# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x 10) of wild2 {
                      GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                      GHC.Types.True
                      -> let {
                           lvl118 :: Text.ParserCombinators.ReadP.P b
                           = let {
                               lvl119 :: Text.ParserCombinators.ReadP.P b
                               = GHC.Read.$wa
                                   @ (InflectionData.LexCat,
                                      InflectionData.ManifestType,
                                      GHC.Types.Int)
                                   InflectionData.$fReadManifest5
                                     `cast`
                                   (Trans
                                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                       <(InflectionData.LexCat,
                                                         InflectionData.ManifestType,
                                                         GHC.Types.Int)>_R))
                                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                  <(InflectionData.LexCat,
                                                    InflectionData.ManifestType,
                                                    GHC.Types.Int)>_R)))
                                   @ b
                                   (\ a40 :: [(InflectionData.LexCat,
                                               InflectionData.ManifestType,
                                               GHC.Types.Int)] ->
                                    GHC.Read.$wa
                                      @ InflectionData.Honorific
                                      InflectionData.$fReadHonorific2
                                        `cast`
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <InflectionData.Honorific>_R))
                                      @ b
                                      (\ a41 :: [InflectionData.Honorific] ->
                                       eta
                                         (InflectionData.Manifest
                                            @ [InflectionData.Honorific]
                                            a40
                                            a41)))
                             } in
                             Text.Read.Lex.expect2
                               @ b
                               (\ a98 :: Text.Read.Lex.Lexeme ->
                                case a98 of wild1 {
                                  DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                  Text.Read.Lex.Ident a40
                                  -> case GHC.Base.eqString
                                            a40
                                            InflectionData.$fReadManifest3 of wild3 {
                                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                       GHC.Types.True -> lvl119 } })
                         } in
                         let {
                           k1 :: () -> Text.ParserCombinators.ReadP.P b
                             {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl118) -}
                           = \ w2 :: () -> lvl118
                         } in
                         Text.ParserCombinators.ReadP.Look
                           @ b
                           (\ a98 :: GHC.Base.String ->
                            (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                              `cast`
                            (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                              @ b
                              k1) } })) -}
b64289664290fdc9c5510c85a7afdd78
  $fReadManifest200 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest202,
                  InflectionData.$fReadManifest201
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
b64289664290fdc9c5510c85a7afdd78
  $fReadManifest201 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.PPST2) -}
abf11ad01c4520c83252e489fc28fdc2
  $fReadManifest202 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PPST2"#) -}
b64289664290fdc9c5510c85a7afdd78
  $fReadManifest203 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest205,
                  InflectionData.$fReadManifest204
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
b64289664290fdc9c5510c85a7afdd78
  $fReadManifest204 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.PPST1) -}
8bff1f0d7c50ecd575c372c037d98705
  $fReadManifest205 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PPST1"#) -}
b64289664290fdc9c5510c85a7afdd78
  $fReadManifest206 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest208,
                  InflectionData.$fReadManifest207
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
b64289664290fdc9c5510c85a7afdd78
  $fReadManifest207 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.PPST) -}
7dc8739685fac01a160ae4bbae9fe26c
  $fReadManifest208 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PPST"#) -}
b64289664290fdc9c5510c85a7afdd78
  $fReadManifest209 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest211,
                  InflectionData.$fReadManifest210
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
b64289664290fdc9c5510c85a7afdd78
  $fReadManifest210 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.PFUT) -}
934d363c134c6a3233c3e2e9a6a93b92
  $fReadManifest211 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PFUT"#) -}
b64289664290fdc9c5510c85a7afdd78
  $fReadManifest212 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest214,
                  InflectionData.$fReadManifest213
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
b64289664290fdc9c5510c85a7afdd78
  $fReadManifest213 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.PPRS) -}
1b9c908e2f240a5aa7fe52fffd9895ba
  $fReadManifest214 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PPRS"#) -}
b64289664290fdc9c5510c85a7afdd78
  $fReadManifest215 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest217,
                  InflectionData.$fReadManifest216
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
b64289664290fdc9c5510c85a7afdd78
  $fReadManifest216 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.AFUT3) -}
ed612e8c0fcefa85194abdd53d25971e
  $fReadManifest217 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AFUT3"#) -}
b64289664290fdc9c5510c85a7afdd78
  $fReadManifest218 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest220,
                  InflectionData.$fReadManifest219
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
b64289664290fdc9c5510c85a7afdd78
  $fReadManifest219 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.AFUT2) -}
7d80a48b7ad8f9e3097161978d165bf4
  $fReadManifest22 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Manifest [InflectionData.Mood]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)>,
     Unfolding: (\ n :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Manifest [InflectionData.Mood]
                          -> Text.ParserCombinators.ReadP.P b ->
                 let {
                   lvl117 :: Text.ParserCombinators.ReadP.P b
                   = let {
                       lvl118 :: Text.ParserCombinators.ReadP.P b
                       = eta (InflectionData.NoManifest @ [InflectionData.Mood])
                     } in
                     Text.Read.Lex.expect2
                       @ b
                       (\ a98 :: Text.Read.Lex.Lexeme ->
                        case a98 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                          Text.Read.Lex.Ident a40
                          -> case GHC.Base.eqString
                                    a40
                                    InflectionData.$fReadManifest6 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                               GHC.Types.True -> lvl118 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl117) -}
                   = \ w2 :: () -> lvl117
                 } in
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b
                   (Text.ParserCombinators.ReadP.Look
                      @ b
                      (\ a98 :: GHC.Base.String ->
                       (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                         `cast`
                       (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                         @ b
                         k))
                   (case n of wild { GHC.Types.I# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x 10) of wild2 {
                      GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                      GHC.Types.True
                      -> let {
                           lvl118 :: Text.ParserCombinators.ReadP.P b
                           = let {
                               lvl119 :: Text.ParserCombinators.ReadP.P b
                               = GHC.Read.$wa
                                   @ (InflectionData.LexCat,
                                      InflectionData.ManifestType,
                                      GHC.Types.Int)
                                   InflectionData.$fReadManifest5
                                     `cast`
                                   (Trans
                                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                       <(InflectionData.LexCat,
                                                         InflectionData.ManifestType,
                                                         GHC.Types.Int)>_R))
                                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                  <(InflectionData.LexCat,
                                                    InflectionData.ManifestType,
                                                    GHC.Types.Int)>_R)))
                                   @ b
                                   (\ a40 :: [(InflectionData.LexCat,
                                               InflectionData.ManifestType,
                                               GHC.Types.Int)] ->
                                    GHC.Read.$wa
                                      @ InflectionData.Mood
                                      InflectionData.$fReadManifest23
                                        `cast`
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <InflectionData.Mood>_R))
                                      @ b
                                      (\ a41 :: [InflectionData.Mood] ->
                                       eta
                                         (InflectionData.Manifest @ [InflectionData.Mood] a40 a41)))
                             } in
                             Text.Read.Lex.expect2
                               @ b
                               (\ a98 :: Text.Read.Lex.Lexeme ->
                                case a98 of wild1 {
                                  DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                  Text.Read.Lex.Ident a40
                                  -> case GHC.Base.eqString
                                            a40
                                            InflectionData.$fReadManifest3 of wild3 {
                                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                       GHC.Types.True -> lvl119 } })
                         } in
                         let {
                           k1 :: () -> Text.ParserCombinators.ReadP.P b
                             {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl118) -}
                           = \ w2 :: () -> lvl118
                         } in
                         Text.ParserCombinators.ReadP.Look
                           @ b
                           (\ a98 :: GHC.Base.String ->
                            (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                              `cast`
                            (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                              @ b
                              k1) } })) -}
785534d6e695a25a21e77c4e332c3502
  $fReadManifest220 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AFUT2"#) -}
b64289664290fdc9c5510c85a7afdd78
  $fReadManifest221 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest223,
                  InflectionData.$fReadManifest222
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
b64289664290fdc9c5510c85a7afdd78
  $fReadManifest222 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.AFUT1) -}
f31a752778fbc50eb6f75f17d1f18fb6
  $fReadManifest223 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AFUT1"#) -}
b64289664290fdc9c5510c85a7afdd78
  $fReadManifest224 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest226,
                  InflectionData.$fReadManifest225
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
b64289664290fdc9c5510c85a7afdd78
  $fReadManifest225 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.AFUT) -}
c683865e5a0b884001337d59b44c50e2
  $fReadManifest226 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AFUT"#) -}
b64289664290fdc9c5510c85a7afdd78
  $fReadManifest227 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest229,
                  InflectionData.$fReadManifest228
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
b64289664290fdc9c5510c85a7afdd78
  $fReadManifest228 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.APST) -}
7557ab59facf739e42219e17a4d2f0bf
  $fReadManifest229 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "APST"#) -}
170a49091e965c69ca2b81c9942aa234
  $fReadManifest23 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Mood
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Mood
                   InflectionData.$fReadManifest24
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.Mood>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.Mood>_R)))) -}
b64289664290fdc9c5510c85a7afdd78
  $fReadManifest230 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest232,
                  InflectionData.$fReadManifest231
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
b64289664290fdc9c5510c85a7afdd78
  $fReadManifest231 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.APRS) -}
086f33e53a6cde5d293bf3e34fae7c78
  $fReadManifest232 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "APRS"#) -}
b64289664290fdc9c5510c85a7afdd78
  $fReadManifest233 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest235,
                  InflectionData.$fReadManifest234
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
b64289664290fdc9c5510c85a7afdd78
  $fReadManifest234 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.FUT) -}
1b84b5dcc3e624d87b71e7b564176c4d
  $fReadManifest235 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FUT"#) -}
b64289664290fdc9c5510c85a7afdd78
  $fReadManifest236 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest238,
                  InflectionData.$fReadManifest237
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
b64289664290fdc9c5510c85a7afdd78
  $fReadManifest237 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.PRS) -}
aea1c2eeb549ea0b56ecb931ef938eec
  $fReadManifest238 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PRS"#) -}
b64289664290fdc9c5510c85a7afdd78
  $fReadManifest239 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest241,
                  InflectionData.$fReadManifest240
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
170a49091e965c69ca2b81c9942aa234
  $fReadManifest24 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: InflectionData.Mood -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ InflectionData.Mood
                   InflectionData.$fReadManifest25
                   eta
                   @ b
                   eta1) -}
b64289664290fdc9c5510c85a7afdd78
  $fReadManifest240 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.PST) -}
ee2df57c6d2cc7d4ec5a99bbb594610a
  $fReadManifest241 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PST"#) -}
b64289664290fdc9c5510c85a7afdd78
  $fReadManifest242 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest244,
                  InflectionData.$fReadManifest243
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
b64289664290fdc9c5510c85a7afdd78
  $fReadManifest243 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.UTEN) -}
c182a3719712ddf5ba9b846495bb1c16
  $fReadManifest244 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "UTEN"#) -}
50b9eb94168e4486f2c0d16747444001
  $fReadManifest246 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Manifest [InflectionData.Topic]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)>,
     Unfolding: (\ n :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Manifest [InflectionData.Topic]
                          -> Text.ParserCombinators.ReadP.P b ->
                 let {
                   lvl117 :: Text.ParserCombinators.ReadP.P b
                   = let {
                       lvl118 :: Text.ParserCombinators.ReadP.P b
                       = eta (InflectionData.NoManifest @ [InflectionData.Topic])
                     } in
                     Text.Read.Lex.expect2
                       @ b
                       (\ a98 :: Text.Read.Lex.Lexeme ->
                        case a98 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                          Text.Read.Lex.Ident a40
                          -> case GHC.Base.eqString
                                    a40
                                    InflectionData.$fReadManifest6 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                               GHC.Types.True -> lvl118 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl117) -}
                   = \ w2 :: () -> lvl117
                 } in
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b
                   (Text.ParserCombinators.ReadP.Look
                      @ b
                      (\ a98 :: GHC.Base.String ->
                       (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                         `cast`
                       (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                         @ b
                         k))
                   (case n of wild { GHC.Types.I# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x 10) of wild2 {
                      GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                      GHC.Types.True
                      -> let {
                           lvl118 :: Text.ParserCombinators.ReadP.P b
                           = let {
                               lvl119 :: Text.ParserCombinators.ReadP.P b
                               = GHC.Read.$wa
                                   @ (InflectionData.LexCat,
                                      InflectionData.ManifestType,
                                      GHC.Types.Int)
                                   InflectionData.$fReadManifest5
                                     `cast`
                                   (Trans
                                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                       <(InflectionData.LexCat,
                                                         InflectionData.ManifestType,
                                                         GHC.Types.Int)>_R))
                                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                  <(InflectionData.LexCat,
                                                    InflectionData.ManifestType,
                                                    GHC.Types.Int)>_R)))
                                   @ b
                                   (\ a40 :: [(InflectionData.LexCat,
                                               InflectionData.ManifestType,
                                               GHC.Types.Int)] ->
                                    GHC.Read.$wa
                                      @ InflectionData.Topic
                                      InflectionData.$fReadManifest247
                                        `cast`
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <InflectionData.Topic>_R))
                                      @ b
                                      (\ a41 :: [InflectionData.Topic] ->
                                       eta
                                         (InflectionData.Manifest
                                            @ [InflectionData.Topic]
                                            a40
                                            a41)))
                             } in
                             Text.Read.Lex.expect2
                               @ b
                               (\ a98 :: Text.Read.Lex.Lexeme ->
                                case a98 of wild1 {
                                  DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                  Text.Read.Lex.Ident a40
                                  -> case GHC.Base.eqString
                                            a40
                                            InflectionData.$fReadManifest3 of wild3 {
                                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                       GHC.Types.True -> lvl119 } })
                         } in
                         let {
                           k1 :: () -> Text.ParserCombinators.ReadP.P b
                             {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl118) -}
                           = \ w2 :: () -> lvl118
                         } in
                         Text.ParserCombinators.ReadP.Look
                           @ b
                           (\ a98 :: GHC.Base.String ->
                            (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                              `cast`
                            (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                              @ b
                              k1) } })) -}
91b970df1d2f65a770d84bd1b0e168b5
  $fReadManifest247 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Topic
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Topic
                   InflectionData.$fReadManifest248
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.Topic>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.Topic>_R)))) -}
91b970df1d2f65a770d84bd1b0e168b5
  $fReadManifest248 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Topic -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: InflectionData.Topic -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ InflectionData.Topic
                   InflectionData.$fReadManifest249
                   eta
                   @ b
                   eta1) -}
91b970df1d2f65a770d84bd1b0e168b5
  $fReadManifest249 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Topic)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Topic)
                   InflectionData.$fReadManifest258
                   InflectionData.$fReadManifest250) -}
170a49091e965c69ca2b81c9942aa234
  $fReadManifest25 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
                   InflectionData.$fReadManifest66
                   InflectionData.$fReadManifest26) -}
91b970df1d2f65a770d84bd1b0e168b5
  $fReadManifest250 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Topic)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Topic)
                   InflectionData.$fReadManifest255
                   InflectionData.$fReadManifest251) -}
91b970df1d2f65a770d84bd1b0e168b5
  $fReadManifest251 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Topic)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Topic)
                   InflectionData.$fReadManifest252
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Topic))) -}
91b970df1d2f65a770d84bd1b0e168b5
  $fReadManifest252 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Topic)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest254,
                  InflectionData.$fReadManifest253
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Topic>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Topic>_R))))) -}
91b970df1d2f65a770d84bd1b0e168b5
  $fReadManifest253 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Topic -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Topic -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.NTOP) -}
56084f48f2cd181f01e89051a192ee9b
  $fReadManifest254 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NTOP"#) -}
91b970df1d2f65a770d84bd1b0e168b5
  $fReadManifest255 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Topic)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest257,
                  InflectionData.$fReadManifest256
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Topic>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Topic>_R))))) -}
91b970df1d2f65a770d84bd1b0e168b5
  $fReadManifest256 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Topic -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Topic -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.TOP) -}
c04e5338fc95fd2aba4ce1e723033f0b
  $fReadManifest257 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TOP"#) -}
91b970df1d2f65a770d84bd1b0e168b5
  $fReadManifest258 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Topic)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest260,
                  InflectionData.$fReadManifest259
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Topic>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Topic>_R))))) -}
91b970df1d2f65a770d84bd1b0e168b5
  $fReadManifest259 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Topic -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Topic -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.UTOP) -}
170a49091e965c69ca2b81c9942aa234
  $fReadManifest26 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
                   InflectionData.$fReadManifest63
                   InflectionData.$fReadManifest27) -}
5f533ee66db2b45a315ee7a9039c2af7
  $fReadManifest260 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "UTOP"#) -}
1398a06975ad17ac9be65d12f9e83b47
  $fReadManifest262 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Manifest [InflectionData.Transitivity]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)>,
     Unfolding: (\ n :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Manifest [InflectionData.Transitivity]
                          -> Text.ParserCombinators.ReadP.P b ->
                 let {
                   lvl117 :: Text.ParserCombinators.ReadP.P b
                   = let {
                       lvl118 :: Text.ParserCombinators.ReadP.P b
                       = eta (InflectionData.NoManifest @ [InflectionData.Transitivity])
                     } in
                     Text.Read.Lex.expect2
                       @ b
                       (\ a98 :: Text.Read.Lex.Lexeme ->
                        case a98 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                          Text.Read.Lex.Ident a40
                          -> case GHC.Base.eqString
                                    a40
                                    InflectionData.$fReadManifest6 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                               GHC.Types.True -> lvl118 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl117) -}
                   = \ w2 :: () -> lvl117
                 } in
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b
                   (Text.ParserCombinators.ReadP.Look
                      @ b
                      (\ a98 :: GHC.Base.String ->
                       (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                         `cast`
                       (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                         @ b
                         k))
                   (case n of wild { GHC.Types.I# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x 10) of wild2 {
                      GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                      GHC.Types.True
                      -> let {
                           lvl118 :: Text.ParserCombinators.ReadP.P b
                           = let {
                               lvl119 :: Text.ParserCombinators.ReadP.P b
                               = GHC.Read.$wa
                                   @ (InflectionData.LexCat,
                                      InflectionData.ManifestType,
                                      GHC.Types.Int)
                                   InflectionData.$fReadManifest5
                                     `cast`
                                   (Trans
                                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                       <(InflectionData.LexCat,
                                                         InflectionData.ManifestType,
                                                         GHC.Types.Int)>_R))
                                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                  <(InflectionData.LexCat,
                                                    InflectionData.ManifestType,
                                                    GHC.Types.Int)>_R)))
                                   @ b
                                   (\ a40 :: [(InflectionData.LexCat,
                                               InflectionData.ManifestType,
                                               GHC.Types.Int)] ->
                                    GHC.Read.$wa
                                      @ InflectionData.Transitivity
                                      InflectionData.$fReadManifest263
                                        `cast`
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <InflectionData.Transitivity>_R))
                                      @ b
                                      (\ a41 :: [InflectionData.Transitivity] ->
                                       eta
                                         (InflectionData.Manifest
                                            @ [InflectionData.Transitivity]
                                            a40
                                            a41)))
                             } in
                             Text.Read.Lex.expect2
                               @ b
                               (\ a98 :: Text.Read.Lex.Lexeme ->
                                case a98 of wild1 {
                                  DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                  Text.Read.Lex.Ident a40
                                  -> case GHC.Base.eqString
                                            a40
                                            InflectionData.$fReadManifest3 of wild3 {
                                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                       GHC.Types.True -> lvl119 } })
                         } in
                         let {
                           k1 :: () -> Text.ParserCombinators.ReadP.P b
                             {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl118) -}
                           = \ w2 :: () -> lvl118
                         } in
                         Text.ParserCombinators.ReadP.Look
                           @ b
                           (\ a98 :: GHC.Base.String ->
                            (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                              `cast`
                            (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                              @ b
                              k1) } })) -}
c432d94948e8418512e7b069e8d02e7a
  $fReadManifest263 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Transitivity
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Transitivity
                   InflectionData.$fReadManifest264
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.Transitivity>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.Transitivity>_R)))) -}
c432d94948e8418512e7b069e8d02e7a
  $fReadManifest264 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Transitivity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: InflectionData.Transitivity
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ InflectionData.Transitivity
                   InflectionData.$fReadManifest265
                   eta
                   @ b
                   eta1) -}
c432d94948e8418512e7b069e8d02e7a
  $fReadManifest265 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Transitivity)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Transitivity)
                   InflectionData.$fReadManifest282
                   InflectionData.$fReadManifest266) -}
c432d94948e8418512e7b069e8d02e7a
  $fReadManifest266 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Transitivity)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Transitivity)
                   InflectionData.$fReadManifest279
                   InflectionData.$fReadManifest267) -}
c432d94948e8418512e7b069e8d02e7a
  $fReadManifest267 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Transitivity)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Transitivity)
                   InflectionData.$fReadManifest276
                   InflectionData.$fReadManifest268) -}
c432d94948e8418512e7b069e8d02e7a
  $fReadManifest268 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Transitivity)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Transitivity)
                   InflectionData.$fReadManifest273
                   InflectionData.$fReadManifest269) -}
c432d94948e8418512e7b069e8d02e7a
  $fReadManifest269 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Transitivity)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Transitivity)
                   InflectionData.$fReadManifest270
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           InflectionData.Transitivity))) -}
170a49091e965c69ca2b81c9942aa234
  $fReadManifest27 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
                   InflectionData.$fReadManifest60
                   InflectionData.$fReadManifest28) -}
c432d94948e8418512e7b069e8d02e7a
  $fReadManifest270 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Transitivity)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest272,
                  InflectionData.$fReadManifest271
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Transitivity>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Transitivity>_R))))) -}
c432d94948e8418512e7b069e8d02e7a
  $fReadManifest271 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Transitivity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Transitivity
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.DITRANS) -}
c8074652c7c7c5744b5819f29d5e759d
  $fReadManifest272 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DITRANS"#) -}
c432d94948e8418512e7b069e8d02e7a
  $fReadManifest273 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Transitivity)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest275,
                  InflectionData.$fReadManifest274
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Transitivity>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Transitivity>_R))))) -}
c432d94948e8418512e7b069e8d02e7a
  $fReadManifest274 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Transitivity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Transitivity
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.MTRANS) -}
35a50a39621285033072badb71f6ad3f
  $fReadManifest275 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "MTRANS"#) -}
c432d94948e8418512e7b069e8d02e7a
  $fReadManifest276 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Transitivity)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest278,
                  InflectionData.$fReadManifest277
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Transitivity>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Transitivity>_R))))) -}
c432d94948e8418512e7b069e8d02e7a
  $fReadManifest277 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Transitivity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Transitivity
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.TRANS) -}
a28785989eb65ebc19042591494617de
  $fReadManifest278 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TRANS"#) -}
c432d94948e8418512e7b069e8d02e7a
  $fReadManifest279 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Transitivity)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest281,
                  InflectionData.$fReadManifest280
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Transitivity>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Transitivity>_R))))) -}
170a49091e965c69ca2b81c9942aa234
  $fReadManifest28 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
                   InflectionData.$fReadManifest57
                   InflectionData.$fReadManifest29) -}
c432d94948e8418512e7b069e8d02e7a
  $fReadManifest280 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Transitivity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Transitivity
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.NTRANS) -}
ff418c6ab27b89fc8a90928466627473
  $fReadManifest281 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NTRANS"#) -}
c432d94948e8418512e7b069e8d02e7a
  $fReadManifest282 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Transitivity)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest284,
                  InflectionData.$fReadManifest283
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Transitivity>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Transitivity>_R))))) -}
c432d94948e8418512e7b069e8d02e7a
  $fReadManifest283 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Transitivity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Transitivity
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.UTRA) -}
9e6a2743b1bead40803f003d8414e8d1
  $fReadManifest284 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "UTRA"#) -}
61adedd808cc97a2ed07fdc4c8d7ec16
  $fReadManifest286 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Manifest [InflectionData.Voice]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)>,
     Unfolding: (\ n :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Manifest [InflectionData.Voice]
                          -> Text.ParserCombinators.ReadP.P b ->
                 let {
                   lvl117 :: Text.ParserCombinators.ReadP.P b
                   = let {
                       lvl118 :: Text.ParserCombinators.ReadP.P b
                       = eta (InflectionData.NoManifest @ [InflectionData.Voice])
                     } in
                     Text.Read.Lex.expect2
                       @ b
                       (\ a98 :: Text.Read.Lex.Lexeme ->
                        case a98 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                          Text.Read.Lex.Ident a40
                          -> case GHC.Base.eqString
                                    a40
                                    InflectionData.$fReadManifest6 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                               GHC.Types.True -> lvl118 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl117) -}
                   = \ w2 :: () -> lvl117
                 } in
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b
                   (Text.ParserCombinators.ReadP.Look
                      @ b
                      (\ a98 :: GHC.Base.String ->
                       (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                         `cast`
                       (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                         @ b
                         k))
                   (case n of wild { GHC.Types.I# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x 10) of wild2 {
                      GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                      GHC.Types.True
                      -> let {
                           lvl118 :: Text.ParserCombinators.ReadP.P b
                           = let {
                               lvl119 :: Text.ParserCombinators.ReadP.P b
                               = GHC.Read.$wa
                                   @ (InflectionData.LexCat,
                                      InflectionData.ManifestType,
                                      GHC.Types.Int)
                                   InflectionData.$fReadManifest5
                                     `cast`
                                   (Trans
                                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                       <(InflectionData.LexCat,
                                                         InflectionData.ManifestType,
                                                         GHC.Types.Int)>_R))
                                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                  <(InflectionData.LexCat,
                                                    InflectionData.ManifestType,
                                                    GHC.Types.Int)>_R)))
                                   @ b
                                   (\ a40 :: [(InflectionData.LexCat,
                                               InflectionData.ManifestType,
                                               GHC.Types.Int)] ->
                                    GHC.Read.$wa
                                      @ InflectionData.Voice
                                      InflectionData.$fReadManifest287
                                        `cast`
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <InflectionData.Voice>_R))
                                      @ b
                                      (\ a41 :: [InflectionData.Voice] ->
                                       eta
                                         (InflectionData.Manifest
                                            @ [InflectionData.Voice]
                                            a40
                                            a41)))
                             } in
                             Text.Read.Lex.expect2
                               @ b
                               (\ a98 :: Text.Read.Lex.Lexeme ->
                                case a98 of wild1 {
                                  DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                  Text.Read.Lex.Ident a40
                                  -> case GHC.Base.eqString
                                            a40
                                            InflectionData.$fReadManifest3 of wild3 {
                                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                       GHC.Types.True -> lvl119 } })
                         } in
                         let {
                           k1 :: () -> Text.ParserCombinators.ReadP.P b
                             {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl118) -}
                           = \ w2 :: () -> lvl118
                         } in
                         Text.ParserCombinators.ReadP.Look
                           @ b
                           (\ a98 :: GHC.Base.String ->
                            (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                              `cast`
                            (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                              @ b
                              k1) } })) -}
1f59333afb1b3b92a8af1e5489e1e630
  $fReadManifest287 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Voice
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Voice
                   InflectionData.$fReadManifest288
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.Voice>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.Voice>_R)))) -}
1f59333afb1b3b92a8af1e5489e1e630
  $fReadManifest288 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Voice -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: InflectionData.Voice -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ InflectionData.Voice
                   InflectionData.$fReadManifest289
                   eta
                   @ b
                   eta1) -}
1f59333afb1b3b92a8af1e5489e1e630
  $fReadManifest289 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Voice)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Voice)
                   InflectionData.$fReadManifest302
                   InflectionData.$fReadManifest290) -}
170a49091e965c69ca2b81c9942aa234
  $fReadManifest29 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
                   InflectionData.$fReadManifest54
                   InflectionData.$fReadManifest30) -}
1f59333afb1b3b92a8af1e5489e1e630
  $fReadManifest290 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Voice)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Voice)
                   InflectionData.$fReadManifest299
                   InflectionData.$fReadManifest291) -}
1f59333afb1b3b92a8af1e5489e1e630
  $fReadManifest291 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Voice)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Voice)
                   InflectionData.$fReadManifest296
                   InflectionData.$fReadManifest292) -}
1f59333afb1b3b92a8af1e5489e1e630
  $fReadManifest292 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Voice)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Voice)
                   InflectionData.$fReadManifest293
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Voice))) -}
1f59333afb1b3b92a8af1e5489e1e630
  $fReadManifest293 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Voice)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest295,
                  InflectionData.$fReadManifest294
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Voice>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Voice>_R))))) -}
1f59333afb1b3b92a8af1e5489e1e630
  $fReadManifest294 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Voice -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Voice -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.PASSIVE) -}
f0266238590f26cb3c4fa807a51d265c
  $fReadManifest295 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PASSIVE"#) -}
1f59333afb1b3b92a8af1e5489e1e630
  $fReadManifest296 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Voice)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest298,
                  InflectionData.$fReadManifest297
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Voice>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Voice>_R))))) -}
1f59333afb1b3b92a8af1e5489e1e630
  $fReadManifest297 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Voice -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Voice -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.MIDDLE) -}
3eff9ee7f7f5325d73dac2d1392991c2
  $fReadManifest298 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "MIDDLE"#) -}
1f59333afb1b3b92a8af1e5489e1e630
  $fReadManifest299 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Voice)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest301,
                  InflectionData.$fReadManifest300
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Voice>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Voice>_R))))) -}
8c6aebea9419dc7f0de35408a7efc4d3
  $fReadManifest3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Manifest"#) -}
170a49091e965c69ca2b81c9942aa234
  $fReadManifest30 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
                   InflectionData.$fReadManifest51
                   InflectionData.$fReadManifest31) -}
1f59333afb1b3b92a8af1e5489e1e630
  $fReadManifest300 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Voice -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Voice -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.ACTIVE) -}
3695b152eaba84aa9b3115374f49b0e4
  $fReadManifest301 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ACTIVE"#) -}
1f59333afb1b3b92a8af1e5489e1e630
  $fReadManifest302 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Voice)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest304,
                  InflectionData.$fReadManifest303
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Voice>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Voice>_R))))) -}
1f59333afb1b3b92a8af1e5489e1e630
  $fReadManifest303 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Voice -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Voice -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.UVOI) -}
31fe5266ffc2ae98914acf045ae07fcf
  $fReadManifest304 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "UVOI"#) -}
d9e26c0bbaed59640091f1d3e808ab0a
  $fReadManifest306 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Manifest [InflectionData.Volition]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)>,
     Unfolding: (\ n :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Manifest [InflectionData.Volition]
                          -> Text.ParserCombinators.ReadP.P b ->
                 let {
                   lvl117 :: Text.ParserCombinators.ReadP.P b
                   = let {
                       lvl118 :: Text.ParserCombinators.ReadP.P b
                       = eta (InflectionData.NoManifest @ [InflectionData.Volition])
                     } in
                     Text.Read.Lex.expect2
                       @ b
                       (\ a98 :: Text.Read.Lex.Lexeme ->
                        case a98 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                          Text.Read.Lex.Ident a40
                          -> case GHC.Base.eqString
                                    a40
                                    InflectionData.$fReadManifest6 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                               GHC.Types.True -> lvl118 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl117) -}
                   = \ w2 :: () -> lvl117
                 } in
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b
                   (Text.ParserCombinators.ReadP.Look
                      @ b
                      (\ a98 :: GHC.Base.String ->
                       (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                         `cast`
                       (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                         @ b
                         k))
                   (case n of wild { GHC.Types.I# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x 10) of wild2 {
                      GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                      GHC.Types.True
                      -> let {
                           lvl118 :: Text.ParserCombinators.ReadP.P b
                           = let {
                               lvl119 :: Text.ParserCombinators.ReadP.P b
                               = GHC.Read.$wa
                                   @ (InflectionData.LexCat,
                                      InflectionData.ManifestType,
                                      GHC.Types.Int)
                                   InflectionData.$fReadManifest5
                                     `cast`
                                   (Trans
                                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                       <(InflectionData.LexCat,
                                                         InflectionData.ManifestType,
                                                         GHC.Types.Int)>_R))
                                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                  <(InflectionData.LexCat,
                                                    InflectionData.ManifestType,
                                                    GHC.Types.Int)>_R)))
                                   @ b
                                   (\ a40 :: [(InflectionData.LexCat,
                                               InflectionData.ManifestType,
                                               GHC.Types.Int)] ->
                                    GHC.Read.$wa
                                      @ InflectionData.Volition
                                      InflectionData.$fReadManifest307
                                        `cast`
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <InflectionData.Volition>_R))
                                      @ b
                                      (\ a41 :: [InflectionData.Volition] ->
                                       eta
                                         (InflectionData.Manifest
                                            @ [InflectionData.Volition]
                                            a40
                                            a41)))
                             } in
                             Text.Read.Lex.expect2
                               @ b
                               (\ a98 :: Text.Read.Lex.Lexeme ->
                                case a98 of wild1 {
                                  DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                  Text.Read.Lex.Ident a40
                                  -> case GHC.Base.eqString
                                            a40
                                            InflectionData.$fReadManifest3 of wild3 {
                                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                       GHC.Types.True -> lvl119 } })
                         } in
                         let {
                           k1 :: () -> Text.ParserCombinators.ReadP.P b
                             {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl118) -}
                           = \ w2 :: () -> lvl118
                         } in
                         Text.ParserCombinators.ReadP.Look
                           @ b
                           (\ a98 :: GHC.Base.String ->
                            (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                              `cast`
                            (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                              @ b
                              k1) } })) -}
91017ab7ea71228801f74c069cd5baf7
  $fReadManifest307 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Volition
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Volition
                   InflectionData.$fReadManifest308
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.Volition>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.Volition>_R)))) -}
91017ab7ea71228801f74c069cd5baf7
  $fReadManifest308 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Volition -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: InflectionData.Volition
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ InflectionData.Volition
                   InflectionData.$fReadManifest309
                   eta
                   @ b
                   eta1) -}
91017ab7ea71228801f74c069cd5baf7
  $fReadManifest309 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Volition)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Volition)
                   InflectionData.$fReadManifest318
                   InflectionData.$fReadManifest310) -}
170a49091e965c69ca2b81c9942aa234
  $fReadManifest31 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
                   InflectionData.$fReadManifest48
                   InflectionData.$fReadManifest32) -}
91017ab7ea71228801f74c069cd5baf7
  $fReadManifest310 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Volition)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Volition)
                   InflectionData.$fReadManifest315
                   InflectionData.$fReadManifest311) -}
91017ab7ea71228801f74c069cd5baf7
  $fReadManifest311 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Volition)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Volition)
                   InflectionData.$fReadManifest312
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           InflectionData.Volition))) -}
91017ab7ea71228801f74c069cd5baf7
  $fReadManifest312 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Volition)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest314,
                  InflectionData.$fReadManifest313
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Volition>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Volition>_R))))) -}
91017ab7ea71228801f74c069cd5baf7
  $fReadManifest313 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Volition -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Volition
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.NVOL) -}
0e373d0474922100bac752e8a54a8589
  $fReadManifest314 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NVOL"#) -}
91017ab7ea71228801f74c069cd5baf7
  $fReadManifest315 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Volition)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest317,
                  InflectionData.$fReadManifest316
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Volition>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Volition>_R))))) -}
91017ab7ea71228801f74c069cd5baf7
  $fReadManifest316 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Volition -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Volition
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.VOL) -}
94c35914af1ba36c9ff33f3ee341e86f
  $fReadManifest317 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "VOL"#) -}
91017ab7ea71228801f74c069cd5baf7
  $fReadManifest318 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Volition)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest320,
                  InflectionData.$fReadManifest319
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Volition>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Volition>_R))))) -}
91017ab7ea71228801f74c069cd5baf7
  $fReadManifest319 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Volition -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Volition
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.UVOL) -}
170a49091e965c69ca2b81c9942aa234
  $fReadManifest32 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
                   InflectionData.$fReadManifest45
                   InflectionData.$fReadManifest33) -}
d271c96a6782e7bddb3e8f4e541f6086
  $fReadManifest320 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "UVOL"#) -}
170a49091e965c69ca2b81c9942aa234
  $fReadManifest33 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
                   InflectionData.$fReadManifest42
                   InflectionData.$fReadManifest34) -}
170a49091e965c69ca2b81c9942aa234
  $fReadManifest34 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
                   InflectionData.$fReadManifest39
                   InflectionData.$fReadManifest35) -}
170a49091e965c69ca2b81c9942aa234
  $fReadManifest35 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
                   InflectionData.$fReadManifest36
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood))) -}
170a49091e965c69ca2b81c9942aa234
  $fReadManifest36 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest38,
                  InflectionData.$fReadManifest37
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Mood>_R))))) -}
170a49091e965c69ca2b81c9942aa234
  $fReadManifest37 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Mood -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.COND) -}
d0399dd072a7459b12f1142915a4c318
  $fReadManifest38 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "COND"#) -}
170a49091e965c69ca2b81c9942aa234
  $fReadManifest39 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest41,
                  InflectionData.$fReadManifest40
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Mood>_R))))) -}
60d54665ed41d4d7f58560c4484c0096
  $fReadManifest4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11) -}
170a49091e965c69ca2b81c9942aa234
  $fReadManifest40 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Mood -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.POT) -}
385fb113aa9c0503c43a801cbec22b60
  $fReadManifest41 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "POT"#) -}
170a49091e965c69ca2b81c9942aa234
  $fReadManifest42 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest44,
                  InflectionData.$fReadManifest43
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Mood>_R))))) -}
170a49091e965c69ca2b81c9942aa234
  $fReadManifest43 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Mood -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.SBJV) -}
7b2920f91f9e0965c54d145e0bd75149
  $fReadManifest44 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SBJV"#) -}
170a49091e965c69ca2b81c9942aa234
  $fReadManifest45 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest47,
                  InflectionData.$fReadManifest46
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Mood>_R))))) -}
170a49091e965c69ca2b81c9942aa234
  $fReadManifest46 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Mood -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.EPIS) -}
9437faab84480c06a6d7d652aad29815
  $fReadManifest47 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "EPIS"#) -}
170a49091e965c69ca2b81c9942aa234
  $fReadManifest48 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest50,
                  InflectionData.$fReadManifest49
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Mood>_R))))) -}
170a49091e965c69ca2b81c9942aa234
  $fReadManifest49 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Mood -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.OPT) -}
1b18b2d7db80808aeab1295954a6aea1
  $fReadManifest5 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b1.
       ((InflectionData.LexCat,
         InflectionData.ManifestType,
         GHC.Types.Int)
        -> Text.ParserCombinators.ReadP.P b1)
       -> Text.ParserCombinators.ReadP.P b1
  {- Arity: 2,
     Unfolding: (\ w3 :: Text.ParserCombinators.ReadPrec.Prec
                   @ b1
                   w4 :: (InflectionData.LexCat,
                          InflectionData.ManifestType,
                          GHC.Types.Int)
                         -> Text.ParserCombinators.ReadP.P b1[OneShot] ->
                 GHC.Read.$wa4
                   @ InflectionData.LexCat
                   @ InflectionData.ManifestType
                   @ GHC.Types.Int
                   InflectionData.$fReadLexCat
                   InflectionData.$fReadManifestType
                   GHC.Read.$fReadInt
                   @ b1
                   w4) -}
e86f3a5b67a8575d2bf843cf2565c166
  $fReadManifest50 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OPT"#) -}
170a49091e965c69ca2b81c9942aa234
  $fReadManifest51 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest53,
                  InflectionData.$fReadManifest52
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Mood>_R))))) -}
170a49091e965c69ca2b81c9942aa234
  $fReadManifest52 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Mood -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.JUS) -}
6400eb1c866146ec9b4681dca0e73bde
  $fReadManifest53 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "JUS"#) -}
170a49091e965c69ca2b81c9942aa234
  $fReadManifest54 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest56,
                  InflectionData.$fReadManifest55
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Mood>_R))))) -}
170a49091e965c69ca2b81c9942aa234
  $fReadManifest55 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Mood -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.IMP) -}
faa1b831e915aa7a09c344cf9c2b3dd3
  $fReadManifest56 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "IMP"#) -}
170a49091e965c69ca2b81c9942aa234
  $fReadManifest57 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest59,
                  InflectionData.$fReadManifest58
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Mood>_R))))) -}
170a49091e965c69ca2b81c9942aa234
  $fReadManifest58 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Mood -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.DEO) -}
09464b762441e29f0bfe1b54f09d9177
  $fReadManifest59 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DEO"#) -}
d7d9308a749ea9af7fd5dbc25ba4320a
  $fReadManifest6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NoManifest"#) -}
170a49091e965c69ca2b81c9942aa234
  $fReadManifest60 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest62,
                  InflectionData.$fReadManifest61
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Mood>_R))))) -}
170a49091e965c69ca2b81c9942aa234
  $fReadManifest61 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Mood -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.IRR) -}
62bebad320bc8c61555f1aebe37dc803
  $fReadManifest62 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "IRR"#) -}
170a49091e965c69ca2b81c9942aa234
  $fReadManifest63 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest65,
                  InflectionData.$fReadManifest64
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Mood>_R))))) -}
170a49091e965c69ca2b81c9942aa234
  $fReadManifest64 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Mood -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.IND) -}
4c4ce1e01d76c70904a3cbaec4c9dda9
  $fReadManifest65 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "IND"#) -}
170a49091e965c69ca2b81c9942aa234
  $fReadManifest66 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest68,
                  InflectionData.$fReadManifest67
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Mood>_R))))) -}
170a49091e965c69ca2b81c9942aa234
  $fReadManifest67 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Mood -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.UMOO) -}
f9ab0f69e61a709d0e4f4bda4df293af
  $fReadManifest68 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "UMOO"#) -}
18dd1aa267676e4139b9aae898fc0b24
  $fReadManifest70 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Manifest [InflectionData.Number]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)>,
     Unfolding: (\ n :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Manifest [InflectionData.Number]
                          -> Text.ParserCombinators.ReadP.P b ->
                 let {
                   lvl117 :: Text.ParserCombinators.ReadP.P b
                   = let {
                       lvl118 :: Text.ParserCombinators.ReadP.P b
                       = eta (InflectionData.NoManifest @ [InflectionData.Number])
                     } in
                     Text.Read.Lex.expect2
                       @ b
                       (\ a98 :: Text.Read.Lex.Lexeme ->
                        case a98 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                          Text.Read.Lex.Ident a40
                          -> case GHC.Base.eqString
                                    a40
                                    InflectionData.$fReadManifest6 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                               GHC.Types.True -> lvl118 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl117) -}
                   = \ w2 :: () -> lvl117
                 } in
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b
                   (Text.ParserCombinators.ReadP.Look
                      @ b
                      (\ a98 :: GHC.Base.String ->
                       (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                         `cast`
                       (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                         @ b
                         k))
                   (case n of wild { GHC.Types.I# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x 10) of wild2 {
                      GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                      GHC.Types.True
                      -> let {
                           lvl118 :: Text.ParserCombinators.ReadP.P b
                           = let {
                               lvl119 :: Text.ParserCombinators.ReadP.P b
                               = GHC.Read.$wa
                                   @ (InflectionData.LexCat,
                                      InflectionData.ManifestType,
                                      GHC.Types.Int)
                                   InflectionData.$fReadManifest5
                                     `cast`
                                   (Trans
                                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                       <(InflectionData.LexCat,
                                                         InflectionData.ManifestType,
                                                         GHC.Types.Int)>_R))
                                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                  <(InflectionData.LexCat,
                                                    InflectionData.ManifestType,
                                                    GHC.Types.Int)>_R)))
                                   @ b
                                   (\ a40 :: [(InflectionData.LexCat,
                                               InflectionData.ManifestType,
                                               GHC.Types.Int)] ->
                                    GHC.Read.$wa
                                      @ InflectionData.Number
                                      InflectionData.$fReadManifest71
                                        `cast`
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <InflectionData.Number>_R))
                                      @ b
                                      (\ a41 :: [InflectionData.Number] ->
                                       eta
                                         (InflectionData.Manifest
                                            @ [InflectionData.Number]
                                            a40
                                            a41)))
                             } in
                             Text.Read.Lex.expect2
                               @ b
                               (\ a98 :: Text.Read.Lex.Lexeme ->
                                case a98 of wild1 {
                                  DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                  Text.Read.Lex.Ident a40
                                  -> case GHC.Base.eqString
                                            a40
                                            InflectionData.$fReadManifest3 of wild3 {
                                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                       GHC.Types.True -> lvl119 } })
                         } in
                         let {
                           k1 :: () -> Text.ParserCombinators.ReadP.P b
                             {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl118) -}
                           = \ w2 :: () -> lvl118
                         } in
                         Text.ParserCombinators.ReadP.Look
                           @ b
                           (\ a98 :: GHC.Base.String ->
                            (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                              `cast`
                            (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                              @ b
                              k1) } })) -}
c1e8fbfb7380effdacb7c7c192e40bf5
  $fReadManifest71 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Number
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Number
                   InflectionData.$fReadManifest72
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.Number>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.Number>_R)))) -}
c1e8fbfb7380effdacb7c7c192e40bf5
  $fReadManifest72 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Number -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: InflectionData.Number
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ InflectionData.Number
                   InflectionData.$fReadManifest73
                   eta
                   @ b
                   eta1) -}
c1e8fbfb7380effdacb7c7c192e40bf5
  $fReadManifest73 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)
                   InflectionData.$fReadManifest94
                   InflectionData.$fReadManifest74) -}
c1e8fbfb7380effdacb7c7c192e40bf5
  $fReadManifest74 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)
                   InflectionData.$fReadManifest91
                   InflectionData.$fReadManifest75) -}
c1e8fbfb7380effdacb7c7c192e40bf5
  $fReadManifest75 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)
                   InflectionData.$fReadManifest88
                   InflectionData.$fReadManifest76) -}
c1e8fbfb7380effdacb7c7c192e40bf5
  $fReadManifest76 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)
                   InflectionData.$fReadManifest85
                   InflectionData.$fReadManifest77) -}
c1e8fbfb7380effdacb7c7c192e40bf5
  $fReadManifest77 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)
                   InflectionData.$fReadManifest82
                   InflectionData.$fReadManifest78) -}
c1e8fbfb7380effdacb7c7c192e40bf5
  $fReadManifest78 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)
                   InflectionData.$fReadManifest79
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           InflectionData.Number))) -}
c1e8fbfb7380effdacb7c7c192e40bf5
  $fReadManifest79 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest81,
                  InflectionData.$fReadManifest80
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Number>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Number>_R))))) -}
deb068bf60cc4ef2e61f4f14f7d27733
  $fReadManifest8 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Manifest [InflectionData.Animacy]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)>,
     Unfolding: (\ n :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Manifest [InflectionData.Animacy]
                          -> Text.ParserCombinators.ReadP.P b ->
                 let {
                   lvl117 :: Text.ParserCombinators.ReadP.P b
                   = let {
                       lvl118 :: Text.ParserCombinators.ReadP.P b
                       = eta (InflectionData.NoManifest @ [InflectionData.Animacy])
                     } in
                     Text.Read.Lex.expect2
                       @ b
                       (\ a98 :: Text.Read.Lex.Lexeme ->
                        case a98 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                          Text.Read.Lex.Ident a40
                          -> case GHC.Base.eqString
                                    a40
                                    InflectionData.$fReadManifest6 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                               GHC.Types.True -> lvl118 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl117) -}
                   = \ w2 :: () -> lvl117
                 } in
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b
                   (Text.ParserCombinators.ReadP.Look
                      @ b
                      (\ a98 :: GHC.Base.String ->
                       (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                         `cast`
                       (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                         @ b
                         k))
                   (case n of wild { GHC.Types.I# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x 10) of wild2 {
                      GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                      GHC.Types.True
                      -> let {
                           lvl118 :: Text.ParserCombinators.ReadP.P b
                           = let {
                               lvl119 :: Text.ParserCombinators.ReadP.P b
                               = GHC.Read.$wa
                                   @ (InflectionData.LexCat,
                                      InflectionData.ManifestType,
                                      GHC.Types.Int)
                                   InflectionData.$fReadManifest5
                                     `cast`
                                   (Trans
                                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                       <(InflectionData.LexCat,
                                                         InflectionData.ManifestType,
                                                         GHC.Types.Int)>_R))
                                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                  <(InflectionData.LexCat,
                                                    InflectionData.ManifestType,
                                                    GHC.Types.Int)>_R)))
                                   @ b
                                   (\ a40 :: [(InflectionData.LexCat,
                                               InflectionData.ManifestType,
                                               GHC.Types.Int)] ->
                                    GHC.Read.$wa
                                      @ InflectionData.Animacy
                                      InflectionData.$fReadAnimacy2
                                        `cast`
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <InflectionData.Animacy>_R))
                                      @ b
                                      (\ a41 :: [InflectionData.Animacy] ->
                                       eta
                                         (InflectionData.Manifest
                                            @ [InflectionData.Animacy]
                                            a40
                                            a41)))
                             } in
                             Text.Read.Lex.expect2
                               @ b
                               (\ a98 :: Text.Read.Lex.Lexeme ->
                                case a98 of wild1 {
                                  DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                  Text.Read.Lex.Ident a40
                                  -> case GHC.Base.eqString
                                            a40
                                            InflectionData.$fReadManifest3 of wild3 {
                                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                       GHC.Types.True -> lvl119 } })
                         } in
                         let {
                           k1 :: () -> Text.ParserCombinators.ReadP.P b
                             {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl118) -}
                           = \ w2 :: () -> lvl118
                         } in
                         Text.ParserCombinators.ReadP.Look
                           @ b
                           (\ a98 :: GHC.Base.String ->
                            (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                              `cast`
                            (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                              @ b
                              k1) } })) -}
c1e8fbfb7380effdacb7c7c192e40bf5
  $fReadManifest80 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Number -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Number -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.PL) -}
950a731f782def0555c38da3f9075be9
  $fReadManifest81 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PL"#) -}
c1e8fbfb7380effdacb7c7c192e40bf5
  $fReadManifest82 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest84,
                  InflectionData.$fReadManifest83
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Number>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Number>_R))))) -}
c1e8fbfb7380effdacb7c7c192e40bf5
  $fReadManifest83 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Number -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Number -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.PA) -}
673c17bcae98c5a8e6aa8de8d3b2bfea
  $fReadManifest84 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PA"#) -}
c1e8fbfb7380effdacb7c7c192e40bf5
  $fReadManifest85 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest87,
                  InflectionData.$fReadManifest86
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Number>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Number>_R))))) -}
c1e8fbfb7380effdacb7c7c192e40bf5
  $fReadManifest86 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Number -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Number -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.TRI) -}
facbedee2458fb62b39b9358cec7f967
  $fReadManifest87 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TRI"#) -}
c1e8fbfb7380effdacb7c7c192e40bf5
  $fReadManifest88 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest90,
                  InflectionData.$fReadManifest89
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Number>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Number>_R))))) -}
c1e8fbfb7380effdacb7c7c192e40bf5
  $fReadManifest89 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Number -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Number -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.DU) -}
665290623f3c424f6b0f5a8c2d172a46
  $fReadManifest90 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DU"#) -}
c1e8fbfb7380effdacb7c7c192e40bf5
  $fReadManifest91 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest93,
                  InflectionData.$fReadManifest92
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Number>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Number>_R))))) -}
c1e8fbfb7380effdacb7c7c192e40bf5
  $fReadManifest92 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Number -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Number -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.SG) -}
5f51c98a47b68332f9db23239ba6978c
  $fReadManifest93 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SG"#) -}
c1e8fbfb7380effdacb7c7c192e40bf5
  $fReadManifest94 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest96,
                  InflectionData.$fReadManifest95
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Number>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Number>_R))))) -}
c1e8fbfb7380effdacb7c7c192e40bf5
  $fReadManifest95 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Number -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Number -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.UNUM) -}
532d45586fe3104915a1a628ac4c6f6e
  $fReadManifest96 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "UNUM"#) -}
b61ddddf8eeb00b7a4df25131c82ccde
  $fReadManifest98 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Manifest [InflectionData.Person]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)>,
     Unfolding: (\ n :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Manifest [InflectionData.Person]
                          -> Text.ParserCombinators.ReadP.P b ->
                 let {
                   lvl117 :: Text.ParserCombinators.ReadP.P b
                   = let {
                       lvl118 :: Text.ParserCombinators.ReadP.P b
                       = eta (InflectionData.NoManifest @ [InflectionData.Person])
                     } in
                     Text.Read.Lex.expect2
                       @ b
                       (\ a98 :: Text.Read.Lex.Lexeme ->
                        case a98 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                          Text.Read.Lex.Ident a40
                          -> case GHC.Base.eqString
                                    a40
                                    InflectionData.$fReadManifest6 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                               GHC.Types.True -> lvl118 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl117) -}
                   = \ w2 :: () -> lvl117
                 } in
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b
                   (Text.ParserCombinators.ReadP.Look
                      @ b
                      (\ a98 :: GHC.Base.String ->
                       (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                         `cast`
                       (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                         @ b
                         k))
                   (case n of wild { GHC.Types.I# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x 10) of wild2 {
                      GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                      GHC.Types.True
                      -> let {
                           lvl118 :: Text.ParserCombinators.ReadP.P b
                           = let {
                               lvl119 :: Text.ParserCombinators.ReadP.P b
                               = GHC.Read.$wa
                                   @ (InflectionData.LexCat,
                                      InflectionData.ManifestType,
                                      GHC.Types.Int)
                                   InflectionData.$fReadManifest5
                                     `cast`
                                   (Trans
                                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                       <(InflectionData.LexCat,
                                                         InflectionData.ManifestType,
                                                         GHC.Types.Int)>_R))
                                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                  <(InflectionData.LexCat,
                                                    InflectionData.ManifestType,
                                                    GHC.Types.Int)>_R)))
                                   @ b
                                   (\ a40 :: [(InflectionData.LexCat,
                                               InflectionData.ManifestType,
                                               GHC.Types.Int)] ->
                                    GHC.Read.$wa
                                      @ InflectionData.Person
                                      InflectionData.$fReadManifest99
                                        `cast`
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <InflectionData.Person>_R))
                                      @ b
                                      (\ a41 :: [InflectionData.Person] ->
                                       eta
                                         (InflectionData.Manifest
                                            @ [InflectionData.Person]
                                            a40
                                            a41)))
                             } in
                             Text.Read.Lex.expect2
                               @ b
                               (\ a98 :: Text.Read.Lex.Lexeme ->
                                case a98 of wild1 {
                                  DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                  Text.Read.Lex.Ident a40
                                  -> case GHC.Base.eqString
                                            a40
                                            InflectionData.$fReadManifest3 of wild3 {
                                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                       GHC.Types.True -> lvl119 } })
                         } in
                         let {
                           k1 :: () -> Text.ParserCombinators.ReadP.P b
                             {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl118) -}
                           = \ w2 :: () -> lvl118
                         } in
                         Text.ParserCombinators.ReadP.Look
                           @ b
                           (\ a98 :: GHC.Base.String ->
                            (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                              `cast`
                            (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                              @ b
                              k1) } })) -}
02346c3aafaeac9909a5db7a01e8ca09
  $fReadManifest99 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Person
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Person
                   InflectionData.$fReadManifest100
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.Person>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.Person>_R)))) -}
21626b080cf2e0731be3b700433e03eb
  $fReadManifestType :: GHC.Read.Read InflectionData.ManifestType
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.ManifestType
                  InflectionData.$fReadManifestType_$s$dmreadsPrec
                  InflectionData.$fReadManifestType_$sreadListDefault
                  InflectionData.$fReadManifestType_$creadPrec
                  InflectionData.$fReadManifestType_$creadListPrec -}
21626b080cf2e0731be3b700433e03eb
  $fReadManifestType1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.ManifestType] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.ManifestType]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.ManifestType
                   InflectionData.$fReadManifestType2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.ManifestType>_R))
                   @ b
                   eta1) -}
21626b080cf2e0731be3b700433e03eb
  $fReadManifestType10 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.ManifestType)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifestType12,
                  InflectionData.$fReadManifestType11
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.ManifestType>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.ManifestType>_R))))) -}
21626b080cf2e0731be3b700433e03eb
  $fReadManifestType11 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.ManifestType -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.ManifestType
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.Prefix) -}
b42c06bb90daee227e775c5814a8956c
  $fReadManifestType12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Prefix"#) -}
21626b080cf2e0731be3b700433e03eb
  $fReadManifestType13 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.ManifestType)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifestType15,
                  InflectionData.$fReadManifestType14
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.ManifestType>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.ManifestType>_R))))) -}
21626b080cf2e0731be3b700433e03eb
  $fReadManifestType14 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.ManifestType -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.ManifestType
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.Particle) -}
86bbbbaacd872f416579a15338e78b6a
  $fReadManifestType15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Particle"#) -}
21626b080cf2e0731be3b700433e03eb
  $fReadManifestType2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.ManifestType
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.ManifestType
                   InflectionData.$fReadManifestType3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.ManifestType>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.ManifestType>_R)))) -}
21626b080cf2e0731be3b700433e03eb
  $fReadManifestType3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.ManifestType -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: InflectionData.ManifestType
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ InflectionData.ManifestType
                   InflectionData.$fReadManifestType4
                   eta
                   @ b
                   eta1) -}
21626b080cf2e0731be3b700433e03eb
  $fReadManifestType4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.ManifestType)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.ManifestType)
                   InflectionData.$fReadManifestType13
                   InflectionData.$fReadManifestType5) -}
21626b080cf2e0731be3b700433e03eb
  $fReadManifestType5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.ManifestType)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.ManifestType)
                   InflectionData.$fReadManifestType10
                   InflectionData.$fReadManifestType6) -}
21626b080cf2e0731be3b700433e03eb
  $fReadManifestType6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.ManifestType)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.ManifestType)
                   InflectionData.$fReadManifestType7
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           InflectionData.ManifestType))) -}
21626b080cf2e0731be3b700433e03eb
  $fReadManifestType7 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.ManifestType)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifestType9,
                  InflectionData.$fReadManifestType8
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.ManifestType>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.ManifestType>_R))))) -}
21626b080cf2e0731be3b700433e03eb
  $fReadManifestType8 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.ManifestType -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.ManifestType
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.Suffix) -}
72321921727741471a6b26a52a18a2e4
  $fReadManifestType9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Suffix"#) -}
21626b080cf2e0731be3b700433e03eb
  $fReadManifestType_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [InflectionData.ManifestType]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadManifestType1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.ManifestType]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.ManifestType]>_R))) -}
21626b080cf2e0731be3b700433e03eb
  $fReadManifestType_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      InflectionData.ManifestType
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadManifestType2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.ManifestType>_R)) -}
21626b080cf2e0731be3b700433e03eb
  $fReadManifestType_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.ManifestType
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ InflectionData.ManifestType
                   InflectionData.$fReadManifestType_$creadPrec
                   eta) -}
21626b080cf2e0731be3b700433e03eb
  $fReadManifestType_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.ManifestType]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.ManifestType]
                   ((InflectionData.$fReadManifestType_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[InflectionData.ManifestType]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[InflectionData.ManifestType]>_R)
                      @ [InflectionData.ManifestType]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [InflectionData.ManifestType]))) -}
f539d8313c5a8ab2854680bd81c6cecb
  $fReadManifest_$creadList ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Manifest a]
  {- Arity: 1, Strictness: <L,U(A,A,U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a40 $dRead :: GHC.Read.Read a40 ->
                 Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Manifest a40]
                   (GHC.Read.$wa
                      @ (InflectionData.Manifest a40)
                      (InflectionData.$fReadManifest2 @ a40 $dRead)
                        `cast`
                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                <InflectionData.Manifest a40>_R))
                      @ [InflectionData.Manifest a40]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [InflectionData.Manifest a40]))) -}
f539d8313c5a8ab2854680bd81c6cecb
  $fReadManifest_$creadListPrec ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadPrec.ReadPrec
      [InflectionData.Manifest a]
  {- Arity: 3, Strictness: <L,U(A,A,U,A)><L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadManifest1
                  `cast`
                (forall a40.
                 <GHC.Read.Read a40>_R
                 ->_R Trans
                          (<Text.ParserCombinators.ReadPrec.Prec>_R
                           ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                         <[InflectionData.Manifest a40]>_R))
                          (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                    <[InflectionData.Manifest a40]>_R))) -}
f539d8313c5a8ab2854680bd81c6cecb
  $fReadManifest_$creadPrec ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadPrec.ReadPrec
      (InflectionData.Manifest a)
  {- Arity: 2, Strictness: <L,1*U(A,A,1*U,A)><L,U>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadManifest2
                  `cast`
                (forall a40.
                 <GHC.Read.Read a40>_R
                 ->_R Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <InflectionData.Manifest a40>_R)) -}
f539d8313c5a8ab2854680bd81c6cecb
  $fReadManifest_$creadsPrec ::
    GHC.Read.Read a =>
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS (InflectionData.Manifest a)
  {- Arity: 2, Strictness: <L,1*U(A,A,1*U,A)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a40 $dRead :: GHC.Read.Read a40 eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadP.run
                   @ (InflectionData.Manifest a40)
                   ((InflectionData.$fReadManifest2 @ a40 $dRead eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <InflectionData.Manifest a40>_R)
                      @ (InflectionData.Manifest a40)
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ (InflectionData.Manifest a40)))) -}
170a49091e965c69ca2b81c9942aa234
  $fReadMood :: GHC.Read.Read InflectionData.Mood
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Mood
                  InflectionData.$fReadMood_$s$dmreadsPrec
                  InflectionData.$fReadMood2
                  InflectionData.$fReadMood_$creadPrec
                  InflectionData.$fReadMood_$creadListPrec -}
170a49091e965c69ca2b81c9942aa234
  $fReadMood1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Mood] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.Mood]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.Mood
                   InflectionData.$fReadManifest23
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Mood>_R))
                   @ b
                   eta1) -}
170a49091e965c69ca2b81c9942aa234
  $fReadMood2 ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Mood]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Mood]
                   InflectionData.$fReadMood3) -}
170a49091e965c69ca2b81c9942aa234
  $fReadMood3 :: Text.ParserCombinators.ReadP.P [InflectionData.Mood]
  {- Unfolding: (GHC.Read.$wa
                   @ InflectionData.Mood
                   InflectionData.$fReadManifest23
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Mood>_R))
                   @ [InflectionData.Mood]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                      @ [InflectionData.Mood])) -}
170a49091e965c69ca2b81c9942aa234
  $fReadMood_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [InflectionData.Mood]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadMood1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.Mood]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.Mood]>_R))) -}
170a49091e965c69ca2b81c9942aa234
  $fReadMood_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadManifest23
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.Mood>_R)) -}
170a49091e965c69ca2b81c9942aa234
  $fReadMood_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Mood
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ InflectionData.Mood
                   InflectionData.$fReadMood_$creadPrec
                   eta) -}
c1e8fbfb7380effdacb7c7c192e40bf5
  $fReadNumber :: GHC.Read.Read InflectionData.Number
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Number
                  InflectionData.$fReadNumber_$s$dmreadsPrec
                  InflectionData.$fReadNumber2
                  InflectionData.$fReadNumber_$creadPrec
                  InflectionData.$fReadNumber_$creadListPrec -}
c1e8fbfb7380effdacb7c7c192e40bf5
  $fReadNumber1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Number] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.Number]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.Number
                   InflectionData.$fReadManifest71
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Number>_R))
                   @ b
                   eta1) -}
c1e8fbfb7380effdacb7c7c192e40bf5
  $fReadNumber2 ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Number]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Number]
                   InflectionData.$fReadNumber3) -}
c1e8fbfb7380effdacb7c7c192e40bf5
  $fReadNumber3 ::
    Text.ParserCombinators.ReadP.P [InflectionData.Number]
  {- Unfolding: (GHC.Read.$wa
                   @ InflectionData.Number
                   InflectionData.$fReadManifest71
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Number>_R))
                   @ [InflectionData.Number]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                      @ [InflectionData.Number])) -}
c1e8fbfb7380effdacb7c7c192e40bf5
  $fReadNumber_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [InflectionData.Number]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadNumber1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.Number]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.Number]>_R))) -}
c1e8fbfb7380effdacb7c7c192e40bf5
  $fReadNumber_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadManifest71
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.Number>_R)) -}
c1e8fbfb7380effdacb7c7c192e40bf5
  $fReadNumber_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Number
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ InflectionData.Number
                   InflectionData.$fReadNumber_$creadPrec
                   eta) -}
02346c3aafaeac9909a5db7a01e8ca09
  $fReadPerson :: GHC.Read.Read InflectionData.Person
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Person
                  InflectionData.$fReadPerson_$s$dmreadsPrec
                  InflectionData.$fReadPerson2
                  InflectionData.$fReadPerson_$creadPrec
                  InflectionData.$fReadPerson_$creadListPrec -}
02346c3aafaeac9909a5db7a01e8ca09
  $fReadPerson1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Person] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.Person]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.Person
                   InflectionData.$fReadManifest99
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Person>_R))
                   @ b
                   eta1) -}
02346c3aafaeac9909a5db7a01e8ca09
  $fReadPerson2 ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Person]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Person]
                   InflectionData.$fReadPerson3) -}
02346c3aafaeac9909a5db7a01e8ca09
  $fReadPerson3 ::
    Text.ParserCombinators.ReadP.P [InflectionData.Person]
  {- Unfolding: (GHC.Read.$wa
                   @ InflectionData.Person
                   InflectionData.$fReadManifest99
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Person>_R))
                   @ [InflectionData.Person]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                      @ [InflectionData.Person])) -}
02346c3aafaeac9909a5db7a01e8ca09
  $fReadPerson_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [InflectionData.Person]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadPerson1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.Person]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.Person]>_R))) -}
02346c3aafaeac9909a5db7a01e8ca09
  $fReadPerson_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadManifest99
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.Person>_R)) -}
02346c3aafaeac9909a5db7a01e8ca09
  $fReadPerson_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Person
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ InflectionData.Person
                   InflectionData.$fReadPerson_$creadPrec
                   eta) -}
ad1fe4829d26ee371daeb2b0168138e4
  $fReadPolarity :: GHC.Read.Read InflectionData.Polarity
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Polarity
                  InflectionData.$fReadPolarity_$s$dmreadsPrec
                  InflectionData.$fReadPolarity2
                  InflectionData.$fReadPolarity_$creadPrec
                  InflectionData.$fReadPolarity_$creadListPrec -}
ad1fe4829d26ee371daeb2b0168138e4
  $fReadPolarity1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Polarity] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.Polarity]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.Polarity
                   InflectionData.$fReadManifest135
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Polarity>_R))
                   @ b
                   eta1) -}
ad1fe4829d26ee371daeb2b0168138e4
  $fReadPolarity2 ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Polarity]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Polarity]
                   InflectionData.$fReadPolarity3) -}
ad1fe4829d26ee371daeb2b0168138e4
  $fReadPolarity3 ::
    Text.ParserCombinators.ReadP.P [InflectionData.Polarity]
  {- Unfolding: (GHC.Read.$wa
                   @ InflectionData.Polarity
                   InflectionData.$fReadManifest135
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Polarity>_R))
                   @ [InflectionData.Polarity]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                      @ [InflectionData.Polarity])) -}
ad1fe4829d26ee371daeb2b0168138e4
  $fReadPolarity_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [InflectionData.Polarity]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadPolarity1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.Polarity]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.Polarity]>_R))) -}
ad1fe4829d26ee371daeb2b0168138e4
  $fReadPolarity_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Polarity
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadManifest135
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.Polarity>_R)) -}
ad1fe4829d26ee371daeb2b0168138e4
  $fReadPolarity_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Polarity
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ InflectionData.Polarity
                   InflectionData.$fReadPolarity_$creadPrec
                   eta) -}
a4a6522da9f32c4a22fdcdb048233e77
  $fReadSpecificity :: GHC.Read.Read InflectionData.Specificity
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Specificity
                  InflectionData.$fReadSpecificity_$s$dmreadsPrec
                  InflectionData.$fReadSpecificity2
                  InflectionData.$fReadSpecificity_$creadPrec
                  InflectionData.$fReadSpecificity_$creadListPrec -}
a4a6522da9f32c4a22fdcdb048233e77
  $fReadSpecificity1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Specificity] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.Specificity]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.Specificity
                   InflectionData.$fReadManifest151
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Specificity>_R))
                   @ b
                   eta1) -}
a4a6522da9f32c4a22fdcdb048233e77
  $fReadSpecificity2 ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Specificity]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Specificity]
                   InflectionData.$fReadSpecificity3) -}
a4a6522da9f32c4a22fdcdb048233e77
  $fReadSpecificity3 ::
    Text.ParserCombinators.ReadP.P [InflectionData.Specificity]
  {- Unfolding: (GHC.Read.$wa
                   @ InflectionData.Specificity
                   InflectionData.$fReadManifest151
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Specificity>_R))
                   @ [InflectionData.Specificity]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                      @ [InflectionData.Specificity])) -}
a4a6522da9f32c4a22fdcdb048233e77
  $fReadSpecificity_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [InflectionData.Specificity]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadSpecificity1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.Specificity]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.Specificity]>_R))) -}
a4a6522da9f32c4a22fdcdb048233e77
  $fReadSpecificity_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Specificity
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadManifest151
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.Specificity>_R)) -}
a4a6522da9f32c4a22fdcdb048233e77
  $fReadSpecificity_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Specificity
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ InflectionData.Specificity
                   InflectionData.$fReadSpecificity_$creadPrec
                   eta) -}
b64289664290fdc9c5510c85a7afdd78
  $fReadTense :: GHC.Read.Read InflectionData.Tense
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Tense
                  InflectionData.$fReadTense_$s$dmreadsPrec
                  InflectionData.$fReadTense2
                  InflectionData.$fReadTense_$creadPrec
                  InflectionData.$fReadTense_$creadListPrec -}
b64289664290fdc9c5510c85a7afdd78
  $fReadTense1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Tense] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.Tense]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.Tense
                   InflectionData.$fReadManifest167
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Tense>_R))
                   @ b
                   eta1) -}
b64289664290fdc9c5510c85a7afdd78
  $fReadTense2 ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Tense]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Tense]
                   InflectionData.$fReadTense3) -}
b64289664290fdc9c5510c85a7afdd78
  $fReadTense3 ::
    Text.ParserCombinators.ReadP.P [InflectionData.Tense]
  {- Unfolding: (GHC.Read.$wa
                   @ InflectionData.Tense
                   InflectionData.$fReadManifest167
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Tense>_R))
                   @ [InflectionData.Tense]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                      @ [InflectionData.Tense])) -}
b64289664290fdc9c5510c85a7afdd78
  $fReadTense_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [InflectionData.Tense]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadTense1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.Tense]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.Tense]>_R))) -}
b64289664290fdc9c5510c85a7afdd78
  $fReadTense_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadManifest167
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.Tense>_R)) -}
b64289664290fdc9c5510c85a7afdd78
  $fReadTense_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Tense
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ InflectionData.Tense
                   InflectionData.$fReadTense_$creadPrec
                   eta) -}
91b970df1d2f65a770d84bd1b0e168b5
  $fReadTopic :: GHC.Read.Read InflectionData.Topic
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Topic
                  InflectionData.$fReadTopic_$s$dmreadsPrec
                  InflectionData.$fReadTopic2
                  InflectionData.$fReadTopic_$creadPrec
                  InflectionData.$fReadTopic_$creadListPrec -}
91b970df1d2f65a770d84bd1b0e168b5
  $fReadTopic1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Topic] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.Topic]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.Topic
                   InflectionData.$fReadManifest247
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Topic>_R))
                   @ b
                   eta1) -}
91b970df1d2f65a770d84bd1b0e168b5
  $fReadTopic2 ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Topic]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Topic]
                   InflectionData.$fReadTopic3) -}
91b970df1d2f65a770d84bd1b0e168b5
  $fReadTopic3 ::
    Text.ParserCombinators.ReadP.P [InflectionData.Topic]
  {- Unfolding: (GHC.Read.$wa
                   @ InflectionData.Topic
                   InflectionData.$fReadManifest247
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Topic>_R))
                   @ [InflectionData.Topic]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                      @ [InflectionData.Topic])) -}
91b970df1d2f65a770d84bd1b0e168b5
  $fReadTopic_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [InflectionData.Topic]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadTopic1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.Topic]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.Topic]>_R))) -}
91b970df1d2f65a770d84bd1b0e168b5
  $fReadTopic_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Topic
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadManifest247
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.Topic>_R)) -}
91b970df1d2f65a770d84bd1b0e168b5
  $fReadTopic_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Topic
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ InflectionData.Topic
                   InflectionData.$fReadTopic_$creadPrec
                   eta) -}
c432d94948e8418512e7b069e8d02e7a
  $fReadTransitivity :: GHC.Read.Read InflectionData.Transitivity
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Transitivity
                  InflectionData.$fReadTransitivity_$s$dmreadsPrec
                  InflectionData.$fReadTransitivity2
                  InflectionData.$fReadTransitivity_$creadPrec
                  InflectionData.$fReadTransitivity_$creadListPrec -}
c432d94948e8418512e7b069e8d02e7a
  $fReadTransitivity1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Transitivity] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.Transitivity]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.Transitivity
                   InflectionData.$fReadManifest263
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Transitivity>_R))
                   @ b
                   eta1) -}
c432d94948e8418512e7b069e8d02e7a
  $fReadTransitivity2 ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Transitivity]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Transitivity]
                   InflectionData.$fReadTransitivity3) -}
c432d94948e8418512e7b069e8d02e7a
  $fReadTransitivity3 ::
    Text.ParserCombinators.ReadP.P [InflectionData.Transitivity]
  {- Unfolding: (GHC.Read.$wa
                   @ InflectionData.Transitivity
                   InflectionData.$fReadManifest263
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Transitivity>_R))
                   @ [InflectionData.Transitivity]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                      @ [InflectionData.Transitivity])) -}
c432d94948e8418512e7b069e8d02e7a
  $fReadTransitivity_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [InflectionData.Transitivity]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadTransitivity1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.Transitivity]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.Transitivity]>_R))) -}
c432d94948e8418512e7b069e8d02e7a
  $fReadTransitivity_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      InflectionData.Transitivity
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadManifest263
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.Transitivity>_R)) -}
c432d94948e8418512e7b069e8d02e7a
  $fReadTransitivity_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Transitivity
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ InflectionData.Transitivity
                   InflectionData.$fReadTransitivity_$creadPrec
                   eta) -}
1f59333afb1b3b92a8af1e5489e1e630
  $fReadVoice :: GHC.Read.Read InflectionData.Voice
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Voice
                  InflectionData.$fReadVoice_$s$dmreadsPrec
                  InflectionData.$fReadVoice2
                  InflectionData.$fReadVoice_$creadPrec
                  InflectionData.$fReadVoice_$creadListPrec -}
1f59333afb1b3b92a8af1e5489e1e630
  $fReadVoice1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Voice] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.Voice]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.Voice
                   InflectionData.$fReadManifest287
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Voice>_R))
                   @ b
                   eta1) -}
1f59333afb1b3b92a8af1e5489e1e630
  $fReadVoice2 ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Voice]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Voice]
                   InflectionData.$fReadVoice3) -}
1f59333afb1b3b92a8af1e5489e1e630
  $fReadVoice3 ::
    Text.ParserCombinators.ReadP.P [InflectionData.Voice]
  {- Unfolding: (GHC.Read.$wa
                   @ InflectionData.Voice
                   InflectionData.$fReadManifest287
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Voice>_R))
                   @ [InflectionData.Voice]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                      @ [InflectionData.Voice])) -}
1f59333afb1b3b92a8af1e5489e1e630
  $fReadVoice_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [InflectionData.Voice]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadVoice1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.Voice]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.Voice]>_R))) -}
1f59333afb1b3b92a8af1e5489e1e630
  $fReadVoice_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Voice
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadManifest287
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.Voice>_R)) -}
1f59333afb1b3b92a8af1e5489e1e630
  $fReadVoice_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Voice
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ InflectionData.Voice
                   InflectionData.$fReadVoice_$creadPrec
                   eta) -}
91017ab7ea71228801f74c069cd5baf7
  $fReadVolition :: GHC.Read.Read InflectionData.Volition
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Volition
                  InflectionData.$fReadVolition_$s$dmreadsPrec
                  InflectionData.$fReadVolition2
                  InflectionData.$fReadVolition_$creadPrec
                  InflectionData.$fReadVolition_$creadListPrec -}
91017ab7ea71228801f74c069cd5baf7
  $fReadVolition1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Volition] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.Volition]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.Volition
                   InflectionData.$fReadManifest307
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Volition>_R))
                   @ b
                   eta1) -}
91017ab7ea71228801f74c069cd5baf7
  $fReadVolition2 ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Volition]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Volition]
                   InflectionData.$fReadVolition3) -}
91017ab7ea71228801f74c069cd5baf7
  $fReadVolition3 ::
    Text.ParserCombinators.ReadP.P [InflectionData.Volition]
  {- Unfolding: (GHC.Read.$wa
                   @ InflectionData.Volition
                   InflectionData.$fReadManifest307
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Volition>_R))
                   @ [InflectionData.Volition]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                      @ [InflectionData.Volition])) -}
91017ab7ea71228801f74c069cd5baf7
  $fReadVolition_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [InflectionData.Volition]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadVolition1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.Volition]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.Volition]>_R))) -}
91017ab7ea71228801f74c069cd5baf7
  $fReadVolition_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Volition
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadManifest307
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.Volition>_R)) -}
91017ab7ea71228801f74c069cd5baf7
  $fReadVolition_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Volition
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ InflectionData.Volition
                   InflectionData.$fReadVolition_$creadPrec
                   eta) -}
c1222338098ba2587a77c0645e467c22
  $fShow(,,,,,,,,,,,,,,,,) ::
    (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
     GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
     GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
     GHC.Show.Show l, GHC.Show.Show m, GHC.Show.Show n, GHC.Show.Show o,
     GHC.Show.Show p, GHC.Show.Show q) =>
    GHC.Show.Show (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)
  DFunId[0]
  {- Arity: 17,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a40
                      @ b
                      @ c
                      @ d
                      @ e
                      @ f
                      @ g
                      @ h
                      @ i
                      @ j
                      @ k
                      @ l
                      @ m
                      @ n
                      @ o
                      @ p
                      @ q
                      $dShow :: GHC.Show.Show a40
                      $dShow1 :: GHC.Show.Show b
                      $dShow2 :: GHC.Show.Show c
                      $dShow3 :: GHC.Show.Show d
                      $dShow4 :: GHC.Show.Show e
                      $dShow5 :: GHC.Show.Show f
                      $dShow6 :: GHC.Show.Show g
                      $dShow7 :: GHC.Show.Show h
                      $dShow8 :: GHC.Show.Show i
                      $dShow9 :: GHC.Show.Show j
                      $dShow10 :: GHC.Show.Show k
                      $dShow11 :: GHC.Show.Show l
                      $dShow12 :: GHC.Show.Show m
                      $dShow13 :: GHC.Show.Show n
                      $dShow14 :: GHC.Show.Show o
                      $dShow15 :: GHC.Show.Show p
                      $dShow16 :: GHC.Show.Show q.
                  @ (a40, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)
                  (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec1
                     @ a40
                     @ b
                     @ c
                     @ d
                     @ e
                     @ f
                     @ g
                     @ h
                     @ i
                     @ j
                     @ k
                     @ l
                     @ m
                     @ n
                     @ o
                     @ p
                     @ q
                     $dShow
                     $dShow1
                     $dShow2
                     $dShow3
                     $dShow4
                     $dShow5
                     $dShow6
                     $dShow7
                     $dShow8
                     $dShow9
                     $dShow10
                     $dShow11
                     $dShow12
                     $dShow13
                     $dShow14
                     $dShow15
                     $dShow16)
                  (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$cshow
                     @ a40
                     @ b
                     @ c
                     @ d
                     @ e
                     @ f
                     @ g
                     @ h
                     @ i
                     @ j
                     @ k
                     @ l
                     @ m
                     @ n
                     @ o
                     @ p
                     @ q
                     $dShow
                     $dShow1
                     $dShow2
                     $dShow3
                     $dShow4
                     $dShow5
                     $dShow6
                     $dShow7
                     $dShow8
                     $dShow9
                     $dShow10
                     $dShow11
                     $dShow12
                     $dShow13
                     $dShow14
                     $dShow15
                     $dShow16)
                  (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$cshowList
                     @ a40
                     @ b
                     @ c
                     @ d
                     @ e
                     @ f
                     @ g
                     @ h
                     @ i
                     @ j
                     @ k
                     @ l
                     @ m
                     @ n
                     @ o
                     @ p
                     @ q
                     $dShow
                     $dShow1
                     $dShow2
                     $dShow3
                     $dShow4
                     $dShow5
                     $dShow6
                     $dShow7
                     $dShow8
                     $dShow9
                     $dShow10
                     $dShow11
                     $dShow12
                     $dShow13
                     $dShow14
                     $dShow15
                     $dShow16) -}
eb9148866a7208c140142cf9c7adb474
  $fShow(,,,,,,,,,,,,,,,,)1 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# ')') -}
85dabc27d66961b6f2c345591472a4d4
  $fShow(,,,,,,,,,,,,,,,,)2 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '(') -}
964c5a2cb056c4134a489ee8b31607b1
  $fShow(,,,,,,,,,,,,,,,,)3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "}"#) -}
affb475a23e321f372bda08015a7dd1d
  $fShow(,,,,,,,,,,,,,,,,)4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "getExp = "#) -}
86a4486267306d2b14c19887d771db04
  $fShow(,,,,,,,,,,,,,,,,)5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Express {"#) -}
1d3cfc51e73af7f503c4a2deb9d0cb76
  $fShow(,,,,,,,,,,,,,,,,)6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NoExpress"#) -}
003e93b8cc454383d48419821004fa65
  $fShow(,,,,,,,,,,,,,,,,)7 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0) -}
b7e539ebdd97b6caba1b968cc58c4ba7
  $fShow(,,,,,,,,,,,,,,,,)8 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   InflectionData.$fShow(,,,,,,,,,,,,,,,,)6) -}
2be50642e23b194d12f02fc002297d9b
  $fShow(,,,,,,,,,,,,,,,,)_$cshow ::
    (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
     GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
     GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
     GHC.Show.Show l, GHC.Show.Show m, GHC.Show.Show n, GHC.Show.Show o,
     GHC.Show.Show p, GHC.Show.Show q) =>
    (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)
    -> GHC.Base.String
  {- Arity: 18,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Unfolding: InlineRule (18, True, False)
                (\ @ a40
                   @ b
                   @ c
                   @ d
                   @ e
                   @ f
                   @ g
                   @ h
                   @ i
                   @ j
                   @ k
                   @ l
                   @ m
                   @ n
                   @ o
                   @ p
                   @ q
                   $dShow :: GHC.Show.Show a40
                   $dShow1 :: GHC.Show.Show b
                   $dShow2 :: GHC.Show.Show c
                   $dShow3 :: GHC.Show.Show d
                   $dShow4 :: GHC.Show.Show e
                   $dShow5 :: GHC.Show.Show f
                   $dShow6 :: GHC.Show.Show g
                   $dShow7 :: GHC.Show.Show h
                   $dShow8 :: GHC.Show.Show i
                   $dShow9 :: GHC.Show.Show j
                   $dShow10 :: GHC.Show.Show k
                   $dShow11 :: GHC.Show.Show l
                   $dShow12 :: GHC.Show.Show m
                   $dShow13 :: GHC.Show.Show n
                   $dShow14 :: GHC.Show.Show o
                   $dShow15 :: GHC.Show.Show p
                   $dShow16 :: GHC.Show.Show q
                   x :: (a40, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) ->
                 InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec1
                   @ a40
                   @ b
                   @ c
                   @ d
                   @ e
                   @ f
                   @ g
                   @ h
                   @ i
                   @ j
                   @ k
                   @ l
                   @ m
                   @ n
                   @ o
                   @ p
                   @ q
                   $dShow
                   $dShow1
                   $dShow2
                   $dShow3
                   $dShow4
                   $dShow5
                   $dShow6
                   $dShow7
                   $dShow8
                   $dShow9
                   $dShow10
                   $dShow11
                   $dShow12
                   $dShow13
                   $dShow14
                   $dShow15
                   $dShow16
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
f240ad1c97772c133d8de7158badbe4d
  $fShow(,,,,,,,,,,,,,,,,)_$cshowList ::
    (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
     GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
     GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
     GHC.Show.Show l, GHC.Show.Show m, GHC.Show.Show n, GHC.Show.Show o,
     GHC.Show.Show p, GHC.Show.Show q) =>
    [(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)]
    -> GHC.Show.ShowS
  {- Arity: 19,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (19, True, False)
                (\ @ a40
                   @ b
                   @ c
                   @ d
                   @ e
                   @ f
                   @ g
                   @ h
                   @ i
                   @ j
                   @ k
                   @ l
                   @ m
                   @ n
                   @ o
                   @ p
                   @ q
                   $dShow :: GHC.Show.Show a40
                   $dShow1 :: GHC.Show.Show b
                   $dShow2 :: GHC.Show.Show c
                   $dShow3 :: GHC.Show.Show d
                   $dShow4 :: GHC.Show.Show e
                   $dShow5 :: GHC.Show.Show f
                   $dShow6 :: GHC.Show.Show g
                   $dShow7 :: GHC.Show.Show h
                   $dShow8 :: GHC.Show.Show i
                   $dShow9 :: GHC.Show.Show j
                   $dShow10 :: GHC.Show.Show k
                   $dShow11 :: GHC.Show.Show l
                   $dShow12 :: GHC.Show.Show m
                   $dShow13 :: GHC.Show.Show n
                   $dShow14 :: GHC.Show.Show o
                   $dShow15 :: GHC.Show.Show p
                   $dShow16 :: GHC.Show.Show q
                   ls :: [(a40, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)]
                   s :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (a40, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)
                   (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec1
                      @ a40
                      @ b
                      @ c
                      @ d
                      @ e
                      @ f
                      @ g
                      @ h
                      @ i
                      @ j
                      @ k
                      @ l
                      @ m
                      @ n
                      @ o
                      @ p
                      @ q
                      $dShow
                      $dShow1
                      $dShow2
                      $dShow3
                      $dShow4
                      $dShow5
                      $dShow6
                      $dShow7
                      $dShow8
                      $dShow9
                      $dShow10
                      $dShow11
                      $dShow12
                      $dShow13
                      $dShow14
                      $dShow15
                      $dShow16
                      GHC.Show.shows18)
                   ls
                   s) -}
ce522c1d99b503cc50c6a04abbeb7ec2
  $fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int -> InflectionData.Express a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(U)><S,1*U>,
     Unfolding: (\ @ a40
                   $dShow :: GHC.Show.Show a40
                   ds :: GHC.Types.Int
                   ds1 :: InflectionData.Express a40 ->
                 case ds1 of wild {
                   InflectionData.NoExpress
                   -> InflectionData.$fShow(,,,,,,,,,,,,,,,,)8
                   InflectionData.Express b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        f :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.showsPrec
                            @ a40
                            $dShow
                            InflectionData.$fShow(,,,,,,,,,,,,,,,,)7
                            b1
                      } in
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ x1 :: GHC.Base.String ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShow(,,,,,,,,,,,,,,,,)5
                            (GHC.Base.++
                               @ GHC.Types.Char
                               InflectionData.$fShow(,,,,,,,,,,,,,,,,)4
                               (f (GHC.Base.++
                                     @ GHC.Types.Char
                                     InflectionData.$fShow(,,,,,,,,,,,,,,,,)3
                                     x1)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p
                        GHC.Types.True
                        -> \ x1 :: GHC.Base.String ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x1)) } } }) -}
0e23a7180e295f6778c0a2a9391fd1bc
  $fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec1 ::
    (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
     GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
     GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
     GHC.Show.Show l, GHC.Show.Show m, GHC.Show.Show n, GHC.Show.Show o,
     GHC.Show.Show p, GHC.Show.Show q) =>
    GHC.Types.Int
    -> (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)
    -> GHC.Show.ShowS
  {- Arity: 19,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,A><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (19, True, False)
                (\ @ a40
                   @ b
                   @ c
                   @ d
                   @ e
                   @ f
                   @ g
                   @ h
                   @ i
                   @ j
                   @ k
                   @ l
                   @ m
                   @ n
                   @ o
                   @ p
                   @ q
                   w :: GHC.Show.Show a40
                   w1 :: GHC.Show.Show b
                   w2 :: GHC.Show.Show c
                   w3 :: GHC.Show.Show d
                   w4 :: GHC.Show.Show e
                   w5 :: GHC.Show.Show f
                   w6 :: GHC.Show.Show g
                   w7 :: GHC.Show.Show h
                   w8 :: GHC.Show.Show i
                   w9 :: GHC.Show.Show j
                   w10 :: GHC.Show.Show k
                   w11 :: GHC.Show.Show l
                   w12 :: GHC.Show.Show m
                   w13 :: GHC.Show.Show n
                   w14 :: GHC.Show.Show o
                   w15 :: GHC.Show.Show p
                   w16 :: GHC.Show.Show q
                   w17 :: GHC.Types.Int
                   w18 :: (a40, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) ->
                 case w18 of ww { (,,,,,,,,,,,,,,,,) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ->
                 InflectionData.$w$cshowsPrec13
                   @ a40
                   @ b
                   @ c
                   @ d
                   @ e
                   @ f
                   @ g
                   @ h
                   @ i
                   @ j
                   @ k
                   @ l
                   @ m
                   @ n
                   @ o
                   @ p
                   @ q
                   w
                   w1
                   w2
                   w3
                   w4
                   w5
                   w6
                   w7
                   w8
                   w9
                   w10
                   w11
                   w12
                   w13
                   w14
                   w15
                   w16
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww17 }) -}
ce522c1d99b503cc50c6a04abbeb7ec2
  $fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec1 ::
    GHC.Types.Int
    -> InflectionData.Express InflectionData.Volition -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Express InflectionData.Volition
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoExpress
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fShow(,,,,,,,,,,,,,,,,)6
                        eta
                   InflectionData.Express b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShow(,,,,,,,,,,,,,,,,)5
                            (GHC.Base.++
                               @ GHC.Types.Char
                               InflectionData.$fShow(,,,,,,,,,,,,,,,,)4
                               (case b1 of wild2 {
                                  InflectionData.UVOL
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       InflectionData.$fReadManifest320
                                       (GHC.Base.++
                                          @ GHC.Types.Char
                                          InflectionData.$fShow(,,,,,,,,,,,,,,,,)3
                                          x1)
                                  InflectionData.VOL
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       InflectionData.$fReadManifest317
                                       (GHC.Base.++
                                          @ GHC.Types.Char
                                          InflectionData.$fShow(,,,,,,,,,,,,,,,,)3
                                          x1)
                                  InflectionData.NVOL
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       InflectionData.$fReadManifest314
                                       (GHC.Base.++
                                          @ GHC.Types.Char
                                          InflectionData.$fShow(,,,,,,,,,,,,,,,,)3
                                          x1) }))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
ce522c1d99b503cc50c6a04abbeb7ec2
  $fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec10 ::
    GHC.Types.Int
    -> InflectionData.Express InflectionData.Specificity
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Express InflectionData.Specificity
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoExpress
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fShow(,,,,,,,,,,,,,,,,)6
                        eta
                   InflectionData.Express b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShow(,,,,,,,,,,,,,,,,)5
                            (GHC.Base.++
                               @ GHC.Types.Char
                               InflectionData.$fShow(,,,,,,,,,,,,,,,,)4
                               (case b1 of wild2 {
                                  InflectionData.USPE
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       InflectionData.$fReadManifest164
                                       (GHC.Base.++
                                          @ GHC.Types.Char
                                          InflectionData.$fShow(,,,,,,,,,,,,,,,,)3
                                          x1)
                                  InflectionData.SPEC
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       InflectionData.$fReadManifest161
                                       (GHC.Base.++
                                          @ GHC.Types.Char
                                          InflectionData.$fShow(,,,,,,,,,,,,,,,,)3
                                          x1)
                                  InflectionData.NSPEC
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       InflectionData.$fReadManifest158
                                       (GHC.Base.++
                                          @ GHC.Types.Char
                                          InflectionData.$fShow(,,,,,,,,,,,,,,,,)3
                                          x1) }))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
ce522c1d99b503cc50c6a04abbeb7ec2
  $fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec11 ::
    GHC.Types.Int
    -> InflectionData.Express InflectionData.Number -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Express InflectionData.Number
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoExpress
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fShow(,,,,,,,,,,,,,,,,)6
                        eta
                   InflectionData.Express b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShow(,,,,,,,,,,,,,,,,)5
                            (GHC.Base.++
                               @ GHC.Types.Char
                               InflectionData.$fShow(,,,,,,,,,,,,,,,,)4
                               (InflectionData.$w$cshowsPrec9
                                  b1
                                  (GHC.Base.++
                                     @ GHC.Types.Char
                                     InflectionData.$fShow(,,,,,,,,,,,,,,,,)3
                                     x1)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
ce522c1d99b503cc50c6a04abbeb7ec2
  $fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec12 ::
    GHC.Types.Int
    -> InflectionData.Express InflectionData.Gender -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Express InflectionData.Gender
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoExpress
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fShow(,,,,,,,,,,,,,,,,)6
                        eta
                   InflectionData.Express b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShow(,,,,,,,,,,,,,,,,)5
                            (GHC.Base.++
                               @ GHC.Types.Char
                               InflectionData.$fShow(,,,,,,,,,,,,,,,,)4
                               (InflectionData.$w$cshowsPrec12
                                  b1
                                  (GHC.Base.++
                                     @ GHC.Types.Char
                                     InflectionData.$fShow(,,,,,,,,,,,,,,,,)3
                                     x1)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
ce522c1d99b503cc50c6a04abbeb7ec2
  $fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec2 ::
    GHC.Types.Int
    -> InflectionData.Express InflectionData.Transitivity
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Express InflectionData.Transitivity
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoExpress
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fShow(,,,,,,,,,,,,,,,,)6
                        eta
                   InflectionData.Express b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShow(,,,,,,,,,,,,,,,,)5
                            (GHC.Base.++
                               @ GHC.Types.Char
                               InflectionData.$fShow(,,,,,,,,,,,,,,,,)4
                               (InflectionData.$w$cshowsPrec
                                  b1
                                  (GHC.Base.++
                                     @ GHC.Types.Char
                                     InflectionData.$fShow(,,,,,,,,,,,,,,,,)3
                                     x1)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
ce522c1d99b503cc50c6a04abbeb7ec2
  $fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec3 ::
    GHC.Types.Int
    -> InflectionData.Express InflectionData.Voice -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Express InflectionData.Voice
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoExpress
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fShow(,,,,,,,,,,,,,,,,)6
                        eta
                   InflectionData.Express b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShow(,,,,,,,,,,,,,,,,)5
                            (GHC.Base.++
                               @ GHC.Types.Char
                               InflectionData.$fShow(,,,,,,,,,,,,,,,,)4
                               (InflectionData.$w$cshowsPrec2
                                  b1
                                  (GHC.Base.++
                                     @ GHC.Types.Char
                                     InflectionData.$fShow(,,,,,,,,,,,,,,,,)3
                                     x1)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
ce522c1d99b503cc50c6a04abbeb7ec2
  $fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec4 ::
    GHC.Types.Int
    -> InflectionData.Express InflectionData.Mood -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Express InflectionData.Mood
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoExpress
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fShow(,,,,,,,,,,,,,,,,)6
                        eta
                   InflectionData.Express b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShow(,,,,,,,,,,,,,,,,)5
                            (GHC.Base.++
                               @ GHC.Types.Char
                               InflectionData.$fShow(,,,,,,,,,,,,,,,,)4
                               (InflectionData.$w$cshowsPrec3
                                  b1
                                  (GHC.Base.++
                                     @ GHC.Types.Char
                                     InflectionData.$fShow(,,,,,,,,,,,,,,,,)3
                                     x1)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
ce522c1d99b503cc50c6a04abbeb7ec2
  $fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec5 ::
    GHC.Types.Int
    -> InflectionData.Express InflectionData.Tense -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Express InflectionData.Tense
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoExpress
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fShow(,,,,,,,,,,,,,,,,)6
                        eta
                   InflectionData.Express b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShow(,,,,,,,,,,,,,,,,)5
                            (GHC.Base.++
                               @ GHC.Types.Char
                               InflectionData.$fShow(,,,,,,,,,,,,,,,,)4
                               (InflectionData.$w$cshowsPrec5
                                  b1
                                  (GHC.Base.++
                                     @ GHC.Types.Char
                                     InflectionData.$fShow(,,,,,,,,,,,,,,,,)3
                                     x1)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
ce522c1d99b503cc50c6a04abbeb7ec2
  $fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec6 ::
    GHC.Types.Int
    -> InflectionData.Express InflectionData.Polarity -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Express InflectionData.Polarity
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoExpress
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fShow(,,,,,,,,,,,,,,,,)6
                        eta
                   InflectionData.Express b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShow(,,,,,,,,,,,,,,,,)5
                            (GHC.Base.++
                               @ GHC.Types.Char
                               InflectionData.$fShow(,,,,,,,,,,,,,,,,)4
                               (case b1 of wild2 {
                                  InflectionData.UPOL
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       InflectionData.$fReadManifest148
                                       (GHC.Base.++
                                          @ GHC.Types.Char
                                          InflectionData.$fShow(,,,,,,,,,,,,,,,,)3
                                          x1)
                                  InflectionData.AFF
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       InflectionData.$fReadManifest145
                                       (GHC.Base.++
                                          @ GHC.Types.Char
                                          InflectionData.$fShow(,,,,,,,,,,,,,,,,)3
                                          x1)
                                  InflectionData.NEG
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       InflectionData.$fReadManifest142
                                       (GHC.Base.++
                                          @ GHC.Types.Char
                                          InflectionData.$fShow(,,,,,,,,,,,,,,,,)3
                                          x1) }))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
ce522c1d99b503cc50c6a04abbeb7ec2
  $fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec7 ::
    GHC.Types.Int
    -> InflectionData.Express InflectionData.Honorific
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Express InflectionData.Honorific
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoExpress
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fShow(,,,,,,,,,,,,,,,,)6
                        eta
                   InflectionData.Express b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShow(,,,,,,,,,,,,,,,,)5
                            (GHC.Base.++
                               @ GHC.Types.Char
                               InflectionData.$fShow(,,,,,,,,,,,,,,,,)4
                               (InflectionData.$w$cshowsPrec6
                                  b1
                                  (GHC.Base.++
                                     @ GHC.Types.Char
                                     InflectionData.$fShow(,,,,,,,,,,,,,,,,)3
                                     x1)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
ce522c1d99b503cc50c6a04abbeb7ec2
  $fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec8 ::
    GHC.Types.Int
    -> InflectionData.Express InflectionData.Person -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Express InflectionData.Person
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoExpress
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fShow(,,,,,,,,,,,,,,,,)6
                        eta
                   InflectionData.Express b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShow(,,,,,,,,,,,,,,,,)5
                            (GHC.Base.++
                               @ GHC.Types.Char
                               InflectionData.$fShow(,,,,,,,,,,,,,,,,)4
                               (InflectionData.$w$cshowsPrec7
                                  b1
                                  (GHC.Base.++
                                     @ GHC.Types.Char
                                     InflectionData.$fShow(,,,,,,,,,,,,,,,,)3
                                     x1)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
ce522c1d99b503cc50c6a04abbeb7ec2
  $fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec9 ::
    GHC.Types.Int
    -> InflectionData.Express InflectionData.Topic -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Express InflectionData.Topic
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoExpress
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fShow(,,,,,,,,,,,,,,,,)6
                        eta
                   InflectionData.Express b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShow(,,,,,,,,,,,,,,,,)5
                            (GHC.Base.++
                               @ GHC.Types.Char
                               InflectionData.$fShow(,,,,,,,,,,,,,,,,)4
                               (case b1 of wild2 {
                                  InflectionData.UTOP
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       InflectionData.$fReadManifest260
                                       (GHC.Base.++
                                          @ GHC.Types.Char
                                          InflectionData.$fShow(,,,,,,,,,,,,,,,,)3
                                          x1)
                                  InflectionData.TOP
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       InflectionData.$fReadManifest257
                                       (GHC.Base.++
                                          @ GHC.Types.Char
                                          InflectionData.$fShow(,,,,,,,,,,,,,,,,)3
                                          x1)
                                  InflectionData.NTOP
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       InflectionData.$fReadManifest254
                                       (GHC.Base.++
                                          @ GHC.Types.Char
                                          InflectionData.$fShow(,,,,,,,,,,,,,,,,)3
                                          x1) }))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
8301f6a93092ff3873c86d1ecce7e0cd
  $fShow(,,,,,,,,,,,,,,,,)_go ::
    [GHC.Base.String -> GHC.Base.String]
    -> GHC.Base.String -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U> -}
3fb8f806ac431419336914d62e0692e1
  $fShowAnimacy :: GHC.Show.Show InflectionData.Animacy
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Animacy
                  InflectionData.$fShowAnimacy_$cshowsPrec
                  InflectionData.$fShowAnimacy_$cshow
                  InflectionData.$fShowAnimacy_$cshowList -}
3fb8f806ac431419336914d62e0692e1
  $fShowAnimacy_$cshow :: InflectionData.Animacy -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.Animacy ->
                 InflectionData.$fShowAnimacy_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
3fb8f806ac431419336914d62e0692e1
  $fShowAnimacy_$cshowList ::
    [InflectionData.Animacy] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Animacy
                   InflectionData.$w$cshowsPrec11) -}
3fb8f806ac431419336914d62e0692e1
  $fShowAnimacy_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Animacy -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: InflectionData.Animacy
                   w2 :: GHC.Base.String ->
                 InflectionData.$w$cshowsPrec11 w1 w2) -}
3260581e2888098e95013c9746eb2927
  $fShowAspect :: GHC.Show.Show InflectionData.Aspect
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Aspect
                  InflectionData.$fShowAspect_$cshowsPrec
                  InflectionData.$fShowAspect_$cshow
                  InflectionData.$fShowAspect_$cshowList -}
3260581e2888098e95013c9746eb2927
  $fShowAspect_$cshow :: InflectionData.Aspect -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.Aspect ->
                 InflectionData.$fShowAspect_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
3260581e2888098e95013c9746eb2927
  $fShowAspect_$cshowList ::
    [InflectionData.Aspect] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Aspect
                   InflectionData.$w$cshowsPrec4) -}
3260581e2888098e95013c9746eb2927
  $fShowAspect_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Aspect -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: InflectionData.Aspect
                   w2 :: GHC.Base.String ->
                 InflectionData.$w$cshowsPrec4 w1 w2) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fShowCase :: GHC.Show.Show InflectionData.Case
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Case
                  InflectionData.$fShowCase_$cshowsPrec
                  InflectionData.$fShowCase_$cshow
                  InflectionData.$fShowCase_$cshowList -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fShowCase_$cshow :: InflectionData.Case -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.Case ->
                 InflectionData.$fShowCase_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fShowCase_$cshowList :: [InflectionData.Case] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Case
                   InflectionData.$w$cshowsPrec10) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $fShowCase_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Case -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: InflectionData.Case
                   w2 :: GHC.Base.String ->
                 InflectionData.$w$cshowsPrec10 w1 w2) -}
f57cbd9dbed35919833216936d0e066e
  $fShowDefiniteness :: GHC.Show.Show InflectionData.Definiteness
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Definiteness
                  InflectionData.$fShowDefiniteness_$cshowsPrec
                  InflectionData.$fShowDefiniteness_$cshow
                  InflectionData.$fShowDefiniteness_$cshowList -}
f57cbd9dbed35919833216936d0e066e
  $fShowDefiniteness_$cshow ::
    InflectionData.Definiteness -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.Definiteness ->
                 case x of wild {
                   InflectionData.UDEF -> InflectionData.$fReadDefiniteness15
                   InflectionData.DEF -> InflectionData.$fReadDefiniteness12
                   InflectionData.INDF -> InflectionData.$fReadDefiniteness9 }) -}
f57cbd9dbed35919833216936d0e066e
  $fShowDefiniteness_$cshowList ::
    [InflectionData.Definiteness] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Definiteness
                   InflectionData.$w$cshowsPrec8) -}
f57cbd9dbed35919833216936d0e066e
  $fShowDefiniteness_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Definiteness -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: InflectionData.Definiteness
                   w2 :: GHC.Base.String ->
                 InflectionData.$w$cshowsPrec8 w1 w2) -}
8c39249ddb7859f10b018a2526e04a45
  $fShowEvidentiality :: GHC.Show.Show InflectionData.Evidentiality
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Evidentiality
                  InflectionData.$fShowEvidentiality_$cshowsPrec
                  InflectionData.$fShowEvidentiality_$cshow
                  InflectionData.$fShowEvidentiality_$cshowList -}
8c39249ddb7859f10b018a2526e04a45
  $fShowEvidentiality_$cshow ::
    InflectionData.Evidentiality -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.Evidentiality ->
                 InflectionData.$fShowEvidentiality_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
8c39249ddb7859f10b018a2526e04a45
  $fShowEvidentiality_$cshowList ::
    [InflectionData.Evidentiality] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Evidentiality
                   InflectionData.$w$cshowsPrec1) -}
8c39249ddb7859f10b018a2526e04a45
  $fShowEvidentiality_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Evidentiality -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: InflectionData.Evidentiality
                   w2 :: GHC.Base.String ->
                 InflectionData.$w$cshowsPrec1 w1 w2) -}
ce522c1d99b503cc50c6a04abbeb7ec2
  $fShowExpress ::
    GHC.Show.Show a => GHC.Show.Show (InflectionData.Express a)
  DFunId[0]
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a40 $dShow :: GHC.Show.Show a40.
                  @ (InflectionData.Express a40)
                  (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec @ a40 $dShow)
                  (InflectionData.$fShowExpress_$cshow @ a40 $dShow)
                  (InflectionData.$fShowExpress_$cshowList @ a40 $dShow) -}
ce522c1d99b503cc50c6a04abbeb7ec2
  $fShowExpress_$cshow ::
    GHC.Show.Show a => InflectionData.Express a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(1*C1(C1(C1(U))),A,A)><S,1*U>,
     Unfolding: (\ @ a40
                   $dShow :: GHC.Show.Show a40
                   x :: InflectionData.Express a40 ->
                 case x of wild {
                   InflectionData.NoExpress
                   -> InflectionData.$fShow(,,,,,,,,,,,,,,,,)6
                   InflectionData.Express b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fShow(,,,,,,,,,,,,,,,,)5
                        (GHC.Base.++
                           @ GHC.Types.Char
                           InflectionData.$fShow(,,,,,,,,,,,,,,,,)4
                           (GHC.Show.showsPrec
                              @ a40
                              $dShow
                              InflectionData.$fShow(,,,,,,,,,,,,,,,,)7
                              b1
                              InflectionData.$fShow(,,,,,,,,,,,,,,,,)3)) }) -}
ce522c1d99b503cc50c6a04abbeb7ec2
  $fShowExpress_$cshowList ::
    GHC.Show.Show a => [InflectionData.Express a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a40
                   $dShow :: GHC.Show.Show a40
                   eta :: [InflectionData.Express a40]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (InflectionData.Express a40)
                   (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec
                      @ a40
                      $dShow
                      InflectionData.$fShow(,,,,,,,,,,,,,,,,)7)
                   eta
                   eta1) -}
8b595aff125f95a2b35fe330b0ba7fad
  $fShowGender :: GHC.Show.Show InflectionData.Gender
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Gender
                  InflectionData.$fShowGender_$cshowsPrec
                  InflectionData.$fShowGender_$cshow
                  InflectionData.$fShowGender_$cshowList -}
8b595aff125f95a2b35fe330b0ba7fad
  $fShowGender_$cshow :: InflectionData.Gender -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.Gender ->
                 InflectionData.$fShowGender_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
8b595aff125f95a2b35fe330b0ba7fad
  $fShowGender_$cshowList ::
    [InflectionData.Gender] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Gender
                   InflectionData.$w$cshowsPrec12) -}
8b595aff125f95a2b35fe330b0ba7fad
  $fShowGender_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Gender -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: InflectionData.Gender
                   w2 :: GHC.Base.String ->
                 InflectionData.$w$cshowsPrec12 w1 w2) -}
38ff9a9c45f96d99123b457fda219bfb
  $fShowHonorific :: GHC.Show.Show InflectionData.Honorific
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Honorific
                  InflectionData.$fShowHonorific_$cshowsPrec
                  InflectionData.$fShowHonorific_$cshow
                  InflectionData.$fShowHonorific_$cshowList -}
38ff9a9c45f96d99123b457fda219bfb
  $fShowHonorific_$cshow ::
    InflectionData.Honorific -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.Honorific ->
                 InflectionData.$fShowHonorific_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
38ff9a9c45f96d99123b457fda219bfb
  $fShowHonorific_$cshowList ::
    [InflectionData.Honorific] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Honorific
                   InflectionData.$w$cshowsPrec6) -}
38ff9a9c45f96d99123b457fda219bfb
  $fShowHonorific_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Honorific -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: InflectionData.Honorific
                   w2 :: GHC.Base.String ->
                 InflectionData.$w$cshowsPrec6 w1 w2) -}
e87dedc6ee0613212a8838da9054e9ca
  $fShowInflectionSystem ::
    GHC.Show.Show InflectionData.InflectionSystem
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.InflectionSystem
                  InflectionData.$fShowInflectionSystem_$cshowsPrec
                  InflectionData.$fShowInflectionSystem_$cshow
                  InflectionData.$fShowInflectionSystem_$cshowList -}
e87dedc6ee0613212a8838da9054e9ca
  $fShowInflectionSystem1 ::
    InflectionData.InflectionSystem -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: InflectionData.InflectionSystem
                   w1 :: GHC.Base.String ->
                 case w of ww { InflectionData.InflectionSystem ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ->
                 InflectionData.$w$cshowsPrec14
                   0
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww17
                   w1 }) -}
e87dedc6ee0613212a8838da9054e9ca
  $fShowInflectionSystem_$cshow ::
    InflectionData.InflectionSystem -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.InflectionSystem ->
                 InflectionData.$fShowInflectionSystem_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
e87dedc6ee0613212a8838da9054e9ca
  $fShowInflectionSystem_$cshowList ::
    [InflectionData.InflectionSystem] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.InflectionSystem
                   InflectionData.$fShowInflectionSystem1) -}
e87dedc6ee0613212a8838da9054e9ca
  $fShowInflectionSystem_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.InflectionSystem -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <S,1*U(U)><S,1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int
                   w1 :: InflectionData.InflectionSystem
                   w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { InflectionData.InflectionSystem ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ->
                 InflectionData.$w$cshowsPrec14
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww17
                   ww18
                   ww19
                   w2 } }) -}
b0a24ad20939906e8d87ed3073f32603
  $fShowLexCat :: GHC.Show.Show InflectionData.LexCat
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.LexCat
                  InflectionData.$fShowLexCat_$cshowsPrec
                  InflectionData.$fShowLexCat_$cshow
                  InflectionData.$fShowLexCat_$cshowList -}
b0a24ad20939906e8d87ed3073f32603
  $fShowLexCat_$cshow :: InflectionData.LexCat -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.LexCat ->
                 InflectionData.$fShowLexCat_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
b0a24ad20939906e8d87ed3073f32603
  $fShowLexCat_$cshowList ::
    [InflectionData.LexCat] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.LexCat
                   InflectionData.$w$cshowsPrec15) -}
b0a24ad20939906e8d87ed3073f32603
  $fShowLexCat_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.LexCat -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: InflectionData.LexCat
                   w2 :: GHC.Base.String ->
                 InflectionData.$w$cshowsPrec15 w1 w2) -}
f539d8313c5a8ab2854680bd81c6cecb
  $fShowManifest ::
    GHC.Show.Show a => GHC.Show.Show (InflectionData.Manifest a)
  DFunId[0]
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a40 $dShow :: GHC.Show.Show a40.
                  @ (InflectionData.Manifest a40)
                  (InflectionData.$fShowManifest_$cshowsPrec @ a40 $dShow)
                  (InflectionData.$fShowManifest_$cshow @ a40 $dShow)
                  (InflectionData.$fShowManifest_$cshowList @ a40 $dShow) -}
c62b4d3065aeaf870089d8df087177f1
  $fShowManifest1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Manifest "#) -}
ece890aaf4fb542acf0583a602f0d5e5
  $fShowManifest2 ::
    (InflectionData.LexCat, InflectionData.ManifestType, GHC.Types.Int)
    -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ w4 :: (InflectionData.LexCat,
                          InflectionData.ManifestType,
                          GHC.Types.Int)
                   w5 :: GHC.Base.String[OneShot] ->
                 case w4 of ww { (,,) ww1 ww2 ww3 ->
                 GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows9
                   (InflectionData.$w$cshowsPrec15
                      ww1
                      (GHC.Types.:
                         @ GHC.Types.Char
                         GHC.Show.showList__1
                         (GHC.Show.$fShow(,,)_$sgo
                            (\ w :: GHC.Base.String -> InflectionData.$w$cshowsPrec16 ww2 w)
                            (GHC.Types.:
                               @ GHC.Show.ShowS
                               (\ w2 :: GHC.Base.String ->
                                case ww3 of ww4 { GHC.Types.I# ww5 ->
                                case GHC.Show.$wshowSignedInt 0 ww5 w2 of ww6 { (#,#) ww7 ww8 ->
                                GHC.Types.: @ GHC.Types.Char ww7 ww8 } })
                               (GHC.Types.[] @ GHC.Show.ShowS))
                            (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w5)))) }) -}
d85bde52a4877cb7fef333f2e07e15c3
  $fShowManifest3 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   InflectionData.$fReadManifest6) -}
0810cee461450f5d72e1192f67c0eb0c
  $fShowManifest4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   InflectionData.$fReadManifest6
                   (GHC.Types.[] @ GHC.Types.Char)) -}
e7fb9cb536022bc8f9fdd7f94d3c9e4a
  $fShowManifestSystem :: GHC.Show.Show InflectionData.ManifestSystem
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.ManifestSystem
                  InflectionData.$fShowManifestSystem_$cshowsPrec
                  InflectionData.$fShowManifestSystem_$cshow
                  InflectionData.$fShowManifestSystem_$cshowList -}
e7fb9cb536022bc8f9fdd7f94d3c9e4a
  $fShowManifestSystem1 ::
    InflectionData.ManifestSystem -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: InflectionData.ManifestSystem
                   w1 :: GHC.Base.String ->
                 case w of ww { InflectionData.ManifestSystem ww1 ww2 ww3 ->
                 InflectionData.$w$cshowsPrec21 0 ww1 ww2 ww3 w1 }) -}
e7fb9cb536022bc8f9fdd7f94d3c9e4a
  $fShowManifestSystem_$cshow ::
    InflectionData.ManifestSystem -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.ManifestSystem ->
                 InflectionData.$fShowManifestSystem_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
e7fb9cb536022bc8f9fdd7f94d3c9e4a
  $fShowManifestSystem_$cshowList ::
    [InflectionData.ManifestSystem] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.ManifestSystem
                   InflectionData.$fShowManifestSystem1) -}
e7fb9cb536022bc8f9fdd7f94d3c9e4a
  $fShowManifestSystem_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.ManifestSystem -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S,1*U(1*U,1*U,1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int
                   w1 :: InflectionData.ManifestSystem
                   w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { InflectionData.ManifestSystem ww3 ww4 ww5 ->
                 InflectionData.$w$cshowsPrec21 ww1 ww3 ww4 ww5 w2 } }) -}
21626b080cf2e0731be3b700433e03eb
  $fShowManifestType :: GHC.Show.Show InflectionData.ManifestType
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.ManifestType
                  InflectionData.$fShowManifestType_$cshowsPrec
                  InflectionData.$fShowManifestType_$cshow
                  InflectionData.$fShowManifestType_$cshowList -}
21626b080cf2e0731be3b700433e03eb
  $fShowManifestType_$cshow ::
    InflectionData.ManifestType -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.ManifestType ->
                 case x of wild {
                   InflectionData.Particle -> InflectionData.$fReadManifestType15
                   InflectionData.Prefix -> InflectionData.$fReadManifestType12
                   InflectionData.Suffix -> InflectionData.$fReadManifestType9 }) -}
21626b080cf2e0731be3b700433e03eb
  $fShowManifestType_$cshowList ::
    [InflectionData.ManifestType] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.ManifestType
                   InflectionData.$w$cshowsPrec16) -}
21626b080cf2e0731be3b700433e03eb
  $fShowManifestType_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.ManifestType -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: InflectionData.ManifestType
                   w2 :: GHC.Base.String ->
                 InflectionData.$w$cshowsPrec16 w1 w2) -}
f539d8313c5a8ab2854680bd81c6cecb
  $fShowManifest_$cshow ::
    GHC.Show.Show a => InflectionData.Manifest a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(1*C1(C1(C1(U))),A,A)><S,1*U>,
     Unfolding: (\ @ a40
                   $dShow :: GHC.Show.Show a40
                   x :: InflectionData.Manifest a40 ->
                 case x of wild {
                   InflectionData.NoManifest -> InflectionData.$fShowManifest4
                   InflectionData.Manifest b1 b2
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fShowManifest1
                        (GHC.Show.showList__
                           @ (InflectionData.LexCat,
                              InflectionData.ManifestType,
                              GHC.Types.Int)
                           InflectionData.$fShowManifest2
                           b1
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.showSpace1
                              (GHC.Show.showsPrec
                                 @ a40
                                 $dShow
                                 InflectionData.$fReadManifest4
                                 b2
                                 (GHC.Types.[] @ GHC.Types.Char)))) }) -}
f539d8313c5a8ab2854680bd81c6cecb
  $fShowManifest_$cshowList ::
    GHC.Show.Show a => [InflectionData.Manifest a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a40
                   $dShow :: GHC.Show.Show a40
                   eta :: [InflectionData.Manifest a40]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (InflectionData.Manifest a40)
                   (InflectionData.$fShowManifest_$cshowsPrec
                      @ a40
                      $dShow
                      InflectionData.$fShow(,,,,,,,,,,,,,,,,)7)
                   eta
                   eta1) -}
f539d8313c5a8ab2854680bd81c6cecb
  $fShowManifest_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int -> InflectionData.Manifest a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(U)><S,1*U>,
     Unfolding: (\ @ a40
                   $dShow :: GHC.Show.Show a40
                   ds :: GHC.Types.Int
                   ds1 :: InflectionData.Manifest a40 ->
                 case ds1 of wild {
                   InflectionData.NoManifest -> InflectionData.$fShowManifest3
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.showsPrec @ a40 $dShow InflectionData.$fReadManifest4 b2
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> \ x1 :: GHC.Base.String ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             InflectionData.$fShowManifest1
                             (GHC.Show.showList__
                                @ (InflectionData.LexCat,
                                   InflectionData.ManifestType,
                                   GHC.Types.Int)
                                InflectionData.$fShowManifest2
                                b1
                                (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x1)))
                        GHC.Types.True
                        -> \ x1 :: GHC.Base.String ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                InflectionData.$fShowManifest1
                                (GHC.Show.showList__
                                   @ (InflectionData.LexCat,
                                      InflectionData.ManifestType,
                                      GHC.Types.Int)
                                   InflectionData.$fShowManifest2
                                   b1
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.showSpace1
                                      (g (GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.shows8
                                            x1))))) } } }) -}
f539d8313c5a8ab2854680bd81c6cecb
  $fShowManifest_$s$cshowsPrec ::
    GHC.Types.Int
    -> InflectionData.Manifest [InflectionData.Animacy]
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Manifest [InflectionData.Animacy]
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest6 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                          {- Arity: 1, Strictness: <L,U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Show.showList__
                            @ (InflectionData.LexCat,
                               InflectionData.ManifestType,
                               GHC.Types.Int)
                            InflectionData.$fShowManifest2
                            b1
                            (GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showSpace1
                               (GHC.Show.showList__
                                  @ InflectionData.Animacy
                                  InflectionData.$w$cshowsPrec11
                                  b2
                                  x1))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             InflectionData.$fShowManifest1
                             (g eta)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                InflectionData.$fShowManifest1
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta))) } } }) -}
f539d8313c5a8ab2854680bd81c6cecb
  $fShowManifest_$s$cshowsPrec1 ::
    GHC.Types.Int
    -> InflectionData.Manifest [InflectionData.Aspect]
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Manifest [InflectionData.Aspect]
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest6 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                          {- Arity: 1, Strictness: <L,U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Show.showList__
                            @ (InflectionData.LexCat,
                               InflectionData.ManifestType,
                               GHC.Types.Int)
                            InflectionData.$fShowManifest2
                            b1
                            (GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showSpace1
                               (GHC.Show.showList__
                                  @ InflectionData.Aspect
                                  InflectionData.$w$cshowsPrec4
                                  b2
                                  x1))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             InflectionData.$fShowManifest1
                             (g eta)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                InflectionData.$fShowManifest1
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta))) } } }) -}
f539d8313c5a8ab2854680bd81c6cecb
  $fShowManifest_$s$cshowsPrec10 ::
    GHC.Types.Int
    -> InflectionData.Manifest [InflectionData.Polarity]
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Manifest [InflectionData.Polarity]
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest6 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShowManifest1
                            (GHC.Show.showList__
                               @ (InflectionData.LexCat,
                                  InflectionData.ManifestType,
                                  GHC.Types.Int)
                               InflectionData.$fShowManifest2
                               b1
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (GHC.Show.showList__
                                     @ InflectionData.Polarity
                                     InflectionData.$w$cshowsPrec17
                                     b2
                                     x1)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
f539d8313c5a8ab2854680bd81c6cecb
  $fShowManifest_$s$cshowsPrec11 ::
    GHC.Types.Int
    -> InflectionData.Manifest [InflectionData.Specificity]
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Manifest [InflectionData.Specificity]
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest6 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShowManifest1
                            (GHC.Show.showList__
                               @ (InflectionData.LexCat,
                                  InflectionData.ManifestType,
                                  GHC.Types.Int)
                               InflectionData.$fShowManifest2
                               b1
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (GHC.Show.showList__
                                     @ InflectionData.Specificity
                                     InflectionData.$w$cshowsPrec18
                                     b2
                                     x1)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
f539d8313c5a8ab2854680bd81c6cecb
  $fShowManifest_$s$cshowsPrec12 ::
    GHC.Types.Int
    -> InflectionData.Manifest [InflectionData.Tense] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Manifest [InflectionData.Tense]
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest6 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShowManifest1
                            (GHC.Show.showList__
                               @ (InflectionData.LexCat,
                                  InflectionData.ManifestType,
                                  GHC.Types.Int)
                               InflectionData.$fShowManifest2
                               b1
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (GHC.Show.showList__
                                     @ InflectionData.Tense
                                     InflectionData.$w$cshowsPrec5
                                     b2
                                     x1)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
f539d8313c5a8ab2854680bd81c6cecb
  $fShowManifest_$s$cshowsPrec13 ::
    GHC.Types.Int
    -> InflectionData.Manifest [InflectionData.Topic] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Manifest [InflectionData.Topic]
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest6 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShowManifest1
                            (GHC.Show.showList__
                               @ (InflectionData.LexCat,
                                  InflectionData.ManifestType,
                                  GHC.Types.Int)
                               InflectionData.$fShowManifest2
                               b1
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (GHC.Show.showList__
                                     @ InflectionData.Topic
                                     InflectionData.$w$cshowsPrec19
                                     b2
                                     x1)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
f539d8313c5a8ab2854680bd81c6cecb
  $fShowManifest_$s$cshowsPrec14 ::
    GHC.Types.Int
    -> InflectionData.Manifest [InflectionData.Transitivity]
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Manifest [InflectionData.Transitivity]
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest6 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShowManifest1
                            (GHC.Show.showList__
                               @ (InflectionData.LexCat,
                                  InflectionData.ManifestType,
                                  GHC.Types.Int)
                               InflectionData.$fShowManifest2
                               b1
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (GHC.Show.showList__
                                     @ InflectionData.Transitivity
                                     InflectionData.$w$cshowsPrec
                                     b2
                                     x1)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
f539d8313c5a8ab2854680bd81c6cecb
  $fShowManifest_$s$cshowsPrec15 ::
    GHC.Types.Int
    -> InflectionData.Manifest [InflectionData.Voice] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Manifest [InflectionData.Voice]
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest6 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShowManifest1
                            (GHC.Show.showList__
                               @ (InflectionData.LexCat,
                                  InflectionData.ManifestType,
                                  GHC.Types.Int)
                               InflectionData.$fShowManifest2
                               b1
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (GHC.Show.showList__
                                     @ InflectionData.Voice
                                     InflectionData.$w$cshowsPrec2
                                     b2
                                     x1)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
f539d8313c5a8ab2854680bd81c6cecb
  $fShowManifest_$s$cshowsPrec16 ::
    GHC.Types.Int
    -> InflectionData.Manifest [InflectionData.Volition]
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Manifest [InflectionData.Volition]
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest6 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShowManifest1
                            (GHC.Show.showList__
                               @ (InflectionData.LexCat,
                                  InflectionData.ManifestType,
                                  GHC.Types.Int)
                               InflectionData.$fShowManifest2
                               b1
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (GHC.Show.showList__
                                     @ InflectionData.Volition
                                     InflectionData.$w$cshowsPrec20
                                     b2
                                     x1)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
f539d8313c5a8ab2854680bd81c6cecb
  $fShowManifest_$s$cshowsPrec2 ::
    GHC.Types.Int
    -> InflectionData.Manifest [InflectionData.Case] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Manifest [InflectionData.Case]
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest6 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                          {- Arity: 1, Strictness: <L,U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Show.showList__
                            @ (InflectionData.LexCat,
                               InflectionData.ManifestType,
                               GHC.Types.Int)
                            InflectionData.$fShowManifest2
                            b1
                            (GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showSpace1
                               (GHC.Show.showList__
                                  @ InflectionData.Case
                                  InflectionData.$w$cshowsPrec10
                                  b2
                                  x1))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             InflectionData.$fShowManifest1
                             (g eta)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                InflectionData.$fShowManifest1
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta))) } } }) -}
f539d8313c5a8ab2854680bd81c6cecb
  $fShowManifest_$s$cshowsPrec3 ::
    GHC.Types.Int
    -> InflectionData.Manifest [InflectionData.Definiteness]
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Manifest [InflectionData.Definiteness]
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest6 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                          {- Arity: 1, Strictness: <L,U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Show.showList__
                            @ (InflectionData.LexCat,
                               InflectionData.ManifestType,
                               GHC.Types.Int)
                            InflectionData.$fShowManifest2
                            b1
                            (GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showSpace1
                               (GHC.Show.showList__
                                  @ InflectionData.Definiteness
                                  InflectionData.$w$cshowsPrec8
                                  b2
                                  x1))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             InflectionData.$fShowManifest1
                             (g eta)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                InflectionData.$fShowManifest1
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta))) } } }) -}
f539d8313c5a8ab2854680bd81c6cecb
  $fShowManifest_$s$cshowsPrec4 ::
    GHC.Types.Int
    -> InflectionData.Manifest [InflectionData.Evidentiality]
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Manifest [InflectionData.Evidentiality]
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest6 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                          {- Arity: 1, Strictness: <L,U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Show.showList__
                            @ (InflectionData.LexCat,
                               InflectionData.ManifestType,
                               GHC.Types.Int)
                            InflectionData.$fShowManifest2
                            b1
                            (GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showSpace1
                               (GHC.Show.showList__
                                  @ InflectionData.Evidentiality
                                  InflectionData.$w$cshowsPrec1
                                  b2
                                  x1))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             InflectionData.$fShowManifest1
                             (g eta)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                InflectionData.$fShowManifest1
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta))) } } }) -}
f539d8313c5a8ab2854680bd81c6cecb
  $fShowManifest_$s$cshowsPrec5 ::
    GHC.Types.Int
    -> InflectionData.Manifest [InflectionData.Gender]
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Manifest [InflectionData.Gender]
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest6 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                          {- Arity: 1, Strictness: <L,U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Show.showList__
                            @ (InflectionData.LexCat,
                               InflectionData.ManifestType,
                               GHC.Types.Int)
                            InflectionData.$fShowManifest2
                            b1
                            (GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showSpace1
                               (GHC.Show.showList__
                                  @ InflectionData.Gender
                                  InflectionData.$w$cshowsPrec12
                                  b2
                                  x1))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             InflectionData.$fShowManifest1
                             (g eta)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                InflectionData.$fShowManifest1
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta))) } } }) -}
f539d8313c5a8ab2854680bd81c6cecb
  $fShowManifest_$s$cshowsPrec6 ::
    GHC.Types.Int
    -> InflectionData.Manifest [InflectionData.Honorific]
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Manifest [InflectionData.Honorific]
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest6 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                          {- Arity: 1, Strictness: <L,U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Show.showList__
                            @ (InflectionData.LexCat,
                               InflectionData.ManifestType,
                               GHC.Types.Int)
                            InflectionData.$fShowManifest2
                            b1
                            (GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showSpace1
                               (GHC.Show.showList__
                                  @ InflectionData.Honorific
                                  InflectionData.$w$cshowsPrec6
                                  b2
                                  x1))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             InflectionData.$fShowManifest1
                             (g eta)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                InflectionData.$fShowManifest1
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta))) } } }) -}
f539d8313c5a8ab2854680bd81c6cecb
  $fShowManifest_$s$cshowsPrec7 ::
    GHC.Types.Int
    -> InflectionData.Manifest [InflectionData.Mood] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Manifest [InflectionData.Mood]
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest6 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShowManifest1
                            (GHC.Show.showList__
                               @ (InflectionData.LexCat,
                                  InflectionData.ManifestType,
                                  GHC.Types.Int)
                               InflectionData.$fShowManifest2
                               b1
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (GHC.Show.showList__
                                     @ InflectionData.Mood
                                     InflectionData.$w$cshowsPrec3
                                     b2
                                     x1)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
f539d8313c5a8ab2854680bd81c6cecb
  $fShowManifest_$s$cshowsPrec8 ::
    GHC.Types.Int
    -> InflectionData.Manifest [InflectionData.Number]
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Manifest [InflectionData.Number]
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest6 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShowManifest1
                            (GHC.Show.showList__
                               @ (InflectionData.LexCat,
                                  InflectionData.ManifestType,
                                  GHC.Types.Int)
                               InflectionData.$fShowManifest2
                               b1
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (GHC.Show.showList__
                                     @ InflectionData.Number
                                     InflectionData.$w$cshowsPrec9
                                     b2
                                     x1)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
f539d8313c5a8ab2854680bd81c6cecb
  $fShowManifest_$s$cshowsPrec9 ::
    GHC.Types.Int
    -> InflectionData.Manifest [InflectionData.Person]
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Manifest [InflectionData.Person]
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest6 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShowManifest1
                            (GHC.Show.showList__
                               @ (InflectionData.LexCat,
                                  InflectionData.ManifestType,
                                  GHC.Types.Int)
                               InflectionData.$fShowManifest2
                               b1
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (GHC.Show.showList__
                                     @ InflectionData.Person
                                     InflectionData.$w$cshowsPrec7
                                     b2
                                     x1)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
170a49091e965c69ca2b81c9942aa234
  $fShowMood :: GHC.Show.Show InflectionData.Mood
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Mood
                  InflectionData.$fShowMood_$cshowsPrec
                  InflectionData.$fShowMood_$cshow
                  InflectionData.$fShowMood_$cshowList -}
170a49091e965c69ca2b81c9942aa234
  $fShowMood_$cshow :: InflectionData.Mood -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.Mood ->
                 InflectionData.$fShowMood_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
170a49091e965c69ca2b81c9942aa234
  $fShowMood_$cshowList :: [InflectionData.Mood] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Mood
                   InflectionData.$w$cshowsPrec3) -}
170a49091e965c69ca2b81c9942aa234
  $fShowMood_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Mood -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: InflectionData.Mood
                   w2 :: GHC.Base.String ->
                 InflectionData.$w$cshowsPrec3 w1 w2) -}
c1e8fbfb7380effdacb7c7c192e40bf5
  $fShowNumber :: GHC.Show.Show InflectionData.Number
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Number
                  InflectionData.$fShowNumber_$cshowsPrec
                  InflectionData.$fShowNumber_$cshow
                  InflectionData.$fShowNumber_$cshowList -}
c1e8fbfb7380effdacb7c7c192e40bf5
  $fShowNumber_$cshow :: InflectionData.Number -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.Number ->
                 InflectionData.$fShowNumber_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
c1e8fbfb7380effdacb7c7c192e40bf5
  $fShowNumber_$cshowList ::
    [InflectionData.Number] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Number
                   InflectionData.$w$cshowsPrec9) -}
c1e8fbfb7380effdacb7c7c192e40bf5
  $fShowNumber_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Number -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: InflectionData.Number
                   w2 :: GHC.Base.String ->
                 InflectionData.$w$cshowsPrec9 w1 w2) -}
02346c3aafaeac9909a5db7a01e8ca09
  $fShowPerson :: GHC.Show.Show InflectionData.Person
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Person
                  InflectionData.$fShowPerson_$cshowsPrec
                  InflectionData.$fShowPerson_$cshow
                  InflectionData.$fShowPerson_$cshowList -}
02346c3aafaeac9909a5db7a01e8ca09
  $fShowPerson_$cshow :: InflectionData.Person -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.Person ->
                 InflectionData.$fShowPerson_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
02346c3aafaeac9909a5db7a01e8ca09
  $fShowPerson_$cshowList ::
    [InflectionData.Person] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Person
                   InflectionData.$w$cshowsPrec7) -}
02346c3aafaeac9909a5db7a01e8ca09
  $fShowPerson_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Person -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: InflectionData.Person
                   w2 :: GHC.Base.String ->
                 InflectionData.$w$cshowsPrec7 w1 w2) -}
ad1fe4829d26ee371daeb2b0168138e4
  $fShowPolarity :: GHC.Show.Show InflectionData.Polarity
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Polarity
                  InflectionData.$fShowPolarity_$cshowsPrec
                  InflectionData.$fShowPolarity_$cshow
                  InflectionData.$fShowPolarity_$cshowList -}
ad1fe4829d26ee371daeb2b0168138e4
  $fShowPolarity_$cshow :: InflectionData.Polarity -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.Polarity ->
                 case x of wild {
                   InflectionData.UPOL -> InflectionData.$fReadManifest148
                   InflectionData.AFF -> InflectionData.$fReadManifest145
                   InflectionData.NEG -> InflectionData.$fReadManifest142 }) -}
ad1fe4829d26ee371daeb2b0168138e4
  $fShowPolarity_$cshowList ::
    [InflectionData.Polarity] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Polarity
                   InflectionData.$w$cshowsPrec17) -}
ad1fe4829d26ee371daeb2b0168138e4
  $fShowPolarity_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Polarity -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: InflectionData.Polarity
                   w2 :: GHC.Base.String ->
                 InflectionData.$w$cshowsPrec17 w1 w2) -}
a4a6522da9f32c4a22fdcdb048233e77
  $fShowSpecificity :: GHC.Show.Show InflectionData.Specificity
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Specificity
                  InflectionData.$fShowSpecificity_$cshowsPrec
                  InflectionData.$fShowSpecificity_$cshow
                  InflectionData.$fShowSpecificity_$cshowList -}
a4a6522da9f32c4a22fdcdb048233e77
  $fShowSpecificity_$cshow ::
    InflectionData.Specificity -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.Specificity ->
                 case x of wild {
                   InflectionData.USPE -> InflectionData.$fReadManifest164
                   InflectionData.SPEC -> InflectionData.$fReadManifest161
                   InflectionData.NSPEC -> InflectionData.$fReadManifest158 }) -}
a4a6522da9f32c4a22fdcdb048233e77
  $fShowSpecificity_$cshowList ::
    [InflectionData.Specificity] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Specificity
                   InflectionData.$w$cshowsPrec18) -}
a4a6522da9f32c4a22fdcdb048233e77
  $fShowSpecificity_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Specificity -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: InflectionData.Specificity
                   w2 :: GHC.Base.String ->
                 InflectionData.$w$cshowsPrec18 w1 w2) -}
b64289664290fdc9c5510c85a7afdd78
  $fShowTense :: GHC.Show.Show InflectionData.Tense
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Tense
                  InflectionData.$fShowTense_$cshowsPrec
                  InflectionData.$fShowTense_$cshow
                  InflectionData.$fShowTense_$cshowList -}
b64289664290fdc9c5510c85a7afdd78
  $fShowTense_$cshow :: InflectionData.Tense -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.Tense ->
                 InflectionData.$fShowTense_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
b64289664290fdc9c5510c85a7afdd78
  $fShowTense_$cshowList :: [InflectionData.Tense] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Tense
                   InflectionData.$w$cshowsPrec5) -}
b64289664290fdc9c5510c85a7afdd78
  $fShowTense_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Tense -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: InflectionData.Tense
                   w2 :: GHC.Base.String ->
                 InflectionData.$w$cshowsPrec5 w1 w2) -}
91b970df1d2f65a770d84bd1b0e168b5
  $fShowTopic :: GHC.Show.Show InflectionData.Topic
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Topic
                  InflectionData.$fShowTopic_$cshowsPrec
                  InflectionData.$fShowTopic_$cshow
                  InflectionData.$fShowTopic_$cshowList -}
91b970df1d2f65a770d84bd1b0e168b5
  $fShowTopic_$cshow :: InflectionData.Topic -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.Topic ->
                 case x of wild {
                   InflectionData.UTOP -> InflectionData.$fReadManifest260
                   InflectionData.TOP -> InflectionData.$fReadManifest257
                   InflectionData.NTOP -> InflectionData.$fReadManifest254 }) -}
91b970df1d2f65a770d84bd1b0e168b5
  $fShowTopic_$cshowList :: [InflectionData.Topic] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Topic
                   InflectionData.$w$cshowsPrec19) -}
91b970df1d2f65a770d84bd1b0e168b5
  $fShowTopic_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Topic -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: InflectionData.Topic
                   w2 :: GHC.Base.String ->
                 InflectionData.$w$cshowsPrec19 w1 w2) -}
c432d94948e8418512e7b069e8d02e7a
  $fShowTransitivity :: GHC.Show.Show InflectionData.Transitivity
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Transitivity
                  InflectionData.$fShowTransitivity_$cshowsPrec
                  InflectionData.$fShowTransitivity_$cshow
                  InflectionData.$fShowTransitivity_$cshowList -}
c432d94948e8418512e7b069e8d02e7a
  $fShowTransitivity_$cshow ::
    InflectionData.Transitivity -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.Transitivity ->
                 InflectionData.$fShowTransitivity_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
c432d94948e8418512e7b069e8d02e7a
  $fShowTransitivity_$cshowList ::
    [InflectionData.Transitivity] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Transitivity
                   InflectionData.$w$cshowsPrec) -}
c432d94948e8418512e7b069e8d02e7a
  $fShowTransitivity_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Transitivity -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: InflectionData.Transitivity
                   w2 :: GHC.Base.String ->
                 InflectionData.$w$cshowsPrec w1 w2) -}
1f59333afb1b3b92a8af1e5489e1e630
  $fShowVoice :: GHC.Show.Show InflectionData.Voice
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Voice
                  InflectionData.$fShowVoice_$cshowsPrec
                  InflectionData.$fShowVoice_$cshow
                  InflectionData.$fShowVoice_$cshowList -}
1f59333afb1b3b92a8af1e5489e1e630
  $fShowVoice_$cshow :: InflectionData.Voice -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.Voice ->
                 InflectionData.$fShowVoice_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
1f59333afb1b3b92a8af1e5489e1e630
  $fShowVoice_$cshowList :: [InflectionData.Voice] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Voice
                   InflectionData.$w$cshowsPrec2) -}
1f59333afb1b3b92a8af1e5489e1e630
  $fShowVoice_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Voice -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: InflectionData.Voice
                   w2 :: GHC.Base.String ->
                 InflectionData.$w$cshowsPrec2 w1 w2) -}
91017ab7ea71228801f74c069cd5baf7
  $fShowVolition :: GHC.Show.Show InflectionData.Volition
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Volition
                  InflectionData.$fShowVolition_$cshowsPrec
                  InflectionData.$fShowVolition_$cshow
                  InflectionData.$fShowVolition_$cshowList -}
91017ab7ea71228801f74c069cd5baf7
  $fShowVolition_$cshow :: InflectionData.Volition -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.Volition ->
                 case x of wild {
                   InflectionData.UVOL -> InflectionData.$fReadManifest320
                   InflectionData.VOL -> InflectionData.$fReadManifest317
                   InflectionData.NVOL -> InflectionData.$fReadManifest314 }) -}
91017ab7ea71228801f74c069cd5baf7
  $fShowVolition_$cshowList ::
    [InflectionData.Volition] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Volition
                   InflectionData.$w$cshowsPrec20) -}
91017ab7ea71228801f74c069cd5baf7
  $fShowVolition_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Volition -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: InflectionData.Volition
                   w2 :: GHC.Base.String ->
                 InflectionData.$w$cshowsPrec20 w1 w2) -}
d7ab917227c450cc0510a5c1d903e283
  $w$c== ::
    (GHC.Classes.Eq a, GHC.Classes.Eq b, GHC.Classes.Eq c,
     GHC.Classes.Eq d, GHC.Classes.Eq e, GHC.Classes.Eq f,
     GHC.Classes.Eq g, GHC.Classes.Eq h, GHC.Classes.Eq i,
     GHC.Classes.Eq j, GHC.Classes.Eq k, GHC.Classes.Eq l,
     GHC.Classes.Eq m, GHC.Classes.Eq n, GHC.Classes.Eq o,
     GHC.Classes.Eq p, GHC.Classes.Eq q) =>
    a
    -> b
    -> c
    -> d
    -> e
    -> f
    -> g
    -> h
    -> i
    -> j
    -> k
    -> l
    -> m
    -> n
    -> o
    -> p
    -> q
    -> a
    -> b
    -> c
    -> d
    -> e
    -> f
    -> g
    -> h
    -> i
    -> j
    -> k
    -> l
    -> m
    -> n
    -> o
    -> p
    -> q
    -> GHC.Types.Bool
  {- Arity: 51, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
46f34a143c2b38b99a516d0e789a60d7
  $w$c==1 ::
    InflectionData.Manifest [InflectionData.Gender]
    -> InflectionData.Manifest [InflectionData.Animacy]
    -> InflectionData.Manifest [InflectionData.Case]
    -> InflectionData.Manifest [InflectionData.Number]
    -> InflectionData.Manifest [InflectionData.Definiteness]
    -> InflectionData.Manifest [InflectionData.Specificity]
    -> InflectionData.Manifest [InflectionData.Topic]
    -> InflectionData.Manifest [InflectionData.Person]
    -> InflectionData.Manifest [InflectionData.Honorific]
    -> InflectionData.Manifest [InflectionData.Polarity]
    -> InflectionData.Manifest [InflectionData.Tense]
    -> InflectionData.Manifest [InflectionData.Aspect]
    -> InflectionData.Manifest [InflectionData.Mood]
    -> InflectionData.Manifest [InflectionData.Voice]
    -> InflectionData.Manifest [InflectionData.Evidentiality]
    -> InflectionData.Manifest [InflectionData.Transitivity]
    -> InflectionData.Manifest [InflectionData.Volition]
    -> InflectionData.Manifest [InflectionData.Gender]
    -> InflectionData.Manifest [InflectionData.Animacy]
    -> InflectionData.Manifest [InflectionData.Case]
    -> InflectionData.Manifest [InflectionData.Number]
    -> InflectionData.Manifest [InflectionData.Definiteness]
    -> InflectionData.Manifest [InflectionData.Specificity]
    -> InflectionData.Manifest [InflectionData.Topic]
    -> InflectionData.Manifest [InflectionData.Person]
    -> InflectionData.Manifest [InflectionData.Honorific]
    -> InflectionData.Manifest [InflectionData.Polarity]
    -> InflectionData.Manifest [InflectionData.Tense]
    -> InflectionData.Manifest [InflectionData.Aspect]
    -> InflectionData.Manifest [InflectionData.Mood]
    -> InflectionData.Manifest [InflectionData.Voice]
    -> InflectionData.Manifest [InflectionData.Evidentiality]
    -> InflectionData.Manifest [InflectionData.Transitivity]
    -> InflectionData.Manifest [InflectionData.Volition]
    -> GHC.Types.Bool
  {- Arity: 34, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0] -}
3f0d22b46299abba03320af7e5f5765d
  $w$c==2 ::
    InflectionData.LexCat
    -> InflectionData.ManifestType
    -> [(PhonemeData.Morpheme,
         (InflectionData.Express InflectionData.Gender,
          InflectionData.Express InflectionData.Animacy,
          InflectionData.Express InflectionData.Case,
          InflectionData.Express InflectionData.Number,
          InflectionData.Express InflectionData.Definiteness,
          InflectionData.Express InflectionData.Specificity,
          InflectionData.Express InflectionData.Topic,
          InflectionData.Express InflectionData.Person,
          InflectionData.Express InflectionData.Honorific,
          InflectionData.Express InflectionData.Polarity,
          InflectionData.Express InflectionData.Tense,
          InflectionData.Express InflectionData.Aspect,
          InflectionData.Express InflectionData.Mood,
          InflectionData.Express InflectionData.Voice,
          InflectionData.Express InflectionData.Evidentiality,
          InflectionData.Express InflectionData.Transitivity,
          InflectionData.Express InflectionData.Volition))]
    -> InflectionData.LexCat
    -> InflectionData.ManifestType
    -> [(PhonemeData.Morpheme,
         (InflectionData.Express InflectionData.Gender,
          InflectionData.Express InflectionData.Animacy,
          InflectionData.Express InflectionData.Case,
          InflectionData.Express InflectionData.Number,
          InflectionData.Express InflectionData.Definiteness,
          InflectionData.Express InflectionData.Specificity,
          InflectionData.Express InflectionData.Topic,
          InflectionData.Express InflectionData.Person,
          InflectionData.Express InflectionData.Honorific,
          InflectionData.Express InflectionData.Polarity,
          InflectionData.Express InflectionData.Tense,
          InflectionData.Express InflectionData.Aspect,
          InflectionData.Express InflectionData.Mood,
          InflectionData.Express InflectionData.Voice,
          InflectionData.Express InflectionData.Evidentiality,
          InflectionData.Express InflectionData.Transitivity,
          InflectionData.Express InflectionData.Volition))]
    -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ ww :: InflectionData.LexCat
                   ww1 :: InflectionData.ManifestType
                   ww2 :: [(PhonemeData.Morpheme,
                            (InflectionData.Express InflectionData.Gender,
                             InflectionData.Express InflectionData.Animacy,
                             InflectionData.Express InflectionData.Case,
                             InflectionData.Express InflectionData.Number,
                             InflectionData.Express InflectionData.Definiteness,
                             InflectionData.Express InflectionData.Specificity,
                             InflectionData.Express InflectionData.Topic,
                             InflectionData.Express InflectionData.Person,
                             InflectionData.Express InflectionData.Honorific,
                             InflectionData.Express InflectionData.Polarity,
                             InflectionData.Express InflectionData.Tense,
                             InflectionData.Express InflectionData.Aspect,
                             InflectionData.Express InflectionData.Mood,
                             InflectionData.Express InflectionData.Voice,
                             InflectionData.Express InflectionData.Evidentiality,
                             InflectionData.Express InflectionData.Transitivity,
                             InflectionData.Express InflectionData.Volition))]
                   ww3 :: InflectionData.LexCat
                   ww4 :: InflectionData.ManifestType
                   ww5 :: [(PhonemeData.Morpheme,
                            (InflectionData.Express InflectionData.Gender,
                             InflectionData.Express InflectionData.Animacy,
                             InflectionData.Express InflectionData.Case,
                             InflectionData.Express InflectionData.Number,
                             InflectionData.Express InflectionData.Definiteness,
                             InflectionData.Express InflectionData.Specificity,
                             InflectionData.Express InflectionData.Topic,
                             InflectionData.Express InflectionData.Person,
                             InflectionData.Express InflectionData.Honorific,
                             InflectionData.Express InflectionData.Polarity,
                             InflectionData.Express InflectionData.Tense,
                             InflectionData.Express InflectionData.Aspect,
                             InflectionData.Express InflectionData.Mood,
                             InflectionData.Express InflectionData.Voice,
                             InflectionData.Express InflectionData.Evidentiality,
                             InflectionData.Express InflectionData.Transitivity,
                             InflectionData.Express InflectionData.Volition))] ->
                 case ww of x1 { DEFAULT ->
                 case ww3 of x2 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==#
                           (GHC.Prim.dataToTag# @ InflectionData.LexCat x1)
                           (GHC.Prim.dataToTag# @ InflectionData.LexCat x2)) of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case ww1 of wild1 {
                        InflectionData.Particle
                        -> case ww4 of wild2 {
                             DEFAULT -> GHC.Types.False
                             InflectionData.Particle
                             -> GHC.Classes.$fEq[]_$c==
                                  @ (PhonemeData.Morpheme,
                                     (InflectionData.Express InflectionData.Gender,
                                      InflectionData.Express InflectionData.Animacy,
                                      InflectionData.Express InflectionData.Case,
                                      InflectionData.Express InflectionData.Number,
                                      InflectionData.Express InflectionData.Definiteness,
                                      InflectionData.Express InflectionData.Specificity,
                                      InflectionData.Express InflectionData.Topic,
                                      InflectionData.Express InflectionData.Person,
                                      InflectionData.Express InflectionData.Honorific,
                                      InflectionData.Express InflectionData.Polarity,
                                      InflectionData.Express InflectionData.Tense,
                                      InflectionData.Express InflectionData.Aspect,
                                      InflectionData.Express InflectionData.Mood,
                                      InflectionData.Express InflectionData.Voice,
                                      InflectionData.Express InflectionData.Evidentiality,
                                      InflectionData.Express InflectionData.Transitivity,
                                      InflectionData.Express InflectionData.Volition))
                                  InflectionData.$fEqManifestSystem_$s$fEq(,)
                                  ww2
                                  ww5 }
                        InflectionData.Prefix
                        -> case ww4 of wild2 {
                             DEFAULT -> GHC.Types.False
                             InflectionData.Prefix
                             -> GHC.Classes.$fEq[]_$c==
                                  @ (PhonemeData.Morpheme,
                                     (InflectionData.Express InflectionData.Gender,
                                      InflectionData.Express InflectionData.Animacy,
                                      InflectionData.Express InflectionData.Case,
                                      InflectionData.Express InflectionData.Number,
                                      InflectionData.Express InflectionData.Definiteness,
                                      InflectionData.Express InflectionData.Specificity,
                                      InflectionData.Express InflectionData.Topic,
                                      InflectionData.Express InflectionData.Person,
                                      InflectionData.Express InflectionData.Honorific,
                                      InflectionData.Express InflectionData.Polarity,
                                      InflectionData.Express InflectionData.Tense,
                                      InflectionData.Express InflectionData.Aspect,
                                      InflectionData.Express InflectionData.Mood,
                                      InflectionData.Express InflectionData.Voice,
                                      InflectionData.Express InflectionData.Evidentiality,
                                      InflectionData.Express InflectionData.Transitivity,
                                      InflectionData.Express InflectionData.Volition))
                                  InflectionData.$fEqManifestSystem_$s$fEq(,)
                                  ww2
                                  ww5 }
                        InflectionData.Suffix
                        -> case ww4 of wild2 {
                             DEFAULT -> GHC.Types.False
                             InflectionData.Suffix
                             -> GHC.Classes.$fEq[]_$c==
                                  @ (PhonemeData.Morpheme,
                                     (InflectionData.Express InflectionData.Gender,
                                      InflectionData.Express InflectionData.Animacy,
                                      InflectionData.Express InflectionData.Case,
                                      InflectionData.Express InflectionData.Number,
                                      InflectionData.Express InflectionData.Definiteness,
                                      InflectionData.Express InflectionData.Specificity,
                                      InflectionData.Express InflectionData.Topic,
                                      InflectionData.Express InflectionData.Person,
                                      InflectionData.Express InflectionData.Honorific,
                                      InflectionData.Express InflectionData.Polarity,
                                      InflectionData.Express InflectionData.Tense,
                                      InflectionData.Express InflectionData.Aspect,
                                      InflectionData.Express InflectionData.Mood,
                                      InflectionData.Express InflectionData.Voice,
                                      InflectionData.Express InflectionData.Evidentiality,
                                      InflectionData.Express InflectionData.Transitivity,
                                      InflectionData.Express InflectionData.Volition))
                                  InflectionData.$fEqManifestSystem_$s$fEq(,)
                                  ww2
                                  ww5 } } } } }) -}
c432d94948e8418512e7b069e8d02e7a
  $w$cshowsPrec ::
    InflectionData.Transitivity -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: InflectionData.Transitivity
                   w1 :: GHC.Base.String ->
                 case w of wild {
                   InflectionData.UTRA
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest284 w1
                   InflectionData.NTRANS
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest281 w1
                   InflectionData.TRANS
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest278 w1
                   InflectionData.MTRANS
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest275 w1
                   InflectionData.DITRANS
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadManifest272
                        w1 }) -}
8c39249ddb7859f10b018a2526e04a45
  $w$cshowsPrec1 ::
    InflectionData.Evidentiality -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: InflectionData.Evidentiality
                   w1 :: GHC.Base.String ->
                 case w of wild {
                   InflectionData.UEVI
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadEvidentiality43
                        w1
                   InflectionData.EXP
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadEvidentiality40
                        w1
                   InflectionData.VIS
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadEvidentiality37
                        w1
                   InflectionData.NVIS
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadEvidentiality34
                        w1
                   InflectionData.AUD
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadEvidentiality31
                        w1
                   InflectionData.INFER
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadEvidentiality28
                        w1
                   InflectionData.REP
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadEvidentiality25
                        w1
                   InflectionData.HSY
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadEvidentiality22
                        w1
                   InflectionData.QUO
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadEvidentiality19
                        w1
                   InflectionData.ASS
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadEvidentiality16
                        w1 }) -}
ed810d7ab6970052c9ee31d75d4a74f7
  $w$cshowsPrec10 ::
    InflectionData.Case -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0] -}
3fb8f806ac431419336914d62e0692e1
  $w$cshowsPrec11 ::
    InflectionData.Animacy -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: InflectionData.Animacy w1 :: GHC.Base.String ->
                 case w of wild {
                   InflectionData.UANI
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadAnimacy27 w1
                   InflectionData.AN
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadAnimacy24 w1
                   InflectionData.HUM
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadAnimacy21 w1
                   InflectionData.NHUM
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadAnimacy18 w1
                   InflectionData.ZO
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadAnimacy15 w1
                   InflectionData.INAN
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadAnimacy12
                        w1 }) -}
8b595aff125f95a2b35fe330b0ba7fad
  $w$cshowsPrec12 ::
    InflectionData.Gender -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: InflectionData.Gender w1 :: GHC.Base.String ->
                 case w of wild {
                   InflectionData.UGEN
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadGender23 w1
                   InflectionData.M
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadGender20 w1
                   InflectionData.F
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadGender17 w1
                   InflectionData.COM
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadGender14 w1
                   InflectionData.N
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadGender11
                        w1 }) -}
0038c03b17414e45d0f48a52d29bea01
  $w$cshowsPrec13 ::
    (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
     GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
     GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
     GHC.Show.Show l, GHC.Show.Show m, GHC.Show.Show n, GHC.Show.Show o,
     GHC.Show.Show p, GHC.Show.Show q) =>
    a
    -> b
    -> c
    -> d
    -> e
    -> f
    -> g
    -> h
    -> i
    -> j
    -> k
    -> l
    -> m
    -> n
    -> o
    -> p
    -> q
    -> GHC.Show.ShowS
  {- Arity: 34,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
feee109cf34ca918a5648edd5f6a5489
  $w$cshowsPrec14 ::
    GHC.Prim.Int#
    -> InflectionData.Manifest [InflectionData.Gender]
    -> InflectionData.Manifest [InflectionData.Animacy]
    -> InflectionData.Manifest [InflectionData.Case]
    -> InflectionData.Manifest [InflectionData.Number]
    -> InflectionData.Manifest [InflectionData.Definiteness]
    -> InflectionData.Manifest [InflectionData.Specificity]
    -> InflectionData.Manifest [InflectionData.Topic]
    -> InflectionData.Manifest [InflectionData.Person]
    -> InflectionData.Manifest [InflectionData.Honorific]
    -> InflectionData.Manifest [InflectionData.Polarity]
    -> InflectionData.Manifest [InflectionData.Tense]
    -> InflectionData.Manifest [InflectionData.Aspect]
    -> InflectionData.Manifest [InflectionData.Mood]
    -> InflectionData.Manifest [InflectionData.Voice]
    -> InflectionData.Manifest [InflectionData.Evidentiality]
    -> InflectionData.Manifest [InflectionData.Transitivity]
    -> InflectionData.Manifest [InflectionData.Volition]
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 19,
     Strictness: <L,U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,U>,
     Inline: [0] -}
b0a24ad20939906e8d87ed3073f32603
  $w$cshowsPrec15 ::
    InflectionData.LexCat -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: InflectionData.LexCat w1 :: GHC.Base.String ->
                 case w of wild {
                   InflectionData.Comp
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadLexCat47 w1
                   InflectionData.Infl
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadLexCat44 w1
                   InflectionData.Verb
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadLexCat41 w1
                   InflectionData.Det
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadLexCat38 w1
                   InflectionData.Noun
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadLexCat35 w1
                   InflectionData.Adpo
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadLexCat32 w1
                   InflectionData.Adj
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadLexCat29 w1
                   InflectionData.Adv
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadLexCat26 w1
                   InflectionData.Obj
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadLexCat23 w1
                   InflectionData.Subj
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadLexCat20 w1
                   InflectionData.Pron
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadLexCat17
                        w1 }) -}
21626b080cf2e0731be3b700433e03eb
  $w$cshowsPrec16 ::
    InflectionData.ManifestType -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: InflectionData.ManifestType
                   w1 :: GHC.Base.String ->
                 case w of wild {
                   InflectionData.Particle
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadManifestType15
                        w1
                   InflectionData.Prefix
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadManifestType12
                        w1
                   InflectionData.Suffix
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadManifestType9
                        w1 }) -}
ad1fe4829d26ee371daeb2b0168138e4
  $w$cshowsPrec17 ::
    InflectionData.Polarity -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: InflectionData.Polarity w1 :: GHC.Base.String ->
                 case w of wild {
                   InflectionData.UPOL
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest148 w1
                   InflectionData.AFF
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest145 w1
                   InflectionData.NEG
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadManifest142
                        w1 }) -}
a4a6522da9f32c4a22fdcdb048233e77
  $w$cshowsPrec18 ::
    InflectionData.Specificity -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: InflectionData.Specificity
                   w1 :: GHC.Base.String ->
                 case w of wild {
                   InflectionData.USPE
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest164 w1
                   InflectionData.SPEC
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest161 w1
                   InflectionData.NSPEC
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadManifest158
                        w1 }) -}
91b970df1d2f65a770d84bd1b0e168b5
  $w$cshowsPrec19 ::
    InflectionData.Topic -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: InflectionData.Topic w1 :: GHC.Base.String ->
                 case w of wild {
                   InflectionData.UTOP
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest260 w1
                   InflectionData.TOP
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest257 w1
                   InflectionData.NTOP
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadManifest254
                        w1 }) -}
1f59333afb1b3b92a8af1e5489e1e630
  $w$cshowsPrec2 ::
    InflectionData.Voice -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: InflectionData.Voice w1 :: GHC.Base.String ->
                 case w of wild {
                   InflectionData.UVOI
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest304 w1
                   InflectionData.ACTIVE
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest301 w1
                   InflectionData.MIDDLE
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest298 w1
                   InflectionData.PASSIVE
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadManifest295
                        w1 }) -}
91017ab7ea71228801f74c069cd5baf7
  $w$cshowsPrec20 ::
    InflectionData.Volition -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: InflectionData.Volition w1 :: GHC.Base.String ->
                 case w of wild {
                   InflectionData.UVOL
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest320 w1
                   InflectionData.VOL
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest317 w1
                   InflectionData.NVOL
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadManifest314
                        w1 }) -}
5c7b8fa2e4ce194c406677ee3076c23d
  $w$cshowsPrec21 ::
    GHC.Prim.Int#
    -> InflectionData.LexCat
    -> InflectionData.ManifestType
    -> [(PhonemeData.Morpheme,
         (InflectionData.Express InflectionData.Gender,
          InflectionData.Express InflectionData.Animacy,
          InflectionData.Express InflectionData.Case,
          InflectionData.Express InflectionData.Number,
          InflectionData.Express InflectionData.Definiteness,
          InflectionData.Express InflectionData.Specificity,
          InflectionData.Express InflectionData.Topic,
          InflectionData.Express InflectionData.Person,
          InflectionData.Express InflectionData.Honorific,
          InflectionData.Express InflectionData.Polarity,
          InflectionData.Express InflectionData.Tense,
          InflectionData.Express InflectionData.Aspect,
          InflectionData.Express InflectionData.Mood,
          InflectionData.Express InflectionData.Voice,
          InflectionData.Express InflectionData.Evidentiality,
          InflectionData.Express InflectionData.Transitivity,
          InflectionData.Express InflectionData.Volition))]
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 5, Strictness: <L,U><L,1*U><L,1*U><L,1*U><L,U>,
     Inline: [0] -}
170a49091e965c69ca2b81c9942aa234
  $w$cshowsPrec3 ::
    InflectionData.Mood -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: InflectionData.Mood w1 :: GHC.Base.String ->
                 case w of wild {
                   InflectionData.UMOO
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest68 w1
                   InflectionData.IND
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest65 w1
                   InflectionData.IRR
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest62 w1
                   InflectionData.DEO
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest59 w1
                   InflectionData.IMP
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest56 w1
                   InflectionData.JUS
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest53 w1
                   InflectionData.OPT
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest50 w1
                   InflectionData.EPIS
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest47 w1
                   InflectionData.SBJV
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest44 w1
                   InflectionData.POT
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest41 w1
                   InflectionData.COND
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadManifest38
                        w1 }) -}
3260581e2888098e95013c9746eb2927
  $w$cshowsPrec4 ::
    InflectionData.Aspect -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: InflectionData.Aspect w1 :: GHC.Base.String ->
                 case w of wild {
                   InflectionData.UASP
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadAspect35 w1
                   InflectionData.NNPROG
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadAspect32 w1
                   InflectionData.PFV
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadAspect29 w1
                   InflectionData.IPFV
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadAspect26 w1
                   InflectionData.HAB
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadAspect23 w1
                   InflectionData.CONT
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadAspect20 w1
                   InflectionData.NPROG
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadAspect17 w1
                   InflectionData.PROG
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadAspect14
                        w1 }) -}
b64289664290fdc9c5510c85a7afdd78
  $w$cshowsPrec5 ::
    InflectionData.Tense -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0] -}
38ff9a9c45f96d99123b457fda219bfb
  $w$cshowsPrec6 ::
    InflectionData.Honorific -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: InflectionData.Honorific
                   w1 :: GHC.Base.String ->
                 case w of wild {
                   InflectionData.UHON
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadHonorific19 w1
                   InflectionData.FAM
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadHonorific16 w1
                   InflectionData.NEU
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadHonorific13 w1
                   InflectionData.FORM
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadHonorific10
                        w1 }) -}
02346c3aafaeac9909a5db7a01e8ca09
  $w$cshowsPrec7 ::
    InflectionData.Person -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: InflectionData.Person w1 :: GHC.Base.String ->
                 case w of wild {
                   InflectionData.UPER
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest132 w1
                   InflectionData.FIRST
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest129 w1
                   InflectionData.FSTINCL
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest126 w1
                   InflectionData.FSTEXCL
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest123 w1
                   InflectionData.SECOND
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest120 w1
                   InflectionData.THIRD
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest117 w1
                   InflectionData.THRDPROX
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest114 w1
                   InflectionData.THRDOBV
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadManifest111
                        w1 }) -}
f57cbd9dbed35919833216936d0e066e
  $w$cshowsPrec8 ::
    InflectionData.Definiteness -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: InflectionData.Definiteness
                   w1 :: GHC.Base.String ->
                 case w of wild {
                   InflectionData.UDEF
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadDefiniteness15
                        w1
                   InflectionData.DEF
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadDefiniteness12
                        w1
                   InflectionData.INDF
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadDefiniteness9
                        w1 }) -}
c1e8fbfb7380effdacb7c7c192e40bf5
  $w$cshowsPrec9 ::
    InflectionData.Number -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: InflectionData.Number w1 :: GHC.Base.String ->
                 case w of wild {
                   InflectionData.UNUM
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest96 w1
                   InflectionData.SG
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest93 w1
                   InflectionData.DU
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest90 w1
                   InflectionData.TRI
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest87 w1
                   InflectionData.PA
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest84 w1
                   InflectionData.PL
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadManifest81
                        w1 }) -}
b0a24ad20939906e8d87ed3073f32603
  $w$ctoEnum :: GHC.Prim.Int# -> InflectionData.LexCat
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 0) of wild {
                   GHC.Types.False -> InflectionData.$fEnumLexCat1 ww
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ww 10) of wild1 {
                        GHC.Types.False -> InflectionData.$fEnumLexCat1 ww
                        GHC.Types.True
                        -> GHC.Prim.tagToEnum# @ InflectionData.LexCat ww } }) -}
c0dc6f26101f500bea268671ce2dc887
  $w$s$c== ::
    InflectionData.Express InflectionData.Gender
    -> InflectionData.Express InflectionData.Animacy
    -> InflectionData.Express InflectionData.Case
    -> InflectionData.Express InflectionData.Number
    -> InflectionData.Express InflectionData.Definiteness
    -> InflectionData.Express InflectionData.Specificity
    -> InflectionData.Express InflectionData.Topic
    -> InflectionData.Express InflectionData.Person
    -> InflectionData.Express InflectionData.Honorific
    -> InflectionData.Express InflectionData.Polarity
    -> InflectionData.Express InflectionData.Tense
    -> InflectionData.Express InflectionData.Aspect
    -> InflectionData.Express InflectionData.Mood
    -> InflectionData.Express InflectionData.Voice
    -> InflectionData.Express InflectionData.Evidentiality
    -> InflectionData.Express InflectionData.Transitivity
    -> InflectionData.Express InflectionData.Volition
    -> InflectionData.Express InflectionData.Gender
    -> InflectionData.Express InflectionData.Animacy
    -> InflectionData.Express InflectionData.Case
    -> InflectionData.Express InflectionData.Number
    -> InflectionData.Express InflectionData.Definiteness
    -> InflectionData.Express InflectionData.Specificity
    -> InflectionData.Express InflectionData.Topic
    -> InflectionData.Express InflectionData.Person
    -> InflectionData.Express InflectionData.Honorific
    -> InflectionData.Express InflectionData.Polarity
    -> InflectionData.Express InflectionData.Tense
    -> InflectionData.Express InflectionData.Aspect
    -> InflectionData.Express InflectionData.Mood
    -> InflectionData.Express InflectionData.Voice
    -> InflectionData.Express InflectionData.Evidentiality
    -> InflectionData.Express InflectionData.Transitivity
    -> InflectionData.Express InflectionData.Volition
    -> GHC.Types.Bool
  {- Arity: 34, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0] -}
b0c9bd6a4a24912b74ad7f5e7dba2442
  $w$s$cshowsPrec ::
    InflectionData.Express InflectionData.Gender
    -> InflectionData.Express InflectionData.Animacy
    -> InflectionData.Express InflectionData.Case
    -> InflectionData.Express InflectionData.Number
    -> InflectionData.Express InflectionData.Definiteness
    -> InflectionData.Express InflectionData.Specificity
    -> InflectionData.Express InflectionData.Topic
    -> InflectionData.Express InflectionData.Person
    -> InflectionData.Express InflectionData.Honorific
    -> InflectionData.Express InflectionData.Polarity
    -> InflectionData.Express InflectionData.Tense
    -> InflectionData.Express InflectionData.Aspect
    -> InflectionData.Express InflectionData.Mood
    -> InflectionData.Express InflectionData.Voice
    -> InflectionData.Express InflectionData.Evidentiality
    -> InflectionData.Express InflectionData.Transitivity
    -> InflectionData.Express InflectionData.Volition
    -> GHC.Show.ShowS
  {- Arity: 17,
     Strictness: <L,U><L,1*U><L,1*U><L,U><L,1*U><L,U><L,U><L,U><L,U><L,U><L,U><L,1*U><L,U><L,U><L,1*U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ ww :: InflectionData.Express InflectionData.Gender
                   ww1 :: InflectionData.Express InflectionData.Animacy
                   ww2 :: InflectionData.Express InflectionData.Case
                   ww3 :: InflectionData.Express InflectionData.Number
                   ww4 :: InflectionData.Express InflectionData.Definiteness
                   ww5 :: InflectionData.Express InflectionData.Specificity
                   ww6 :: InflectionData.Express InflectionData.Topic
                   ww7 :: InflectionData.Express InflectionData.Person
                   ww8 :: InflectionData.Express InflectionData.Honorific
                   ww9 :: InflectionData.Express InflectionData.Polarity
                   ww10 :: InflectionData.Express InflectionData.Tense
                   ww11 :: InflectionData.Express InflectionData.Aspect
                   ww12 :: InflectionData.Express InflectionData.Mood
                   ww13 :: InflectionData.Express InflectionData.Voice
                   ww14 :: InflectionData.Express InflectionData.Evidentiality
                   ww15 :: InflectionData.Express InflectionData.Transitivity
                   ww16 :: InflectionData.Express InflectionData.Volition ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = InflectionData.$fShow(,,,,,,,,,,,,,,,,)_go
                       (GHC.Types.:
                          @ GHC.Show.ShowS
                          (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec12
                             GHC.Show.shows18
                             ww)
                          (GHC.Types.:
                             @ GHC.Show.ShowS
                             (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec
                                @ InflectionData.Animacy
                                InflectionData.$fShowAnimacy
                                GHC.Show.shows18
                                ww1)
                             (GHC.Types.:
                                @ GHC.Show.ShowS
                                (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec
                                   @ InflectionData.Case
                                   InflectionData.$fShowCase
                                   GHC.Show.shows18
                                   ww2)
                                (GHC.Types.:
                                   @ GHC.Show.ShowS
                                   (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec11
                                      GHC.Show.shows18
                                      ww3)
                                   (GHC.Types.:
                                      @ GHC.Show.ShowS
                                      (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec
                                         @ InflectionData.Definiteness
                                         InflectionData.$fShowDefiniteness
                                         GHC.Show.shows18
                                         ww4)
                                      (GHC.Types.:
                                         @ GHC.Show.ShowS
                                         (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec10
                                            GHC.Show.shows18
                                            ww5)
                                         (GHC.Types.:
                                            @ GHC.Show.ShowS
                                            (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec9
                                               GHC.Show.shows18
                                               ww6)
                                            (GHC.Types.:
                                               @ GHC.Show.ShowS
                                               (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec8
                                                  GHC.Show.shows18
                                                  ww7)
                                               (GHC.Types.:
                                                  @ GHC.Show.ShowS
                                                  (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec7
                                                     GHC.Show.shows18
                                                     ww8)
                                                  (GHC.Types.:
                                                     @ GHC.Show.ShowS
                                                     (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec6
                                                        GHC.Show.shows18
                                                        ww9)
                                                     (GHC.Types.:
                                                        @ GHC.Show.ShowS
                                                        (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec5
                                                           GHC.Show.shows18
                                                           ww10)
                                                        (GHC.Types.:
                                                           @ GHC.Show.ShowS
                                                           (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec
                                                              @ InflectionData.Aspect
                                                              InflectionData.$fShowAspect
                                                              GHC.Show.shows18
                                                              ww11)
                                                           (GHC.Types.:
                                                              @ GHC.Show.ShowS
                                                              (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec4
                                                                 GHC.Show.shows18
                                                                 ww12)
                                                              (GHC.Types.:
                                                                 @ GHC.Show.ShowS
                                                                 (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec3
                                                                    GHC.Show.shows18
                                                                    ww13)
                                                                 (GHC.Types.:
                                                                    @ GHC.Show.ShowS
                                                                    (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec
                                                                       @ InflectionData.Evidentiality
                                                                       InflectionData.$fShowEvidentiality
                                                                       GHC.Show.shows18
                                                                       ww14)
                                                                    (GHC.Types.:
                                                                       @ GHC.Show.ShowS
                                                                       (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec2
                                                                          GHC.Show.shows18
                                                                          ww15)
                                                                       (GHC.Types.:
                                                                          @ GHC.Show.ShowS
                                                                          (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec1
                                                                             GHC.Show.shows18
                                                                             ww16)
                                                                          (GHC.Types.[]
                                                                             @ GHC.Show.ShowS))))))))))))))))))
                 } in
                 \ x :: GHC.Base.String ->
                 GHC.Types.:
                   @ GHC.Types.Char
                   InflectionData.$fShow(,,,,,,,,,,,,,,,,)2
                   (f (GHC.Types.:
                         @ GHC.Types.Char
                         InflectionData.$fShow(,,,,,,,,,,,,,,,,)1
                         x))) -}
e87dedc6ee0613212a8838da9054e9ca
  $wa ::
    GHC.Prim.Int#
    -> forall b.
       (InflectionData.InflectionSystem
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0] -}
3fb8f806ac431419336914d62e0692e1
  data Animacy = UANI | AN | HUM | NHUM | ZO | INAN
    Promotable
3260581e2888098e95013c9746eb2927
  data Aspect
    = UASP | NNPROG | PFV | IPFV | HAB | CONT | NPROG | PROG
    Promotable
ed810d7ab6970052c9ee31d75d4a74f7
  data Case
    = UCAS
    | INTR
    | ACC
    | ERG
    | PEG
    | INDIR
    | SEC
    | NOM
    | ABS
    | MTR
    | DIR
    | PRIM
    | ERG2
    | NOM2
    | ABS2
    | ABS3
    | DTR
    | OBJ
    | DRT1
    | TR
    | DRT2
    | OBL1
    | OBL2
    | OBL3
    | OBL4
    | OBL5
    | OBL6
    | ADP
    | PREP
    | POST
    | LAT
    | LOC
    | ABL
    | COMP
    | EQU
    | IDEN
    | ABE
    | DAT
    | INS
    | COMIT
    | INSCOMIT
    | ORN
    | BEN
    | CAUS
    | DISTR
    | GEN
    | POSS
    | PART
    | VOC
    Promotable
f57cbd9dbed35919833216936d0e066e
  data Definiteness = UDEF | DEF | INDF
    Promotable
8c39249ddb7859f10b018a2526e04a45
  data Evidentiality
    = UEVI | EXP | VIS | NVIS | AUD | INFER | REP | HSY | QUO | ASS
    Promotable
ce522c1d99b503cc50c6a04abbeb7ec2
  data Express a = NoExpress | Express {getExp :: a}
    Promotable
8b595aff125f95a2b35fe330b0ba7fad
  data Gender = UGEN | M | F | COM | N
    Promotable
38ff9a9c45f96d99123b457fda219bfb
  data Honorific = UHON | FAM | NEU | FORM
    Promotable
e87dedc6ee0613212a8838da9054e9ca
  data InflectionSystem
    = InflectionSystem {genSys :: InflectionData.Manifest
                                    [InflectionData.Gender],
                        aniSys :: InflectionData.Manifest [InflectionData.Animacy],
                        casSys :: InflectionData.Manifest [InflectionData.Case],
                        numSys :: InflectionData.Manifest [InflectionData.Number],
                        defSys :: InflectionData.Manifest [InflectionData.Definiteness],
                        speSys :: InflectionData.Manifest [InflectionData.Specificity],
                        topSys :: InflectionData.Manifest [InflectionData.Topic],
                        perSys :: InflectionData.Manifest [InflectionData.Person],
                        honSys :: InflectionData.Manifest [InflectionData.Honorific],
                        polSys :: InflectionData.Manifest [InflectionData.Polarity],
                        tenSys :: InflectionData.Manifest [InflectionData.Tense],
                        aspSys :: InflectionData.Manifest [InflectionData.Aspect],
                        mooSys :: InflectionData.Manifest [InflectionData.Mood],
                        voiSys :: InflectionData.Manifest [InflectionData.Voice],
                        eviSys :: InflectionData.Manifest [InflectionData.Evidentiality],
                        traSys :: InflectionData.Manifest [InflectionData.Transitivity],
                        volSys :: InflectionData.Manifest [InflectionData.Volition]}
b0a24ad20939906e8d87ed3073f32603
  data LexCat
    = Comp
    | Infl
    | Verb
    | Det
    | Noun
    | Adpo
    | Adj
    | Adv
    | Obj
    | Subj
    | Pron
    Promotable
f539d8313c5a8ab2854680bd81c6cecb
  data Manifest a
    = NoManifest
    | Manifest [(InflectionData.LexCat,
                 InflectionData.ManifestType,
                 GHC.Types.Int)]
               a
e7fb9cb536022bc8f9fdd7f94d3c9e4a
  data ManifestSystem
    = ManifestSystem {manSysLC :: InflectionData.LexCat,
                      manSysType :: InflectionData.ManifestType,
                      manSysCombos :: [(PhonemeData.Morpheme,
                                        (InflectionData.Express InflectionData.Gender,
                                         InflectionData.Express InflectionData.Animacy,
                                         InflectionData.Express InflectionData.Case,
                                         InflectionData.Express InflectionData.Number,
                                         InflectionData.Express InflectionData.Definiteness,
                                         InflectionData.Express InflectionData.Specificity,
                                         InflectionData.Express InflectionData.Topic,
                                         InflectionData.Express InflectionData.Person,
                                         InflectionData.Express InflectionData.Honorific,
                                         InflectionData.Express InflectionData.Polarity,
                                         InflectionData.Express InflectionData.Tense,
                                         InflectionData.Express InflectionData.Aspect,
                                         InflectionData.Express InflectionData.Mood,
                                         InflectionData.Express InflectionData.Voice,
                                         InflectionData.Express InflectionData.Evidentiality,
                                         InflectionData.Express InflectionData.Transitivity,
                                         InflectionData.Express InflectionData.Volition))]}
21626b080cf2e0731be3b700433e03eb
  data ManifestType = Particle | Prefix | Suffix
    Promotable
170a49091e965c69ca2b81c9942aa234
  data Mood
    = UMOO
    | IND
    | IRR
    | DEO
    | IMP
    | JUS
    | OPT
    | EPIS
    | SBJV
    | POT
    | COND
    Promotable
c1e8fbfb7380effdacb7c7c192e40bf5
  data Number = UNUM | SG | DU | TRI | PA | PL
    Promotable
02346c3aafaeac9909a5db7a01e8ca09
  data Person
    = UPER
    | FIRST
    | FSTINCL
    | FSTEXCL
    | SECOND
    | THIRD
    | THRDPROX
    | THRDOBV
    Promotable
ad1fe4829d26ee371daeb2b0168138e4
  data Polarity = UPOL | AFF | NEG
    Promotable
a4a6522da9f32c4a22fdcdb048233e77
  data Specificity = USPE | SPEC | NSPEC
    Promotable
b64289664290fdc9c5510c85a7afdd78
  data Tense
    = UTEN
    | PST
    | PRS
    | FUT
    | APRS
    | APST
    | AFUT
    | AFUT1
    | AFUT2
    | AFUT3
    | PPRS
    | PFUT
    | PPST
    | PPST1
    | PPST2
    | PPST3
    | PSTPER
    | PRSPER
    | FUTPER
    Promotable
91b970df1d2f65a770d84bd1b0e168b5
  data Topic = UTOP | TOP | NTOP
    Promotable
c432d94948e8418512e7b069e8d02e7a
  data Transitivity = UTRA | NTRANS | TRANS | MTRANS | DITRANS
    Promotable
1f59333afb1b3b92a8af1e5489e1e630
  data Voice = UVOI | ACTIVE | MIDDLE | PASSIVE
    Promotable
91017ab7ea71228801f74c069cd5baf7
  data Volition = UVOL | VOL | NVOL
    Promotable
418312c5fef475f6491ab9b08cc9e4a0
  aniSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest [InflectionData.Animacy]
  RecSel InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLLLLLLLLLLLLL),1*U(A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.InflectionSystem ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ->
                 ds2 }) -}
0bb602290854008e9c49649291652480
  aspSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest [InflectionData.Aspect]
  RecSel InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLSLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,1*U,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.InflectionSystem ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ->
                 ds12 }) -}
add19c65cc6f1fe282cd3c5d93eb3390
  casSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest [InflectionData.Case]
  RecSel InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLLLLLLLLLLLLL),1*U(A,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.InflectionSystem ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ->
                 ds3 }) -}
02c3c8a5fc37888f88295faca73009ab
  defSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest [InflectionData.Definiteness]
  RecSel InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSLLLLLLLLLLLL),1*U(A,A,A,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.InflectionSystem ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ->
                 ds5 }) -}
9a880a223bbc8d556f96f82b447b0469
  eviSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest [InflectionData.Evidentiality]
  RecSel InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLSLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.InflectionSystem ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ->
                 ds15 }) -}
29df4b93bb175fe038692cd57442c08d
  genSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest [InflectionData.Gender]
  RecSel InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLLLLLLLLLLLLL),1*U(1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.InflectionSystem ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ->
                 ds1 }) -}
c4032392244123b24859852724b5f517
  getExp :: InflectionData.Express a -> a
  RecSel InflectionData.Express
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a40 ds :: InflectionData.Express a40 ->
                 case ds of wild {
                   InflectionData.NoExpress -> InflectionData.getExp1 @ a40
                   InflectionData.Express ds1 -> ds1 }) -}
add51f894a81d7697d9d2c3be82da105
  getExp1 :: a
  {- Strictness: b -}
b749addaa4dbab444b3ba6e4c3080482
  honSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest [InflectionData.Honorific]
  RecSel InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLSLLLLLLLL),1*U(A,A,A,A,A,A,A,A,1*U,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.InflectionSystem ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ->
                 ds9 }) -}
7b847354675f79c9ffb5926dc973e8b1
  manSysCombos ::
    InflectionData.ManifestSystem
    -> [(PhonemeData.Morpheme,
         (InflectionData.Express InflectionData.Gender,
          InflectionData.Express InflectionData.Animacy,
          InflectionData.Express InflectionData.Case,
          InflectionData.Express InflectionData.Number,
          InflectionData.Express InflectionData.Definiteness,
          InflectionData.Express InflectionData.Specificity,
          InflectionData.Express InflectionData.Topic,
          InflectionData.Express InflectionData.Person,
          InflectionData.Express InflectionData.Honorific,
          InflectionData.Express InflectionData.Polarity,
          InflectionData.Express InflectionData.Tense,
          InflectionData.Express InflectionData.Aspect,
          InflectionData.Express InflectionData.Mood,
          InflectionData.Express InflectionData.Voice,
          InflectionData.Express InflectionData.Evidentiality,
          InflectionData.Express InflectionData.Transitivity,
          InflectionData.Express InflectionData.Volition))]
  RecSel InflectionData.ManifestSystem
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.ManifestSystem ->
                 case ds of wild { InflectionData.ManifestSystem ds1 ds2 ds3 ->
                 ds3 }) -}
fb50b3abdc923e02e4e966fd940522e8
  manSysLC :: InflectionData.ManifestSystem -> InflectionData.LexCat
  RecSel InflectionData.ManifestSystem
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.ManifestSystem ->
                 case ds of wild { InflectionData.ManifestSystem ds1 ds2 ds3 ->
                 ds1 }) -}
ab635567116480b87832fe8f72e1ee12
  manSysType ::
    InflectionData.ManifestSystem -> InflectionData.ManifestType
  RecSel InflectionData.ManifestSystem
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.ManifestSystem ->
                 case ds of wild { InflectionData.ManifestSystem ds1 ds2 ds3 ->
                 ds2 }) -}
69a3f604f4dd42ec545394741ccd60c6
  mooSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest [InflectionData.Mood]
  RecSel InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLSLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,1*U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.InflectionSystem ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ->
                 ds13 }) -}
6d879838113991034bac918ebf0b46f8
  numSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest [InflectionData.Number]
  RecSel InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLLLLLLLLLLLLL),1*U(A,A,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.InflectionSystem ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ->
                 ds4 }) -}
1b412b277c7edd0b512e13923d1f3e09
  perSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest [InflectionData.Person]
  RecSel InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLSLLLLLLLLL),1*U(A,A,A,A,A,A,A,1*U,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.InflectionSystem ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ->
                 ds8 }) -}
b6e9b16a59299e448d515504968763fe
  polSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest [InflectionData.Polarity]
  RecSel InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLSLLLLLLL),1*U(A,A,A,A,A,A,A,A,A,1*U,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.InflectionSystem ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ->
                 ds10 }) -}
f120c55cd644627c31ba466e98d24bcf
  speSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest [InflectionData.Specificity]
  RecSel InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLSLLLLLLLLLLL),1*U(A,A,A,A,A,1*U,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.InflectionSystem ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ->
                 ds6 }) -}
dd002fbf7a55ef4faacaa94df56435f7
  tenSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest [InflectionData.Tense]
  RecSel InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLSLLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,1*U,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.InflectionSystem ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ->
                 ds11 }) -}
42d673b3b4caa339454fc67e5a805d46
  topSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest [InflectionData.Topic]
  RecSel InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLSLLLLLLLLLL),1*U(A,A,A,A,A,A,1*U,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.InflectionSystem ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ->
                 ds7 }) -}
ba78580b1a2b852174cdc7b1adf59950
  traSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest [InflectionData.Transitivity]
  RecSel InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLLSL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.InflectionSystem ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ->
                 ds16 }) -}
235151b8b952dd109b6af25a0e063cce
  voiSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest [InflectionData.Voice]
  RecSel InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLSLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.InflectionSystem ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ->
                 ds14 }) -}
86532736672bf5c58d5f98ce1c39d837
  volSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest [InflectionData.Volition]
  RecSel InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLLLS),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.InflectionSystem ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ->
                 ds17 }) -}
instance GHC.Enum.Enum [InflectionData.LexCat]
  = InflectionData.$fEnumLexCat
instance GHC.Classes.Eq [(,,,,,,,,,,,,,,,,)]
  = InflectionData.$fEq(,,,,,,,,,,,,,,,,)
instance GHC.Classes.Eq [InflectionData.Animacy]
  = InflectionData.$fEqAnimacy
instance GHC.Classes.Eq [InflectionData.Aspect]
  = InflectionData.$fEqAspect
instance GHC.Classes.Eq [InflectionData.Case]
  = InflectionData.$fEqCase
instance GHC.Classes.Eq [InflectionData.Definiteness]
  = InflectionData.$fEqDefiniteness
instance GHC.Classes.Eq [InflectionData.Evidentiality]
  = InflectionData.$fEqEvidentiality
instance GHC.Classes.Eq [InflectionData.Express]
  = InflectionData.$fEqExpress
instance GHC.Classes.Eq [InflectionData.Gender]
  = InflectionData.$fEqGender
instance GHC.Classes.Eq [InflectionData.Honorific]
  = InflectionData.$fEqHonorific
instance GHC.Classes.Eq [InflectionData.InflectionSystem]
  = InflectionData.$fEqInflectionSystem
instance GHC.Classes.Eq [InflectionData.LexCat]
  = InflectionData.$fEqLexCat
instance GHC.Classes.Eq [InflectionData.Manifest]
  = InflectionData.$fEqManifest
instance GHC.Classes.Eq [InflectionData.ManifestSystem]
  = InflectionData.$fEqManifestSystem
instance GHC.Classes.Eq [InflectionData.ManifestType]
  = InflectionData.$fEqManifestType
instance GHC.Classes.Eq [InflectionData.Mood]
  = InflectionData.$fEqMood
instance GHC.Classes.Eq [InflectionData.Number]
  = InflectionData.$fEqNumber
instance GHC.Classes.Eq [InflectionData.Person]
  = InflectionData.$fEqPerson
instance GHC.Classes.Eq [InflectionData.Polarity]
  = InflectionData.$fEqPolarity
instance GHC.Classes.Eq [InflectionData.Specificity]
  = InflectionData.$fEqSpecificity
instance GHC.Classes.Eq [InflectionData.Tense]
  = InflectionData.$fEqTense
instance GHC.Classes.Eq [InflectionData.Topic]
  = InflectionData.$fEqTopic
instance GHC.Classes.Eq [InflectionData.Transitivity]
  = InflectionData.$fEqTransitivity
instance GHC.Classes.Eq [InflectionData.Voice]
  = InflectionData.$fEqVoice
instance GHC.Classes.Eq [InflectionData.Volition]
  = InflectionData.$fEqVolition
instance GHC.Read.Read [InflectionData.Animacy]
  = InflectionData.$fReadAnimacy
instance GHC.Read.Read [InflectionData.Aspect]
  = InflectionData.$fReadAspect
instance GHC.Read.Read [InflectionData.Case]
  = InflectionData.$fReadCase
instance GHC.Read.Read [InflectionData.Definiteness]
  = InflectionData.$fReadDefiniteness
instance GHC.Read.Read [InflectionData.Evidentiality]
  = InflectionData.$fReadEvidentiality
instance GHC.Read.Read [InflectionData.Express]
  = InflectionData.$fReadExpress
instance GHC.Read.Read [InflectionData.Gender]
  = InflectionData.$fReadGender
instance GHC.Read.Read [InflectionData.Honorific]
  = InflectionData.$fReadHonorific
instance GHC.Read.Read [InflectionData.InflectionSystem]
  = InflectionData.$fReadInflectionSystem
instance GHC.Read.Read [InflectionData.LexCat]
  = InflectionData.$fReadLexCat
instance GHC.Read.Read [InflectionData.Manifest]
  = InflectionData.$fReadManifest
instance GHC.Read.Read [InflectionData.ManifestType]
  = InflectionData.$fReadManifestType
instance GHC.Read.Read [InflectionData.Mood]
  = InflectionData.$fReadMood
instance GHC.Read.Read [InflectionData.Number]
  = InflectionData.$fReadNumber
instance GHC.Read.Read [InflectionData.Person]
  = InflectionData.$fReadPerson
instance GHC.Read.Read [InflectionData.Polarity]
  = InflectionData.$fReadPolarity
instance GHC.Read.Read [InflectionData.Specificity]
  = InflectionData.$fReadSpecificity
instance GHC.Read.Read [InflectionData.Tense]
  = InflectionData.$fReadTense
instance GHC.Read.Read [InflectionData.Topic]
  = InflectionData.$fReadTopic
instance GHC.Read.Read [InflectionData.Transitivity]
  = InflectionData.$fReadTransitivity
instance GHC.Read.Read [InflectionData.Voice]
  = InflectionData.$fReadVoice
instance GHC.Read.Read [InflectionData.Volition]
  = InflectionData.$fReadVolition
instance GHC.Show.Show [(,,,,,,,,,,,,,,,,)]
  = InflectionData.$fShow(,,,,,,,,,,,,,,,,)
instance GHC.Show.Show [InflectionData.Animacy]
  = InflectionData.$fShowAnimacy
instance GHC.Show.Show [InflectionData.Aspect]
  = InflectionData.$fShowAspect
instance GHC.Show.Show [InflectionData.Case]
  = InflectionData.$fShowCase
instance GHC.Show.Show [InflectionData.Definiteness]
  = InflectionData.$fShowDefiniteness
instance GHC.Show.Show [InflectionData.Evidentiality]
  = InflectionData.$fShowEvidentiality
instance GHC.Show.Show [InflectionData.Express]
  = InflectionData.$fShowExpress
instance GHC.Show.Show [InflectionData.Gender]
  = InflectionData.$fShowGender
instance GHC.Show.Show [InflectionData.Honorific]
  = InflectionData.$fShowHonorific
instance GHC.Show.Show [InflectionData.InflectionSystem]
  = InflectionData.$fShowInflectionSystem
instance GHC.Show.Show [InflectionData.LexCat]
  = InflectionData.$fShowLexCat
instance GHC.Show.Show [InflectionData.Manifest]
  = InflectionData.$fShowManifest
instance GHC.Show.Show [InflectionData.ManifestSystem]
  = InflectionData.$fShowManifestSystem
instance GHC.Show.Show [InflectionData.ManifestType]
  = InflectionData.$fShowManifestType
instance GHC.Show.Show [InflectionData.Mood]
  = InflectionData.$fShowMood
instance GHC.Show.Show [InflectionData.Number]
  = InflectionData.$fShowNumber
instance GHC.Show.Show [InflectionData.Person]
  = InflectionData.$fShowPerson
instance GHC.Show.Show [InflectionData.Polarity]
  = InflectionData.$fShowPolarity
instance GHC.Show.Show [InflectionData.Specificity]
  = InflectionData.$fShowSpecificity
instance GHC.Show.Show [InflectionData.Tense]
  = InflectionData.$fShowTense
instance GHC.Show.Show [InflectionData.Topic]
  = InflectionData.$fShowTopic
instance GHC.Show.Show [InflectionData.Transitivity]
  = InflectionData.$fShowTransitivity
instance GHC.Show.Show [InflectionData.Voice]
  = InflectionData.$fShowVoice
instance GHC.Show.Show [InflectionData.Volition]
  = InflectionData.$fShowVolition
"SPEC $c/= @ (Express Gender) @ (Express Animacy) @ (Express
                                                      Case) @ (Express Number) @ (Express
                                                                                    Definiteness) @ (Express
                                                                                                       Specificity) @ (Express
                                                                                                                         Topic) @ (Express
                                                                                                                                     Person) @ (Express
                                                                                                                                                  Honorific) @ (Express
                                                                                                                                                                  Polarity) @ (Express
                                                                                                                                                                                 Tense) @ (Express
                                                                                                                                                                                             Aspect) @ (Express
                                                                                                                                                                                                          Mood) @ (Express
                                                                                                                                                                                                                     Voice) @ (Express
                                                                                                                                                                                                                                 Evidentiality) @ (Express
                                                                                                                                                                                                                                                     Transitivity) @ (Express
                                                                                                                                                                                                                                                                        Volition)" [ALWAYS] forall $dEq :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Gender)
dEq1 :: GHC.Classes.Eq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 (InflectionData.Express
nflectionData.Animacy)
dEq2 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Case)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      $dEq3 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Number)
dEq4 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Definiteness)
dEq5 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Specificity)
dEq6 :: GHC.Classes.Eq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 (InflectionData.Express
nflectionData.Topic)
dEq7 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Person)
dEq8 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Honorific)
dEq9 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Polarity)
dEq10 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Tense)
dEq11 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Aspect)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      $dEq12 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Mood)
dEq13 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Voice)
dEq14 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Evidentiality)
dEq15 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Transitivity)
dEq16 :: GHC.Classes.Eq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  (InflectionData.Express
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     InflectionData.Volition)
  InflectionData.$fEq(,,,,,,,,,,,,,,,,)_$c/= @ (InflectionData.Express
                                                  InflectionData.Gender)
                                             @ (InflectionData.Express InflectionData.Animacy)
                                             @ (InflectionData.Express InflectionData.Case)
                                             @ (InflectionData.Express InflectionData.Number)
                                             @ (InflectionData.Express InflectionData.Definiteness)
                                             @ (InflectionData.Express InflectionData.Specificity)
                                             @ (InflectionData.Express InflectionData.Topic)
                                             @ (InflectionData.Express InflectionData.Person)
                                             @ (InflectionData.Express InflectionData.Honorific)
                                             @ (InflectionData.Express InflectionData.Polarity)
                                             @ (InflectionData.Express InflectionData.Tense)
                                             @ (InflectionData.Express InflectionData.Aspect)
                                             @ (InflectionData.Express InflectionData.Mood)
                                             @ (InflectionData.Express InflectionData.Voice)
                                             @ (InflectionData.Express InflectionData.Evidentiality)
                                             @ (InflectionData.Express InflectionData.Transitivity)
                                             @ (InflectionData.Express InflectionData.Volition)
                                             $dEq
                                             $dEq1
                                             $dEq2
                                             $dEq3
                                             $dEq4
                                             $dEq5
                                             $dEq6
                                             $dEq7
                                             $dEq8
                                             $dEq9
                                             $dEq10
                                             $dEq11
                                             $dEq12
                                             $dEq13
                                             $dEq14
                                             $dEq15
                                             $dEq16
  = InflectionData.$fEq(,,,,,,,,,,,,,,,,)_$s$c/=
"SPEC $c== @ (Express Gender) @ (Express Animacy) @ (Express
                                                      Case) @ (Express Number) @ (Express
                                                                                    Definiteness) @ (Express
                                                                                                       Specificity) @ (Express
                                                                                                                         Topic) @ (Express
                                                                                                                                     Person) @ (Express
                                                                                                                                                  Honorific) @ (Express
                                                                                                                                                                  Polarity) @ (Express
                                                                                                                                                                                 Tense) @ (Express
                                                                                                                                                                                             Aspect) @ (Express
                                                                                                                                                                                                          Mood) @ (Express
                                                                                                                                                                                                                     Voice) @ (Express
                                                                                                                                                                                                                                 Evidentiality) @ (Express
                                                                                                                                                                                                                                                     Transitivity) @ (Express
                                                                                                                                                                                                                                                                        Volition)" [ALWAYS] forall $dEq :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Gender)
dEq1 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Animacy)
dEq2 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Case)
dEq3 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Number)
dEq4 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Definiteness)
dEq5 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Specificity)
dEq6 :: GHC.Classes.Eq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 (InflectionData.Express
nflectionData.Topic)
dEq7 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Person)
dEq8 :: GHC.Classes.Eq
nflectionData.Express
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    InflectionData.Honorific)
dEq9 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Polarity)
dEq10 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Tense)
dEq11 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Aspect)
dEq12 :: GHC.Classes.Eq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  (InflectionData.Express
nflectionData.Mood)
dEq13 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Voice)
dEq14 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Evidentiality)
dEq15 :: GHC.Classes.Eq
nflectionData.Express
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     InflectionData.Transitivity)
dEq16 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Volition)
  InflectionData.$fEq(,,,,,,,,,,,,,,,,)_$c== @ (InflectionData.Express
                                                  InflectionData.Gender)
                                             @ (InflectionData.Express InflectionData.Animacy)
                                             @ (InflectionData.Express InflectionData.Case)
                                             @ (InflectionData.Express InflectionData.Number)
                                             @ (InflectionData.Express InflectionData.Definiteness)
                                             @ (InflectionData.Express InflectionData.Specificity)
                                             @ (InflectionData.Express InflectionData.Topic)
                                             @ (InflectionData.Express InflectionData.Person)
                                             @ (InflectionData.Express InflectionData.Honorific)
                                             @ (InflectionData.Express InflectionData.Polarity)
                                             @ (InflectionData.Express InflectionData.Tense)
                                             @ (InflectionData.Express InflectionData.Aspect)
                                             @ (InflectionData.Express InflectionData.Mood)
                                             @ (InflectionData.Express InflectionData.Voice)
                                             @ (InflectionData.Express InflectionData.Evidentiality)
                                             @ (InflectionData.Express InflectionData.Transitivity)
                                             @ (InflectionData.Express InflectionData.Volition)
                                             $dEq
                                             $dEq1
                                             $dEq2
                                             $dEq3
                                             $dEq4
                                             $dEq5
                                             $dEq6
                                             $dEq7
                                             $dEq8
                                             $dEq9
                                             $dEq10
                                             $dEq11
                                             $dEq12
                                             $dEq13
                                             $dEq14
                                             $dEq15
                                             $dEq16
  = InflectionData.$fEq(,,,,,,,,,,,,,,,,)_$s$c==
"SPEC $c== @ Volition" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                 InflectionData.Volition
  InflectionData.$fEqExpress_$c==10 @ InflectionData.Volition $dEq
  = InflectionData.$fEqExpress_$s$c==9
"SPEC $c== @ [Volition]" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                   [InflectionData.Volition]
  InflectionData.$fEqManifest_$c== @ [InflectionData.Volition] $dEq
  = InflectionData.$fEqManifest_$s$c==16
"SPEC $cshowsPrec @ Gender" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                        InflectionData.Gender
  InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec @ InflectionData.Gender
                                                      $dShow
  = InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec12
"SPEC $cshowsPrec @ Honorific" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                           InflectionData.Honorific
  InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec @ InflectionData.Honorific
                                                      $dShow
  = InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec7
"SPEC $cshowsPrec @ Mood" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                      InflectionData.Mood
  InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec @ InflectionData.Mood
                                                      $dShow
  = InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec4
"SPEC $cshowsPrec @ Number" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                        InflectionData.Number
  InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec @ InflectionData.Number
                                                      $dShow
  = InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec11
"SPEC $cshowsPrec @ Person" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                        InflectionData.Person
  InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec @ InflectionData.Person
                                                      $dShow
  = InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec8
"SPEC $cshowsPrec @ Polarity" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                          InflectionData.Polarity
  InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec @ InflectionData.Polarity
                                                      $dShow
  = InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec6
"SPEC $cshowsPrec @ Specificity" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                             InflectionData.Specificity
  InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec @ InflectionData.Specificity
                                                      $dShow
  = InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec10
"SPEC $cshowsPrec @ Tense" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                       InflectionData.Tense
  InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec @ InflectionData.Tense
                                                      $dShow
  = InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec5
"SPEC $cshowsPrec @ Topic" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                       InflectionData.Topic
  InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec @ InflectionData.Topic
                                                      $dShow
  = InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec9
"SPEC $cshowsPrec @ Transitivity" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                              InflectionData.Transitivity
  InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec @ InflectionData.Transitivity
                                                      $dShow
  = InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec2
"SPEC $cshowsPrec @ Voice" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                       InflectionData.Voice
  InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec @ InflectionData.Voice
                                                      $dShow
  = InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec3
"SPEC $cshowsPrec @ Volition" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                          InflectionData.Volition
  InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec @ InflectionData.Volition
                                                      $dShow
  = InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec1
"SPEC $cshowsPrec @ [Animacy]" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                           [InflectionData.Animacy]
  InflectionData.$fShowManifest_$cshowsPrec @ [InflectionData.Animacy]
                                            $dShow
  = InflectionData.$fShowManifest_$s$cshowsPrec
"SPEC $cshowsPrec @ [Aspect]" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                          [InflectionData.Aspect]
  InflectionData.$fShowManifest_$cshowsPrec @ [InflectionData.Aspect]
                                            $dShow
  = InflectionData.$fShowManifest_$s$cshowsPrec1
"SPEC $cshowsPrec @ [Case]" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                        [InflectionData.Case]
  InflectionData.$fShowManifest_$cshowsPrec @ [InflectionData.Case]
                                            $dShow
  = InflectionData.$fShowManifest_$s$cshowsPrec2
"SPEC $cshowsPrec @ [Definiteness]" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                [InflectionData.Definiteness]
  InflectionData.$fShowManifest_$cshowsPrec @ [InflectionData.Definiteness]
                                            $dShow
  = InflectionData.$fShowManifest_$s$cshowsPrec3
"SPEC $cshowsPrec @ [Evidentiality]" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                 [InflectionData.Evidentiality]
  InflectionData.$fShowManifest_$cshowsPrec @ [InflectionData.Evidentiality]
                                            $dShow
  = InflectionData.$fShowManifest_$s$cshowsPrec4
"SPEC $cshowsPrec @ [Gender]" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                          [InflectionData.Gender]
  InflectionData.$fShowManifest_$cshowsPrec @ [InflectionData.Gender]
                                            $dShow
  = InflectionData.$fShowManifest_$s$cshowsPrec5
"SPEC $cshowsPrec @ [Honorific]" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                             [InflectionData.Honorific]
  InflectionData.$fShowManifest_$cshowsPrec @ [InflectionData.Honorific]
                                            $dShow
  = InflectionData.$fShowManifest_$s$cshowsPrec6
"SPEC $cshowsPrec @ [Mood]" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                        [InflectionData.Mood]
  InflectionData.$fShowManifest_$cshowsPrec @ [InflectionData.Mood]
                                            $dShow
  = InflectionData.$fShowManifest_$s$cshowsPrec7
"SPEC $cshowsPrec @ [Number]" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                          [InflectionData.Number]
  InflectionData.$fShowManifest_$cshowsPrec @ [InflectionData.Number]
                                            $dShow
  = InflectionData.$fShowManifest_$s$cshowsPrec8
"SPEC $cshowsPrec @ [Person]" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                          [InflectionData.Person]
  InflectionData.$fShowManifest_$cshowsPrec @ [InflectionData.Person]
                                            $dShow
  = InflectionData.$fShowManifest_$s$cshowsPrec9
"SPEC $cshowsPrec @ [Polarity]" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                            [InflectionData.Polarity]
  InflectionData.$fShowManifest_$cshowsPrec @ [InflectionData.Polarity]
                                            $dShow
  = InflectionData.$fShowManifest_$s$cshowsPrec10
"SPEC $cshowsPrec @ [Specificity]" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                               [InflectionData.Specificity]
  InflectionData.$fShowManifest_$cshowsPrec @ [InflectionData.Specificity]
                                            $dShow
  = InflectionData.$fShowManifest_$s$cshowsPrec11
"SPEC $cshowsPrec @ [Tense]" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                         [InflectionData.Tense]
  InflectionData.$fShowManifest_$cshowsPrec @ [InflectionData.Tense]
                                            $dShow
  = InflectionData.$fShowManifest_$s$cshowsPrec12
"SPEC $cshowsPrec @ [Topic]" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                         [InflectionData.Topic]
  InflectionData.$fShowManifest_$cshowsPrec @ [InflectionData.Topic]
                                            $dShow
  = InflectionData.$fShowManifest_$s$cshowsPrec13
"SPEC $cshowsPrec @ [Transitivity]" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                [InflectionData.Transitivity]
  InflectionData.$fShowManifest_$cshowsPrec @ [InflectionData.Transitivity]
                                            $dShow
  = InflectionData.$fShowManifest_$s$cshowsPrec14
"SPEC $cshowsPrec @ [Voice]" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                         [InflectionData.Voice]
  InflectionData.$fShowManifest_$cshowsPrec @ [InflectionData.Voice]
                                            $dShow
  = InflectionData.$fShowManifest_$s$cshowsPrec15
"SPEC $cshowsPrec @ [Volition]" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                            [InflectionData.Volition]
  InflectionData.$fShowManifest_$cshowsPrec @ [InflectionData.Volition]
                                            $dShow
  = InflectionData.$fShowManifest_$s$cshowsPrec16
"SPEC $fEq(,,,,,,,,,,,,,,,,) @ (Express Gender) @ (Express
                                                    Animacy) @ (Express Case) @ (Express
                                                                                   Number) @ (Express
                                                                                                Definiteness) @ (Express
                                                                                                                   Specificity) @ (Express
                                                                                                                                     Topic) @ (Express
                                                                                                                                                 Person) @ (Express
                                                                                                                                                              Honorific) @ (Express
                                                                                                                                                                              Polarity) @ (Express
                                                                                                                                                                                             Tense) @ (Express
                                                                                                                                                                                                         Aspect) @ (Express
                                                                                                                                                                                                                      Mood) @ (Express
                                                                                                                                                                                                                                 Voice) @ (Express
                                                                                                                                                                                                                                             Evidentiality) @ (Express
                                                                                                                                                                                                                                                                 Transitivity) @ (Express
                                                                                                                                                                                                                                                                                    Volition)" [ALWAYS] forall $dEq :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Gender)
dEq1 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Animacy)
dEq2 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Case)
dEq3 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Number)
dEq4 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Definiteness)
dEq5 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Specificity)
dEq6 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Topic)
dEq7 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Person)
dEq8 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Honorific)
dEq9 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Polarity)
dEq10 :: GHC.Classes.Eq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 (InflectionData.Express
nflectionData.Tense)
dEq11 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Aspect)
dEq12 :: GHC.Classes.Eq
nflectionData.Express
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    InflectionData.Mood)
dEq13 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Voice)
dEq14 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Evidentiality)
dEq15 :: GHC.Classes.Eq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 (InflectionData.Express
nflectionData.Transitivity)
dEq16 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Volition)
  InflectionData.$fEq(,,,,,,,,,,,,,,,,) @ (InflectionData.Express
                                             InflectionData.Gender)
                                        @ (InflectionData.Express InflectionData.Animacy)
                                        @ (InflectionData.Express InflectionData.Case)
                                        @ (InflectionData.Express InflectionData.Number)
                                        @ (InflectionData.Express InflectionData.Definiteness)
                                        @ (InflectionData.Express InflectionData.Specificity)
                                        @ (InflectionData.Express InflectionData.Topic)
                                        @ (InflectionData.Express InflectionData.Person)
                                        @ (InflectionData.Express InflectionData.Honorific)
                                        @ (InflectionData.Express InflectionData.Polarity)
                                        @ (InflectionData.Express InflectionData.Tense)
                                        @ (InflectionData.Express InflectionData.Aspect)
                                        @ (InflectionData.Express InflectionData.Mood)
                                        @ (InflectionData.Express InflectionData.Voice)
                                        @ (InflectionData.Express InflectionData.Evidentiality)
                                        @ (InflectionData.Express InflectionData.Transitivity)
                                        @ (InflectionData.Express InflectionData.Volition)
                                        $dEq
                                        $dEq1
                                        $dEq2
                                        $dEq3
                                        $dEq4
                                        $dEq5
                                        $dEq6
                                        $dEq7
                                        $dEq8
                                        $dEq9
                                        $dEq10
                                        $dEq11
                                        $dEq12
                                        $dEq13
                                        $dEq14
                                        $dEq15
                                        $dEq16
  = InflectionData.$fEq(,,,,,,,,,,,,,,,,)_$s$fEq(,,,,,,,,,,,,,,,,)
"SPEC/InflectionData $dmreadsPrec @ Animacy" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                         InflectionData.Animacy
  GHC.Read.$dmreadsPrec @ InflectionData.Animacy $dRead
  = InflectionData.$fReadAnimacy_$s$dmreadsPrec
"SPEC/InflectionData $dmreadsPrec @ Aspect" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                        InflectionData.Aspect
  GHC.Read.$dmreadsPrec @ InflectionData.Aspect $dRead
  = InflectionData.$fReadAspect_$s$dmreadsPrec
"SPEC/InflectionData $dmreadsPrec @ Case" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                      InflectionData.Case
  GHC.Read.$dmreadsPrec @ InflectionData.Case $dRead
  = InflectionData.$fReadCase_$s$dmreadsPrec
"SPEC/InflectionData $dmreadsPrec @ Definiteness" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                              InflectionData.Definiteness
  GHC.Read.$dmreadsPrec @ InflectionData.Definiteness $dRead
  = InflectionData.$fReadDefiniteness_$s$dmreadsPrec
"SPEC/InflectionData $dmreadsPrec @ Evidentiality" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                               InflectionData.Evidentiality
  GHC.Read.$dmreadsPrec @ InflectionData.Evidentiality $dRead
  = InflectionData.$fReadEvidentiality_$s$dmreadsPrec
"SPEC/InflectionData $dmreadsPrec @ Gender" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                        InflectionData.Gender
  GHC.Read.$dmreadsPrec @ InflectionData.Gender $dRead
  = InflectionData.$fReadGender_$s$dmreadsPrec
"SPEC/InflectionData $dmreadsPrec @ Honorific" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                           InflectionData.Honorific
  GHC.Read.$dmreadsPrec @ InflectionData.Honorific $dRead
  = InflectionData.$fReadHonorific_$s$dmreadsPrec
"SPEC/InflectionData $dmreadsPrec @ LexCat" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                        InflectionData.LexCat
  GHC.Read.$dmreadsPrec @ InflectionData.LexCat $dRead
  = InflectionData.$fReadLexCat_$s$dmreadsPrec
"SPEC/InflectionData $dmreadsPrec @ ManifestType" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                              InflectionData.ManifestType
  GHC.Read.$dmreadsPrec @ InflectionData.ManifestType $dRead
  = InflectionData.$fReadManifestType_$s$dmreadsPrec
"SPEC/InflectionData $dmreadsPrec @ Mood" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                      InflectionData.Mood
  GHC.Read.$dmreadsPrec @ InflectionData.Mood $dRead
  = InflectionData.$fReadMood_$s$dmreadsPrec
"SPEC/InflectionData $dmreadsPrec @ Number" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                        InflectionData.Number
  GHC.Read.$dmreadsPrec @ InflectionData.Number $dRead
  = InflectionData.$fReadNumber_$s$dmreadsPrec
"SPEC/InflectionData $dmreadsPrec @ Person" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                        InflectionData.Person
  GHC.Read.$dmreadsPrec @ InflectionData.Person $dRead
  = InflectionData.$fReadPerson_$s$dmreadsPrec
"SPEC/InflectionData $dmreadsPrec @ Polarity" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                          InflectionData.Polarity
  GHC.Read.$dmreadsPrec @ InflectionData.Polarity $dRead
  = InflectionData.$fReadPolarity_$s$dmreadsPrec
"SPEC/InflectionData $dmreadsPrec @ Specificity" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                             InflectionData.Specificity
  GHC.Read.$dmreadsPrec @ InflectionData.Specificity $dRead
  = InflectionData.$fReadSpecificity_$s$dmreadsPrec
"SPEC/InflectionData $dmreadsPrec @ Tense" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                       InflectionData.Tense
  GHC.Read.$dmreadsPrec @ InflectionData.Tense $dRead
  = InflectionData.$fReadTense_$s$dmreadsPrec
"SPEC/InflectionData $dmreadsPrec @ Topic" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                       InflectionData.Topic
  GHC.Read.$dmreadsPrec @ InflectionData.Topic $dRead
  = InflectionData.$fReadTopic_$s$dmreadsPrec
"SPEC/InflectionData $dmreadsPrec @ Transitivity" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                              InflectionData.Transitivity
  GHC.Read.$dmreadsPrec @ InflectionData.Transitivity $dRead
  = InflectionData.$fReadTransitivity_$s$dmreadsPrec
"SPEC/InflectionData $dmreadsPrec @ Voice" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                       InflectionData.Voice
  GHC.Read.$dmreadsPrec @ InflectionData.Voice $dRead
  = InflectionData.$fReadVoice_$s$dmreadsPrec
"SPEC/InflectionData $dmreadsPrec @ Volition" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                          InflectionData.Volition
  GHC.Read.$dmreadsPrec @ InflectionData.Volition $dRead
  = InflectionData.$fReadVolition_$s$dmreadsPrec
"SPEC/InflectionData $fEq(,) @ Morpheme @ (Express Gender,
                                          Express Animacy,
                                          Express Case,
                                          Express Number,
                                          Express Definiteness,
                                          Express Specificity,
                                          Express Topic,
                                          Express Person,
                                          Express Honorific,
                                          Express Polarity,
                                          Express Tense,
                                          Express Aspect,
                                          Express Mood,
                                          Express Voice,
                                          Express Evidentiality,
                                          Express Transitivity,
                                          Express Volition)" [ALWAYS] forall $dEq :: GHC.Classes.Eq
honemeData.Morpheme
dEq1 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Gender,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 InflectionData.Express
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   InflectionData.Animacy,
nflectionData.Express
nflectionData.Case,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 InflectionData.Express
nflectionData.Number,
nflectionData.Express
nflectionData.Definiteness,
nflectionData.Express
nflectionData.Specificity,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 InflectionData.Express
nflectionData.Topic,
nflectionData.Express
nflectionData.Person,
nflectionData.Express
nflectionData.Honorific,
nflectionData.Express
nflectionData.Polarity,
nflectionData.Express
nflectionData.Tense,
nflectionData.Express
nflectionData.Aspect,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 InflectionData.Express
nflectionData.Mood,
nflectionData.Express
nflectionData.Voice,
nflectionData.Express
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   InflectionData.Evidentiality,
nflectionData.Express
nflectionData.Transitivity,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 InflectionData.Express
nflectionData.Volition)
  GHC.Classes.$fEq(,) @ PhonemeData.Morpheme
                      @ (InflectionData.Express InflectionData.Gender,
                         InflectionData.Express InflectionData.Animacy,
                         InflectionData.Express InflectionData.Case,
                         InflectionData.Express InflectionData.Number,
                         InflectionData.Express InflectionData.Definiteness,
                         InflectionData.Express InflectionData.Specificity,
                         InflectionData.Express InflectionData.Topic,
                         InflectionData.Express InflectionData.Person,
                         InflectionData.Express InflectionData.Honorific,
                         InflectionData.Express InflectionData.Polarity,
                         InflectionData.Express InflectionData.Tense,
                         InflectionData.Express InflectionData.Aspect,
                         InflectionData.Express InflectionData.Mood,
                         InflectionData.Express InflectionData.Voice,
                         InflectionData.Express InflectionData.Evidentiality,
                         InflectionData.Express InflectionData.Transitivity,
                         InflectionData.Express InflectionData.Volition)
                      $dEq
                      $dEq1
  = InflectionData.$fEqManifestSystem_$s$fEq(,)
"SPEC/InflectionData $fEq(,,) @ LexCat @ ManifestType @ Int" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                                       InflectionData.LexCat
                                                                             $dEq1 :: GHC.Classes.Eq
                                                                                        InflectionData.ManifestType
                                                                             $dEq2 :: GHC.Classes.Eq
                                                                                        GHC.Types.Int
  GHC.Classes.$fEq(,,) @ InflectionData.LexCat
                       @ InflectionData.ManifestType
                       @ GHC.Types.Int
                       $dEq
                       $dEq1
                       $dEq2
  = InflectionData.$fEqManifest_$s$fEq(,,)
"SPEC/InflectionData $fEq(,,)_$c/= @ LexCat @ ManifestType @ Int" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                                            InflectionData.LexCat
                                                                                  $dEq1 :: GHC.Classes.Eq
                                                                                             InflectionData.ManifestType
                                                                                  $dEq2 :: GHC.Classes.Eq
                                                                                             GHC.Types.Int
  GHC.Classes.$fEq(,,)_$c/= @ InflectionData.LexCat
                            @ InflectionData.ManifestType
                            @ GHC.Types.Int
                            $dEq
                            $dEq1
                            $dEq2
  = InflectionData.$fEqManifest_$s$fEq(,,)_$c/=
"SPEC/InflectionData readListDefault @ InflectionSystem" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                                     InflectionData.InflectionSystem
  GHC.Read.readListDefault @ InflectionData.InflectionSystem $dRead
  = InflectionData.$fReadInflectionSystem_$sreadListDefault
"SPEC/InflectionData readListDefault @ LexCat" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                           InflectionData.LexCat
  GHC.Read.readListDefault @ InflectionData.LexCat $dRead
  = InflectionData.$fReadLexCat_$sreadListDefault
"SPEC/InflectionData readListDefault @ ManifestType" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                                 InflectionData.ManifestType
  GHC.Read.readListDefault @ InflectionData.ManifestType $dRead
  = InflectionData.$fReadManifestType_$sreadListDefault
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

