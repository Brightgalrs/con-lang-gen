
==================== FINAL INTERFACE ====================
2016-11-10 18:42:01.196521 UTC

interface conla_1eA9qWUPH9nBowcXqqaV8r:InflectionData [orphan module] 7103
  interface hash: 009f019431be81d3a129ac761ad0d2c9
  ABI hash: 316dc8b65cfd739af6e59de9ad59bbc6
  export-list hash: 24640cf62a9c3b7f4d5b0c718698bf0c
  orphan hash: befe1cd73081b9863d1fc67ebaae42bf
  flag hash: f6794f28a1d9a693363b149a5d158050
  sig of: Nothing
  used TH splices: False
  where
exports:
  InflectionData.Animacy{InflectionData.AN InflectionData.HUM InflectionData.INAN InflectionData.NHUM InflectionData.ZO}
  InflectionData.Aspect{InflectionData.CONT InflectionData.HAB InflectionData.IPFV InflectionData.NNPROG InflectionData.NPROG InflectionData.PFV InflectionData.PROG}
  InflectionData.Case{InflectionData.ABE InflectionData.ABL InflectionData.ABS InflectionData.ABS2 InflectionData.ABS3 InflectionData.ACC InflectionData.ADP InflectionData.BEN InflectionData.CAUS InflectionData.COMIT InflectionData.COMP InflectionData.DAT InflectionData.DIR InflectionData.DISTR InflectionData.DRT1 InflectionData.DRT2 InflectionData.DTR InflectionData.EQU InflectionData.ERG InflectionData.ERG2 InflectionData.GEN InflectionData.IDEN InflectionData.INDIR InflectionData.INS InflectionData.INSCOMIT InflectionData.INTR InflectionData.LAT InflectionData.LOC InflectionData.MTR InflectionData.NOM InflectionData.NOM2 InflectionData.OBJ InflectionData.OBL1 InflectionData.OBL2 InflectionData.OBL3 InflectionData.OBL4 InflectionData.OBL5 InflectionData.OBL6 InflectionData.ORN InflectionData.PART InflectionData.PEG InflectionData.POSS InflectionData.POST InflectionData.PREP InflectionData.PRIM InflectionData.SEC InflectionData.TR InflectionData.VOC}
  InflectionData.Definiteness{InflectionData.DEF InflectionData.INDF}
  InflectionData.Evidentiality{InflectionData.ASS InflectionData.AUD InflectionData.EXP InflectionData.HSY InflectionData.INFER InflectionData.NVIS InflectionData.QUO InflectionData.REP InflectionData.VIS}
  InflectionData.Express{InflectionData.Express InflectionData.NoExpress}
  InflectionData.Gender{InflectionData.COM InflectionData.F InflectionData.M InflectionData.N}
  InflectionData.Honorific{InflectionData.FAM InflectionData.FORM InflectionData.NEU}
  InflectionData.InflectionSystem{InflectionData.InflectionSystem InflectionData.aniSys InflectionData.aspSys InflectionData.casSys InflectionData.defSys InflectionData.eviSys InflectionData.genSys InflectionData.honSys InflectionData.mooSys InflectionData.numSys InflectionData.perSys InflectionData.polSys InflectionData.speSys InflectionData.tenSys InflectionData.topSys InflectionData.traSys InflectionData.voiSys InflectionData.volSys}
  InflectionData.LexCat{InflectionData.Adj InflectionData.Adpo InflectionData.Adv InflectionData.Comp InflectionData.Det InflectionData.Infl InflectionData.Noun InflectionData.Obj InflectionData.Pron InflectionData.Subj InflectionData.Verb}
  InflectionData.Manifest{InflectionData.Manifest InflectionData.NoManifest}
  InflectionData.ManifestSystem{InflectionData.ManifestSystem InflectionData.manSysCombos InflectionData.manSysLC InflectionData.manSysType}
  InflectionData.ManifestType{InflectionData.Particle InflectionData.Prefix InflectionData.Suffix}
  InflectionData.Mood{InflectionData.COND InflectionData.DEO InflectionData.EPIS InflectionData.IMP InflectionData.IND InflectionData.IRR InflectionData.JUS InflectionData.OPT InflectionData.POT InflectionData.SBJV}
  InflectionData.Number{InflectionData.DU InflectionData.PA InflectionData.PL InflectionData.SG InflectionData.TRI}
  InflectionData.Person{InflectionData.FIRST InflectionData.FSTEXCL InflectionData.FSTINCL InflectionData.SECOND InflectionData.THIRD InflectionData.THRDOBV InflectionData.THRDPROX}
  InflectionData.Polarity{InflectionData.AFF InflectionData.NEG}
  InflectionData.Specificity{InflectionData.NSPEC InflectionData.SPEC}
  InflectionData.Tense{InflectionData.AFUT InflectionData.AFUT1 InflectionData.AFUT2 InflectionData.AFUT3 InflectionData.APRS InflectionData.APST InflectionData.FUT InflectionData.FUTPER InflectionData.PFUT InflectionData.PPRS InflectionData.PPST InflectionData.PPST1 InflectionData.PPST2 InflectionData.PPST3 InflectionData.PRS InflectionData.PRSPER InflectionData.PST InflectionData.PSTPER}
  InflectionData.Topic{InflectionData.NTOP InflectionData.TOP}
  InflectionData.Transitivity{InflectionData.DITRANS InflectionData.MTRANS InflectionData.NTRANS InflectionData.TRANS}
  InflectionData.Voice{InflectionData.ACTIVE InflectionData.MIDDLE InflectionData.PASSIVE}
  InflectionData.Volition{InflectionData.NVOL InflectionData.VOL}
module dependencies: OtherData PhonemeData
package dependencies: base-4.8.2.0* ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Monoid
                         base-4.8.2.0:Data.Type.Equality base-4.8.2.0:GHC.Generics
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.Enum debc6de3086023a15993ab0cecffb90b
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:GHC.Read b423b4506a014855edbd329b567629f3
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  base-4.8.2.0:Text.ParserCombinators.ReadPrec 2590e0e0a57a86ac7c62727f4d868dd2
import  -/  base-4.8.2.0:Text.Read.Lex 724ca44ddd38ddc5f47a501d62736c26
import  -/  OtherData 37db5ddc38f8875c91a0806c561b30cd
  exports: f505dec72f229982fb85e59b44566731
import  -/  PhonemeData 408b6488aa28ce44ef05793241013f6f
  exports: c711b36c9b7415c6d00ea9681146dbcb
  Morpheme 383812fe40de4e6210cee815bfc93a6d
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
669f64eab1a11feac3c6144dd5c31025
  $fEnumLexCat :: GHC.Enum.Enum InflectionData.LexCat
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.LexCat
                  InflectionData.$fEnumLexCat_$csucc
                  InflectionData.$fEnumLexCat_$cpred
                  InflectionData.$fEnumLexCat_$ctoEnum
                  InflectionData.$fEnumLexCat_$cfromEnum
                  InflectionData.$fEnumLexCat_$cenumFrom
                  InflectionData.$fEnumLexCat_$cenumFromThen
                  InflectionData.$fEnumLexCat_$cenumFromTo
                  InflectionData.$fEnumLexCat_$cenumFromThenTo -}
669f64eab1a11feac3c6144dd5c31025
  $fEnumLexCat1 :: GHC.Prim.Int# -> InflectionData.LexCat
  {- Arity: 1, Strictness: <L,U>b -}
669f64eab1a11feac3c6144dd5c31025
  $fEnumLexCat2 :: InflectionData.LexCat
  {- Strictness: b -}
669f64eab1a11feac3c6144dd5c31025
  $fEnumLexCat3 :: InflectionData.LexCat
  {- Strictness: b -}
669f64eab1a11feac3c6144dd5c31025
  $fEnumLexCat_$cenumFrom ::
    InflectionData.LexCat -> [InflectionData.LexCat]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ a42 :: InflectionData.LexCat ->
                 case a42 of x1 { DEFAULT ->
                 let {
                   x0 :: GHC.Prim.Int#
                   = GHC.Prim.dataToTag# @ InflectionData.LexCat x1
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.># x0 10) of wild {
                   GHC.Types.False -> InflectionData.$fEnumLexCat_go x0
                   GHC.Types.True -> GHC.Types.[] @ InflectionData.LexCat } }) -}
669f64eab1a11feac3c6144dd5c31025
  $fEnumLexCat_$cenumFromThen ::
    InflectionData.LexCat
    -> InflectionData.LexCat -> [InflectionData.LexCat]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a42 :: InflectionData.LexCat
                   b :: InflectionData.LexCat ->
                 case a42 of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 let {
                   a# :: GHC.Prim.Int#
                   = GHC.Prim.dataToTag# @ InflectionData.LexCat x1
                 } in
                 let {
                   b# :: GHC.Prim.Int#
                   = GHC.Prim.dataToTag# @ InflectionData.LexCat x2
                 } in
                 let {
                   $j :: GHC.Prim.Int# -> [InflectionData.LexCat]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ y :: GHC.Prim.Int#[OneShot] ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# b# a#) of wild {
                       GHC.Types.False
                       -> GHC.Enum.efdtIntDnFB
                            @ [InflectionData.LexCat]
                            InflectionData.$fEnumLexCat_c1
                            (GHC.Types.[] @ InflectionData.LexCat)
                            a#
                            b#
                            y
                       GHC.Types.True
                       -> GHC.Enum.efdtIntUpFB
                            @ [InflectionData.LexCat]
                            InflectionData.$fEnumLexCat_c1
                            (GHC.Types.[] @ InflectionData.LexCat)
                            a#
                            b#
                            y }
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.># a# b#) of wild {
                   GHC.Types.False -> $j 10 GHC.Types.True -> $j 0 } } }) -}
669f64eab1a11feac3c6144dd5c31025
  $fEnumLexCat_$cenumFromThenTo ::
    InflectionData.LexCat
    -> InflectionData.LexCat
    -> InflectionData.LexCat
    -> [InflectionData.LexCat]
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U>,
     Unfolding: (\ x1 :: InflectionData.LexCat
                   x2 :: InflectionData.LexCat
                   y :: InflectionData.LexCat ->
                 case x1 of x4 { DEFAULT ->
                 case x2 of x5 { DEFAULT ->
                 case y of x6 { DEFAULT ->
                 let {
                   x7 :: GHC.Prim.Int#
                   = GHC.Prim.dataToTag# @ InflectionData.LexCat x4
                 } in
                 let {
                   x8 :: GHC.Prim.Int#
                   = GHC.Prim.dataToTag# @ InflectionData.LexCat x5
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# x8 x7) of wild {
                   GHC.Types.False
                   -> GHC.Enum.efdtIntDnFB
                        @ [InflectionData.LexCat]
                        InflectionData.$fEnumLexCat_c
                        (GHC.Types.[] @ InflectionData.LexCat)
                        x7
                        x8
                        (GHC.Prim.dataToTag# @ InflectionData.LexCat x6)
                   GHC.Types.True
                   -> GHC.Enum.efdtIntUpFB
                        @ [InflectionData.LexCat]
                        InflectionData.$fEnumLexCat_c
                        (GHC.Types.[] @ InflectionData.LexCat)
                        x7
                        x8
                        (GHC.Prim.dataToTag# @ InflectionData.LexCat x6) } } } }) -}
669f64eab1a11feac3c6144dd5c31025
  $fEnumLexCat_$cenumFromTo ::
    InflectionData.LexCat
    -> InflectionData.LexCat -> [InflectionData.LexCat]
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ x :: InflectionData.LexCat
                   y :: InflectionData.LexCat ->
                 case x of x1 { DEFAULT ->
                 case y of x2 { DEFAULT ->
                 let {
                   x0 :: GHC.Prim.Int#
                   = GHC.Prim.dataToTag# @ InflectionData.LexCat x1
                 } in
                 let {
                   y1 :: GHC.Prim.Int#
                   = GHC.Prim.dataToTag# @ InflectionData.LexCat x2
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.># x0 y1) of wild {
                   GHC.Types.False
                   -> letrec {
                        go1 :: GHC.Prim.Int# -> [InflectionData.LexCat]
                          {- Arity: 1, Strictness: <L,U> -}
                        = \ x3 :: GHC.Prim.Int# ->
                          GHC.Types.:
                            @ InflectionData.LexCat
                            (case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# x3 0) of wild1 {
                               GHC.Types.False -> InflectionData.$fEnumLexCat1 x3
                               GHC.Types.True
                               -> case GHC.Prim.tagToEnum#
                                         @ GHC.Types.Bool
                                         (GHC.Prim.<=# x3 10) of wild2 {
                                    GHC.Types.False -> InflectionData.$fEnumLexCat1 x3
                                    GHC.Types.True
                                    -> GHC.Prim.tagToEnum# @ InflectionData.LexCat x3 } })
                            (case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.==# x3 y1) of wild1 {
                               GHC.Types.False -> go1 (GHC.Prim.+# x3 1)
                               GHC.Types.True -> GHC.Types.[] @ InflectionData.LexCat })
                      } in
                      go1 x0
                   GHC.Types.True -> GHC.Types.[] @ InflectionData.LexCat } } }) -}
669f64eab1a11feac3c6144dd5c31025
  $fEnumLexCat_$cfromEnum :: InflectionData.LexCat -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ a42 :: InflectionData.LexCat ->
                 case a42 of x1 { DEFAULT ->
                 GHC.Types.I# (GHC.Prim.dataToTag# @ InflectionData.LexCat x1) }) -}
669f64eab1a11feac3c6144dd5c31025
  $fEnumLexCat_$cpred ::
    InflectionData.LexCat -> InflectionData.LexCat
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a42 :: InflectionData.LexCat ->
                 case a42 of x1 { DEFAULT ->
                 case GHC.Prim.dataToTag# @ InflectionData.LexCat x1 of wild {
                   DEFAULT
                   -> GHC.Prim.tagToEnum#
                        @ InflectionData.LexCat
                        (GHC.Prim.+# wild (-1))
                   0 -> InflectionData.$fEnumLexCat2 } }) -}
669f64eab1a11feac3c6144dd5c31025
  $fEnumLexCat_$csucc ::
    InflectionData.LexCat -> InflectionData.LexCat
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ a42 :: InflectionData.LexCat ->
                 case a42 of x1 { DEFAULT ->
                 case GHC.Prim.dataToTag# @ InflectionData.LexCat x1 of wild {
                   DEFAULT
                   -> GHC.Prim.tagToEnum# @ InflectionData.LexCat (GHC.Prim.+# wild 1)
                   10 -> InflectionData.$fEnumLexCat3 } }) -}
669f64eab1a11feac3c6144dd5c31025
  $fEnumLexCat_$ctoEnum :: GHC.Types.Int -> InflectionData.LexCat
  {- Arity: 1, Strictness: <S,1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: GHC.Types.Int ->
                 case w of ww { GHC.Types.I# ww1 ->
                 InflectionData.$w$ctoEnum ww1 }) -}
669f64eab1a11feac3c6144dd5c31025
  $fEnumLexCat_c ::
    GHC.Types.Int -> [InflectionData.LexCat] -> [InflectionData.LexCat]
  {- Arity: 2, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int ys :: [InflectionData.LexCat] ->
                 GHC.Types.:
                   @ InflectionData.LexCat
                   (InflectionData.$fEnumLexCat_$ctoEnum x)
                   ys) -}
669f64eab1a11feac3c6144dd5c31025
  $fEnumLexCat_c1 ::
    GHC.Types.Int -> [InflectionData.LexCat] -> [InflectionData.LexCat]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: GHC.Types.Int ys :: [InflectionData.LexCat] ->
                 GHC.Types.:
                   @ InflectionData.LexCat
                   (case x of wild { GHC.Types.I# a42 ->
                    GHC.Prim.tagToEnum# @ InflectionData.LexCat a42 })
                   ys) -}
669f64eab1a11feac3c6144dd5c31025
  $fEnumLexCat_go :: GHC.Prim.Int# -> [InflectionData.LexCat]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
e96169dc03158e2e4c44e9f93a61e8ba
  $fEq(,,,,,,,,,,,,,,,,) ::
    (GHC.Classes.Eq a, GHC.Classes.Eq b, GHC.Classes.Eq c,
     GHC.Classes.Eq d, GHC.Classes.Eq e, GHC.Classes.Eq f,
     GHC.Classes.Eq g, GHC.Classes.Eq h, GHC.Classes.Eq i,
     GHC.Classes.Eq j, GHC.Classes.Eq k, GHC.Classes.Eq l,
     GHC.Classes.Eq m, GHC.Classes.Eq n, GHC.Classes.Eq o,
     GHC.Classes.Eq p, GHC.Classes.Eq q) =>
    GHC.Classes.Eq (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)
  DFunId[0]
  {- Arity: 17, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a42
                      @ b
                      @ c
                      @ d
                      @ e
                      @ f
                      @ g
                      @ h
                      @ i
                      @ j
                      @ k
                      @ l
                      @ m
                      @ n
                      @ o
                      @ p
                      @ q
                      $dEq :: GHC.Classes.Eq a42
                      $dEq1 :: GHC.Classes.Eq b
                      $dEq2 :: GHC.Classes.Eq c
                      $dEq3 :: GHC.Classes.Eq d
                      $dEq4 :: GHC.Classes.Eq e
                      $dEq5 :: GHC.Classes.Eq f
                      $dEq6 :: GHC.Classes.Eq g
                      $dEq7 :: GHC.Classes.Eq h
                      $dEq8 :: GHC.Classes.Eq i
                      $dEq9 :: GHC.Classes.Eq j
                      $dEq10 :: GHC.Classes.Eq k
                      $dEq11 :: GHC.Classes.Eq l
                      $dEq12 :: GHC.Classes.Eq m
                      $dEq13 :: GHC.Classes.Eq n
                      $dEq14 :: GHC.Classes.Eq o
                      $dEq15 :: GHC.Classes.Eq p
                      $dEq16 :: GHC.Classes.Eq q.
                  @ (a42, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)
                  (InflectionData.$fEq(,,,,,,,,,,,,,,,,)_$c==
                     @ a42
                     @ b
                     @ c
                     @ d
                     @ e
                     @ f
                     @ g
                     @ h
                     @ i
                     @ j
                     @ k
                     @ l
                     @ m
                     @ n
                     @ o
                     @ p
                     @ q
                     $dEq
                     $dEq1
                     $dEq2
                     $dEq3
                     $dEq4
                     $dEq5
                     $dEq6
                     $dEq7
                     $dEq8
                     $dEq9
                     $dEq10
                     $dEq11
                     $dEq12
                     $dEq13
                     $dEq14
                     $dEq15
                     $dEq16)
                  (InflectionData.$fEq(,,,,,,,,,,,,,,,,)_$c/=
                     @ a42
                     @ b
                     @ c
                     @ d
                     @ e
                     @ f
                     @ g
                     @ h
                     @ i
                     @ j
                     @ k
                     @ l
                     @ m
                     @ n
                     @ o
                     @ p
                     @ q
                     $dEq
                     $dEq1
                     $dEq2
                     $dEq3
                     $dEq4
                     $dEq5
                     $dEq6
                     $dEq7
                     $dEq8
                     $dEq9
                     $dEq10
                     $dEq11
                     $dEq12
                     $dEq13
                     $dEq14
                     $dEq15
                     $dEq16) -}
42063d11acd0ac098d5e9406612b7332
  $fEq(,,,,,,,,,,,,,,,,)_$c/= ::
    (GHC.Classes.Eq a, GHC.Classes.Eq b, GHC.Classes.Eq c,
     GHC.Classes.Eq d, GHC.Classes.Eq e, GHC.Classes.Eq f,
     GHC.Classes.Eq g, GHC.Classes.Eq h, GHC.Classes.Eq i,
     GHC.Classes.Eq j, GHC.Classes.Eq k, GHC.Classes.Eq l,
     GHC.Classes.Eq m, GHC.Classes.Eq n, GHC.Classes.Eq o,
     GHC.Classes.Eq p, GHC.Classes.Eq q) =>
    (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)
    -> (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)
    -> GHC.Types.Bool
  {- Arity: 19, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Unfolding: InlineRule (19, True, False)
                (\ @ a42
                   @ b
                   @ c
                   @ d
                   @ e
                   @ f
                   @ g
                   @ h
                   @ i
                   @ j
                   @ k
                   @ l
                   @ m
                   @ n
                   @ o
                   @ p
                   @ q
                   $dEq :: GHC.Classes.Eq a42
                   $dEq1 :: GHC.Classes.Eq b
                   $dEq2 :: GHC.Classes.Eq c
                   $dEq3 :: GHC.Classes.Eq d
                   $dEq4 :: GHC.Classes.Eq e
                   $dEq5 :: GHC.Classes.Eq f
                   $dEq6 :: GHC.Classes.Eq g
                   $dEq7 :: GHC.Classes.Eq h
                   $dEq8 :: GHC.Classes.Eq i
                   $dEq9 :: GHC.Classes.Eq j
                   $dEq10 :: GHC.Classes.Eq k
                   $dEq11 :: GHC.Classes.Eq l
                   $dEq12 :: GHC.Classes.Eq m
                   $dEq13 :: GHC.Classes.Eq n
                   $dEq14 :: GHC.Classes.Eq o
                   $dEq15 :: GHC.Classes.Eq p
                   $dEq16 :: GHC.Classes.Eq q
                   a43 :: (a42, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)
                   b1 :: (a42, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) ->
                 case InflectionData.$fEq(,,,,,,,,,,,,,,,,)_$c==
                        @ a42
                        @ b
                        @ c
                        @ d
                        @ e
                        @ f
                        @ g
                        @ h
                        @ i
                        @ j
                        @ k
                        @ l
                        @ m
                        @ n
                        @ o
                        @ p
                        @ q
                        $dEq
                        $dEq1
                        $dEq2
                        $dEq3
                        $dEq4
                        $dEq5
                        $dEq6
                        $dEq7
                        $dEq8
                        $dEq9
                        $dEq10
                        $dEq11
                        $dEq12
                        $dEq13
                        $dEq14
                        $dEq15
                        $dEq16
                        a43
                        b1 of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
084aef65be9962cb0a7201530dbcfeab
  $fEq(,,,,,,,,,,,,,,,,)_$c== ::
    (GHC.Classes.Eq a, GHC.Classes.Eq b, GHC.Classes.Eq c,
     GHC.Classes.Eq d, GHC.Classes.Eq e, GHC.Classes.Eq f,
     GHC.Classes.Eq g, GHC.Classes.Eq h, GHC.Classes.Eq i,
     GHC.Classes.Eq j, GHC.Classes.Eq k, GHC.Classes.Eq l,
     GHC.Classes.Eq m, GHC.Classes.Eq n, GHC.Classes.Eq o,
     GHC.Classes.Eq p, GHC.Classes.Eq q) =>
    (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)
    -> (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)
    -> GHC.Types.Bool
  {- Arity: 19, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (19, True, False)
                (\ @ a42
                   @ b
                   @ c
                   @ d
                   @ e
                   @ f
                   @ g
                   @ h
                   @ i
                   @ j
                   @ k
                   @ l
                   @ m
                   @ n
                   @ o
                   @ p
                   @ q
                   w :: GHC.Classes.Eq a42
                   w1 :: GHC.Classes.Eq b
                   w2 :: GHC.Classes.Eq c
                   w3 :: GHC.Classes.Eq d
                   w4 :: GHC.Classes.Eq e
                   w5 :: GHC.Classes.Eq f
                   w6 :: GHC.Classes.Eq g
                   w7 :: GHC.Classes.Eq h
                   w8 :: GHC.Classes.Eq i
                   w9 :: GHC.Classes.Eq j
                   w10 :: GHC.Classes.Eq k
                   w11 :: GHC.Classes.Eq l
                   w12 :: GHC.Classes.Eq m
                   w13 :: GHC.Classes.Eq n
                   w14 :: GHC.Classes.Eq o
                   w15 :: GHC.Classes.Eq p
                   w16 :: GHC.Classes.Eq q
                   w17 :: (a42, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)
                   w18 :: (a42, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) ->
                 case w17 of ww { (,,,,,,,,,,,,,,,,) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ->
                 case w18 of ww18 { (,,,,,,,,,,,,,,,,) ww19 ww20 ww21 ww22 ww23 ww24 ww25 ww26 ww27 ww28 ww29 ww30 ww31 ww32 ww33 ww34 ww35 ->
                 InflectionData.$w$c==
                   @ a42
                   @ b
                   @ c
                   @ d
                   @ e
                   @ f
                   @ g
                   @ h
                   @ i
                   @ j
                   @ k
                   @ l
                   @ m
                   @ n
                   @ o
                   @ p
                   @ q
                   w
                   w1
                   w2
                   w3
                   w4
                   w5
                   w6
                   w7
                   w8
                   w9
                   w10
                   w11
                   w12
                   w13
                   w14
                   w15
                   w16
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww17
                   ww19
                   ww20
                   ww21
                   ww22
                   ww23
                   ww24
                   ww25
                   ww26
                   ww27
                   ww28
                   ww29
                   ww30
                   ww31
                   ww32
                   ww33
                   ww34
                   ww35 } }) -}
ee0866be3055aa74ff8b437aa2ee4e77
  $fEq(,,,,,,,,,,,,,,,,)_$s$c/= ::
    (InflectionData.Express InflectionData.Gender,
     InflectionData.Express InflectionData.Animacy,
     InflectionData.Express InflectionData.Case,
     InflectionData.Express InflectionData.Number,
     InflectionData.Express InflectionData.Definiteness,
     InflectionData.Express InflectionData.Specificity,
     InflectionData.Express InflectionData.Topic,
     InflectionData.Express InflectionData.Person,
     InflectionData.Express InflectionData.Honorific,
     InflectionData.Express InflectionData.Polarity,
     InflectionData.Express InflectionData.Tense,
     InflectionData.Express InflectionData.Aspect,
     InflectionData.Express InflectionData.Mood,
     InflectionData.Express InflectionData.Voice,
     InflectionData.Express InflectionData.Evidentiality,
     InflectionData.Express InflectionData.Transitivity,
     InflectionData.Express InflectionData.Volition)
    -> (InflectionData.Express InflectionData.Gender,
        InflectionData.Express InflectionData.Animacy,
        InflectionData.Express InflectionData.Case,
        InflectionData.Express InflectionData.Number,
        InflectionData.Express InflectionData.Definiteness,
        InflectionData.Express InflectionData.Specificity,
        InflectionData.Express InflectionData.Topic,
        InflectionData.Express InflectionData.Person,
        InflectionData.Express InflectionData.Honorific,
        InflectionData.Express InflectionData.Polarity,
        InflectionData.Express InflectionData.Tense,
        InflectionData.Express InflectionData.Aspect,
        InflectionData.Express InflectionData.Mood,
        InflectionData.Express InflectionData.Voice,
        InflectionData.Express InflectionData.Evidentiality,
        InflectionData.Express InflectionData.Transitivity,
        InflectionData.Express InflectionData.Volition)
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLLLLLLLLLLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)><S(SLLLLLLLLLLLLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ a42 :: (InflectionData.Express InflectionData.Gender,
                           InflectionData.Express InflectionData.Animacy,
                           InflectionData.Express InflectionData.Case,
                           InflectionData.Express InflectionData.Number,
                           InflectionData.Express InflectionData.Definiteness,
                           InflectionData.Express InflectionData.Specificity,
                           InflectionData.Express InflectionData.Topic,
                           InflectionData.Express InflectionData.Person,
                           InflectionData.Express InflectionData.Honorific,
                           InflectionData.Express InflectionData.Polarity,
                           InflectionData.Express InflectionData.Tense,
                           InflectionData.Express InflectionData.Aspect,
                           InflectionData.Express InflectionData.Mood,
                           InflectionData.Express InflectionData.Voice,
                           InflectionData.Express InflectionData.Evidentiality,
                           InflectionData.Express InflectionData.Transitivity,
                           InflectionData.Express InflectionData.Volition)
                   b :: (InflectionData.Express InflectionData.Gender,
                         InflectionData.Express InflectionData.Animacy,
                         InflectionData.Express InflectionData.Case,
                         InflectionData.Express InflectionData.Number,
                         InflectionData.Express InflectionData.Definiteness,
                         InflectionData.Express InflectionData.Specificity,
                         InflectionData.Express InflectionData.Topic,
                         InflectionData.Express InflectionData.Person,
                         InflectionData.Express InflectionData.Honorific,
                         InflectionData.Express InflectionData.Polarity,
                         InflectionData.Express InflectionData.Tense,
                         InflectionData.Express InflectionData.Aspect,
                         InflectionData.Express InflectionData.Mood,
                         InflectionData.Express InflectionData.Voice,
                         InflectionData.Express InflectionData.Evidentiality,
                         InflectionData.Express InflectionData.Transitivity,
                         InflectionData.Express InflectionData.Volition) ->
                 case InflectionData.$fEq(,,,,,,,,,,,,,,,,)_$s$c== a42 b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
f605602381737acf563a95e688982c6f
  $fEq(,,,,,,,,,,,,,,,,)_$s$c== ::
    (InflectionData.Express InflectionData.Gender,
     InflectionData.Express InflectionData.Animacy,
     InflectionData.Express InflectionData.Case,
     InflectionData.Express InflectionData.Number,
     InflectionData.Express InflectionData.Definiteness,
     InflectionData.Express InflectionData.Specificity,
     InflectionData.Express InflectionData.Topic,
     InflectionData.Express InflectionData.Person,
     InflectionData.Express InflectionData.Honorific,
     InflectionData.Express InflectionData.Polarity,
     InflectionData.Express InflectionData.Tense,
     InflectionData.Express InflectionData.Aspect,
     InflectionData.Express InflectionData.Mood,
     InflectionData.Express InflectionData.Voice,
     InflectionData.Express InflectionData.Evidentiality,
     InflectionData.Express InflectionData.Transitivity,
     InflectionData.Express InflectionData.Volition)
    -> (InflectionData.Express InflectionData.Gender,
        InflectionData.Express InflectionData.Animacy,
        InflectionData.Express InflectionData.Case,
        InflectionData.Express InflectionData.Number,
        InflectionData.Express InflectionData.Definiteness,
        InflectionData.Express InflectionData.Specificity,
        InflectionData.Express InflectionData.Topic,
        InflectionData.Express InflectionData.Person,
        InflectionData.Express InflectionData.Honorific,
        InflectionData.Express InflectionData.Polarity,
        InflectionData.Express InflectionData.Tense,
        InflectionData.Express InflectionData.Aspect,
        InflectionData.Express InflectionData.Mood,
        InflectionData.Express InflectionData.Voice,
        InflectionData.Express InflectionData.Evidentiality,
        InflectionData.Express InflectionData.Transitivity,
        InflectionData.Express InflectionData.Volition)
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLLLLLLLLLLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)><S(SLLLLLLLLLLLLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: (InflectionData.Express InflectionData.Gender,
                         InflectionData.Express InflectionData.Animacy,
                         InflectionData.Express InflectionData.Case,
                         InflectionData.Express InflectionData.Number,
                         InflectionData.Express InflectionData.Definiteness,
                         InflectionData.Express InflectionData.Specificity,
                         InflectionData.Express InflectionData.Topic,
                         InflectionData.Express InflectionData.Person,
                         InflectionData.Express InflectionData.Honorific,
                         InflectionData.Express InflectionData.Polarity,
                         InflectionData.Express InflectionData.Tense,
                         InflectionData.Express InflectionData.Aspect,
                         InflectionData.Express InflectionData.Mood,
                         InflectionData.Express InflectionData.Voice,
                         InflectionData.Express InflectionData.Evidentiality,
                         InflectionData.Express InflectionData.Transitivity,
                         InflectionData.Express InflectionData.Volition)
                   w1 :: (InflectionData.Express InflectionData.Gender,
                          InflectionData.Express InflectionData.Animacy,
                          InflectionData.Express InflectionData.Case,
                          InflectionData.Express InflectionData.Number,
                          InflectionData.Express InflectionData.Definiteness,
                          InflectionData.Express InflectionData.Specificity,
                          InflectionData.Express InflectionData.Topic,
                          InflectionData.Express InflectionData.Person,
                          InflectionData.Express InflectionData.Honorific,
                          InflectionData.Express InflectionData.Polarity,
                          InflectionData.Express InflectionData.Tense,
                          InflectionData.Express InflectionData.Aspect,
                          InflectionData.Express InflectionData.Mood,
                          InflectionData.Express InflectionData.Voice,
                          InflectionData.Express InflectionData.Evidentiality,
                          InflectionData.Express InflectionData.Transitivity,
                          InflectionData.Express InflectionData.Volition) ->
                 case w of ww { (,,,,,,,,,,,,,,,,) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ->
                 case w1 of ww18 { (,,,,,,,,,,,,,,,,) ww19 ww20 ww21 ww22 ww23 ww24 ww25 ww26 ww27 ww28 ww29 ww30 ww31 ww32 ww33 ww34 ww35 ->
                 InflectionData.$w$s$c==
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww17
                   ww19
                   ww20
                   ww21
                   ww22
                   ww23
                   ww24
                   ww25
                   ww26
                   ww27
                   ww28
                   ww29
                   ww30
                   ww31
                   ww32
                   ww33
                   ww34
                   ww35 } }) -}
94ae8ea3aefe121c897c51d214d8506e
  $fEq(,,,,,,,,,,,,,,,,)_$s$fEq(,,,,,,,,,,,,,,,,) ::
    GHC.Classes.Eq
      (InflectionData.Express InflectionData.Gender,
       InflectionData.Express InflectionData.Animacy,
       InflectionData.Express InflectionData.Case,
       InflectionData.Express InflectionData.Number,
       InflectionData.Express InflectionData.Definiteness,
       InflectionData.Express InflectionData.Specificity,
       InflectionData.Express InflectionData.Topic,
       InflectionData.Express InflectionData.Person,
       InflectionData.Express InflectionData.Honorific,
       InflectionData.Express InflectionData.Polarity,
       InflectionData.Express InflectionData.Tense,
       InflectionData.Express InflectionData.Aspect,
       InflectionData.Express InflectionData.Mood,
       InflectionData.Express InflectionData.Voice,
       InflectionData.Express InflectionData.Evidentiality,
       InflectionData.Express InflectionData.Transitivity,
       InflectionData.Express InflectionData.Volition)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Gender,
                     InflectionData.Express InflectionData.Animacy,
                     InflectionData.Express InflectionData.Case,
                     InflectionData.Express InflectionData.Number,
                     InflectionData.Express InflectionData.Definiteness,
                     InflectionData.Express InflectionData.Specificity,
                     InflectionData.Express InflectionData.Topic,
                     InflectionData.Express InflectionData.Person,
                     InflectionData.Express InflectionData.Honorific,
                     InflectionData.Express InflectionData.Polarity,
                     InflectionData.Express InflectionData.Tense,
                     InflectionData.Express InflectionData.Aspect,
                     InflectionData.Express InflectionData.Mood,
                     InflectionData.Express InflectionData.Voice,
                     InflectionData.Express InflectionData.Evidentiality,
                     InflectionData.Express InflectionData.Transitivity,
                     InflectionData.Express InflectionData.Volition)
                  InflectionData.$fEq(,,,,,,,,,,,,,,,,)_$s$c==
                  InflectionData.$fEq(,,,,,,,,,,,,,,,,)_$s$c/= -}
0805e2c872c441491fbbd819376f13b8
  $fEqAnimacy :: GHC.Classes.Eq InflectionData.Animacy
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Animacy
                  InflectionData.$fEqAnimacy_$c==
                  InflectionData.$fEqAnimacy_$c/= -}
0805e2c872c441491fbbd819376f13b8
  $fEqAnimacy_$c/= ::
    InflectionData.Animacy -> InflectionData.Animacy -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a42 :: InflectionData.Animacy
                   b :: InflectionData.Animacy ->
                 case a42 of wild {
                   InflectionData.AN
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.AN -> GHC.Types.False }
                   InflectionData.HUM
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.HUM -> GHC.Types.False }
                   InflectionData.NHUM
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.NHUM -> GHC.Types.False }
                   InflectionData.ZO
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.ZO -> GHC.Types.False }
                   InflectionData.INAN
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.INAN -> GHC.Types.False } }) -}
0805e2c872c441491fbbd819376f13b8
  $fEqAnimacy_$c== ::
    InflectionData.Animacy -> InflectionData.Animacy -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: InflectionData.Animacy
                   ds1 :: InflectionData.Animacy ->
                 case ds of wild {
                   InflectionData.AN
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.AN -> GHC.Types.True }
                   InflectionData.HUM
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.HUM -> GHC.Types.True }
                   InflectionData.NHUM
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.NHUM -> GHC.Types.True }
                   InflectionData.ZO
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.ZO -> GHC.Types.True }
                   InflectionData.INAN
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.INAN -> GHC.Types.True } }) -}
851bcc3c94895d395e7cdf9501dbfb00
  $fEqAspect :: GHC.Classes.Eq InflectionData.Aspect
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Aspect
                  InflectionData.$fEqAspect_$c==
                  InflectionData.$fEqAspect_$c/= -}
851bcc3c94895d395e7cdf9501dbfb00
  $fEqAspect_$c/= ::
    InflectionData.Aspect -> InflectionData.Aspect -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a42 :: InflectionData.Aspect
                   b :: InflectionData.Aspect ->
                 case a42 of wild {
                   InflectionData.NNPROG
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.NNPROG -> GHC.Types.False }
                   InflectionData.PFV
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.PFV -> GHC.Types.False }
                   InflectionData.IPFV
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.IPFV -> GHC.Types.False }
                   InflectionData.HAB
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.HAB -> GHC.Types.False }
                   InflectionData.CONT
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.CONT -> GHC.Types.False }
                   InflectionData.NPROG
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.NPROG -> GHC.Types.False }
                   InflectionData.PROG
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.PROG -> GHC.Types.False } }) -}
851bcc3c94895d395e7cdf9501dbfb00
  $fEqAspect_$c== ::
    InflectionData.Aspect -> InflectionData.Aspect -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: InflectionData.Aspect
                   ds1 :: InflectionData.Aspect ->
                 case ds of wild {
                   InflectionData.NNPROG
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.NNPROG -> GHC.Types.True }
                   InflectionData.PFV
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.PFV -> GHC.Types.True }
                   InflectionData.IPFV
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.IPFV -> GHC.Types.True }
                   InflectionData.HAB
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.HAB -> GHC.Types.True }
                   InflectionData.CONT
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.CONT -> GHC.Types.True }
                   InflectionData.NPROG
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.NPROG -> GHC.Types.True }
                   InflectionData.PROG
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.PROG -> GHC.Types.True } }) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fEqCase :: GHC.Classes.Eq InflectionData.Case
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Case
                  InflectionData.$fEqCase_$c==
                  InflectionData.$fEqCase_$c/= -}
f0a3d2a3107908d84564bc0108b3c56f
  $fEqCase_$c/= ::
    InflectionData.Case -> InflectionData.Case -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a42 :: InflectionData.Case b :: InflectionData.Case ->
                 case a42 of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==#
                           (GHC.Prim.dataToTag# @ InflectionData.Case x1)
                           (GHC.Prim.dataToTag# @ InflectionData.Case x2)) of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fEqCase_$c== ::
    InflectionData.Case -> InflectionData.Case -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a42 :: InflectionData.Case b :: InflectionData.Case ->
                 case a42 of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.==#
                      (GHC.Prim.dataToTag# @ InflectionData.Case x1)
                      (GHC.Prim.dataToTag# @ InflectionData.Case x2)) } }) -}
250913a6cb1bc19b5a2a47309bfa066c
  $fEqDefiniteness :: GHC.Classes.Eq InflectionData.Definiteness
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Definiteness
                  InflectionData.$fEqDefiniteness_$c==
                  InflectionData.$fEqDefiniteness_$c/= -}
250913a6cb1bc19b5a2a47309bfa066c
  $fEqDefiniteness_$c/= ::
    InflectionData.Definiteness
    -> InflectionData.Definiteness -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a42 :: InflectionData.Definiteness
                   b :: InflectionData.Definiteness ->
                 case a42 of wild {
                   InflectionData.DEF
                   -> case b of wild1 {
                        InflectionData.DEF -> GHC.Types.False
                        InflectionData.INDF -> GHC.Types.True }
                   InflectionData.INDF
                   -> case b of wild1 {
                        InflectionData.DEF -> GHC.Types.True
                        InflectionData.INDF -> GHC.Types.False } }) -}
250913a6cb1bc19b5a2a47309bfa066c
  $fEqDefiniteness_$c== ::
    InflectionData.Definiteness
    -> InflectionData.Definiteness -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.Definiteness
                   ds1 :: InflectionData.Definiteness ->
                 case ds of wild {
                   InflectionData.DEF
                   -> case ds1 of wild1 {
                        InflectionData.DEF -> GHC.Types.True
                        InflectionData.INDF -> GHC.Types.False }
                   InflectionData.INDF
                   -> case ds1 of wild1 {
                        InflectionData.DEF -> GHC.Types.False
                        InflectionData.INDF -> GHC.Types.True } }) -}
cdbf36d6698b96caa0bed6ad294bfb83
  $fEqEvidentiality :: GHC.Classes.Eq InflectionData.Evidentiality
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Evidentiality
                  InflectionData.$fEqEvidentiality_$c==
                  InflectionData.$fEqEvidentiality_$c/= -}
cdbf36d6698b96caa0bed6ad294bfb83
  $fEqEvidentiality_$c/= ::
    InflectionData.Evidentiality
    -> InflectionData.Evidentiality -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a42 :: InflectionData.Evidentiality
                   b :: InflectionData.Evidentiality ->
                 case a42 of wild {
                   InflectionData.EXP
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.EXP -> GHC.Types.False }
                   InflectionData.VIS
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.VIS -> GHC.Types.False }
                   InflectionData.NVIS
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.NVIS -> GHC.Types.False }
                   InflectionData.AUD
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.AUD -> GHC.Types.False }
                   InflectionData.INFER
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.INFER -> GHC.Types.False }
                   InflectionData.REP
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.REP -> GHC.Types.False }
                   InflectionData.HSY
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.HSY -> GHC.Types.False }
                   InflectionData.QUO
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.QUO -> GHC.Types.False }
                   InflectionData.ASS
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.ASS -> GHC.Types.False } }) -}
cdbf36d6698b96caa0bed6ad294bfb83
  $fEqEvidentiality_$c== ::
    InflectionData.Evidentiality
    -> InflectionData.Evidentiality -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: InflectionData.Evidentiality
                   ds1 :: InflectionData.Evidentiality ->
                 case ds of wild {
                   InflectionData.EXP
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.EXP -> GHC.Types.True }
                   InflectionData.VIS
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.VIS -> GHC.Types.True }
                   InflectionData.NVIS
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.NVIS -> GHC.Types.True }
                   InflectionData.AUD
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.AUD -> GHC.Types.True }
                   InflectionData.INFER
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.INFER -> GHC.Types.True }
                   InflectionData.REP
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.REP -> GHC.Types.True }
                   InflectionData.HSY
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.HSY -> GHC.Types.True }
                   InflectionData.QUO
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.QUO -> GHC.Types.True }
                   InflectionData.ASS
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.ASS -> GHC.Types.True } }) -}
16ae30a99f963c81137d7828dad80939
  $fEqExpress ::
    GHC.Classes.Eq a => GHC.Classes.Eq (InflectionData.Express a)
  DFunId[0]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a42 $dEq :: GHC.Classes.Eq a42.
                  @ (InflectionData.Express a42)
                  (InflectionData.$fEqExpress_$c==11 @ a42 $dEq)
                  (InflectionData.$fEqExpress_$c/= @ a42 $dEq) -}
16ae30a99f963c81137d7828dad80939
  $fEqExpress_$c/= ::
    GHC.Classes.Eq a =>
    InflectionData.Express a
    -> InflectionData.Express a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a42
                   $dEq :: GHC.Classes.Eq a42
                   a43 :: InflectionData.Express a42
                   b :: InflectionData.Express a42 ->
                 case a43 of wild {
                   InflectionData.NoExpress
                   -> case b of wild1 {
                        InflectionData.NoExpress -> GHC.Types.False
                        InflectionData.Express ipv -> GHC.Types.True }
                   InflectionData.Express a44
                   -> case b of wild1 {
                        InflectionData.NoExpress -> GHC.Types.True
                        InflectionData.Express b1
                        -> case GHC.Classes.== @ a42 $dEq a44 b1 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } } }) -}
a3623d5adfe047fe3ed20dca1c56d9df
  $fEqExpress_$c== ::
    InflectionData.Gender -> InflectionData.Gender -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: InflectionData.Gender
                   ds1 :: InflectionData.Gender ->
                 case ds of wild {
                   InflectionData.M
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.M -> GHC.Types.True }
                   InflectionData.F
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.F -> GHC.Types.True }
                   InflectionData.COM
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.COM -> GHC.Types.True }
                   InflectionData.N
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.N -> GHC.Types.True } }) -}
9621aad11f276ef3a5a55be34fb30507
  $fEqExpress_$c==1 ::
    InflectionData.Honorific
    -> InflectionData.Honorific -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.Honorific
                   ds1 :: InflectionData.Honorific ->
                 case ds of wild {
                   InflectionData.FAM
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.FAM -> GHC.Types.True }
                   InflectionData.NEU
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.NEU -> GHC.Types.True }
                   InflectionData.FORM
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.FORM -> GHC.Types.True } }) -}
fed3c8348b016bc886742bbd8b88b80d
  $fEqExpress_$c==10 ::
    InflectionData.Volition
    -> InflectionData.Volition -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.Volition ds1 :: InflectionData.Volition ->
                 case ds of wild {
                   InflectionData.VOL
                   -> case ds1 of wild1 {
                        InflectionData.VOL -> GHC.Types.True
                        InflectionData.NVOL -> GHC.Types.False }
                   InflectionData.NVOL
                   -> case ds1 of wild1 {
                        InflectionData.VOL -> GHC.Types.False
                        InflectionData.NVOL -> GHC.Types.True } }) -}
16ae30a99f963c81137d7828dad80939
  $fEqExpress_$c==11 ::
    GHC.Classes.Eq a =>
    InflectionData.Express a
    -> InflectionData.Express a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a42
                   $dEq :: GHC.Classes.Eq a42
                   ds :: InflectionData.Express a42
                   ds1 :: InflectionData.Express a42 ->
                 case ds of wild {
                   InflectionData.NoExpress
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.True
                        InflectionData.Express ipv -> GHC.Types.False }
                   InflectionData.Express a43
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.False
                        InflectionData.Express b1
                        -> GHC.Classes.== @ a42 $dEq a43 b1 } }) -}
4e999fb9fa6728ec3df19bdd28482ccf
  $fEqExpress_$c==2 ::
    InflectionData.Mood -> InflectionData.Mood -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: InflectionData.Mood
                   ds1 :: InflectionData.Mood ->
                 case ds of wild {
                   InflectionData.IND
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.IND -> GHC.Types.True }
                   InflectionData.IRR
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.IRR -> GHC.Types.True }
                   InflectionData.DEO
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.DEO -> GHC.Types.True }
                   InflectionData.IMP
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.IMP -> GHC.Types.True }
                   InflectionData.JUS
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.JUS -> GHC.Types.True }
                   InflectionData.OPT
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.OPT -> GHC.Types.True }
                   InflectionData.EPIS
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.EPIS -> GHC.Types.True }
                   InflectionData.SBJV
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.SBJV -> GHC.Types.True }
                   InflectionData.POT
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.POT -> GHC.Types.True }
                   InflectionData.COND
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.COND -> GHC.Types.True } }) -}
5983d4e902f20ca491bfcf4389614668
  $fEqExpress_$c==3 ::
    InflectionData.Number -> InflectionData.Number -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: InflectionData.Number
                   ds1 :: InflectionData.Number ->
                 case ds of wild {
                   InflectionData.SG
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.SG -> GHC.Types.True }
                   InflectionData.DU
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.DU -> GHC.Types.True }
                   InflectionData.TRI
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.TRI -> GHC.Types.True }
                   InflectionData.PA
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.PA -> GHC.Types.True }
                   InflectionData.PL
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.PL -> GHC.Types.True } }) -}
8962065c67c1705ac692fcc8d9210bcd
  $fEqExpress_$c==4 ::
    InflectionData.Person -> InflectionData.Person -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: InflectionData.Person
                   ds1 :: InflectionData.Person ->
                 case ds of wild {
                   InflectionData.FIRST
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.FIRST -> GHC.Types.True }
                   InflectionData.FSTINCL
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.FSTINCL -> GHC.Types.True }
                   InflectionData.FSTEXCL
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.FSTEXCL -> GHC.Types.True }
                   InflectionData.SECOND
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.SECOND -> GHC.Types.True }
                   InflectionData.THIRD
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.THIRD -> GHC.Types.True }
                   InflectionData.THRDPROX
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.THRDPROX -> GHC.Types.True }
                   InflectionData.THRDOBV
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.THRDOBV -> GHC.Types.True } }) -}
eac2f82847484b9a87105d0693a7c5e1
  $fEqExpress_$c==5 ::
    InflectionData.Polarity
    -> InflectionData.Polarity -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.Polarity ds1 :: InflectionData.Polarity ->
                 case ds of wild {
                   InflectionData.AFF
                   -> case ds1 of wild1 {
                        InflectionData.AFF -> GHC.Types.True
                        InflectionData.NEG -> GHC.Types.False }
                   InflectionData.NEG
                   -> case ds1 of wild1 {
                        InflectionData.AFF -> GHC.Types.False
                        InflectionData.NEG -> GHC.Types.True } }) -}
697b496d198df68093293e68c7d50d9d
  $fEqExpress_$c==6 ::
    InflectionData.Specificity
    -> InflectionData.Specificity -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.Specificity
                   ds1 :: InflectionData.Specificity ->
                 case ds of wild {
                   InflectionData.SPEC
                   -> case ds1 of wild1 {
                        InflectionData.SPEC -> GHC.Types.True
                        InflectionData.NSPEC -> GHC.Types.False }
                   InflectionData.NSPEC
                   -> case ds1 of wild1 {
                        InflectionData.SPEC -> GHC.Types.False
                        InflectionData.NSPEC -> GHC.Types.True } }) -}
39f87e694fb863c1c8c61df134a24729
  $fEqExpress_$c==7 ::
    InflectionData.Topic -> InflectionData.Topic -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.Topic ds1 :: InflectionData.Topic ->
                 case ds of wild {
                   InflectionData.TOP
                   -> case ds1 of wild1 {
                        InflectionData.TOP -> GHC.Types.True
                        InflectionData.NTOP -> GHC.Types.False }
                   InflectionData.NTOP
                   -> case ds1 of wild1 {
                        InflectionData.TOP -> GHC.Types.False
                        InflectionData.NTOP -> GHC.Types.True } }) -}
57945260416d71dc87e31cac669b161f
  $fEqExpress_$c==8 ::
    InflectionData.Transitivity
    -> InflectionData.Transitivity -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: InflectionData.Transitivity
                   ds1 :: InflectionData.Transitivity ->
                 case ds of wild {
                   InflectionData.NTRANS
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.NTRANS -> GHC.Types.True }
                   InflectionData.TRANS
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.TRANS -> GHC.Types.True }
                   InflectionData.MTRANS
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.MTRANS -> GHC.Types.True }
                   InflectionData.DITRANS
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.DITRANS -> GHC.Types.True } }) -}
729607927630d1e92c199129334472f1
  $fEqExpress_$c==9 ::
    InflectionData.Voice -> InflectionData.Voice -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.Voice ds1 :: InflectionData.Voice ->
                 case ds of wild {
                   InflectionData.ACTIVE
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.ACTIVE -> GHC.Types.True }
                   InflectionData.MIDDLE
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.MIDDLE -> GHC.Types.True }
                   InflectionData.PASSIVE
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.PASSIVE -> GHC.Types.True } }) -}
16ae30a99f963c81137d7828dad80939
  $fEqExpress_$s$c==10 ::
    InflectionData.Express InflectionData.Volition
    -> InflectionData.Express InflectionData.Volition -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.Express InflectionData.Volition
                   ds1 :: InflectionData.Express InflectionData.Volition ->
                 case ds of wild {
                   InflectionData.NoExpress
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.True
                        InflectionData.Express ipv -> GHC.Types.False }
                   InflectionData.Express a42
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.False
                        InflectionData.Express b1
                        -> InflectionData.$fEqExpress_$c==10 a42 b1 } }) -}
a3623d5adfe047fe3ed20dca1c56d9df
  $fEqGender :: GHC.Classes.Eq InflectionData.Gender
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Gender
                  InflectionData.$fEqExpress_$c==
                  InflectionData.$fEqGender_$c/= -}
a3623d5adfe047fe3ed20dca1c56d9df
  $fEqGender_$c/= ::
    InflectionData.Gender -> InflectionData.Gender -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a42 :: InflectionData.Gender
                   b :: InflectionData.Gender ->
                 case a42 of wild {
                   InflectionData.M
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.M -> GHC.Types.False }
                   InflectionData.F
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.F -> GHC.Types.False }
                   InflectionData.COM
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.COM -> GHC.Types.False }
                   InflectionData.N
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.N -> GHC.Types.False } }) -}
9621aad11f276ef3a5a55be34fb30507
  $fEqHonorific :: GHC.Classes.Eq InflectionData.Honorific
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Honorific
                  InflectionData.$fEqExpress_$c==1
                  InflectionData.$fEqHonorific_$c/= -}
9621aad11f276ef3a5a55be34fb30507
  $fEqHonorific_$c/= ::
    InflectionData.Honorific
    -> InflectionData.Honorific -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a42 :: InflectionData.Honorific b :: InflectionData.Honorific ->
                 case a42 of wild {
                   InflectionData.FAM
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.FAM -> GHC.Types.False }
                   InflectionData.NEU
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.NEU -> GHC.Types.False }
                   InflectionData.FORM
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.FORM -> GHC.Types.False } }) -}
340b506daec6555591e5534716353ebf
  $fEqInflectionSystem ::
    GHC.Classes.Eq InflectionData.InflectionSystem
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.InflectionSystem
                  InflectionData.$fEqInflectionSystem_$c==
                  InflectionData.$fEqInflectionSystem_$c/= -}
340b506daec6555591e5534716353ebf
  $fEqInflectionSystem_$c/= ::
    InflectionData.InflectionSystem
    -> InflectionData.InflectionSystem -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLLLLLLLLLLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)><S(SLLLLLLLLLLLLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ a42 :: InflectionData.InflectionSystem
                   b :: InflectionData.InflectionSystem ->
                 case InflectionData.$fEqInflectionSystem_$c== a42 b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
340b506daec6555591e5534716353ebf
  $fEqInflectionSystem_$c== ::
    InflectionData.InflectionSystem
    -> InflectionData.InflectionSystem -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLLLLLLLLLLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)><S(SLLLLLLLLLLLLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: InflectionData.InflectionSystem
                   w1 :: InflectionData.InflectionSystem ->
                 case w of ww { InflectionData.InflectionSystem ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ->
                 case w1 of ww18 { InflectionData.InflectionSystem ww19 ww20 ww21 ww22 ww23 ww24 ww25 ww26 ww27 ww28 ww29 ww30 ww31 ww32 ww33 ww34 ww35 ->
                 InflectionData.$w$c==1
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww17
                   ww19
                   ww20
                   ww21
                   ww22
                   ww23
                   ww24
                   ww25
                   ww26
                   ww27
                   ww28
                   ww29
                   ww30
                   ww31
                   ww32
                   ww33
                   ww34
                   ww35 } }) -}
669f64eab1a11feac3c6144dd5c31025
  $fEqLexCat :: GHC.Classes.Eq InflectionData.LexCat
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.LexCat
                  InflectionData.$fEqLexCat_$c==
                  InflectionData.$fEqLexCat_$c/= -}
669f64eab1a11feac3c6144dd5c31025
  $fEqLexCat_$c/= ::
    InflectionData.LexCat -> InflectionData.LexCat -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a42 :: InflectionData.LexCat b :: InflectionData.LexCat ->
                 case a42 of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==#
                           (GHC.Prim.dataToTag# @ InflectionData.LexCat x1)
                           (GHC.Prim.dataToTag# @ InflectionData.LexCat x2)) of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
669f64eab1a11feac3c6144dd5c31025
  $fEqLexCat_$c== ::
    InflectionData.LexCat -> InflectionData.LexCat -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a42 :: InflectionData.LexCat b :: InflectionData.LexCat ->
                 case a42 of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.==#
                      (GHC.Prim.dataToTag# @ InflectionData.LexCat x1)
                      (GHC.Prim.dataToTag# @ InflectionData.LexCat x2)) } }) -}
ceb3098f5042182adffdb975609a3c68
  $fEqManifest ::
    GHC.Classes.Eq a => GHC.Classes.Eq (InflectionData.Manifest a)
  DFunId[0]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a42 $dEq :: GHC.Classes.Eq a42.
                  @ (InflectionData.Manifest a42)
                  (InflectionData.$fEqManifest_$c== @ a42 $dEq)
                  (InflectionData.$fEqManifest_$c/= @ a42 $dEq) -}
2dfbbd1074217167272ae1c4beb86ae1
  $fEqManifestSystem :: GHC.Classes.Eq InflectionData.ManifestSystem
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.ManifestSystem
                  InflectionData.$fEqManifestSystem_$c==
                  InflectionData.$fEqManifestSystem_$c/= -}
4915c9af120a1abacc70daf017aca910
  $fEqManifestSystem1 ::
    GHC.Classes.Eq
      (InflectionData.Express InflectionData.Gender,
       InflectionData.Express InflectionData.Animacy,
       InflectionData.Express InflectionData.Case,
       InflectionData.Express InflectionData.Number,
       InflectionData.Express InflectionData.Definiteness,
       InflectionData.Express InflectionData.Specificity,
       InflectionData.Express InflectionData.Topic,
       InflectionData.Express InflectionData.Person,
       InflectionData.Express InflectionData.Honorific,
       InflectionData.Express InflectionData.Polarity,
       InflectionData.Express InflectionData.Tense,
       InflectionData.Express InflectionData.Aspect,
       InflectionData.Express InflectionData.Mood,
       InflectionData.Express InflectionData.Voice,
       InflectionData.Express InflectionData.Evidentiality,
       InflectionData.Express InflectionData.Transitivity,
       InflectionData.Express InflectionData.Volition)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fEq(,,,,,,,,,,,,,,,,)_$s$fEq(,,,,,,,,,,,,,,,,) -}
2dfbbd1074217167272ae1c4beb86ae1
  $fEqManifestSystem_$c/= ::
    InflectionData.ManifestSystem
    -> InflectionData.ManifestSystem -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U,1*U,1*U)><S(SLL),1*U(1*U,1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ a42 :: InflectionData.ManifestSystem
                   b :: InflectionData.ManifestSystem ->
                 case InflectionData.$fEqManifestSystem_$c== a42 b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
2dfbbd1074217167272ae1c4beb86ae1
  $fEqManifestSystem_$c== ::
    InflectionData.ManifestSystem
    -> InflectionData.ManifestSystem -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U,1*U,1*U)><S(SLL),1*U(1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: InflectionData.ManifestSystem
                   w1 :: InflectionData.ManifestSystem ->
                 case w of ww { InflectionData.ManifestSystem ww1 ww2 ww3 ->
                 case w1 of ww4 { InflectionData.ManifestSystem ww5 ww6 ww7 ->
                 InflectionData.$w$c==2 ww1 ww2 ww3 ww5 ww6 ww7 } }) -}
e059f83f09fcdc5249b8d50e57a23162
  $fEqManifestSystem_$s$fEq(,) ::
    GHC.Classes.Eq
      (PhonemeData.Morpheme,
       (InflectionData.Express InflectionData.Gender,
        InflectionData.Express InflectionData.Animacy,
        InflectionData.Express InflectionData.Case,
        InflectionData.Express InflectionData.Number,
        InflectionData.Express InflectionData.Definiteness,
        InflectionData.Express InflectionData.Specificity,
        InflectionData.Express InflectionData.Topic,
        InflectionData.Express InflectionData.Person,
        InflectionData.Express InflectionData.Honorific,
        InflectionData.Express InflectionData.Polarity,
        InflectionData.Express InflectionData.Tense,
        InflectionData.Express InflectionData.Aspect,
        InflectionData.Express InflectionData.Mood,
        InflectionData.Express InflectionData.Voice,
        InflectionData.Express InflectionData.Evidentiality,
        InflectionData.Express InflectionData.Transitivity,
        InflectionData.Express InflectionData.Volition))
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (PhonemeData.Morpheme,
                     (InflectionData.Express InflectionData.Gender,
                      InflectionData.Express InflectionData.Animacy,
                      InflectionData.Express InflectionData.Case,
                      InflectionData.Express InflectionData.Number,
                      InflectionData.Express InflectionData.Definiteness,
                      InflectionData.Express InflectionData.Specificity,
                      InflectionData.Express InflectionData.Topic,
                      InflectionData.Express InflectionData.Person,
                      InflectionData.Express InflectionData.Honorific,
                      InflectionData.Express InflectionData.Polarity,
                      InflectionData.Express InflectionData.Tense,
                      InflectionData.Express InflectionData.Aspect,
                      InflectionData.Express InflectionData.Mood,
                      InflectionData.Express InflectionData.Voice,
                      InflectionData.Express InflectionData.Evidentiality,
                      InflectionData.Express InflectionData.Transitivity,
                      InflectionData.Express InflectionData.Volition))
                  (GHC.Classes.$fEq(,)_$c==
                     @ PhonemeData.Morpheme
                     @ (InflectionData.Express InflectionData.Gender,
                        InflectionData.Express InflectionData.Animacy,
                        InflectionData.Express InflectionData.Case,
                        InflectionData.Express InflectionData.Number,
                        InflectionData.Express InflectionData.Definiteness,
                        InflectionData.Express InflectionData.Specificity,
                        InflectionData.Express InflectionData.Topic,
                        InflectionData.Express InflectionData.Person,
                        InflectionData.Express InflectionData.Honorific,
                        InflectionData.Express InflectionData.Polarity,
                        InflectionData.Express InflectionData.Tense,
                        InflectionData.Express InflectionData.Aspect,
                        InflectionData.Express InflectionData.Mood,
                        InflectionData.Express InflectionData.Voice,
                        InflectionData.Express InflectionData.Evidentiality,
                        InflectionData.Express InflectionData.Transitivity,
                        InflectionData.Express InflectionData.Volition)
                     PhonemeData.$fEqMorpheme
                     InflectionData.$fEqManifestSystem1)
                  (GHC.Classes.$fEq(,)_$c/=
                     @ PhonemeData.Morpheme
                     @ (InflectionData.Express InflectionData.Gender,
                        InflectionData.Express InflectionData.Animacy,
                        InflectionData.Express InflectionData.Case,
                        InflectionData.Express InflectionData.Number,
                        InflectionData.Express InflectionData.Definiteness,
                        InflectionData.Express InflectionData.Specificity,
                        InflectionData.Express InflectionData.Topic,
                        InflectionData.Express InflectionData.Person,
                        InflectionData.Express InflectionData.Honorific,
                        InflectionData.Express InflectionData.Polarity,
                        InflectionData.Express InflectionData.Tense,
                        InflectionData.Express InflectionData.Aspect,
                        InflectionData.Express InflectionData.Mood,
                        InflectionData.Express InflectionData.Voice,
                        InflectionData.Express InflectionData.Evidentiality,
                        InflectionData.Express InflectionData.Transitivity,
                        InflectionData.Express InflectionData.Volition)
                     PhonemeData.$fEqMorpheme
                     InflectionData.$fEqManifestSystem1) -}
af5ddf409df7e34b7ae5f58c0bd0fff6
  $fEqManifestType :: GHC.Classes.Eq InflectionData.ManifestType
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.ManifestType
                  InflectionData.$fEqManifestType_$c==
                  InflectionData.$fEqManifestType_$c/= -}
af5ddf409df7e34b7ae5f58c0bd0fff6
  $fEqManifestType_$c/= ::
    InflectionData.ManifestType
    -> InflectionData.ManifestType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a42 :: InflectionData.ManifestType
                   b :: InflectionData.ManifestType ->
                 case a42 of wild {
                   InflectionData.Particle
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.Particle -> GHC.Types.False }
                   InflectionData.Prefix
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.Prefix -> GHC.Types.False }
                   InflectionData.Suffix
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.Suffix -> GHC.Types.False } }) -}
af5ddf409df7e34b7ae5f58c0bd0fff6
  $fEqManifestType_$c== ::
    InflectionData.ManifestType
    -> InflectionData.ManifestType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.ManifestType
                   ds1 :: InflectionData.ManifestType ->
                 case ds of wild {
                   InflectionData.Particle
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.Particle -> GHC.Types.True }
                   InflectionData.Prefix
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.Prefix -> GHC.Types.True }
                   InflectionData.Suffix
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.Suffix -> GHC.Types.True } }) -}
ceb3098f5042182adffdb975609a3c68
  $fEqManifest_$c/= ::
    GHC.Classes.Eq a =>
    InflectionData.Manifest a
    -> InflectionData.Manifest a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a42
                   $dEq :: GHC.Classes.Eq a42
                   a43 :: InflectionData.Manifest a42
                   b :: InflectionData.Manifest a42 ->
                 case a43 of wild {
                   InflectionData.NoManifest
                   -> case b of wild1 {
                        InflectionData.NoManifest -> GHC.Types.False
                        InflectionData.Manifest ipv ipv1 -> GHC.Types.True }
                   InflectionData.Manifest a44 a45
                   -> case b of wild1 {
                        InflectionData.NoManifest -> GHC.Types.True
                        InflectionData.Manifest b1 b2
                        -> case GHC.Classes.$fEq[]_$c==
                                  @ (InflectionData.LexCat,
                                     InflectionData.ManifestType,
                                     GHC.Types.Int)
                                  InflectionData.$fEqManifest_$s$fEq(,,)
                                  a44
                                  b1 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True
                             -> case GHC.Classes.== @ a42 $dEq a45 b2 of wild3 {
                                  GHC.Types.False -> GHC.Types.True
                                  GHC.Types.True -> GHC.Types.False } } } }) -}
ceb3098f5042182adffdb975609a3c68
  $fEqManifest_$c== ::
    GHC.Classes.Eq a =>
    InflectionData.Manifest a
    -> InflectionData.Manifest a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a42
                   $dEq :: GHC.Classes.Eq a42
                   ds :: InflectionData.Manifest a42
                   ds1 :: InflectionData.Manifest a42 ->
                 case ds of wild {
                   InflectionData.NoManifest
                   -> case ds1 of wild1 {
                        InflectionData.NoManifest -> GHC.Types.True
                        InflectionData.Manifest ipv ipv1 -> GHC.Types.False }
                   InflectionData.Manifest a43 a44
                   -> case ds1 of wild1 {
                        InflectionData.NoManifest -> GHC.Types.False
                        InflectionData.Manifest b1 b2
                        -> case GHC.Classes.$fEq[]_$c==
                                  @ (InflectionData.LexCat,
                                     InflectionData.ManifestType,
                                     GHC.Types.Int)
                                  InflectionData.$fEqManifest_$s$fEq(,,)
                                  a43
                                  b1 of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True -> GHC.Classes.== @ a42 $dEq a44 b2 } } }) -}
ceb3098f5042182adffdb975609a3c68
  $fEqManifest_$s$c==16 ::
    InflectionData.Manifest [InflectionData.Volition]
    -> InflectionData.Manifest [InflectionData.Volition]
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: InflectionData.Manifest
                           [InflectionData.Volition]
                   ds1 :: InflectionData.Manifest [InflectionData.Volition] ->
                 case ds of wild {
                   InflectionData.NoManifest
                   -> case ds1 of wild1 {
                        InflectionData.NoManifest -> GHC.Types.True
                        InflectionData.Manifest ipv ipv1 -> GHC.Types.False }
                   InflectionData.Manifest a42 a43
                   -> case ds1 of wild1 {
                        InflectionData.NoManifest -> GHC.Types.False
                        InflectionData.Manifest b1 b2
                        -> case GHC.Classes.$fEq[]_$c==
                                  @ (InflectionData.LexCat,
                                     InflectionData.ManifestType,
                                     GHC.Types.Int)
                                  InflectionData.$fEqManifest_$s$fEq(,,)
                                  a42
                                  b1 of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> GHC.Classes.$fEq[]_$c==
                                  @ InflectionData.Volition
                                  InflectionData.$fEqVolition
                                  a43
                                  b2 } } }) -}
9814841ef2ca14942872bfb35fc0eaec
  $fEqManifest_$s$fEq(,,) ::
    GHC.Classes.Eq
      (InflectionData.LexCat, InflectionData.ManifestType, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.LexCat,
                     InflectionData.ManifestType,
                     GHC.Types.Int)
                  (GHC.Classes.$fEq(,,)_$c==
                     @ InflectionData.LexCat
                     @ InflectionData.ManifestType
                     @ GHC.Types.Int
                     InflectionData.$fEqLexCat
                     InflectionData.$fEqManifestType
                     GHC.Classes.$fEqInt)
                  InflectionData.$fEqManifest_$s$fEq(,,)_$c/= -}
79852e9878c4dbcefed2635b09e0e76e
  $fEqManifest_$s$fEq(,,)_$c/= ::
    (InflectionData.LexCat, InflectionData.ManifestType, GHC.Types.Int)
    -> (InflectionData.LexCat,
        InflectionData.ManifestType,
        GHC.Types.Int)
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U,1*U,1*U(U))><S(SLL),1*U(1*U,1*U,1*U(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ a42 :: (InflectionData.LexCat,
                           InflectionData.ManifestType,
                           GHC.Types.Int)
                   b1 :: (InflectionData.LexCat,
                          InflectionData.ManifestType,
                          GHC.Types.Int) ->
                 case GHC.Classes.$fEq(,,)_$c==
                        @ InflectionData.LexCat
                        @ InflectionData.ManifestType
                        @ GHC.Types.Int
                        InflectionData.$fEqLexCat
                        InflectionData.$fEqManifestType
                        GHC.Classes.$fEqInt
                        a42
                        b1 of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
4e999fb9fa6728ec3df19bdd28482ccf
  $fEqMood :: GHC.Classes.Eq InflectionData.Mood
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Mood
                  InflectionData.$fEqExpress_$c==2
                  InflectionData.$fEqMood_$c/= -}
4e999fb9fa6728ec3df19bdd28482ccf
  $fEqMood_$c/= ::
    InflectionData.Mood -> InflectionData.Mood -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a42 :: InflectionData.Mood
                   b :: InflectionData.Mood ->
                 case a42 of wild {
                   InflectionData.IND
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.IND -> GHC.Types.False }
                   InflectionData.IRR
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.IRR -> GHC.Types.False }
                   InflectionData.DEO
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.DEO -> GHC.Types.False }
                   InflectionData.IMP
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.IMP -> GHC.Types.False }
                   InflectionData.JUS
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.JUS -> GHC.Types.False }
                   InflectionData.OPT
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.OPT -> GHC.Types.False }
                   InflectionData.EPIS
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.EPIS -> GHC.Types.False }
                   InflectionData.SBJV
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.SBJV -> GHC.Types.False }
                   InflectionData.POT
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.POT -> GHC.Types.False }
                   InflectionData.COND
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.COND -> GHC.Types.False } }) -}
5983d4e902f20ca491bfcf4389614668
  $fEqNumber :: GHC.Classes.Eq InflectionData.Number
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Number
                  InflectionData.$fEqExpress_$c==3
                  InflectionData.$fEqNumber_$c/= -}
5983d4e902f20ca491bfcf4389614668
  $fEqNumber_$c/= ::
    InflectionData.Number -> InflectionData.Number -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a42 :: InflectionData.Number
                   b :: InflectionData.Number ->
                 case a42 of wild {
                   InflectionData.SG
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.SG -> GHC.Types.False }
                   InflectionData.DU
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.DU -> GHC.Types.False }
                   InflectionData.TRI
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.TRI -> GHC.Types.False }
                   InflectionData.PA
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.PA -> GHC.Types.False }
                   InflectionData.PL
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.PL -> GHC.Types.False } }) -}
8962065c67c1705ac692fcc8d9210bcd
  $fEqPerson :: GHC.Classes.Eq InflectionData.Person
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Person
                  InflectionData.$fEqExpress_$c==4
                  InflectionData.$fEqPerson_$c/= -}
8962065c67c1705ac692fcc8d9210bcd
  $fEqPerson_$c/= ::
    InflectionData.Person -> InflectionData.Person -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a42 :: InflectionData.Person
                   b :: InflectionData.Person ->
                 case a42 of wild {
                   InflectionData.FIRST
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.FIRST -> GHC.Types.False }
                   InflectionData.FSTINCL
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.FSTINCL -> GHC.Types.False }
                   InflectionData.FSTEXCL
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.FSTEXCL -> GHC.Types.False }
                   InflectionData.SECOND
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.SECOND -> GHC.Types.False }
                   InflectionData.THIRD
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.THIRD -> GHC.Types.False }
                   InflectionData.THRDPROX
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.THRDPROX -> GHC.Types.False }
                   InflectionData.THRDOBV
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.THRDOBV -> GHC.Types.False } }) -}
eac2f82847484b9a87105d0693a7c5e1
  $fEqPolarity :: GHC.Classes.Eq InflectionData.Polarity
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Polarity
                  InflectionData.$fEqExpress_$c==5
                  InflectionData.$fEqPolarity_$c/= -}
eac2f82847484b9a87105d0693a7c5e1
  $fEqPolarity_$c/= ::
    InflectionData.Polarity
    -> InflectionData.Polarity -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a42 :: InflectionData.Polarity b :: InflectionData.Polarity ->
                 case a42 of wild {
                   InflectionData.AFF
                   -> case b of wild1 {
                        InflectionData.AFF -> GHC.Types.False
                        InflectionData.NEG -> GHC.Types.True }
                   InflectionData.NEG
                   -> case b of wild1 {
                        InflectionData.AFF -> GHC.Types.True
                        InflectionData.NEG -> GHC.Types.False } }) -}
697b496d198df68093293e68c7d50d9d
  $fEqSpecificity :: GHC.Classes.Eq InflectionData.Specificity
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Specificity
                  InflectionData.$fEqExpress_$c==6
                  InflectionData.$fEqSpecificity_$c/= -}
697b496d198df68093293e68c7d50d9d
  $fEqSpecificity_$c/= ::
    InflectionData.Specificity
    -> InflectionData.Specificity -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a42 :: InflectionData.Specificity
                   b :: InflectionData.Specificity ->
                 case a42 of wild {
                   InflectionData.SPEC
                   -> case b of wild1 {
                        InflectionData.SPEC -> GHC.Types.False
                        InflectionData.NSPEC -> GHC.Types.True }
                   InflectionData.NSPEC
                   -> case b of wild1 {
                        InflectionData.SPEC -> GHC.Types.True
                        InflectionData.NSPEC -> GHC.Types.False } }) -}
b52863b70f3cc5626b7d1db2a6c4ef40
  $fEqTense :: GHC.Classes.Eq InflectionData.Tense
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Tense
                  InflectionData.$fEqTense_$c==
                  InflectionData.$fEqTense_$c/= -}
b52863b70f3cc5626b7d1db2a6c4ef40
  $fEqTense_$c/= ::
    InflectionData.Tense -> InflectionData.Tense -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a42 :: InflectionData.Tense b :: InflectionData.Tense ->
                 case a42 of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==#
                           (GHC.Prim.dataToTag# @ InflectionData.Tense x1)
                           (GHC.Prim.dataToTag# @ InflectionData.Tense x2)) of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
b52863b70f3cc5626b7d1db2a6c4ef40
  $fEqTense_$c== ::
    InflectionData.Tense -> InflectionData.Tense -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a42 :: InflectionData.Tense b :: InflectionData.Tense ->
                 case a42 of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.==#
                      (GHC.Prim.dataToTag# @ InflectionData.Tense x1)
                      (GHC.Prim.dataToTag# @ InflectionData.Tense x2)) } }) -}
39f87e694fb863c1c8c61df134a24729
  $fEqTopic :: GHC.Classes.Eq InflectionData.Topic
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Topic
                  InflectionData.$fEqExpress_$c==7
                  InflectionData.$fEqTopic_$c/= -}
39f87e694fb863c1c8c61df134a24729
  $fEqTopic_$c/= ::
    InflectionData.Topic -> InflectionData.Topic -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a42 :: InflectionData.Topic b :: InflectionData.Topic ->
                 case a42 of wild {
                   InflectionData.TOP
                   -> case b of wild1 {
                        InflectionData.TOP -> GHC.Types.False
                        InflectionData.NTOP -> GHC.Types.True }
                   InflectionData.NTOP
                   -> case b of wild1 {
                        InflectionData.TOP -> GHC.Types.True
                        InflectionData.NTOP -> GHC.Types.False } }) -}
57945260416d71dc87e31cac669b161f
  $fEqTransitivity :: GHC.Classes.Eq InflectionData.Transitivity
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Transitivity
                  InflectionData.$fEqExpress_$c==8
                  InflectionData.$fEqTransitivity_$c/= -}
57945260416d71dc87e31cac669b161f
  $fEqTransitivity_$c/= ::
    InflectionData.Transitivity
    -> InflectionData.Transitivity -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a42 :: InflectionData.Transitivity
                   b :: InflectionData.Transitivity ->
                 case a42 of wild {
                   InflectionData.NTRANS
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.NTRANS -> GHC.Types.False }
                   InflectionData.TRANS
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.TRANS -> GHC.Types.False }
                   InflectionData.MTRANS
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.MTRANS -> GHC.Types.False }
                   InflectionData.DITRANS
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.DITRANS -> GHC.Types.False } }) -}
729607927630d1e92c199129334472f1
  $fEqVoice :: GHC.Classes.Eq InflectionData.Voice
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Voice
                  InflectionData.$fEqExpress_$c==9
                  InflectionData.$fEqVoice_$c/= -}
729607927630d1e92c199129334472f1
  $fEqVoice_$c/= ::
    InflectionData.Voice -> InflectionData.Voice -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a42 :: InflectionData.Voice b :: InflectionData.Voice ->
                 case a42 of wild {
                   InflectionData.ACTIVE
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.ACTIVE -> GHC.Types.False }
                   InflectionData.MIDDLE
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.MIDDLE -> GHC.Types.False }
                   InflectionData.PASSIVE
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.PASSIVE -> GHC.Types.False } }) -}
fed3c8348b016bc886742bbd8b88b80d
  $fEqVolition :: GHC.Classes.Eq InflectionData.Volition
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Volition
                  InflectionData.$fEqExpress_$c==10
                  InflectionData.$fEqVolition_$c/= -}
fed3c8348b016bc886742bbd8b88b80d
  $fEqVolition_$c/= ::
    InflectionData.Volition
    -> InflectionData.Volition -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a42 :: InflectionData.Volition b :: InflectionData.Volition ->
                 case a42 of wild {
                   InflectionData.VOL
                   -> case b of wild1 {
                        InflectionData.VOL -> GHC.Types.False
                        InflectionData.NVOL -> GHC.Types.True }
                   InflectionData.NVOL
                   -> case b of wild1 {
                        InflectionData.VOL -> GHC.Types.True
                        InflectionData.NVOL -> GHC.Types.False } }) -}
0805e2c872c441491fbbd819376f13b8
  $fReadAnimacy :: GHC.Read.Read InflectionData.Animacy
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Animacy
                  InflectionData.$fReadAnimacy_$s$dmreadsPrec
                  InflectionData.$fReadAnimacy24
                  InflectionData.$fReadAnimacy_$creadPrec
                  InflectionData.$fReadAnimacy_$creadListPrec -}
0805e2c872c441491fbbd819376f13b8
  $fReadAnimacy1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Animacy] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.Animacy]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.Animacy
                   InflectionData.$fReadAnimacy2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Animacy>_R))
                   @ b
                   eta1) -}
0805e2c872c441491fbbd819376f13b8
  $fReadAnimacy10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Animacy -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Animacy
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.INAN) -}
a3255b03dbfba9bdaa88662ab7e47762
  $fReadAnimacy11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "INAN"#) -}
0805e2c872c441491fbbd819376f13b8
  $fReadAnimacy12 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadAnimacy14,
                  InflectionData.$fReadAnimacy13
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Animacy>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Animacy>_R))))) -}
0805e2c872c441491fbbd819376f13b8
  $fReadAnimacy13 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Animacy -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Animacy
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.ZO) -}
9f682fa9c26673db34a323b8498d6cac
  $fReadAnimacy14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ZO"#) -}
0805e2c872c441491fbbd819376f13b8
  $fReadAnimacy15 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadAnimacy17,
                  InflectionData.$fReadAnimacy16
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Animacy>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Animacy>_R))))) -}
0805e2c872c441491fbbd819376f13b8
  $fReadAnimacy16 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Animacy -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Animacy
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.NHUM) -}
23dce5885ab68c46d4cb13ae4c6a69f5
  $fReadAnimacy17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NHUM"#) -}
0805e2c872c441491fbbd819376f13b8
  $fReadAnimacy18 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadAnimacy20,
                  InflectionData.$fReadAnimacy19
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Animacy>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Animacy>_R))))) -}
0805e2c872c441491fbbd819376f13b8
  $fReadAnimacy19 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Animacy -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Animacy
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.HUM) -}
0805e2c872c441491fbbd819376f13b8
  $fReadAnimacy2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Animacy
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Animacy
                   InflectionData.$fReadAnimacy3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.Animacy>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.Animacy>_R)))) -}
6a5849656bfa9d0af9ad7398a3294493
  $fReadAnimacy20 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "HUM"#) -}
0805e2c872c441491fbbd819376f13b8
  $fReadAnimacy21 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadAnimacy23,
                  InflectionData.$fReadAnimacy22
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Animacy>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Animacy>_R))))) -}
0805e2c872c441491fbbd819376f13b8
  $fReadAnimacy22 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Animacy -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Animacy
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.AN) -}
9da93159ae27eda3d1015cb485fcb6eb
  $fReadAnimacy23 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AN"#) -}
0805e2c872c441491fbbd819376f13b8
  $fReadAnimacy24 ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Animacy]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Animacy]
                   InflectionData.$fReadAnimacy25) -}
0805e2c872c441491fbbd819376f13b8
  $fReadAnimacy25 ::
    Text.ParserCombinators.ReadP.P [InflectionData.Animacy]
  {- Unfolding: (GHC.Read.$wa
                   @ InflectionData.Animacy
                   InflectionData.$fReadAnimacy2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Animacy>_R))
                   @ [InflectionData.Animacy]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                      @ [InflectionData.Animacy])) -}
0805e2c872c441491fbbd819376f13b8
  $fReadAnimacy3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Animacy -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: InflectionData.Animacy
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ InflectionData.Animacy
                   InflectionData.$fReadAnimacy4
                   eta
                   @ b
                   eta1) -}
0805e2c872c441491fbbd819376f13b8
  $fReadAnimacy4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)
                   InflectionData.$fReadAnimacy21
                   InflectionData.$fReadAnimacy5) -}
0805e2c872c441491fbbd819376f13b8
  $fReadAnimacy5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)
                   InflectionData.$fReadAnimacy18
                   InflectionData.$fReadAnimacy6) -}
0805e2c872c441491fbbd819376f13b8
  $fReadAnimacy6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)
                   InflectionData.$fReadAnimacy15
                   InflectionData.$fReadAnimacy7) -}
0805e2c872c441491fbbd819376f13b8
  $fReadAnimacy7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)
                   InflectionData.$fReadAnimacy12
                   InflectionData.$fReadAnimacy8) -}
0805e2c872c441491fbbd819376f13b8
  $fReadAnimacy8 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)
                   InflectionData.$fReadAnimacy9
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           InflectionData.Animacy))) -}
0805e2c872c441491fbbd819376f13b8
  $fReadAnimacy9 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadAnimacy11,
                  InflectionData.$fReadAnimacy10
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Animacy>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Animacy>_R))))) -}
0805e2c872c441491fbbd819376f13b8
  $fReadAnimacy_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [InflectionData.Animacy]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadAnimacy1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.Animacy]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.Animacy]>_R))) -}
0805e2c872c441491fbbd819376f13b8
  $fReadAnimacy_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadAnimacy2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.Animacy>_R)) -}
0805e2c872c441491fbbd819376f13b8
  $fReadAnimacy_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Animacy
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ InflectionData.Animacy
                   InflectionData.$fReadAnimacy_$creadPrec
                   eta) -}
851bcc3c94895d395e7cdf9501dbfb00
  $fReadAspect :: GHC.Read.Read InflectionData.Aspect
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Aspect
                  InflectionData.$fReadAspect_$s$dmreadsPrec
                  InflectionData.$fReadAspect32
                  InflectionData.$fReadAspect_$creadPrec
                  InflectionData.$fReadAspect_$creadListPrec -}
851bcc3c94895d395e7cdf9501dbfb00
  $fReadAspect1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Aspect] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.Aspect]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.Aspect
                   InflectionData.$fReadAspect2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Aspect>_R))
                   @ b
                   eta1) -}
851bcc3c94895d395e7cdf9501dbfb00
  $fReadAspect10 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)
                   InflectionData.$fReadAspect11
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           InflectionData.Aspect))) -}
851bcc3c94895d395e7cdf9501dbfb00
  $fReadAspect11 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadAspect13,
                  InflectionData.$fReadAspect12
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Aspect>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Aspect>_R))))) -}
851bcc3c94895d395e7cdf9501dbfb00
  $fReadAspect12 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Aspect -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Aspect -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.PROG) -}
6631d3037d3e621c6c769dacf7b6c8a8
  $fReadAspect13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PROG"#) -}
851bcc3c94895d395e7cdf9501dbfb00
  $fReadAspect14 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadAspect16,
                  InflectionData.$fReadAspect15
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Aspect>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Aspect>_R))))) -}
851bcc3c94895d395e7cdf9501dbfb00
  $fReadAspect15 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Aspect -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Aspect -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.NPROG) -}
a107d0c9592e515c15838186c96869f5
  $fReadAspect16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NPROG"#) -}
851bcc3c94895d395e7cdf9501dbfb00
  $fReadAspect17 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadAspect19,
                  InflectionData.$fReadAspect18
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Aspect>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Aspect>_R))))) -}
851bcc3c94895d395e7cdf9501dbfb00
  $fReadAspect18 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Aspect -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Aspect -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.CONT) -}
ea26d9cbeeb199fd4300ec04f677da10
  $fReadAspect19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "CONT"#) -}
851bcc3c94895d395e7cdf9501dbfb00
  $fReadAspect2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Aspect
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Aspect
                   InflectionData.$fReadAspect3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.Aspect>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.Aspect>_R)))) -}
851bcc3c94895d395e7cdf9501dbfb00
  $fReadAspect20 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadAspect22,
                  InflectionData.$fReadAspect21
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Aspect>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Aspect>_R))))) -}
851bcc3c94895d395e7cdf9501dbfb00
  $fReadAspect21 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Aspect -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Aspect -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.HAB) -}
16496a35cce428d048d06d05b12e03ee
  $fReadAspect22 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "HAB"#) -}
851bcc3c94895d395e7cdf9501dbfb00
  $fReadAspect23 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadAspect25,
                  InflectionData.$fReadAspect24
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Aspect>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Aspect>_R))))) -}
851bcc3c94895d395e7cdf9501dbfb00
  $fReadAspect24 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Aspect -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Aspect -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.IPFV) -}
85fb81ae7a255657232d03fee95e4589
  $fReadAspect25 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "IPFV"#) -}
851bcc3c94895d395e7cdf9501dbfb00
  $fReadAspect26 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadAspect28,
                  InflectionData.$fReadAspect27
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Aspect>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Aspect>_R))))) -}
851bcc3c94895d395e7cdf9501dbfb00
  $fReadAspect27 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Aspect -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Aspect -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.PFV) -}
b89cf71d0cd6964c57256d8b7171734e
  $fReadAspect28 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PFV"#) -}
851bcc3c94895d395e7cdf9501dbfb00
  $fReadAspect29 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadAspect31,
                  InflectionData.$fReadAspect30
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Aspect>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Aspect>_R))))) -}
851bcc3c94895d395e7cdf9501dbfb00
  $fReadAspect3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Aspect -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: InflectionData.Aspect
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ InflectionData.Aspect
                   InflectionData.$fReadAspect4
                   eta
                   @ b
                   eta1) -}
851bcc3c94895d395e7cdf9501dbfb00
  $fReadAspect30 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Aspect -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Aspect -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.NNPROG) -}
5d9ea116d3fc80cb95cc2ac49e199e61
  $fReadAspect31 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NNPROG"#) -}
851bcc3c94895d395e7cdf9501dbfb00
  $fReadAspect32 ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Aspect]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Aspect]
                   InflectionData.$fReadAspect33) -}
851bcc3c94895d395e7cdf9501dbfb00
  $fReadAspect33 ::
    Text.ParserCombinators.ReadP.P [InflectionData.Aspect]
  {- Unfolding: (GHC.Read.$wa
                   @ InflectionData.Aspect
                   InflectionData.$fReadAspect2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Aspect>_R))
                   @ [InflectionData.Aspect]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                      @ [InflectionData.Aspect])) -}
851bcc3c94895d395e7cdf9501dbfb00
  $fReadAspect4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)
                   InflectionData.$fReadAspect29
                   InflectionData.$fReadAspect5) -}
851bcc3c94895d395e7cdf9501dbfb00
  $fReadAspect5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)
                   InflectionData.$fReadAspect26
                   InflectionData.$fReadAspect6) -}
851bcc3c94895d395e7cdf9501dbfb00
  $fReadAspect6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)
                   InflectionData.$fReadAspect23
                   InflectionData.$fReadAspect7) -}
851bcc3c94895d395e7cdf9501dbfb00
  $fReadAspect7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)
                   InflectionData.$fReadAspect20
                   InflectionData.$fReadAspect8) -}
851bcc3c94895d395e7cdf9501dbfb00
  $fReadAspect8 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)
                   InflectionData.$fReadAspect17
                   InflectionData.$fReadAspect9) -}
851bcc3c94895d395e7cdf9501dbfb00
  $fReadAspect9 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)
                   InflectionData.$fReadAspect14
                   InflectionData.$fReadAspect10) -}
851bcc3c94895d395e7cdf9501dbfb00
  $fReadAspect_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [InflectionData.Aspect]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadAspect1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.Aspect]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.Aspect]>_R))) -}
851bcc3c94895d395e7cdf9501dbfb00
  $fReadAspect_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadAspect2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.Aspect>_R)) -}
851bcc3c94895d395e7cdf9501dbfb00
  $fReadAspect_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Aspect
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ InflectionData.Aspect
                   InflectionData.$fReadAspect_$creadPrec
                   eta) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase :: GHC.Read.Read InflectionData.Case
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Case
                  InflectionData.$fReadCase_$s$dmreadsPrec
                  InflectionData.$fReadCase196
                  InflectionData.$fReadCase_$creadPrec
                  InflectionData.$fReadCase_$creadListPrec -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Case] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.Case]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.Case
                   InflectionData.$fReadCase2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Case>_R))
                   @ b
                   eta1) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase10 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase175
                   InflectionData.$fReadCase11) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase100 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase102,
                  InflectionData.$fReadCase101
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase101 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.ABL) -}
ab020b28050d2c72fb40224bf56bf17b
  $fReadCase102 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ABL"#) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase103 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase105,
                  InflectionData.$fReadCase104
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase104 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.LOC) -}
e3d297da38e96171f4bffe9b92c75d29
  $fReadCase105 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "LOC"#) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase106 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase108,
                  InflectionData.$fReadCase107
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase107 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.LAT) -}
14dd76ed7265b7dad3fdc29c628d8994
  $fReadCase108 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "LAT"#) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase109 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase111,
                  InflectionData.$fReadCase110
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase11 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase172
                   InflectionData.$fReadCase12) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase110 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.POST) -}
aec131d71b7c65d2c70798ca91fcbb85
  $fReadCase111 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "POST"#) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase112 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase114,
                  InflectionData.$fReadCase113
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase113 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.PREP) -}
c8338d761c4ad8c8d18b0c800e0cd20b
  $fReadCase114 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PREP"#) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase115 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase117,
                  InflectionData.$fReadCase116
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase116 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.ADP) -}
1af9ccc9af21d1804409276856c6cb65
  $fReadCase117 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ADP"#) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase118 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase120,
                  InflectionData.$fReadCase119
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase119 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.OBL6) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase12 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase169
                   InflectionData.$fReadCase13) -}
20cb3ca07a8682b6bdea489361484024
  $fReadCase120 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OBL6"#) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase121 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase123,
                  InflectionData.$fReadCase122
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase122 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.OBL5) -}
d03bd4346cbef9726c3874c793c269c9
  $fReadCase123 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OBL5"#) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase124 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase126,
                  InflectionData.$fReadCase125
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase125 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.OBL4) -}
0b14d721815ef73632839324b486d1cf
  $fReadCase126 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OBL4"#) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase127 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase129,
                  InflectionData.$fReadCase128
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase128 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.OBL3) -}
942f80a6306fe7e054035dd85a53d613
  $fReadCase129 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OBL3"#) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase13 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase166
                   InflectionData.$fReadCase14) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase130 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase132,
                  InflectionData.$fReadCase131
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase131 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.OBL2) -}
93dd7082dd23bd2ea5e4702fabf57910
  $fReadCase132 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OBL2"#) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase133 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase135,
                  InflectionData.$fReadCase134
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase134 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.OBL1) -}
1c571ec1ddac5bc39445c0e410514684
  $fReadCase135 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OBL1"#) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase136 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase138,
                  InflectionData.$fReadCase137
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase137 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.DRT2) -}
e2494c61f80eb29baf1010b7c92edd18
  $fReadCase138 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DRT2"#) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase139 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase141,
                  InflectionData.$fReadCase140
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase14 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase163
                   InflectionData.$fReadCase15) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase140 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.TR) -}
9c912e0a1baf7b966b1f1b56e1d8d728
  $fReadCase141 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TR"#) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase142 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase144,
                  InflectionData.$fReadCase143
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase143 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.DRT1) -}
aef080de9dc2d4bff38e384265f8852f
  $fReadCase144 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DRT1"#) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase145 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase147,
                  InflectionData.$fReadCase146
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase146 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.OBJ) -}
a9d61518b9ea11531ee715798513c544
  $fReadCase147 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OBJ"#) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase148 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase150,
                  InflectionData.$fReadCase149
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase149 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.DTR) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase15 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase160
                   InflectionData.$fReadCase16) -}
2bff86e0abec9c949080aaa7c09a892c
  $fReadCase150 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DTR"#) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase151 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase153,
                  InflectionData.$fReadCase152
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase152 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.ABS3) -}
74312c60fef130aac1d9c76bfb023f0b
  $fReadCase153 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ABS3"#) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase154 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase156,
                  InflectionData.$fReadCase155
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase155 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.ABS2) -}
949f5e7a5d07ca2d69276589346355cd
  $fReadCase156 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ABS2"#) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase157 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase159,
                  InflectionData.$fReadCase158
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase158 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.NOM2) -}
575fd3148f6a99d379f17285e0fd1629
  $fReadCase159 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NOM2"#) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase16 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase157
                   InflectionData.$fReadCase17) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase160 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase162,
                  InflectionData.$fReadCase161
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase161 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.ERG2) -}
136e86507302caa7359822ee08777136
  $fReadCase162 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ERG2"#) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase163 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase165,
                  InflectionData.$fReadCase164
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase164 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.PRIM) -}
72deb382dc06c028d6bf0a9e704f58d9
  $fReadCase165 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PRIM"#) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase166 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase168,
                  InflectionData.$fReadCase167
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase167 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.DIR) -}
f5c0b5780e63fb911a77ef6a483ea5f8
  $fReadCase168 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DIR"#) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase169 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase171,
                  InflectionData.$fReadCase170
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase17 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase154
                   InflectionData.$fReadCase18) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase170 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.MTR) -}
39f28bde7e721838bb70aedf69583393
  $fReadCase171 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "MTR"#) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase172 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase174,
                  InflectionData.$fReadCase173
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase173 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.ABS) -}
08596c8bcc1315067e5e1dc9e5a7caf5
  $fReadCase174 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ABS"#) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase175 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase177,
                  InflectionData.$fReadCase176
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase176 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.NOM) -}
8884301fb054d128ddb72a4102d3dc4d
  $fReadCase177 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NOM"#) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase178 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase180,
                  InflectionData.$fReadCase179
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase179 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.SEC) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase18 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase151
                   InflectionData.$fReadCase19) -}
c028ceb8747f9a87e54226b26321ce9a
  $fReadCase180 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SEC"#) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase181 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase183,
                  InflectionData.$fReadCase182
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase182 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.INDIR) -}
abeda9254d5a682c52ad1c5807eb79e3
  $fReadCase183 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "INDIR"#) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase184 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase186,
                  InflectionData.$fReadCase185
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase185 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.PEG) -}
64f2618cafda1c32e0a979f1520ed46c
  $fReadCase186 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PEG"#) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase187 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase189,
                  InflectionData.$fReadCase188
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase188 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.ERG) -}
dfa990567c8daf97ea03ebf64e9e0f1e
  $fReadCase189 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ERG"#) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase19 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase148
                   InflectionData.$fReadCase20) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase190 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase192,
                  InflectionData.$fReadCase191
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase191 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.ACC) -}
852cf5260126f4e14c3df3a640394176
  $fReadCase192 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ACC"#) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase193 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase195,
                  InflectionData.$fReadCase194
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase194 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.INTR) -}
f42cc4f7ca187a4917c51af81870ab7c
  $fReadCase195 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "INTR"#) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase196 ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Case]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Case]
                   InflectionData.$fReadCase197) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase197 ::
    Text.ParserCombinators.ReadP.P [InflectionData.Case]
  {- Unfolding: (GHC.Read.$wa
                   @ InflectionData.Case
                   InflectionData.$fReadCase2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Case>_R))
                   @ [InflectionData.Case]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                      @ [InflectionData.Case])) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Case
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Case
                   InflectionData.$fReadCase3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.Case>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.Case>_R)))) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase20 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase145
                   InflectionData.$fReadCase21) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase21 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase142
                   InflectionData.$fReadCase22) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase22 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase139
                   InflectionData.$fReadCase23) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase23 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase136
                   InflectionData.$fReadCase24) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase24 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase133
                   InflectionData.$fReadCase25) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase25 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase130
                   InflectionData.$fReadCase26) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase26 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase127
                   InflectionData.$fReadCase27) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase27 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase124
                   InflectionData.$fReadCase28) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase28 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase121
                   InflectionData.$fReadCase29) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase29 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase118
                   InflectionData.$fReadCase30) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ InflectionData.Case
                   InflectionData.$fReadCase4
                   eta
                   @ b
                   eta1) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase30 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase115
                   InflectionData.$fReadCase31) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase31 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase112
                   InflectionData.$fReadCase32) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase32 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase109
                   InflectionData.$fReadCase33) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase33 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase106
                   InflectionData.$fReadCase34) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase34 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase103
                   InflectionData.$fReadCase35) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase35 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase100
                   InflectionData.$fReadCase36) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase36 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase97
                   InflectionData.$fReadCase37) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase37 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase94
                   InflectionData.$fReadCase38) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase38 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase91
                   InflectionData.$fReadCase39) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase39 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase88
                   InflectionData.$fReadCase40) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase193
                   InflectionData.$fReadCase5) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase40 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase85
                   InflectionData.$fReadCase41) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase41 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase82
                   InflectionData.$fReadCase42) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase42 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase79
                   InflectionData.$fReadCase43) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase43 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase76
                   InflectionData.$fReadCase44) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase44 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase73
                   InflectionData.$fReadCase45) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase45 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase70
                   InflectionData.$fReadCase46) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase46 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase67
                   InflectionData.$fReadCase47) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase47 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase64
                   InflectionData.$fReadCase48) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase48 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase61
                   InflectionData.$fReadCase49) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase49 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase58
                   InflectionData.$fReadCase50) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase190
                   InflectionData.$fReadCase6) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase50 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase55
                   InflectionData.$fReadCase51) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase51 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase52
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case))) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase52 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase54,
                  InflectionData.$fReadCase53
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase53 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.VOC) -}
6001c831614da0153ac01a3b813d9ca0
  $fReadCase54 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "VOC"#) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase55 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase57,
                  InflectionData.$fReadCase56
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase56 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.PART) -}
7524e5bfb6eeb8a4c29fe4cc48932a32
  $fReadCase57 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PART"#) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase58 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase60,
                  InflectionData.$fReadCase59
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase59 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.POSS) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase187
                   InflectionData.$fReadCase7) -}
7dd3e37e64965504e9c8d8e60c700e4d
  $fReadCase60 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "POSS"#) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase61 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase63,
                  InflectionData.$fReadCase62
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase62 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.GEN) -}
5b92234074acc922558ff0cb93058fd4
  $fReadCase63 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "GEN"#) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase64 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase66,
                  InflectionData.$fReadCase65
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase65 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.DISTR) -}
24b4e36e2c1863d064bdb61ec66ed9cd
  $fReadCase66 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DISTR"#) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase67 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase69,
                  InflectionData.$fReadCase68
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase68 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.CAUS) -}
2455740bd93fa6086b4856bac19ed83e
  $fReadCase69 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "CAUS"#) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase184
                   InflectionData.$fReadCase8) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase70 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase72,
                  InflectionData.$fReadCase71
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase71 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.BEN) -}
dda2e0afa569bb4ac6c3ff5bcf93f7fb
  $fReadCase72 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "BEN"#) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase73 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase75,
                  InflectionData.$fReadCase74
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase74 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.ORN) -}
d079d5da079c1ef6afcf803181166aa7
  $fReadCase75 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ORN"#) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase76 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase78,
                  InflectionData.$fReadCase77
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase77 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.INSCOMIT) -}
a762d1b7112f8d50a7407e9bca61fdd8
  $fReadCase78 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "INSCOMIT"#) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase79 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase81,
                  InflectionData.$fReadCase80
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase8 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase181
                   InflectionData.$fReadCase9) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase80 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.COMIT) -}
55c0774c69bb6d8430ec5dba05528f99
  $fReadCase81 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "COMIT"#) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase82 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase84,
                  InflectionData.$fReadCase83
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase83 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.INS) -}
fa4512c81f18dbfe6f4efdd96e95386c
  $fReadCase84 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "INS"#) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase85 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase87,
                  InflectionData.$fReadCase86
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase86 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.DAT) -}
922ee1cf9aba8d3661d2c1cc7c170880
  $fReadCase87 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DAT"#) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase88 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase90,
                  InflectionData.$fReadCase89
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase89 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.ABE) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase9 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase178
                   InflectionData.$fReadCase10) -}
c3548a57af84453f48ade72ebc1e0b61
  $fReadCase90 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ABE"#) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase91 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase93,
                  InflectionData.$fReadCase92
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase92 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.IDEN) -}
79077214ecee764e0fc5b732517908d3
  $fReadCase93 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "IDEN"#) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase94 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase96,
                  InflectionData.$fReadCase95
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase95 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.EQU) -}
73d397188b1d5a1521183c8b2e5c3207
  $fReadCase96 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "EQU"#) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase97 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase99,
                  InflectionData.$fReadCase98
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase98 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.COMP) -}
41e5b3f3c45412524207d4d0c5e893fc
  $fReadCase99 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "COMP"#) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [InflectionData.Case]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadCase1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.Case]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.Case]>_R))) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadCase2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.Case>_R)) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fReadCase_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Case
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ InflectionData.Case
                   InflectionData.$fReadCase_$creadPrec
                   eta) -}
250913a6cb1bc19b5a2a47309bfa066c
  $fReadDefiniteness :: GHC.Read.Read InflectionData.Definiteness
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Definiteness
                  InflectionData.$fReadDefiniteness_$s$dmreadsPrec
                  InflectionData.$fReadDefiniteness12
                  InflectionData.$fReadDefiniteness_$creadPrec
                  InflectionData.$fReadDefiniteness_$creadListPrec -}
250913a6cb1bc19b5a2a47309bfa066c
  $fReadDefiniteness1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Definiteness] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.Definiteness]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.Definiteness
                   InflectionData.$fReadDefiniteness2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Definiteness>_R))
                   @ b
                   eta1) -}
250913a6cb1bc19b5a2a47309bfa066c
  $fReadDefiniteness10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Definiteness -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Definiteness
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.DEF) -}
38f80c6a85c1ebe812ec82679faf1038
  $fReadDefiniteness11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DEF"#) -}
250913a6cb1bc19b5a2a47309bfa066c
  $fReadDefiniteness12 ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Definiteness]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Definiteness]
                   InflectionData.$fReadDefiniteness13) -}
250913a6cb1bc19b5a2a47309bfa066c
  $fReadDefiniteness13 ::
    Text.ParserCombinators.ReadP.P [InflectionData.Definiteness]
  {- Unfolding: (GHC.Read.$wa
                   @ InflectionData.Definiteness
                   InflectionData.$fReadDefiniteness2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Definiteness>_R))
                   @ [InflectionData.Definiteness]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                      @ [InflectionData.Definiteness])) -}
250913a6cb1bc19b5a2a47309bfa066c
  $fReadDefiniteness2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Definiteness
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Definiteness
                   InflectionData.$fReadDefiniteness3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.Definiteness>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.Definiteness>_R)))) -}
250913a6cb1bc19b5a2a47309bfa066c
  $fReadDefiniteness3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Definiteness -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: InflectionData.Definiteness
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ InflectionData.Definiteness
                   InflectionData.$fReadDefiniteness4
                   eta
                   @ b
                   eta1) -}
250913a6cb1bc19b5a2a47309bfa066c
  $fReadDefiniteness4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Definiteness)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Definiteness)
                   InflectionData.$fReadDefiniteness9
                   InflectionData.$fReadDefiniteness5) -}
250913a6cb1bc19b5a2a47309bfa066c
  $fReadDefiniteness5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Definiteness)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Definiteness)
                   InflectionData.$fReadDefiniteness6
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           InflectionData.Definiteness))) -}
250913a6cb1bc19b5a2a47309bfa066c
  $fReadDefiniteness6 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Definiteness)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadDefiniteness8,
                  InflectionData.$fReadDefiniteness7
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Definiteness>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Definiteness>_R))))) -}
250913a6cb1bc19b5a2a47309bfa066c
  $fReadDefiniteness7 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Definiteness -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Definiteness
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.INDF) -}
7e02c9073c9e82fce0459e276098f150
  $fReadDefiniteness8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "INDF"#) -}
250913a6cb1bc19b5a2a47309bfa066c
  $fReadDefiniteness9 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Definiteness)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadDefiniteness11,
                  InflectionData.$fReadDefiniteness10
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Definiteness>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Definiteness>_R))))) -}
250913a6cb1bc19b5a2a47309bfa066c
  $fReadDefiniteness_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [InflectionData.Definiteness]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadDefiniteness1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.Definiteness]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.Definiteness]>_R))) -}
250913a6cb1bc19b5a2a47309bfa066c
  $fReadDefiniteness_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      InflectionData.Definiteness
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadDefiniteness2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.Definiteness>_R)) -}
250913a6cb1bc19b5a2a47309bfa066c
  $fReadDefiniteness_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Definiteness
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ InflectionData.Definiteness
                   InflectionData.$fReadDefiniteness_$creadPrec
                   eta) -}
cdbf36d6698b96caa0bed6ad294bfb83
  $fReadEvidentiality :: GHC.Read.Read InflectionData.Evidentiality
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Evidentiality
                  InflectionData.$fReadEvidentiality_$s$dmreadsPrec
                  InflectionData.$fReadEvidentiality40
                  InflectionData.$fReadEvidentiality_$creadPrec
                  InflectionData.$fReadEvidentiality_$creadListPrec -}
cdbf36d6698b96caa0bed6ad294bfb83
  $fReadEvidentiality1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Evidentiality]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.Evidentiality]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.Evidentiality
                   InflectionData.$fReadEvidentiality2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Evidentiality>_R))
                   @ b
                   eta1) -}
cdbf36d6698b96caa0bed6ad294bfb83
  $fReadEvidentiality10 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Evidentiality)
                   InflectionData.$fReadEvidentiality19
                   InflectionData.$fReadEvidentiality11) -}
cdbf36d6698b96caa0bed6ad294bfb83
  $fReadEvidentiality11 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Evidentiality)
                   InflectionData.$fReadEvidentiality16
                   InflectionData.$fReadEvidentiality12) -}
cdbf36d6698b96caa0bed6ad294bfb83
  $fReadEvidentiality12 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Evidentiality)
                   InflectionData.$fReadEvidentiality13
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           InflectionData.Evidentiality))) -}
cdbf36d6698b96caa0bed6ad294bfb83
  $fReadEvidentiality13 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Evidentiality)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadEvidentiality15,
                  InflectionData.$fReadEvidentiality14
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Evidentiality>_R))))) -}
cdbf36d6698b96caa0bed6ad294bfb83
  $fReadEvidentiality14 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Evidentiality
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.ASS) -}
a9539a9f6786fbc8342a9021d7ddf953
  $fReadEvidentiality15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ASS"#) -}
cdbf36d6698b96caa0bed6ad294bfb83
  $fReadEvidentiality16 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Evidentiality)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadEvidentiality18,
                  InflectionData.$fReadEvidentiality17
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Evidentiality>_R))))) -}
cdbf36d6698b96caa0bed6ad294bfb83
  $fReadEvidentiality17 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Evidentiality
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.QUO) -}
9a7521f66d0f1835cc47c2a8a00e3150
  $fReadEvidentiality18 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "QUO"#) -}
cdbf36d6698b96caa0bed6ad294bfb83
  $fReadEvidentiality19 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Evidentiality)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadEvidentiality21,
                  InflectionData.$fReadEvidentiality20
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Evidentiality>_R))))) -}
cdbf36d6698b96caa0bed6ad294bfb83
  $fReadEvidentiality2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Evidentiality
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Evidentiality
                   InflectionData.$fReadEvidentiality3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.Evidentiality>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.Evidentiality>_R)))) -}
cdbf36d6698b96caa0bed6ad294bfb83
  $fReadEvidentiality20 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Evidentiality
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.HSY) -}
5249d7d3485296e6d81bad2b93328e4b
  $fReadEvidentiality21 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "HSY"#) -}
cdbf36d6698b96caa0bed6ad294bfb83
  $fReadEvidentiality22 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Evidentiality)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadEvidentiality24,
                  InflectionData.$fReadEvidentiality23
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Evidentiality>_R))))) -}
cdbf36d6698b96caa0bed6ad294bfb83
  $fReadEvidentiality23 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Evidentiality
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.REP) -}
02788ec165c27355d04121aeeec9db6e
  $fReadEvidentiality24 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "REP"#) -}
cdbf36d6698b96caa0bed6ad294bfb83
  $fReadEvidentiality25 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Evidentiality)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadEvidentiality27,
                  InflectionData.$fReadEvidentiality26
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Evidentiality>_R))))) -}
cdbf36d6698b96caa0bed6ad294bfb83
  $fReadEvidentiality26 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Evidentiality
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.INFER) -}
1b85c49cc356b0afa25f85b84e60cd0e
  $fReadEvidentiality27 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "INFER"#) -}
cdbf36d6698b96caa0bed6ad294bfb83
  $fReadEvidentiality28 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Evidentiality)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadEvidentiality30,
                  InflectionData.$fReadEvidentiality29
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Evidentiality>_R))))) -}
cdbf36d6698b96caa0bed6ad294bfb83
  $fReadEvidentiality29 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Evidentiality
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.AUD) -}
cdbf36d6698b96caa0bed6ad294bfb83
  $fReadEvidentiality3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: InflectionData.Evidentiality
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ InflectionData.Evidentiality
                   InflectionData.$fReadEvidentiality4
                   eta
                   @ b
                   eta1) -}
dcc6613f8ca3ecf7a0193d4d07401a12
  $fReadEvidentiality30 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AUD"#) -}
cdbf36d6698b96caa0bed6ad294bfb83
  $fReadEvidentiality31 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Evidentiality)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadEvidentiality33,
                  InflectionData.$fReadEvidentiality32
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Evidentiality>_R))))) -}
cdbf36d6698b96caa0bed6ad294bfb83
  $fReadEvidentiality32 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Evidentiality
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.NVIS) -}
2a0d2b0c24a44d423bd299bb0821afed
  $fReadEvidentiality33 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NVIS"#) -}
cdbf36d6698b96caa0bed6ad294bfb83
  $fReadEvidentiality34 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Evidentiality)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadEvidentiality36,
                  InflectionData.$fReadEvidentiality35
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Evidentiality>_R))))) -}
cdbf36d6698b96caa0bed6ad294bfb83
  $fReadEvidentiality35 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Evidentiality
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.VIS) -}
d3326ce8dc00ad9c88953d293e4aef8c
  $fReadEvidentiality36 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "VIS"#) -}
cdbf36d6698b96caa0bed6ad294bfb83
  $fReadEvidentiality37 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Evidentiality)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadEvidentiality39,
                  InflectionData.$fReadEvidentiality38
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Evidentiality>_R))))) -}
cdbf36d6698b96caa0bed6ad294bfb83
  $fReadEvidentiality38 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Evidentiality
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.EXP) -}
110430f69a4e70e11f7c6c0a731c724e
  $fReadEvidentiality39 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "EXP"#) -}
cdbf36d6698b96caa0bed6ad294bfb83
  $fReadEvidentiality4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Evidentiality)
                   InflectionData.$fReadEvidentiality37
                   InflectionData.$fReadEvidentiality5) -}
cdbf36d6698b96caa0bed6ad294bfb83
  $fReadEvidentiality40 ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Evidentiality]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Evidentiality]
                   InflectionData.$fReadEvidentiality41) -}
cdbf36d6698b96caa0bed6ad294bfb83
  $fReadEvidentiality41 ::
    Text.ParserCombinators.ReadP.P [InflectionData.Evidentiality]
  {- Unfolding: (GHC.Read.$wa
                   @ InflectionData.Evidentiality
                   InflectionData.$fReadEvidentiality2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Evidentiality>_R))
                   @ [InflectionData.Evidentiality]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                      @ [InflectionData.Evidentiality])) -}
cdbf36d6698b96caa0bed6ad294bfb83
  $fReadEvidentiality5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Evidentiality)
                   InflectionData.$fReadEvidentiality34
                   InflectionData.$fReadEvidentiality6) -}
cdbf36d6698b96caa0bed6ad294bfb83
  $fReadEvidentiality6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Evidentiality)
                   InflectionData.$fReadEvidentiality31
                   InflectionData.$fReadEvidentiality7) -}
cdbf36d6698b96caa0bed6ad294bfb83
  $fReadEvidentiality7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Evidentiality)
                   InflectionData.$fReadEvidentiality28
                   InflectionData.$fReadEvidentiality8) -}
cdbf36d6698b96caa0bed6ad294bfb83
  $fReadEvidentiality8 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Evidentiality)
                   InflectionData.$fReadEvidentiality25
                   InflectionData.$fReadEvidentiality9) -}
cdbf36d6698b96caa0bed6ad294bfb83
  $fReadEvidentiality9 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Evidentiality)
                   InflectionData.$fReadEvidentiality22
                   InflectionData.$fReadEvidentiality10) -}
cdbf36d6698b96caa0bed6ad294bfb83
  $fReadEvidentiality_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [InflectionData.Evidentiality]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadEvidentiality1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.Evidentiality]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.Evidentiality]>_R))) -}
cdbf36d6698b96caa0bed6ad294bfb83
  $fReadEvidentiality_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      InflectionData.Evidentiality
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadEvidentiality2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.Evidentiality>_R)) -}
cdbf36d6698b96caa0bed6ad294bfb83
  $fReadEvidentiality_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Evidentiality
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ InflectionData.Evidentiality
                   InflectionData.$fReadEvidentiality_$creadPrec
                   eta) -}
16ae30a99f963c81137d7828dad80939
  $fReadExpress ::
    GHC.Read.Read a => GHC.Read.Read (InflectionData.Express a)
  DFunId[0]
  {- Arity: 1, Strictness: <L,U(A,A,U,A)>m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a42 $dRead :: GHC.Read.Read a42.
                  @ (InflectionData.Express a42)
                  (InflectionData.$fReadExpress_$creadsPrec @ a42 $dRead)
                  (InflectionData.$fReadExpress_$creadList @ a42 $dRead)
                  (InflectionData.$fReadExpress_$creadPrec @ a42 $dRead)
                  (InflectionData.$fReadExpress_$creadListPrec @ a42 $dRead) -}
16ae30a99f963c81137d7828dad80939
  $fReadExpress1 ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Express a] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 3, Strictness: <L,U(A,A,U,A)><L,A><L,C(U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a42
                   $dRead :: GHC.Read.Read a42
                   eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.Express a42]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ (InflectionData.Express a42)
                   (InflectionData.$fReadExpress2 @ a42 $dRead)
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Express a42>_R))
                   @ b
                   eta1) -}
16ae30a99f963c81137d7828dad80939
  $fReadExpress2 ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP (InflectionData.Express a)
  {- Arity: 2, Strictness: <L,1*U(A,A,1*U,A)><L,U>,
     Unfolding: (\ @ a42
                   $dRead :: GHC.Read.Read a42
                   eta :: Text.ParserCombinators.ReadPrec.Prec ->
                 GHC.Read.$fReadDouble10
                   @ (InflectionData.Express a42)
                   (let {
                      ds :: Text.ParserCombinators.ReadPrec.ReadPrec a42
                      = GHC.Read.readPrec @ a42 $dRead
                    } in
                    (\ n :: Text.ParserCombinators.ReadPrec.Prec
                       @ b
                       eta1 :: InflectionData.Express a42
                               -> Text.ParserCombinators.ReadP.P b ->
                     let {
                       lvl116 :: Text.ParserCombinators.ReadP.P b
                       = let {
                           lvl117 :: Text.ParserCombinators.ReadP.P b
                           = eta1 (InflectionData.NoExpress @ a42)
                         } in
                         Text.Read.Lex.expect2
                           @ b
                           (\ a98 :: Text.Read.Lex.Lexeme ->
                            case a98 of wild {
                              DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                              Text.Read.Lex.Ident a43
                              -> case GHC.Base.eqString
                                        a43
                                        InflectionData.$fReadExpress5 of wild1 {
                                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                   GHC.Types.True -> lvl117 } })
                     } in
                     let {
                       k :: () -> Text.ParserCombinators.ReadP.P b
                         {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                            Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl116) -}
                       = \ w2 :: () -> lvl116
                     } in
                     Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                       @ b
                       (Text.ParserCombinators.ReadP.Look
                          @ b
                          (\ a98 :: GHC.Base.String ->
                           (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                             `cast`
                           (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                             @ b
                             k))
                       (case n of wild { GHC.Types.I# x ->
                        case GHC.Prim.tagToEnum#
                               @ GHC.Types.Bool
                               (GHC.Prim.<=# x 10) of wild2 {
                          GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                          GHC.Types.True
                          -> let {
                               lvl117 :: Text.ParserCombinators.ReadP.P b
                               = let {
                                   lvl118 :: Text.ParserCombinators.ReadP.P b
                                   = (ds
                                        `cast`
                                      (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0] <a42>_R)
                                        InflectionData.$fReadExpress4)
                                       `cast`
                                     (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <a42>_R)
                                       @ b
                                       (\ a43 :: a42 -> eta1 (InflectionData.Express @ a42 a43))
                                 } in
                                 Text.Read.Lex.expect2
                                   @ b
                                   (\ a98 :: Text.Read.Lex.Lexeme ->
                                    case a98 of wild1 {
                                      DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                      Text.Read.Lex.Ident a43
                                      -> case GHC.Base.eqString
                                                a43
                                                InflectionData.$fReadExpress3 of wild3 {
                                           GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                           GHC.Types.True -> lvl118 } })
                             } in
                             let {
                               k1 :: () -> Text.ParserCombinators.ReadP.P b
                                 {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                    Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl117) -}
                               = \ w2 :: () -> lvl117
                             } in
                             Text.ParserCombinators.ReadP.Look
                               @ b
                               (\ a98 :: GHC.Base.String ->
                                (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                                  `cast`
                                (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                                  @ b
                                  k1) } }))
                      `cast`
                    (Trans
                         (<Text.ParserCombinators.ReadPrec.Prec>_R
                          ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                        <InflectionData.Express a42>_R))
                         (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                   <InflectionData.Express a42>_R))))
                   eta) -}
3baea9f74937da6a66d388a39ffca2bf
  $fReadExpress3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Express"#) -}
638db94cc1d0c3b2a56c5a508fe2d3eb
  $fReadExpress4 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 11) -}
0800c5b2c71d96febe9a41ccbb056669
  $fReadExpress5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NoExpress"#) -}
16ae30a99f963c81137d7828dad80939
  $fReadExpress_$creadList ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Express a]
  {- Arity: 1, Strictness: <L,U(A,A,U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a42 $dRead :: GHC.Read.Read a42 ->
                 Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Express a42]
                   (GHC.Read.$wa
                      @ (InflectionData.Express a42)
                      (InflectionData.$fReadExpress2 @ a42 $dRead)
                        `cast`
                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                <InflectionData.Express a42>_R))
                      @ [InflectionData.Express a42]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [InflectionData.Express a42]))) -}
16ae30a99f963c81137d7828dad80939
  $fReadExpress_$creadListPrec ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadPrec.ReadPrec [InflectionData.Express a]
  {- Arity: 3, Strictness: <L,U(A,A,U,A)><L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadExpress1
                  `cast`
                (forall a42.
                 <GHC.Read.Read a42>_R
                 ->_R Trans
                          (<Text.ParserCombinators.ReadPrec.Prec>_R
                           ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                         <[InflectionData.Express a42]>_R))
                          (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                    <[InflectionData.Express a42]>_R))) -}
16ae30a99f963c81137d7828dad80939
  $fReadExpress_$creadPrec ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadPrec.ReadPrec (InflectionData.Express a)
  {- Arity: 2, Strictness: <L,1*U(A,A,1*U,A)><L,U>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadExpress2
                  `cast`
                (forall a42.
                 <GHC.Read.Read a42>_R
                 ->_R Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <InflectionData.Express a42>_R)) -}
16ae30a99f963c81137d7828dad80939
  $fReadExpress_$creadsPrec ::
    GHC.Read.Read a =>
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS (InflectionData.Express a)
  {- Arity: 2, Strictness: <L,1*U(A,A,1*U,A)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a42 $dRead :: GHC.Read.Read a42 eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadP.run
                   @ (InflectionData.Express a42)
                   ((InflectionData.$fReadExpress2 @ a42 $dRead eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <InflectionData.Express a42>_R)
                      @ (InflectionData.Express a42)
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ (InflectionData.Express a42)))) -}
a3623d5adfe047fe3ed20dca1c56d9df
  $fReadGender :: GHC.Read.Read InflectionData.Gender
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Gender
                  InflectionData.$fReadGender_$s$dmreadsPrec
                  InflectionData.$fReadGender20
                  InflectionData.$fReadGender_$creadPrec
                  InflectionData.$fReadGender_$creadListPrec -}
a3623d5adfe047fe3ed20dca1c56d9df
  $fReadGender1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Gender] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.Gender]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.Gender
                   InflectionData.$fReadGender2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Gender>_R))
                   @ b
                   eta1) -}
9be3dc4d4b7058633954da42a2cc0002
  $fReadGender10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "N"#) -}
a3623d5adfe047fe3ed20dca1c56d9df
  $fReadGender11 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Gender)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadGender13,
                  InflectionData.$fReadGender12
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Gender>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Gender>_R))))) -}
a3623d5adfe047fe3ed20dca1c56d9df
  $fReadGender12 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Gender -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Gender -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.COM) -}
b76a2e3e020d1853acbbd1b5a8b0d585
  $fReadGender13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "COM"#) -}
a3623d5adfe047fe3ed20dca1c56d9df
  $fReadGender14 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Gender)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadGender16,
                  InflectionData.$fReadGender15
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Gender>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Gender>_R))))) -}
a3623d5adfe047fe3ed20dca1c56d9df
  $fReadGender15 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Gender -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Gender -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.F) -}
d1b3c7a072e9372bf5754c430f4c8ca1
  $fReadGender16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "F"#) -}
a3623d5adfe047fe3ed20dca1c56d9df
  $fReadGender17 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Gender)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadGender19,
                  InflectionData.$fReadGender18
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Gender>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Gender>_R))))) -}
a3623d5adfe047fe3ed20dca1c56d9df
  $fReadGender18 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Gender -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Gender -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.M) -}
a898d16afb54168699409c589df77899
  $fReadGender19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "M"#) -}
a3623d5adfe047fe3ed20dca1c56d9df
  $fReadGender2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Gender
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Gender
                   InflectionData.$fReadGender3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.Gender>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.Gender>_R)))) -}
a3623d5adfe047fe3ed20dca1c56d9df
  $fReadGender20 ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Gender]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Gender]
                   InflectionData.$fReadGender21) -}
a3623d5adfe047fe3ed20dca1c56d9df
  $fReadGender21 ::
    Text.ParserCombinators.ReadP.P [InflectionData.Gender]
  {- Unfolding: (GHC.Read.$wa
                   @ InflectionData.Gender
                   InflectionData.$fReadGender2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Gender>_R))
                   @ [InflectionData.Gender]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                      @ [InflectionData.Gender])) -}
a3623d5adfe047fe3ed20dca1c56d9df
  $fReadGender3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Gender -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: InflectionData.Gender
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ InflectionData.Gender
                   InflectionData.$fReadGender4
                   eta
                   @ b
                   eta1) -}
a3623d5adfe047fe3ed20dca1c56d9df
  $fReadGender4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Gender)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Gender)
                   InflectionData.$fReadGender17
                   InflectionData.$fReadGender5) -}
a3623d5adfe047fe3ed20dca1c56d9df
  $fReadGender5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Gender)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Gender)
                   InflectionData.$fReadGender14
                   InflectionData.$fReadGender6) -}
a3623d5adfe047fe3ed20dca1c56d9df
  $fReadGender6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Gender)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Gender)
                   InflectionData.$fReadGender11
                   InflectionData.$fReadGender7) -}
a3623d5adfe047fe3ed20dca1c56d9df
  $fReadGender7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Gender)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Gender)
                   InflectionData.$fReadGender8
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           InflectionData.Gender))) -}
a3623d5adfe047fe3ed20dca1c56d9df
  $fReadGender8 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Gender)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadGender10,
                  InflectionData.$fReadGender9
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Gender>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Gender>_R))))) -}
a3623d5adfe047fe3ed20dca1c56d9df
  $fReadGender9 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Gender -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Gender -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.N) -}
a3623d5adfe047fe3ed20dca1c56d9df
  $fReadGender_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [InflectionData.Gender]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadGender1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.Gender]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.Gender]>_R))) -}
a3623d5adfe047fe3ed20dca1c56d9df
  $fReadGender_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Gender
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadGender2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.Gender>_R)) -}
a3623d5adfe047fe3ed20dca1c56d9df
  $fReadGender_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Gender
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ InflectionData.Gender
                   InflectionData.$fReadGender_$creadPrec
                   eta) -}
9621aad11f276ef3a5a55be34fb30507
  $fReadHonorific :: GHC.Read.Read InflectionData.Honorific
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Honorific
                  InflectionData.$fReadHonorific_$s$dmreadsPrec
                  InflectionData.$fReadHonorific16
                  InflectionData.$fReadHonorific_$creadPrec
                  InflectionData.$fReadHonorific_$creadListPrec -}
9621aad11f276ef3a5a55be34fb30507
  $fReadHonorific1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Honorific] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.Honorific]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.Honorific
                   InflectionData.$fReadHonorific2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Honorific>_R))
                   @ b
                   eta1) -}
9621aad11f276ef3a5a55be34fb30507
  $fReadHonorific10 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Honorific)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadHonorific12,
                  InflectionData.$fReadHonorific11
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Honorific>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Honorific>_R))))) -}
9621aad11f276ef3a5a55be34fb30507
  $fReadHonorific11 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Honorific -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Honorific
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.NEU) -}
7bb4559a75a0dae414091161c9ab1ade
  $fReadHonorific12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NEU"#) -}
9621aad11f276ef3a5a55be34fb30507
  $fReadHonorific13 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Honorific)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadHonorific15,
                  InflectionData.$fReadHonorific14
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Honorific>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Honorific>_R))))) -}
9621aad11f276ef3a5a55be34fb30507
  $fReadHonorific14 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Honorific -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Honorific
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.FAM) -}
462e6058af65c42e67175bb6fe6a4057
  $fReadHonorific15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FAM"#) -}
9621aad11f276ef3a5a55be34fb30507
  $fReadHonorific16 ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Honorific]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Honorific]
                   InflectionData.$fReadHonorific17) -}
9621aad11f276ef3a5a55be34fb30507
  $fReadHonorific17 ::
    Text.ParserCombinators.ReadP.P [InflectionData.Honorific]
  {- Unfolding: (GHC.Read.$wa
                   @ InflectionData.Honorific
                   InflectionData.$fReadHonorific2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Honorific>_R))
                   @ [InflectionData.Honorific]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                      @ [InflectionData.Honorific])) -}
9621aad11f276ef3a5a55be34fb30507
  $fReadHonorific2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Honorific
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Honorific
                   InflectionData.$fReadHonorific3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.Honorific>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.Honorific>_R)))) -}
9621aad11f276ef3a5a55be34fb30507
  $fReadHonorific3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Honorific -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: InflectionData.Honorific
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ InflectionData.Honorific
                   InflectionData.$fReadHonorific4
                   eta
                   @ b
                   eta1) -}
9621aad11f276ef3a5a55be34fb30507
  $fReadHonorific4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Honorific)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Honorific)
                   InflectionData.$fReadHonorific13
                   InflectionData.$fReadHonorific5) -}
9621aad11f276ef3a5a55be34fb30507
  $fReadHonorific5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Honorific)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Honorific)
                   InflectionData.$fReadHonorific10
                   InflectionData.$fReadHonorific6) -}
9621aad11f276ef3a5a55be34fb30507
  $fReadHonorific6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Honorific)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Honorific)
                   InflectionData.$fReadHonorific7
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           InflectionData.Honorific))) -}
9621aad11f276ef3a5a55be34fb30507
  $fReadHonorific7 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Honorific)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadHonorific9,
                  InflectionData.$fReadHonorific8
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Honorific>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Honorific>_R))))) -}
9621aad11f276ef3a5a55be34fb30507
  $fReadHonorific8 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Honorific -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Honorific
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.FORM) -}
ed39bddf20e34de5fdf266f04bfb6871
  $fReadHonorific9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FORM"#) -}
9621aad11f276ef3a5a55be34fb30507
  $fReadHonorific_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [InflectionData.Honorific]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadHonorific1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.Honorific]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.Honorific]>_R))) -}
9621aad11f276ef3a5a55be34fb30507
  $fReadHonorific_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Honorific
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadHonorific2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.Honorific>_R)) -}
9621aad11f276ef3a5a55be34fb30507
  $fReadHonorific_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Honorific
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ InflectionData.Honorific
                   InflectionData.$fReadHonorific_$creadPrec
                   eta) -}
340b506daec6555591e5534716353ebf
  $fReadInflectionSystem ::
    GHC.Read.Read InflectionData.InflectionSystem
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.InflectionSystem
                  InflectionData.$fReadInflectionSystem_$creadsPrec
                  InflectionData.$fReadInflectionSystem_$sreadListDefault
                  InflectionData.$fReadInflectionSystem_$creadPrec
                  InflectionData.$fReadInflectionSystem_$creadListPrec -}
340b506daec6555591e5534716353ebf
  $fReadInflectionSystem1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.InflectionSystem]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.InflectionSystem]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.InflectionSystem
                   InflectionData.$fReadInflectionSystem2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.InflectionSystem>_R))
                   @ b
                   eta1) -}
340b506daec6555591e5534716353ebf
  $fReadInflectionSystem2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP
         InflectionData.InflectionSystem
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.InflectionSystem
                   InflectionData.$fReadInflectionSystem3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.InflectionSystem>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.InflectionSystem>_R)))) -}
340b506daec6555591e5534716353ebf
  $fReadInflectionSystem3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.InflectionSystem
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: InflectionData.InflectionSystem
                         -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 ->
                 InflectionData.$wa ww1 @ b w1 }) -}
340b506daec6555591e5534716353ebf
  $fReadInflectionSystem_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [InflectionData.InflectionSystem]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadInflectionSystem1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.InflectionSystem]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.InflectionSystem]>_R))) -}
340b506daec6555591e5534716353ebf
  $fReadInflectionSystem_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      InflectionData.InflectionSystem
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadInflectionSystem2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.InflectionSystem>_R)) -}
340b506daec6555591e5534716353ebf
  $fReadInflectionSystem_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS
         InflectionData.InflectionSystem
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadP.run
                   @ InflectionData.InflectionSystem
                   ((GHC.Read.$fReadDouble10
                       @ InflectionData.InflectionSystem
                       InflectionData.$fReadInflectionSystem3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                           <InflectionData.InflectionSystem>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                      <InflectionData.InflectionSystem>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <InflectionData.InflectionSystem>_R)
                      @ InflectionData.InflectionSystem
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ InflectionData.InflectionSystem))) -}
340b506daec6555591e5534716353ebf
  $fReadInflectionSystem_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS
      [InflectionData.InflectionSystem]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.InflectionSystem]
                   ((InflectionData.$fReadInflectionSystem_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[InflectionData.InflectionSystem]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[InflectionData.InflectionSystem]>_R)
                      @ [InflectionData.InflectionSystem]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [InflectionData.InflectionSystem]))) -}
669f64eab1a11feac3c6144dd5c31025
  $fReadLexCat :: GHC.Read.Read InflectionData.LexCat
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.LexCat
                  InflectionData.$fReadLexCat_$s$dmreadsPrec
                  InflectionData.$fReadLexCat_$sreadListDefault
                  InflectionData.$fReadLexCat_$creadPrec
                  InflectionData.$fReadLexCat_$creadListPrec -}
669f64eab1a11feac3c6144dd5c31025
  $fReadLexCat1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.LexCat] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.LexCat]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.LexCat
                   InflectionData.$fReadLexCat2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.LexCat>_R))
                   @ b
                   eta1) -}
669f64eab1a11feac3c6144dd5c31025
  $fReadLexCat10 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
                   InflectionData.$fReadLexCat27
                   InflectionData.$fReadLexCat11) -}
669f64eab1a11feac3c6144dd5c31025
  $fReadLexCat11 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
                   InflectionData.$fReadLexCat24
                   InflectionData.$fReadLexCat12) -}
669f64eab1a11feac3c6144dd5c31025
  $fReadLexCat12 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
                   InflectionData.$fReadLexCat21
                   InflectionData.$fReadLexCat13) -}
669f64eab1a11feac3c6144dd5c31025
  $fReadLexCat13 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
                   InflectionData.$fReadLexCat18
                   InflectionData.$fReadLexCat14) -}
669f64eab1a11feac3c6144dd5c31025
  $fReadLexCat14 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
                   InflectionData.$fReadLexCat15
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           InflectionData.LexCat))) -}
669f64eab1a11feac3c6144dd5c31025
  $fReadLexCat15 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadLexCat17,
                  InflectionData.$fReadLexCat16
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.LexCat>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.LexCat>_R))))) -}
669f64eab1a11feac3c6144dd5c31025
  $fReadLexCat16 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.Pron) -}
58960672586e45b4c836665dac8423ed
  $fReadLexCat17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Pron"#) -}
669f64eab1a11feac3c6144dd5c31025
  $fReadLexCat18 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadLexCat20,
                  InflectionData.$fReadLexCat19
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.LexCat>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.LexCat>_R))))) -}
669f64eab1a11feac3c6144dd5c31025
  $fReadLexCat19 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.Subj) -}
669f64eab1a11feac3c6144dd5c31025
  $fReadLexCat2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.LexCat
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.LexCat
                   InflectionData.$fReadLexCat3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.LexCat>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.LexCat>_R)))) -}
d96e6586e3e282c52d25e71607bcb978
  $fReadLexCat20 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Subj"#) -}
669f64eab1a11feac3c6144dd5c31025
  $fReadLexCat21 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadLexCat23,
                  InflectionData.$fReadLexCat22
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.LexCat>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.LexCat>_R))))) -}
669f64eab1a11feac3c6144dd5c31025
  $fReadLexCat22 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.Obj) -}
abdeccb293d8774ac787e5aa1bf57e14
  $fReadLexCat23 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Obj"#) -}
669f64eab1a11feac3c6144dd5c31025
  $fReadLexCat24 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadLexCat26,
                  InflectionData.$fReadLexCat25
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.LexCat>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.LexCat>_R))))) -}
669f64eab1a11feac3c6144dd5c31025
  $fReadLexCat25 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.Adv) -}
84432ffb34fc3306bd45c1b5aea80d0b
  $fReadLexCat26 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Adv"#) -}
669f64eab1a11feac3c6144dd5c31025
  $fReadLexCat27 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadLexCat29,
                  InflectionData.$fReadLexCat28
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.LexCat>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.LexCat>_R))))) -}
669f64eab1a11feac3c6144dd5c31025
  $fReadLexCat28 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.Adj) -}
ad525f567bce2cec0423340c32da25d0
  $fReadLexCat29 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Adj"#) -}
669f64eab1a11feac3c6144dd5c31025
  $fReadLexCat3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: InflectionData.LexCat
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ InflectionData.LexCat
                   InflectionData.$fReadLexCat4
                   eta
                   @ b
                   eta1) -}
669f64eab1a11feac3c6144dd5c31025
  $fReadLexCat30 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadLexCat32,
                  InflectionData.$fReadLexCat31
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.LexCat>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.LexCat>_R))))) -}
669f64eab1a11feac3c6144dd5c31025
  $fReadLexCat31 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.Adpo) -}
2a31b2cb2398f48835df619f23c0d0af
  $fReadLexCat32 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Adpo"#) -}
669f64eab1a11feac3c6144dd5c31025
  $fReadLexCat33 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadLexCat35,
                  InflectionData.$fReadLexCat34
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.LexCat>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.LexCat>_R))))) -}
669f64eab1a11feac3c6144dd5c31025
  $fReadLexCat34 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.Noun) -}
86f73b84b49ebfd4adbf6b38691838c1
  $fReadLexCat35 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Noun"#) -}
669f64eab1a11feac3c6144dd5c31025
  $fReadLexCat36 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadLexCat38,
                  InflectionData.$fReadLexCat37
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.LexCat>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.LexCat>_R))))) -}
669f64eab1a11feac3c6144dd5c31025
  $fReadLexCat37 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.Det) -}
04bb2c9148b03ba835e071d50b9a3639
  $fReadLexCat38 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Det"#) -}
669f64eab1a11feac3c6144dd5c31025
  $fReadLexCat39 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadLexCat41,
                  InflectionData.$fReadLexCat40
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.LexCat>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.LexCat>_R))))) -}
669f64eab1a11feac3c6144dd5c31025
  $fReadLexCat4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
                   InflectionData.$fReadLexCat45
                   InflectionData.$fReadLexCat5) -}
669f64eab1a11feac3c6144dd5c31025
  $fReadLexCat40 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.Verb) -}
9c9afff00b64181eb69f901e20bcb4f2
  $fReadLexCat41 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Verb"#) -}
669f64eab1a11feac3c6144dd5c31025
  $fReadLexCat42 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadLexCat44,
                  InflectionData.$fReadLexCat43
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.LexCat>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.LexCat>_R))))) -}
669f64eab1a11feac3c6144dd5c31025
  $fReadLexCat43 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.Infl) -}
b862db3d7a40b104848f0595f8979dd1
  $fReadLexCat44 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Infl"#) -}
669f64eab1a11feac3c6144dd5c31025
  $fReadLexCat45 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadLexCat47,
                  InflectionData.$fReadLexCat46
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.LexCat>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.LexCat>_R))))) -}
669f64eab1a11feac3c6144dd5c31025
  $fReadLexCat46 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.Comp) -}
f679db164fd39cc92579b8af2440cfcb
  $fReadLexCat47 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Comp"#) -}
669f64eab1a11feac3c6144dd5c31025
  $fReadLexCat5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
                   InflectionData.$fReadLexCat42
                   InflectionData.$fReadLexCat6) -}
669f64eab1a11feac3c6144dd5c31025
  $fReadLexCat6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
                   InflectionData.$fReadLexCat39
                   InflectionData.$fReadLexCat7) -}
669f64eab1a11feac3c6144dd5c31025
  $fReadLexCat7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
                   InflectionData.$fReadLexCat36
                   InflectionData.$fReadLexCat8) -}
669f64eab1a11feac3c6144dd5c31025
  $fReadLexCat8 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
                   InflectionData.$fReadLexCat33
                   InflectionData.$fReadLexCat9) -}
669f64eab1a11feac3c6144dd5c31025
  $fReadLexCat9 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
                   InflectionData.$fReadLexCat30
                   InflectionData.$fReadLexCat10) -}
669f64eab1a11feac3c6144dd5c31025
  $fReadLexCat_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [InflectionData.LexCat]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadLexCat1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.LexCat]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.LexCat]>_R))) -}
669f64eab1a11feac3c6144dd5c31025
  $fReadLexCat_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadLexCat2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.LexCat>_R)) -}
669f64eab1a11feac3c6144dd5c31025
  $fReadLexCat_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.LexCat
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ InflectionData.LexCat
                   InflectionData.$fReadLexCat_$creadPrec
                   eta) -}
669f64eab1a11feac3c6144dd5c31025
  $fReadLexCat_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.LexCat]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.LexCat]
                   ((InflectionData.$fReadLexCat_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[InflectionData.LexCat]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[InflectionData.LexCat]>_R)
                      @ [InflectionData.LexCat]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [InflectionData.LexCat]))) -}
ceb3098f5042182adffdb975609a3c68
  $fReadManifest ::
    GHC.Read.Read a => GHC.Read.Read (InflectionData.Manifest a)
  DFunId[0]
  {- Arity: 1, Strictness: <L,U(A,A,U,A)>m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a42 $dRead :: GHC.Read.Read a42.
                  @ (InflectionData.Manifest a42)
                  (InflectionData.$fReadManifest_$creadsPrec @ a42 $dRead)
                  (InflectionData.$fReadManifest_$creadList @ a42 $dRead)
                  (InflectionData.$fReadManifest_$creadPrec @ a42 $dRead)
                  (InflectionData.$fReadManifest_$creadListPrec @ a42 $dRead) -}
ceb3098f5042182adffdb975609a3c68
  $fReadManifest1 ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Manifest a] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 3, Strictness: <L,U(A,A,U,A)><L,A><L,C(U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a42
                   $dRead :: GHC.Read.Read a42
                   eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.Manifest a42]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ (InflectionData.Manifest a42)
                   (InflectionData.$fReadManifest2 @ a42 $dRead)
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Manifest a42>_R))
                   @ b
                   eta1) -}
8962065c67c1705ac692fcc8d9210bcd
  $fReadManifest100 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Person -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Person -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.THRDOBV) -}
cb61bd0cbe2d562489800cb00121529a
  $fReadManifest101 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "THRDOBV"#) -}
8962065c67c1705ac692fcc8d9210bcd
  $fReadManifest102 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest104,
                  InflectionData.$fReadManifest103
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Person>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Person>_R))))) -}
8962065c67c1705ac692fcc8d9210bcd
  $fReadManifest103 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Person -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Person -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.THRDPROX) -}
ee23db873c482d98594a5abc91671d5c
  $fReadManifest104 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "THRDPROX"#) -}
8962065c67c1705ac692fcc8d9210bcd
  $fReadManifest105 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest107,
                  InflectionData.$fReadManifest106
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Person>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Person>_R))))) -}
8962065c67c1705ac692fcc8d9210bcd
  $fReadManifest106 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Person -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Person -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.THIRD) -}
acfce31297990d5b5b3216bcbaf0da89
  $fReadManifest107 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "THIRD"#) -}
8962065c67c1705ac692fcc8d9210bcd
  $fReadManifest108 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest110,
                  InflectionData.$fReadManifest109
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Person>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Person>_R))))) -}
8962065c67c1705ac692fcc8d9210bcd
  $fReadManifest109 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Person -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Person -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.SECOND) -}
f25b5687a2ab33d59c2a45cae9d7352a
  $fReadManifest11 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Manifest [InflectionData.Case]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)>,
     Unfolding: (\ n :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Manifest [InflectionData.Case]
                          -> Text.ParserCombinators.ReadP.P b ->
                 let {
                   lvl116 :: Text.ParserCombinators.ReadP.P b
                   = let {
                       lvl117 :: Text.ParserCombinators.ReadP.P b
                       = eta (InflectionData.NoManifest @ [InflectionData.Case])
                     } in
                     Text.Read.Lex.expect2
                       @ b
                       (\ a98 :: Text.Read.Lex.Lexeme ->
                        case a98 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                          Text.Read.Lex.Ident a42
                          -> case GHC.Base.eqString
                                    a42
                                    InflectionData.$fReadManifest5 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                               GHC.Types.True -> lvl117 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl116) -}
                   = \ w2 :: () -> lvl116
                 } in
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b
                   (Text.ParserCombinators.ReadP.Look
                      @ b
                      (\ a98 :: GHC.Base.String ->
                       (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                         `cast`
                       (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                         @ b
                         k))
                   (case n of wild { GHC.Types.I# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x 10) of wild2 {
                      GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                      GHC.Types.True
                      -> let {
                           lvl117 :: Text.ParserCombinators.ReadP.P b
                           = let {
                               lvl118 :: Text.ParserCombinators.ReadP.P b
                               = GHC.Read.$wa
                                   @ (InflectionData.LexCat,
                                      InflectionData.ManifestType,
                                      GHC.Types.Int)
                                   InflectionData.$fReadManifest4
                                     `cast`
                                   (Trans
                                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                       <(InflectionData.LexCat,
                                                         InflectionData.ManifestType,
                                                         GHC.Types.Int)>_R))
                                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                  <(InflectionData.LexCat,
                                                    InflectionData.ManifestType,
                                                    GHC.Types.Int)>_R)))
                                   @ b
                                   (\ a42 :: [(InflectionData.LexCat,
                                               InflectionData.ManifestType,
                                               GHC.Types.Int)] ->
                                    GHC.Read.$wa
                                      @ InflectionData.Case
                                      InflectionData.$fReadCase2
                                        `cast`
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <InflectionData.Case>_R))
                                      @ b
                                      (\ a43 :: [InflectionData.Case] ->
                                       eta
                                         (InflectionData.Manifest @ [InflectionData.Case] a42 a43)))
                             } in
                             Text.Read.Lex.expect2
                               @ b
                               (\ a98 :: Text.Read.Lex.Lexeme ->
                                case a98 of wild1 {
                                  DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                  Text.Read.Lex.Ident a42
                                  -> case GHC.Base.eqString
                                            a42
                                            InflectionData.$fReadManifest3 of wild3 {
                                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                       GHC.Types.True -> lvl118 } })
                         } in
                         let {
                           k1 :: () -> Text.ParserCombinators.ReadP.P b
                             {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl117) -}
                           = \ w2 :: () -> lvl117
                         } in
                         Text.ParserCombinators.ReadP.Look
                           @ b
                           (\ a98 :: GHC.Base.String ->
                            (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                              `cast`
                            (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                              @ b
                              k1) } })) -}
c2c9473e8b610d8b92510c5b29d811a7
  $fReadManifest110 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SECOND"#) -}
8962065c67c1705ac692fcc8d9210bcd
  $fReadManifest111 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest113,
                  InflectionData.$fReadManifest112
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Person>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Person>_R))))) -}
8962065c67c1705ac692fcc8d9210bcd
  $fReadManifest112 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Person -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Person -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.FSTEXCL) -}
6c39073520680c7689a4ceac5ecbf32a
  $fReadManifest113 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FSTEXCL"#) -}
8962065c67c1705ac692fcc8d9210bcd
  $fReadManifest114 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest116,
                  InflectionData.$fReadManifest115
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Person>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Person>_R))))) -}
8962065c67c1705ac692fcc8d9210bcd
  $fReadManifest115 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Person -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Person -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.FSTINCL) -}
6152f441afa8a71b7d417bf46798a692
  $fReadManifest116 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FSTINCL"#) -}
8962065c67c1705ac692fcc8d9210bcd
  $fReadManifest117 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest119,
                  InflectionData.$fReadManifest118
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Person>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Person>_R))))) -}
8962065c67c1705ac692fcc8d9210bcd
  $fReadManifest118 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Person -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Person -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.FIRST) -}
33f6a680a09060c6d5fc097622923802
  $fReadManifest119 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FIRST"#) -}
222196fc2861e3056bcc058ad5507526
  $fReadManifest121 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Manifest [InflectionData.Polarity]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)>,
     Unfolding: (\ n :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Manifest [InflectionData.Polarity]
                          -> Text.ParserCombinators.ReadP.P b ->
                 let {
                   lvl116 :: Text.ParserCombinators.ReadP.P b
                   = let {
                       lvl117 :: Text.ParserCombinators.ReadP.P b
                       = eta (InflectionData.NoManifest @ [InflectionData.Polarity])
                     } in
                     Text.Read.Lex.expect2
                       @ b
                       (\ a98 :: Text.Read.Lex.Lexeme ->
                        case a98 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                          Text.Read.Lex.Ident a42
                          -> case GHC.Base.eqString
                                    a42
                                    InflectionData.$fReadManifest5 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                               GHC.Types.True -> lvl117 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl116) -}
                   = \ w2 :: () -> lvl116
                 } in
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b
                   (Text.ParserCombinators.ReadP.Look
                      @ b
                      (\ a98 :: GHC.Base.String ->
                       (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                         `cast`
                       (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                         @ b
                         k))
                   (case n of wild { GHC.Types.I# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x 10) of wild2 {
                      GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                      GHC.Types.True
                      -> let {
                           lvl117 :: Text.ParserCombinators.ReadP.P b
                           = let {
                               lvl118 :: Text.ParserCombinators.ReadP.P b
                               = GHC.Read.$wa
                                   @ (InflectionData.LexCat,
                                      InflectionData.ManifestType,
                                      GHC.Types.Int)
                                   InflectionData.$fReadManifest4
                                     `cast`
                                   (Trans
                                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                       <(InflectionData.LexCat,
                                                         InflectionData.ManifestType,
                                                         GHC.Types.Int)>_R))
                                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                  <(InflectionData.LexCat,
                                                    InflectionData.ManifestType,
                                                    GHC.Types.Int)>_R)))
                                   @ b
                                   (\ a42 :: [(InflectionData.LexCat,
                                               InflectionData.ManifestType,
                                               GHC.Types.Int)] ->
                                    GHC.Read.$wa
                                      @ InflectionData.Polarity
                                      InflectionData.$fReadManifest122
                                        `cast`
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <InflectionData.Polarity>_R))
                                      @ b
                                      (\ a43 :: [InflectionData.Polarity] ->
                                       eta
                                         (InflectionData.Manifest
                                            @ [InflectionData.Polarity]
                                            a42
                                            a43)))
                             } in
                             Text.Read.Lex.expect2
                               @ b
                               (\ a98 :: Text.Read.Lex.Lexeme ->
                                case a98 of wild1 {
                                  DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                  Text.Read.Lex.Ident a42
                                  -> case GHC.Base.eqString
                                            a42
                                            InflectionData.$fReadManifest3 of wild3 {
                                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                       GHC.Types.True -> lvl118 } })
                         } in
                         let {
                           k1 :: () -> Text.ParserCombinators.ReadP.P b
                             {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl117) -}
                           = \ w2 :: () -> lvl117
                         } in
                         Text.ParserCombinators.ReadP.Look
                           @ b
                           (\ a98 :: GHC.Base.String ->
                            (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                              `cast`
                            (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                              @ b
                              k1) } })) -}
eac2f82847484b9a87105d0693a7c5e1
  $fReadManifest122 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Polarity
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Polarity
                   InflectionData.$fReadManifest123
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.Polarity>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.Polarity>_R)))) -}
eac2f82847484b9a87105d0693a7c5e1
  $fReadManifest123 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Polarity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: InflectionData.Polarity
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ InflectionData.Polarity
                   InflectionData.$fReadManifest124
                   eta
                   @ b
                   eta1) -}
eac2f82847484b9a87105d0693a7c5e1
  $fReadManifest124 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Polarity)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Polarity)
                   InflectionData.$fReadManifest129
                   InflectionData.$fReadManifest125) -}
eac2f82847484b9a87105d0693a7c5e1
  $fReadManifest125 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Polarity)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Polarity)
                   InflectionData.$fReadManifest126
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           InflectionData.Polarity))) -}
eac2f82847484b9a87105d0693a7c5e1
  $fReadManifest126 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Polarity)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest128,
                  InflectionData.$fReadManifest127
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Polarity>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Polarity>_R))))) -}
eac2f82847484b9a87105d0693a7c5e1
  $fReadManifest127 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Polarity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Polarity
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.NEG) -}
08adc290314af7112484e7b81dfe40a1
  $fReadManifest128 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NEG"#) -}
eac2f82847484b9a87105d0693a7c5e1
  $fReadManifest129 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Polarity)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest131,
                  InflectionData.$fReadManifest130
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Polarity>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Polarity>_R))))) -}
b8dcc28a9d712c5653858c5af9d418c5
  $fReadManifest13 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Manifest [InflectionData.Definiteness]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)>,
     Unfolding: (\ n :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Manifest [InflectionData.Definiteness]
                          -> Text.ParserCombinators.ReadP.P b ->
                 let {
                   lvl116 :: Text.ParserCombinators.ReadP.P b
                   = let {
                       lvl117 :: Text.ParserCombinators.ReadP.P b
                       = eta (InflectionData.NoManifest @ [InflectionData.Definiteness])
                     } in
                     Text.Read.Lex.expect2
                       @ b
                       (\ a98 :: Text.Read.Lex.Lexeme ->
                        case a98 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                          Text.Read.Lex.Ident a42
                          -> case GHC.Base.eqString
                                    a42
                                    InflectionData.$fReadManifest5 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                               GHC.Types.True -> lvl117 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl116) -}
                   = \ w2 :: () -> lvl116
                 } in
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b
                   (Text.ParserCombinators.ReadP.Look
                      @ b
                      (\ a98 :: GHC.Base.String ->
                       (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                         `cast`
                       (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                         @ b
                         k))
                   (case n of wild { GHC.Types.I# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x 10) of wild2 {
                      GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                      GHC.Types.True
                      -> let {
                           lvl117 :: Text.ParserCombinators.ReadP.P b
                           = let {
                               lvl118 :: Text.ParserCombinators.ReadP.P b
                               = GHC.Read.$wa
                                   @ (InflectionData.LexCat,
                                      InflectionData.ManifestType,
                                      GHC.Types.Int)
                                   InflectionData.$fReadManifest4
                                     `cast`
                                   (Trans
                                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                       <(InflectionData.LexCat,
                                                         InflectionData.ManifestType,
                                                         GHC.Types.Int)>_R))
                                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                  <(InflectionData.LexCat,
                                                    InflectionData.ManifestType,
                                                    GHC.Types.Int)>_R)))
                                   @ b
                                   (\ a42 :: [(InflectionData.LexCat,
                                               InflectionData.ManifestType,
                                               GHC.Types.Int)] ->
                                    GHC.Read.$wa
                                      @ InflectionData.Definiteness
                                      InflectionData.$fReadDefiniteness2
                                        `cast`
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <InflectionData.Definiteness>_R))
                                      @ b
                                      (\ a43 :: [InflectionData.Definiteness] ->
                                       eta
                                         (InflectionData.Manifest
                                            @ [InflectionData.Definiteness]
                                            a42
                                            a43)))
                             } in
                             Text.Read.Lex.expect2
                               @ b
                               (\ a98 :: Text.Read.Lex.Lexeme ->
                                case a98 of wild1 {
                                  DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                  Text.Read.Lex.Ident a42
                                  -> case GHC.Base.eqString
                                            a42
                                            InflectionData.$fReadManifest3 of wild3 {
                                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                       GHC.Types.True -> lvl118 } })
                         } in
                         let {
                           k1 :: () -> Text.ParserCombinators.ReadP.P b
                             {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl117) -}
                           = \ w2 :: () -> lvl117
                         } in
                         Text.ParserCombinators.ReadP.Look
                           @ b
                           (\ a98 :: GHC.Base.String ->
                            (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                              `cast`
                            (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                              @ b
                              k1) } })) -}
eac2f82847484b9a87105d0693a7c5e1
  $fReadManifest130 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Polarity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Polarity
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.AFF) -}
e85051067e48846332c43b85f95ca4b4
  $fReadManifest131 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AFF"#) -}
87361aa20c5ad241b755276ffd426b4d
  $fReadManifest133 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Manifest [InflectionData.Specificity]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)>,
     Unfolding: (\ n :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Manifest [InflectionData.Specificity]
                          -> Text.ParserCombinators.ReadP.P b ->
                 let {
                   lvl116 :: Text.ParserCombinators.ReadP.P b
                   = let {
                       lvl117 :: Text.ParserCombinators.ReadP.P b
                       = eta (InflectionData.NoManifest @ [InflectionData.Specificity])
                     } in
                     Text.Read.Lex.expect2
                       @ b
                       (\ a98 :: Text.Read.Lex.Lexeme ->
                        case a98 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                          Text.Read.Lex.Ident a42
                          -> case GHC.Base.eqString
                                    a42
                                    InflectionData.$fReadManifest5 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                               GHC.Types.True -> lvl117 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl116) -}
                   = \ w2 :: () -> lvl116
                 } in
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b
                   (Text.ParserCombinators.ReadP.Look
                      @ b
                      (\ a98 :: GHC.Base.String ->
                       (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                         `cast`
                       (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                         @ b
                         k))
                   (case n of wild { GHC.Types.I# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x 10) of wild2 {
                      GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                      GHC.Types.True
                      -> let {
                           lvl117 :: Text.ParserCombinators.ReadP.P b
                           = let {
                               lvl118 :: Text.ParserCombinators.ReadP.P b
                               = GHC.Read.$wa
                                   @ (InflectionData.LexCat,
                                      InflectionData.ManifestType,
                                      GHC.Types.Int)
                                   InflectionData.$fReadManifest4
                                     `cast`
                                   (Trans
                                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                       <(InflectionData.LexCat,
                                                         InflectionData.ManifestType,
                                                         GHC.Types.Int)>_R))
                                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                  <(InflectionData.LexCat,
                                                    InflectionData.ManifestType,
                                                    GHC.Types.Int)>_R)))
                                   @ b
                                   (\ a42 :: [(InflectionData.LexCat,
                                               InflectionData.ManifestType,
                                               GHC.Types.Int)] ->
                                    GHC.Read.$wa
                                      @ InflectionData.Specificity
                                      InflectionData.$fReadManifest134
                                        `cast`
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <InflectionData.Specificity>_R))
                                      @ b
                                      (\ a43 :: [InflectionData.Specificity] ->
                                       eta
                                         (InflectionData.Manifest
                                            @ [InflectionData.Specificity]
                                            a42
                                            a43)))
                             } in
                             Text.Read.Lex.expect2
                               @ b
                               (\ a98 :: Text.Read.Lex.Lexeme ->
                                case a98 of wild1 {
                                  DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                  Text.Read.Lex.Ident a42
                                  -> case GHC.Base.eqString
                                            a42
                                            InflectionData.$fReadManifest3 of wild3 {
                                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                       GHC.Types.True -> lvl118 } })
                         } in
                         let {
                           k1 :: () -> Text.ParserCombinators.ReadP.P b
                             {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl117) -}
                           = \ w2 :: () -> lvl117
                         } in
                         Text.ParserCombinators.ReadP.Look
                           @ b
                           (\ a98 :: GHC.Base.String ->
                            (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                              `cast`
                            (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                              @ b
                              k1) } })) -}
697b496d198df68093293e68c7d50d9d
  $fReadManifest134 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Specificity
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Specificity
                   InflectionData.$fReadManifest135
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.Specificity>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.Specificity>_R)))) -}
697b496d198df68093293e68c7d50d9d
  $fReadManifest135 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Specificity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: InflectionData.Specificity
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ InflectionData.Specificity
                   InflectionData.$fReadManifest136
                   eta
                   @ b
                   eta1) -}
697b496d198df68093293e68c7d50d9d
  $fReadManifest136 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Specificity)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Specificity)
                   InflectionData.$fReadManifest141
                   InflectionData.$fReadManifest137) -}
697b496d198df68093293e68c7d50d9d
  $fReadManifest137 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Specificity)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Specificity)
                   InflectionData.$fReadManifest138
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           InflectionData.Specificity))) -}
697b496d198df68093293e68c7d50d9d
  $fReadManifest138 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Specificity)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest140,
                  InflectionData.$fReadManifest139
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Specificity>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Specificity>_R))))) -}
697b496d198df68093293e68c7d50d9d
  $fReadManifest139 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Specificity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Specificity
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.NSPEC) -}
db9a9a46c9cfa2eb799ee3fd26d1c5e9
  $fReadManifest140 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NSPEC"#) -}
697b496d198df68093293e68c7d50d9d
  $fReadManifest141 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Specificity)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest143,
                  InflectionData.$fReadManifest142
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Specificity>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Specificity>_R))))) -}
697b496d198df68093293e68c7d50d9d
  $fReadManifest142 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Specificity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Specificity
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.SPEC) -}
0c940e9f6d90c1d5ffeedf6cf7d2e8e7
  $fReadManifest143 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SPEC"#) -}
2de1a6a7a0b91d55bf295c68b7e4cefe
  $fReadManifest145 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Manifest [InflectionData.Tense]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)>,
     Unfolding: (\ n :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Manifest [InflectionData.Tense]
                          -> Text.ParserCombinators.ReadP.P b ->
                 let {
                   lvl116 :: Text.ParserCombinators.ReadP.P b
                   = let {
                       lvl117 :: Text.ParserCombinators.ReadP.P b
                       = eta (InflectionData.NoManifest @ [InflectionData.Tense])
                     } in
                     Text.Read.Lex.expect2
                       @ b
                       (\ a98 :: Text.Read.Lex.Lexeme ->
                        case a98 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                          Text.Read.Lex.Ident a42
                          -> case GHC.Base.eqString
                                    a42
                                    InflectionData.$fReadManifest5 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                               GHC.Types.True -> lvl117 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl116) -}
                   = \ w2 :: () -> lvl116
                 } in
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b
                   (Text.ParserCombinators.ReadP.Look
                      @ b
                      (\ a98 :: GHC.Base.String ->
                       (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                         `cast`
                       (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                         @ b
                         k))
                   (case n of wild { GHC.Types.I# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x 10) of wild2 {
                      GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                      GHC.Types.True
                      -> let {
                           lvl117 :: Text.ParserCombinators.ReadP.P b
                           = let {
                               lvl118 :: Text.ParserCombinators.ReadP.P b
                               = GHC.Read.$wa
                                   @ (InflectionData.LexCat,
                                      InflectionData.ManifestType,
                                      GHC.Types.Int)
                                   InflectionData.$fReadManifest4
                                     `cast`
                                   (Trans
                                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                       <(InflectionData.LexCat,
                                                         InflectionData.ManifestType,
                                                         GHC.Types.Int)>_R))
                                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                  <(InflectionData.LexCat,
                                                    InflectionData.ManifestType,
                                                    GHC.Types.Int)>_R)))
                                   @ b
                                   (\ a42 :: [(InflectionData.LexCat,
                                               InflectionData.ManifestType,
                                               GHC.Types.Int)] ->
                                    GHC.Read.$wa
                                      @ InflectionData.Tense
                                      InflectionData.$fReadManifest146
                                        `cast`
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <InflectionData.Tense>_R))
                                      @ b
                                      (\ a43 :: [InflectionData.Tense] ->
                                       eta
                                         (InflectionData.Manifest
                                            @ [InflectionData.Tense]
                                            a42
                                            a43)))
                             } in
                             Text.Read.Lex.expect2
                               @ b
                               (\ a98 :: Text.Read.Lex.Lexeme ->
                                case a98 of wild1 {
                                  DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                  Text.Read.Lex.Ident a42
                                  -> case GHC.Base.eqString
                                            a42
                                            InflectionData.$fReadManifest3 of wild3 {
                                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                       GHC.Types.True -> lvl118 } })
                         } in
                         let {
                           k1 :: () -> Text.ParserCombinators.ReadP.P b
                             {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl117) -}
                           = \ w2 :: () -> lvl117
                         } in
                         Text.ParserCombinators.ReadP.Look
                           @ b
                           (\ a98 :: GHC.Base.String ->
                            (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                              `cast`
                            (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                              @ b
                              k1) } })) -}
b52863b70f3cc5626b7d1db2a6c4ef40
  $fReadManifest146 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Tense
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Tense
                   InflectionData.$fReadManifest147
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.Tense>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.Tense>_R)))) -}
b52863b70f3cc5626b7d1db2a6c4ef40
  $fReadManifest147 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: InflectionData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ InflectionData.Tense
                   InflectionData.$fReadManifest148
                   eta
                   @ b
                   eta1) -}
b52863b70f3cc5626b7d1db2a6c4ef40
  $fReadManifest148 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadManifest217
                   InflectionData.$fReadManifest149) -}
b52863b70f3cc5626b7d1db2a6c4ef40
  $fReadManifest149 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadManifest214
                   InflectionData.$fReadManifest150) -}
35fad85d78497b98d31d8f0a6b7e0145
  $fReadManifest15 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Manifest [InflectionData.Evidentiality]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)>,
     Unfolding: (\ n :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Manifest [InflectionData.Evidentiality]
                          -> Text.ParserCombinators.ReadP.P b ->
                 let {
                   lvl116 :: Text.ParserCombinators.ReadP.P b
                   = let {
                       lvl117 :: Text.ParserCombinators.ReadP.P b
                       = eta (InflectionData.NoManifest @ [InflectionData.Evidentiality])
                     } in
                     Text.Read.Lex.expect2
                       @ b
                       (\ a98 :: Text.Read.Lex.Lexeme ->
                        case a98 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                          Text.Read.Lex.Ident a42
                          -> case GHC.Base.eqString
                                    a42
                                    InflectionData.$fReadManifest5 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                               GHC.Types.True -> lvl117 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl116) -}
                   = \ w2 :: () -> lvl116
                 } in
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b
                   (Text.ParserCombinators.ReadP.Look
                      @ b
                      (\ a98 :: GHC.Base.String ->
                       (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                         `cast`
                       (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                         @ b
                         k))
                   (case n of wild { GHC.Types.I# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x 10) of wild2 {
                      GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                      GHC.Types.True
                      -> let {
                           lvl117 :: Text.ParserCombinators.ReadP.P b
                           = let {
                               lvl118 :: Text.ParserCombinators.ReadP.P b
                               = GHC.Read.$wa
                                   @ (InflectionData.LexCat,
                                      InflectionData.ManifestType,
                                      GHC.Types.Int)
                                   InflectionData.$fReadManifest4
                                     `cast`
                                   (Trans
                                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                       <(InflectionData.LexCat,
                                                         InflectionData.ManifestType,
                                                         GHC.Types.Int)>_R))
                                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                  <(InflectionData.LexCat,
                                                    InflectionData.ManifestType,
                                                    GHC.Types.Int)>_R)))
                                   @ b
                                   (\ a42 :: [(InflectionData.LexCat,
                                               InflectionData.ManifestType,
                                               GHC.Types.Int)] ->
                                    GHC.Read.$wa
                                      @ InflectionData.Evidentiality
                                      InflectionData.$fReadEvidentiality2
                                        `cast`
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <InflectionData.Evidentiality>_R))
                                      @ b
                                      (\ a43 :: [InflectionData.Evidentiality] ->
                                       eta
                                         (InflectionData.Manifest
                                            @ [InflectionData.Evidentiality]
                                            a42
                                            a43)))
                             } in
                             Text.Read.Lex.expect2
                               @ b
                               (\ a98 :: Text.Read.Lex.Lexeme ->
                                case a98 of wild1 {
                                  DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                  Text.Read.Lex.Ident a42
                                  -> case GHC.Base.eqString
                                            a42
                                            InflectionData.$fReadManifest3 of wild3 {
                                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                       GHC.Types.True -> lvl118 } })
                         } in
                         let {
                           k1 :: () -> Text.ParserCombinators.ReadP.P b
                             {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl117) -}
                           = \ w2 :: () -> lvl117
                         } in
                         Text.ParserCombinators.ReadP.Look
                           @ b
                           (\ a98 :: GHC.Base.String ->
                            (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                              `cast`
                            (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                              @ b
                              k1) } })) -}
b52863b70f3cc5626b7d1db2a6c4ef40
  $fReadManifest150 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadManifest211
                   InflectionData.$fReadManifest151) -}
b52863b70f3cc5626b7d1db2a6c4ef40
  $fReadManifest151 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadManifest208
                   InflectionData.$fReadManifest152) -}
b52863b70f3cc5626b7d1db2a6c4ef40
  $fReadManifest152 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadManifest205
                   InflectionData.$fReadManifest153) -}
b52863b70f3cc5626b7d1db2a6c4ef40
  $fReadManifest153 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadManifest202
                   InflectionData.$fReadManifest154) -}
b52863b70f3cc5626b7d1db2a6c4ef40
  $fReadManifest154 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadManifest199
                   InflectionData.$fReadManifest155) -}
b52863b70f3cc5626b7d1db2a6c4ef40
  $fReadManifest155 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadManifest196
                   InflectionData.$fReadManifest156) -}
b52863b70f3cc5626b7d1db2a6c4ef40
  $fReadManifest156 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadManifest193
                   InflectionData.$fReadManifest157) -}
b52863b70f3cc5626b7d1db2a6c4ef40
  $fReadManifest157 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadManifest190
                   InflectionData.$fReadManifest158) -}
b52863b70f3cc5626b7d1db2a6c4ef40
  $fReadManifest158 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadManifest187
                   InflectionData.$fReadManifest159) -}
b52863b70f3cc5626b7d1db2a6c4ef40
  $fReadManifest159 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadManifest184
                   InflectionData.$fReadManifest160) -}
b52863b70f3cc5626b7d1db2a6c4ef40
  $fReadManifest160 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadManifest181
                   InflectionData.$fReadManifest161) -}
b52863b70f3cc5626b7d1db2a6c4ef40
  $fReadManifest161 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadManifest178
                   InflectionData.$fReadManifest162) -}
b52863b70f3cc5626b7d1db2a6c4ef40
  $fReadManifest162 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadManifest175
                   InflectionData.$fReadManifest163) -}
b52863b70f3cc5626b7d1db2a6c4ef40
  $fReadManifest163 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadManifest172
                   InflectionData.$fReadManifest164) -}
b52863b70f3cc5626b7d1db2a6c4ef40
  $fReadManifest164 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadManifest169
                   InflectionData.$fReadManifest165) -}
b52863b70f3cc5626b7d1db2a6c4ef40
  $fReadManifest165 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadManifest166
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense))) -}
b52863b70f3cc5626b7d1db2a6c4ef40
  $fReadManifest166 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest168,
                  InflectionData.$fReadManifest167
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
b52863b70f3cc5626b7d1db2a6c4ef40
  $fReadManifest167 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.FUTPER) -}
958027fb272e21312cce88fa22d62fed
  $fReadManifest168 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FUTPER"#) -}
b52863b70f3cc5626b7d1db2a6c4ef40
  $fReadManifest169 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest171,
                  InflectionData.$fReadManifest170
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
05e2d374b544cc7dbb985bf03abbc47a
  $fReadManifest17 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Manifest [InflectionData.Gender]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)>,
     Unfolding: (\ n :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Manifest [InflectionData.Gender]
                          -> Text.ParserCombinators.ReadP.P b ->
                 let {
                   lvl116 :: Text.ParserCombinators.ReadP.P b
                   = let {
                       lvl117 :: Text.ParserCombinators.ReadP.P b
                       = eta (InflectionData.NoManifest @ [InflectionData.Gender])
                     } in
                     Text.Read.Lex.expect2
                       @ b
                       (\ a98 :: Text.Read.Lex.Lexeme ->
                        case a98 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                          Text.Read.Lex.Ident a42
                          -> case GHC.Base.eqString
                                    a42
                                    InflectionData.$fReadManifest5 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                               GHC.Types.True -> lvl117 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl116) -}
                   = \ w2 :: () -> lvl116
                 } in
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b
                   (Text.ParserCombinators.ReadP.Look
                      @ b
                      (\ a98 :: GHC.Base.String ->
                       (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                         `cast`
                       (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                         @ b
                         k))
                   (case n of wild { GHC.Types.I# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x 10) of wild2 {
                      GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                      GHC.Types.True
                      -> let {
                           lvl117 :: Text.ParserCombinators.ReadP.P b
                           = let {
                               lvl118 :: Text.ParserCombinators.ReadP.P b
                               = GHC.Read.$wa
                                   @ (InflectionData.LexCat,
                                      InflectionData.ManifestType,
                                      GHC.Types.Int)
                                   InflectionData.$fReadManifest4
                                     `cast`
                                   (Trans
                                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                       <(InflectionData.LexCat,
                                                         InflectionData.ManifestType,
                                                         GHC.Types.Int)>_R))
                                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                  <(InflectionData.LexCat,
                                                    InflectionData.ManifestType,
                                                    GHC.Types.Int)>_R)))
                                   @ b
                                   (\ a42 :: [(InflectionData.LexCat,
                                               InflectionData.ManifestType,
                                               GHC.Types.Int)] ->
                                    GHC.Read.$wa
                                      @ InflectionData.Gender
                                      InflectionData.$fReadGender2
                                        `cast`
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <InflectionData.Gender>_R))
                                      @ b
                                      (\ a43 :: [InflectionData.Gender] ->
                                       eta
                                         (InflectionData.Manifest
                                            @ [InflectionData.Gender]
                                            a42
                                            a43)))
                             } in
                             Text.Read.Lex.expect2
                               @ b
                               (\ a98 :: Text.Read.Lex.Lexeme ->
                                case a98 of wild1 {
                                  DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                  Text.Read.Lex.Ident a42
                                  -> case GHC.Base.eqString
                                            a42
                                            InflectionData.$fReadManifest3 of wild3 {
                                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                       GHC.Types.True -> lvl118 } })
                         } in
                         let {
                           k1 :: () -> Text.ParserCombinators.ReadP.P b
                             {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl117) -}
                           = \ w2 :: () -> lvl117
                         } in
                         Text.ParserCombinators.ReadP.Look
                           @ b
                           (\ a98 :: GHC.Base.String ->
                            (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                              `cast`
                            (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                              @ b
                              k1) } })) -}
b52863b70f3cc5626b7d1db2a6c4ef40
  $fReadManifest170 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.PRSPER) -}
697a3ba3d13a3182b392f22fb7588f6c
  $fReadManifest171 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PRSPER"#) -}
b52863b70f3cc5626b7d1db2a6c4ef40
  $fReadManifest172 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest174,
                  InflectionData.$fReadManifest173
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
b52863b70f3cc5626b7d1db2a6c4ef40
  $fReadManifest173 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.PSTPER) -}
4a49f7ef5ed2509f51709775e08ca59c
  $fReadManifest174 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PSTPER"#) -}
b52863b70f3cc5626b7d1db2a6c4ef40
  $fReadManifest175 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest177,
                  InflectionData.$fReadManifest176
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
b52863b70f3cc5626b7d1db2a6c4ef40
  $fReadManifest176 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.PPST3) -}
1be1b7699f6c45dd03a4da40e73748f5
  $fReadManifest177 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PPST3"#) -}
b52863b70f3cc5626b7d1db2a6c4ef40
  $fReadManifest178 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest180,
                  InflectionData.$fReadManifest179
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
b52863b70f3cc5626b7d1db2a6c4ef40
  $fReadManifest179 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.PPST2) -}
c359b5b117f26f8b8b95f5e5a71e01b3
  $fReadManifest180 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PPST2"#) -}
b52863b70f3cc5626b7d1db2a6c4ef40
  $fReadManifest181 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest183,
                  InflectionData.$fReadManifest182
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
b52863b70f3cc5626b7d1db2a6c4ef40
  $fReadManifest182 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.PPST1) -}
cd8e56716beacd2a7e8116a4bfd732c7
  $fReadManifest183 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PPST1"#) -}
b52863b70f3cc5626b7d1db2a6c4ef40
  $fReadManifest184 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest186,
                  InflectionData.$fReadManifest185
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
b52863b70f3cc5626b7d1db2a6c4ef40
  $fReadManifest185 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.PPST) -}
59fde9343b9a23b82af05064b7017d58
  $fReadManifest186 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PPST"#) -}
b52863b70f3cc5626b7d1db2a6c4ef40
  $fReadManifest187 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest189,
                  InflectionData.$fReadManifest188
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
b52863b70f3cc5626b7d1db2a6c4ef40
  $fReadManifest188 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.PFUT) -}
03cad2fd406402447e224285512ceefd
  $fReadManifest189 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PFUT"#) -}
9be69e447a826ea2bf3097ee15b9570b
  $fReadManifest19 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Manifest [InflectionData.Honorific]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)>,
     Unfolding: (\ n :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Manifest [InflectionData.Honorific]
                          -> Text.ParserCombinators.ReadP.P b ->
                 let {
                   lvl116 :: Text.ParserCombinators.ReadP.P b
                   = let {
                       lvl117 :: Text.ParserCombinators.ReadP.P b
                       = eta (InflectionData.NoManifest @ [InflectionData.Honorific])
                     } in
                     Text.Read.Lex.expect2
                       @ b
                       (\ a98 :: Text.Read.Lex.Lexeme ->
                        case a98 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                          Text.Read.Lex.Ident a42
                          -> case GHC.Base.eqString
                                    a42
                                    InflectionData.$fReadManifest5 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                               GHC.Types.True -> lvl117 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl116) -}
                   = \ w2 :: () -> lvl116
                 } in
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b
                   (Text.ParserCombinators.ReadP.Look
                      @ b
                      (\ a98 :: GHC.Base.String ->
                       (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                         `cast`
                       (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                         @ b
                         k))
                   (case n of wild { GHC.Types.I# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x 10) of wild2 {
                      GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                      GHC.Types.True
                      -> let {
                           lvl117 :: Text.ParserCombinators.ReadP.P b
                           = let {
                               lvl118 :: Text.ParserCombinators.ReadP.P b
                               = GHC.Read.$wa
                                   @ (InflectionData.LexCat,
                                      InflectionData.ManifestType,
                                      GHC.Types.Int)
                                   InflectionData.$fReadManifest4
                                     `cast`
                                   (Trans
                                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                       <(InflectionData.LexCat,
                                                         InflectionData.ManifestType,
                                                         GHC.Types.Int)>_R))
                                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                  <(InflectionData.LexCat,
                                                    InflectionData.ManifestType,
                                                    GHC.Types.Int)>_R)))
                                   @ b
                                   (\ a42 :: [(InflectionData.LexCat,
                                               InflectionData.ManifestType,
                                               GHC.Types.Int)] ->
                                    GHC.Read.$wa
                                      @ InflectionData.Honorific
                                      InflectionData.$fReadHonorific2
                                        `cast`
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <InflectionData.Honorific>_R))
                                      @ b
                                      (\ a43 :: [InflectionData.Honorific] ->
                                       eta
                                         (InflectionData.Manifest
                                            @ [InflectionData.Honorific]
                                            a42
                                            a43)))
                             } in
                             Text.Read.Lex.expect2
                               @ b
                               (\ a98 :: Text.Read.Lex.Lexeme ->
                                case a98 of wild1 {
                                  DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                  Text.Read.Lex.Ident a42
                                  -> case GHC.Base.eqString
                                            a42
                                            InflectionData.$fReadManifest3 of wild3 {
                                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                       GHC.Types.True -> lvl118 } })
                         } in
                         let {
                           k1 :: () -> Text.ParserCombinators.ReadP.P b
                             {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl117) -}
                           = \ w2 :: () -> lvl117
                         } in
                         Text.ParserCombinators.ReadP.Look
                           @ b
                           (\ a98 :: GHC.Base.String ->
                            (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                              `cast`
                            (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                              @ b
                              k1) } })) -}
b52863b70f3cc5626b7d1db2a6c4ef40
  $fReadManifest190 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest192,
                  InflectionData.$fReadManifest191
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
b52863b70f3cc5626b7d1db2a6c4ef40
  $fReadManifest191 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.PPRS) -}
2cd58794bf41bfa3aa05fafc49893e78
  $fReadManifest192 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PPRS"#) -}
b52863b70f3cc5626b7d1db2a6c4ef40
  $fReadManifest193 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest195,
                  InflectionData.$fReadManifest194
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
b52863b70f3cc5626b7d1db2a6c4ef40
  $fReadManifest194 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.AFUT3) -}
fa51cd05c412d380e1de710249d7036b
  $fReadManifest195 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AFUT3"#) -}
b52863b70f3cc5626b7d1db2a6c4ef40
  $fReadManifest196 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest198,
                  InflectionData.$fReadManifest197
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
b52863b70f3cc5626b7d1db2a6c4ef40
  $fReadManifest197 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.AFUT2) -}
9f4889c28a094dac2ef360621c61fd38
  $fReadManifest198 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AFUT2"#) -}
b52863b70f3cc5626b7d1db2a6c4ef40
  $fReadManifest199 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest201,
                  InflectionData.$fReadManifest200
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
ceb3098f5042182adffdb975609a3c68
  $fReadManifest2 ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP (InflectionData.Manifest a)
  {- Arity: 2, Strictness: <L,1*U(A,A,1*U,A)><L,U>,
     Unfolding: (\ @ a42
                   $dRead :: GHC.Read.Read a42
                   eta :: Text.ParserCombinators.ReadPrec.Prec ->
                 let {
                   ds :: Text.ParserCombinators.ReadPrec.ReadPrec a42
                   = GHC.Read.readPrec @ a42 $dRead
                 } in
                 GHC.Read.$fReadDouble10
                   @ (InflectionData.Manifest a42)
                   (\ n :: Text.ParserCombinators.ReadPrec.Prec
                      @ b
                      eta1 :: InflectionData.Manifest a42
                              -> Text.ParserCombinators.ReadP.P b ->
                    let {
                      lvl116 :: Text.ParserCombinators.ReadP.P b
                      = let {
                          lvl117 :: Text.ParserCombinators.ReadP.P b
                          = eta1 (InflectionData.NoManifest @ a42)
                        } in
                        Text.Read.Lex.expect2
                          @ b
                          (\ a98 :: Text.Read.Lex.Lexeme ->
                           case a98 of wild {
                             DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                             Text.Read.Lex.Ident a43
                             -> case GHC.Base.eqString
                                       a43
                                       InflectionData.$fReadManifest5 of wild1 {
                                  GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                  GHC.Types.True -> lvl117 } })
                    } in
                    let {
                      k :: () -> Text.ParserCombinators.ReadP.P b
                        {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                           Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl116) -}
                      = \ w2 :: () -> lvl116
                    } in
                    Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                      @ b
                      (Text.ParserCombinators.ReadP.Look
                         @ b
                         (\ a98 :: GHC.Base.String ->
                          (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                            `cast`
                          (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                            @ b
                            k))
                      (case n of wild { GHC.Types.I# x ->
                       case GHC.Prim.tagToEnum#
                              @ GHC.Types.Bool
                              (GHC.Prim.<=# x 10) of wild2 {
                         GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                         GHC.Types.True
                         -> let {
                              lvl117 :: Text.ParserCombinators.ReadP.P b
                              = let {
                                  lvl118 :: Text.ParserCombinators.ReadP.P b
                                  = GHC.Read.$wa
                                      @ (InflectionData.LexCat,
                                         InflectionData.ManifestType,
                                         GHC.Types.Int)
                                      InflectionData.$fReadManifest4
                                        `cast`
                                      (Trans
                                           (<Text.ParserCombinators.ReadPrec.Prec>_R
                                            ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                          <(InflectionData.LexCat,
                                                            InflectionData.ManifestType,
                                                            GHC.Types.Int)>_R))
                                           (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                     <(InflectionData.LexCat,
                                                       InflectionData.ManifestType,
                                                       GHC.Types.Int)>_R)))
                                      @ b
                                      (\ a43 :: [(InflectionData.LexCat,
                                                  InflectionData.ManifestType,
                                                  GHC.Types.Int)] ->
                                       (ds
                                          `cast`
                                        (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0] <a42>_R)
                                          InflectionData.$fReadExpress4)
                                         `cast`
                                       (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <a42>_R)
                                         @ b
                                         (\ a44 :: a42 ->
                                          eta1 (InflectionData.Manifest @ a42 a43 a44)))
                                } in
                                Text.Read.Lex.expect2
                                  @ b
                                  (\ a98 :: Text.Read.Lex.Lexeme ->
                                   case a98 of wild1 {
                                     DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                     Text.Read.Lex.Ident a43
                                     -> case GHC.Base.eqString
                                               a43
                                               InflectionData.$fReadManifest3 of wild3 {
                                          GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                          GHC.Types.True -> lvl118 } })
                            } in
                            let {
                              k1 :: () -> Text.ParserCombinators.ReadP.P b
                                {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                   Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl117) -}
                              = \ w2 :: () -> lvl117
                            } in
                            Text.ParserCombinators.ReadP.Look
                              @ b
                              (\ a98 :: GHC.Base.String ->
                               (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                                 `cast`
                               (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                                 @ b
                                 k1) } }))
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.Manifest a42>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.Manifest a42>_R)))
                   eta) -}
b52863b70f3cc5626b7d1db2a6c4ef40
  $fReadManifest200 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.AFUT1) -}
8684f2c1fd29e1165964c541a7ddae4a
  $fReadManifest201 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AFUT1"#) -}
b52863b70f3cc5626b7d1db2a6c4ef40
  $fReadManifest202 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest204,
                  InflectionData.$fReadManifest203
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
b52863b70f3cc5626b7d1db2a6c4ef40
  $fReadManifest203 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.AFUT) -}
162079d885847e0cf2f101a6e26d0145
  $fReadManifest204 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AFUT"#) -}
b52863b70f3cc5626b7d1db2a6c4ef40
  $fReadManifest205 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest207,
                  InflectionData.$fReadManifest206
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
b52863b70f3cc5626b7d1db2a6c4ef40
  $fReadManifest206 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.APST) -}
25a80716b0f28e4e10bec9f4872bb578
  $fReadManifest207 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "APST"#) -}
b52863b70f3cc5626b7d1db2a6c4ef40
  $fReadManifest208 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest210,
                  InflectionData.$fReadManifest209
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
b52863b70f3cc5626b7d1db2a6c4ef40
  $fReadManifest209 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.APRS) -}
757ee0df9dc5b281e2e6b780a2a10a1e
  $fReadManifest21 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Manifest [InflectionData.Mood]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)>,
     Unfolding: (\ n :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Manifest [InflectionData.Mood]
                          -> Text.ParserCombinators.ReadP.P b ->
                 let {
                   lvl116 :: Text.ParserCombinators.ReadP.P b
                   = let {
                       lvl117 :: Text.ParserCombinators.ReadP.P b
                       = eta (InflectionData.NoManifest @ [InflectionData.Mood])
                     } in
                     Text.Read.Lex.expect2
                       @ b
                       (\ a98 :: Text.Read.Lex.Lexeme ->
                        case a98 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                          Text.Read.Lex.Ident a42
                          -> case GHC.Base.eqString
                                    a42
                                    InflectionData.$fReadManifest5 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                               GHC.Types.True -> lvl117 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl116) -}
                   = \ w2 :: () -> lvl116
                 } in
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b
                   (Text.ParserCombinators.ReadP.Look
                      @ b
                      (\ a98 :: GHC.Base.String ->
                       (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                         `cast`
                       (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                         @ b
                         k))
                   (case n of wild { GHC.Types.I# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x 10) of wild2 {
                      GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                      GHC.Types.True
                      -> let {
                           lvl117 :: Text.ParserCombinators.ReadP.P b
                           = let {
                               lvl118 :: Text.ParserCombinators.ReadP.P b
                               = GHC.Read.$wa
                                   @ (InflectionData.LexCat,
                                      InflectionData.ManifestType,
                                      GHC.Types.Int)
                                   InflectionData.$fReadManifest4
                                     `cast`
                                   (Trans
                                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                       <(InflectionData.LexCat,
                                                         InflectionData.ManifestType,
                                                         GHC.Types.Int)>_R))
                                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                  <(InflectionData.LexCat,
                                                    InflectionData.ManifestType,
                                                    GHC.Types.Int)>_R)))
                                   @ b
                                   (\ a42 :: [(InflectionData.LexCat,
                                               InflectionData.ManifestType,
                                               GHC.Types.Int)] ->
                                    GHC.Read.$wa
                                      @ InflectionData.Mood
                                      InflectionData.$fReadManifest22
                                        `cast`
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <InflectionData.Mood>_R))
                                      @ b
                                      (\ a43 :: [InflectionData.Mood] ->
                                       eta
                                         (InflectionData.Manifest @ [InflectionData.Mood] a42 a43)))
                             } in
                             Text.Read.Lex.expect2
                               @ b
                               (\ a98 :: Text.Read.Lex.Lexeme ->
                                case a98 of wild1 {
                                  DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                  Text.Read.Lex.Ident a42
                                  -> case GHC.Base.eqString
                                            a42
                                            InflectionData.$fReadManifest3 of wild3 {
                                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                       GHC.Types.True -> lvl118 } })
                         } in
                         let {
                           k1 :: () -> Text.ParserCombinators.ReadP.P b
                             {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl117) -}
                           = \ w2 :: () -> lvl117
                         } in
                         Text.ParserCombinators.ReadP.Look
                           @ b
                           (\ a98 :: GHC.Base.String ->
                            (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                              `cast`
                            (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                              @ b
                              k1) } })) -}
fa5d7dd1e08e7fd8267c8f90b7e82c63
  $fReadManifest210 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "APRS"#) -}
b52863b70f3cc5626b7d1db2a6c4ef40
  $fReadManifest211 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest213,
                  InflectionData.$fReadManifest212
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
b52863b70f3cc5626b7d1db2a6c4ef40
  $fReadManifest212 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.FUT) -}
3eb2381d6ea3ce14f0d6079fa8cae5ff
  $fReadManifest213 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FUT"#) -}
b52863b70f3cc5626b7d1db2a6c4ef40
  $fReadManifest214 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest216,
                  InflectionData.$fReadManifest215
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
b52863b70f3cc5626b7d1db2a6c4ef40
  $fReadManifest215 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.PRS) -}
bb662f3a05adaeb8aa3f9c2c6a1514ee
  $fReadManifest216 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PRS"#) -}
b52863b70f3cc5626b7d1db2a6c4ef40
  $fReadManifest217 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest219,
                  InflectionData.$fReadManifest218
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
b52863b70f3cc5626b7d1db2a6c4ef40
  $fReadManifest218 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.PST) -}
068a5baa1504a0c042e77482ee871f1f
  $fReadManifest219 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PST"#) -}
4e999fb9fa6728ec3df19bdd28482ccf
  $fReadManifest22 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Mood
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Mood
                   InflectionData.$fReadManifest23
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.Mood>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.Mood>_R)))) -}
39af686ea3a2d67e1efe3f8ccecc43bc
  $fReadManifest221 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Manifest [InflectionData.Topic]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)>,
     Unfolding: (\ n :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Manifest [InflectionData.Topic]
                          -> Text.ParserCombinators.ReadP.P b ->
                 let {
                   lvl116 :: Text.ParserCombinators.ReadP.P b
                   = let {
                       lvl117 :: Text.ParserCombinators.ReadP.P b
                       = eta (InflectionData.NoManifest @ [InflectionData.Topic])
                     } in
                     Text.Read.Lex.expect2
                       @ b
                       (\ a98 :: Text.Read.Lex.Lexeme ->
                        case a98 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                          Text.Read.Lex.Ident a42
                          -> case GHC.Base.eqString
                                    a42
                                    InflectionData.$fReadManifest5 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                               GHC.Types.True -> lvl117 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl116) -}
                   = \ w2 :: () -> lvl116
                 } in
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b
                   (Text.ParserCombinators.ReadP.Look
                      @ b
                      (\ a98 :: GHC.Base.String ->
                       (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                         `cast`
                       (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                         @ b
                         k))
                   (case n of wild { GHC.Types.I# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x 10) of wild2 {
                      GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                      GHC.Types.True
                      -> let {
                           lvl117 :: Text.ParserCombinators.ReadP.P b
                           = let {
                               lvl118 :: Text.ParserCombinators.ReadP.P b
                               = GHC.Read.$wa
                                   @ (InflectionData.LexCat,
                                      InflectionData.ManifestType,
                                      GHC.Types.Int)
                                   InflectionData.$fReadManifest4
                                     `cast`
                                   (Trans
                                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                       <(InflectionData.LexCat,
                                                         InflectionData.ManifestType,
                                                         GHC.Types.Int)>_R))
                                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                  <(InflectionData.LexCat,
                                                    InflectionData.ManifestType,
                                                    GHC.Types.Int)>_R)))
                                   @ b
                                   (\ a42 :: [(InflectionData.LexCat,
                                               InflectionData.ManifestType,
                                               GHC.Types.Int)] ->
                                    GHC.Read.$wa
                                      @ InflectionData.Topic
                                      InflectionData.$fReadManifest222
                                        `cast`
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <InflectionData.Topic>_R))
                                      @ b
                                      (\ a43 :: [InflectionData.Topic] ->
                                       eta
                                         (InflectionData.Manifest
                                            @ [InflectionData.Topic]
                                            a42
                                            a43)))
                             } in
                             Text.Read.Lex.expect2
                               @ b
                               (\ a98 :: Text.Read.Lex.Lexeme ->
                                case a98 of wild1 {
                                  DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                  Text.Read.Lex.Ident a42
                                  -> case GHC.Base.eqString
                                            a42
                                            InflectionData.$fReadManifest3 of wild3 {
                                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                       GHC.Types.True -> lvl118 } })
                         } in
                         let {
                           k1 :: () -> Text.ParserCombinators.ReadP.P b
                             {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl117) -}
                           = \ w2 :: () -> lvl117
                         } in
                         Text.ParserCombinators.ReadP.Look
                           @ b
                           (\ a98 :: GHC.Base.String ->
                            (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                              `cast`
                            (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                              @ b
                              k1) } })) -}
39f87e694fb863c1c8c61df134a24729
  $fReadManifest222 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Topic
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Topic
                   InflectionData.$fReadManifest223
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.Topic>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.Topic>_R)))) -}
39f87e694fb863c1c8c61df134a24729
  $fReadManifest223 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Topic -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: InflectionData.Topic -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ InflectionData.Topic
                   InflectionData.$fReadManifest224
                   eta
                   @ b
                   eta1) -}
39f87e694fb863c1c8c61df134a24729
  $fReadManifest224 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Topic)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Topic)
                   InflectionData.$fReadManifest229
                   InflectionData.$fReadManifest225) -}
39f87e694fb863c1c8c61df134a24729
  $fReadManifest225 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Topic)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Topic)
                   InflectionData.$fReadManifest226
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Topic))) -}
39f87e694fb863c1c8c61df134a24729
  $fReadManifest226 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Topic)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest228,
                  InflectionData.$fReadManifest227
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Topic>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Topic>_R))))) -}
39f87e694fb863c1c8c61df134a24729
  $fReadManifest227 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Topic -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Topic -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.NTOP) -}
f6673bec7f018887688db461d5bb9081
  $fReadManifest228 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NTOP"#) -}
39f87e694fb863c1c8c61df134a24729
  $fReadManifest229 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Topic)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest231,
                  InflectionData.$fReadManifest230
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Topic>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Topic>_R))))) -}
4e999fb9fa6728ec3df19bdd28482ccf
  $fReadManifest23 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: InflectionData.Mood -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ InflectionData.Mood
                   InflectionData.$fReadManifest24
                   eta
                   @ b
                   eta1) -}
39f87e694fb863c1c8c61df134a24729
  $fReadManifest230 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Topic -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Topic -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.TOP) -}
e9cb81cf3e2e35f77ff86f8d311ae932
  $fReadManifest231 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TOP"#) -}
429ec22b2b07047c9d3922ec3faffa11
  $fReadManifest233 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Manifest [InflectionData.Transitivity]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)>,
     Unfolding: (\ n :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Manifest [InflectionData.Transitivity]
                          -> Text.ParserCombinators.ReadP.P b ->
                 let {
                   lvl116 :: Text.ParserCombinators.ReadP.P b
                   = let {
                       lvl117 :: Text.ParserCombinators.ReadP.P b
                       = eta (InflectionData.NoManifest @ [InflectionData.Transitivity])
                     } in
                     Text.Read.Lex.expect2
                       @ b
                       (\ a98 :: Text.Read.Lex.Lexeme ->
                        case a98 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                          Text.Read.Lex.Ident a42
                          -> case GHC.Base.eqString
                                    a42
                                    InflectionData.$fReadManifest5 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                               GHC.Types.True -> lvl117 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl116) -}
                   = \ w2 :: () -> lvl116
                 } in
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b
                   (Text.ParserCombinators.ReadP.Look
                      @ b
                      (\ a98 :: GHC.Base.String ->
                       (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                         `cast`
                       (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                         @ b
                         k))
                   (case n of wild { GHC.Types.I# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x 10) of wild2 {
                      GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                      GHC.Types.True
                      -> let {
                           lvl117 :: Text.ParserCombinators.ReadP.P b
                           = let {
                               lvl118 :: Text.ParserCombinators.ReadP.P b
                               = GHC.Read.$wa
                                   @ (InflectionData.LexCat,
                                      InflectionData.ManifestType,
                                      GHC.Types.Int)
                                   InflectionData.$fReadManifest4
                                     `cast`
                                   (Trans
                                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                       <(InflectionData.LexCat,
                                                         InflectionData.ManifestType,
                                                         GHC.Types.Int)>_R))
                                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                  <(InflectionData.LexCat,
                                                    InflectionData.ManifestType,
                                                    GHC.Types.Int)>_R)))
                                   @ b
                                   (\ a42 :: [(InflectionData.LexCat,
                                               InflectionData.ManifestType,
                                               GHC.Types.Int)] ->
                                    GHC.Read.$wa
                                      @ InflectionData.Transitivity
                                      InflectionData.$fReadManifest234
                                        `cast`
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <InflectionData.Transitivity>_R))
                                      @ b
                                      (\ a43 :: [InflectionData.Transitivity] ->
                                       eta
                                         (InflectionData.Manifest
                                            @ [InflectionData.Transitivity]
                                            a42
                                            a43)))
                             } in
                             Text.Read.Lex.expect2
                               @ b
                               (\ a98 :: Text.Read.Lex.Lexeme ->
                                case a98 of wild1 {
                                  DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                  Text.Read.Lex.Ident a42
                                  -> case GHC.Base.eqString
                                            a42
                                            InflectionData.$fReadManifest3 of wild3 {
                                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                       GHC.Types.True -> lvl118 } })
                         } in
                         let {
                           k1 :: () -> Text.ParserCombinators.ReadP.P b
                             {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl117) -}
                           = \ w2 :: () -> lvl117
                         } in
                         Text.ParserCombinators.ReadP.Look
                           @ b
                           (\ a98 :: GHC.Base.String ->
                            (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                              `cast`
                            (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                              @ b
                              k1) } })) -}
57945260416d71dc87e31cac669b161f
  $fReadManifest234 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Transitivity
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Transitivity
                   InflectionData.$fReadManifest235
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.Transitivity>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.Transitivity>_R)))) -}
57945260416d71dc87e31cac669b161f
  $fReadManifest235 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Transitivity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: InflectionData.Transitivity
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ InflectionData.Transitivity
                   InflectionData.$fReadManifest236
                   eta
                   @ b
                   eta1) -}
57945260416d71dc87e31cac669b161f
  $fReadManifest236 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Transitivity)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Transitivity)
                   InflectionData.$fReadManifest249
                   InflectionData.$fReadManifest237) -}
57945260416d71dc87e31cac669b161f
  $fReadManifest237 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Transitivity)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Transitivity)
                   InflectionData.$fReadManifest246
                   InflectionData.$fReadManifest238) -}
57945260416d71dc87e31cac669b161f
  $fReadManifest238 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Transitivity)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Transitivity)
                   InflectionData.$fReadManifest243
                   InflectionData.$fReadManifest239) -}
57945260416d71dc87e31cac669b161f
  $fReadManifest239 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Transitivity)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Transitivity)
                   InflectionData.$fReadManifest240
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           InflectionData.Transitivity))) -}
4e999fb9fa6728ec3df19bdd28482ccf
  $fReadManifest24 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
                   InflectionData.$fReadManifest61
                   InflectionData.$fReadManifest25) -}
57945260416d71dc87e31cac669b161f
  $fReadManifest240 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Transitivity)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest242,
                  InflectionData.$fReadManifest241
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Transitivity>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Transitivity>_R))))) -}
57945260416d71dc87e31cac669b161f
  $fReadManifest241 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Transitivity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Transitivity
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.DITRANS) -}
42d8a4c210ce0cdff6f8faaa94917b10
  $fReadManifest242 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DITRANS"#) -}
57945260416d71dc87e31cac669b161f
  $fReadManifest243 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Transitivity)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest245,
                  InflectionData.$fReadManifest244
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Transitivity>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Transitivity>_R))))) -}
57945260416d71dc87e31cac669b161f
  $fReadManifest244 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Transitivity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Transitivity
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.MTRANS) -}
a2352b5dd99187e83b02b2a0f75a3de0
  $fReadManifest245 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "MTRANS"#) -}
57945260416d71dc87e31cac669b161f
  $fReadManifest246 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Transitivity)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest248,
                  InflectionData.$fReadManifest247
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Transitivity>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Transitivity>_R))))) -}
57945260416d71dc87e31cac669b161f
  $fReadManifest247 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Transitivity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Transitivity
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.TRANS) -}
e469cde8edf2f6319ddcd762e35ac5b7
  $fReadManifest248 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TRANS"#) -}
57945260416d71dc87e31cac669b161f
  $fReadManifest249 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Transitivity)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest251,
                  InflectionData.$fReadManifest250
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Transitivity>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Transitivity>_R))))) -}
4e999fb9fa6728ec3df19bdd28482ccf
  $fReadManifest25 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
                   InflectionData.$fReadManifest58
                   InflectionData.$fReadManifest26) -}
57945260416d71dc87e31cac669b161f
  $fReadManifest250 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Transitivity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Transitivity
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.NTRANS) -}
d235a21465ae6c0a4819cc57dd8fdc47
  $fReadManifest251 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NTRANS"#) -}
aa25e9130256b8152db8d8132d49dc1a
  $fReadManifest253 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Manifest [InflectionData.Voice]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)>,
     Unfolding: (\ n :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Manifest [InflectionData.Voice]
                          -> Text.ParserCombinators.ReadP.P b ->
                 let {
                   lvl116 :: Text.ParserCombinators.ReadP.P b
                   = let {
                       lvl117 :: Text.ParserCombinators.ReadP.P b
                       = eta (InflectionData.NoManifest @ [InflectionData.Voice])
                     } in
                     Text.Read.Lex.expect2
                       @ b
                       (\ a98 :: Text.Read.Lex.Lexeme ->
                        case a98 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                          Text.Read.Lex.Ident a42
                          -> case GHC.Base.eqString
                                    a42
                                    InflectionData.$fReadManifest5 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                               GHC.Types.True -> lvl117 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl116) -}
                   = \ w2 :: () -> lvl116
                 } in
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b
                   (Text.ParserCombinators.ReadP.Look
                      @ b
                      (\ a98 :: GHC.Base.String ->
                       (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                         `cast`
                       (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                         @ b
                         k))
                   (case n of wild { GHC.Types.I# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x 10) of wild2 {
                      GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                      GHC.Types.True
                      -> let {
                           lvl117 :: Text.ParserCombinators.ReadP.P b
                           = let {
                               lvl118 :: Text.ParserCombinators.ReadP.P b
                               = GHC.Read.$wa
                                   @ (InflectionData.LexCat,
                                      InflectionData.ManifestType,
                                      GHC.Types.Int)
                                   InflectionData.$fReadManifest4
                                     `cast`
                                   (Trans
                                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                       <(InflectionData.LexCat,
                                                         InflectionData.ManifestType,
                                                         GHC.Types.Int)>_R))
                                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                  <(InflectionData.LexCat,
                                                    InflectionData.ManifestType,
                                                    GHC.Types.Int)>_R)))
                                   @ b
                                   (\ a42 :: [(InflectionData.LexCat,
                                               InflectionData.ManifestType,
                                               GHC.Types.Int)] ->
                                    GHC.Read.$wa
                                      @ InflectionData.Voice
                                      InflectionData.$fReadManifest254
                                        `cast`
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <InflectionData.Voice>_R))
                                      @ b
                                      (\ a43 :: [InflectionData.Voice] ->
                                       eta
                                         (InflectionData.Manifest
                                            @ [InflectionData.Voice]
                                            a42
                                            a43)))
                             } in
                             Text.Read.Lex.expect2
                               @ b
                               (\ a98 :: Text.Read.Lex.Lexeme ->
                                case a98 of wild1 {
                                  DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                  Text.Read.Lex.Ident a42
                                  -> case GHC.Base.eqString
                                            a42
                                            InflectionData.$fReadManifest3 of wild3 {
                                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                       GHC.Types.True -> lvl118 } })
                         } in
                         let {
                           k1 :: () -> Text.ParserCombinators.ReadP.P b
                             {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl117) -}
                           = \ w2 :: () -> lvl117
                         } in
                         Text.ParserCombinators.ReadP.Look
                           @ b
                           (\ a98 :: GHC.Base.String ->
                            (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                              `cast`
                            (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                              @ b
                              k1) } })) -}
729607927630d1e92c199129334472f1
  $fReadManifest254 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Voice
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Voice
                   InflectionData.$fReadManifest255
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.Voice>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.Voice>_R)))) -}
729607927630d1e92c199129334472f1
  $fReadManifest255 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Voice -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: InflectionData.Voice -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ InflectionData.Voice
                   InflectionData.$fReadManifest256
                   eta
                   @ b
                   eta1) -}
729607927630d1e92c199129334472f1
  $fReadManifest256 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Voice)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Voice)
                   InflectionData.$fReadManifest265
                   InflectionData.$fReadManifest257) -}
729607927630d1e92c199129334472f1
  $fReadManifest257 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Voice)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Voice)
                   InflectionData.$fReadManifest262
                   InflectionData.$fReadManifest258) -}
729607927630d1e92c199129334472f1
  $fReadManifest258 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Voice)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Voice)
                   InflectionData.$fReadManifest259
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Voice))) -}
729607927630d1e92c199129334472f1
  $fReadManifest259 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Voice)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest261,
                  InflectionData.$fReadManifest260
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Voice>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Voice>_R))))) -}
4e999fb9fa6728ec3df19bdd28482ccf
  $fReadManifest26 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
                   InflectionData.$fReadManifest55
                   InflectionData.$fReadManifest27) -}
729607927630d1e92c199129334472f1
  $fReadManifest260 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Voice -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Voice -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.PASSIVE) -}
adba01c75ebcf4ac1a361daa6d2f70e4
  $fReadManifest261 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PASSIVE"#) -}
729607927630d1e92c199129334472f1
  $fReadManifest262 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Voice)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest264,
                  InflectionData.$fReadManifest263
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Voice>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Voice>_R))))) -}
729607927630d1e92c199129334472f1
  $fReadManifest263 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Voice -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Voice -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.MIDDLE) -}
0353b47b5d1e47c354fd58aa7593a732
  $fReadManifest264 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "MIDDLE"#) -}
729607927630d1e92c199129334472f1
  $fReadManifest265 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Voice)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest267,
                  InflectionData.$fReadManifest266
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Voice>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Voice>_R))))) -}
729607927630d1e92c199129334472f1
  $fReadManifest266 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Voice -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Voice -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.ACTIVE) -}
a696d2d3c5ff272049ee6c25fc0c0a78
  $fReadManifest267 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ACTIVE"#) -}
cab838dcb7584ef4fa94d4c7f0d7a840
  $fReadManifest269 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Manifest [InflectionData.Volition]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)>,
     Unfolding: (\ n :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Manifest [InflectionData.Volition]
                          -> Text.ParserCombinators.ReadP.P b ->
                 let {
                   lvl116 :: Text.ParserCombinators.ReadP.P b
                   = let {
                       lvl117 :: Text.ParserCombinators.ReadP.P b
                       = eta (InflectionData.NoManifest @ [InflectionData.Volition])
                     } in
                     Text.Read.Lex.expect2
                       @ b
                       (\ a98 :: Text.Read.Lex.Lexeme ->
                        case a98 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                          Text.Read.Lex.Ident a42
                          -> case GHC.Base.eqString
                                    a42
                                    InflectionData.$fReadManifest5 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                               GHC.Types.True -> lvl117 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl116) -}
                   = \ w2 :: () -> lvl116
                 } in
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b
                   (Text.ParserCombinators.ReadP.Look
                      @ b
                      (\ a98 :: GHC.Base.String ->
                       (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                         `cast`
                       (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                         @ b
                         k))
                   (case n of wild { GHC.Types.I# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x 10) of wild2 {
                      GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                      GHC.Types.True
                      -> let {
                           lvl117 :: Text.ParserCombinators.ReadP.P b
                           = let {
                               lvl118 :: Text.ParserCombinators.ReadP.P b
                               = GHC.Read.$wa
                                   @ (InflectionData.LexCat,
                                      InflectionData.ManifestType,
                                      GHC.Types.Int)
                                   InflectionData.$fReadManifest4
                                     `cast`
                                   (Trans
                                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                       <(InflectionData.LexCat,
                                                         InflectionData.ManifestType,
                                                         GHC.Types.Int)>_R))
                                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                  <(InflectionData.LexCat,
                                                    InflectionData.ManifestType,
                                                    GHC.Types.Int)>_R)))
                                   @ b
                                   (\ a42 :: [(InflectionData.LexCat,
                                               InflectionData.ManifestType,
                                               GHC.Types.Int)] ->
                                    GHC.Read.$wa
                                      @ InflectionData.Volition
                                      InflectionData.$fReadManifest270
                                        `cast`
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <InflectionData.Volition>_R))
                                      @ b
                                      (\ a43 :: [InflectionData.Volition] ->
                                       eta
                                         (InflectionData.Manifest
                                            @ [InflectionData.Volition]
                                            a42
                                            a43)))
                             } in
                             Text.Read.Lex.expect2
                               @ b
                               (\ a98 :: Text.Read.Lex.Lexeme ->
                                case a98 of wild1 {
                                  DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                  Text.Read.Lex.Ident a42
                                  -> case GHC.Base.eqString
                                            a42
                                            InflectionData.$fReadManifest3 of wild3 {
                                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                       GHC.Types.True -> lvl118 } })
                         } in
                         let {
                           k1 :: () -> Text.ParserCombinators.ReadP.P b
                             {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl117) -}
                           = \ w2 :: () -> lvl117
                         } in
                         Text.ParserCombinators.ReadP.Look
                           @ b
                           (\ a98 :: GHC.Base.String ->
                            (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                              `cast`
                            (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                              @ b
                              k1) } })) -}
4e999fb9fa6728ec3df19bdd28482ccf
  $fReadManifest27 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
                   InflectionData.$fReadManifest52
                   InflectionData.$fReadManifest28) -}
fed3c8348b016bc886742bbd8b88b80d
  $fReadManifest270 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Volition
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Volition
                   InflectionData.$fReadManifest271
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.Volition>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.Volition>_R)))) -}
fed3c8348b016bc886742bbd8b88b80d
  $fReadManifest271 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Volition -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: InflectionData.Volition
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ InflectionData.Volition
                   InflectionData.$fReadManifest272
                   eta
                   @ b
                   eta1) -}
fed3c8348b016bc886742bbd8b88b80d
  $fReadManifest272 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Volition)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Volition)
                   InflectionData.$fReadManifest277
                   InflectionData.$fReadManifest273) -}
fed3c8348b016bc886742bbd8b88b80d
  $fReadManifest273 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Volition)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Volition)
                   InflectionData.$fReadManifest274
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           InflectionData.Volition))) -}
fed3c8348b016bc886742bbd8b88b80d
  $fReadManifest274 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Volition)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest276,
                  InflectionData.$fReadManifest275
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Volition>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Volition>_R))))) -}
fed3c8348b016bc886742bbd8b88b80d
  $fReadManifest275 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Volition -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Volition
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.NVOL) -}
4fff9b095d90a56eaf342f2f18097632
  $fReadManifest276 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NVOL"#) -}
fed3c8348b016bc886742bbd8b88b80d
  $fReadManifest277 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Volition)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest279,
                  InflectionData.$fReadManifest278
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Volition>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Volition>_R))))) -}
fed3c8348b016bc886742bbd8b88b80d
  $fReadManifest278 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Volition -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Volition
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.VOL) -}
e2f3f49ccf4041c993245ea9d478d6df
  $fReadManifest279 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "VOL"#) -}
4e999fb9fa6728ec3df19bdd28482ccf
  $fReadManifest28 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
                   InflectionData.$fReadManifest49
                   InflectionData.$fReadManifest29) -}
4e999fb9fa6728ec3df19bdd28482ccf
  $fReadManifest29 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
                   InflectionData.$fReadManifest46
                   InflectionData.$fReadManifest30) -}
8c6aebea9419dc7f0de35408a7efc4d3
  $fReadManifest3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Manifest"#) -}
4e999fb9fa6728ec3df19bdd28482ccf
  $fReadManifest30 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
                   InflectionData.$fReadManifest43
                   InflectionData.$fReadManifest31) -}
4e999fb9fa6728ec3df19bdd28482ccf
  $fReadManifest31 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
                   InflectionData.$fReadManifest40
                   InflectionData.$fReadManifest32) -}
4e999fb9fa6728ec3df19bdd28482ccf
  $fReadManifest32 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
                   InflectionData.$fReadManifest37
                   InflectionData.$fReadManifest33) -}
4e999fb9fa6728ec3df19bdd28482ccf
  $fReadManifest33 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
                   InflectionData.$fReadManifest34
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood))) -}
4e999fb9fa6728ec3df19bdd28482ccf
  $fReadManifest34 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest36,
                  InflectionData.$fReadManifest35
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Mood>_R))))) -}
4e999fb9fa6728ec3df19bdd28482ccf
  $fReadManifest35 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Mood -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.COND) -}
ece15304c5fdd41402aab15f54b02530
  $fReadManifest36 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "COND"#) -}
4e999fb9fa6728ec3df19bdd28482ccf
  $fReadManifest37 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest39,
                  InflectionData.$fReadManifest38
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Mood>_R))))) -}
4e999fb9fa6728ec3df19bdd28482ccf
  $fReadManifest38 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Mood -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.POT) -}
3961ae928c7605f251e7f33361689b2d
  $fReadManifest39 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "POT"#) -}
75fe737f30fab12d2b41ff97f7fdedf6
  $fReadManifest4 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b1.
       ((InflectionData.LexCat,
         InflectionData.ManifestType,
         GHC.Types.Int)
        -> Text.ParserCombinators.ReadP.P b1)
       -> Text.ParserCombinators.ReadP.P b1
  {- Arity: 2,
     Unfolding: (\ w3 :: Text.ParserCombinators.ReadPrec.Prec
                   @ b1
                   w4 :: (InflectionData.LexCat,
                          InflectionData.ManifestType,
                          GHC.Types.Int)
                         -> Text.ParserCombinators.ReadP.P b1[OneShot] ->
                 GHC.Read.$wa4
                   @ InflectionData.LexCat
                   @ InflectionData.ManifestType
                   @ GHC.Types.Int
                   InflectionData.$fReadLexCat
                   InflectionData.$fReadManifestType
                   GHC.Read.$fReadInt
                   @ b1
                   w4) -}
4e999fb9fa6728ec3df19bdd28482ccf
  $fReadManifest40 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest42,
                  InflectionData.$fReadManifest41
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Mood>_R))))) -}
4e999fb9fa6728ec3df19bdd28482ccf
  $fReadManifest41 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Mood -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.SBJV) -}
9a1052c3748da8158f6f6a87c6a5fcba
  $fReadManifest42 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SBJV"#) -}
4e999fb9fa6728ec3df19bdd28482ccf
  $fReadManifest43 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest45,
                  InflectionData.$fReadManifest44
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Mood>_R))))) -}
4e999fb9fa6728ec3df19bdd28482ccf
  $fReadManifest44 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Mood -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.EPIS) -}
d56c4a20895d1d86526179fd068c2a7d
  $fReadManifest45 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "EPIS"#) -}
4e999fb9fa6728ec3df19bdd28482ccf
  $fReadManifest46 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest48,
                  InflectionData.$fReadManifest47
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Mood>_R))))) -}
4e999fb9fa6728ec3df19bdd28482ccf
  $fReadManifest47 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Mood -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.OPT) -}
719d523684703f264abfb7ecf353cc78
  $fReadManifest48 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OPT"#) -}
4e999fb9fa6728ec3df19bdd28482ccf
  $fReadManifest49 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest51,
                  InflectionData.$fReadManifest50
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Mood>_R))))) -}
1811093cd4f5f7f187b9d7c9c84dbb92
  $fReadManifest5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NoManifest"#) -}
4e999fb9fa6728ec3df19bdd28482ccf
  $fReadManifest50 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Mood -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.JUS) -}
8cb472ea1d65bc482103f6dfa0ccffd9
  $fReadManifest51 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "JUS"#) -}
4e999fb9fa6728ec3df19bdd28482ccf
  $fReadManifest52 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest54,
                  InflectionData.$fReadManifest53
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Mood>_R))))) -}
4e999fb9fa6728ec3df19bdd28482ccf
  $fReadManifest53 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Mood -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.IMP) -}
4a7078357e8a25e25b38ebaa20763b02
  $fReadManifest54 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "IMP"#) -}
4e999fb9fa6728ec3df19bdd28482ccf
  $fReadManifest55 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest57,
                  InflectionData.$fReadManifest56
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Mood>_R))))) -}
4e999fb9fa6728ec3df19bdd28482ccf
  $fReadManifest56 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Mood -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.DEO) -}
3f0a62d40b1321daaa346d4db597e0f4
  $fReadManifest57 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DEO"#) -}
4e999fb9fa6728ec3df19bdd28482ccf
  $fReadManifest58 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest60,
                  InflectionData.$fReadManifest59
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Mood>_R))))) -}
4e999fb9fa6728ec3df19bdd28482ccf
  $fReadManifest59 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Mood -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.IRR) -}
bfaa863858a654f9dadd98b751802476
  $fReadManifest60 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "IRR"#) -}
4e999fb9fa6728ec3df19bdd28482ccf
  $fReadManifest61 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest63,
                  InflectionData.$fReadManifest62
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Mood>_R))))) -}
4e999fb9fa6728ec3df19bdd28482ccf
  $fReadManifest62 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Mood -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.IND) -}
b517a4f8592990bf462f17b12fd3925e
  $fReadManifest63 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "IND"#) -}
6ba290853822068a6e0dfb1b7b630547
  $fReadManifest65 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Manifest [InflectionData.Number]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)>,
     Unfolding: (\ n :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Manifest [InflectionData.Number]
                          -> Text.ParserCombinators.ReadP.P b ->
                 let {
                   lvl116 :: Text.ParserCombinators.ReadP.P b
                   = let {
                       lvl117 :: Text.ParserCombinators.ReadP.P b
                       = eta (InflectionData.NoManifest @ [InflectionData.Number])
                     } in
                     Text.Read.Lex.expect2
                       @ b
                       (\ a98 :: Text.Read.Lex.Lexeme ->
                        case a98 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                          Text.Read.Lex.Ident a42
                          -> case GHC.Base.eqString
                                    a42
                                    InflectionData.$fReadManifest5 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                               GHC.Types.True -> lvl117 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl116) -}
                   = \ w2 :: () -> lvl116
                 } in
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b
                   (Text.ParserCombinators.ReadP.Look
                      @ b
                      (\ a98 :: GHC.Base.String ->
                       (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                         `cast`
                       (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                         @ b
                         k))
                   (case n of wild { GHC.Types.I# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x 10) of wild2 {
                      GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                      GHC.Types.True
                      -> let {
                           lvl117 :: Text.ParserCombinators.ReadP.P b
                           = let {
                               lvl118 :: Text.ParserCombinators.ReadP.P b
                               = GHC.Read.$wa
                                   @ (InflectionData.LexCat,
                                      InflectionData.ManifestType,
                                      GHC.Types.Int)
                                   InflectionData.$fReadManifest4
                                     `cast`
                                   (Trans
                                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                       <(InflectionData.LexCat,
                                                         InflectionData.ManifestType,
                                                         GHC.Types.Int)>_R))
                                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                  <(InflectionData.LexCat,
                                                    InflectionData.ManifestType,
                                                    GHC.Types.Int)>_R)))
                                   @ b
                                   (\ a42 :: [(InflectionData.LexCat,
                                               InflectionData.ManifestType,
                                               GHC.Types.Int)] ->
                                    GHC.Read.$wa
                                      @ InflectionData.Number
                                      InflectionData.$fReadManifest66
                                        `cast`
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <InflectionData.Number>_R))
                                      @ b
                                      (\ a43 :: [InflectionData.Number] ->
                                       eta
                                         (InflectionData.Manifest
                                            @ [InflectionData.Number]
                                            a42
                                            a43)))
                             } in
                             Text.Read.Lex.expect2
                               @ b
                               (\ a98 :: Text.Read.Lex.Lexeme ->
                                case a98 of wild1 {
                                  DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                  Text.Read.Lex.Ident a42
                                  -> case GHC.Base.eqString
                                            a42
                                            InflectionData.$fReadManifest3 of wild3 {
                                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                       GHC.Types.True -> lvl118 } })
                         } in
                         let {
                           k1 :: () -> Text.ParserCombinators.ReadP.P b
                             {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl117) -}
                           = \ w2 :: () -> lvl117
                         } in
                         Text.ParserCombinators.ReadP.Look
                           @ b
                           (\ a98 :: GHC.Base.String ->
                            (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                              `cast`
                            (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                              @ b
                              k1) } })) -}
5983d4e902f20ca491bfcf4389614668
  $fReadManifest66 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Number
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Number
                   InflectionData.$fReadManifest67
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.Number>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.Number>_R)))) -}
5983d4e902f20ca491bfcf4389614668
  $fReadManifest67 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Number -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: InflectionData.Number
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ InflectionData.Number
                   InflectionData.$fReadManifest68
                   eta
                   @ b
                   eta1) -}
5983d4e902f20ca491bfcf4389614668
  $fReadManifest68 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)
                   InflectionData.$fReadManifest85
                   InflectionData.$fReadManifest69) -}
5983d4e902f20ca491bfcf4389614668
  $fReadManifest69 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)
                   InflectionData.$fReadManifest82
                   InflectionData.$fReadManifest70) -}
2bb00f5d732ef8d647d9125114d1317d
  $fReadManifest7 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Manifest [InflectionData.Animacy]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)>,
     Unfolding: (\ n :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Manifest [InflectionData.Animacy]
                          -> Text.ParserCombinators.ReadP.P b ->
                 let {
                   lvl116 :: Text.ParserCombinators.ReadP.P b
                   = let {
                       lvl117 :: Text.ParserCombinators.ReadP.P b
                       = eta (InflectionData.NoManifest @ [InflectionData.Animacy])
                     } in
                     Text.Read.Lex.expect2
                       @ b
                       (\ a98 :: Text.Read.Lex.Lexeme ->
                        case a98 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                          Text.Read.Lex.Ident a42
                          -> case GHC.Base.eqString
                                    a42
                                    InflectionData.$fReadManifest5 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                               GHC.Types.True -> lvl117 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl116) -}
                   = \ w2 :: () -> lvl116
                 } in
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b
                   (Text.ParserCombinators.ReadP.Look
                      @ b
                      (\ a98 :: GHC.Base.String ->
                       (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                         `cast`
                       (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                         @ b
                         k))
                   (case n of wild { GHC.Types.I# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x 10) of wild2 {
                      GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                      GHC.Types.True
                      -> let {
                           lvl117 :: Text.ParserCombinators.ReadP.P b
                           = let {
                               lvl118 :: Text.ParserCombinators.ReadP.P b
                               = GHC.Read.$wa
                                   @ (InflectionData.LexCat,
                                      InflectionData.ManifestType,
                                      GHC.Types.Int)
                                   InflectionData.$fReadManifest4
                                     `cast`
                                   (Trans
                                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                       <(InflectionData.LexCat,
                                                         InflectionData.ManifestType,
                                                         GHC.Types.Int)>_R))
                                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                  <(InflectionData.LexCat,
                                                    InflectionData.ManifestType,
                                                    GHC.Types.Int)>_R)))
                                   @ b
                                   (\ a42 :: [(InflectionData.LexCat,
                                               InflectionData.ManifestType,
                                               GHC.Types.Int)] ->
                                    GHC.Read.$wa
                                      @ InflectionData.Animacy
                                      InflectionData.$fReadAnimacy2
                                        `cast`
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <InflectionData.Animacy>_R))
                                      @ b
                                      (\ a43 :: [InflectionData.Animacy] ->
                                       eta
                                         (InflectionData.Manifest
                                            @ [InflectionData.Animacy]
                                            a42
                                            a43)))
                             } in
                             Text.Read.Lex.expect2
                               @ b
                               (\ a98 :: Text.Read.Lex.Lexeme ->
                                case a98 of wild1 {
                                  DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                  Text.Read.Lex.Ident a42
                                  -> case GHC.Base.eqString
                                            a42
                                            InflectionData.$fReadManifest3 of wild3 {
                                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                       GHC.Types.True -> lvl118 } })
                         } in
                         let {
                           k1 :: () -> Text.ParserCombinators.ReadP.P b
                             {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl117) -}
                           = \ w2 :: () -> lvl117
                         } in
                         Text.ParserCombinators.ReadP.Look
                           @ b
                           (\ a98 :: GHC.Base.String ->
                            (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                              `cast`
                            (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                              @ b
                              k1) } })) -}
5983d4e902f20ca491bfcf4389614668
  $fReadManifest70 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)
                   InflectionData.$fReadManifest79
                   InflectionData.$fReadManifest71) -}
5983d4e902f20ca491bfcf4389614668
  $fReadManifest71 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)
                   InflectionData.$fReadManifest76
                   InflectionData.$fReadManifest72) -}
5983d4e902f20ca491bfcf4389614668
  $fReadManifest72 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)
                   InflectionData.$fReadManifest73
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           InflectionData.Number))) -}
5983d4e902f20ca491bfcf4389614668
  $fReadManifest73 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest75,
                  InflectionData.$fReadManifest74
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Number>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Number>_R))))) -}
5983d4e902f20ca491bfcf4389614668
  $fReadManifest74 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Number -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Number -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.PL) -}
bc040ebaa36ba28fd6019ca0d35eb7eb
  $fReadManifest75 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PL"#) -}
5983d4e902f20ca491bfcf4389614668
  $fReadManifest76 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest78,
                  InflectionData.$fReadManifest77
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Number>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Number>_R))))) -}
5983d4e902f20ca491bfcf4389614668
  $fReadManifest77 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Number -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Number -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.PA) -}
163b3e9f643b8d2ebe3c398247a1ae1b
  $fReadManifest78 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PA"#) -}
5983d4e902f20ca491bfcf4389614668
  $fReadManifest79 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest81,
                  InflectionData.$fReadManifest80
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Number>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Number>_R))))) -}
5983d4e902f20ca491bfcf4389614668
  $fReadManifest80 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Number -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Number -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.TRI) -}
ac99543f0c9dc63ba36213726070ca36
  $fReadManifest81 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TRI"#) -}
5983d4e902f20ca491bfcf4389614668
  $fReadManifest82 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest84,
                  InflectionData.$fReadManifest83
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Number>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Number>_R))))) -}
5983d4e902f20ca491bfcf4389614668
  $fReadManifest83 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Number -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Number -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.DU) -}
464913b3b8b3427e27e4aa8ee96b0916
  $fReadManifest84 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DU"#) -}
5983d4e902f20ca491bfcf4389614668
  $fReadManifest85 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest87,
                  InflectionData.$fReadManifest86
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Number>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Number>_R))))) -}
5983d4e902f20ca491bfcf4389614668
  $fReadManifest86 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Number -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Number -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.SG) -}
a85fce9b8bf876b28be2dde07a297300
  $fReadManifest87 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SG"#) -}
a9cc2cb6e727bfc24e904c956b68f5b5
  $fReadManifest89 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Manifest [InflectionData.Person]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)>,
     Unfolding: (\ n :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Manifest [InflectionData.Person]
                          -> Text.ParserCombinators.ReadP.P b ->
                 let {
                   lvl116 :: Text.ParserCombinators.ReadP.P b
                   = let {
                       lvl117 :: Text.ParserCombinators.ReadP.P b
                       = eta (InflectionData.NoManifest @ [InflectionData.Person])
                     } in
                     Text.Read.Lex.expect2
                       @ b
                       (\ a98 :: Text.Read.Lex.Lexeme ->
                        case a98 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                          Text.Read.Lex.Ident a42
                          -> case GHC.Base.eqString
                                    a42
                                    InflectionData.$fReadManifest5 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                               GHC.Types.True -> lvl117 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl116) -}
                   = \ w2 :: () -> lvl116
                 } in
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b
                   (Text.ParserCombinators.ReadP.Look
                      @ b
                      (\ a98 :: GHC.Base.String ->
                       (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                         `cast`
                       (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                         @ b
                         k))
                   (case n of wild { GHC.Types.I# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x 10) of wild2 {
                      GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                      GHC.Types.True
                      -> let {
                           lvl117 :: Text.ParserCombinators.ReadP.P b
                           = let {
                               lvl118 :: Text.ParserCombinators.ReadP.P b
                               = GHC.Read.$wa
                                   @ (InflectionData.LexCat,
                                      InflectionData.ManifestType,
                                      GHC.Types.Int)
                                   InflectionData.$fReadManifest4
                                     `cast`
                                   (Trans
                                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                       <(InflectionData.LexCat,
                                                         InflectionData.ManifestType,
                                                         GHC.Types.Int)>_R))
                                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                  <(InflectionData.LexCat,
                                                    InflectionData.ManifestType,
                                                    GHC.Types.Int)>_R)))
                                   @ b
                                   (\ a42 :: [(InflectionData.LexCat,
                                               InflectionData.ManifestType,
                                               GHC.Types.Int)] ->
                                    GHC.Read.$wa
                                      @ InflectionData.Person
                                      InflectionData.$fReadManifest90
                                        `cast`
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <InflectionData.Person>_R))
                                      @ b
                                      (\ a43 :: [InflectionData.Person] ->
                                       eta
                                         (InflectionData.Manifest
                                            @ [InflectionData.Person]
                                            a42
                                            a43)))
                             } in
                             Text.Read.Lex.expect2
                               @ b
                               (\ a98 :: Text.Read.Lex.Lexeme ->
                                case a98 of wild1 {
                                  DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                  Text.Read.Lex.Ident a42
                                  -> case GHC.Base.eqString
                                            a42
                                            InflectionData.$fReadManifest3 of wild3 {
                                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                       GHC.Types.True -> lvl118 } })
                         } in
                         let {
                           k1 :: () -> Text.ParserCombinators.ReadP.P b
                             {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl117) -}
                           = \ w2 :: () -> lvl117
                         } in
                         Text.ParserCombinators.ReadP.Look
                           @ b
                           (\ a98 :: GHC.Base.String ->
                            (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                              `cast`
                            (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                              @ b
                              k1) } })) -}
f8a64bd32c9378c38b48c1c71b5b05d0
  $fReadManifest9 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Manifest [InflectionData.Aspect]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)>,
     Unfolding: (\ n :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Manifest [InflectionData.Aspect]
                          -> Text.ParserCombinators.ReadP.P b ->
                 let {
                   lvl116 :: Text.ParserCombinators.ReadP.P b
                   = let {
                       lvl117 :: Text.ParserCombinators.ReadP.P b
                       = eta (InflectionData.NoManifest @ [InflectionData.Aspect])
                     } in
                     Text.Read.Lex.expect2
                       @ b
                       (\ a98 :: Text.Read.Lex.Lexeme ->
                        case a98 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                          Text.Read.Lex.Ident a42
                          -> case GHC.Base.eqString
                                    a42
                                    InflectionData.$fReadManifest5 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                               GHC.Types.True -> lvl117 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl116) -}
                   = \ w2 :: () -> lvl116
                 } in
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b
                   (Text.ParserCombinators.ReadP.Look
                      @ b
                      (\ a98 :: GHC.Base.String ->
                       (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                         `cast`
                       (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                         @ b
                         k))
                   (case n of wild { GHC.Types.I# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x 10) of wild2 {
                      GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                      GHC.Types.True
                      -> let {
                           lvl117 :: Text.ParserCombinators.ReadP.P b
                           = let {
                               lvl118 :: Text.ParserCombinators.ReadP.P b
                               = GHC.Read.$wa
                                   @ (InflectionData.LexCat,
                                      InflectionData.ManifestType,
                                      GHC.Types.Int)
                                   InflectionData.$fReadManifest4
                                     `cast`
                                   (Trans
                                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                       <(InflectionData.LexCat,
                                                         InflectionData.ManifestType,
                                                         GHC.Types.Int)>_R))
                                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                  <(InflectionData.LexCat,
                                                    InflectionData.ManifestType,
                                                    GHC.Types.Int)>_R)))
                                   @ b
                                   (\ a42 :: [(InflectionData.LexCat,
                                               InflectionData.ManifestType,
                                               GHC.Types.Int)] ->
                                    GHC.Read.$wa
                                      @ InflectionData.Aspect
                                      InflectionData.$fReadAspect2
                                        `cast`
                                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                <InflectionData.Aspect>_R))
                                      @ b
                                      (\ a43 :: [InflectionData.Aspect] ->
                                       eta
                                         (InflectionData.Manifest
                                            @ [InflectionData.Aspect]
                                            a42
                                            a43)))
                             } in
                             Text.Read.Lex.expect2
                               @ b
                               (\ a98 :: Text.Read.Lex.Lexeme ->
                                case a98 of wild1 {
                                  DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                  Text.Read.Lex.Ident a42
                                  -> case GHC.Base.eqString
                                            a42
                                            InflectionData.$fReadManifest3 of wild3 {
                                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                       GHC.Types.True -> lvl118 } })
                         } in
                         let {
                           k1 :: () -> Text.ParserCombinators.ReadP.P b
                             {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl117) -}
                           = \ w2 :: () -> lvl117
                         } in
                         Text.ParserCombinators.ReadP.Look
                           @ b
                           (\ a98 :: GHC.Base.String ->
                            (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                              `cast`
                            (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                              @ b
                              k1) } })) -}
8962065c67c1705ac692fcc8d9210bcd
  $fReadManifest90 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Person
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Person
                   InflectionData.$fReadManifest91
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.Person>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.Person>_R)))) -}
8962065c67c1705ac692fcc8d9210bcd
  $fReadManifest91 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Person -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: InflectionData.Person
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ InflectionData.Person
                   InflectionData.$fReadManifest92
                   eta
                   @ b
                   eta1) -}
8962065c67c1705ac692fcc8d9210bcd
  $fReadManifest92 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)
                   InflectionData.$fReadManifest117
                   InflectionData.$fReadManifest93) -}
8962065c67c1705ac692fcc8d9210bcd
  $fReadManifest93 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)
                   InflectionData.$fReadManifest114
                   InflectionData.$fReadManifest94) -}
8962065c67c1705ac692fcc8d9210bcd
  $fReadManifest94 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)
                   InflectionData.$fReadManifest111
                   InflectionData.$fReadManifest95) -}
8962065c67c1705ac692fcc8d9210bcd
  $fReadManifest95 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)
                   InflectionData.$fReadManifest108
                   InflectionData.$fReadManifest96) -}
8962065c67c1705ac692fcc8d9210bcd
  $fReadManifest96 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)
                   InflectionData.$fReadManifest105
                   InflectionData.$fReadManifest97) -}
8962065c67c1705ac692fcc8d9210bcd
  $fReadManifest97 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)
                   InflectionData.$fReadManifest102
                   InflectionData.$fReadManifest98) -}
8962065c67c1705ac692fcc8d9210bcd
  $fReadManifest98 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)
                   InflectionData.$fReadManifest99
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           InflectionData.Person))) -}
8962065c67c1705ac692fcc8d9210bcd
  $fReadManifest99 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest101,
                  InflectionData.$fReadManifest100
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Person>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Person>_R))))) -}
af5ddf409df7e34b7ae5f58c0bd0fff6
  $fReadManifestType :: GHC.Read.Read InflectionData.ManifestType
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.ManifestType
                  InflectionData.$fReadManifestType_$s$dmreadsPrec
                  InflectionData.$fReadManifestType_$sreadListDefault
                  InflectionData.$fReadManifestType_$creadPrec
                  InflectionData.$fReadManifestType_$creadListPrec -}
af5ddf409df7e34b7ae5f58c0bd0fff6
  $fReadManifestType1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.ManifestType] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.ManifestType]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.ManifestType
                   InflectionData.$fReadManifestType2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.ManifestType>_R))
                   @ b
                   eta1) -}
af5ddf409df7e34b7ae5f58c0bd0fff6
  $fReadManifestType10 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.ManifestType)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifestType12,
                  InflectionData.$fReadManifestType11
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.ManifestType>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.ManifestType>_R))))) -}
af5ddf409df7e34b7ae5f58c0bd0fff6
  $fReadManifestType11 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.ManifestType -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.ManifestType
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.Prefix) -}
b42c06bb90daee227e775c5814a8956c
  $fReadManifestType12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Prefix"#) -}
af5ddf409df7e34b7ae5f58c0bd0fff6
  $fReadManifestType13 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.ManifestType)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifestType15,
                  InflectionData.$fReadManifestType14
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.ManifestType>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.ManifestType>_R))))) -}
af5ddf409df7e34b7ae5f58c0bd0fff6
  $fReadManifestType14 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.ManifestType -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.ManifestType
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.Particle) -}
86bbbbaacd872f416579a15338e78b6a
  $fReadManifestType15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Particle"#) -}
af5ddf409df7e34b7ae5f58c0bd0fff6
  $fReadManifestType2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.ManifestType
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.ManifestType
                   InflectionData.$fReadManifestType3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.ManifestType>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.ManifestType>_R)))) -}
af5ddf409df7e34b7ae5f58c0bd0fff6
  $fReadManifestType3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.ManifestType -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: InflectionData.ManifestType
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ InflectionData.ManifestType
                   InflectionData.$fReadManifestType4
                   eta
                   @ b
                   eta1) -}
af5ddf409df7e34b7ae5f58c0bd0fff6
  $fReadManifestType4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.ManifestType)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.ManifestType)
                   InflectionData.$fReadManifestType13
                   InflectionData.$fReadManifestType5) -}
af5ddf409df7e34b7ae5f58c0bd0fff6
  $fReadManifestType5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.ManifestType)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.ManifestType)
                   InflectionData.$fReadManifestType10
                   InflectionData.$fReadManifestType6) -}
af5ddf409df7e34b7ae5f58c0bd0fff6
  $fReadManifestType6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.ManifestType)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.ManifestType)
                   InflectionData.$fReadManifestType7
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           InflectionData.ManifestType))) -}
af5ddf409df7e34b7ae5f58c0bd0fff6
  $fReadManifestType7 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.ManifestType)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifestType9,
                  InflectionData.$fReadManifestType8
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.ManifestType>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.ManifestType>_R))))) -}
af5ddf409df7e34b7ae5f58c0bd0fff6
  $fReadManifestType8 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.ManifestType -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.ManifestType
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.Suffix) -}
72321921727741471a6b26a52a18a2e4
  $fReadManifestType9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Suffix"#) -}
af5ddf409df7e34b7ae5f58c0bd0fff6
  $fReadManifestType_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [InflectionData.ManifestType]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadManifestType1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.ManifestType]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.ManifestType]>_R))) -}
af5ddf409df7e34b7ae5f58c0bd0fff6
  $fReadManifestType_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      InflectionData.ManifestType
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadManifestType2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.ManifestType>_R)) -}
af5ddf409df7e34b7ae5f58c0bd0fff6
  $fReadManifestType_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.ManifestType
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ InflectionData.ManifestType
                   InflectionData.$fReadManifestType_$creadPrec
                   eta) -}
af5ddf409df7e34b7ae5f58c0bd0fff6
  $fReadManifestType_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.ManifestType]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.ManifestType]
                   ((InflectionData.$fReadManifestType_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[InflectionData.ManifestType]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[InflectionData.ManifestType]>_R)
                      @ [InflectionData.ManifestType]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [InflectionData.ManifestType]))) -}
ceb3098f5042182adffdb975609a3c68
  $fReadManifest_$creadList ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Manifest a]
  {- Arity: 1, Strictness: <L,U(A,A,U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a42 $dRead :: GHC.Read.Read a42 ->
                 Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Manifest a42]
                   (GHC.Read.$wa
                      @ (InflectionData.Manifest a42)
                      (InflectionData.$fReadManifest2 @ a42 $dRead)
                        `cast`
                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                <InflectionData.Manifest a42>_R))
                      @ [InflectionData.Manifest a42]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [InflectionData.Manifest a42]))) -}
ceb3098f5042182adffdb975609a3c68
  $fReadManifest_$creadListPrec ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadPrec.ReadPrec
      [InflectionData.Manifest a]
  {- Arity: 3, Strictness: <L,U(A,A,U,A)><L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadManifest1
                  `cast`
                (forall a42.
                 <GHC.Read.Read a42>_R
                 ->_R Trans
                          (<Text.ParserCombinators.ReadPrec.Prec>_R
                           ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                         <[InflectionData.Manifest a42]>_R))
                          (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                    <[InflectionData.Manifest a42]>_R))) -}
ceb3098f5042182adffdb975609a3c68
  $fReadManifest_$creadPrec ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadPrec.ReadPrec
      (InflectionData.Manifest a)
  {- Arity: 2, Strictness: <L,1*U(A,A,1*U,A)><L,U>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadManifest2
                  `cast`
                (forall a42.
                 <GHC.Read.Read a42>_R
                 ->_R Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <InflectionData.Manifest a42>_R)) -}
ceb3098f5042182adffdb975609a3c68
  $fReadManifest_$creadsPrec ::
    GHC.Read.Read a =>
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS (InflectionData.Manifest a)
  {- Arity: 2, Strictness: <L,1*U(A,A,1*U,A)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a42 $dRead :: GHC.Read.Read a42 eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadP.run
                   @ (InflectionData.Manifest a42)
                   ((InflectionData.$fReadManifest2 @ a42 $dRead eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <InflectionData.Manifest a42>_R)
                      @ (InflectionData.Manifest a42)
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ (InflectionData.Manifest a42)))) -}
4e999fb9fa6728ec3df19bdd28482ccf
  $fReadMood :: GHC.Read.Read InflectionData.Mood
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Mood
                  InflectionData.$fReadMood_$s$dmreadsPrec
                  InflectionData.$fReadMood2
                  InflectionData.$fReadMood_$creadPrec
                  InflectionData.$fReadMood_$creadListPrec -}
4e999fb9fa6728ec3df19bdd28482ccf
  $fReadMood1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Mood] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.Mood]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.Mood
                   InflectionData.$fReadManifest22
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Mood>_R))
                   @ b
                   eta1) -}
4e999fb9fa6728ec3df19bdd28482ccf
  $fReadMood2 ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Mood]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Mood]
                   InflectionData.$fReadMood3) -}
4e999fb9fa6728ec3df19bdd28482ccf
  $fReadMood3 :: Text.ParserCombinators.ReadP.P [InflectionData.Mood]
  {- Unfolding: (GHC.Read.$wa
                   @ InflectionData.Mood
                   InflectionData.$fReadManifest22
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Mood>_R))
                   @ [InflectionData.Mood]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                      @ [InflectionData.Mood])) -}
4e999fb9fa6728ec3df19bdd28482ccf
  $fReadMood_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [InflectionData.Mood]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadMood1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.Mood]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.Mood]>_R))) -}
4e999fb9fa6728ec3df19bdd28482ccf
  $fReadMood_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadManifest22
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.Mood>_R)) -}
4e999fb9fa6728ec3df19bdd28482ccf
  $fReadMood_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Mood
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ InflectionData.Mood
                   InflectionData.$fReadMood_$creadPrec
                   eta) -}
5983d4e902f20ca491bfcf4389614668
  $fReadNumber :: GHC.Read.Read InflectionData.Number
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Number
                  InflectionData.$fReadNumber_$s$dmreadsPrec
                  InflectionData.$fReadNumber2
                  InflectionData.$fReadNumber_$creadPrec
                  InflectionData.$fReadNumber_$creadListPrec -}
5983d4e902f20ca491bfcf4389614668
  $fReadNumber1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Number] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.Number]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.Number
                   InflectionData.$fReadManifest66
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Number>_R))
                   @ b
                   eta1) -}
5983d4e902f20ca491bfcf4389614668
  $fReadNumber2 ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Number]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Number]
                   InflectionData.$fReadNumber3) -}
5983d4e902f20ca491bfcf4389614668
  $fReadNumber3 ::
    Text.ParserCombinators.ReadP.P [InflectionData.Number]
  {- Unfolding: (GHC.Read.$wa
                   @ InflectionData.Number
                   InflectionData.$fReadManifest66
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Number>_R))
                   @ [InflectionData.Number]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                      @ [InflectionData.Number])) -}
5983d4e902f20ca491bfcf4389614668
  $fReadNumber_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [InflectionData.Number]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadNumber1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.Number]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.Number]>_R))) -}
5983d4e902f20ca491bfcf4389614668
  $fReadNumber_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadManifest66
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.Number>_R)) -}
5983d4e902f20ca491bfcf4389614668
  $fReadNumber_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Number
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ InflectionData.Number
                   InflectionData.$fReadNumber_$creadPrec
                   eta) -}
8962065c67c1705ac692fcc8d9210bcd
  $fReadPerson :: GHC.Read.Read InflectionData.Person
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Person
                  InflectionData.$fReadPerson_$s$dmreadsPrec
                  InflectionData.$fReadPerson2
                  InflectionData.$fReadPerson_$creadPrec
                  InflectionData.$fReadPerson_$creadListPrec -}
8962065c67c1705ac692fcc8d9210bcd
  $fReadPerson1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Person] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.Person]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.Person
                   InflectionData.$fReadManifest90
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Person>_R))
                   @ b
                   eta1) -}
8962065c67c1705ac692fcc8d9210bcd
  $fReadPerson2 ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Person]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Person]
                   InflectionData.$fReadPerson3) -}
8962065c67c1705ac692fcc8d9210bcd
  $fReadPerson3 ::
    Text.ParserCombinators.ReadP.P [InflectionData.Person]
  {- Unfolding: (GHC.Read.$wa
                   @ InflectionData.Person
                   InflectionData.$fReadManifest90
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Person>_R))
                   @ [InflectionData.Person]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                      @ [InflectionData.Person])) -}
8962065c67c1705ac692fcc8d9210bcd
  $fReadPerson_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [InflectionData.Person]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadPerson1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.Person]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.Person]>_R))) -}
8962065c67c1705ac692fcc8d9210bcd
  $fReadPerson_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadManifest90
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.Person>_R)) -}
8962065c67c1705ac692fcc8d9210bcd
  $fReadPerson_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Person
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ InflectionData.Person
                   InflectionData.$fReadPerson_$creadPrec
                   eta) -}
eac2f82847484b9a87105d0693a7c5e1
  $fReadPolarity :: GHC.Read.Read InflectionData.Polarity
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Polarity
                  InflectionData.$fReadPolarity_$s$dmreadsPrec
                  InflectionData.$fReadPolarity2
                  InflectionData.$fReadPolarity_$creadPrec
                  InflectionData.$fReadPolarity_$creadListPrec -}
eac2f82847484b9a87105d0693a7c5e1
  $fReadPolarity1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Polarity] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.Polarity]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.Polarity
                   InflectionData.$fReadManifest122
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Polarity>_R))
                   @ b
                   eta1) -}
eac2f82847484b9a87105d0693a7c5e1
  $fReadPolarity2 ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Polarity]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Polarity]
                   InflectionData.$fReadPolarity3) -}
eac2f82847484b9a87105d0693a7c5e1
  $fReadPolarity3 ::
    Text.ParserCombinators.ReadP.P [InflectionData.Polarity]
  {- Unfolding: (GHC.Read.$wa
                   @ InflectionData.Polarity
                   InflectionData.$fReadManifest122
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Polarity>_R))
                   @ [InflectionData.Polarity]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                      @ [InflectionData.Polarity])) -}
eac2f82847484b9a87105d0693a7c5e1
  $fReadPolarity_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [InflectionData.Polarity]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadPolarity1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.Polarity]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.Polarity]>_R))) -}
eac2f82847484b9a87105d0693a7c5e1
  $fReadPolarity_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Polarity
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadManifest122
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.Polarity>_R)) -}
eac2f82847484b9a87105d0693a7c5e1
  $fReadPolarity_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Polarity
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ InflectionData.Polarity
                   InflectionData.$fReadPolarity_$creadPrec
                   eta) -}
697b496d198df68093293e68c7d50d9d
  $fReadSpecificity :: GHC.Read.Read InflectionData.Specificity
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Specificity
                  InflectionData.$fReadSpecificity_$s$dmreadsPrec
                  InflectionData.$fReadSpecificity2
                  InflectionData.$fReadSpecificity_$creadPrec
                  InflectionData.$fReadSpecificity_$creadListPrec -}
697b496d198df68093293e68c7d50d9d
  $fReadSpecificity1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Specificity] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.Specificity]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.Specificity
                   InflectionData.$fReadManifest134
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Specificity>_R))
                   @ b
                   eta1) -}
697b496d198df68093293e68c7d50d9d
  $fReadSpecificity2 ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Specificity]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Specificity]
                   InflectionData.$fReadSpecificity3) -}
697b496d198df68093293e68c7d50d9d
  $fReadSpecificity3 ::
    Text.ParserCombinators.ReadP.P [InflectionData.Specificity]
  {- Unfolding: (GHC.Read.$wa
                   @ InflectionData.Specificity
                   InflectionData.$fReadManifest134
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Specificity>_R))
                   @ [InflectionData.Specificity]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                      @ [InflectionData.Specificity])) -}
697b496d198df68093293e68c7d50d9d
  $fReadSpecificity_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [InflectionData.Specificity]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadSpecificity1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.Specificity]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.Specificity]>_R))) -}
697b496d198df68093293e68c7d50d9d
  $fReadSpecificity_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Specificity
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadManifest134
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.Specificity>_R)) -}
697b496d198df68093293e68c7d50d9d
  $fReadSpecificity_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Specificity
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ InflectionData.Specificity
                   InflectionData.$fReadSpecificity_$creadPrec
                   eta) -}
b52863b70f3cc5626b7d1db2a6c4ef40
  $fReadTense :: GHC.Read.Read InflectionData.Tense
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Tense
                  InflectionData.$fReadTense_$s$dmreadsPrec
                  InflectionData.$fReadTense2
                  InflectionData.$fReadTense_$creadPrec
                  InflectionData.$fReadTense_$creadListPrec -}
b52863b70f3cc5626b7d1db2a6c4ef40
  $fReadTense1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Tense] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.Tense]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.Tense
                   InflectionData.$fReadManifest146
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Tense>_R))
                   @ b
                   eta1) -}
b52863b70f3cc5626b7d1db2a6c4ef40
  $fReadTense2 ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Tense]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Tense]
                   InflectionData.$fReadTense3) -}
b52863b70f3cc5626b7d1db2a6c4ef40
  $fReadTense3 ::
    Text.ParserCombinators.ReadP.P [InflectionData.Tense]
  {- Unfolding: (GHC.Read.$wa
                   @ InflectionData.Tense
                   InflectionData.$fReadManifest146
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Tense>_R))
                   @ [InflectionData.Tense]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                      @ [InflectionData.Tense])) -}
b52863b70f3cc5626b7d1db2a6c4ef40
  $fReadTense_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [InflectionData.Tense]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadTense1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.Tense]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.Tense]>_R))) -}
b52863b70f3cc5626b7d1db2a6c4ef40
  $fReadTense_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadManifest146
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.Tense>_R)) -}
b52863b70f3cc5626b7d1db2a6c4ef40
  $fReadTense_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Tense
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ InflectionData.Tense
                   InflectionData.$fReadTense_$creadPrec
                   eta) -}
39f87e694fb863c1c8c61df134a24729
  $fReadTopic :: GHC.Read.Read InflectionData.Topic
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Topic
                  InflectionData.$fReadTopic_$s$dmreadsPrec
                  InflectionData.$fReadTopic2
                  InflectionData.$fReadTopic_$creadPrec
                  InflectionData.$fReadTopic_$creadListPrec -}
39f87e694fb863c1c8c61df134a24729
  $fReadTopic1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Topic] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.Topic]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.Topic
                   InflectionData.$fReadManifest222
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Topic>_R))
                   @ b
                   eta1) -}
39f87e694fb863c1c8c61df134a24729
  $fReadTopic2 ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Topic]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Topic]
                   InflectionData.$fReadTopic3) -}
39f87e694fb863c1c8c61df134a24729
  $fReadTopic3 ::
    Text.ParserCombinators.ReadP.P [InflectionData.Topic]
  {- Unfolding: (GHC.Read.$wa
                   @ InflectionData.Topic
                   InflectionData.$fReadManifest222
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Topic>_R))
                   @ [InflectionData.Topic]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                      @ [InflectionData.Topic])) -}
39f87e694fb863c1c8c61df134a24729
  $fReadTopic_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [InflectionData.Topic]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadTopic1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.Topic]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.Topic]>_R))) -}
39f87e694fb863c1c8c61df134a24729
  $fReadTopic_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Topic
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadManifest222
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.Topic>_R)) -}
39f87e694fb863c1c8c61df134a24729
  $fReadTopic_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Topic
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ InflectionData.Topic
                   InflectionData.$fReadTopic_$creadPrec
                   eta) -}
57945260416d71dc87e31cac669b161f
  $fReadTransitivity :: GHC.Read.Read InflectionData.Transitivity
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Transitivity
                  InflectionData.$fReadTransitivity_$s$dmreadsPrec
                  InflectionData.$fReadTransitivity2
                  InflectionData.$fReadTransitivity_$creadPrec
                  InflectionData.$fReadTransitivity_$creadListPrec -}
57945260416d71dc87e31cac669b161f
  $fReadTransitivity1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Transitivity] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.Transitivity]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.Transitivity
                   InflectionData.$fReadManifest234
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Transitivity>_R))
                   @ b
                   eta1) -}
57945260416d71dc87e31cac669b161f
  $fReadTransitivity2 ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Transitivity]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Transitivity]
                   InflectionData.$fReadTransitivity3) -}
57945260416d71dc87e31cac669b161f
  $fReadTransitivity3 ::
    Text.ParserCombinators.ReadP.P [InflectionData.Transitivity]
  {- Unfolding: (GHC.Read.$wa
                   @ InflectionData.Transitivity
                   InflectionData.$fReadManifest234
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Transitivity>_R))
                   @ [InflectionData.Transitivity]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                      @ [InflectionData.Transitivity])) -}
57945260416d71dc87e31cac669b161f
  $fReadTransitivity_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [InflectionData.Transitivity]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadTransitivity1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.Transitivity]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.Transitivity]>_R))) -}
57945260416d71dc87e31cac669b161f
  $fReadTransitivity_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      InflectionData.Transitivity
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadManifest234
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.Transitivity>_R)) -}
57945260416d71dc87e31cac669b161f
  $fReadTransitivity_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Transitivity
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ InflectionData.Transitivity
                   InflectionData.$fReadTransitivity_$creadPrec
                   eta) -}
729607927630d1e92c199129334472f1
  $fReadVoice :: GHC.Read.Read InflectionData.Voice
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Voice
                  InflectionData.$fReadVoice_$s$dmreadsPrec
                  InflectionData.$fReadVoice2
                  InflectionData.$fReadVoice_$creadPrec
                  InflectionData.$fReadVoice_$creadListPrec -}
729607927630d1e92c199129334472f1
  $fReadVoice1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Voice] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.Voice]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.Voice
                   InflectionData.$fReadManifest254
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Voice>_R))
                   @ b
                   eta1) -}
729607927630d1e92c199129334472f1
  $fReadVoice2 ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Voice]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Voice]
                   InflectionData.$fReadVoice3) -}
729607927630d1e92c199129334472f1
  $fReadVoice3 ::
    Text.ParserCombinators.ReadP.P [InflectionData.Voice]
  {- Unfolding: (GHC.Read.$wa
                   @ InflectionData.Voice
                   InflectionData.$fReadManifest254
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Voice>_R))
                   @ [InflectionData.Voice]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                      @ [InflectionData.Voice])) -}
729607927630d1e92c199129334472f1
  $fReadVoice_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [InflectionData.Voice]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadVoice1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.Voice]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.Voice]>_R))) -}
729607927630d1e92c199129334472f1
  $fReadVoice_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Voice
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadManifest254
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.Voice>_R)) -}
729607927630d1e92c199129334472f1
  $fReadVoice_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Voice
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ InflectionData.Voice
                   InflectionData.$fReadVoice_$creadPrec
                   eta) -}
fed3c8348b016bc886742bbd8b88b80d
  $fReadVolition :: GHC.Read.Read InflectionData.Volition
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Volition
                  InflectionData.$fReadVolition_$s$dmreadsPrec
                  InflectionData.$fReadVolition2
                  InflectionData.$fReadVolition_$creadPrec
                  InflectionData.$fReadVolition_$creadListPrec -}
fed3c8348b016bc886742bbd8b88b80d
  $fReadVolition1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Volition] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.Volition]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.Volition
                   InflectionData.$fReadManifest270
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Volition>_R))
                   @ b
                   eta1) -}
fed3c8348b016bc886742bbd8b88b80d
  $fReadVolition2 ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Volition]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Volition]
                   InflectionData.$fReadVolition3) -}
fed3c8348b016bc886742bbd8b88b80d
  $fReadVolition3 ::
    Text.ParserCombinators.ReadP.P [InflectionData.Volition]
  {- Unfolding: (GHC.Read.$wa
                   @ InflectionData.Volition
                   InflectionData.$fReadManifest270
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Volition>_R))
                   @ [InflectionData.Volition]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                      @ [InflectionData.Volition])) -}
fed3c8348b016bc886742bbd8b88b80d
  $fReadVolition_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [InflectionData.Volition]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadVolition1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.Volition]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.Volition]>_R))) -}
fed3c8348b016bc886742bbd8b88b80d
  $fReadVolition_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Volition
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadManifest270
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.Volition>_R)) -}
fed3c8348b016bc886742bbd8b88b80d
  $fReadVolition_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Volition
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ InflectionData.Volition
                   InflectionData.$fReadVolition_$creadPrec
                   eta) -}
01e9551499a3adc43f20b6e75032da85
  $fShow(,,,,,,,,,,,,,,,,) ::
    (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
     GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
     GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
     GHC.Show.Show l, GHC.Show.Show m, GHC.Show.Show n, GHC.Show.Show o,
     GHC.Show.Show p, GHC.Show.Show q) =>
    GHC.Show.Show (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)
  DFunId[0]
  {- Arity: 17,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a42
                      @ b
                      @ c
                      @ d
                      @ e
                      @ f
                      @ g
                      @ h
                      @ i
                      @ j
                      @ k
                      @ l
                      @ m
                      @ n
                      @ o
                      @ p
                      @ q
                      $dShow :: GHC.Show.Show a42
                      $dShow1 :: GHC.Show.Show b
                      $dShow2 :: GHC.Show.Show c
                      $dShow3 :: GHC.Show.Show d
                      $dShow4 :: GHC.Show.Show e
                      $dShow5 :: GHC.Show.Show f
                      $dShow6 :: GHC.Show.Show g
                      $dShow7 :: GHC.Show.Show h
                      $dShow8 :: GHC.Show.Show i
                      $dShow9 :: GHC.Show.Show j
                      $dShow10 :: GHC.Show.Show k
                      $dShow11 :: GHC.Show.Show l
                      $dShow12 :: GHC.Show.Show m
                      $dShow13 :: GHC.Show.Show n
                      $dShow14 :: GHC.Show.Show o
                      $dShow15 :: GHC.Show.Show p
                      $dShow16 :: GHC.Show.Show q.
                  @ (a42, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)
                  (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec1
                     @ a42
                     @ b
                     @ c
                     @ d
                     @ e
                     @ f
                     @ g
                     @ h
                     @ i
                     @ j
                     @ k
                     @ l
                     @ m
                     @ n
                     @ o
                     @ p
                     @ q
                     $dShow
                     $dShow1
                     $dShow2
                     $dShow3
                     $dShow4
                     $dShow5
                     $dShow6
                     $dShow7
                     $dShow8
                     $dShow9
                     $dShow10
                     $dShow11
                     $dShow12
                     $dShow13
                     $dShow14
                     $dShow15
                     $dShow16)
                  (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$cshow
                     @ a42
                     @ b
                     @ c
                     @ d
                     @ e
                     @ f
                     @ g
                     @ h
                     @ i
                     @ j
                     @ k
                     @ l
                     @ m
                     @ n
                     @ o
                     @ p
                     @ q
                     $dShow
                     $dShow1
                     $dShow2
                     $dShow3
                     $dShow4
                     $dShow5
                     $dShow6
                     $dShow7
                     $dShow8
                     $dShow9
                     $dShow10
                     $dShow11
                     $dShow12
                     $dShow13
                     $dShow14
                     $dShow15
                     $dShow16)
                  (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$cshowList
                     @ a42
                     @ b
                     @ c
                     @ d
                     @ e
                     @ f
                     @ g
                     @ h
                     @ i
                     @ j
                     @ k
                     @ l
                     @ m
                     @ n
                     @ o
                     @ p
                     @ q
                     $dShow
                     $dShow1
                     $dShow2
                     $dShow3
                     $dShow4
                     $dShow5
                     $dShow6
                     $dShow7
                     $dShow8
                     $dShow9
                     $dShow10
                     $dShow11
                     $dShow12
                     $dShow13
                     $dShow14
                     $dShow15
                     $dShow16) -}
eb9148866a7208c140142cf9c7adb474
  $fShow(,,,,,,,,,,,,,,,,)1 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# ')') -}
85dabc27d66961b6f2c345591472a4d4
  $fShow(,,,,,,,,,,,,,,,,)2 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '(') -}
1723f341f9b6009cc0844393c7aff1a5
  $fShow(,,,,,,,,,,,,,,,,)3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Express "#) -}
e7e7d258800df84aab22d469166a282b
  $fShow(,,,,,,,,,,,,,,,,)4 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   InflectionData.$fReadExpress5) -}
103f065080b48acaa1b3271b0d06c783
  $fShow(,,,,,,,,,,,,,,,,)_$cshow ::
    (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
     GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
     GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
     GHC.Show.Show l, GHC.Show.Show m, GHC.Show.Show n, GHC.Show.Show o,
     GHC.Show.Show p, GHC.Show.Show q) =>
    (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)
    -> GHC.Base.String
  {- Arity: 18,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Unfolding: InlineRule (18, True, False)
                (\ @ a42
                   @ b
                   @ c
                   @ d
                   @ e
                   @ f
                   @ g
                   @ h
                   @ i
                   @ j
                   @ k
                   @ l
                   @ m
                   @ n
                   @ o
                   @ p
                   @ q
                   $dShow :: GHC.Show.Show a42
                   $dShow1 :: GHC.Show.Show b
                   $dShow2 :: GHC.Show.Show c
                   $dShow3 :: GHC.Show.Show d
                   $dShow4 :: GHC.Show.Show e
                   $dShow5 :: GHC.Show.Show f
                   $dShow6 :: GHC.Show.Show g
                   $dShow7 :: GHC.Show.Show h
                   $dShow8 :: GHC.Show.Show i
                   $dShow9 :: GHC.Show.Show j
                   $dShow10 :: GHC.Show.Show k
                   $dShow11 :: GHC.Show.Show l
                   $dShow12 :: GHC.Show.Show m
                   $dShow13 :: GHC.Show.Show n
                   $dShow14 :: GHC.Show.Show o
                   $dShow15 :: GHC.Show.Show p
                   $dShow16 :: GHC.Show.Show q
                   x :: (a42, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) ->
                 InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec1
                   @ a42
                   @ b
                   @ c
                   @ d
                   @ e
                   @ f
                   @ g
                   @ h
                   @ i
                   @ j
                   @ k
                   @ l
                   @ m
                   @ n
                   @ o
                   @ p
                   @ q
                   $dShow
                   $dShow1
                   $dShow2
                   $dShow3
                   $dShow4
                   $dShow5
                   $dShow6
                   $dShow7
                   $dShow8
                   $dShow9
                   $dShow10
                   $dShow11
                   $dShow12
                   $dShow13
                   $dShow14
                   $dShow15
                   $dShow16
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
9675df020835f81ee5310cf201f52e06
  $fShow(,,,,,,,,,,,,,,,,)_$cshowList ::
    (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
     GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
     GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
     GHC.Show.Show l, GHC.Show.Show m, GHC.Show.Show n, GHC.Show.Show o,
     GHC.Show.Show p, GHC.Show.Show q) =>
    [(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)]
    -> GHC.Show.ShowS
  {- Arity: 19,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (19, True, False)
                (\ @ a42
                   @ b
                   @ c
                   @ d
                   @ e
                   @ f
                   @ g
                   @ h
                   @ i
                   @ j
                   @ k
                   @ l
                   @ m
                   @ n
                   @ o
                   @ p
                   @ q
                   $dShow :: GHC.Show.Show a42
                   $dShow1 :: GHC.Show.Show b
                   $dShow2 :: GHC.Show.Show c
                   $dShow3 :: GHC.Show.Show d
                   $dShow4 :: GHC.Show.Show e
                   $dShow5 :: GHC.Show.Show f
                   $dShow6 :: GHC.Show.Show g
                   $dShow7 :: GHC.Show.Show h
                   $dShow8 :: GHC.Show.Show i
                   $dShow9 :: GHC.Show.Show j
                   $dShow10 :: GHC.Show.Show k
                   $dShow11 :: GHC.Show.Show l
                   $dShow12 :: GHC.Show.Show m
                   $dShow13 :: GHC.Show.Show n
                   $dShow14 :: GHC.Show.Show o
                   $dShow15 :: GHC.Show.Show p
                   $dShow16 :: GHC.Show.Show q
                   ls :: [(a42, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)]
                   s :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (a42, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)
                   (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec1
                      @ a42
                      @ b
                      @ c
                      @ d
                      @ e
                      @ f
                      @ g
                      @ h
                      @ i
                      @ j
                      @ k
                      @ l
                      @ m
                      @ n
                      @ o
                      @ p
                      @ q
                      $dShow
                      $dShow1
                      $dShow2
                      $dShow3
                      $dShow4
                      $dShow5
                      $dShow6
                      $dShow7
                      $dShow8
                      $dShow9
                      $dShow10
                      $dShow11
                      $dShow12
                      $dShow13
                      $dShow14
                      $dShow15
                      $dShow16
                      GHC.Show.shows18)
                   ls
                   s) -}
16ae30a99f963c81137d7828dad80939
  $fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int -> InflectionData.Express a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(U)><S,1*U>,
     Unfolding: (\ @ a42
                   $dShow :: GHC.Show.Show a42
                   ds :: GHC.Types.Int
                   ds1 :: InflectionData.Express a42 ->
                 case ds1 of wild {
                   InflectionData.NoExpress
                   -> InflectionData.$fShow(,,,,,,,,,,,,,,,,)4
                   InflectionData.Express b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.showsPrec @ a42 $dShow InflectionData.$fReadExpress4 b1
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> \ x1 :: GHC.Base.String ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             InflectionData.$fShow(,,,,,,,,,,,,,,,,)3
                             (g x1)
                        GHC.Types.True
                        -> \ x1 :: GHC.Base.String ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                InflectionData.$fShow(,,,,,,,,,,,,,,,,)3
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x1))) } } }) -}
da4dab2e15422e29326dd413a70de760
  $fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec1 ::
    (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
     GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
     GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
     GHC.Show.Show l, GHC.Show.Show m, GHC.Show.Show n, GHC.Show.Show o,
     GHC.Show.Show p, GHC.Show.Show q) =>
    GHC.Types.Int
    -> (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)
    -> GHC.Show.ShowS
  {- Arity: 19,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,A><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (19, True, False)
                (\ @ a42
                   @ b
                   @ c
                   @ d
                   @ e
                   @ f
                   @ g
                   @ h
                   @ i
                   @ j
                   @ k
                   @ l
                   @ m
                   @ n
                   @ o
                   @ p
                   @ q
                   w :: GHC.Show.Show a42
                   w1 :: GHC.Show.Show b
                   w2 :: GHC.Show.Show c
                   w3 :: GHC.Show.Show d
                   w4 :: GHC.Show.Show e
                   w5 :: GHC.Show.Show f
                   w6 :: GHC.Show.Show g
                   w7 :: GHC.Show.Show h
                   w8 :: GHC.Show.Show i
                   w9 :: GHC.Show.Show j
                   w10 :: GHC.Show.Show k
                   w11 :: GHC.Show.Show l
                   w12 :: GHC.Show.Show m
                   w13 :: GHC.Show.Show n
                   w14 :: GHC.Show.Show o
                   w15 :: GHC.Show.Show p
                   w16 :: GHC.Show.Show q
                   w17 :: GHC.Types.Int
                   w18 :: (a42, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) ->
                 case w18 of ww { (,,,,,,,,,,,,,,,,) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ->
                 InflectionData.$w$cshowsPrec10
                   @ a42
                   @ b
                   @ c
                   @ d
                   @ e
                   @ f
                   @ g
                   @ h
                   @ i
                   @ j
                   @ k
                   @ l
                   @ m
                   @ n
                   @ o
                   @ p
                   @ q
                   w
                   w1
                   w2
                   w3
                   w4
                   w5
                   w6
                   w7
                   w8
                   w9
                   w10
                   w11
                   w12
                   w13
                   w14
                   w15
                   w16
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww17 }) -}
16ae30a99f963c81137d7828dad80939
  $fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec1 ::
    GHC.Types.Int
    -> InflectionData.Express InflectionData.Volition -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Express InflectionData.Volition
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoExpress
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadExpress5 eta
                   InflectionData.Express b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShow(,,,,,,,,,,,,,,,,)3
                            (case b1 of wild2 {
                               InflectionData.VOL
                               -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest279 x1
                               InflectionData.NVOL
                               -> GHC.Base.++
                                    @ GHC.Types.Char
                                    InflectionData.$fReadManifest276
                                    x1 })
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
16ae30a99f963c81137d7828dad80939
  $fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec10 ::
    GHC.Types.Int
    -> InflectionData.Express InflectionData.Specificity
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Express InflectionData.Specificity
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoExpress
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadExpress5 eta
                   InflectionData.Express b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShow(,,,,,,,,,,,,,,,,)3
                            (case b1 of wild2 {
                               InflectionData.SPEC
                               -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest143 x1
                               InflectionData.NSPEC
                               -> GHC.Base.++
                                    @ GHC.Types.Char
                                    InflectionData.$fReadManifest140
                                    x1 })
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
16ae30a99f963c81137d7828dad80939
  $fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec11 ::
    GHC.Types.Int
    -> InflectionData.Express InflectionData.Number -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Express InflectionData.Number
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoExpress
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadExpress5 eta
                   InflectionData.Express b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             InflectionData.$fShow(,,,,,,,,,,,,,,,,)3
                             (InflectionData.$w$cshowsPrec6 b1 eta)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                InflectionData.$fShow(,,,,,,,,,,,,,,,,)3
                                (InflectionData.$w$cshowsPrec6
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta))) } } }) -}
16ae30a99f963c81137d7828dad80939
  $fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec12 ::
    GHC.Types.Int
    -> InflectionData.Express InflectionData.Gender -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Express InflectionData.Gender
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoExpress
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadExpress5 eta
                   InflectionData.Express b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             InflectionData.$fShow(,,,,,,,,,,,,,,,,)3
                             (InflectionData.$w$cshowsPrec9 b1 eta)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                InflectionData.$fShow(,,,,,,,,,,,,,,,,)3
                                (InflectionData.$w$cshowsPrec9
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta))) } } }) -}
16ae30a99f963c81137d7828dad80939
  $fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec2 ::
    GHC.Types.Int
    -> InflectionData.Express InflectionData.Transitivity
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Express InflectionData.Transitivity
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoExpress
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadExpress5 eta
                   InflectionData.Express b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             InflectionData.$fShow(,,,,,,,,,,,,,,,,)3
                             (InflectionData.$w$cshowsPrec b1 eta)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                InflectionData.$fShow(,,,,,,,,,,,,,,,,)3
                                (InflectionData.$w$cshowsPrec
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta))) } } }) -}
16ae30a99f963c81137d7828dad80939
  $fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec3 ::
    GHC.Types.Int
    -> InflectionData.Express InflectionData.Voice -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Express InflectionData.Voice
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoExpress
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadExpress5 eta
                   InflectionData.Express b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                          {- Arity: 1, Strictness: <L,1*U> -}
                        = \ eta1 :: GHC.Base.String[OneShot] ->
                          case b1 of wild2 {
                            InflectionData.ACTIVE
                            -> GHC.Base.++
                                 @ GHC.Types.Char
                                 InflectionData.$fReadManifest267
                                 eta1
                            InflectionData.MIDDLE
                            -> GHC.Base.++
                                 @ GHC.Types.Char
                                 InflectionData.$fReadManifest264
                                 eta1
                            InflectionData.PASSIVE
                            -> GHC.Base.++
                                 @ GHC.Types.Char
                                 InflectionData.$fReadManifest261
                                 eta1 }
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             InflectionData.$fShow(,,,,,,,,,,,,,,,,)3
                             (g eta)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                InflectionData.$fShow(,,,,,,,,,,,,,,,,)3
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta))) } } }) -}
16ae30a99f963c81137d7828dad80939
  $fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec4 ::
    GHC.Types.Int
    -> InflectionData.Express InflectionData.Mood -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Express InflectionData.Mood
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoExpress
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadExpress5 eta
                   InflectionData.Express b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             InflectionData.$fShow(,,,,,,,,,,,,,,,,)3
                             (InflectionData.$w$cshowsPrec2 b1 eta)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                InflectionData.$fShow(,,,,,,,,,,,,,,,,)3
                                (InflectionData.$w$cshowsPrec2
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta))) } } }) -}
16ae30a99f963c81137d7828dad80939
  $fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec5 ::
    GHC.Types.Int
    -> InflectionData.Express InflectionData.Tense -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Express InflectionData.Tense
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoExpress
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadExpress5 eta
                   InflectionData.Express b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             InflectionData.$fShow(,,,,,,,,,,,,,,,,)3
                             (InflectionData.$w$cshowsPrec4 b1 eta)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                InflectionData.$fShow(,,,,,,,,,,,,,,,,)3
                                (InflectionData.$w$cshowsPrec4
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta))) } } }) -}
16ae30a99f963c81137d7828dad80939
  $fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec6 ::
    GHC.Types.Int
    -> InflectionData.Express InflectionData.Polarity -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Express InflectionData.Polarity
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoExpress
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadExpress5 eta
                   InflectionData.Express b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShow(,,,,,,,,,,,,,,,,)3
                            (case b1 of wild2 {
                               InflectionData.AFF
                               -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest131 x1
                               InflectionData.NEG
                               -> GHC.Base.++
                                    @ GHC.Types.Char
                                    InflectionData.$fReadManifest128
                                    x1 })
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
16ae30a99f963c81137d7828dad80939
  $fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec7 ::
    GHC.Types.Int
    -> InflectionData.Express InflectionData.Honorific
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Express InflectionData.Honorific
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoExpress
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadExpress5 eta
                   InflectionData.Express b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                          {- Arity: 1, Strictness: <L,1*U> -}
                        = \ eta1 :: GHC.Base.String[OneShot] ->
                          case b1 of wild2 {
                            InflectionData.FAM
                            -> GHC.Base.++
                                 @ GHC.Types.Char
                                 InflectionData.$fReadHonorific15
                                 eta1
                            InflectionData.NEU
                            -> GHC.Base.++
                                 @ GHC.Types.Char
                                 InflectionData.$fReadHonorific12
                                 eta1
                            InflectionData.FORM
                            -> GHC.Base.++
                                 @ GHC.Types.Char
                                 InflectionData.$fReadHonorific9
                                 eta1 }
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             InflectionData.$fShow(,,,,,,,,,,,,,,,,)3
                             (g eta)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                InflectionData.$fShow(,,,,,,,,,,,,,,,,)3
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta))) } } }) -}
16ae30a99f963c81137d7828dad80939
  $fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec8 ::
    GHC.Types.Int
    -> InflectionData.Express InflectionData.Person -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Express InflectionData.Person
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoExpress
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadExpress5 eta
                   InflectionData.Express b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             InflectionData.$fShow(,,,,,,,,,,,,,,,,)3
                             (InflectionData.$w$cshowsPrec5 b1 eta)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                InflectionData.$fShow(,,,,,,,,,,,,,,,,)3
                                (InflectionData.$w$cshowsPrec5
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta))) } } }) -}
16ae30a99f963c81137d7828dad80939
  $fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec9 ::
    GHC.Types.Int
    -> InflectionData.Express InflectionData.Topic -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Express InflectionData.Topic
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoExpress
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadExpress5 eta
                   InflectionData.Express b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShow(,,,,,,,,,,,,,,,,)3
                            (case b1 of wild2 {
                               InflectionData.TOP
                               -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest231 x1
                               InflectionData.NTOP
                               -> GHC.Base.++
                                    @ GHC.Types.Char
                                    InflectionData.$fReadManifest228
                                    x1 })
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
8301f6a93092ff3873c86d1ecce7e0cd
  $fShow(,,,,,,,,,,,,,,,,)_go ::
    [GHC.Base.String -> GHC.Base.String]
    -> GHC.Base.String -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U> -}
0805e2c872c441491fbbd819376f13b8
  $fShowAnimacy :: GHC.Show.Show InflectionData.Animacy
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Animacy
                  InflectionData.$fShowAnimacy_$cshowsPrec
                  InflectionData.$fShowAnimacy_$cshow
                  InflectionData.$fShowAnimacy_$cshowList -}
0805e2c872c441491fbbd819376f13b8
  $fShowAnimacy_$cshow :: InflectionData.Animacy -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.Animacy ->
                 InflectionData.$fShowAnimacy_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
0805e2c872c441491fbbd819376f13b8
  $fShowAnimacy_$cshowList ::
    [InflectionData.Animacy] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Animacy
                   InflectionData.$w$cshowsPrec8) -}
0805e2c872c441491fbbd819376f13b8
  $fShowAnimacy_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Animacy -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: InflectionData.Animacy
                   w2 :: GHC.Base.String ->
                 InflectionData.$w$cshowsPrec8 w1 w2) -}
851bcc3c94895d395e7cdf9501dbfb00
  $fShowAspect :: GHC.Show.Show InflectionData.Aspect
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Aspect
                  InflectionData.$fShowAspect_$cshowsPrec
                  InflectionData.$fShowAspect_$cshow
                  InflectionData.$fShowAspect_$cshowList -}
851bcc3c94895d395e7cdf9501dbfb00
  $fShowAspect_$cshow :: InflectionData.Aspect -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.Aspect ->
                 InflectionData.$fShowAspect_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
851bcc3c94895d395e7cdf9501dbfb00
  $fShowAspect_$cshowList ::
    [InflectionData.Aspect] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Aspect
                   InflectionData.$w$cshowsPrec3) -}
851bcc3c94895d395e7cdf9501dbfb00
  $fShowAspect_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Aspect -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: InflectionData.Aspect
                   w2 :: GHC.Base.String ->
                 InflectionData.$w$cshowsPrec3 w1 w2) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fShowCase :: GHC.Show.Show InflectionData.Case
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Case
                  InflectionData.$fShowCase_$cshowsPrec
                  InflectionData.$fShowCase_$cshow
                  InflectionData.$fShowCase_$cshowList -}
f0a3d2a3107908d84564bc0108b3c56f
  $fShowCase_$cshow :: InflectionData.Case -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.Case ->
                 InflectionData.$fShowCase_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fShowCase_$cshowList :: [InflectionData.Case] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Case
                   InflectionData.$w$cshowsPrec7) -}
f0a3d2a3107908d84564bc0108b3c56f
  $fShowCase_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Case -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: InflectionData.Case
                   w2 :: GHC.Base.String ->
                 InflectionData.$w$cshowsPrec7 w1 w2) -}
250913a6cb1bc19b5a2a47309bfa066c
  $fShowDefiniteness :: GHC.Show.Show InflectionData.Definiteness
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Definiteness
                  InflectionData.$fShowDefiniteness_$cshowsPrec
                  InflectionData.$fShowDefiniteness_$cshow
                  InflectionData.$fShowDefiniteness_$cshowList -}
250913a6cb1bc19b5a2a47309bfa066c
  $fShowDefiniteness1 ::
    InflectionData.Definiteness -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.Definiteness eta :: GHC.Base.String ->
                 case ds of wild {
                   InflectionData.DEF
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           InflectionData.$fReadDefiniteness11)
                        eta
                   InflectionData.INDF
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           InflectionData.$fReadDefiniteness8)
                        eta }) -}
250913a6cb1bc19b5a2a47309bfa066c
  $fShowDefiniteness_$cshow ::
    InflectionData.Definiteness -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.Definiteness ->
                 case x of wild {
                   InflectionData.DEF -> InflectionData.$fReadDefiniteness11
                   InflectionData.INDF -> InflectionData.$fReadDefiniteness8 }) -}
250913a6cb1bc19b5a2a47309bfa066c
  $fShowDefiniteness_$cshowList ::
    [InflectionData.Definiteness] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Definiteness
                   InflectionData.$fShowDefiniteness1) -}
250913a6cb1bc19b5a2a47309bfa066c
  $fShowDefiniteness_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Definiteness -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Definiteness
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.DEF
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           InflectionData.$fReadDefiniteness11)
                        eta
                   InflectionData.INDF
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           InflectionData.$fReadDefiniteness8)
                        eta }) -}
cdbf36d6698b96caa0bed6ad294bfb83
  $fShowEvidentiality :: GHC.Show.Show InflectionData.Evidentiality
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Evidentiality
                  InflectionData.$fShowEvidentiality_$cshowsPrec
                  InflectionData.$fShowEvidentiality_$cshow
                  InflectionData.$fShowEvidentiality_$cshowList -}
cdbf36d6698b96caa0bed6ad294bfb83
  $fShowEvidentiality_$cshow ::
    InflectionData.Evidentiality -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.Evidentiality ->
                 InflectionData.$fShowEvidentiality_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
cdbf36d6698b96caa0bed6ad294bfb83
  $fShowEvidentiality_$cshowList ::
    [InflectionData.Evidentiality] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Evidentiality
                   InflectionData.$w$cshowsPrec1) -}
cdbf36d6698b96caa0bed6ad294bfb83
  $fShowEvidentiality_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Evidentiality -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: InflectionData.Evidentiality
                   w2 :: GHC.Base.String ->
                 InflectionData.$w$cshowsPrec1 w1 w2) -}
16ae30a99f963c81137d7828dad80939
  $fShowExpress ::
    GHC.Show.Show a => GHC.Show.Show (InflectionData.Express a)
  DFunId[0]
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a42 $dShow :: GHC.Show.Show a42.
                  @ (InflectionData.Express a42)
                  (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec @ a42 $dShow)
                  (InflectionData.$fShowExpress_$cshow @ a42 $dShow)
                  (InflectionData.$fShowExpress_$cshowList @ a42 $dShow) -}
d466f4cf05a7cee33a107bba9978758d
  $fShowExpress2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0) -}
16ae30a99f963c81137d7828dad80939
  $fShowExpress_$cshow ::
    GHC.Show.Show a => InflectionData.Express a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(1*C1(C1(C1(U))),A,A)><S,1*U>,
     Unfolding: (\ @ a42
                   $dShow :: GHC.Show.Show a42
                   x :: InflectionData.Express a42 ->
                 case x of wild {
                   InflectionData.NoExpress -> InflectionData.$fReadExpress5
                   InflectionData.Express b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fShow(,,,,,,,,,,,,,,,,)3
                        (GHC.Show.showsPrec
                           @ a42
                           $dShow
                           InflectionData.$fReadExpress4
                           b1
                           (GHC.Types.[] @ GHC.Types.Char)) }) -}
16ae30a99f963c81137d7828dad80939
  $fShowExpress_$cshowList ::
    GHC.Show.Show a => [InflectionData.Express a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a42
                   $dShow :: GHC.Show.Show a42
                   eta :: [InflectionData.Express a42]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (InflectionData.Express a42)
                   (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec
                      @ a42
                      $dShow
                      InflectionData.$fShowExpress2)
                   eta
                   eta1) -}
a3623d5adfe047fe3ed20dca1c56d9df
  $fShowGender :: GHC.Show.Show InflectionData.Gender
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Gender
                  InflectionData.$fShowGender_$cshowsPrec
                  InflectionData.$fShowGender_$cshow
                  InflectionData.$fShowGender_$cshowList -}
a3623d5adfe047fe3ed20dca1c56d9df
  $fShowGender_$cshow :: InflectionData.Gender -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.Gender ->
                 InflectionData.$fShowGender_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
a3623d5adfe047fe3ed20dca1c56d9df
  $fShowGender_$cshowList ::
    [InflectionData.Gender] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Gender
                   InflectionData.$w$cshowsPrec9) -}
a3623d5adfe047fe3ed20dca1c56d9df
  $fShowGender_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Gender -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: InflectionData.Gender
                   w2 :: GHC.Base.String ->
                 InflectionData.$w$cshowsPrec9 w1 w2) -}
9621aad11f276ef3a5a55be34fb30507
  $fShowHonorific :: GHC.Show.Show InflectionData.Honorific
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Honorific
                  InflectionData.$fShowHonorific_$cshowsPrec
                  InflectionData.$fShowHonorific_$cshow
                  InflectionData.$fShowHonorific_$cshowList -}
9621aad11f276ef3a5a55be34fb30507
  $fShowHonorific_$cshow ::
    InflectionData.Honorific -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.Honorific ->
                 case x of wild {
                   InflectionData.FAM -> InflectionData.$fReadHonorific15
                   InflectionData.NEU -> InflectionData.$fReadHonorific12
                   InflectionData.FORM -> InflectionData.$fReadHonorific9 }) -}
9621aad11f276ef3a5a55be34fb30507
  $fShowHonorific_$cshowList ::
    [InflectionData.Honorific] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Honorific
                   InflectionData.$w$cshowsPrec11) -}
9621aad11f276ef3a5a55be34fb30507
  $fShowHonorific_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Honorific -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: InflectionData.Honorific
                   w2 :: GHC.Base.String ->
                 InflectionData.$w$cshowsPrec11 w1 w2) -}
340b506daec6555591e5534716353ebf
  $fShowInflectionSystem ::
    GHC.Show.Show InflectionData.InflectionSystem
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.InflectionSystem
                  InflectionData.$fShowInflectionSystem_$cshowsPrec
                  InflectionData.$fShowInflectionSystem_$cshow
                  InflectionData.$fShowInflectionSystem_$cshowList -}
340b506daec6555591e5534716353ebf
  $fShowInflectionSystem1 ::
    InflectionData.InflectionSystem -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: InflectionData.InflectionSystem
                   w1 :: GHC.Base.String ->
                 case w of ww { InflectionData.InflectionSystem ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ->
                 InflectionData.$w$cshowsPrec12
                   0
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww17
                   w1 }) -}
340b506daec6555591e5534716353ebf
  $fShowInflectionSystem_$cshow ::
    InflectionData.InflectionSystem -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.InflectionSystem ->
                 InflectionData.$fShowInflectionSystem_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
340b506daec6555591e5534716353ebf
  $fShowInflectionSystem_$cshowList ::
    [InflectionData.InflectionSystem] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.InflectionSystem
                   InflectionData.$fShowInflectionSystem1) -}
340b506daec6555591e5534716353ebf
  $fShowInflectionSystem_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.InflectionSystem -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <S,1*U(U)><S,1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int
                   w1 :: InflectionData.InflectionSystem
                   w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { InflectionData.InflectionSystem ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ->
                 InflectionData.$w$cshowsPrec12
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww17
                   ww18
                   ww19
                   w2 } }) -}
669f64eab1a11feac3c6144dd5c31025
  $fShowLexCat :: GHC.Show.Show InflectionData.LexCat
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.LexCat
                  InflectionData.$fShowLexCat_$cshowsPrec
                  InflectionData.$fShowLexCat_$cshow
                  InflectionData.$fShowLexCat_$cshowList -}
669f64eab1a11feac3c6144dd5c31025
  $fShowLexCat_$cshow :: InflectionData.LexCat -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.LexCat ->
                 InflectionData.$fShowLexCat_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
669f64eab1a11feac3c6144dd5c31025
  $fShowLexCat_$cshowList ::
    [InflectionData.LexCat] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.LexCat
                   InflectionData.$w$cshowsPrec13) -}
669f64eab1a11feac3c6144dd5c31025
  $fShowLexCat_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.LexCat -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: InflectionData.LexCat
                   w2 :: GHC.Base.String ->
                 InflectionData.$w$cshowsPrec13 w1 w2) -}
ceb3098f5042182adffdb975609a3c68
  $fShowManifest ::
    GHC.Show.Show a => GHC.Show.Show (InflectionData.Manifest a)
  DFunId[0]
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a42 $dShow :: GHC.Show.Show a42.
                  @ (InflectionData.Manifest a42)
                  (InflectionData.$fShowManifest_$cshowsPrec @ a42 $dShow)
                  (InflectionData.$fShowManifest_$cshow @ a42 $dShow)
                  (InflectionData.$fShowManifest_$cshowList @ a42 $dShow) -}
c62b4d3065aeaf870089d8df087177f1
  $fShowManifest1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Manifest "#) -}
d715f7158f4d1dd0b65f8ef90c79160b
  $fShowManifest2 ::
    (InflectionData.LexCat, InflectionData.ManifestType, GHC.Types.Int)
    -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ w4 :: (InflectionData.LexCat,
                          InflectionData.ManifestType,
                          GHC.Types.Int)
                   w5 :: GHC.Base.String[OneShot] ->
                 case w4 of ww { (,,) ww1 ww2 ww3 ->
                 GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows9
                   (InflectionData.$w$cshowsPrec13
                      ww1
                      (GHC.Types.:
                         @ GHC.Types.Char
                         GHC.Show.showList__1
                         (GHC.Show.$fShow(,,)_$sgo
                            (\ w :: GHC.Base.String -> InflectionData.$w$cshowsPrec14 ww2 w)
                            (GHC.Types.:
                               @ GHC.Show.ShowS
                               (\ w2 :: GHC.Base.String ->
                                case ww3 of ww4 { GHC.Types.I# ww5 ->
                                case GHC.Show.$wshowSignedInt 0 ww5 w2 of ww6 { (#,#) ww7 ww8 ->
                                GHC.Types.: @ GHC.Types.Char ww7 ww8 } })
                               (GHC.Types.[] @ GHC.Show.ShowS))
                            (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w5)))) }) -}
eac2f82847484b9a87105d0693a7c5e1
  $fShowManifest3 :: InflectionData.Polarity -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.Polarity eta :: GHC.Base.String ->
                 case ds of wild {
                   InflectionData.AFF
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           InflectionData.$fReadManifest131)
                        eta
                   InflectionData.NEG
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           InflectionData.$fReadManifest128)
                        eta }) -}
697b496d198df68093293e68c7d50d9d
  $fShowManifest4 :: InflectionData.Specificity -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.Specificity eta :: GHC.Base.String ->
                 case ds of wild {
                   InflectionData.SPEC
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           InflectionData.$fReadManifest143)
                        eta
                   InflectionData.NSPEC
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           InflectionData.$fReadManifest140)
                        eta }) -}
39f87e694fb863c1c8c61df134a24729
  $fShowManifest5 :: InflectionData.Topic -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.Topic eta :: GHC.Base.String ->
                 case ds of wild {
                   InflectionData.TOP
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           InflectionData.$fReadManifest231)
                        eta
                   InflectionData.NTOP
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           InflectionData.$fReadManifest228)
                        eta }) -}
fed3c8348b016bc886742bbd8b88b80d
  $fShowManifest6 :: InflectionData.Volition -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.Volition eta :: GHC.Base.String ->
                 case ds of wild {
                   InflectionData.VOL
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           InflectionData.$fReadManifest279)
                        eta
                   InflectionData.NVOL
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           InflectionData.$fReadManifest276)
                        eta }) -}
330c28a236edfe4ed887d0a4e123866f
  $fShowManifest7 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   InflectionData.$fReadManifest5) -}
166b7a156844b9a33aecbdc31f9fc349
  $fShowManifest8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   InflectionData.$fReadManifest5
                   (GHC.Types.[] @ GHC.Types.Char)) -}
2dfbbd1074217167272ae1c4beb86ae1
  $fShowManifestSystem :: GHC.Show.Show InflectionData.ManifestSystem
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.ManifestSystem
                  InflectionData.$fShowManifestSystem_$cshowsPrec
                  InflectionData.$fShowManifestSystem_$cshow
                  InflectionData.$fShowManifestSystem_$cshowList -}
2dfbbd1074217167272ae1c4beb86ae1
  $fShowManifestSystem1 ::
    InflectionData.ManifestSystem -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: InflectionData.ManifestSystem
                   w1 :: GHC.Base.String ->
                 case w of ww { InflectionData.ManifestSystem ww1 ww2 ww3 ->
                 InflectionData.$w$cshowsPrec16 0 ww1 ww2 ww3 w1 }) -}
2dfbbd1074217167272ae1c4beb86ae1
  $fShowManifestSystem_$cshow ::
    InflectionData.ManifestSystem -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.ManifestSystem ->
                 InflectionData.$fShowManifestSystem_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
2dfbbd1074217167272ae1c4beb86ae1
  $fShowManifestSystem_$cshowList ::
    [InflectionData.ManifestSystem] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.ManifestSystem
                   InflectionData.$fShowManifestSystem1) -}
2dfbbd1074217167272ae1c4beb86ae1
  $fShowManifestSystem_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.ManifestSystem -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S,1*U(1*U,1*U,1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int
                   w1 :: InflectionData.ManifestSystem
                   w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { InflectionData.ManifestSystem ww3 ww4 ww5 ->
                 InflectionData.$w$cshowsPrec16 ww1 ww3 ww4 ww5 w2 } }) -}
af5ddf409df7e34b7ae5f58c0bd0fff6
  $fShowManifestType :: GHC.Show.Show InflectionData.ManifestType
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.ManifestType
                  InflectionData.$fShowManifestType_$cshowsPrec
                  InflectionData.$fShowManifestType_$cshow
                  InflectionData.$fShowManifestType_$cshowList -}
af5ddf409df7e34b7ae5f58c0bd0fff6
  $fShowManifestType_$cshow ::
    InflectionData.ManifestType -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.ManifestType ->
                 case x of wild {
                   InflectionData.Particle -> InflectionData.$fReadManifestType15
                   InflectionData.Prefix -> InflectionData.$fReadManifestType12
                   InflectionData.Suffix -> InflectionData.$fReadManifestType9 }) -}
af5ddf409df7e34b7ae5f58c0bd0fff6
  $fShowManifestType_$cshowList ::
    [InflectionData.ManifestType] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.ManifestType
                   InflectionData.$w$cshowsPrec14) -}
af5ddf409df7e34b7ae5f58c0bd0fff6
  $fShowManifestType_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.ManifestType -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: InflectionData.ManifestType
                   w2 :: GHC.Base.String ->
                 InflectionData.$w$cshowsPrec14 w1 w2) -}
ceb3098f5042182adffdb975609a3c68
  $fShowManifest_$cshow ::
    GHC.Show.Show a => InflectionData.Manifest a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(1*C1(C1(C1(U))),A,A)><S,1*U>,
     Unfolding: (\ @ a42
                   $dShow :: GHC.Show.Show a42
                   x :: InflectionData.Manifest a42 ->
                 case x of wild {
                   InflectionData.NoManifest -> InflectionData.$fShowManifest8
                   InflectionData.Manifest b1 b2
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fShowManifest1
                        (GHC.Show.showList__
                           @ (InflectionData.LexCat,
                              InflectionData.ManifestType,
                              GHC.Types.Int)
                           InflectionData.$fShowManifest2
                           b1
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.showSpace1
                              (GHC.Show.showsPrec
                                 @ a42
                                 $dShow
                                 InflectionData.$fReadExpress4
                                 b2
                                 (GHC.Types.[] @ GHC.Types.Char)))) }) -}
ceb3098f5042182adffdb975609a3c68
  $fShowManifest_$cshowList ::
    GHC.Show.Show a => [InflectionData.Manifest a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a42
                   $dShow :: GHC.Show.Show a42
                   eta :: [InflectionData.Manifest a42]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (InflectionData.Manifest a42)
                   (InflectionData.$fShowManifest_$cshowsPrec
                      @ a42
                      $dShow
                      InflectionData.$fShowExpress2)
                   eta
                   eta1) -}
ceb3098f5042182adffdb975609a3c68
  $fShowManifest_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int -> InflectionData.Manifest a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(U)><S,1*U>,
     Unfolding: (\ @ a42
                   $dShow :: GHC.Show.Show a42
                   ds :: GHC.Types.Int
                   ds1 :: InflectionData.Manifest a42 ->
                 case ds1 of wild {
                   InflectionData.NoManifest -> InflectionData.$fShowManifest7
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.showsPrec @ a42 $dShow InflectionData.$fReadExpress4 b2
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> \ x1 :: GHC.Base.String ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             InflectionData.$fShowManifest1
                             (GHC.Show.showList__
                                @ (InflectionData.LexCat,
                                   InflectionData.ManifestType,
                                   GHC.Types.Int)
                                InflectionData.$fShowManifest2
                                b1
                                (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x1)))
                        GHC.Types.True
                        -> \ x1 :: GHC.Base.String ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                InflectionData.$fShowManifest1
                                (GHC.Show.showList__
                                   @ (InflectionData.LexCat,
                                      InflectionData.ManifestType,
                                      GHC.Types.Int)
                                   InflectionData.$fShowManifest2
                                   b1
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.showSpace1
                                      (g (GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.shows8
                                            x1))))) } } }) -}
ceb3098f5042182adffdb975609a3c68
  $fShowManifest_$s$cshowsPrec ::
    GHC.Types.Int
    -> InflectionData.Manifest [InflectionData.Animacy]
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Manifest [InflectionData.Animacy]
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest5 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                          {- Arity: 1, Strictness: <L,U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Show.showList__
                            @ (InflectionData.LexCat,
                               InflectionData.ManifestType,
                               GHC.Types.Int)
                            InflectionData.$fShowManifest2
                            b1
                            (GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showSpace1
                               (GHC.Show.showList__
                                  @ InflectionData.Animacy
                                  InflectionData.$w$cshowsPrec8
                                  b2
                                  x1))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             InflectionData.$fShowManifest1
                             (g eta)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                InflectionData.$fShowManifest1
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta))) } } }) -}
ceb3098f5042182adffdb975609a3c68
  $fShowManifest_$s$cshowsPrec1 ::
    GHC.Types.Int
    -> InflectionData.Manifest [InflectionData.Aspect]
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Manifest [InflectionData.Aspect]
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest5 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                          {- Arity: 1, Strictness: <L,U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Show.showList__
                            @ (InflectionData.LexCat,
                               InflectionData.ManifestType,
                               GHC.Types.Int)
                            InflectionData.$fShowManifest2
                            b1
                            (GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showSpace1
                               (GHC.Show.showList__
                                  @ InflectionData.Aspect
                                  InflectionData.$w$cshowsPrec3
                                  b2
                                  x1))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             InflectionData.$fShowManifest1
                             (g eta)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                InflectionData.$fShowManifest1
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta))) } } }) -}
ceb3098f5042182adffdb975609a3c68
  $fShowManifest_$s$cshowsPrec10 ::
    GHC.Types.Int
    -> InflectionData.Manifest [InflectionData.Polarity]
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Manifest [InflectionData.Polarity]
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest5 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShowManifest1
                            (GHC.Show.showList__
                               @ (InflectionData.LexCat,
                                  InflectionData.ManifestType,
                                  GHC.Types.Int)
                               InflectionData.$fShowManifest2
                               b1
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (GHC.Show.showList__
                                     @ InflectionData.Polarity
                                     InflectionData.$fShowManifest3
                                     b2
                                     x1)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
ceb3098f5042182adffdb975609a3c68
  $fShowManifest_$s$cshowsPrec11 ::
    GHC.Types.Int
    -> InflectionData.Manifest [InflectionData.Specificity]
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Manifest [InflectionData.Specificity]
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest5 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShowManifest1
                            (GHC.Show.showList__
                               @ (InflectionData.LexCat,
                                  InflectionData.ManifestType,
                                  GHC.Types.Int)
                               InflectionData.$fShowManifest2
                               b1
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (GHC.Show.showList__
                                     @ InflectionData.Specificity
                                     InflectionData.$fShowManifest4
                                     b2
                                     x1)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
ceb3098f5042182adffdb975609a3c68
  $fShowManifest_$s$cshowsPrec12 ::
    GHC.Types.Int
    -> InflectionData.Manifest [InflectionData.Tense] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Manifest [InflectionData.Tense]
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest5 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShowManifest1
                            (GHC.Show.showList__
                               @ (InflectionData.LexCat,
                                  InflectionData.ManifestType,
                                  GHC.Types.Int)
                               InflectionData.$fShowManifest2
                               b1
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (GHC.Show.showList__
                                     @ InflectionData.Tense
                                     InflectionData.$w$cshowsPrec4
                                     b2
                                     x1)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
ceb3098f5042182adffdb975609a3c68
  $fShowManifest_$s$cshowsPrec13 ::
    GHC.Types.Int
    -> InflectionData.Manifest [InflectionData.Topic] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Manifest [InflectionData.Topic]
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest5 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShowManifest1
                            (GHC.Show.showList__
                               @ (InflectionData.LexCat,
                                  InflectionData.ManifestType,
                                  GHC.Types.Int)
                               InflectionData.$fShowManifest2
                               b1
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (GHC.Show.showList__
                                     @ InflectionData.Topic
                                     InflectionData.$fShowManifest5
                                     b2
                                     x1)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
ceb3098f5042182adffdb975609a3c68
  $fShowManifest_$s$cshowsPrec14 ::
    GHC.Types.Int
    -> InflectionData.Manifest [InflectionData.Transitivity]
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Manifest [InflectionData.Transitivity]
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest5 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShowManifest1
                            (GHC.Show.showList__
                               @ (InflectionData.LexCat,
                                  InflectionData.ManifestType,
                                  GHC.Types.Int)
                               InflectionData.$fShowManifest2
                               b1
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (GHC.Show.showList__
                                     @ InflectionData.Transitivity
                                     InflectionData.$w$cshowsPrec
                                     b2
                                     x1)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
ceb3098f5042182adffdb975609a3c68
  $fShowManifest_$s$cshowsPrec15 ::
    GHC.Types.Int
    -> InflectionData.Manifest [InflectionData.Voice] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Manifest [InflectionData.Voice]
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest5 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShowManifest1
                            (GHC.Show.showList__
                               @ (InflectionData.LexCat,
                                  InflectionData.ManifestType,
                                  GHC.Types.Int)
                               InflectionData.$fShowManifest2
                               b1
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (GHC.Show.showList__
                                     @ InflectionData.Voice
                                     InflectionData.$w$cshowsPrec15
                                     b2
                                     x1)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
ceb3098f5042182adffdb975609a3c68
  $fShowManifest_$s$cshowsPrec16 ::
    GHC.Types.Int
    -> InflectionData.Manifest [InflectionData.Volition]
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Manifest [InflectionData.Volition]
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest5 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShowManifest1
                            (GHC.Show.showList__
                               @ (InflectionData.LexCat,
                                  InflectionData.ManifestType,
                                  GHC.Types.Int)
                               InflectionData.$fShowManifest2
                               b1
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (GHC.Show.showList__
                                     @ InflectionData.Volition
                                     InflectionData.$fShowManifest6
                                     b2
                                     x1)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
ceb3098f5042182adffdb975609a3c68
  $fShowManifest_$s$cshowsPrec2 ::
    GHC.Types.Int
    -> InflectionData.Manifest [InflectionData.Case] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Manifest [InflectionData.Case]
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest5 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                          {- Arity: 1, Strictness: <L,U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Show.showList__
                            @ (InflectionData.LexCat,
                               InflectionData.ManifestType,
                               GHC.Types.Int)
                            InflectionData.$fShowManifest2
                            b1
                            (GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showSpace1
                               (GHC.Show.showList__
                                  @ InflectionData.Case
                                  InflectionData.$w$cshowsPrec7
                                  b2
                                  x1))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             InflectionData.$fShowManifest1
                             (g eta)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                InflectionData.$fShowManifest1
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta))) } } }) -}
ceb3098f5042182adffdb975609a3c68
  $fShowManifest_$s$cshowsPrec3 ::
    GHC.Types.Int
    -> InflectionData.Manifest [InflectionData.Definiteness]
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Manifest [InflectionData.Definiteness]
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest5 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                          {- Arity: 1, Strictness: <L,U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Show.showList__
                            @ (InflectionData.LexCat,
                               InflectionData.ManifestType,
                               GHC.Types.Int)
                            InflectionData.$fShowManifest2
                            b1
                            (GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showSpace1
                               (GHC.Show.showList__
                                  @ InflectionData.Definiteness
                                  InflectionData.$fShowDefiniteness1
                                  b2
                                  x1))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             InflectionData.$fShowManifest1
                             (g eta)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                InflectionData.$fShowManifest1
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta))) } } }) -}
ceb3098f5042182adffdb975609a3c68
  $fShowManifest_$s$cshowsPrec4 ::
    GHC.Types.Int
    -> InflectionData.Manifest [InflectionData.Evidentiality]
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Manifest [InflectionData.Evidentiality]
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest5 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                          {- Arity: 1, Strictness: <L,U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Show.showList__
                            @ (InflectionData.LexCat,
                               InflectionData.ManifestType,
                               GHC.Types.Int)
                            InflectionData.$fShowManifest2
                            b1
                            (GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showSpace1
                               (GHC.Show.showList__
                                  @ InflectionData.Evidentiality
                                  InflectionData.$w$cshowsPrec1
                                  b2
                                  x1))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             InflectionData.$fShowManifest1
                             (g eta)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                InflectionData.$fShowManifest1
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta))) } } }) -}
ceb3098f5042182adffdb975609a3c68
  $fShowManifest_$s$cshowsPrec5 ::
    GHC.Types.Int
    -> InflectionData.Manifest [InflectionData.Gender]
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Manifest [InflectionData.Gender]
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest5 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                          {- Arity: 1, Strictness: <L,U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Show.showList__
                            @ (InflectionData.LexCat,
                               InflectionData.ManifestType,
                               GHC.Types.Int)
                            InflectionData.$fShowManifest2
                            b1
                            (GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showSpace1
                               (GHC.Show.showList__
                                  @ InflectionData.Gender
                                  InflectionData.$w$cshowsPrec9
                                  b2
                                  x1))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             InflectionData.$fShowManifest1
                             (g eta)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                InflectionData.$fShowManifest1
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta))) } } }) -}
ceb3098f5042182adffdb975609a3c68
  $fShowManifest_$s$cshowsPrec6 ::
    GHC.Types.Int
    -> InflectionData.Manifest [InflectionData.Honorific]
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Manifest [InflectionData.Honorific]
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest5 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                          {- Arity: 1, Strictness: <L,U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Show.showList__
                            @ (InflectionData.LexCat,
                               InflectionData.ManifestType,
                               GHC.Types.Int)
                            InflectionData.$fShowManifest2
                            b1
                            (GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showSpace1
                               (GHC.Show.showList__
                                  @ InflectionData.Honorific
                                  InflectionData.$w$cshowsPrec11
                                  b2
                                  x1))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             InflectionData.$fShowManifest1
                             (g eta)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                InflectionData.$fShowManifest1
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta))) } } }) -}
ceb3098f5042182adffdb975609a3c68
  $fShowManifest_$s$cshowsPrec7 ::
    GHC.Types.Int
    -> InflectionData.Manifest [InflectionData.Mood] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Manifest [InflectionData.Mood]
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest5 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShowManifest1
                            (GHC.Show.showList__
                               @ (InflectionData.LexCat,
                                  InflectionData.ManifestType,
                                  GHC.Types.Int)
                               InflectionData.$fShowManifest2
                               b1
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (GHC.Show.showList__
                                     @ InflectionData.Mood
                                     InflectionData.$w$cshowsPrec2
                                     b2
                                     x1)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
ceb3098f5042182adffdb975609a3c68
  $fShowManifest_$s$cshowsPrec8 ::
    GHC.Types.Int
    -> InflectionData.Manifest [InflectionData.Number]
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Manifest [InflectionData.Number]
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest5 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShowManifest1
                            (GHC.Show.showList__
                               @ (InflectionData.LexCat,
                                  InflectionData.ManifestType,
                                  GHC.Types.Int)
                               InflectionData.$fShowManifest2
                               b1
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (GHC.Show.showList__
                                     @ InflectionData.Number
                                     InflectionData.$w$cshowsPrec6
                                     b2
                                     x1)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
ceb3098f5042182adffdb975609a3c68
  $fShowManifest_$s$cshowsPrec9 ::
    GHC.Types.Int
    -> InflectionData.Manifest [InflectionData.Person]
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Manifest [InflectionData.Person]
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest5 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShowManifest1
                            (GHC.Show.showList__
                               @ (InflectionData.LexCat,
                                  InflectionData.ManifestType,
                                  GHC.Types.Int)
                               InflectionData.$fShowManifest2
                               b1
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (GHC.Show.showList__
                                     @ InflectionData.Person
                                     InflectionData.$w$cshowsPrec5
                                     b2
                                     x1)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
4e999fb9fa6728ec3df19bdd28482ccf
  $fShowMood :: GHC.Show.Show InflectionData.Mood
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Mood
                  InflectionData.$fShowMood_$cshowsPrec
                  InflectionData.$fShowMood_$cshow
                  InflectionData.$fShowMood_$cshowList -}
4e999fb9fa6728ec3df19bdd28482ccf
  $fShowMood_$cshow :: InflectionData.Mood -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.Mood ->
                 InflectionData.$fShowMood_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
4e999fb9fa6728ec3df19bdd28482ccf
  $fShowMood_$cshowList :: [InflectionData.Mood] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Mood
                   InflectionData.$w$cshowsPrec2) -}
4e999fb9fa6728ec3df19bdd28482ccf
  $fShowMood_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Mood -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: InflectionData.Mood
                   w2 :: GHC.Base.String ->
                 InflectionData.$w$cshowsPrec2 w1 w2) -}
5983d4e902f20ca491bfcf4389614668
  $fShowNumber :: GHC.Show.Show InflectionData.Number
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Number
                  InflectionData.$fShowNumber_$cshowsPrec
                  InflectionData.$fShowNumber_$cshow
                  InflectionData.$fShowNumber_$cshowList -}
5983d4e902f20ca491bfcf4389614668
  $fShowNumber_$cshow :: InflectionData.Number -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.Number ->
                 InflectionData.$fShowNumber_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
5983d4e902f20ca491bfcf4389614668
  $fShowNumber_$cshowList ::
    [InflectionData.Number] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Number
                   InflectionData.$w$cshowsPrec6) -}
5983d4e902f20ca491bfcf4389614668
  $fShowNumber_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Number -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: InflectionData.Number
                   w2 :: GHC.Base.String ->
                 InflectionData.$w$cshowsPrec6 w1 w2) -}
8962065c67c1705ac692fcc8d9210bcd
  $fShowPerson :: GHC.Show.Show InflectionData.Person
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Person
                  InflectionData.$fShowPerson_$cshowsPrec
                  InflectionData.$fShowPerson_$cshow
                  InflectionData.$fShowPerson_$cshowList -}
8962065c67c1705ac692fcc8d9210bcd
  $fShowPerson_$cshow :: InflectionData.Person -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.Person ->
                 InflectionData.$fShowPerson_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
8962065c67c1705ac692fcc8d9210bcd
  $fShowPerson_$cshowList ::
    [InflectionData.Person] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Person
                   InflectionData.$w$cshowsPrec5) -}
8962065c67c1705ac692fcc8d9210bcd
  $fShowPerson_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Person -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: InflectionData.Person
                   w2 :: GHC.Base.String ->
                 InflectionData.$w$cshowsPrec5 w1 w2) -}
eac2f82847484b9a87105d0693a7c5e1
  $fShowPolarity :: GHC.Show.Show InflectionData.Polarity
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Polarity
                  InflectionData.$fShowPolarity_$cshowsPrec
                  InflectionData.$fShowPolarity_$cshow
                  InflectionData.$fShowPolarity_$cshowList -}
eac2f82847484b9a87105d0693a7c5e1
  $fShowPolarity_$cshow :: InflectionData.Polarity -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.Polarity ->
                 case x of wild {
                   InflectionData.AFF -> InflectionData.$fReadManifest131
                   InflectionData.NEG -> InflectionData.$fReadManifest128 }) -}
eac2f82847484b9a87105d0693a7c5e1
  $fShowPolarity_$cshowList ::
    [InflectionData.Polarity] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Polarity
                   InflectionData.$fShowManifest3) -}
eac2f82847484b9a87105d0693a7c5e1
  $fShowPolarity_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Polarity -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Polarity
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.AFF
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           InflectionData.$fReadManifest131)
                        eta
                   InflectionData.NEG
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           InflectionData.$fReadManifest128)
                        eta }) -}
697b496d198df68093293e68c7d50d9d
  $fShowSpecificity :: GHC.Show.Show InflectionData.Specificity
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Specificity
                  InflectionData.$fShowSpecificity_$cshowsPrec
                  InflectionData.$fShowSpecificity_$cshow
                  InflectionData.$fShowSpecificity_$cshowList -}
697b496d198df68093293e68c7d50d9d
  $fShowSpecificity_$cshow ::
    InflectionData.Specificity -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.Specificity ->
                 case x of wild {
                   InflectionData.SPEC -> InflectionData.$fReadManifest143
                   InflectionData.NSPEC -> InflectionData.$fReadManifest140 }) -}
697b496d198df68093293e68c7d50d9d
  $fShowSpecificity_$cshowList ::
    [InflectionData.Specificity] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Specificity
                   InflectionData.$fShowManifest4) -}
697b496d198df68093293e68c7d50d9d
  $fShowSpecificity_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Specificity -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Specificity
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.SPEC
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           InflectionData.$fReadManifest143)
                        eta
                   InflectionData.NSPEC
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           InflectionData.$fReadManifest140)
                        eta }) -}
b52863b70f3cc5626b7d1db2a6c4ef40
  $fShowTense :: GHC.Show.Show InflectionData.Tense
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Tense
                  InflectionData.$fShowTense_$cshowsPrec
                  InflectionData.$fShowTense_$cshow
                  InflectionData.$fShowTense_$cshowList -}
b52863b70f3cc5626b7d1db2a6c4ef40
  $fShowTense_$cshow :: InflectionData.Tense -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.Tense ->
                 InflectionData.$fShowTense_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
b52863b70f3cc5626b7d1db2a6c4ef40
  $fShowTense_$cshowList :: [InflectionData.Tense] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Tense
                   InflectionData.$w$cshowsPrec4) -}
b52863b70f3cc5626b7d1db2a6c4ef40
  $fShowTense_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Tense -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: InflectionData.Tense
                   w2 :: GHC.Base.String ->
                 InflectionData.$w$cshowsPrec4 w1 w2) -}
39f87e694fb863c1c8c61df134a24729
  $fShowTopic :: GHC.Show.Show InflectionData.Topic
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Topic
                  InflectionData.$fShowTopic_$cshowsPrec
                  InflectionData.$fShowTopic_$cshow
                  InflectionData.$fShowTopic_$cshowList -}
39f87e694fb863c1c8c61df134a24729
  $fShowTopic_$cshow :: InflectionData.Topic -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.Topic ->
                 case x of wild {
                   InflectionData.TOP -> InflectionData.$fReadManifest231
                   InflectionData.NTOP -> InflectionData.$fReadManifest228 }) -}
39f87e694fb863c1c8c61df134a24729
  $fShowTopic_$cshowList :: [InflectionData.Topic] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Topic
                   InflectionData.$fShowManifest5) -}
39f87e694fb863c1c8c61df134a24729
  $fShowTopic_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Topic -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Topic
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.TOP
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           InflectionData.$fReadManifest231)
                        eta
                   InflectionData.NTOP
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           InflectionData.$fReadManifest228)
                        eta }) -}
57945260416d71dc87e31cac669b161f
  $fShowTransitivity :: GHC.Show.Show InflectionData.Transitivity
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Transitivity
                  InflectionData.$fShowTransitivity_$cshowsPrec
                  InflectionData.$fShowTransitivity_$cshow
                  InflectionData.$fShowTransitivity_$cshowList -}
57945260416d71dc87e31cac669b161f
  $fShowTransitivity_$cshow ::
    InflectionData.Transitivity -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.Transitivity ->
                 InflectionData.$fShowTransitivity_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
57945260416d71dc87e31cac669b161f
  $fShowTransitivity_$cshowList ::
    [InflectionData.Transitivity] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Transitivity
                   InflectionData.$w$cshowsPrec) -}
57945260416d71dc87e31cac669b161f
  $fShowTransitivity_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Transitivity -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: InflectionData.Transitivity
                   w2 :: GHC.Base.String ->
                 InflectionData.$w$cshowsPrec w1 w2) -}
729607927630d1e92c199129334472f1
  $fShowVoice :: GHC.Show.Show InflectionData.Voice
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Voice
                  InflectionData.$fShowVoice_$cshowsPrec
                  InflectionData.$fShowVoice_$cshow
                  InflectionData.$fShowVoice_$cshowList -}
729607927630d1e92c199129334472f1
  $fShowVoice_$cshow :: InflectionData.Voice -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.Voice ->
                 case x of wild {
                   InflectionData.ACTIVE -> InflectionData.$fReadManifest267
                   InflectionData.MIDDLE -> InflectionData.$fReadManifest264
                   InflectionData.PASSIVE -> InflectionData.$fReadManifest261 }) -}
729607927630d1e92c199129334472f1
  $fShowVoice_$cshowList :: [InflectionData.Voice] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Voice
                   InflectionData.$w$cshowsPrec15) -}
729607927630d1e92c199129334472f1
  $fShowVoice_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Voice -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: InflectionData.Voice
                   w2 :: GHC.Base.String ->
                 InflectionData.$w$cshowsPrec15 w1 w2) -}
fed3c8348b016bc886742bbd8b88b80d
  $fShowVolition :: GHC.Show.Show InflectionData.Volition
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Volition
                  InflectionData.$fShowVolition_$cshowsPrec
                  InflectionData.$fShowVolition_$cshow
                  InflectionData.$fShowVolition_$cshowList -}
fed3c8348b016bc886742bbd8b88b80d
  $fShowVolition_$cshow :: InflectionData.Volition -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.Volition ->
                 case x of wild {
                   InflectionData.VOL -> InflectionData.$fReadManifest279
                   InflectionData.NVOL -> InflectionData.$fReadManifest276 }) -}
fed3c8348b016bc886742bbd8b88b80d
  $fShowVolition_$cshowList ::
    [InflectionData.Volition] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Volition
                   InflectionData.$fShowManifest6) -}
fed3c8348b016bc886742bbd8b88b80d
  $fShowVolition_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Volition -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Volition
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.VOL
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           InflectionData.$fReadManifest279)
                        eta
                   InflectionData.NVOL
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           InflectionData.$fReadManifest276)
                        eta }) -}
d7ab917227c450cc0510a5c1d903e283
  $w$c== ::
    (GHC.Classes.Eq a, GHC.Classes.Eq b, GHC.Classes.Eq c,
     GHC.Classes.Eq d, GHC.Classes.Eq e, GHC.Classes.Eq f,
     GHC.Classes.Eq g, GHC.Classes.Eq h, GHC.Classes.Eq i,
     GHC.Classes.Eq j, GHC.Classes.Eq k, GHC.Classes.Eq l,
     GHC.Classes.Eq m, GHC.Classes.Eq n, GHC.Classes.Eq o,
     GHC.Classes.Eq p, GHC.Classes.Eq q) =>
    a
    -> b
    -> c
    -> d
    -> e
    -> f
    -> g
    -> h
    -> i
    -> j
    -> k
    -> l
    -> m
    -> n
    -> o
    -> p
    -> q
    -> a
    -> b
    -> c
    -> d
    -> e
    -> f
    -> g
    -> h
    -> i
    -> j
    -> k
    -> l
    -> m
    -> n
    -> o
    -> p
    -> q
    -> GHC.Types.Bool
  {- Arity: 51, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
c41a0677da89ace1b8002a645d4b424e
  $w$c==1 ::
    InflectionData.Manifest [InflectionData.Gender]
    -> InflectionData.Manifest [InflectionData.Animacy]
    -> InflectionData.Manifest [InflectionData.Case]
    -> InflectionData.Manifest [InflectionData.Number]
    -> InflectionData.Manifest [InflectionData.Definiteness]
    -> InflectionData.Manifest [InflectionData.Specificity]
    -> InflectionData.Manifest [InflectionData.Topic]
    -> InflectionData.Manifest [InflectionData.Person]
    -> InflectionData.Manifest [InflectionData.Honorific]
    -> InflectionData.Manifest [InflectionData.Polarity]
    -> InflectionData.Manifest [InflectionData.Tense]
    -> InflectionData.Manifest [InflectionData.Aspect]
    -> InflectionData.Manifest [InflectionData.Mood]
    -> InflectionData.Manifest [InflectionData.Voice]
    -> InflectionData.Manifest [InflectionData.Evidentiality]
    -> InflectionData.Manifest [InflectionData.Transitivity]
    -> InflectionData.Manifest [InflectionData.Volition]
    -> InflectionData.Manifest [InflectionData.Gender]
    -> InflectionData.Manifest [InflectionData.Animacy]
    -> InflectionData.Manifest [InflectionData.Case]
    -> InflectionData.Manifest [InflectionData.Number]
    -> InflectionData.Manifest [InflectionData.Definiteness]
    -> InflectionData.Manifest [InflectionData.Specificity]
    -> InflectionData.Manifest [InflectionData.Topic]
    -> InflectionData.Manifest [InflectionData.Person]
    -> InflectionData.Manifest [InflectionData.Honorific]
    -> InflectionData.Manifest [InflectionData.Polarity]
    -> InflectionData.Manifest [InflectionData.Tense]
    -> InflectionData.Manifest [InflectionData.Aspect]
    -> InflectionData.Manifest [InflectionData.Mood]
    -> InflectionData.Manifest [InflectionData.Voice]
    -> InflectionData.Manifest [InflectionData.Evidentiality]
    -> InflectionData.Manifest [InflectionData.Transitivity]
    -> InflectionData.Manifest [InflectionData.Volition]
    -> GHC.Types.Bool
  {- Arity: 34, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0] -}
2998d2e2b643e08e0e817abc9fceafe3
  $w$c==2 ::
    InflectionData.LexCat
    -> InflectionData.ManifestType
    -> [(PhonemeData.Morpheme,
         (InflectionData.Express InflectionData.Gender,
          InflectionData.Express InflectionData.Animacy,
          InflectionData.Express InflectionData.Case,
          InflectionData.Express InflectionData.Number,
          InflectionData.Express InflectionData.Definiteness,
          InflectionData.Express InflectionData.Specificity,
          InflectionData.Express InflectionData.Topic,
          InflectionData.Express InflectionData.Person,
          InflectionData.Express InflectionData.Honorific,
          InflectionData.Express InflectionData.Polarity,
          InflectionData.Express InflectionData.Tense,
          InflectionData.Express InflectionData.Aspect,
          InflectionData.Express InflectionData.Mood,
          InflectionData.Express InflectionData.Voice,
          InflectionData.Express InflectionData.Evidentiality,
          InflectionData.Express InflectionData.Transitivity,
          InflectionData.Express InflectionData.Volition))]
    -> InflectionData.LexCat
    -> InflectionData.ManifestType
    -> [(PhonemeData.Morpheme,
         (InflectionData.Express InflectionData.Gender,
          InflectionData.Express InflectionData.Animacy,
          InflectionData.Express InflectionData.Case,
          InflectionData.Express InflectionData.Number,
          InflectionData.Express InflectionData.Definiteness,
          InflectionData.Express InflectionData.Specificity,
          InflectionData.Express InflectionData.Topic,
          InflectionData.Express InflectionData.Person,
          InflectionData.Express InflectionData.Honorific,
          InflectionData.Express InflectionData.Polarity,
          InflectionData.Express InflectionData.Tense,
          InflectionData.Express InflectionData.Aspect,
          InflectionData.Express InflectionData.Mood,
          InflectionData.Express InflectionData.Voice,
          InflectionData.Express InflectionData.Evidentiality,
          InflectionData.Express InflectionData.Transitivity,
          InflectionData.Express InflectionData.Volition))]
    -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ ww :: InflectionData.LexCat
                   ww1 :: InflectionData.ManifestType
                   ww2 :: [(PhonemeData.Morpheme,
                            (InflectionData.Express InflectionData.Gender,
                             InflectionData.Express InflectionData.Animacy,
                             InflectionData.Express InflectionData.Case,
                             InflectionData.Express InflectionData.Number,
                             InflectionData.Express InflectionData.Definiteness,
                             InflectionData.Express InflectionData.Specificity,
                             InflectionData.Express InflectionData.Topic,
                             InflectionData.Express InflectionData.Person,
                             InflectionData.Express InflectionData.Honorific,
                             InflectionData.Express InflectionData.Polarity,
                             InflectionData.Express InflectionData.Tense,
                             InflectionData.Express InflectionData.Aspect,
                             InflectionData.Express InflectionData.Mood,
                             InflectionData.Express InflectionData.Voice,
                             InflectionData.Express InflectionData.Evidentiality,
                             InflectionData.Express InflectionData.Transitivity,
                             InflectionData.Express InflectionData.Volition))]
                   ww3 :: InflectionData.LexCat
                   ww4 :: InflectionData.ManifestType
                   ww5 :: [(PhonemeData.Morpheme,
                            (InflectionData.Express InflectionData.Gender,
                             InflectionData.Express InflectionData.Animacy,
                             InflectionData.Express InflectionData.Case,
                             InflectionData.Express InflectionData.Number,
                             InflectionData.Express InflectionData.Definiteness,
                             InflectionData.Express InflectionData.Specificity,
                             InflectionData.Express InflectionData.Topic,
                             InflectionData.Express InflectionData.Person,
                             InflectionData.Express InflectionData.Honorific,
                             InflectionData.Express InflectionData.Polarity,
                             InflectionData.Express InflectionData.Tense,
                             InflectionData.Express InflectionData.Aspect,
                             InflectionData.Express InflectionData.Mood,
                             InflectionData.Express InflectionData.Voice,
                             InflectionData.Express InflectionData.Evidentiality,
                             InflectionData.Express InflectionData.Transitivity,
                             InflectionData.Express InflectionData.Volition))] ->
                 case ww of x1 { DEFAULT ->
                 case ww3 of x2 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==#
                           (GHC.Prim.dataToTag# @ InflectionData.LexCat x1)
                           (GHC.Prim.dataToTag# @ InflectionData.LexCat x2)) of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case ww1 of wild1 {
                        InflectionData.Particle
                        -> case ww4 of wild2 {
                             DEFAULT -> GHC.Types.False
                             InflectionData.Particle
                             -> GHC.Classes.$fEq[]_$c==
                                  @ (PhonemeData.Morpheme,
                                     (InflectionData.Express InflectionData.Gender,
                                      InflectionData.Express InflectionData.Animacy,
                                      InflectionData.Express InflectionData.Case,
                                      InflectionData.Express InflectionData.Number,
                                      InflectionData.Express InflectionData.Definiteness,
                                      InflectionData.Express InflectionData.Specificity,
                                      InflectionData.Express InflectionData.Topic,
                                      InflectionData.Express InflectionData.Person,
                                      InflectionData.Express InflectionData.Honorific,
                                      InflectionData.Express InflectionData.Polarity,
                                      InflectionData.Express InflectionData.Tense,
                                      InflectionData.Express InflectionData.Aspect,
                                      InflectionData.Express InflectionData.Mood,
                                      InflectionData.Express InflectionData.Voice,
                                      InflectionData.Express InflectionData.Evidentiality,
                                      InflectionData.Express InflectionData.Transitivity,
                                      InflectionData.Express InflectionData.Volition))
                                  InflectionData.$fEqManifestSystem_$s$fEq(,)
                                  ww2
                                  ww5 }
                        InflectionData.Prefix
                        -> case ww4 of wild2 {
                             DEFAULT -> GHC.Types.False
                             InflectionData.Prefix
                             -> GHC.Classes.$fEq[]_$c==
                                  @ (PhonemeData.Morpheme,
                                     (InflectionData.Express InflectionData.Gender,
                                      InflectionData.Express InflectionData.Animacy,
                                      InflectionData.Express InflectionData.Case,
                                      InflectionData.Express InflectionData.Number,
                                      InflectionData.Express InflectionData.Definiteness,
                                      InflectionData.Express InflectionData.Specificity,
                                      InflectionData.Express InflectionData.Topic,
                                      InflectionData.Express InflectionData.Person,
                                      InflectionData.Express InflectionData.Honorific,
                                      InflectionData.Express InflectionData.Polarity,
                                      InflectionData.Express InflectionData.Tense,
                                      InflectionData.Express InflectionData.Aspect,
                                      InflectionData.Express InflectionData.Mood,
                                      InflectionData.Express InflectionData.Voice,
                                      InflectionData.Express InflectionData.Evidentiality,
                                      InflectionData.Express InflectionData.Transitivity,
                                      InflectionData.Express InflectionData.Volition))
                                  InflectionData.$fEqManifestSystem_$s$fEq(,)
                                  ww2
                                  ww5 }
                        InflectionData.Suffix
                        -> case ww4 of wild2 {
                             DEFAULT -> GHC.Types.False
                             InflectionData.Suffix
                             -> GHC.Classes.$fEq[]_$c==
                                  @ (PhonemeData.Morpheme,
                                     (InflectionData.Express InflectionData.Gender,
                                      InflectionData.Express InflectionData.Animacy,
                                      InflectionData.Express InflectionData.Case,
                                      InflectionData.Express InflectionData.Number,
                                      InflectionData.Express InflectionData.Definiteness,
                                      InflectionData.Express InflectionData.Specificity,
                                      InflectionData.Express InflectionData.Topic,
                                      InflectionData.Express InflectionData.Person,
                                      InflectionData.Express InflectionData.Honorific,
                                      InflectionData.Express InflectionData.Polarity,
                                      InflectionData.Express InflectionData.Tense,
                                      InflectionData.Express InflectionData.Aspect,
                                      InflectionData.Express InflectionData.Mood,
                                      InflectionData.Express InflectionData.Voice,
                                      InflectionData.Express InflectionData.Evidentiality,
                                      InflectionData.Express InflectionData.Transitivity,
                                      InflectionData.Express InflectionData.Volition))
                                  InflectionData.$fEqManifestSystem_$s$fEq(,)
                                  ww2
                                  ww5 } } } } }) -}
57945260416d71dc87e31cac669b161f
  $w$cshowsPrec ::
    InflectionData.Transitivity -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: InflectionData.Transitivity
                   w1 :: GHC.Base.String ->
                 case w of wild {
                   InflectionData.NTRANS
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest251 w1
                   InflectionData.TRANS
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest248 w1
                   InflectionData.MTRANS
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest245 w1
                   InflectionData.DITRANS
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadManifest242
                        w1 }) -}
cdbf36d6698b96caa0bed6ad294bfb83
  $w$cshowsPrec1 ::
    InflectionData.Evidentiality -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: InflectionData.Evidentiality
                   w1 :: GHC.Base.String ->
                 case w of wild {
                   InflectionData.EXP
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadEvidentiality39
                        w1
                   InflectionData.VIS
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadEvidentiality36
                        w1
                   InflectionData.NVIS
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadEvidentiality33
                        w1
                   InflectionData.AUD
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadEvidentiality30
                        w1
                   InflectionData.INFER
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadEvidentiality27
                        w1
                   InflectionData.REP
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadEvidentiality24
                        w1
                   InflectionData.HSY
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadEvidentiality21
                        w1
                   InflectionData.QUO
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadEvidentiality18
                        w1
                   InflectionData.ASS
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadEvidentiality15
                        w1 }) -}
fbfd74eebda537d81005366da56ab3d1
  $w$cshowsPrec10 ::
    (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
     GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
     GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
     GHC.Show.Show l, GHC.Show.Show m, GHC.Show.Show n, GHC.Show.Show o,
     GHC.Show.Show p, GHC.Show.Show q) =>
    a
    -> b
    -> c
    -> d
    -> e
    -> f
    -> g
    -> h
    -> i
    -> j
    -> k
    -> l
    -> m
    -> n
    -> o
    -> p
    -> q
    -> GHC.Show.ShowS
  {- Arity: 34,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
9621aad11f276ef3a5a55be34fb30507
  $w$cshowsPrec11 ::
    InflectionData.Honorific -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: InflectionData.Honorific
                   w1 :: GHC.Base.String ->
                 case w of wild {
                   InflectionData.FAM
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadHonorific15 w1
                   InflectionData.NEU
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadHonorific12 w1
                   InflectionData.FORM
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadHonorific9
                        w1 }) -}
981c5cbf91fbe9b67ef30c7127d1e33d
  $w$cshowsPrec12 ::
    GHC.Prim.Int#
    -> InflectionData.Manifest [InflectionData.Gender]
    -> InflectionData.Manifest [InflectionData.Animacy]
    -> InflectionData.Manifest [InflectionData.Case]
    -> InflectionData.Manifest [InflectionData.Number]
    -> InflectionData.Manifest [InflectionData.Definiteness]
    -> InflectionData.Manifest [InflectionData.Specificity]
    -> InflectionData.Manifest [InflectionData.Topic]
    -> InflectionData.Manifest [InflectionData.Person]
    -> InflectionData.Manifest [InflectionData.Honorific]
    -> InflectionData.Manifest [InflectionData.Polarity]
    -> InflectionData.Manifest [InflectionData.Tense]
    -> InflectionData.Manifest [InflectionData.Aspect]
    -> InflectionData.Manifest [InflectionData.Mood]
    -> InflectionData.Manifest [InflectionData.Voice]
    -> InflectionData.Manifest [InflectionData.Evidentiality]
    -> InflectionData.Manifest [InflectionData.Transitivity]
    -> InflectionData.Manifest [InflectionData.Volition]
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 19,
     Strictness: <L,U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,U>,
     Inline: [0] -}
669f64eab1a11feac3c6144dd5c31025
  $w$cshowsPrec13 ::
    InflectionData.LexCat -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: InflectionData.LexCat w1 :: GHC.Base.String ->
                 case w of wild {
                   InflectionData.Comp
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadLexCat47 w1
                   InflectionData.Infl
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadLexCat44 w1
                   InflectionData.Verb
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadLexCat41 w1
                   InflectionData.Det
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadLexCat38 w1
                   InflectionData.Noun
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadLexCat35 w1
                   InflectionData.Adpo
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadLexCat32 w1
                   InflectionData.Adj
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadLexCat29 w1
                   InflectionData.Adv
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadLexCat26 w1
                   InflectionData.Obj
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadLexCat23 w1
                   InflectionData.Subj
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadLexCat20 w1
                   InflectionData.Pron
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadLexCat17
                        w1 }) -}
af5ddf409df7e34b7ae5f58c0bd0fff6
  $w$cshowsPrec14 ::
    InflectionData.ManifestType -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: InflectionData.ManifestType
                   w1 :: GHC.Base.String ->
                 case w of wild {
                   InflectionData.Particle
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadManifestType15
                        w1
                   InflectionData.Prefix
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadManifestType12
                        w1
                   InflectionData.Suffix
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadManifestType9
                        w1 }) -}
729607927630d1e92c199129334472f1
  $w$cshowsPrec15 ::
    InflectionData.Voice -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: InflectionData.Voice w1 :: GHC.Base.String ->
                 case w of wild {
                   InflectionData.ACTIVE
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest267 w1
                   InflectionData.MIDDLE
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest264 w1
                   InflectionData.PASSIVE
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadManifest261
                        w1 }) -}
7494798dc1e7178315d789cf566d6c77
  $w$cshowsPrec16 ::
    GHC.Prim.Int#
    -> InflectionData.LexCat
    -> InflectionData.ManifestType
    -> [(PhonemeData.Morpheme,
         (InflectionData.Express InflectionData.Gender,
          InflectionData.Express InflectionData.Animacy,
          InflectionData.Express InflectionData.Case,
          InflectionData.Express InflectionData.Number,
          InflectionData.Express InflectionData.Definiteness,
          InflectionData.Express InflectionData.Specificity,
          InflectionData.Express InflectionData.Topic,
          InflectionData.Express InflectionData.Person,
          InflectionData.Express InflectionData.Honorific,
          InflectionData.Express InflectionData.Polarity,
          InflectionData.Express InflectionData.Tense,
          InflectionData.Express InflectionData.Aspect,
          InflectionData.Express InflectionData.Mood,
          InflectionData.Express InflectionData.Voice,
          InflectionData.Express InflectionData.Evidentiality,
          InflectionData.Express InflectionData.Transitivity,
          InflectionData.Express InflectionData.Volition))]
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 5, Strictness: <L,U><L,1*U><L,1*U><L,1*U><L,U>,
     Inline: [0] -}
4e999fb9fa6728ec3df19bdd28482ccf
  $w$cshowsPrec2 ::
    InflectionData.Mood -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: InflectionData.Mood w1 :: GHC.Base.String ->
                 case w of wild {
                   InflectionData.IND
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest63 w1
                   InflectionData.IRR
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest60 w1
                   InflectionData.DEO
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest57 w1
                   InflectionData.IMP
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest54 w1
                   InflectionData.JUS
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest51 w1
                   InflectionData.OPT
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest48 w1
                   InflectionData.EPIS
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest45 w1
                   InflectionData.SBJV
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest42 w1
                   InflectionData.POT
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest39 w1
                   InflectionData.COND
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadManifest36
                        w1 }) -}
851bcc3c94895d395e7cdf9501dbfb00
  $w$cshowsPrec3 ::
    InflectionData.Aspect -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: InflectionData.Aspect w1 :: GHC.Base.String ->
                 case w of wild {
                   InflectionData.NNPROG
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadAspect31 w1
                   InflectionData.PFV
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadAspect28 w1
                   InflectionData.IPFV
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadAspect25 w1
                   InflectionData.HAB
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadAspect22 w1
                   InflectionData.CONT
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadAspect19 w1
                   InflectionData.NPROG
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadAspect16 w1
                   InflectionData.PROG
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadAspect13
                        w1 }) -}
b52863b70f3cc5626b7d1db2a6c4ef40
  $w$cshowsPrec4 ::
    InflectionData.Tense -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: InflectionData.Tense w1 :: GHC.Base.String ->
                 case w of wild {
                   InflectionData.PST
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest219 w1
                   InflectionData.PRS
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest216 w1
                   InflectionData.FUT
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest213 w1
                   InflectionData.APRS
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest210 w1
                   InflectionData.APST
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest207 w1
                   InflectionData.AFUT
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest204 w1
                   InflectionData.AFUT1
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest201 w1
                   InflectionData.AFUT2
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest198 w1
                   InflectionData.AFUT3
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest195 w1
                   InflectionData.PPRS
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest192 w1
                   InflectionData.PFUT
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest189 w1
                   InflectionData.PPST
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest186 w1
                   InflectionData.PPST1
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest183 w1
                   InflectionData.PPST2
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest180 w1
                   InflectionData.PPST3
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest177 w1
                   InflectionData.PSTPER
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest174 w1
                   InflectionData.PRSPER
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest171 w1
                   InflectionData.FUTPER
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadManifest168
                        w1 }) -}
8962065c67c1705ac692fcc8d9210bcd
  $w$cshowsPrec5 ::
    InflectionData.Person -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: InflectionData.Person w1 :: GHC.Base.String ->
                 case w of wild {
                   InflectionData.FIRST
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest119 w1
                   InflectionData.FSTINCL
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest116 w1
                   InflectionData.FSTEXCL
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest113 w1
                   InflectionData.SECOND
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest110 w1
                   InflectionData.THIRD
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest107 w1
                   InflectionData.THRDPROX
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest104 w1
                   InflectionData.THRDOBV
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadManifest101
                        w1 }) -}
5983d4e902f20ca491bfcf4389614668
  $w$cshowsPrec6 ::
    InflectionData.Number -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: InflectionData.Number w1 :: GHC.Base.String ->
                 case w of wild {
                   InflectionData.SG
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest87 w1
                   InflectionData.DU
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest84 w1
                   InflectionData.TRI
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest81 w1
                   InflectionData.PA
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest78 w1
                   InflectionData.PL
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadManifest75
                        w1 }) -}
f0a3d2a3107908d84564bc0108b3c56f
  $w$cshowsPrec7 ::
    InflectionData.Case -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0] -}
0805e2c872c441491fbbd819376f13b8
  $w$cshowsPrec8 ::
    InflectionData.Animacy -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: InflectionData.Animacy w1 :: GHC.Base.String ->
                 case w of wild {
                   InflectionData.AN
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadAnimacy23 w1
                   InflectionData.HUM
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadAnimacy20 w1
                   InflectionData.NHUM
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadAnimacy17 w1
                   InflectionData.ZO
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadAnimacy14 w1
                   InflectionData.INAN
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadAnimacy11
                        w1 }) -}
a3623d5adfe047fe3ed20dca1c56d9df
  $w$cshowsPrec9 ::
    InflectionData.Gender -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: InflectionData.Gender w1 :: GHC.Base.String ->
                 case w of wild {
                   InflectionData.M
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadGender19 w1
                   InflectionData.F
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadGender16 w1
                   InflectionData.COM
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadGender13 w1
                   InflectionData.N
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadGender10
                        w1 }) -}
669f64eab1a11feac3c6144dd5c31025
  $w$ctoEnum :: GHC.Prim.Int# -> InflectionData.LexCat
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 0) of wild {
                   GHC.Types.False -> InflectionData.$fEnumLexCat1 ww
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ww 10) of wild1 {
                        GHC.Types.False -> InflectionData.$fEnumLexCat1 ww
                        GHC.Types.True
                        -> GHC.Prim.tagToEnum# @ InflectionData.LexCat ww } }) -}
5eb19e13c853cf00df3bb372e12bac72
  $w$s$c== ::
    InflectionData.Express InflectionData.Gender
    -> InflectionData.Express InflectionData.Animacy
    -> InflectionData.Express InflectionData.Case
    -> InflectionData.Express InflectionData.Number
    -> InflectionData.Express InflectionData.Definiteness
    -> InflectionData.Express InflectionData.Specificity
    -> InflectionData.Express InflectionData.Topic
    -> InflectionData.Express InflectionData.Person
    -> InflectionData.Express InflectionData.Honorific
    -> InflectionData.Express InflectionData.Polarity
    -> InflectionData.Express InflectionData.Tense
    -> InflectionData.Express InflectionData.Aspect
    -> InflectionData.Express InflectionData.Mood
    -> InflectionData.Express InflectionData.Voice
    -> InflectionData.Express InflectionData.Evidentiality
    -> InflectionData.Express InflectionData.Transitivity
    -> InflectionData.Express InflectionData.Volition
    -> InflectionData.Express InflectionData.Gender
    -> InflectionData.Express InflectionData.Animacy
    -> InflectionData.Express InflectionData.Case
    -> InflectionData.Express InflectionData.Number
    -> InflectionData.Express InflectionData.Definiteness
    -> InflectionData.Express InflectionData.Specificity
    -> InflectionData.Express InflectionData.Topic
    -> InflectionData.Express InflectionData.Person
    -> InflectionData.Express InflectionData.Honorific
    -> InflectionData.Express InflectionData.Polarity
    -> InflectionData.Express InflectionData.Tense
    -> InflectionData.Express InflectionData.Aspect
    -> InflectionData.Express InflectionData.Mood
    -> InflectionData.Express InflectionData.Voice
    -> InflectionData.Express InflectionData.Evidentiality
    -> InflectionData.Express InflectionData.Transitivity
    -> InflectionData.Express InflectionData.Volition
    -> GHC.Types.Bool
  {- Arity: 34, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0] -}
7e935cc1fa9164da12119fc51ed19090
  $w$s$cshowsPrec ::
    InflectionData.Express InflectionData.Gender
    -> InflectionData.Express InflectionData.Animacy
    -> InflectionData.Express InflectionData.Case
    -> InflectionData.Express InflectionData.Number
    -> InflectionData.Express InflectionData.Definiteness
    -> InflectionData.Express InflectionData.Specificity
    -> InflectionData.Express InflectionData.Topic
    -> InflectionData.Express InflectionData.Person
    -> InflectionData.Express InflectionData.Honorific
    -> InflectionData.Express InflectionData.Polarity
    -> InflectionData.Express InflectionData.Tense
    -> InflectionData.Express InflectionData.Aspect
    -> InflectionData.Express InflectionData.Mood
    -> InflectionData.Express InflectionData.Voice
    -> InflectionData.Express InflectionData.Evidentiality
    -> InflectionData.Express InflectionData.Transitivity
    -> InflectionData.Express InflectionData.Volition
    -> GHC.Show.ShowS
  {- Arity: 17,
     Strictness: <L,U><L,1*U><L,1*U><L,U><L,1*U><L,U><L,U><L,U><L,U><L,U><L,U><L,1*U><L,U><L,U><L,1*U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ ww :: InflectionData.Express InflectionData.Gender
                   ww1 :: InflectionData.Express InflectionData.Animacy
                   ww2 :: InflectionData.Express InflectionData.Case
                   ww3 :: InflectionData.Express InflectionData.Number
                   ww4 :: InflectionData.Express InflectionData.Definiteness
                   ww5 :: InflectionData.Express InflectionData.Specificity
                   ww6 :: InflectionData.Express InflectionData.Topic
                   ww7 :: InflectionData.Express InflectionData.Person
                   ww8 :: InflectionData.Express InflectionData.Honorific
                   ww9 :: InflectionData.Express InflectionData.Polarity
                   ww10 :: InflectionData.Express InflectionData.Tense
                   ww11 :: InflectionData.Express InflectionData.Aspect
                   ww12 :: InflectionData.Express InflectionData.Mood
                   ww13 :: InflectionData.Express InflectionData.Voice
                   ww14 :: InflectionData.Express InflectionData.Evidentiality
                   ww15 :: InflectionData.Express InflectionData.Transitivity
                   ww16 :: InflectionData.Express InflectionData.Volition ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = InflectionData.$fShow(,,,,,,,,,,,,,,,,)_go
                       (GHC.Types.:
                          @ GHC.Show.ShowS
                          (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec12
                             GHC.Show.shows18
                             ww)
                          (GHC.Types.:
                             @ GHC.Show.ShowS
                             (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec
                                @ InflectionData.Animacy
                                InflectionData.$fShowAnimacy
                                GHC.Show.shows18
                                ww1)
                             (GHC.Types.:
                                @ GHC.Show.ShowS
                                (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec
                                   @ InflectionData.Case
                                   InflectionData.$fShowCase
                                   GHC.Show.shows18
                                   ww2)
                                (GHC.Types.:
                                   @ GHC.Show.ShowS
                                   (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec11
                                      GHC.Show.shows18
                                      ww3)
                                   (GHC.Types.:
                                      @ GHC.Show.ShowS
                                      (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec
                                         @ InflectionData.Definiteness
                                         InflectionData.$fShowDefiniteness
                                         GHC.Show.shows18
                                         ww4)
                                      (GHC.Types.:
                                         @ GHC.Show.ShowS
                                         (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec10
                                            GHC.Show.shows18
                                            ww5)
                                         (GHC.Types.:
                                            @ GHC.Show.ShowS
                                            (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec9
                                               GHC.Show.shows18
                                               ww6)
                                            (GHC.Types.:
                                               @ GHC.Show.ShowS
                                               (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec8
                                                  GHC.Show.shows18
                                                  ww7)
                                               (GHC.Types.:
                                                  @ GHC.Show.ShowS
                                                  (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec7
                                                     GHC.Show.shows18
                                                     ww8)
                                                  (GHC.Types.:
                                                     @ GHC.Show.ShowS
                                                     (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec6
                                                        GHC.Show.shows18
                                                        ww9)
                                                     (GHC.Types.:
                                                        @ GHC.Show.ShowS
                                                        (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec5
                                                           GHC.Show.shows18
                                                           ww10)
                                                        (GHC.Types.:
                                                           @ GHC.Show.ShowS
                                                           (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec
                                                              @ InflectionData.Aspect
                                                              InflectionData.$fShowAspect
                                                              GHC.Show.shows18
                                                              ww11)
                                                           (GHC.Types.:
                                                              @ GHC.Show.ShowS
                                                              (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec4
                                                                 GHC.Show.shows18
                                                                 ww12)
                                                              (GHC.Types.:
                                                                 @ GHC.Show.ShowS
                                                                 (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec3
                                                                    GHC.Show.shows18
                                                                    ww13)
                                                                 (GHC.Types.:
                                                                    @ GHC.Show.ShowS
                                                                    (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec
                                                                       @ InflectionData.Evidentiality
                                                                       InflectionData.$fShowEvidentiality
                                                                       GHC.Show.shows18
                                                                       ww14)
                                                                    (GHC.Types.:
                                                                       @ GHC.Show.ShowS
                                                                       (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec2
                                                                          GHC.Show.shows18
                                                                          ww15)
                                                                       (GHC.Types.:
                                                                          @ GHC.Show.ShowS
                                                                          (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec1
                                                                             GHC.Show.shows18
                                                                             ww16)
                                                                          (GHC.Types.[]
                                                                             @ GHC.Show.ShowS))))))))))))))))))
                 } in
                 \ x :: GHC.Base.String ->
                 GHC.Types.:
                   @ GHC.Types.Char
                   InflectionData.$fShow(,,,,,,,,,,,,,,,,)2
                   (f (GHC.Types.:
                         @ GHC.Types.Char
                         InflectionData.$fShow(,,,,,,,,,,,,,,,,)1
                         x))) -}
340b506daec6555591e5534716353ebf
  $wa ::
    GHC.Prim.Int#
    -> forall b.
       (InflectionData.InflectionSystem
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0] -}
0805e2c872c441491fbbd819376f13b8
  data Animacy = AN | HUM | NHUM | ZO | INAN
    Promotable
851bcc3c94895d395e7cdf9501dbfb00
  data Aspect = NNPROG | PFV | IPFV | HAB | CONT | NPROG | PROG
    Promotable
f0a3d2a3107908d84564bc0108b3c56f
  data Case
    = INTR
    | ACC
    | ERG
    | PEG
    | INDIR
    | SEC
    | NOM
    | ABS
    | MTR
    | DIR
    | PRIM
    | ERG2
    | NOM2
    | ABS2
    | ABS3
    | DTR
    | OBJ
    | DRT1
    | TR
    | DRT2
    | OBL1
    | OBL2
    | OBL3
    | OBL4
    | OBL5
    | OBL6
    | ADP
    | PREP
    | POST
    | LAT
    | LOC
    | ABL
    | COMP
    | EQU
    | IDEN
    | ABE
    | DAT
    | INS
    | COMIT
    | INSCOMIT
    | ORN
    | BEN
    | CAUS
    | DISTR
    | GEN
    | POSS
    | PART
    | VOC
    Promotable
250913a6cb1bc19b5a2a47309bfa066c
  data Definiteness = DEF | INDF
    Promotable
cdbf36d6698b96caa0bed6ad294bfb83
  data Evidentiality
    = EXP | VIS | NVIS | AUD | INFER | REP | HSY | QUO | ASS
    Promotable
16ae30a99f963c81137d7828dad80939
  data Express a = NoExpress | Express a
    Promotable
a3623d5adfe047fe3ed20dca1c56d9df
  data Gender = M | F | COM | N
    Promotable
9621aad11f276ef3a5a55be34fb30507
  data Honorific = FAM | NEU | FORM
    Promotable
340b506daec6555591e5534716353ebf
  data InflectionSystem
    = InflectionSystem {genSys :: InflectionData.Manifest
                                    [InflectionData.Gender],
                        aniSys :: InflectionData.Manifest [InflectionData.Animacy],
                        casSys :: InflectionData.Manifest [InflectionData.Case],
                        numSys :: InflectionData.Manifest [InflectionData.Number],
                        defSys :: InflectionData.Manifest [InflectionData.Definiteness],
                        speSys :: InflectionData.Manifest [InflectionData.Specificity],
                        topSys :: InflectionData.Manifest [InflectionData.Topic],
                        perSys :: InflectionData.Manifest [InflectionData.Person],
                        honSys :: InflectionData.Manifest [InflectionData.Honorific],
                        polSys :: InflectionData.Manifest [InflectionData.Polarity],
                        tenSys :: InflectionData.Manifest [InflectionData.Tense],
                        aspSys :: InflectionData.Manifest [InflectionData.Aspect],
                        mooSys :: InflectionData.Manifest [InflectionData.Mood],
                        voiSys :: InflectionData.Manifest [InflectionData.Voice],
                        eviSys :: InflectionData.Manifest [InflectionData.Evidentiality],
                        traSys :: InflectionData.Manifest [InflectionData.Transitivity],
                        volSys :: InflectionData.Manifest [InflectionData.Volition]}
669f64eab1a11feac3c6144dd5c31025
  data LexCat
    = Comp
    | Infl
    | Verb
    | Det
    | Noun
    | Adpo
    | Adj
    | Adv
    | Obj
    | Subj
    | Pron
    Promotable
ceb3098f5042182adffdb975609a3c68
  data Manifest a
    = NoManifest
    | Manifest [(InflectionData.LexCat,
                 InflectionData.ManifestType,
                 GHC.Types.Int)]
               a
2dfbbd1074217167272ae1c4beb86ae1
  data ManifestSystem
    = ManifestSystem {manSysLC :: InflectionData.LexCat,
                      manSysType :: InflectionData.ManifestType,
                      manSysCombos :: [(PhonemeData.Morpheme,
                                        (InflectionData.Express InflectionData.Gender,
                                         InflectionData.Express InflectionData.Animacy,
                                         InflectionData.Express InflectionData.Case,
                                         InflectionData.Express InflectionData.Number,
                                         InflectionData.Express InflectionData.Definiteness,
                                         InflectionData.Express InflectionData.Specificity,
                                         InflectionData.Express InflectionData.Topic,
                                         InflectionData.Express InflectionData.Person,
                                         InflectionData.Express InflectionData.Honorific,
                                         InflectionData.Express InflectionData.Polarity,
                                         InflectionData.Express InflectionData.Tense,
                                         InflectionData.Express InflectionData.Aspect,
                                         InflectionData.Express InflectionData.Mood,
                                         InflectionData.Express InflectionData.Voice,
                                         InflectionData.Express InflectionData.Evidentiality,
                                         InflectionData.Express InflectionData.Transitivity,
                                         InflectionData.Express InflectionData.Volition))]}
af5ddf409df7e34b7ae5f58c0bd0fff6
  data ManifestType = Particle | Prefix | Suffix
    Promotable
4e999fb9fa6728ec3df19bdd28482ccf
  data Mood
    = IND | IRR | DEO | IMP | JUS | OPT | EPIS | SBJV | POT | COND
    Promotable
5983d4e902f20ca491bfcf4389614668
  data Number = SG | DU | TRI | PA | PL
    Promotable
8962065c67c1705ac692fcc8d9210bcd
  data Person
    = FIRST | FSTINCL | FSTEXCL | SECOND | THIRD | THRDPROX | THRDOBV
    Promotable
eac2f82847484b9a87105d0693a7c5e1
  data Polarity = AFF | NEG
    Promotable
697b496d198df68093293e68c7d50d9d
  data Specificity = SPEC | NSPEC
    Promotable
b52863b70f3cc5626b7d1db2a6c4ef40
  data Tense
    = PST
    | PRS
    | FUT
    | APRS
    | APST
    | AFUT
    | AFUT1
    | AFUT2
    | AFUT3
    | PPRS
    | PFUT
    | PPST
    | PPST1
    | PPST2
    | PPST3
    | PSTPER
    | PRSPER
    | FUTPER
    Promotable
39f87e694fb863c1c8c61df134a24729
  data Topic = TOP | NTOP
    Promotable
57945260416d71dc87e31cac669b161f
  data Transitivity = NTRANS | TRANS | MTRANS | DITRANS
    Promotable
729607927630d1e92c199129334472f1
  data Voice = ACTIVE | MIDDLE | PASSIVE
    Promotable
fed3c8348b016bc886742bbd8b88b80d
  data Volition = VOL | NVOL
    Promotable
367804e1af6d701e2096dafd5533118b
  aniSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest [InflectionData.Animacy]
  RecSel InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLLLLLLLLLLLLL),1*U(A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.InflectionSystem ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ->
                 ds2 }) -}
e9e7bd71dd2a785cb31526ef55b822bf
  aspSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest [InflectionData.Aspect]
  RecSel InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLSLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,1*U,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.InflectionSystem ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ->
                 ds12 }) -}
53f570e830294c8ef1f76287bc8fee75
  casSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest [InflectionData.Case]
  RecSel InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLLLLLLLLLLLLL),1*U(A,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.InflectionSystem ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ->
                 ds3 }) -}
39ed9cb2acfd9c2753c4d255e079ca33
  defSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest [InflectionData.Definiteness]
  RecSel InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSLLLLLLLLLLLL),1*U(A,A,A,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.InflectionSystem ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ->
                 ds5 }) -}
16a8ff4f3aeb46f813a259601251af2a
  eviSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest [InflectionData.Evidentiality]
  RecSel InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLSLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.InflectionSystem ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ->
                 ds15 }) -}
23c095a561aedbda7232209e41ccd3b8
  genSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest [InflectionData.Gender]
  RecSel InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLLLLLLLLLLLLL),1*U(1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.InflectionSystem ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ->
                 ds1 }) -}
831fcde3d22057fb7460c8af4d9ab10c
  honSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest [InflectionData.Honorific]
  RecSel InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLSLLLLLLLL),1*U(A,A,A,A,A,A,A,A,1*U,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.InflectionSystem ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ->
                 ds9 }) -}
ea110dd4173031274ecd9b7d451a99ae
  manSysCombos ::
    InflectionData.ManifestSystem
    -> [(PhonemeData.Morpheme,
         (InflectionData.Express InflectionData.Gender,
          InflectionData.Express InflectionData.Animacy,
          InflectionData.Express InflectionData.Case,
          InflectionData.Express InflectionData.Number,
          InflectionData.Express InflectionData.Definiteness,
          InflectionData.Express InflectionData.Specificity,
          InflectionData.Express InflectionData.Topic,
          InflectionData.Express InflectionData.Person,
          InflectionData.Express InflectionData.Honorific,
          InflectionData.Express InflectionData.Polarity,
          InflectionData.Express InflectionData.Tense,
          InflectionData.Express InflectionData.Aspect,
          InflectionData.Express InflectionData.Mood,
          InflectionData.Express InflectionData.Voice,
          InflectionData.Express InflectionData.Evidentiality,
          InflectionData.Express InflectionData.Transitivity,
          InflectionData.Express InflectionData.Volition))]
  RecSel InflectionData.ManifestSystem
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.ManifestSystem ->
                 case ds of wild { InflectionData.ManifestSystem ds1 ds2 ds3 ->
                 ds3 }) -}
ca3cd08930d9dcee68f2687f63cb3020
  manSysLC :: InflectionData.ManifestSystem -> InflectionData.LexCat
  RecSel InflectionData.ManifestSystem
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.ManifestSystem ->
                 case ds of wild { InflectionData.ManifestSystem ds1 ds2 ds3 ->
                 ds1 }) -}
f30a30ea5ece87ccc053a5702cca0707
  manSysType ::
    InflectionData.ManifestSystem -> InflectionData.ManifestType
  RecSel InflectionData.ManifestSystem
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.ManifestSystem ->
                 case ds of wild { InflectionData.ManifestSystem ds1 ds2 ds3 ->
                 ds2 }) -}
7e4993890e9cffc9f67059af28200bf6
  mooSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest [InflectionData.Mood]
  RecSel InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLSLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,1*U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.InflectionSystem ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ->
                 ds13 }) -}
d8ca6925d804e3eb3f0fe14c72e821b0
  numSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest [InflectionData.Number]
  RecSel InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLLLLLLLLLLLLL),1*U(A,A,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.InflectionSystem ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ->
                 ds4 }) -}
6b25af69b2baed03a467998ec509d392
  perSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest [InflectionData.Person]
  RecSel InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLSLLLLLLLLL),1*U(A,A,A,A,A,A,A,1*U,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.InflectionSystem ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ->
                 ds8 }) -}
6b03938dae2419f01636f6b46255ec51
  polSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest [InflectionData.Polarity]
  RecSel InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLSLLLLLLL),1*U(A,A,A,A,A,A,A,A,A,1*U,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.InflectionSystem ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ->
                 ds10 }) -}
8fe6a689cbb82088761f1cb46b491a37
  speSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest [InflectionData.Specificity]
  RecSel InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLSLLLLLLLLLLL),1*U(A,A,A,A,A,1*U,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.InflectionSystem ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ->
                 ds6 }) -}
f10468fa127c3da042273349447f9f1d
  tenSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest [InflectionData.Tense]
  RecSel InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLSLLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,1*U,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.InflectionSystem ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ->
                 ds11 }) -}
d0e505630351aeb35518213bbfa7eb6f
  topSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest [InflectionData.Topic]
  RecSel InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLSLLLLLLLLLL),1*U(A,A,A,A,A,A,1*U,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.InflectionSystem ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ->
                 ds7 }) -}
b87326eed2ea23696a3263a9e6a566d7
  traSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest [InflectionData.Transitivity]
  RecSel InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLLSL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.InflectionSystem ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ->
                 ds16 }) -}
3508299f499dacd346d5476b7095ae2b
  voiSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest [InflectionData.Voice]
  RecSel InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLSLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.InflectionSystem ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ->
                 ds14 }) -}
0c538a57205dea6a225cb2d1e520dfee
  volSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest [InflectionData.Volition]
  RecSel InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLLLS),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.InflectionSystem ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ->
                 ds17 }) -}
instance GHC.Enum.Enum [InflectionData.LexCat]
  = InflectionData.$fEnumLexCat
instance GHC.Classes.Eq [(,,,,,,,,,,,,,,,,)]
  = InflectionData.$fEq(,,,,,,,,,,,,,,,,)
instance GHC.Classes.Eq [InflectionData.Animacy]
  = InflectionData.$fEqAnimacy
instance GHC.Classes.Eq [InflectionData.Aspect]
  = InflectionData.$fEqAspect
instance GHC.Classes.Eq [InflectionData.Case]
  = InflectionData.$fEqCase
instance GHC.Classes.Eq [InflectionData.Definiteness]
  = InflectionData.$fEqDefiniteness
instance GHC.Classes.Eq [InflectionData.Evidentiality]
  = InflectionData.$fEqEvidentiality
instance GHC.Classes.Eq [InflectionData.Express]
  = InflectionData.$fEqExpress
instance GHC.Classes.Eq [InflectionData.Gender]
  = InflectionData.$fEqGender
instance GHC.Classes.Eq [InflectionData.Honorific]
  = InflectionData.$fEqHonorific
instance GHC.Classes.Eq [InflectionData.InflectionSystem]
  = InflectionData.$fEqInflectionSystem
instance GHC.Classes.Eq [InflectionData.LexCat]
  = InflectionData.$fEqLexCat
instance GHC.Classes.Eq [InflectionData.Manifest]
  = InflectionData.$fEqManifest
instance GHC.Classes.Eq [InflectionData.ManifestSystem]
  = InflectionData.$fEqManifestSystem
instance GHC.Classes.Eq [InflectionData.ManifestType]
  = InflectionData.$fEqManifestType
instance GHC.Classes.Eq [InflectionData.Mood]
  = InflectionData.$fEqMood
instance GHC.Classes.Eq [InflectionData.Number]
  = InflectionData.$fEqNumber
instance GHC.Classes.Eq [InflectionData.Person]
  = InflectionData.$fEqPerson
instance GHC.Classes.Eq [InflectionData.Polarity]
  = InflectionData.$fEqPolarity
instance GHC.Classes.Eq [InflectionData.Specificity]
  = InflectionData.$fEqSpecificity
instance GHC.Classes.Eq [InflectionData.Tense]
  = InflectionData.$fEqTense
instance GHC.Classes.Eq [InflectionData.Topic]
  = InflectionData.$fEqTopic
instance GHC.Classes.Eq [InflectionData.Transitivity]
  = InflectionData.$fEqTransitivity
instance GHC.Classes.Eq [InflectionData.Voice]
  = InflectionData.$fEqVoice
instance GHC.Classes.Eq [InflectionData.Volition]
  = InflectionData.$fEqVolition
instance GHC.Read.Read [InflectionData.Animacy]
  = InflectionData.$fReadAnimacy
instance GHC.Read.Read [InflectionData.Aspect]
  = InflectionData.$fReadAspect
instance GHC.Read.Read [InflectionData.Case]
  = InflectionData.$fReadCase
instance GHC.Read.Read [InflectionData.Definiteness]
  = InflectionData.$fReadDefiniteness
instance GHC.Read.Read [InflectionData.Evidentiality]
  = InflectionData.$fReadEvidentiality
instance GHC.Read.Read [InflectionData.Express]
  = InflectionData.$fReadExpress
instance GHC.Read.Read [InflectionData.Gender]
  = InflectionData.$fReadGender
instance GHC.Read.Read [InflectionData.Honorific]
  = InflectionData.$fReadHonorific
instance GHC.Read.Read [InflectionData.InflectionSystem]
  = InflectionData.$fReadInflectionSystem
instance GHC.Read.Read [InflectionData.LexCat]
  = InflectionData.$fReadLexCat
instance GHC.Read.Read [InflectionData.Manifest]
  = InflectionData.$fReadManifest
instance GHC.Read.Read [InflectionData.ManifestType]
  = InflectionData.$fReadManifestType
instance GHC.Read.Read [InflectionData.Mood]
  = InflectionData.$fReadMood
instance GHC.Read.Read [InflectionData.Number]
  = InflectionData.$fReadNumber
instance GHC.Read.Read [InflectionData.Person]
  = InflectionData.$fReadPerson
instance GHC.Read.Read [InflectionData.Polarity]
  = InflectionData.$fReadPolarity
instance GHC.Read.Read [InflectionData.Specificity]
  = InflectionData.$fReadSpecificity
instance GHC.Read.Read [InflectionData.Tense]
  = InflectionData.$fReadTense
instance GHC.Read.Read [InflectionData.Topic]
  = InflectionData.$fReadTopic
instance GHC.Read.Read [InflectionData.Transitivity]
  = InflectionData.$fReadTransitivity
instance GHC.Read.Read [InflectionData.Voice]
  = InflectionData.$fReadVoice
instance GHC.Read.Read [InflectionData.Volition]
  = InflectionData.$fReadVolition
instance GHC.Show.Show [(,,,,,,,,,,,,,,,,)]
  = InflectionData.$fShow(,,,,,,,,,,,,,,,,)
instance GHC.Show.Show [InflectionData.Animacy]
  = InflectionData.$fShowAnimacy
instance GHC.Show.Show [InflectionData.Aspect]
  = InflectionData.$fShowAspect
instance GHC.Show.Show [InflectionData.Case]
  = InflectionData.$fShowCase
instance GHC.Show.Show [InflectionData.Definiteness]
  = InflectionData.$fShowDefiniteness
instance GHC.Show.Show [InflectionData.Evidentiality]
  = InflectionData.$fShowEvidentiality
instance GHC.Show.Show [InflectionData.Express]
  = InflectionData.$fShowExpress
instance GHC.Show.Show [InflectionData.Gender]
  = InflectionData.$fShowGender
instance GHC.Show.Show [InflectionData.Honorific]
  = InflectionData.$fShowHonorific
instance GHC.Show.Show [InflectionData.InflectionSystem]
  = InflectionData.$fShowInflectionSystem
instance GHC.Show.Show [InflectionData.LexCat]
  = InflectionData.$fShowLexCat
instance GHC.Show.Show [InflectionData.Manifest]
  = InflectionData.$fShowManifest
instance GHC.Show.Show [InflectionData.ManifestSystem]
  = InflectionData.$fShowManifestSystem
instance GHC.Show.Show [InflectionData.ManifestType]
  = InflectionData.$fShowManifestType
instance GHC.Show.Show [InflectionData.Mood]
  = InflectionData.$fShowMood
instance GHC.Show.Show [InflectionData.Number]
  = InflectionData.$fShowNumber
instance GHC.Show.Show [InflectionData.Person]
  = InflectionData.$fShowPerson
instance GHC.Show.Show [InflectionData.Polarity]
  = InflectionData.$fShowPolarity
instance GHC.Show.Show [InflectionData.Specificity]
  = InflectionData.$fShowSpecificity
instance GHC.Show.Show [InflectionData.Tense]
  = InflectionData.$fShowTense
instance GHC.Show.Show [InflectionData.Topic]
  = InflectionData.$fShowTopic
instance GHC.Show.Show [InflectionData.Transitivity]
  = InflectionData.$fShowTransitivity
instance GHC.Show.Show [InflectionData.Voice]
  = InflectionData.$fShowVoice
instance GHC.Show.Show [InflectionData.Volition]
  = InflectionData.$fShowVolition
"SPEC $c/= @ (Express Gender) @ (Express Animacy) @ (Express
                                                      Case) @ (Express Number) @ (Express
                                                                                    Definiteness) @ (Express
                                                                                                       Specificity) @ (Express
                                                                                                                         Topic) @ (Express
                                                                                                                                     Person) @ (Express
                                                                                                                                                  Honorific) @ (Express
                                                                                                                                                                  Polarity) @ (Express
                                                                                                                                                                                 Tense) @ (Express
                                                                                                                                                                                             Aspect) @ (Express
                                                                                                                                                                                                          Mood) @ (Express
                                                                                                                                                                                                                     Voice) @ (Express
                                                                                                                                                                                                                                 Evidentiality) @ (Express
                                                                                                                                                                                                                                                     Transitivity) @ (Express
                                                                                                                                                                                                                                                                        Volition)" [ALWAYS] forall $dEq :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Gender)
dEq1 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Animacy)
dEq2 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Case)
dEq3 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Number)
dEq4 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Definiteness)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      $dEq5 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Specificity)
dEq6 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Topic)
dEq7 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Person)
dEq8 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Honorific)
dEq9 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Polarity)
dEq10 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Tense)
dEq11 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Aspect)
dEq12 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Mood)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      $dEq13 :: GHC.Classes.Eq
nflectionData.Express
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     InflectionData.Voice)
dEq14 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Evidentiality)
dEq15 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Transitivity)
dEq16 :: GHC.Classes.Eq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  (InflectionData.Express
nflectionData.Volition)
  InflectionData.$fEq(,,,,,,,,,,,,,,,,)_$c/= @ (InflectionData.Express
                                                  InflectionData.Gender)
                                             @ (InflectionData.Express InflectionData.Animacy)
                                             @ (InflectionData.Express InflectionData.Case)
                                             @ (InflectionData.Express InflectionData.Number)
                                             @ (InflectionData.Express InflectionData.Definiteness)
                                             @ (InflectionData.Express InflectionData.Specificity)
                                             @ (InflectionData.Express InflectionData.Topic)
                                             @ (InflectionData.Express InflectionData.Person)
                                             @ (InflectionData.Express InflectionData.Honorific)
                                             @ (InflectionData.Express InflectionData.Polarity)
                                             @ (InflectionData.Express InflectionData.Tense)
                                             @ (InflectionData.Express InflectionData.Aspect)
                                             @ (InflectionData.Express InflectionData.Mood)
                                             @ (InflectionData.Express InflectionData.Voice)
                                             @ (InflectionData.Express InflectionData.Evidentiality)
                                             @ (InflectionData.Express InflectionData.Transitivity)
                                             @ (InflectionData.Express InflectionData.Volition)
                                             $dEq
                                             $dEq1
                                             $dEq2
                                             $dEq3
                                             $dEq4
                                             $dEq5
                                             $dEq6
                                             $dEq7
                                             $dEq8
                                             $dEq9
                                             $dEq10
                                             $dEq11
                                             $dEq12
                                             $dEq13
                                             $dEq14
                                             $dEq15
                                             $dEq16
  = InflectionData.$fEq(,,,,,,,,,,,,,,,,)_$s$c/=
"SPEC $c== @ (Express Gender) @ (Express Animacy) @ (Express
                                                      Case) @ (Express Number) @ (Express
                                                                                    Definiteness) @ (Express
                                                                                                       Specificity) @ (Express
                                                                                                                         Topic) @ (Express
                                                                                                                                     Person) @ (Express
                                                                                                                                                  Honorific) @ (Express
                                                                                                                                                                  Polarity) @ (Express
                                                                                                                                                                                 Tense) @ (Express
                                                                                                                                                                                             Aspect) @ (Express
                                                                                                                                                                                                          Mood) @ (Express
                                                                                                                                                                                                                     Voice) @ (Express
                                                                                                                                                                                                                                 Evidentiality) @ (Express
                                                                                                                                                                                                                                                     Transitivity) @ (Express
                                                                                                                                                                                                                                                                        Volition)" [ALWAYS] forall $dEq :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Gender)
dEq1 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Animacy)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      $dEq2 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Case)
dEq3 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Number)
dEq4 :: GHC.Classes.Eq
nflectionData.Express
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    InflectionData.Definiteness)
dEq5 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Specificity)
dEq6 :: GHC.Classes.Eq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 (InflectionData.Express
nflectionData.Topic)
dEq7 :: GHC.Classes.Eq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 (InflectionData.Express
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    InflectionData.Person)
dEq8 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Honorific)
dEq9 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Polarity)
dEq10 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Tense)
dEq11 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Aspect)
dEq12 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Mood)
dEq13 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Voice)
dEq14 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Evidentiality)
dEq15 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Transitivity)
dEq16 :: GHC.Classes.Eq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  (InflectionData.Express
nflectionData.Volition)
  InflectionData.$fEq(,,,,,,,,,,,,,,,,)_$c== @ (InflectionData.Express
                                                  InflectionData.Gender)
                                             @ (InflectionData.Express InflectionData.Animacy)
                                             @ (InflectionData.Express InflectionData.Case)
                                             @ (InflectionData.Express InflectionData.Number)
                                             @ (InflectionData.Express InflectionData.Definiteness)
                                             @ (InflectionData.Express InflectionData.Specificity)
                                             @ (InflectionData.Express InflectionData.Topic)
                                             @ (InflectionData.Express InflectionData.Person)
                                             @ (InflectionData.Express InflectionData.Honorific)
                                             @ (InflectionData.Express InflectionData.Polarity)
                                             @ (InflectionData.Express InflectionData.Tense)
                                             @ (InflectionData.Express InflectionData.Aspect)
                                             @ (InflectionData.Express InflectionData.Mood)
                                             @ (InflectionData.Express InflectionData.Voice)
                                             @ (InflectionData.Express InflectionData.Evidentiality)
                                             @ (InflectionData.Express InflectionData.Transitivity)
                                             @ (InflectionData.Express InflectionData.Volition)
                                             $dEq
                                             $dEq1
                                             $dEq2
                                             $dEq3
                                             $dEq4
                                             $dEq5
                                             $dEq6
                                             $dEq7
                                             $dEq8
                                             $dEq9
                                             $dEq10
                                             $dEq11
                                             $dEq12
                                             $dEq13
                                             $dEq14
                                             $dEq15
                                             $dEq16
  = InflectionData.$fEq(,,,,,,,,,,,,,,,,)_$s$c==
"SPEC $c== @ Volition" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                 InflectionData.Volition
  InflectionData.$fEqExpress_$c==11 @ InflectionData.Volition $dEq
  = InflectionData.$fEqExpress_$s$c==10
"SPEC $c== @ [Volition]" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                   [InflectionData.Volition]
  InflectionData.$fEqManifest_$c== @ [InflectionData.Volition] $dEq
  = InflectionData.$fEqManifest_$s$c==16
"SPEC $cshowsPrec @ Gender" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                        InflectionData.Gender
  InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec @ InflectionData.Gender
                                                      $dShow
  = InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec12
"SPEC $cshowsPrec @ Honorific" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                           InflectionData.Honorific
  InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec @ InflectionData.Honorific
                                                      $dShow
  = InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec7
"SPEC $cshowsPrec @ Mood" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                      InflectionData.Mood
  InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec @ InflectionData.Mood
                                                      $dShow
  = InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec4
"SPEC $cshowsPrec @ Number" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                        InflectionData.Number
  InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec @ InflectionData.Number
                                                      $dShow
  = InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec11
"SPEC $cshowsPrec @ Person" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                        InflectionData.Person
  InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec @ InflectionData.Person
                                                      $dShow
  = InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec8
"SPEC $cshowsPrec @ Polarity" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                          InflectionData.Polarity
  InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec @ InflectionData.Polarity
                                                      $dShow
  = InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec6
"SPEC $cshowsPrec @ Specificity" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                             InflectionData.Specificity
  InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec @ InflectionData.Specificity
                                                      $dShow
  = InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec10
"SPEC $cshowsPrec @ Tense" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                       InflectionData.Tense
  InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec @ InflectionData.Tense
                                                      $dShow
  = InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec5
"SPEC $cshowsPrec @ Topic" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                       InflectionData.Topic
  InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec @ InflectionData.Topic
                                                      $dShow
  = InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec9
"SPEC $cshowsPrec @ Transitivity" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                              InflectionData.Transitivity
  InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec @ InflectionData.Transitivity
                                                      $dShow
  = InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec2
"SPEC $cshowsPrec @ Voice" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                       InflectionData.Voice
  InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec @ InflectionData.Voice
                                                      $dShow
  = InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec3
"SPEC $cshowsPrec @ Volition" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                          InflectionData.Volition
  InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec @ InflectionData.Volition
                                                      $dShow
  = InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$s$cshowsPrec1
"SPEC $cshowsPrec @ [Animacy]" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                           [InflectionData.Animacy]
  InflectionData.$fShowManifest_$cshowsPrec @ [InflectionData.Animacy]
                                            $dShow
  = InflectionData.$fShowManifest_$s$cshowsPrec
"SPEC $cshowsPrec @ [Aspect]" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                          [InflectionData.Aspect]
  InflectionData.$fShowManifest_$cshowsPrec @ [InflectionData.Aspect]
                                            $dShow
  = InflectionData.$fShowManifest_$s$cshowsPrec1
"SPEC $cshowsPrec @ [Case]" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                        [InflectionData.Case]
  InflectionData.$fShowManifest_$cshowsPrec @ [InflectionData.Case]
                                            $dShow
  = InflectionData.$fShowManifest_$s$cshowsPrec2
"SPEC $cshowsPrec @ [Definiteness]" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                [InflectionData.Definiteness]
  InflectionData.$fShowManifest_$cshowsPrec @ [InflectionData.Definiteness]
                                            $dShow
  = InflectionData.$fShowManifest_$s$cshowsPrec3
"SPEC $cshowsPrec @ [Evidentiality]" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                 [InflectionData.Evidentiality]
  InflectionData.$fShowManifest_$cshowsPrec @ [InflectionData.Evidentiality]
                                            $dShow
  = InflectionData.$fShowManifest_$s$cshowsPrec4
"SPEC $cshowsPrec @ [Gender]" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                          [InflectionData.Gender]
  InflectionData.$fShowManifest_$cshowsPrec @ [InflectionData.Gender]
                                            $dShow
  = InflectionData.$fShowManifest_$s$cshowsPrec5
"SPEC $cshowsPrec @ [Honorific]" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                             [InflectionData.Honorific]
  InflectionData.$fShowManifest_$cshowsPrec @ [InflectionData.Honorific]
                                            $dShow
  = InflectionData.$fShowManifest_$s$cshowsPrec6
"SPEC $cshowsPrec @ [Mood]" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                        [InflectionData.Mood]
  InflectionData.$fShowManifest_$cshowsPrec @ [InflectionData.Mood]
                                            $dShow
  = InflectionData.$fShowManifest_$s$cshowsPrec7
"SPEC $cshowsPrec @ [Number]" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                          [InflectionData.Number]
  InflectionData.$fShowManifest_$cshowsPrec @ [InflectionData.Number]
                                            $dShow
  = InflectionData.$fShowManifest_$s$cshowsPrec8
"SPEC $cshowsPrec @ [Person]" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                          [InflectionData.Person]
  InflectionData.$fShowManifest_$cshowsPrec @ [InflectionData.Person]
                                            $dShow
  = InflectionData.$fShowManifest_$s$cshowsPrec9
"SPEC $cshowsPrec @ [Polarity]" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                            [InflectionData.Polarity]
  InflectionData.$fShowManifest_$cshowsPrec @ [InflectionData.Polarity]
                                            $dShow
  = InflectionData.$fShowManifest_$s$cshowsPrec10
"SPEC $cshowsPrec @ [Specificity]" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                               [InflectionData.Specificity]
  InflectionData.$fShowManifest_$cshowsPrec @ [InflectionData.Specificity]
                                            $dShow
  = InflectionData.$fShowManifest_$s$cshowsPrec11
"SPEC $cshowsPrec @ [Tense]" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                         [InflectionData.Tense]
  InflectionData.$fShowManifest_$cshowsPrec @ [InflectionData.Tense]
                                            $dShow
  = InflectionData.$fShowManifest_$s$cshowsPrec12
"SPEC $cshowsPrec @ [Topic]" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                         [InflectionData.Topic]
  InflectionData.$fShowManifest_$cshowsPrec @ [InflectionData.Topic]
                                            $dShow
  = InflectionData.$fShowManifest_$s$cshowsPrec13
"SPEC $cshowsPrec @ [Transitivity]" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                [InflectionData.Transitivity]
  InflectionData.$fShowManifest_$cshowsPrec @ [InflectionData.Transitivity]
                                            $dShow
  = InflectionData.$fShowManifest_$s$cshowsPrec14
"SPEC $cshowsPrec @ [Voice]" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                         [InflectionData.Voice]
  InflectionData.$fShowManifest_$cshowsPrec @ [InflectionData.Voice]
                                            $dShow
  = InflectionData.$fShowManifest_$s$cshowsPrec15
"SPEC $cshowsPrec @ [Volition]" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                            [InflectionData.Volition]
  InflectionData.$fShowManifest_$cshowsPrec @ [InflectionData.Volition]
                                            $dShow
  = InflectionData.$fShowManifest_$s$cshowsPrec16
"SPEC $fEq(,,,,,,,,,,,,,,,,) @ (Express Gender) @ (Express
                                                    Animacy) @ (Express Case) @ (Express
                                                                                   Number) @ (Express
                                                                                                Definiteness) @ (Express
                                                                                                                   Specificity) @ (Express
                                                                                                                                     Topic) @ (Express
                                                                                                                                                 Person) @ (Express
                                                                                                                                                              Honorific) @ (Express
                                                                                                                                                                              Polarity) @ (Express
                                                                                                                                                                                             Tense) @ (Express
                                                                                                                                                                                                         Aspect) @ (Express
                                                                                                                                                                                                                      Mood) @ (Express
                                                                                                                                                                                                                                 Voice) @ (Express
                                                                                                                                                                                                                                             Evidentiality) @ (Express
                                                                                                                                                                                                                                                                 Transitivity) @ (Express
                                                                                                                                                                                                                                                                                    Volition)" [ALWAYS] forall $dEq :: GHC.Classes.Eq
nflectionData.Express
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  InflectionData.Gender)
dEq1 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Animacy)
dEq2 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Case)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     $dEq3 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Number)
dEq4 :: GHC.Classes.Eq
nflectionData.Express
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   InflectionData.Definiteness)
dEq5 :: GHC.Classes.Eq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                (InflectionData.Express
nflectionData.Specificity)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     $dEq6 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Topic)
dEq7 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Person)
dEq8 :: GHC.Classes.Eq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                (InflectionData.Express
nflectionData.Honorific)
dEq9 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Polarity)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     $dEq10 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Tense)
dEq11 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Aspect)
dEq12 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Mood)
dEq13 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Voice)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     $dEq14 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Evidentiality)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     $dEq15 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Transitivity)
dEq16 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Volition)
  InflectionData.$fEq(,,,,,,,,,,,,,,,,) @ (InflectionData.Express
                                             InflectionData.Gender)
                                        @ (InflectionData.Express InflectionData.Animacy)
                                        @ (InflectionData.Express InflectionData.Case)
                                        @ (InflectionData.Express InflectionData.Number)
                                        @ (InflectionData.Express InflectionData.Definiteness)
                                        @ (InflectionData.Express InflectionData.Specificity)
                                        @ (InflectionData.Express InflectionData.Topic)
                                        @ (InflectionData.Express InflectionData.Person)
                                        @ (InflectionData.Express InflectionData.Honorific)
                                        @ (InflectionData.Express InflectionData.Polarity)
                                        @ (InflectionData.Express InflectionData.Tense)
                                        @ (InflectionData.Express InflectionData.Aspect)
                                        @ (InflectionData.Express InflectionData.Mood)
                                        @ (InflectionData.Express InflectionData.Voice)
                                        @ (InflectionData.Express InflectionData.Evidentiality)
                                        @ (InflectionData.Express InflectionData.Transitivity)
                                        @ (InflectionData.Express InflectionData.Volition)
                                        $dEq
                                        $dEq1
                                        $dEq2
                                        $dEq3
                                        $dEq4
                                        $dEq5
                                        $dEq6
                                        $dEq7
                                        $dEq8
                                        $dEq9
                                        $dEq10
                                        $dEq11
                                        $dEq12
                                        $dEq13
                                        $dEq14
                                        $dEq15
                                        $dEq16
  = InflectionData.$fEq(,,,,,,,,,,,,,,,,)_$s$fEq(,,,,,,,,,,,,,,,,)
"SPEC/InflectionData $dmreadsPrec @ Animacy" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                         InflectionData.Animacy
  GHC.Read.$dmreadsPrec @ InflectionData.Animacy $dRead
  = InflectionData.$fReadAnimacy_$s$dmreadsPrec
"SPEC/InflectionData $dmreadsPrec @ Aspect" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                        InflectionData.Aspect
  GHC.Read.$dmreadsPrec @ InflectionData.Aspect $dRead
  = InflectionData.$fReadAspect_$s$dmreadsPrec
"SPEC/InflectionData $dmreadsPrec @ Case" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                      InflectionData.Case
  GHC.Read.$dmreadsPrec @ InflectionData.Case $dRead
  = InflectionData.$fReadCase_$s$dmreadsPrec
"SPEC/InflectionData $dmreadsPrec @ Definiteness" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                              InflectionData.Definiteness
  GHC.Read.$dmreadsPrec @ InflectionData.Definiteness $dRead
  = InflectionData.$fReadDefiniteness_$s$dmreadsPrec
"SPEC/InflectionData $dmreadsPrec @ Evidentiality" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                               InflectionData.Evidentiality
  GHC.Read.$dmreadsPrec @ InflectionData.Evidentiality $dRead
  = InflectionData.$fReadEvidentiality_$s$dmreadsPrec
"SPEC/InflectionData $dmreadsPrec @ Gender" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                        InflectionData.Gender
  GHC.Read.$dmreadsPrec @ InflectionData.Gender $dRead
  = InflectionData.$fReadGender_$s$dmreadsPrec
"SPEC/InflectionData $dmreadsPrec @ Honorific" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                           InflectionData.Honorific
  GHC.Read.$dmreadsPrec @ InflectionData.Honorific $dRead
  = InflectionData.$fReadHonorific_$s$dmreadsPrec
"SPEC/InflectionData $dmreadsPrec @ LexCat" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                        InflectionData.LexCat
  GHC.Read.$dmreadsPrec @ InflectionData.LexCat $dRead
  = InflectionData.$fReadLexCat_$s$dmreadsPrec
"SPEC/InflectionData $dmreadsPrec @ ManifestType" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                              InflectionData.ManifestType
  GHC.Read.$dmreadsPrec @ InflectionData.ManifestType $dRead
  = InflectionData.$fReadManifestType_$s$dmreadsPrec
"SPEC/InflectionData $dmreadsPrec @ Mood" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                      InflectionData.Mood
  GHC.Read.$dmreadsPrec @ InflectionData.Mood $dRead
  = InflectionData.$fReadMood_$s$dmreadsPrec
"SPEC/InflectionData $dmreadsPrec @ Number" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                        InflectionData.Number
  GHC.Read.$dmreadsPrec @ InflectionData.Number $dRead
  = InflectionData.$fReadNumber_$s$dmreadsPrec
"SPEC/InflectionData $dmreadsPrec @ Person" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                        InflectionData.Person
  GHC.Read.$dmreadsPrec @ InflectionData.Person $dRead
  = InflectionData.$fReadPerson_$s$dmreadsPrec
"SPEC/InflectionData $dmreadsPrec @ Polarity" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                          InflectionData.Polarity
  GHC.Read.$dmreadsPrec @ InflectionData.Polarity $dRead
  = InflectionData.$fReadPolarity_$s$dmreadsPrec
"SPEC/InflectionData $dmreadsPrec @ Specificity" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                             InflectionData.Specificity
  GHC.Read.$dmreadsPrec @ InflectionData.Specificity $dRead
  = InflectionData.$fReadSpecificity_$s$dmreadsPrec
"SPEC/InflectionData $dmreadsPrec @ Tense" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                       InflectionData.Tense
  GHC.Read.$dmreadsPrec @ InflectionData.Tense $dRead
  = InflectionData.$fReadTense_$s$dmreadsPrec
"SPEC/InflectionData $dmreadsPrec @ Topic" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                       InflectionData.Topic
  GHC.Read.$dmreadsPrec @ InflectionData.Topic $dRead
  = InflectionData.$fReadTopic_$s$dmreadsPrec
"SPEC/InflectionData $dmreadsPrec @ Transitivity" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                              InflectionData.Transitivity
  GHC.Read.$dmreadsPrec @ InflectionData.Transitivity $dRead
  = InflectionData.$fReadTransitivity_$s$dmreadsPrec
"SPEC/InflectionData $dmreadsPrec @ Voice" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                       InflectionData.Voice
  GHC.Read.$dmreadsPrec @ InflectionData.Voice $dRead
  = InflectionData.$fReadVoice_$s$dmreadsPrec
"SPEC/InflectionData $dmreadsPrec @ Volition" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                          InflectionData.Volition
  GHC.Read.$dmreadsPrec @ InflectionData.Volition $dRead
  = InflectionData.$fReadVolition_$s$dmreadsPrec
"SPEC/InflectionData $fEq(,) @ Morpheme @ (Express Gender,
                                          Express Animacy,
                                          Express Case,
                                          Express Number,
                                          Express Definiteness,
                                          Express Specificity,
                                          Express Topic,
                                          Express Person,
                                          Express Honorific,
                                          Express Polarity,
                                          Express Tense,
                                          Express Aspect,
                                          Express Mood,
                                          Express Voice,
                                          Express Evidentiality,
                                          Express Transitivity,
                                          Express Volition)" [ALWAYS] forall $dEq :: GHC.Classes.Eq
honemeData.Morpheme
dEq1 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Gender,
nflectionData.Express
nflectionData.Animacy,
nflectionData.Express
nflectionData.Case,
nflectionData.Express
nflectionData.Number,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 InflectionData.Express
nflectionData.Definiteness,
nflectionData.Express
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   InflectionData.Specificity,
nflectionData.Express
nflectionData.Topic,
nflectionData.Express
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   InflectionData.Person,
nflectionData.Express
nflectionData.Honorific,
nflectionData.Express
nflectionData.Polarity,
nflectionData.Express
nflectionData.Tense,
nflectionData.Express
nflectionData.Aspect,
nflectionData.Express
nflectionData.Mood,
nflectionData.Express
nflectionData.Voice,
nflectionData.Express
nflectionData.Evidentiality,
nflectionData.Express
nflectionData.Transitivity,
nflectionData.Express
nflectionData.Volition)
  GHC.Classes.$fEq(,) @ PhonemeData.Morpheme
                      @ (InflectionData.Express InflectionData.Gender,
                         InflectionData.Express InflectionData.Animacy,
                         InflectionData.Express InflectionData.Case,
                         InflectionData.Express InflectionData.Number,
                         InflectionData.Express InflectionData.Definiteness,
                         InflectionData.Express InflectionData.Specificity,
                         InflectionData.Express InflectionData.Topic,
                         InflectionData.Express InflectionData.Person,
                         InflectionData.Express InflectionData.Honorific,
                         InflectionData.Express InflectionData.Polarity,
                         InflectionData.Express InflectionData.Tense,
                         InflectionData.Express InflectionData.Aspect,
                         InflectionData.Express InflectionData.Mood,
                         InflectionData.Express InflectionData.Voice,
                         InflectionData.Express InflectionData.Evidentiality,
                         InflectionData.Express InflectionData.Transitivity,
                         InflectionData.Express InflectionData.Volition)
                      $dEq
                      $dEq1
  = InflectionData.$fEqManifestSystem_$s$fEq(,)
"SPEC/InflectionData $fEq(,,) @ LexCat @ ManifestType @ Int" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                                       InflectionData.LexCat
                                                                             $dEq1 :: GHC.Classes.Eq
                                                                                        InflectionData.ManifestType
                                                                             $dEq2 :: GHC.Classes.Eq
                                                                                        GHC.Types.Int
  GHC.Classes.$fEq(,,) @ InflectionData.LexCat
                       @ InflectionData.ManifestType
                       @ GHC.Types.Int
                       $dEq
                       $dEq1
                       $dEq2
  = InflectionData.$fEqManifest_$s$fEq(,,)
"SPEC/InflectionData $fEq(,,)_$c/= @ LexCat @ ManifestType @ Int" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                                            InflectionData.LexCat
                                                                                  $dEq1 :: GHC.Classes.Eq
                                                                                             InflectionData.ManifestType
                                                                                  $dEq2 :: GHC.Classes.Eq
                                                                                             GHC.Types.Int
  GHC.Classes.$fEq(,,)_$c/= @ InflectionData.LexCat
                            @ InflectionData.ManifestType
                            @ GHC.Types.Int
                            $dEq
                            $dEq1
                            $dEq2
  = InflectionData.$fEqManifest_$s$fEq(,,)_$c/=
"SPEC/InflectionData readListDefault @ InflectionSystem" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                                     InflectionData.InflectionSystem
  GHC.Read.readListDefault @ InflectionData.InflectionSystem $dRead
  = InflectionData.$fReadInflectionSystem_$sreadListDefault
"SPEC/InflectionData readListDefault @ LexCat" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                           InflectionData.LexCat
  GHC.Read.readListDefault @ InflectionData.LexCat $dRead
  = InflectionData.$fReadLexCat_$sreadListDefault
"SPEC/InflectionData readListDefault @ ManifestType" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                                 InflectionData.ManifestType
  GHC.Read.readListDefault @ InflectionData.ManifestType $dRead
  = InflectionData.$fReadManifestType_$sreadListDefault
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

