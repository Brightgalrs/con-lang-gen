
==================== FINAL INTERFACE ====================
2016-10-27 06:12:56.822734 UTC

interface conla_1eA9qWUPH9nBowcXqqaV8r:InflectionData [orphan module] 7103
  interface hash: ca014133b9fb907f2d4af4ab6e9f3f66
  ABI hash: dfc2b52a55c6102297919706a64a0fc4
  export-list hash: 84295a2aa554fe18c3d6540e0e817aca
  orphan hash: b753f4681341e93df05924c5725eba3d
  flag hash: f6794f28a1d9a693363b149a5d158050
  sig of: Nothing
  used TH splices: False
  where
exports:
  InflectionData.Agreement{InflectionData.AdjNoun InflectionData.AdvAdj InflectionData.AdvVerb InflectionData.ObjVerb InflectionData.PrepNoun InflectionData.SubVerb InflectionData.VerbPrep}
  InflectionData.AgreementSystem{InflectionData.AgreementSystem}
  InflectionData.Animacy{InflectionData.AN InflectionData.HUM InflectionData.INAN InflectionData.NHUM InflectionData.ZO}
  InflectionData.Aspect{InflectionData.IPFV InflectionData.PFV}
  InflectionData.Case{InflectionData.ABS InflectionData.ABS2 InflectionData.ABS3 InflectionData.ACC InflectionData.ADP InflectionData.DIR InflectionData.DRT1 InflectionData.DRT2 InflectionData.DTR InflectionData.ERG InflectionData.ERG2 InflectionData.INDIR InflectionData.INTR InflectionData.MTR InflectionData.NOM InflectionData.NOM2 InflectionData.OBJ InflectionData.OBL1 InflectionData.OBL2 InflectionData.OBL3 InflectionData.OBL4 InflectionData.OBL5 InflectionData.OBL6 InflectionData.PEG InflectionData.POST InflectionData.PREP InflectionData.PRIM InflectionData.SEC InflectionData.TR}
  InflectionData.Clusivity{InflectionData.EXCL InflectionData.INCL}
  InflectionData.Definiteness{InflectionData.DEF InflectionData.INDF}
  InflectionData.Evidentiality{InflectionData.ASS InflectionData.AUD InflectionData.EXP InflectionData.HSY InflectionData.INFER InflectionData.NVIS InflectionData.QUO InflectionData.REP InflectionData.VIS}
  InflectionData.Gender{InflectionData.COM InflectionData.F InflectionData.M InflectionData.N}
  InflectionData.Honorific{InflectionData.FAM InflectionData.FORM}
  InflectionData.InflectionSystem{InflectionData.InflectionSystem InflectionData.aniSys InflectionData.aspSys InflectionData.casSys InflectionData.cluSys InflectionData.defSys InflectionData.eviSys InflectionData.genSys InflectionData.honSys InflectionData.mooSys InflectionData.numSys InflectionData.perSys InflectionData.polSys InflectionData.speSys InflectionData.tenSys InflectionData.topSys InflectionData.traSys InflectionData.voiSys InflectionData.volSys}
  InflectionData.Manifest{InflectionData.Manifest InflectionData.NoManifest}
  InflectionData.ManifestSystem{InflectionData.PostParticleSystem InflectionData.PreParticleSystem InflectionData.PrefixSystem InflectionData.SuffixSystem}
  InflectionData.ManifestType{InflectionData.PostParticle InflectionData.PreParticle InflectionData.Prefix InflectionData.Suffix}
  InflectionData.Mood{InflectionData.COND InflectionData.DEO InflectionData.EPIS InflectionData.IMP InflectionData.IND InflectionData.IRR InflectionData.JUS InflectionData.OPT InflectionData.POT InflectionData.SBJV}
  InflectionData.Number{InflectionData.DU InflectionData.PA InflectionData.PL InflectionData.SG InflectionData.TRI}
  InflectionData.Person{InflectionData.FIRST InflectionData.SECOND InflectionData.THIRD}
  InflectionData.Polarity{InflectionData.AFF InflectionData.NEG}
  InflectionData.Specificity{InflectionData.NSPEC InflectionData.SPEC}
  InflectionData.Tense{InflectionData.FUT InflectionData.IMMF InflectionData.NFUT InflectionData.NPST InflectionData.PRS InflectionData.PST InflectionData.REC InflectionData.REM InflectionData.REMF}
  InflectionData.Topic{InflectionData.NTOP InflectionData.TOP}
  InflectionData.Transitivity{InflectionData.DITRANS InflectionData.NTRANS InflectionData.TRANS}
  InflectionData.Voice{InflectionData.ACTIVE InflectionData.MIDDLE InflectionData.PASSIVE}
  InflectionData.Volition{InflectionData.NVOL InflectionData.VOL}
module dependencies: OtherData PhonemeData
package dependencies: base-4.8.2.0* ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Monoid
                         base-4.8.2.0:Data.Type.Equality base-4.8.2.0:GHC.Generics
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.Read b423b4506a014855edbd329b567629f3
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  base-4.8.2.0:Text.ParserCombinators.ReadPrec 2590e0e0a57a86ac7c62727f4d868dd2
import  -/  base-4.8.2.0:Text.Read.Lex 724ca44ddd38ddc5f47a501d62736c26
import  -/  OtherData e2b50a410ce19d2d27f8b50952de8b42
  exports: f505dec72f229982fb85e59b44566731
import  -/  PhonemeData fc090a0bcda3a243800b6c4018b433c0
  exports: 6190a60b3ecf64d963416d84612d3413
  Morpheme b64262a4cf24269d3af16c38a15f99cc
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
eb591bc9c440a35417c8765c7deac942
  $fEq(,,,,,,,,,,,,,,,,,) ::
    (GHC.Classes.Eq a, GHC.Classes.Eq b, GHC.Classes.Eq c,
     GHC.Classes.Eq d, GHC.Classes.Eq e, GHC.Classes.Eq f,
     GHC.Classes.Eq g, GHC.Classes.Eq h, GHC.Classes.Eq i,
     GHC.Classes.Eq j, GHC.Classes.Eq k, GHC.Classes.Eq l,
     GHC.Classes.Eq m, GHC.Classes.Eq n, GHC.Classes.Eq o,
     GHC.Classes.Eq p, GHC.Classes.Eq q, GHC.Classes.Eq r) =>
    GHC.Classes.Eq
      (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r)
  DFunId[0]
  {- Arity: 18, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a20
                      @ b
                      @ c
                      @ d
                      @ e
                      @ f
                      @ g
                      @ h
                      @ i
                      @ j
                      @ k
                      @ l
                      @ m
                      @ n
                      @ o
                      @ p
                      @ q
                      @ r
                      $dEq :: GHC.Classes.Eq a20
                      $dEq1 :: GHC.Classes.Eq b
                      $dEq2 :: GHC.Classes.Eq c
                      $dEq3 :: GHC.Classes.Eq d
                      $dEq4 :: GHC.Classes.Eq e
                      $dEq5 :: GHC.Classes.Eq f
                      $dEq6 :: GHC.Classes.Eq g
                      $dEq7 :: GHC.Classes.Eq h
                      $dEq8 :: GHC.Classes.Eq i
                      $dEq9 :: GHC.Classes.Eq j
                      $dEq10 :: GHC.Classes.Eq k
                      $dEq11 :: GHC.Classes.Eq l
                      $dEq12 :: GHC.Classes.Eq m
                      $dEq13 :: GHC.Classes.Eq n
                      $dEq14 :: GHC.Classes.Eq o
                      $dEq15 :: GHC.Classes.Eq p
                      $dEq16 :: GHC.Classes.Eq q
                      $dEq17 :: GHC.Classes.Eq r.
                  @ (a20, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r)
                  (InflectionData.$fEq(,,,,,,,,,,,,,,,,,)_$c==
                     @ a20
                     @ b
                     @ c
                     @ d
                     @ e
                     @ f
                     @ g
                     @ h
                     @ i
                     @ j
                     @ k
                     @ l
                     @ m
                     @ n
                     @ o
                     @ p
                     @ q
                     @ r
                     $dEq
                     $dEq1
                     $dEq2
                     $dEq3
                     $dEq4
                     $dEq5
                     $dEq6
                     $dEq7
                     $dEq8
                     $dEq9
                     $dEq10
                     $dEq11
                     $dEq12
                     $dEq13
                     $dEq14
                     $dEq15
                     $dEq16
                     $dEq17)
                  (InflectionData.$fEq(,,,,,,,,,,,,,,,,,)_$c/=
                     @ a20
                     @ b
                     @ c
                     @ d
                     @ e
                     @ f
                     @ g
                     @ h
                     @ i
                     @ j
                     @ k
                     @ l
                     @ m
                     @ n
                     @ o
                     @ p
                     @ q
                     @ r
                     $dEq
                     $dEq1
                     $dEq2
                     $dEq3
                     $dEq4
                     $dEq5
                     $dEq6
                     $dEq7
                     $dEq8
                     $dEq9
                     $dEq10
                     $dEq11
                     $dEq12
                     $dEq13
                     $dEq14
                     $dEq15
                     $dEq16
                     $dEq17) -}
bacfba6fd19a981caedf2d79c5f2d0d5
  $fEq(,,,,,,,,,,,,,,,,,)_$c/= ::
    (GHC.Classes.Eq a, GHC.Classes.Eq b, GHC.Classes.Eq c,
     GHC.Classes.Eq d, GHC.Classes.Eq e, GHC.Classes.Eq f,
     GHC.Classes.Eq g, GHC.Classes.Eq h, GHC.Classes.Eq i,
     GHC.Classes.Eq j, GHC.Classes.Eq k, GHC.Classes.Eq l,
     GHC.Classes.Eq m, GHC.Classes.Eq n, GHC.Classes.Eq o,
     GHC.Classes.Eq p, GHC.Classes.Eq q, GHC.Classes.Eq r) =>
    (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r)
    -> (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r)
    -> GHC.Types.Bool
  {- Arity: 20, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Unfolding: InlineRule (20, True, False)
                (\ @ a20
                   @ b
                   @ c
                   @ d
                   @ e
                   @ f
                   @ g
                   @ h
                   @ i
                   @ j
                   @ k
                   @ l
                   @ m
                   @ n
                   @ o
                   @ p
                   @ q
                   @ r
                   $dEq :: GHC.Classes.Eq a20
                   $dEq1 :: GHC.Classes.Eq b
                   $dEq2 :: GHC.Classes.Eq c
                   $dEq3 :: GHC.Classes.Eq d
                   $dEq4 :: GHC.Classes.Eq e
                   $dEq5 :: GHC.Classes.Eq f
                   $dEq6 :: GHC.Classes.Eq g
                   $dEq7 :: GHC.Classes.Eq h
                   $dEq8 :: GHC.Classes.Eq i
                   $dEq9 :: GHC.Classes.Eq j
                   $dEq10 :: GHC.Classes.Eq k
                   $dEq11 :: GHC.Classes.Eq l
                   $dEq12 :: GHC.Classes.Eq m
                   $dEq13 :: GHC.Classes.Eq n
                   $dEq14 :: GHC.Classes.Eq o
                   $dEq15 :: GHC.Classes.Eq p
                   $dEq16 :: GHC.Classes.Eq q
                   $dEq17 :: GHC.Classes.Eq r
                   a21 :: (a20, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r)
                   b1 :: (a20, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) ->
                 case InflectionData.$fEq(,,,,,,,,,,,,,,,,,)_$c==
                        @ a20
                        @ b
                        @ c
                        @ d
                        @ e
                        @ f
                        @ g
                        @ h
                        @ i
                        @ j
                        @ k
                        @ l
                        @ m
                        @ n
                        @ o
                        @ p
                        @ q
                        @ r
                        $dEq
                        $dEq1
                        $dEq2
                        $dEq3
                        $dEq4
                        $dEq5
                        $dEq6
                        $dEq7
                        $dEq8
                        $dEq9
                        $dEq10
                        $dEq11
                        $dEq12
                        $dEq13
                        $dEq14
                        $dEq15
                        $dEq16
                        $dEq17
                        a21
                        b1 of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
83a3ad50a5442afe076c44d82ae0bce2
  $fEq(,,,,,,,,,,,,,,,,,)_$c== ::
    (GHC.Classes.Eq a, GHC.Classes.Eq b, GHC.Classes.Eq c,
     GHC.Classes.Eq d, GHC.Classes.Eq e, GHC.Classes.Eq f,
     GHC.Classes.Eq g, GHC.Classes.Eq h, GHC.Classes.Eq i,
     GHC.Classes.Eq j, GHC.Classes.Eq k, GHC.Classes.Eq l,
     GHC.Classes.Eq m, GHC.Classes.Eq n, GHC.Classes.Eq o,
     GHC.Classes.Eq p, GHC.Classes.Eq q, GHC.Classes.Eq r) =>
    (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r)
    -> (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r)
    -> GHC.Types.Bool
  {- Arity: 20, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (20, True, False)
                (\ @ a20
                   @ b
                   @ c
                   @ d
                   @ e
                   @ f
                   @ g
                   @ h
                   @ i
                   @ j
                   @ k
                   @ l
                   @ m
                   @ n
                   @ o
                   @ p
                   @ q
                   @ r
                   w :: GHC.Classes.Eq a20
                   w1 :: GHC.Classes.Eq b
                   w2 :: GHC.Classes.Eq c
                   w3 :: GHC.Classes.Eq d
                   w4 :: GHC.Classes.Eq e
                   w5 :: GHC.Classes.Eq f
                   w6 :: GHC.Classes.Eq g
                   w7 :: GHC.Classes.Eq h
                   w8 :: GHC.Classes.Eq i
                   w9 :: GHC.Classes.Eq j
                   w10 :: GHC.Classes.Eq k
                   w11 :: GHC.Classes.Eq l
                   w12 :: GHC.Classes.Eq m
                   w13 :: GHC.Classes.Eq n
                   w14 :: GHC.Classes.Eq o
                   w15 :: GHC.Classes.Eq p
                   w16 :: GHC.Classes.Eq q
                   w17 :: GHC.Classes.Eq r
                   w18 :: (a20, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r)
                   w19 :: (a20, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) ->
                 case w18 of ww { (,,,,,,,,,,,,,,,,,) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ->
                 case w19 of ww19 { (,,,,,,,,,,,,,,,,,) ww20 ww21 ww22 ww23 ww24 ww25 ww26 ww27 ww28 ww29 ww30 ww31 ww32 ww33 ww34 ww35 ww36 ww37 ->
                 InflectionData.$w$c==
                   @ a20
                   @ b
                   @ c
                   @ d
                   @ e
                   @ f
                   @ g
                   @ h
                   @ i
                   @ j
                   @ k
                   @ l
                   @ m
                   @ n
                   @ o
                   @ p
                   @ q
                   @ r
                   w
                   w1
                   w2
                   w3
                   w4
                   w5
                   w6
                   w7
                   w8
                   w9
                   w10
                   w11
                   w12
                   w13
                   w14
                   w15
                   w16
                   w17
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww17
                   ww18
                   ww20
                   ww21
                   ww22
                   ww23
                   ww24
                   ww25
                   ww26
                   ww27
                   ww28
                   ww29
                   ww30
                   ww31
                   ww32
                   ww33
                   ww34
                   ww35
                   ww36
                   ww37 } }) -}
ef42610b404b654d1dfaa49f103925b4
  $fEqAgreement :: GHC.Classes.Eq InflectionData.Agreement
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Agreement
                  InflectionData.$fEqAgreement_$c==
                  InflectionData.$fEqAgreement_$c/= -}
2829004f86c028ee96f81739e9772565
  $fEqAgreementSystem ::
    GHC.Classes.Eq InflectionData.AgreementSystem
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.AgreementSystem
                  InflectionData.$fEqAgreementSystem_$c==
                  InflectionData.$fEqAgreementSystem_$c/= -}
2829004f86c028ee96f81739e9772565
  $fEqAgreementSystem_$c/= ::
    InflectionData.AgreementSystem
    -> InflectionData.AgreementSystem -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ a20 :: InflectionData.AgreementSystem
                   b :: InflectionData.AgreementSystem ->
                 case a20 of wild { InflectionData.AgreementSystem a21 ->
                 case b of wild1 { InflectionData.AgreementSystem b1 ->
                 case GHC.Classes.$fEq[]_$c==
                        @ InflectionData.Agreement
                        InflectionData.$fEqAgreement
                        a21
                        b1 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
2829004f86c028ee96f81739e9772565
  $fEqAgreementSystem_$c== ::
    InflectionData.AgreementSystem
    -> InflectionData.AgreementSystem -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.AgreementSystem
                   ds1 :: InflectionData.AgreementSystem ->
                 case ds of wild { InflectionData.AgreementSystem a20 ->
                 case ds1 of wild1 { InflectionData.AgreementSystem b1 ->
                 GHC.Classes.$fEq[]_$c==
                   @ InflectionData.Agreement
                   InflectionData.$fEqAgreement
                   a20
                   b1 } }) -}
ef42610b404b654d1dfaa49f103925b4
  $fEqAgreement_$c/= ::
    InflectionData.Agreement
    -> InflectionData.Agreement -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a20 :: InflectionData.Agreement
                   b :: InflectionData.Agreement ->
                 case a20 of wild {
                   InflectionData.SubVerb
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.SubVerb -> GHC.Types.False }
                   InflectionData.ObjVerb
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.ObjVerb -> GHC.Types.False }
                   InflectionData.AdjNoun
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.AdjNoun -> GHC.Types.False }
                   InflectionData.AdvAdj
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.AdvAdj -> GHC.Types.False }
                   InflectionData.AdvVerb
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.AdvVerb -> GHC.Types.False }
                   InflectionData.PrepNoun
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.PrepNoun -> GHC.Types.False }
                   InflectionData.VerbPrep
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.VerbPrep -> GHC.Types.False } }) -}
ef42610b404b654d1dfaa49f103925b4
  $fEqAgreement_$c== ::
    InflectionData.Agreement
    -> InflectionData.Agreement -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: InflectionData.Agreement
                   ds1 :: InflectionData.Agreement ->
                 case ds of wild {
                   InflectionData.SubVerb
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.SubVerb -> GHC.Types.True }
                   InflectionData.ObjVerb
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.ObjVerb -> GHC.Types.True }
                   InflectionData.AdjNoun
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.AdjNoun -> GHC.Types.True }
                   InflectionData.AdvAdj
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.AdvAdj -> GHC.Types.True }
                   InflectionData.AdvVerb
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.AdvVerb -> GHC.Types.True }
                   InflectionData.PrepNoun
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.PrepNoun -> GHC.Types.True }
                   InflectionData.VerbPrep
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.VerbPrep -> GHC.Types.True } }) -}
733cd520a7c9e157df7c0aea38100a5a
  $fEqAnimacy :: GHC.Classes.Eq InflectionData.Animacy
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Animacy
                  InflectionData.$fEqAnimacy_$c==
                  InflectionData.$fEqAnimacy_$c/= -}
733cd520a7c9e157df7c0aea38100a5a
  $fEqAnimacy_$c/= ::
    InflectionData.Animacy -> InflectionData.Animacy -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a20 :: InflectionData.Animacy
                   b :: InflectionData.Animacy ->
                 case a20 of wild {
                   InflectionData.AN
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.AN -> GHC.Types.False }
                   InflectionData.HUM
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.HUM -> GHC.Types.False }
                   InflectionData.NHUM
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.NHUM -> GHC.Types.False }
                   InflectionData.ZO
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.ZO -> GHC.Types.False }
                   InflectionData.INAN
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.INAN -> GHC.Types.False } }) -}
733cd520a7c9e157df7c0aea38100a5a
  $fEqAnimacy_$c== ::
    InflectionData.Animacy -> InflectionData.Animacy -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: InflectionData.Animacy
                   ds1 :: InflectionData.Animacy ->
                 case ds of wild {
                   InflectionData.AN
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.AN -> GHC.Types.True }
                   InflectionData.HUM
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.HUM -> GHC.Types.True }
                   InflectionData.NHUM
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.NHUM -> GHC.Types.True }
                   InflectionData.ZO
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.ZO -> GHC.Types.True }
                   InflectionData.INAN
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.INAN -> GHC.Types.True } }) -}
3850d91a00b41f2f5240a98d717e8e72
  $fEqAspect :: GHC.Classes.Eq InflectionData.Aspect
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Aspect
                  InflectionData.$fEqAspect_$c==
                  InflectionData.$fEqAspect_$c/= -}
3850d91a00b41f2f5240a98d717e8e72
  $fEqAspect_$c/= ::
    InflectionData.Aspect -> InflectionData.Aspect -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a20 :: InflectionData.Aspect b :: InflectionData.Aspect ->
                 case a20 of wild {
                   InflectionData.PFV
                   -> case b of wild1 {
                        InflectionData.PFV -> GHC.Types.False
                        InflectionData.IPFV -> GHC.Types.True }
                   InflectionData.IPFV
                   -> case b of wild1 {
                        InflectionData.PFV -> GHC.Types.True
                        InflectionData.IPFV -> GHC.Types.False } }) -}
3850d91a00b41f2f5240a98d717e8e72
  $fEqAspect_$c== ::
    InflectionData.Aspect -> InflectionData.Aspect -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.Aspect ds1 :: InflectionData.Aspect ->
                 case ds of wild {
                   InflectionData.PFV
                   -> case ds1 of wild1 {
                        InflectionData.PFV -> GHC.Types.True
                        InflectionData.IPFV -> GHC.Types.False }
                   InflectionData.IPFV
                   -> case ds1 of wild1 {
                        InflectionData.PFV -> GHC.Types.False
                        InflectionData.IPFV -> GHC.Types.True } }) -}
3e30b77606116c9a528b5a2b5461d97b
  $fEqCase :: GHC.Classes.Eq InflectionData.Case
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Case
                  InflectionData.$fEqCase_$c==
                  InflectionData.$fEqCase_$c/= -}
3e30b77606116c9a528b5a2b5461d97b
  $fEqCase_$c/= ::
    InflectionData.Case -> InflectionData.Case -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a20 :: InflectionData.Case b :: InflectionData.Case ->
                 case a20 of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==#
                           (GHC.Prim.dataToTag# @ InflectionData.Case x1)
                           (GHC.Prim.dataToTag# @ InflectionData.Case x2)) of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
3e30b77606116c9a528b5a2b5461d97b
  $fEqCase_$c== ::
    InflectionData.Case -> InflectionData.Case -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a20 :: InflectionData.Case b :: InflectionData.Case ->
                 case a20 of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.==#
                      (GHC.Prim.dataToTag# @ InflectionData.Case x1)
                      (GHC.Prim.dataToTag# @ InflectionData.Case x2)) } }) -}
c413fee28212168b6775aefd548e00c9
  $fEqClusivity :: GHC.Classes.Eq InflectionData.Clusivity
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Clusivity
                  InflectionData.$fEqClusivity_$c==
                  InflectionData.$fEqClusivity_$c/= -}
c413fee28212168b6775aefd548e00c9
  $fEqClusivity_$c/= ::
    InflectionData.Clusivity
    -> InflectionData.Clusivity -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a20 :: InflectionData.Clusivity b :: InflectionData.Clusivity ->
                 case a20 of wild {
                   InflectionData.INCL
                   -> case b of wild1 {
                        InflectionData.INCL -> GHC.Types.False
                        InflectionData.EXCL -> GHC.Types.True }
                   InflectionData.EXCL
                   -> case b of wild1 {
                        InflectionData.INCL -> GHC.Types.True
                        InflectionData.EXCL -> GHC.Types.False } }) -}
c413fee28212168b6775aefd548e00c9
  $fEqClusivity_$c== ::
    InflectionData.Clusivity
    -> InflectionData.Clusivity -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.Clusivity
                   ds1 :: InflectionData.Clusivity ->
                 case ds of wild {
                   InflectionData.INCL
                   -> case ds1 of wild1 {
                        InflectionData.INCL -> GHC.Types.True
                        InflectionData.EXCL -> GHC.Types.False }
                   InflectionData.EXCL
                   -> case ds1 of wild1 {
                        InflectionData.INCL -> GHC.Types.False
                        InflectionData.EXCL -> GHC.Types.True } }) -}
b9da224a5a14860d49d67b2859c0b465
  $fEqDefiniteness :: GHC.Classes.Eq InflectionData.Definiteness
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Definiteness
                  InflectionData.$fEqDefiniteness_$c==
                  InflectionData.$fEqDefiniteness_$c/= -}
b9da224a5a14860d49d67b2859c0b465
  $fEqDefiniteness_$c/= ::
    InflectionData.Definiteness
    -> InflectionData.Definiteness -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a20 :: InflectionData.Definiteness
                   b :: InflectionData.Definiteness ->
                 case a20 of wild {
                   InflectionData.DEF
                   -> case b of wild1 {
                        InflectionData.DEF -> GHC.Types.False
                        InflectionData.INDF -> GHC.Types.True }
                   InflectionData.INDF
                   -> case b of wild1 {
                        InflectionData.DEF -> GHC.Types.True
                        InflectionData.INDF -> GHC.Types.False } }) -}
b9da224a5a14860d49d67b2859c0b465
  $fEqDefiniteness_$c== ::
    InflectionData.Definiteness
    -> InflectionData.Definiteness -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.Definiteness
                   ds1 :: InflectionData.Definiteness ->
                 case ds of wild {
                   InflectionData.DEF
                   -> case ds1 of wild1 {
                        InflectionData.DEF -> GHC.Types.True
                        InflectionData.INDF -> GHC.Types.False }
                   InflectionData.INDF
                   -> case ds1 of wild1 {
                        InflectionData.DEF -> GHC.Types.False
                        InflectionData.INDF -> GHC.Types.True } }) -}
81ef3758cd3f737f92a15566b4335acf
  $fEqEvidentiality :: GHC.Classes.Eq InflectionData.Evidentiality
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Evidentiality
                  InflectionData.$fEqEvidentiality_$c==
                  InflectionData.$fEqEvidentiality_$c/= -}
81ef3758cd3f737f92a15566b4335acf
  $fEqEvidentiality_$c/= ::
    InflectionData.Evidentiality
    -> InflectionData.Evidentiality -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a20 :: InflectionData.Evidentiality
                   b :: InflectionData.Evidentiality ->
                 case a20 of wild {
                   InflectionData.EXP
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.EXP -> GHC.Types.False }
                   InflectionData.VIS
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.VIS -> GHC.Types.False }
                   InflectionData.NVIS
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.NVIS -> GHC.Types.False }
                   InflectionData.AUD
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.AUD -> GHC.Types.False }
                   InflectionData.INFER
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.INFER -> GHC.Types.False }
                   InflectionData.REP
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.REP -> GHC.Types.False }
                   InflectionData.HSY
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.HSY -> GHC.Types.False }
                   InflectionData.QUO
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.QUO -> GHC.Types.False }
                   InflectionData.ASS
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.ASS -> GHC.Types.False } }) -}
81ef3758cd3f737f92a15566b4335acf
  $fEqEvidentiality_$c== ::
    InflectionData.Evidentiality
    -> InflectionData.Evidentiality -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: InflectionData.Evidentiality
                   ds1 :: InflectionData.Evidentiality ->
                 case ds of wild {
                   InflectionData.EXP
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.EXP -> GHC.Types.True }
                   InflectionData.VIS
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.VIS -> GHC.Types.True }
                   InflectionData.NVIS
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.NVIS -> GHC.Types.True }
                   InflectionData.AUD
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.AUD -> GHC.Types.True }
                   InflectionData.INFER
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.INFER -> GHC.Types.True }
                   InflectionData.REP
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.REP -> GHC.Types.True }
                   InflectionData.HSY
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.HSY -> GHC.Types.True }
                   InflectionData.QUO
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.QUO -> GHC.Types.True }
                   InflectionData.ASS
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.ASS -> GHC.Types.True } }) -}
c5edda692e03a9e3df065b8d199e385d
  $fEqGender :: GHC.Classes.Eq InflectionData.Gender
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Gender
                  InflectionData.$fEqGender_$c==
                  InflectionData.$fEqGender_$c/= -}
c5edda692e03a9e3df065b8d199e385d
  $fEqGender_$c/= ::
    InflectionData.Gender -> InflectionData.Gender -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a20 :: InflectionData.Gender
                   b :: InflectionData.Gender ->
                 case a20 of wild {
                   InflectionData.M
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.M -> GHC.Types.False }
                   InflectionData.F
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.F -> GHC.Types.False }
                   InflectionData.COM
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.COM -> GHC.Types.False }
                   InflectionData.N
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.N -> GHC.Types.False } }) -}
c5edda692e03a9e3df065b8d199e385d
  $fEqGender_$c== ::
    InflectionData.Gender -> InflectionData.Gender -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: InflectionData.Gender
                   ds1 :: InflectionData.Gender ->
                 case ds of wild {
                   InflectionData.M
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.M -> GHC.Types.True }
                   InflectionData.F
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.F -> GHC.Types.True }
                   InflectionData.COM
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.COM -> GHC.Types.True }
                   InflectionData.N
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.N -> GHC.Types.True } }) -}
dfb063e584002de31fb83fb825dd29ff
  $fEqHonorific :: GHC.Classes.Eq InflectionData.Honorific
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Honorific
                  InflectionData.$fEqHonorific_$c==
                  InflectionData.$fEqHonorific_$c/= -}
dfb063e584002de31fb83fb825dd29ff
  $fEqHonorific_$c/= ::
    InflectionData.Honorific
    -> InflectionData.Honorific -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a20 :: InflectionData.Honorific b :: InflectionData.Honorific ->
                 case a20 of wild {
                   InflectionData.FAM
                   -> case b of wild1 {
                        InflectionData.FAM -> GHC.Types.False
                        InflectionData.FORM -> GHC.Types.True }
                   InflectionData.FORM
                   -> case b of wild1 {
                        InflectionData.FAM -> GHC.Types.True
                        InflectionData.FORM -> GHC.Types.False } }) -}
dfb063e584002de31fb83fb825dd29ff
  $fEqHonorific_$c== ::
    InflectionData.Honorific
    -> InflectionData.Honorific -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.Honorific
                   ds1 :: InflectionData.Honorific ->
                 case ds of wild {
                   InflectionData.FAM
                   -> case ds1 of wild1 {
                        InflectionData.FAM -> GHC.Types.True
                        InflectionData.FORM -> GHC.Types.False }
                   InflectionData.FORM
                   -> case ds1 of wild1 {
                        InflectionData.FAM -> GHC.Types.False
                        InflectionData.FORM -> GHC.Types.True } }) -}
14fec65287fdbb06ce4e9e396345475a
  $fEqManifest ::
    GHC.Classes.Eq a => GHC.Classes.Eq (InflectionData.Manifest a)
  DFunId[0]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a20 $dEq :: GHC.Classes.Eq a20.
                  @ (InflectionData.Manifest a20)
                  (InflectionData.$fEqManifest_$c== @ a20 $dEq)
                  (InflectionData.$fEqManifest_$c/= @ a20 $dEq) -}
2e270cd14c5f83f9fdcd19315b6b2c0b
  $fEqManifestType :: GHC.Classes.Eq InflectionData.ManifestType
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.ManifestType
                  InflectionData.$fEqManifestType_$c==
                  InflectionData.$fEqManifestType_$c/= -}
2e270cd14c5f83f9fdcd19315b6b2c0b
  $fEqManifestType_$c/= ::
    InflectionData.ManifestType
    -> InflectionData.ManifestType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a20 :: InflectionData.ManifestType
                   b :: InflectionData.ManifestType ->
                 case a20 of wild {
                   InflectionData.PreParticle
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.PreParticle -> GHC.Types.False }
                   InflectionData.Prefix
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.Prefix -> GHC.Types.False }
                   InflectionData.Suffix
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.Suffix -> GHC.Types.False }
                   InflectionData.PostParticle
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.PostParticle -> GHC.Types.False } }) -}
2e270cd14c5f83f9fdcd19315b6b2c0b
  $fEqManifestType_$c== ::
    InflectionData.ManifestType
    -> InflectionData.ManifestType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: InflectionData.ManifestType
                   ds1 :: InflectionData.ManifestType ->
                 case ds of wild {
                   InflectionData.PreParticle
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.PreParticle -> GHC.Types.True }
                   InflectionData.Prefix
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.Prefix -> GHC.Types.True }
                   InflectionData.Suffix
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.Suffix -> GHC.Types.True }
                   InflectionData.PostParticle
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.PostParticle -> GHC.Types.True } }) -}
14fec65287fdbb06ce4e9e396345475a
  $fEqManifest_$c/= ::
    GHC.Classes.Eq a =>
    InflectionData.Manifest a
    -> InflectionData.Manifest a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a20
                   $dEq :: GHC.Classes.Eq a20
                   a21 :: InflectionData.Manifest a20
                   b :: InflectionData.Manifest a20 ->
                 case InflectionData.$fEqManifest_$c== @ a20 $dEq a21 b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
14fec65287fdbb06ce4e9e396345475a
  $fEqManifest_$c== ::
    GHC.Classes.Eq a =>
    InflectionData.Manifest a
    -> InflectionData.Manifest a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a20
                   $dEq :: GHC.Classes.Eq a20
                   ds :: InflectionData.Manifest a20
                   ds1 :: InflectionData.Manifest a20 ->
                 case ds of wild {
                   InflectionData.NoManifest
                   -> case ds1 of wild1 {
                        InflectionData.NoManifest -> GHC.Types.True
                        InflectionData.Manifest ipv ipv1 -> GHC.Types.False }
                   InflectionData.Manifest a21 a22
                   -> case ds1 of wild1 {
                        InflectionData.NoManifest -> GHC.Types.False
                        InflectionData.Manifest b1 b2
                        -> case a21 of wild2 {
                             InflectionData.PreParticle
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.False
                                  InflectionData.PreParticle -> GHC.Classes.== @ a20 $dEq a22 b2 }
                             InflectionData.Prefix
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.False
                                  InflectionData.Prefix -> GHC.Classes.== @ a20 $dEq a22 b2 }
                             InflectionData.Suffix
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.False
                                  InflectionData.Suffix -> GHC.Classes.== @ a20 $dEq a22 b2 }
                             InflectionData.PostParticle
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.False
                                  InflectionData.PostParticle
                                  -> GHC.Classes.== @ a20 $dEq a22 b2 } } } }) -}
c8b893053b386faa19ee0015c2b817c2
  $fEqMood :: GHC.Classes.Eq InflectionData.Mood
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Mood
                  InflectionData.$fEqMood_$c==
                  InflectionData.$fEqMood_$c/= -}
c8b893053b386faa19ee0015c2b817c2
  $fEqMood_$c/= ::
    InflectionData.Mood -> InflectionData.Mood -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a20 :: InflectionData.Mood
                   b :: InflectionData.Mood ->
                 case a20 of wild {
                   InflectionData.IND
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.IND -> GHC.Types.False }
                   InflectionData.IRR
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.IRR -> GHC.Types.False }
                   InflectionData.DEO
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.DEO -> GHC.Types.False }
                   InflectionData.IMP
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.IMP -> GHC.Types.False }
                   InflectionData.JUS
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.JUS -> GHC.Types.False }
                   InflectionData.OPT
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.OPT -> GHC.Types.False }
                   InflectionData.EPIS
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.EPIS -> GHC.Types.False }
                   InflectionData.SBJV
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.SBJV -> GHC.Types.False }
                   InflectionData.POT
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.POT -> GHC.Types.False }
                   InflectionData.COND
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.COND -> GHC.Types.False } }) -}
c8b893053b386faa19ee0015c2b817c2
  $fEqMood_$c== ::
    InflectionData.Mood -> InflectionData.Mood -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: InflectionData.Mood
                   ds1 :: InflectionData.Mood ->
                 case ds of wild {
                   InflectionData.IND
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.IND -> GHC.Types.True }
                   InflectionData.IRR
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.IRR -> GHC.Types.True }
                   InflectionData.DEO
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.DEO -> GHC.Types.True }
                   InflectionData.IMP
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.IMP -> GHC.Types.True }
                   InflectionData.JUS
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.JUS -> GHC.Types.True }
                   InflectionData.OPT
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.OPT -> GHC.Types.True }
                   InflectionData.EPIS
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.EPIS -> GHC.Types.True }
                   InflectionData.SBJV
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.SBJV -> GHC.Types.True }
                   InflectionData.POT
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.POT -> GHC.Types.True }
                   InflectionData.COND
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.COND -> GHC.Types.True } }) -}
50da230f212270d0c1b92a32c3347c6c
  $fEqNumber :: GHC.Classes.Eq InflectionData.Number
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Number
                  InflectionData.$fEqNumber_$c==
                  InflectionData.$fEqNumber_$c/= -}
50da230f212270d0c1b92a32c3347c6c
  $fEqNumber_$c/= ::
    InflectionData.Number -> InflectionData.Number -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a20 :: InflectionData.Number
                   b :: InflectionData.Number ->
                 case a20 of wild {
                   InflectionData.SG
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.SG -> GHC.Types.False }
                   InflectionData.DU
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.DU -> GHC.Types.False }
                   InflectionData.TRI
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.TRI -> GHC.Types.False }
                   InflectionData.PA
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.PA -> GHC.Types.False }
                   InflectionData.PL
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.PL -> GHC.Types.False } }) -}
50da230f212270d0c1b92a32c3347c6c
  $fEqNumber_$c== ::
    InflectionData.Number -> InflectionData.Number -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: InflectionData.Number
                   ds1 :: InflectionData.Number ->
                 case ds of wild {
                   InflectionData.SG
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.SG -> GHC.Types.True }
                   InflectionData.DU
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.DU -> GHC.Types.True }
                   InflectionData.TRI
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.TRI -> GHC.Types.True }
                   InflectionData.PA
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.PA -> GHC.Types.True }
                   InflectionData.PL
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.PL -> GHC.Types.True } }) -}
a2d676a93bd091804cbdfda78f682da8
  $fEqPerson :: GHC.Classes.Eq InflectionData.Person
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Person
                  InflectionData.$fEqPerson_$c==
                  InflectionData.$fEqPerson_$c/= -}
a2d676a93bd091804cbdfda78f682da8
  $fEqPerson_$c/= ::
    InflectionData.Person -> InflectionData.Person -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a20 :: InflectionData.Person b :: InflectionData.Person ->
                 case a20 of wild {
                   InflectionData.FIRST
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.FIRST -> GHC.Types.False }
                   InflectionData.SECOND
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.SECOND -> GHC.Types.False }
                   InflectionData.THIRD
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.THIRD -> GHC.Types.False } }) -}
a2d676a93bd091804cbdfda78f682da8
  $fEqPerson_$c== ::
    InflectionData.Person -> InflectionData.Person -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.Person ds1 :: InflectionData.Person ->
                 case ds of wild {
                   InflectionData.FIRST
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.FIRST -> GHC.Types.True }
                   InflectionData.SECOND
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.SECOND -> GHC.Types.True }
                   InflectionData.THIRD
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.THIRD -> GHC.Types.True } }) -}
760d4f86d6aad7519f1cff401393492d
  $fEqPolarity :: GHC.Classes.Eq InflectionData.Polarity
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Polarity
                  InflectionData.$fEqPolarity_$c==
                  InflectionData.$fEqPolarity_$c/= -}
760d4f86d6aad7519f1cff401393492d
  $fEqPolarity_$c/= ::
    InflectionData.Polarity
    -> InflectionData.Polarity -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a20 :: InflectionData.Polarity b :: InflectionData.Polarity ->
                 case a20 of wild {
                   InflectionData.AFF
                   -> case b of wild1 {
                        InflectionData.AFF -> GHC.Types.False
                        InflectionData.NEG -> GHC.Types.True }
                   InflectionData.NEG
                   -> case b of wild1 {
                        InflectionData.AFF -> GHC.Types.True
                        InflectionData.NEG -> GHC.Types.False } }) -}
760d4f86d6aad7519f1cff401393492d
  $fEqPolarity_$c== ::
    InflectionData.Polarity
    -> InflectionData.Polarity -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.Polarity ds1 :: InflectionData.Polarity ->
                 case ds of wild {
                   InflectionData.AFF
                   -> case ds1 of wild1 {
                        InflectionData.AFF -> GHC.Types.True
                        InflectionData.NEG -> GHC.Types.False }
                   InflectionData.NEG
                   -> case ds1 of wild1 {
                        InflectionData.AFF -> GHC.Types.False
                        InflectionData.NEG -> GHC.Types.True } }) -}
ddf06519a04fe9d7312b057c3bf2a55a
  $fEqSpecificity :: GHC.Classes.Eq InflectionData.Specificity
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Specificity
                  InflectionData.$fEqSpecificity_$c==
                  InflectionData.$fEqSpecificity_$c/= -}
ddf06519a04fe9d7312b057c3bf2a55a
  $fEqSpecificity_$c/= ::
    InflectionData.Specificity
    -> InflectionData.Specificity -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a20 :: InflectionData.Specificity
                   b :: InflectionData.Specificity ->
                 case a20 of wild {
                   InflectionData.SPEC
                   -> case b of wild1 {
                        InflectionData.SPEC -> GHC.Types.False
                        InflectionData.NSPEC -> GHC.Types.True }
                   InflectionData.NSPEC
                   -> case b of wild1 {
                        InflectionData.SPEC -> GHC.Types.True
                        InflectionData.NSPEC -> GHC.Types.False } }) -}
ddf06519a04fe9d7312b057c3bf2a55a
  $fEqSpecificity_$c== ::
    InflectionData.Specificity
    -> InflectionData.Specificity -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.Specificity
                   ds1 :: InflectionData.Specificity ->
                 case ds of wild {
                   InflectionData.SPEC
                   -> case ds1 of wild1 {
                        InflectionData.SPEC -> GHC.Types.True
                        InflectionData.NSPEC -> GHC.Types.False }
                   InflectionData.NSPEC
                   -> case ds1 of wild1 {
                        InflectionData.SPEC -> GHC.Types.False
                        InflectionData.NSPEC -> GHC.Types.True } }) -}
ef165a186fbafaf5cc0bbe099a4b91b0
  $fEqTense :: GHC.Classes.Eq InflectionData.Tense
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Tense
                  InflectionData.$fEqTense_$c==
                  InflectionData.$fEqTense_$c/= -}
ef165a186fbafaf5cc0bbe099a4b91b0
  $fEqTense_$c/= ::
    InflectionData.Tense -> InflectionData.Tense -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a20 :: InflectionData.Tense
                   b :: InflectionData.Tense ->
                 case a20 of wild {
                   InflectionData.PST
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.PST -> GHC.Types.False }
                   InflectionData.REM
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.REM -> GHC.Types.False }
                   InflectionData.REC
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.REC -> GHC.Types.False }
                   InflectionData.NPST
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.NPST -> GHC.Types.False }
                   InflectionData.PRS
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.PRS -> GHC.Types.False }
                   InflectionData.NFUT
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.NFUT -> GHC.Types.False }
                   InflectionData.FUT
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.FUT -> GHC.Types.False }
                   InflectionData.IMMF
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.IMMF -> GHC.Types.False }
                   InflectionData.REMF
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.REMF -> GHC.Types.False } }) -}
ef165a186fbafaf5cc0bbe099a4b91b0
  $fEqTense_$c== ::
    InflectionData.Tense -> InflectionData.Tense -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: InflectionData.Tense
                   ds1 :: InflectionData.Tense ->
                 case ds of wild {
                   InflectionData.PST
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.PST -> GHC.Types.True }
                   InflectionData.REM
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.REM -> GHC.Types.True }
                   InflectionData.REC
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.REC -> GHC.Types.True }
                   InflectionData.NPST
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.NPST -> GHC.Types.True }
                   InflectionData.PRS
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.PRS -> GHC.Types.True }
                   InflectionData.NFUT
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.NFUT -> GHC.Types.True }
                   InflectionData.FUT
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.FUT -> GHC.Types.True }
                   InflectionData.IMMF
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.IMMF -> GHC.Types.True }
                   InflectionData.REMF
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.REMF -> GHC.Types.True } }) -}
ae01a43ac4566693ed520efc4ae942af
  $fEqTopic :: GHC.Classes.Eq InflectionData.Topic
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Topic
                  InflectionData.$fEqTopic_$c==
                  InflectionData.$fEqTopic_$c/= -}
ae01a43ac4566693ed520efc4ae942af
  $fEqTopic_$c/= ::
    InflectionData.Topic -> InflectionData.Topic -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a20 :: InflectionData.Topic b :: InflectionData.Topic ->
                 case a20 of wild {
                   InflectionData.TOP
                   -> case b of wild1 {
                        InflectionData.TOP -> GHC.Types.False
                        InflectionData.NTOP -> GHC.Types.True }
                   InflectionData.NTOP
                   -> case b of wild1 {
                        InflectionData.TOP -> GHC.Types.True
                        InflectionData.NTOP -> GHC.Types.False } }) -}
ae01a43ac4566693ed520efc4ae942af
  $fEqTopic_$c== ::
    InflectionData.Topic -> InflectionData.Topic -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.Topic ds1 :: InflectionData.Topic ->
                 case ds of wild {
                   InflectionData.TOP
                   -> case ds1 of wild1 {
                        InflectionData.TOP -> GHC.Types.True
                        InflectionData.NTOP -> GHC.Types.False }
                   InflectionData.NTOP
                   -> case ds1 of wild1 {
                        InflectionData.TOP -> GHC.Types.False
                        InflectionData.NTOP -> GHC.Types.True } }) -}
771b2c7bf1a5cdb98a55ddd9b2879a4c
  $fEqTransitivity :: GHC.Classes.Eq InflectionData.Transitivity
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Transitivity
                  InflectionData.$fEqTransitivity_$c==
                  InflectionData.$fEqTransitivity_$c/= -}
771b2c7bf1a5cdb98a55ddd9b2879a4c
  $fEqTransitivity_$c/= ::
    InflectionData.Transitivity
    -> InflectionData.Transitivity -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a20 :: InflectionData.Transitivity
                   b :: InflectionData.Transitivity ->
                 case a20 of wild {
                   InflectionData.NTRANS
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.NTRANS -> GHC.Types.False }
                   InflectionData.TRANS
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.TRANS -> GHC.Types.False }
                   InflectionData.DITRANS
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.DITRANS -> GHC.Types.False } }) -}
771b2c7bf1a5cdb98a55ddd9b2879a4c
  $fEqTransitivity_$c== ::
    InflectionData.Transitivity
    -> InflectionData.Transitivity -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.Transitivity
                   ds1 :: InflectionData.Transitivity ->
                 case ds of wild {
                   InflectionData.NTRANS
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.NTRANS -> GHC.Types.True }
                   InflectionData.TRANS
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.TRANS -> GHC.Types.True }
                   InflectionData.DITRANS
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.DITRANS -> GHC.Types.True } }) -}
efe0567aac5cdd53235e250e93c9bff0
  $fEqVoice :: GHC.Classes.Eq InflectionData.Voice
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Voice
                  InflectionData.$fEqVoice_$c==
                  InflectionData.$fEqVoice_$c/= -}
efe0567aac5cdd53235e250e93c9bff0
  $fEqVoice_$c/= ::
    InflectionData.Voice -> InflectionData.Voice -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a20 :: InflectionData.Voice b :: InflectionData.Voice ->
                 case a20 of wild {
                   InflectionData.ACTIVE
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.ACTIVE -> GHC.Types.False }
                   InflectionData.MIDDLE
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.MIDDLE -> GHC.Types.False }
                   InflectionData.PASSIVE
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.PASSIVE -> GHC.Types.False } }) -}
efe0567aac5cdd53235e250e93c9bff0
  $fEqVoice_$c== ::
    InflectionData.Voice -> InflectionData.Voice -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.Voice ds1 :: InflectionData.Voice ->
                 case ds of wild {
                   InflectionData.ACTIVE
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.ACTIVE -> GHC.Types.True }
                   InflectionData.MIDDLE
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.MIDDLE -> GHC.Types.True }
                   InflectionData.PASSIVE
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.PASSIVE -> GHC.Types.True } }) -}
d7b9cc4c84b4eba4e706d67aa644c840
  $fEqVolition :: GHC.Classes.Eq InflectionData.Volition
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Volition
                  InflectionData.$fEqVolition_$c==
                  InflectionData.$fEqVolition_$c/= -}
d7b9cc4c84b4eba4e706d67aa644c840
  $fEqVolition_$c/= ::
    InflectionData.Volition
    -> InflectionData.Volition -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a20 :: InflectionData.Volition b :: InflectionData.Volition ->
                 case a20 of wild {
                   InflectionData.VOL
                   -> case b of wild1 {
                        InflectionData.VOL -> GHC.Types.False
                        InflectionData.NVOL -> GHC.Types.True }
                   InflectionData.NVOL
                   -> case b of wild1 {
                        InflectionData.VOL -> GHC.Types.True
                        InflectionData.NVOL -> GHC.Types.False } }) -}
d7b9cc4c84b4eba4e706d67aa644c840
  $fEqVolition_$c== ::
    InflectionData.Volition
    -> InflectionData.Volition -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.Volition ds1 :: InflectionData.Volition ->
                 case ds of wild {
                   InflectionData.VOL
                   -> case ds1 of wild1 {
                        InflectionData.VOL -> GHC.Types.True
                        InflectionData.NVOL -> GHC.Types.False }
                   InflectionData.NVOL
                   -> case ds1 of wild1 {
                        InflectionData.VOL -> GHC.Types.False
                        InflectionData.NVOL -> GHC.Types.True } }) -}
ef42610b404b654d1dfaa49f103925b4
  $fReadAgreement :: GHC.Read.Read InflectionData.Agreement
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Agreement
                  InflectionData.$fReadAgreement_$s$dmreadsPrec
                  InflectionData.$fReadAgreement_$sreadListDefault
                  InflectionData.$fReadAgreement_$creadPrec
                  InflectionData.$fReadAgreement_$creadListPrec -}
ef42610b404b654d1dfaa49f103925b4
  $fReadAgreement1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Agreement] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.Agreement]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.Agreement
                   InflectionData.$fReadAgreement2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Agreement>_R))
                   @ b
                   eta1) -}
ef42610b404b654d1dfaa49f103925b4
  $fReadAgreement10 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Agreement)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Agreement)
                   InflectionData.$fReadAgreement11
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           InflectionData.Agreement))) -}
ef42610b404b654d1dfaa49f103925b4
  $fReadAgreement11 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Agreement)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadAgreement13,
                  InflectionData.$fReadAgreement12
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Agreement>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Agreement>_R))))) -}
ef42610b404b654d1dfaa49f103925b4
  $fReadAgreement12 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Agreement -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Agreement
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.VerbPrep) -}
dde12b14213b60cd76c155054d79e857
  $fReadAgreement13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "VerbPrep"#) -}
ef42610b404b654d1dfaa49f103925b4
  $fReadAgreement14 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Agreement)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadAgreement16,
                  InflectionData.$fReadAgreement15
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Agreement>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Agreement>_R))))) -}
ef42610b404b654d1dfaa49f103925b4
  $fReadAgreement15 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Agreement -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Agreement
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.PrepNoun) -}
ad6b3bf771205919fdbcd7826f4a1370
  $fReadAgreement16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PrepNoun"#) -}
ef42610b404b654d1dfaa49f103925b4
  $fReadAgreement17 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Agreement)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadAgreement19,
                  InflectionData.$fReadAgreement18
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Agreement>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Agreement>_R))))) -}
ef42610b404b654d1dfaa49f103925b4
  $fReadAgreement18 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Agreement -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Agreement
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.AdvVerb) -}
8de1d649f479a797f30b7821f802ad6b
  $fReadAgreement19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AdvVerb"#) -}
ef42610b404b654d1dfaa49f103925b4
  $fReadAgreement2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Agreement
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Agreement
                   InflectionData.$fReadAgreement3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.Agreement>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.Agreement>_R)))) -}
ef42610b404b654d1dfaa49f103925b4
  $fReadAgreement20 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Agreement)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadAgreement22,
                  InflectionData.$fReadAgreement21
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Agreement>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Agreement>_R))))) -}
ef42610b404b654d1dfaa49f103925b4
  $fReadAgreement21 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Agreement -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Agreement
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.AdvAdj) -}
3fb60e9e87d145c23c9c77029a5cfb7e
  $fReadAgreement22 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AdvAdj"#) -}
ef42610b404b654d1dfaa49f103925b4
  $fReadAgreement23 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Agreement)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadAgreement25,
                  InflectionData.$fReadAgreement24
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Agreement>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Agreement>_R))))) -}
ef42610b404b654d1dfaa49f103925b4
  $fReadAgreement24 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Agreement -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Agreement
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.AdjNoun) -}
fd43038508c45bf3147d8a72bac978ad
  $fReadAgreement25 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AdjNoun"#) -}
ef42610b404b654d1dfaa49f103925b4
  $fReadAgreement26 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Agreement)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadAgreement28,
                  InflectionData.$fReadAgreement27
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Agreement>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Agreement>_R))))) -}
ef42610b404b654d1dfaa49f103925b4
  $fReadAgreement27 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Agreement -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Agreement
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.ObjVerb) -}
7c63fd67e37ccde6deaab793df429a36
  $fReadAgreement28 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ObjVerb"#) -}
ef42610b404b654d1dfaa49f103925b4
  $fReadAgreement29 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Agreement)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadAgreement31,
                  InflectionData.$fReadAgreement30
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Agreement>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Agreement>_R))))) -}
ef42610b404b654d1dfaa49f103925b4
  $fReadAgreement3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Agreement -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: InflectionData.Agreement
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ InflectionData.Agreement
                   InflectionData.$fReadAgreement4
                   eta
                   @ b
                   eta1) -}
ef42610b404b654d1dfaa49f103925b4
  $fReadAgreement30 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Agreement -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Agreement
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.SubVerb) -}
dddf866b650f1fb002027f8b94bc7cef
  $fReadAgreement31 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SubVerb"#) -}
ef42610b404b654d1dfaa49f103925b4
  $fReadAgreement4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Agreement)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Agreement)
                   InflectionData.$fReadAgreement29
                   InflectionData.$fReadAgreement5) -}
ef42610b404b654d1dfaa49f103925b4
  $fReadAgreement5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Agreement)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Agreement)
                   InflectionData.$fReadAgreement26
                   InflectionData.$fReadAgreement6) -}
ef42610b404b654d1dfaa49f103925b4
  $fReadAgreement6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Agreement)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Agreement)
                   InflectionData.$fReadAgreement23
                   InflectionData.$fReadAgreement7) -}
ef42610b404b654d1dfaa49f103925b4
  $fReadAgreement7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Agreement)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Agreement)
                   InflectionData.$fReadAgreement20
                   InflectionData.$fReadAgreement8) -}
ef42610b404b654d1dfaa49f103925b4
  $fReadAgreement8 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Agreement)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Agreement)
                   InflectionData.$fReadAgreement17
                   InflectionData.$fReadAgreement9) -}
ef42610b404b654d1dfaa49f103925b4
  $fReadAgreement9 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Agreement)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Agreement)
                   InflectionData.$fReadAgreement14
                   InflectionData.$fReadAgreement10) -}
2829004f86c028ee96f81739e9772565
  $fReadAgreementSystem ::
    GHC.Read.Read InflectionData.AgreementSystem
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.AgreementSystem
                  InflectionData.$fReadAgreementSystem_$creadsPrec
                  InflectionData.$fReadAgreementSystem_$sreadListDefault
                  InflectionData.$fReadAgreementSystem_$creadPrec
                  InflectionData.$fReadAgreementSystem_$creadListPrec -}
2829004f86c028ee96f81739e9772565
  $fReadAgreementSystem1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.AgreementSystem]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.AgreementSystem]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.AgreementSystem
                   InflectionData.$fReadAgreementSystem2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.AgreementSystem>_R))
                   @ b
                   eta1) -}
2829004f86c028ee96f81739e9772565
  $fReadAgreementSystem2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP
         InflectionData.AgreementSystem
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.AgreementSystem
                   InflectionData.$fReadAgreementSystem3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.AgreementSystem>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.AgreementSystem>_R)))) -}
2829004f86c028ee96f81739e9772565
  $fReadAgreementSystem3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.AgreementSystem
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: InflectionData.AgreementSystem
                         -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 ->
                 InflectionData.$wa ww1 @ b w1 }) -}
8d30b9a30ecc7f91aaf2390281f0b3c5
  $fReadAgreementSystem4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AgreementSystem"#) -}
2829004f86c028ee96f81739e9772565
  $fReadAgreementSystem_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [InflectionData.AgreementSystem]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadAgreementSystem1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.AgreementSystem]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.AgreementSystem]>_R))) -}
2829004f86c028ee96f81739e9772565
  $fReadAgreementSystem_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      InflectionData.AgreementSystem
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadAgreementSystem2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.AgreementSystem>_R)) -}
2829004f86c028ee96f81739e9772565
  $fReadAgreementSystem_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS
         InflectionData.AgreementSystem
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadP.run
                   @ InflectionData.AgreementSystem
                   ((GHC.Read.$fReadDouble10
                       @ InflectionData.AgreementSystem
                       InflectionData.$fReadAgreementSystem3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                           <InflectionData.AgreementSystem>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                      <InflectionData.AgreementSystem>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <InflectionData.AgreementSystem>_R)
                      @ InflectionData.AgreementSystem
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ InflectionData.AgreementSystem))) -}
2829004f86c028ee96f81739e9772565
  $fReadAgreementSystem_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.AgreementSystem]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.AgreementSystem]
                   ((InflectionData.$fReadAgreementSystem_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[InflectionData.AgreementSystem]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[InflectionData.AgreementSystem]>_R)
                      @ [InflectionData.AgreementSystem]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [InflectionData.AgreementSystem]))) -}
ef42610b404b654d1dfaa49f103925b4
  $fReadAgreement_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [InflectionData.Agreement]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadAgreement1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.Agreement]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.Agreement]>_R))) -}
ef42610b404b654d1dfaa49f103925b4
  $fReadAgreement_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Agreement
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadAgreement2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.Agreement>_R)) -}
ef42610b404b654d1dfaa49f103925b4
  $fReadAgreement_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Agreement
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ InflectionData.Agreement
                   InflectionData.$fReadAgreement_$creadPrec
                   eta) -}
ef42610b404b654d1dfaa49f103925b4
  $fReadAgreement_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Agreement]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Agreement]
                   ((InflectionData.$fReadAgreement_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[InflectionData.Agreement]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[InflectionData.Agreement]>_R)
                      @ [InflectionData.Agreement]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [InflectionData.Agreement]))) -}
733cd520a7c9e157df7c0aea38100a5a
  $fReadAnimacy :: GHC.Read.Read InflectionData.Animacy
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Animacy
                  InflectionData.$fReadAnimacy_$s$dmreadsPrec
                  InflectionData.$fReadAnimacy_$sreadListDefault
                  InflectionData.$fReadAnimacy_$creadPrec
                  InflectionData.$fReadAnimacy_$creadListPrec -}
733cd520a7c9e157df7c0aea38100a5a
  $fReadAnimacy1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Animacy] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.Animacy]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.Animacy
                   InflectionData.$fReadAnimacy2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Animacy>_R))
                   @ b
                   eta1) -}
733cd520a7c9e157df7c0aea38100a5a
  $fReadAnimacy10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Animacy -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Animacy
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.INAN) -}
a3255b03dbfba9bdaa88662ab7e47762
  $fReadAnimacy11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "INAN"#) -}
733cd520a7c9e157df7c0aea38100a5a
  $fReadAnimacy12 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadAnimacy14,
                  InflectionData.$fReadAnimacy13
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Animacy>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Animacy>_R))))) -}
733cd520a7c9e157df7c0aea38100a5a
  $fReadAnimacy13 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Animacy -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Animacy
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.ZO) -}
9f682fa9c26673db34a323b8498d6cac
  $fReadAnimacy14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ZO"#) -}
733cd520a7c9e157df7c0aea38100a5a
  $fReadAnimacy15 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadAnimacy17,
                  InflectionData.$fReadAnimacy16
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Animacy>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Animacy>_R))))) -}
733cd520a7c9e157df7c0aea38100a5a
  $fReadAnimacy16 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Animacy -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Animacy
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.NHUM) -}
23dce5885ab68c46d4cb13ae4c6a69f5
  $fReadAnimacy17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NHUM"#) -}
733cd520a7c9e157df7c0aea38100a5a
  $fReadAnimacy18 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadAnimacy20,
                  InflectionData.$fReadAnimacy19
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Animacy>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Animacy>_R))))) -}
733cd520a7c9e157df7c0aea38100a5a
  $fReadAnimacy19 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Animacy -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Animacy
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.HUM) -}
733cd520a7c9e157df7c0aea38100a5a
  $fReadAnimacy2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Animacy
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Animacy
                   InflectionData.$fReadAnimacy3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.Animacy>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.Animacy>_R)))) -}
6a5849656bfa9d0af9ad7398a3294493
  $fReadAnimacy20 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "HUM"#) -}
733cd520a7c9e157df7c0aea38100a5a
  $fReadAnimacy21 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadAnimacy23,
                  InflectionData.$fReadAnimacy22
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Animacy>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Animacy>_R))))) -}
733cd520a7c9e157df7c0aea38100a5a
  $fReadAnimacy22 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Animacy -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Animacy
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.AN) -}
9da93159ae27eda3d1015cb485fcb6eb
  $fReadAnimacy23 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AN"#) -}
733cd520a7c9e157df7c0aea38100a5a
  $fReadAnimacy3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Animacy -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: InflectionData.Animacy
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ InflectionData.Animacy
                   InflectionData.$fReadAnimacy4
                   eta
                   @ b
                   eta1) -}
733cd520a7c9e157df7c0aea38100a5a
  $fReadAnimacy4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)
                   InflectionData.$fReadAnimacy21
                   InflectionData.$fReadAnimacy5) -}
733cd520a7c9e157df7c0aea38100a5a
  $fReadAnimacy5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)
                   InflectionData.$fReadAnimacy18
                   InflectionData.$fReadAnimacy6) -}
733cd520a7c9e157df7c0aea38100a5a
  $fReadAnimacy6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)
                   InflectionData.$fReadAnimacy15
                   InflectionData.$fReadAnimacy7) -}
733cd520a7c9e157df7c0aea38100a5a
  $fReadAnimacy7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)
                   InflectionData.$fReadAnimacy12
                   InflectionData.$fReadAnimacy8) -}
733cd520a7c9e157df7c0aea38100a5a
  $fReadAnimacy8 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)
                   InflectionData.$fReadAnimacy9
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           InflectionData.Animacy))) -}
733cd520a7c9e157df7c0aea38100a5a
  $fReadAnimacy9 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadAnimacy11,
                  InflectionData.$fReadAnimacy10
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Animacy>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Animacy>_R))))) -}
733cd520a7c9e157df7c0aea38100a5a
  $fReadAnimacy_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [InflectionData.Animacy]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadAnimacy1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.Animacy]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.Animacy]>_R))) -}
733cd520a7c9e157df7c0aea38100a5a
  $fReadAnimacy_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadAnimacy2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.Animacy>_R)) -}
733cd520a7c9e157df7c0aea38100a5a
  $fReadAnimacy_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Animacy
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ InflectionData.Animacy
                   InflectionData.$fReadAnimacy_$creadPrec
                   eta) -}
733cd520a7c9e157df7c0aea38100a5a
  $fReadAnimacy_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Animacy]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Animacy]
                   ((InflectionData.$fReadAnimacy_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[InflectionData.Animacy]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[InflectionData.Animacy]>_R)
                      @ [InflectionData.Animacy]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [InflectionData.Animacy]))) -}
3850d91a00b41f2f5240a98d717e8e72
  $fReadAspect :: GHC.Read.Read InflectionData.Aspect
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Aspect
                  InflectionData.$fReadAspect_$s$dmreadsPrec
                  InflectionData.$fReadAspect_$sreadListDefault
                  InflectionData.$fReadAspect_$creadPrec
                  InflectionData.$fReadAspect_$creadListPrec -}
3850d91a00b41f2f5240a98d717e8e72
  $fReadAspect1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Aspect] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.Aspect]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.Aspect
                   InflectionData.$fReadAspect2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Aspect>_R))
                   @ b
                   eta1) -}
3850d91a00b41f2f5240a98d717e8e72
  $fReadAspect10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Aspect -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Aspect -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.PFV) -}
18ba211b5484bc4524ee2c30c84bcb86
  $fReadAspect11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PFV"#) -}
3850d91a00b41f2f5240a98d717e8e72
  $fReadAspect2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Aspect
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Aspect
                   InflectionData.$fReadAspect3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.Aspect>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.Aspect>_R)))) -}
3850d91a00b41f2f5240a98d717e8e72
  $fReadAspect3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Aspect -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: InflectionData.Aspect
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ InflectionData.Aspect
                   InflectionData.$fReadAspect4
                   eta
                   @ b
                   eta1) -}
3850d91a00b41f2f5240a98d717e8e72
  $fReadAspect4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)
                   InflectionData.$fReadAspect9
                   InflectionData.$fReadAspect5) -}
3850d91a00b41f2f5240a98d717e8e72
  $fReadAspect5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)
                   InflectionData.$fReadAspect6
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           InflectionData.Aspect))) -}
3850d91a00b41f2f5240a98d717e8e72
  $fReadAspect6 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadAspect8,
                  InflectionData.$fReadAspect7
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Aspect>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Aspect>_R))))) -}
3850d91a00b41f2f5240a98d717e8e72
  $fReadAspect7 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Aspect -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Aspect -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.IPFV) -}
566ad0d355a04ff35d88c29c3baaeb47
  $fReadAspect8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "IPFV"#) -}
3850d91a00b41f2f5240a98d717e8e72
  $fReadAspect9 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadAspect11,
                  InflectionData.$fReadAspect10
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Aspect>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Aspect>_R))))) -}
3850d91a00b41f2f5240a98d717e8e72
  $fReadAspect_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [InflectionData.Aspect]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadAspect1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.Aspect]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.Aspect]>_R))) -}
3850d91a00b41f2f5240a98d717e8e72
  $fReadAspect_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadAspect2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.Aspect>_R)) -}
3850d91a00b41f2f5240a98d717e8e72
  $fReadAspect_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Aspect
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ InflectionData.Aspect
                   InflectionData.$fReadAspect_$creadPrec
                   eta) -}
3850d91a00b41f2f5240a98d717e8e72
  $fReadAspect_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Aspect]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Aspect]
                   ((InflectionData.$fReadAspect_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[InflectionData.Aspect]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[InflectionData.Aspect]>_R)
                      @ [InflectionData.Aspect]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [InflectionData.Aspect]))) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase :: GHC.Read.Read InflectionData.Case
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Case
                  InflectionData.$fReadCase_$s$dmreadsPrec
                  InflectionData.$fReadCase_$sreadListDefault
                  InflectionData.$fReadCase_$creadPrec
                  InflectionData.$fReadCase_$creadListPrec -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Case] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.Case]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.Case
                   InflectionData.$fReadCase2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Case>_R))
                   @ b
                   eta1) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase10 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase99
                   InflectionData.$fReadCase11) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase100 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.NOM) -}
f8a58b30aa29fbe72a9e234e0cc30667
  $fReadCase101 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NOM"#) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase102 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase104,
                  InflectionData.$fReadCase103
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase103 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.SEC) -}
8cca93e0bb7a6443d30b01970bcf11e5
  $fReadCase104 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SEC"#) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase105 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase107,
                  InflectionData.$fReadCase106
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase106 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.INDIR) -}
fb059fb07e3d4c2ac4e266622bdad70c
  $fReadCase107 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "INDIR"#) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase108 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase110,
                  InflectionData.$fReadCase109
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase109 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.PEG) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase11 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase96
                   InflectionData.$fReadCase12) -}
d1a704e20c33cdd593aedc821027a699
  $fReadCase110 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PEG"#) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase111 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase113,
                  InflectionData.$fReadCase112
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase112 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.ERG) -}
249ff9b96886b9728122e82200820e62
  $fReadCase113 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ERG"#) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase114 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase116,
                  InflectionData.$fReadCase115
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase115 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.ACC) -}
34e7120f3f4db7ad152d679117fd15b0
  $fReadCase116 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ACC"#) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase117 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase119,
                  InflectionData.$fReadCase118
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase118 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.INTR) -}
b279c33ea3c6564eef0d5522ca41190c
  $fReadCase119 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "INTR"#) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase12 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase93
                   InflectionData.$fReadCase13) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase13 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase90
                   InflectionData.$fReadCase14) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase14 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase87
                   InflectionData.$fReadCase15) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase15 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase84
                   InflectionData.$fReadCase16) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase16 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase81
                   InflectionData.$fReadCase17) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase17 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase78
                   InflectionData.$fReadCase18) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase18 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase75
                   InflectionData.$fReadCase19) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase19 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase72
                   InflectionData.$fReadCase20) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Case
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Case
                   InflectionData.$fReadCase3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.Case>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.Case>_R)))) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase20 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase69
                   InflectionData.$fReadCase21) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase21 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase66
                   InflectionData.$fReadCase22) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase22 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase63
                   InflectionData.$fReadCase23) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase23 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase60
                   InflectionData.$fReadCase24) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase24 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase57
                   InflectionData.$fReadCase25) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase25 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase54
                   InflectionData.$fReadCase26) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase26 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase51
                   InflectionData.$fReadCase27) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase27 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase48
                   InflectionData.$fReadCase28) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase28 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase45
                   InflectionData.$fReadCase29) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase29 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase42
                   InflectionData.$fReadCase30) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ InflectionData.Case
                   InflectionData.$fReadCase4
                   eta
                   @ b
                   eta1) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase30 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase39
                   InflectionData.$fReadCase31) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase31 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase36
                   InflectionData.$fReadCase32) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase32 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase33
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case))) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase33 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase35,
                  InflectionData.$fReadCase34
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase34 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.OBL6) -}
cceb42e56ebf03ee8bd14a7ed4af6995
  $fReadCase35 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OBL6"#) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase36 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase38,
                  InflectionData.$fReadCase37
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase37 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.OBL5) -}
23802dd835df39917b03042d2072031d
  $fReadCase38 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OBL5"#) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase39 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase41,
                  InflectionData.$fReadCase40
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase117
                   InflectionData.$fReadCase5) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase40 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.OBL4) -}
8c2c05f820c2a2c064710cc40ff2f845
  $fReadCase41 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OBL4"#) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase42 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase44,
                  InflectionData.$fReadCase43
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase43 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.OBL3) -}
897974cf0cb6d51d568044feb92f3619
  $fReadCase44 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OBL3"#) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase45 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase47,
                  InflectionData.$fReadCase46
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase46 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.OBL2) -}
43682ab2d9ca7dd74772ffb9ccb89b70
  $fReadCase47 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OBL2"#) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase48 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase50,
                  InflectionData.$fReadCase49
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase49 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.OBL1) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase114
                   InflectionData.$fReadCase6) -}
8e0930ee55627175c3a627f0cf0ac881
  $fReadCase50 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OBL1"#) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase51 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase53,
                  InflectionData.$fReadCase52
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase52 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.POST) -}
3bf4d0076c2c5502b758015839540426
  $fReadCase53 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "POST"#) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase54 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase56,
                  InflectionData.$fReadCase55
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase55 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.PREP) -}
84fd42cd949e806a17b7ef67ade2deef
  $fReadCase56 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PREP"#) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase57 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase59,
                  InflectionData.$fReadCase58
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase58 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.ADP) -}
a2ac28b87b55c3c88c1edca2ebd5b45d
  $fReadCase59 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ADP"#) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase111
                   InflectionData.$fReadCase7) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase60 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase62,
                  InflectionData.$fReadCase61
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase61 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.DRT2) -}
e64753e1fec8ce406fd1b6f387d54074
  $fReadCase62 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DRT2"#) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase63 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase65,
                  InflectionData.$fReadCase64
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase64 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.TR) -}
d3314525e765cf75d2809219c7b31162
  $fReadCase65 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TR"#) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase66 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase68,
                  InflectionData.$fReadCase67
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase67 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.DRT1) -}
daa9584943f08a08007707ea4e9cb277
  $fReadCase68 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DRT1"#) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase69 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase71,
                  InflectionData.$fReadCase70
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase108
                   InflectionData.$fReadCase8) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase70 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.OBJ) -}
887f299f6839e840723c2261f5871e7b
  $fReadCase71 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OBJ"#) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase72 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase74,
                  InflectionData.$fReadCase73
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase73 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.DTR) -}
06742aafefd7cfe0c0833808127321e4
  $fReadCase74 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DTR"#) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase75 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase77,
                  InflectionData.$fReadCase76
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase76 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.ABS3) -}
ccb0c3e756562195f33b345c2d4679e4
  $fReadCase77 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ABS3"#) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase78 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase80,
                  InflectionData.$fReadCase79
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase79 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.ABS2) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase8 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase105
                   InflectionData.$fReadCase9) -}
1695242c6d4888875d16c34db5f49572
  $fReadCase80 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ABS2"#) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase81 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase83,
                  InflectionData.$fReadCase82
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase82 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.NOM2) -}
9a5bfdccdecc7be831e4347179a8e44b
  $fReadCase83 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NOM2"#) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase84 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase86,
                  InflectionData.$fReadCase85
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase85 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.ERG2) -}
2f6479a55584fbc8421dbb879fef39a6
  $fReadCase86 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ERG2"#) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase87 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase89,
                  InflectionData.$fReadCase88
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase88 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.PRIM) -}
7ee72c22a6f6318af5d420afa0a4413f
  $fReadCase89 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PRIM"#) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase9 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase102
                   InflectionData.$fReadCase10) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase90 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase92,
                  InflectionData.$fReadCase91
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase91 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.DIR) -}
44dbd1a44896965527e24365f780b3b4
  $fReadCase92 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DIR"#) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase93 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase95,
                  InflectionData.$fReadCase94
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase94 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.MTR) -}
09d55ca40f436299eb0fb84fdd144837
  $fReadCase95 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "MTR"#) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase96 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase98,
                  InflectionData.$fReadCase97
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase97 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.ABS) -}
edb62ec69fda313904258681e590b1c7
  $fReadCase98 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ABS"#) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase99 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase101,
                  InflectionData.$fReadCase100
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [InflectionData.Case]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadCase1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.Case]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.Case]>_R))) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadCase2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.Case>_R)) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Case
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ InflectionData.Case
                   InflectionData.$fReadCase_$creadPrec
                   eta) -}
3e30b77606116c9a528b5a2b5461d97b
  $fReadCase_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Case]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Case]
                   ((InflectionData.$fReadCase_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[InflectionData.Case]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[InflectionData.Case]>_R)
                      @ [InflectionData.Case]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [InflectionData.Case]))) -}
c413fee28212168b6775aefd548e00c9
  $fReadClusivity :: GHC.Read.Read InflectionData.Clusivity
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Clusivity
                  InflectionData.$fReadClusivity_$s$dmreadsPrec
                  InflectionData.$fReadClusivity_$sreadListDefault
                  InflectionData.$fReadClusivity_$creadPrec
                  InflectionData.$fReadClusivity_$creadListPrec -}
c413fee28212168b6775aefd548e00c9
  $fReadClusivity1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Clusivity] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.Clusivity]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.Clusivity
                   InflectionData.$fReadClusivity2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Clusivity>_R))
                   @ b
                   eta1) -}
c413fee28212168b6775aefd548e00c9
  $fReadClusivity10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Clusivity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Clusivity
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.INCL) -}
d686f29d607709fa2de4937441e198a3
  $fReadClusivity11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "INCL"#) -}
c413fee28212168b6775aefd548e00c9
  $fReadClusivity2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Clusivity
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Clusivity
                   InflectionData.$fReadClusivity3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.Clusivity>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.Clusivity>_R)))) -}
c413fee28212168b6775aefd548e00c9
  $fReadClusivity3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Clusivity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: InflectionData.Clusivity
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ InflectionData.Clusivity
                   InflectionData.$fReadClusivity4
                   eta
                   @ b
                   eta1) -}
c413fee28212168b6775aefd548e00c9
  $fReadClusivity4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Clusivity)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Clusivity)
                   InflectionData.$fReadClusivity9
                   InflectionData.$fReadClusivity5) -}
c413fee28212168b6775aefd548e00c9
  $fReadClusivity5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Clusivity)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Clusivity)
                   InflectionData.$fReadClusivity6
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           InflectionData.Clusivity))) -}
c413fee28212168b6775aefd548e00c9
  $fReadClusivity6 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Clusivity)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadClusivity8,
                  InflectionData.$fReadClusivity7
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Clusivity>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Clusivity>_R))))) -}
c413fee28212168b6775aefd548e00c9
  $fReadClusivity7 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Clusivity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Clusivity
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.EXCL) -}
fd197ccb5ed1618096097eedfb81a0fc
  $fReadClusivity8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "EXCL"#) -}
c413fee28212168b6775aefd548e00c9
  $fReadClusivity9 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Clusivity)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadClusivity11,
                  InflectionData.$fReadClusivity10
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Clusivity>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Clusivity>_R))))) -}
c413fee28212168b6775aefd548e00c9
  $fReadClusivity_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [InflectionData.Clusivity]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadClusivity1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.Clusivity]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.Clusivity]>_R))) -}
c413fee28212168b6775aefd548e00c9
  $fReadClusivity_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Clusivity
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadClusivity2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.Clusivity>_R)) -}
c413fee28212168b6775aefd548e00c9
  $fReadClusivity_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Clusivity
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ InflectionData.Clusivity
                   InflectionData.$fReadClusivity_$creadPrec
                   eta) -}
c413fee28212168b6775aefd548e00c9
  $fReadClusivity_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Clusivity]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Clusivity]
                   ((InflectionData.$fReadClusivity_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[InflectionData.Clusivity]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[InflectionData.Clusivity]>_R)
                      @ [InflectionData.Clusivity]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [InflectionData.Clusivity]))) -}
b9da224a5a14860d49d67b2859c0b465
  $fReadDefiniteness :: GHC.Read.Read InflectionData.Definiteness
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Definiteness
                  InflectionData.$fReadDefiniteness_$s$dmreadsPrec
                  InflectionData.$fReadDefiniteness_$sreadListDefault
                  InflectionData.$fReadDefiniteness_$creadPrec
                  InflectionData.$fReadDefiniteness_$creadListPrec -}
b9da224a5a14860d49d67b2859c0b465
  $fReadDefiniteness1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Definiteness] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.Definiteness]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.Definiteness
                   InflectionData.$fReadDefiniteness2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Definiteness>_R))
                   @ b
                   eta1) -}
b9da224a5a14860d49d67b2859c0b465
  $fReadDefiniteness10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Definiteness -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Definiteness
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.DEF) -}
38f80c6a85c1ebe812ec82679faf1038
  $fReadDefiniteness11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DEF"#) -}
b9da224a5a14860d49d67b2859c0b465
  $fReadDefiniteness2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Definiteness
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Definiteness
                   InflectionData.$fReadDefiniteness3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.Definiteness>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.Definiteness>_R)))) -}
b9da224a5a14860d49d67b2859c0b465
  $fReadDefiniteness3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Definiteness -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: InflectionData.Definiteness
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ InflectionData.Definiteness
                   InflectionData.$fReadDefiniteness4
                   eta
                   @ b
                   eta1) -}
b9da224a5a14860d49d67b2859c0b465
  $fReadDefiniteness4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Definiteness)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Definiteness)
                   InflectionData.$fReadDefiniteness9
                   InflectionData.$fReadDefiniteness5) -}
b9da224a5a14860d49d67b2859c0b465
  $fReadDefiniteness5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Definiteness)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Definiteness)
                   InflectionData.$fReadDefiniteness6
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           InflectionData.Definiteness))) -}
b9da224a5a14860d49d67b2859c0b465
  $fReadDefiniteness6 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Definiteness)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadDefiniteness8,
                  InflectionData.$fReadDefiniteness7
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Definiteness>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Definiteness>_R))))) -}
b9da224a5a14860d49d67b2859c0b465
  $fReadDefiniteness7 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Definiteness -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Definiteness
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.INDF) -}
7e02c9073c9e82fce0459e276098f150
  $fReadDefiniteness8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "INDF"#) -}
b9da224a5a14860d49d67b2859c0b465
  $fReadDefiniteness9 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Definiteness)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadDefiniteness11,
                  InflectionData.$fReadDefiniteness10
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Definiteness>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Definiteness>_R))))) -}
b9da224a5a14860d49d67b2859c0b465
  $fReadDefiniteness_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [InflectionData.Definiteness]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadDefiniteness1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.Definiteness]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.Definiteness]>_R))) -}
b9da224a5a14860d49d67b2859c0b465
  $fReadDefiniteness_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      InflectionData.Definiteness
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadDefiniteness2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.Definiteness>_R)) -}
b9da224a5a14860d49d67b2859c0b465
  $fReadDefiniteness_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Definiteness
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ InflectionData.Definiteness
                   InflectionData.$fReadDefiniteness_$creadPrec
                   eta) -}
b9da224a5a14860d49d67b2859c0b465
  $fReadDefiniteness_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Definiteness]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Definiteness]
                   ((InflectionData.$fReadDefiniteness_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[InflectionData.Definiteness]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[InflectionData.Definiteness]>_R)
                      @ [InflectionData.Definiteness]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [InflectionData.Definiteness]))) -}
81ef3758cd3f737f92a15566b4335acf
  $fReadEvidentiality :: GHC.Read.Read InflectionData.Evidentiality
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Evidentiality
                  InflectionData.$fReadEvidentiality_$s$dmreadsPrec
                  InflectionData.$fReadEvidentiality_$sreadListDefault
                  InflectionData.$fReadEvidentiality_$creadPrec
                  InflectionData.$fReadEvidentiality_$creadListPrec -}
81ef3758cd3f737f92a15566b4335acf
  $fReadEvidentiality1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Evidentiality]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.Evidentiality]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.Evidentiality
                   InflectionData.$fReadEvidentiality2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Evidentiality>_R))
                   @ b
                   eta1) -}
81ef3758cd3f737f92a15566b4335acf
  $fReadEvidentiality10 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Evidentiality)
                   InflectionData.$fReadEvidentiality19
                   InflectionData.$fReadEvidentiality11) -}
81ef3758cd3f737f92a15566b4335acf
  $fReadEvidentiality11 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Evidentiality)
                   InflectionData.$fReadEvidentiality16
                   InflectionData.$fReadEvidentiality12) -}
81ef3758cd3f737f92a15566b4335acf
  $fReadEvidentiality12 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Evidentiality)
                   InflectionData.$fReadEvidentiality13
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           InflectionData.Evidentiality))) -}
81ef3758cd3f737f92a15566b4335acf
  $fReadEvidentiality13 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Evidentiality)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadEvidentiality15,
                  InflectionData.$fReadEvidentiality14
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Evidentiality>_R))))) -}
81ef3758cd3f737f92a15566b4335acf
  $fReadEvidentiality14 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Evidentiality
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.ASS) -}
a9539a9f6786fbc8342a9021d7ddf953
  $fReadEvidentiality15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ASS"#) -}
81ef3758cd3f737f92a15566b4335acf
  $fReadEvidentiality16 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Evidentiality)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadEvidentiality18,
                  InflectionData.$fReadEvidentiality17
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Evidentiality>_R))))) -}
81ef3758cd3f737f92a15566b4335acf
  $fReadEvidentiality17 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Evidentiality
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.QUO) -}
9a7521f66d0f1835cc47c2a8a00e3150
  $fReadEvidentiality18 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "QUO"#) -}
81ef3758cd3f737f92a15566b4335acf
  $fReadEvidentiality19 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Evidentiality)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadEvidentiality21,
                  InflectionData.$fReadEvidentiality20
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Evidentiality>_R))))) -}
81ef3758cd3f737f92a15566b4335acf
  $fReadEvidentiality2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Evidentiality
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Evidentiality
                   InflectionData.$fReadEvidentiality3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.Evidentiality>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.Evidentiality>_R)))) -}
81ef3758cd3f737f92a15566b4335acf
  $fReadEvidentiality20 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Evidentiality
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.HSY) -}
5249d7d3485296e6d81bad2b93328e4b
  $fReadEvidentiality21 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "HSY"#) -}
81ef3758cd3f737f92a15566b4335acf
  $fReadEvidentiality22 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Evidentiality)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadEvidentiality24,
                  InflectionData.$fReadEvidentiality23
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Evidentiality>_R))))) -}
81ef3758cd3f737f92a15566b4335acf
  $fReadEvidentiality23 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Evidentiality
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.REP) -}
02788ec165c27355d04121aeeec9db6e
  $fReadEvidentiality24 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "REP"#) -}
81ef3758cd3f737f92a15566b4335acf
  $fReadEvidentiality25 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Evidentiality)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadEvidentiality27,
                  InflectionData.$fReadEvidentiality26
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Evidentiality>_R))))) -}
81ef3758cd3f737f92a15566b4335acf
  $fReadEvidentiality26 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Evidentiality
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.INFER) -}
1b85c49cc356b0afa25f85b84e60cd0e
  $fReadEvidentiality27 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "INFER"#) -}
81ef3758cd3f737f92a15566b4335acf
  $fReadEvidentiality28 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Evidentiality)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadEvidentiality30,
                  InflectionData.$fReadEvidentiality29
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Evidentiality>_R))))) -}
81ef3758cd3f737f92a15566b4335acf
  $fReadEvidentiality29 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Evidentiality
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.AUD) -}
81ef3758cd3f737f92a15566b4335acf
  $fReadEvidentiality3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: InflectionData.Evidentiality
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ InflectionData.Evidentiality
                   InflectionData.$fReadEvidentiality4
                   eta
                   @ b
                   eta1) -}
dcc6613f8ca3ecf7a0193d4d07401a12
  $fReadEvidentiality30 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AUD"#) -}
81ef3758cd3f737f92a15566b4335acf
  $fReadEvidentiality31 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Evidentiality)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadEvidentiality33,
                  InflectionData.$fReadEvidentiality32
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Evidentiality>_R))))) -}
81ef3758cd3f737f92a15566b4335acf
  $fReadEvidentiality32 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Evidentiality
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.NVIS) -}
2a0d2b0c24a44d423bd299bb0821afed
  $fReadEvidentiality33 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NVIS"#) -}
81ef3758cd3f737f92a15566b4335acf
  $fReadEvidentiality34 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Evidentiality)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadEvidentiality36,
                  InflectionData.$fReadEvidentiality35
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Evidentiality>_R))))) -}
81ef3758cd3f737f92a15566b4335acf
  $fReadEvidentiality35 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Evidentiality
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.VIS) -}
d3326ce8dc00ad9c88953d293e4aef8c
  $fReadEvidentiality36 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "VIS"#) -}
81ef3758cd3f737f92a15566b4335acf
  $fReadEvidentiality37 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Evidentiality)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadEvidentiality39,
                  InflectionData.$fReadEvidentiality38
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Evidentiality>_R))))) -}
81ef3758cd3f737f92a15566b4335acf
  $fReadEvidentiality38 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Evidentiality
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.EXP) -}
110430f69a4e70e11f7c6c0a731c724e
  $fReadEvidentiality39 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "EXP"#) -}
81ef3758cd3f737f92a15566b4335acf
  $fReadEvidentiality4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Evidentiality)
                   InflectionData.$fReadEvidentiality37
                   InflectionData.$fReadEvidentiality5) -}
81ef3758cd3f737f92a15566b4335acf
  $fReadEvidentiality5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Evidentiality)
                   InflectionData.$fReadEvidentiality34
                   InflectionData.$fReadEvidentiality6) -}
81ef3758cd3f737f92a15566b4335acf
  $fReadEvidentiality6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Evidentiality)
                   InflectionData.$fReadEvidentiality31
                   InflectionData.$fReadEvidentiality7) -}
81ef3758cd3f737f92a15566b4335acf
  $fReadEvidentiality7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Evidentiality)
                   InflectionData.$fReadEvidentiality28
                   InflectionData.$fReadEvidentiality8) -}
81ef3758cd3f737f92a15566b4335acf
  $fReadEvidentiality8 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Evidentiality)
                   InflectionData.$fReadEvidentiality25
                   InflectionData.$fReadEvidentiality9) -}
81ef3758cd3f737f92a15566b4335acf
  $fReadEvidentiality9 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Evidentiality)
                   InflectionData.$fReadEvidentiality22
                   InflectionData.$fReadEvidentiality10) -}
81ef3758cd3f737f92a15566b4335acf
  $fReadEvidentiality_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [InflectionData.Evidentiality]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadEvidentiality1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.Evidentiality]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.Evidentiality]>_R))) -}
81ef3758cd3f737f92a15566b4335acf
  $fReadEvidentiality_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      InflectionData.Evidentiality
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadEvidentiality2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.Evidentiality>_R)) -}
81ef3758cd3f737f92a15566b4335acf
  $fReadEvidentiality_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Evidentiality
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ InflectionData.Evidentiality
                   InflectionData.$fReadEvidentiality_$creadPrec
                   eta) -}
81ef3758cd3f737f92a15566b4335acf
  $fReadEvidentiality_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Evidentiality]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Evidentiality]
                   ((InflectionData.$fReadEvidentiality_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[InflectionData.Evidentiality]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[InflectionData.Evidentiality]>_R)
                      @ [InflectionData.Evidentiality]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [InflectionData.Evidentiality]))) -}
c5edda692e03a9e3df065b8d199e385d
  $fReadGender :: GHC.Read.Read InflectionData.Gender
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Gender
                  InflectionData.$fReadGender_$s$dmreadsPrec
                  InflectionData.$fReadGender_$sreadListDefault
                  InflectionData.$fReadGender_$creadPrec
                  InflectionData.$fReadGender_$creadListPrec -}
c5edda692e03a9e3df065b8d199e385d
  $fReadGender1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Gender] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.Gender]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.Gender
                   InflectionData.$fReadGender2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Gender>_R))
                   @ b
                   eta1) -}
9be3dc4d4b7058633954da42a2cc0002
  $fReadGender10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "N"#) -}
c5edda692e03a9e3df065b8d199e385d
  $fReadGender11 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Gender)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadGender13,
                  InflectionData.$fReadGender12
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Gender>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Gender>_R))))) -}
c5edda692e03a9e3df065b8d199e385d
  $fReadGender12 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Gender -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Gender -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.COM) -}
b76a2e3e020d1853acbbd1b5a8b0d585
  $fReadGender13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "COM"#) -}
c5edda692e03a9e3df065b8d199e385d
  $fReadGender14 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Gender)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadGender16,
                  InflectionData.$fReadGender15
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Gender>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Gender>_R))))) -}
c5edda692e03a9e3df065b8d199e385d
  $fReadGender15 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Gender -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Gender -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.F) -}
d1b3c7a072e9372bf5754c430f4c8ca1
  $fReadGender16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "F"#) -}
c5edda692e03a9e3df065b8d199e385d
  $fReadGender17 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Gender)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadGender19,
                  InflectionData.$fReadGender18
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Gender>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Gender>_R))))) -}
c5edda692e03a9e3df065b8d199e385d
  $fReadGender18 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Gender -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Gender -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.M) -}
a898d16afb54168699409c589df77899
  $fReadGender19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "M"#) -}
c5edda692e03a9e3df065b8d199e385d
  $fReadGender2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Gender
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Gender
                   InflectionData.$fReadGender3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.Gender>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.Gender>_R)))) -}
c5edda692e03a9e3df065b8d199e385d
  $fReadGender3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Gender -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: InflectionData.Gender
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ InflectionData.Gender
                   InflectionData.$fReadGender4
                   eta
                   @ b
                   eta1) -}
c5edda692e03a9e3df065b8d199e385d
  $fReadGender4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Gender)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Gender)
                   InflectionData.$fReadGender17
                   InflectionData.$fReadGender5) -}
c5edda692e03a9e3df065b8d199e385d
  $fReadGender5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Gender)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Gender)
                   InflectionData.$fReadGender14
                   InflectionData.$fReadGender6) -}
c5edda692e03a9e3df065b8d199e385d
  $fReadGender6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Gender)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Gender)
                   InflectionData.$fReadGender11
                   InflectionData.$fReadGender7) -}
c5edda692e03a9e3df065b8d199e385d
  $fReadGender7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Gender)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Gender)
                   InflectionData.$fReadGender8
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           InflectionData.Gender))) -}
c5edda692e03a9e3df065b8d199e385d
  $fReadGender8 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Gender)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadGender10,
                  InflectionData.$fReadGender9
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Gender>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Gender>_R))))) -}
c5edda692e03a9e3df065b8d199e385d
  $fReadGender9 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Gender -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Gender -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.N) -}
c5edda692e03a9e3df065b8d199e385d
  $fReadGender_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [InflectionData.Gender]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadGender1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.Gender]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.Gender]>_R))) -}
c5edda692e03a9e3df065b8d199e385d
  $fReadGender_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Gender
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadGender2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.Gender>_R)) -}
c5edda692e03a9e3df065b8d199e385d
  $fReadGender_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Gender
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ InflectionData.Gender
                   InflectionData.$fReadGender_$creadPrec
                   eta) -}
c5edda692e03a9e3df065b8d199e385d
  $fReadGender_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Gender]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Gender]
                   ((InflectionData.$fReadGender_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[InflectionData.Gender]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[InflectionData.Gender]>_R)
                      @ [InflectionData.Gender]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [InflectionData.Gender]))) -}
dfb063e584002de31fb83fb825dd29ff
  $fReadHonorific :: GHC.Read.Read InflectionData.Honorific
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Honorific
                  InflectionData.$fReadHonorific_$s$dmreadsPrec
                  InflectionData.$fReadHonorific_$sreadListDefault
                  InflectionData.$fReadHonorific_$creadPrec
                  InflectionData.$fReadHonorific_$creadListPrec -}
dfb063e584002de31fb83fb825dd29ff
  $fReadHonorific1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Honorific] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.Honorific]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.Honorific
                   InflectionData.$fReadHonorific2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Honorific>_R))
                   @ b
                   eta1) -}
dfb063e584002de31fb83fb825dd29ff
  $fReadHonorific10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Honorific -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Honorific
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.FAM) -}
07c18b31769c143efcbcec15063e87c5
  $fReadHonorific11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FAM"#) -}
dfb063e584002de31fb83fb825dd29ff
  $fReadHonorific2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Honorific
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Honorific
                   InflectionData.$fReadHonorific3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.Honorific>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.Honorific>_R)))) -}
dfb063e584002de31fb83fb825dd29ff
  $fReadHonorific3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Honorific -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: InflectionData.Honorific
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ InflectionData.Honorific
                   InflectionData.$fReadHonorific4
                   eta
                   @ b
                   eta1) -}
dfb063e584002de31fb83fb825dd29ff
  $fReadHonorific4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Honorific)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Honorific)
                   InflectionData.$fReadHonorific9
                   InflectionData.$fReadHonorific5) -}
dfb063e584002de31fb83fb825dd29ff
  $fReadHonorific5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Honorific)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Honorific)
                   InflectionData.$fReadHonorific6
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           InflectionData.Honorific))) -}
dfb063e584002de31fb83fb825dd29ff
  $fReadHonorific6 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Honorific)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadHonorific8,
                  InflectionData.$fReadHonorific7
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Honorific>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Honorific>_R))))) -}
dfb063e584002de31fb83fb825dd29ff
  $fReadHonorific7 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Honorific -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Honorific
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.FORM) -}
c8d861ff009f5391728cedf4941a2108
  $fReadHonorific8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FORM"#) -}
dfb063e584002de31fb83fb825dd29ff
  $fReadHonorific9 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Honorific)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadHonorific11,
                  InflectionData.$fReadHonorific10
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Honorific>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Honorific>_R))))) -}
dfb063e584002de31fb83fb825dd29ff
  $fReadHonorific_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [InflectionData.Honorific]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadHonorific1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.Honorific]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.Honorific]>_R))) -}
dfb063e584002de31fb83fb825dd29ff
  $fReadHonorific_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Honorific
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadHonorific2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.Honorific>_R)) -}
dfb063e584002de31fb83fb825dd29ff
  $fReadHonorific_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Honorific
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ InflectionData.Honorific
                   InflectionData.$fReadHonorific_$creadPrec
                   eta) -}
dfb063e584002de31fb83fb825dd29ff
  $fReadHonorific_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Honorific]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Honorific]
                   ((InflectionData.$fReadHonorific_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[InflectionData.Honorific]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[InflectionData.Honorific]>_R)
                      @ [InflectionData.Honorific]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [InflectionData.Honorific]))) -}
14fec65287fdbb06ce4e9e396345475a
  $fReadManifest ::
    GHC.Read.Read a => GHC.Read.Read (InflectionData.Manifest a)
  DFunId[0]
  {- Arity: 1, Strictness: <L,U(A,A,U,A)>m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a20 $dRead :: GHC.Read.Read a20.
                  @ (InflectionData.Manifest a20)
                  (InflectionData.$fReadManifest_$creadsPrec @ a20 $dRead)
                  (InflectionData.$fReadManifest_$creadList @ a20 $dRead)
                  (InflectionData.$fReadManifest_$creadPrec @ a20 $dRead)
                  (InflectionData.$fReadManifest_$creadListPrec @ a20 $dRead) -}
14fec65287fdbb06ce4e9e396345475a
  $fReadManifest1 ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Manifest a] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 3, Strictness: <L,U(A,A,U,A)><L,A><L,C(U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a20
                   $dRead :: GHC.Read.Read a20
                   eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.Manifest a20]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ (InflectionData.Manifest a20)
                   (InflectionData.$fReadManifest2 @ a20 $dRead)
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Manifest a20>_R))
                   @ b
                   eta1) -}
2e270cd14c5f83f9fdcd19315b6b2c0b
  $fReadManifest10 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.ManifestType)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest12,
                  InflectionData.$fReadManifest11
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.ManifestType>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.ManifestType>_R))))) -}
2e270cd14c5f83f9fdcd19315b6b2c0b
  $fReadManifest11 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.ManifestType -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.ManifestType
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.PostParticle) -}
2e0e22e1970b168f6501efead6b42cfe
  $fReadManifest12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PostParticle"#) -}
2e270cd14c5f83f9fdcd19315b6b2c0b
  $fReadManifest13 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.ManifestType)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest15,
                  InflectionData.$fReadManifest14
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.ManifestType>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.ManifestType>_R))))) -}
2e270cd14c5f83f9fdcd19315b6b2c0b
  $fReadManifest14 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.ManifestType -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.ManifestType
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.Suffix) -}
424d6295f64461114011c56eee4cefc4
  $fReadManifest15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Suffix"#) -}
2e270cd14c5f83f9fdcd19315b6b2c0b
  $fReadManifest16 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.ManifestType)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest18,
                  InflectionData.$fReadManifest17
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.ManifestType>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.ManifestType>_R))))) -}
2e270cd14c5f83f9fdcd19315b6b2c0b
  $fReadManifest17 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.ManifestType -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.ManifestType
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.Prefix) -}
40621b57696ada73e76087b00849d4be
  $fReadManifest18 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Prefix"#) -}
2e270cd14c5f83f9fdcd19315b6b2c0b
  $fReadManifest19 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.ManifestType)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest21,
                  InflectionData.$fReadManifest20
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.ManifestType>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.ManifestType>_R))))) -}
14fec65287fdbb06ce4e9e396345475a
  $fReadManifest2 ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP (InflectionData.Manifest a)
  {- Arity: 2, Strictness: <L,1*U(A,A,1*U,A)><L,U>,
     Unfolding: (\ @ a20
                   $dRead :: GHC.Read.Read a20
                   eta :: Text.ParserCombinators.ReadPrec.Prec ->
                 let {
                   ds :: Text.ParserCombinators.ReadPrec.ReadPrec a20
                   = GHC.Read.readPrec @ a20 $dRead
                 } in
                 GHC.Read.$fReadDouble10
                   @ (InflectionData.Manifest a20)
                   (\ n :: Text.ParserCombinators.ReadPrec.Prec
                      @ b
                      eta1 :: InflectionData.Manifest a20
                              -> Text.ParserCombinators.ReadP.P b ->
                    let {
                      lvl78 :: Text.ParserCombinators.ReadP.P b
                      = let {
                          lvl79 :: Text.ParserCombinators.ReadP.P b
                          = eta1 (InflectionData.NoManifest @ a20)
                        } in
                        Text.Read.Lex.expect2
                          @ b
                          (\ a98 :: Text.Read.Lex.Lexeme ->
                           case a98 of wild {
                             DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                             Text.Read.Lex.Ident a21
                             -> case GHC.Base.eqString
                                       a21
                                       InflectionData.$fReadManifest22 of wild1 {
                                  GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                  GHC.Types.True -> lvl79 } })
                    } in
                    let {
                      k :: () -> Text.ParserCombinators.ReadP.P b
                        {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                           Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl78) -}
                      = \ w2 :: () -> lvl78
                    } in
                    Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                      @ b
                      (Text.ParserCombinators.ReadP.Look
                         @ b
                         (\ a98 :: GHC.Base.String ->
                          (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                            `cast`
                          (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                            @ b
                            k))
                      (case n of wild { GHC.Types.I# x ->
                       case GHC.Prim.tagToEnum#
                              @ GHC.Types.Bool
                              (GHC.Prim.<=# x 10) of wild2 {
                         GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                         GHC.Types.True
                         -> let {
                              lvl47 :: Text.ParserCombinators.ReadP.P b
                              = let {
                                  lvl79 :: Text.ParserCombinators.ReadP.P b
                                  = (GHC.Read.$fReadDouble10
                                       @ InflectionData.ManifestType
                                       InflectionData.$fReadManifest5
                                         `cast`
                                       (Trans
                                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                                             ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                           <InflectionData.ManifestType>_R))
                                            (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                                      <InflectionData.ManifestType>_R)))
                                       InflectionData.$fReadManifest4)
                                      `cast`
                                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                         <InflectionData.ManifestType>_R)
                                      @ b
                                      (\ a21 :: InflectionData.ManifestType ->
                                       (ds
                                          `cast`
                                        (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0] <a20>_R)
                                          InflectionData.$fReadManifest4)
                                         `cast`
                                       (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <a20>_R)
                                         @ b
                                         (\ a22 :: a20 ->
                                          eta1 (InflectionData.Manifest @ a20 a21 a22)))
                                } in
                                Text.Read.Lex.expect2
                                  @ b
                                  (\ a98 :: Text.Read.Lex.Lexeme ->
                                   case a98 of wild1 {
                                     DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                     Text.Read.Lex.Ident a21
                                     -> case GHC.Base.eqString
                                               a21
                                               InflectionData.$fReadManifest3 of wild3 {
                                          GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                          GHC.Types.True -> lvl79 } })
                            } in
                            let {
                              k1 :: () -> Text.ParserCombinators.ReadP.P b
                                {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                   Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl47) -}
                              = \ w2 :: () -> lvl47
                            } in
                            Text.ParserCombinators.ReadP.Look
                              @ b
                              (\ a98 :: GHC.Base.String ->
                               (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                                 `cast`
                               (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                                 @ b
                                 k1) } }))
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.Manifest a20>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.Manifest a20>_R)))
                   eta) -}
2e270cd14c5f83f9fdcd19315b6b2c0b
  $fReadManifest20 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.ManifestType -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.ManifestType
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.PreParticle) -}
d5ed25b8a60db4567ad3429ef920e710
  $fReadManifest21 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PreParticle"#) -}
408db4a919b454589fdb225db9528f4a
  $fReadManifest22 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NoManifest"#) -}
8c6aebea9419dc7f0de35408a7efc4d3
  $fReadManifest3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Manifest"#) -}
60d54665ed41d4d7f58560c4484c0096
  $fReadManifest4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11) -}
2e270cd14c5f83f9fdcd19315b6b2c0b
  $fReadManifest5 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.ManifestType -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: InflectionData.ManifestType
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ InflectionData.ManifestType
                   InflectionData.$fReadManifest6
                   eta
                   @ b
                   eta1) -}
2e270cd14c5f83f9fdcd19315b6b2c0b
  $fReadManifest6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.ManifestType)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.ManifestType)
                   InflectionData.$fReadManifest19
                   InflectionData.$fReadManifest7) -}
2e270cd14c5f83f9fdcd19315b6b2c0b
  $fReadManifest7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.ManifestType)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.ManifestType)
                   InflectionData.$fReadManifest16
                   InflectionData.$fReadManifest8) -}
2e270cd14c5f83f9fdcd19315b6b2c0b
  $fReadManifest8 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.ManifestType)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.ManifestType)
                   InflectionData.$fReadManifest13
                   InflectionData.$fReadManifest9) -}
2e270cd14c5f83f9fdcd19315b6b2c0b
  $fReadManifest9 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.ManifestType)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.ManifestType)
                   InflectionData.$fReadManifest10
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           InflectionData.ManifestType))) -}
2e270cd14c5f83f9fdcd19315b6b2c0b
  $fReadManifestType :: GHC.Read.Read InflectionData.ManifestType
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.ManifestType
                  InflectionData.$fReadManifestType_$s$dmreadsPrec
                  InflectionData.$fReadManifestType_$sreadListDefault
                  InflectionData.$fReadManifestType_$creadPrec
                  InflectionData.$fReadManifestType_$creadListPrec -}
2e270cd14c5f83f9fdcd19315b6b2c0b
  $fReadManifestType1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.ManifestType] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.ManifestType]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.ManifestType
                   InflectionData.$fReadManifestType2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.ManifestType>_R))
                   @ b
                   eta1) -}
2e270cd14c5f83f9fdcd19315b6b2c0b
  $fReadManifestType2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.ManifestType
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.ManifestType
                   InflectionData.$fReadManifest5
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.ManifestType>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.ManifestType>_R)))) -}
2e270cd14c5f83f9fdcd19315b6b2c0b
  $fReadManifestType_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [InflectionData.ManifestType]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadManifestType1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.ManifestType]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.ManifestType]>_R))) -}
2e270cd14c5f83f9fdcd19315b6b2c0b
  $fReadManifestType_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      InflectionData.ManifestType
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadManifestType2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.ManifestType>_R)) -}
2e270cd14c5f83f9fdcd19315b6b2c0b
  $fReadManifestType_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.ManifestType
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ InflectionData.ManifestType
                   InflectionData.$fReadManifestType_$creadPrec
                   eta) -}
2e270cd14c5f83f9fdcd19315b6b2c0b
  $fReadManifestType_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.ManifestType]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.ManifestType]
                   ((InflectionData.$fReadManifestType_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[InflectionData.ManifestType]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[InflectionData.ManifestType]>_R)
                      @ [InflectionData.ManifestType]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [InflectionData.ManifestType]))) -}
14fec65287fdbb06ce4e9e396345475a
  $fReadManifest_$creadList ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Manifest a]
  {- Arity: 1, Strictness: <L,U(A,A,U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a20 $dRead :: GHC.Read.Read a20 ->
                 Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Manifest a20]
                   (GHC.Read.$wa
                      @ (InflectionData.Manifest a20)
                      (InflectionData.$fReadManifest2 @ a20 $dRead)
                        `cast`
                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                <InflectionData.Manifest a20>_R))
                      @ [InflectionData.Manifest a20]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [InflectionData.Manifest a20]))) -}
14fec65287fdbb06ce4e9e396345475a
  $fReadManifest_$creadListPrec ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadPrec.ReadPrec
      [InflectionData.Manifest a]
  {- Arity: 3, Strictness: <L,U(A,A,U,A)><L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadManifest1
                  `cast`
                (forall a20.
                 <GHC.Read.Read a20>_R
                 ->_R Trans
                          (<Text.ParserCombinators.ReadPrec.Prec>_R
                           ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                         <[InflectionData.Manifest a20]>_R))
                          (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                    <[InflectionData.Manifest a20]>_R))) -}
14fec65287fdbb06ce4e9e396345475a
  $fReadManifest_$creadPrec ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadPrec.ReadPrec
      (InflectionData.Manifest a)
  {- Arity: 2, Strictness: <L,1*U(A,A,1*U,A)><L,U>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadManifest2
                  `cast`
                (forall a20.
                 <GHC.Read.Read a20>_R
                 ->_R Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <InflectionData.Manifest a20>_R)) -}
14fec65287fdbb06ce4e9e396345475a
  $fReadManifest_$creadsPrec ::
    GHC.Read.Read a =>
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS (InflectionData.Manifest a)
  {- Arity: 2, Strictness: <L,1*U(A,A,1*U,A)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a20 $dRead :: GHC.Read.Read a20 eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadP.run
                   @ (InflectionData.Manifest a20)
                   ((InflectionData.$fReadManifest2 @ a20 $dRead eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <InflectionData.Manifest a20>_R)
                      @ (InflectionData.Manifest a20)
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ (InflectionData.Manifest a20)))) -}
c8b893053b386faa19ee0015c2b817c2
  $fReadMood :: GHC.Read.Read InflectionData.Mood
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Mood
                  InflectionData.$fReadMood_$s$dmreadsPrec
                  InflectionData.$fReadMood_$sreadListDefault
                  InflectionData.$fReadMood_$creadPrec
                  InflectionData.$fReadMood_$creadListPrec -}
c8b893053b386faa19ee0015c2b817c2
  $fReadMood1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Mood] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.Mood]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.Mood
                   InflectionData.$fReadMood2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Mood>_R))
                   @ b
                   eta1) -}
c8b893053b386faa19ee0015c2b817c2
  $fReadMood10 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
                   InflectionData.$fReadMood23
                   InflectionData.$fReadMood11) -}
c8b893053b386faa19ee0015c2b817c2
  $fReadMood11 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
                   InflectionData.$fReadMood20
                   InflectionData.$fReadMood12) -}
c8b893053b386faa19ee0015c2b817c2
  $fReadMood12 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
                   InflectionData.$fReadMood17
                   InflectionData.$fReadMood13) -}
c8b893053b386faa19ee0015c2b817c2
  $fReadMood13 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
                   InflectionData.$fReadMood14
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood))) -}
c8b893053b386faa19ee0015c2b817c2
  $fReadMood14 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadMood16,
                  InflectionData.$fReadMood15
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Mood>_R))))) -}
c8b893053b386faa19ee0015c2b817c2
  $fReadMood15 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Mood -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.COND) -}
d4810cee8c6840602e044db634e48791
  $fReadMood16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "COND"#) -}
c8b893053b386faa19ee0015c2b817c2
  $fReadMood17 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadMood19,
                  InflectionData.$fReadMood18
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Mood>_R))))) -}
c8b893053b386faa19ee0015c2b817c2
  $fReadMood18 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Mood -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.POT) -}
bf9eadf89522b69d6fc752efadc2dcff
  $fReadMood19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "POT"#) -}
c8b893053b386faa19ee0015c2b817c2
  $fReadMood2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Mood
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Mood
                   InflectionData.$fReadMood3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.Mood>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.Mood>_R)))) -}
c8b893053b386faa19ee0015c2b817c2
  $fReadMood20 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadMood22,
                  InflectionData.$fReadMood21
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Mood>_R))))) -}
c8b893053b386faa19ee0015c2b817c2
  $fReadMood21 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Mood -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.SBJV) -}
42beb1cd58d48642fc9c657cf052f1ca
  $fReadMood22 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SBJV"#) -}
c8b893053b386faa19ee0015c2b817c2
  $fReadMood23 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadMood25,
                  InflectionData.$fReadMood24
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Mood>_R))))) -}
c8b893053b386faa19ee0015c2b817c2
  $fReadMood24 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Mood -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.EPIS) -}
e4f15e98f2b56335a43748813df7eabe
  $fReadMood25 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "EPIS"#) -}
c8b893053b386faa19ee0015c2b817c2
  $fReadMood26 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadMood28,
                  InflectionData.$fReadMood27
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Mood>_R))))) -}
c8b893053b386faa19ee0015c2b817c2
  $fReadMood27 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Mood -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.OPT) -}
3d9cf8e1084fa0bd43fbd7fda4d491dc
  $fReadMood28 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OPT"#) -}
c8b893053b386faa19ee0015c2b817c2
  $fReadMood29 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadMood31,
                  InflectionData.$fReadMood30
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Mood>_R))))) -}
c8b893053b386faa19ee0015c2b817c2
  $fReadMood3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: InflectionData.Mood -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ InflectionData.Mood
                   InflectionData.$fReadMood4
                   eta
                   @ b
                   eta1) -}
c8b893053b386faa19ee0015c2b817c2
  $fReadMood30 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Mood -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.JUS) -}
cf7af3bcc0e89a2e72442806e11f60da
  $fReadMood31 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "JUS"#) -}
c8b893053b386faa19ee0015c2b817c2
  $fReadMood32 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadMood34,
                  InflectionData.$fReadMood33
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Mood>_R))))) -}
c8b893053b386faa19ee0015c2b817c2
  $fReadMood33 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Mood -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.IMP) -}
0ada873cd4d00ac6efbb50884d36e2db
  $fReadMood34 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "IMP"#) -}
c8b893053b386faa19ee0015c2b817c2
  $fReadMood35 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadMood37,
                  InflectionData.$fReadMood36
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Mood>_R))))) -}
c8b893053b386faa19ee0015c2b817c2
  $fReadMood36 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Mood -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.DEO) -}
cc964a0f127e2a9d1f3b17e49261afc0
  $fReadMood37 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DEO"#) -}
c8b893053b386faa19ee0015c2b817c2
  $fReadMood38 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadMood40,
                  InflectionData.$fReadMood39
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Mood>_R))))) -}
c8b893053b386faa19ee0015c2b817c2
  $fReadMood39 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Mood -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.IRR) -}
c8b893053b386faa19ee0015c2b817c2
  $fReadMood4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
                   InflectionData.$fReadMood41
                   InflectionData.$fReadMood5) -}
1a549498a84bb5deed487f807c106222
  $fReadMood40 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "IRR"#) -}
c8b893053b386faa19ee0015c2b817c2
  $fReadMood41 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadMood43,
                  InflectionData.$fReadMood42
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Mood>_R))))) -}
c8b893053b386faa19ee0015c2b817c2
  $fReadMood42 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Mood -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.IND) -}
bcd3d353959d30e6e931fd382491acd0
  $fReadMood43 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "IND"#) -}
c8b893053b386faa19ee0015c2b817c2
  $fReadMood5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
                   InflectionData.$fReadMood38
                   InflectionData.$fReadMood6) -}
c8b893053b386faa19ee0015c2b817c2
  $fReadMood6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
                   InflectionData.$fReadMood35
                   InflectionData.$fReadMood7) -}
c8b893053b386faa19ee0015c2b817c2
  $fReadMood7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
                   InflectionData.$fReadMood32
                   InflectionData.$fReadMood8) -}
c8b893053b386faa19ee0015c2b817c2
  $fReadMood8 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
                   InflectionData.$fReadMood29
                   InflectionData.$fReadMood9) -}
c8b893053b386faa19ee0015c2b817c2
  $fReadMood9 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
                   InflectionData.$fReadMood26
                   InflectionData.$fReadMood10) -}
c8b893053b386faa19ee0015c2b817c2
  $fReadMood_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [InflectionData.Mood]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadMood1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.Mood]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.Mood]>_R))) -}
c8b893053b386faa19ee0015c2b817c2
  $fReadMood_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadMood2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.Mood>_R)) -}
c8b893053b386faa19ee0015c2b817c2
  $fReadMood_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Mood
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ InflectionData.Mood
                   InflectionData.$fReadMood_$creadPrec
                   eta) -}
c8b893053b386faa19ee0015c2b817c2
  $fReadMood_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Mood]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Mood]
                   ((InflectionData.$fReadMood_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[InflectionData.Mood]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[InflectionData.Mood]>_R)
                      @ [InflectionData.Mood]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [InflectionData.Mood]))) -}
50da230f212270d0c1b92a32c3347c6c
  $fReadNumber :: GHC.Read.Read InflectionData.Number
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Number
                  InflectionData.$fReadNumber_$s$dmreadsPrec
                  InflectionData.$fReadNumber_$sreadListDefault
                  InflectionData.$fReadNumber_$creadPrec
                  InflectionData.$fReadNumber_$creadListPrec -}
50da230f212270d0c1b92a32c3347c6c
  $fReadNumber1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Number] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.Number]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.Number
                   InflectionData.$fReadNumber2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Number>_R))
                   @ b
                   eta1) -}
50da230f212270d0c1b92a32c3347c6c
  $fReadNumber10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Number -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Number -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.PL) -}
eb3099fc133191d7e9ded8f4962e49f9
  $fReadNumber11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PL"#) -}
50da230f212270d0c1b92a32c3347c6c
  $fReadNumber12 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadNumber14,
                  InflectionData.$fReadNumber13
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Number>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Number>_R))))) -}
50da230f212270d0c1b92a32c3347c6c
  $fReadNumber13 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Number -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Number -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.PA) -}
a50af535ddf719b9fabbaac40fa5b364
  $fReadNumber14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PA"#) -}
50da230f212270d0c1b92a32c3347c6c
  $fReadNumber15 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadNumber17,
                  InflectionData.$fReadNumber16
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Number>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Number>_R))))) -}
50da230f212270d0c1b92a32c3347c6c
  $fReadNumber16 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Number -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Number -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.TRI) -}
ea6d938ca7362bffe1e8e75f4a7c192f
  $fReadNumber17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TRI"#) -}
50da230f212270d0c1b92a32c3347c6c
  $fReadNumber18 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadNumber20,
                  InflectionData.$fReadNumber19
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Number>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Number>_R))))) -}
50da230f212270d0c1b92a32c3347c6c
  $fReadNumber19 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Number -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Number -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.DU) -}
50da230f212270d0c1b92a32c3347c6c
  $fReadNumber2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Number
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Number
                   InflectionData.$fReadNumber3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.Number>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.Number>_R)))) -}
5e2304a1c2e9c157ac651dcf3b311bb4
  $fReadNumber20 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DU"#) -}
50da230f212270d0c1b92a32c3347c6c
  $fReadNumber21 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadNumber23,
                  InflectionData.$fReadNumber22
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Number>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Number>_R))))) -}
50da230f212270d0c1b92a32c3347c6c
  $fReadNumber22 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Number -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Number -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.SG) -}
9e828a6841d46f2b344f982f86b98415
  $fReadNumber23 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SG"#) -}
50da230f212270d0c1b92a32c3347c6c
  $fReadNumber3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Number -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: InflectionData.Number
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ InflectionData.Number
                   InflectionData.$fReadNumber4
                   eta
                   @ b
                   eta1) -}
50da230f212270d0c1b92a32c3347c6c
  $fReadNumber4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)
                   InflectionData.$fReadNumber21
                   InflectionData.$fReadNumber5) -}
50da230f212270d0c1b92a32c3347c6c
  $fReadNumber5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)
                   InflectionData.$fReadNumber18
                   InflectionData.$fReadNumber6) -}
50da230f212270d0c1b92a32c3347c6c
  $fReadNumber6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)
                   InflectionData.$fReadNumber15
                   InflectionData.$fReadNumber7) -}
50da230f212270d0c1b92a32c3347c6c
  $fReadNumber7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)
                   InflectionData.$fReadNumber12
                   InflectionData.$fReadNumber8) -}
50da230f212270d0c1b92a32c3347c6c
  $fReadNumber8 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)
                   InflectionData.$fReadNumber9
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           InflectionData.Number))) -}
50da230f212270d0c1b92a32c3347c6c
  $fReadNumber9 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadNumber11,
                  InflectionData.$fReadNumber10
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Number>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Number>_R))))) -}
50da230f212270d0c1b92a32c3347c6c
  $fReadNumber_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [InflectionData.Number]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadNumber1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.Number]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.Number]>_R))) -}
50da230f212270d0c1b92a32c3347c6c
  $fReadNumber_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadNumber2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.Number>_R)) -}
50da230f212270d0c1b92a32c3347c6c
  $fReadNumber_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Number
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ InflectionData.Number
                   InflectionData.$fReadNumber_$creadPrec
                   eta) -}
50da230f212270d0c1b92a32c3347c6c
  $fReadNumber_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Number]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Number]
                   ((InflectionData.$fReadNumber_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[InflectionData.Number]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[InflectionData.Number]>_R)
                      @ [InflectionData.Number]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [InflectionData.Number]))) -}
a2d676a93bd091804cbdfda78f682da8
  $fReadPerson :: GHC.Read.Read InflectionData.Person
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Person
                  InflectionData.$fReadPerson_$s$dmreadsPrec
                  InflectionData.$fReadPerson_$sreadListDefault
                  InflectionData.$fReadPerson_$creadPrec
                  InflectionData.$fReadPerson_$creadListPrec -}
a2d676a93bd091804cbdfda78f682da8
  $fReadPerson1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Person] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.Person]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.Person
                   InflectionData.$fReadPerson2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Person>_R))
                   @ b
                   eta1) -}
a2d676a93bd091804cbdfda78f682da8
  $fReadPerson10 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadPerson12,
                  InflectionData.$fReadPerson11
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Person>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Person>_R))))) -}
a2d676a93bd091804cbdfda78f682da8
  $fReadPerson11 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Person -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Person -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.SECOND) -}
85ab32f92782887aa633057e91c8e48f
  $fReadPerson12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SECOND"#) -}
a2d676a93bd091804cbdfda78f682da8
  $fReadPerson13 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadPerson15,
                  InflectionData.$fReadPerson14
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Person>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Person>_R))))) -}
a2d676a93bd091804cbdfda78f682da8
  $fReadPerson14 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Person -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Person -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.FIRST) -}
acda0c033ba89cedefe70a49e72bce26
  $fReadPerson15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FIRST"#) -}
a2d676a93bd091804cbdfda78f682da8
  $fReadPerson2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Person
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Person
                   InflectionData.$fReadPerson3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.Person>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.Person>_R)))) -}
a2d676a93bd091804cbdfda78f682da8
  $fReadPerson3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Person -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: InflectionData.Person
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ InflectionData.Person
                   InflectionData.$fReadPerson4
                   eta
                   @ b
                   eta1) -}
a2d676a93bd091804cbdfda78f682da8
  $fReadPerson4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)
                   InflectionData.$fReadPerson13
                   InflectionData.$fReadPerson5) -}
a2d676a93bd091804cbdfda78f682da8
  $fReadPerson5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)
                   InflectionData.$fReadPerson10
                   InflectionData.$fReadPerson6) -}
a2d676a93bd091804cbdfda78f682da8
  $fReadPerson6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)
                   InflectionData.$fReadPerson7
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           InflectionData.Person))) -}
a2d676a93bd091804cbdfda78f682da8
  $fReadPerson7 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadPerson9,
                  InflectionData.$fReadPerson8
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Person>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Person>_R))))) -}
a2d676a93bd091804cbdfda78f682da8
  $fReadPerson8 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Person -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Person -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.THIRD) -}
d33d82e52ba56fd0e7967d4e7527f52e
  $fReadPerson9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "THIRD"#) -}
a2d676a93bd091804cbdfda78f682da8
  $fReadPerson_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [InflectionData.Person]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadPerson1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.Person]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.Person]>_R))) -}
a2d676a93bd091804cbdfda78f682da8
  $fReadPerson_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadPerson2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.Person>_R)) -}
a2d676a93bd091804cbdfda78f682da8
  $fReadPerson_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Person
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ InflectionData.Person
                   InflectionData.$fReadPerson_$creadPrec
                   eta) -}
a2d676a93bd091804cbdfda78f682da8
  $fReadPerson_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Person]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Person]
                   ((InflectionData.$fReadPerson_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[InflectionData.Person]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[InflectionData.Person]>_R)
                      @ [InflectionData.Person]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [InflectionData.Person]))) -}
760d4f86d6aad7519f1cff401393492d
  $fReadPolarity :: GHC.Read.Read InflectionData.Polarity
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Polarity
                  InflectionData.$fReadPolarity_$s$dmreadsPrec
                  InflectionData.$fReadPolarity_$sreadListDefault
                  InflectionData.$fReadPolarity_$creadPrec
                  InflectionData.$fReadPolarity_$creadListPrec -}
760d4f86d6aad7519f1cff401393492d
  $fReadPolarity1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Polarity] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.Polarity]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.Polarity
                   InflectionData.$fReadPolarity2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Polarity>_R))
                   @ b
                   eta1) -}
760d4f86d6aad7519f1cff401393492d
  $fReadPolarity10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Polarity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Polarity
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.AFF) -}
133d8fa1dbe7e6819b2dcf2ec3340b4e
  $fReadPolarity11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AFF"#) -}
760d4f86d6aad7519f1cff401393492d
  $fReadPolarity2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Polarity
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Polarity
                   InflectionData.$fReadPolarity3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.Polarity>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.Polarity>_R)))) -}
760d4f86d6aad7519f1cff401393492d
  $fReadPolarity3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Polarity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: InflectionData.Polarity
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ InflectionData.Polarity
                   InflectionData.$fReadPolarity4
                   eta
                   @ b
                   eta1) -}
760d4f86d6aad7519f1cff401393492d
  $fReadPolarity4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Polarity)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Polarity)
                   InflectionData.$fReadPolarity9
                   InflectionData.$fReadPolarity5) -}
760d4f86d6aad7519f1cff401393492d
  $fReadPolarity5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Polarity)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Polarity)
                   InflectionData.$fReadPolarity6
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           InflectionData.Polarity))) -}
760d4f86d6aad7519f1cff401393492d
  $fReadPolarity6 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Polarity)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadPolarity8,
                  InflectionData.$fReadPolarity7
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Polarity>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Polarity>_R))))) -}
760d4f86d6aad7519f1cff401393492d
  $fReadPolarity7 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Polarity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Polarity
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.NEG) -}
406f6c77688166fa0b3462ad06664eed
  $fReadPolarity8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NEG"#) -}
760d4f86d6aad7519f1cff401393492d
  $fReadPolarity9 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Polarity)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadPolarity11,
                  InflectionData.$fReadPolarity10
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Polarity>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Polarity>_R))))) -}
760d4f86d6aad7519f1cff401393492d
  $fReadPolarity_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [InflectionData.Polarity]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadPolarity1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.Polarity]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.Polarity]>_R))) -}
760d4f86d6aad7519f1cff401393492d
  $fReadPolarity_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Polarity
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadPolarity2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.Polarity>_R)) -}
760d4f86d6aad7519f1cff401393492d
  $fReadPolarity_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Polarity
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ InflectionData.Polarity
                   InflectionData.$fReadPolarity_$creadPrec
                   eta) -}
760d4f86d6aad7519f1cff401393492d
  $fReadPolarity_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Polarity]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Polarity]
                   ((InflectionData.$fReadPolarity_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[InflectionData.Polarity]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[InflectionData.Polarity]>_R)
                      @ [InflectionData.Polarity]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [InflectionData.Polarity]))) -}
ddf06519a04fe9d7312b057c3bf2a55a
  $fReadSpecificity :: GHC.Read.Read InflectionData.Specificity
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Specificity
                  InflectionData.$fReadSpecificity_$s$dmreadsPrec
                  InflectionData.$fReadSpecificity_$sreadListDefault
                  InflectionData.$fReadSpecificity_$creadPrec
                  InflectionData.$fReadSpecificity_$creadListPrec -}
ddf06519a04fe9d7312b057c3bf2a55a
  $fReadSpecificity1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Specificity] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.Specificity]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.Specificity
                   InflectionData.$fReadSpecificity2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Specificity>_R))
                   @ b
                   eta1) -}
ddf06519a04fe9d7312b057c3bf2a55a
  $fReadSpecificity10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Specificity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Specificity
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.SPEC) -}
219dd49f2bd697f8773fcc2a0c4110c8
  $fReadSpecificity11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SPEC"#) -}
ddf06519a04fe9d7312b057c3bf2a55a
  $fReadSpecificity2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Specificity
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Specificity
                   InflectionData.$fReadSpecificity3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.Specificity>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.Specificity>_R)))) -}
ddf06519a04fe9d7312b057c3bf2a55a
  $fReadSpecificity3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Specificity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: InflectionData.Specificity
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ InflectionData.Specificity
                   InflectionData.$fReadSpecificity4
                   eta
                   @ b
                   eta1) -}
ddf06519a04fe9d7312b057c3bf2a55a
  $fReadSpecificity4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Specificity)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Specificity)
                   InflectionData.$fReadSpecificity9
                   InflectionData.$fReadSpecificity5) -}
ddf06519a04fe9d7312b057c3bf2a55a
  $fReadSpecificity5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Specificity)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Specificity)
                   InflectionData.$fReadSpecificity6
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           InflectionData.Specificity))) -}
ddf06519a04fe9d7312b057c3bf2a55a
  $fReadSpecificity6 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Specificity)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadSpecificity8,
                  InflectionData.$fReadSpecificity7
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Specificity>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Specificity>_R))))) -}
ddf06519a04fe9d7312b057c3bf2a55a
  $fReadSpecificity7 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Specificity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Specificity
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.NSPEC) -}
6e93d3724cae735f8d47c96116185e79
  $fReadSpecificity8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NSPEC"#) -}
ddf06519a04fe9d7312b057c3bf2a55a
  $fReadSpecificity9 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Specificity)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadSpecificity11,
                  InflectionData.$fReadSpecificity10
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Specificity>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Specificity>_R))))) -}
ddf06519a04fe9d7312b057c3bf2a55a
  $fReadSpecificity_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [InflectionData.Specificity]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadSpecificity1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.Specificity]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.Specificity]>_R))) -}
ddf06519a04fe9d7312b057c3bf2a55a
  $fReadSpecificity_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Specificity
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadSpecificity2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.Specificity>_R)) -}
ddf06519a04fe9d7312b057c3bf2a55a
  $fReadSpecificity_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Specificity
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ InflectionData.Specificity
                   InflectionData.$fReadSpecificity_$creadPrec
                   eta) -}
ddf06519a04fe9d7312b057c3bf2a55a
  $fReadSpecificity_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Specificity]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Specificity]
                   ((InflectionData.$fReadSpecificity_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[InflectionData.Specificity]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[InflectionData.Specificity]>_R)
                      @ [InflectionData.Specificity]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [InflectionData.Specificity]))) -}
ef165a186fbafaf5cc0bbe099a4b91b0
  $fReadTense :: GHC.Read.Read InflectionData.Tense
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Tense
                  InflectionData.$fReadTense_$s$dmreadsPrec
                  InflectionData.$fReadTense_$sreadListDefault
                  InflectionData.$fReadTense_$creadPrec
                  InflectionData.$fReadTense_$creadListPrec -}
ef165a186fbafaf5cc0bbe099a4b91b0
  $fReadTense1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Tense] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.Tense]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.Tense
                   InflectionData.$fReadTense2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Tense>_R))
                   @ b
                   eta1) -}
ef165a186fbafaf5cc0bbe099a4b91b0
  $fReadTense10 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadTense19
                   InflectionData.$fReadTense11) -}
ef165a186fbafaf5cc0bbe099a4b91b0
  $fReadTense11 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadTense16
                   InflectionData.$fReadTense12) -}
ef165a186fbafaf5cc0bbe099a4b91b0
  $fReadTense12 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadTense13
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense))) -}
ef165a186fbafaf5cc0bbe099a4b91b0
  $fReadTense13 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadTense15,
                  InflectionData.$fReadTense14
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
ef165a186fbafaf5cc0bbe099a4b91b0
  $fReadTense14 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.REMF) -}
f81d0facf870e776a8224496260bbb25
  $fReadTense15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "REMF"#) -}
ef165a186fbafaf5cc0bbe099a4b91b0
  $fReadTense16 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadTense18,
                  InflectionData.$fReadTense17
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
ef165a186fbafaf5cc0bbe099a4b91b0
  $fReadTense17 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.IMMF) -}
5db9684d0b673f42aeda88dd26cdf68e
  $fReadTense18 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "IMMF"#) -}
ef165a186fbafaf5cc0bbe099a4b91b0
  $fReadTense19 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadTense21,
                  InflectionData.$fReadTense20
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
ef165a186fbafaf5cc0bbe099a4b91b0
  $fReadTense2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Tense
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Tense
                   InflectionData.$fReadTense3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.Tense>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.Tense>_R)))) -}
ef165a186fbafaf5cc0bbe099a4b91b0
  $fReadTense20 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.FUT) -}
2c2081ddddb6f9dea8f5d09bbace2393
  $fReadTense21 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FUT"#) -}
ef165a186fbafaf5cc0bbe099a4b91b0
  $fReadTense22 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadTense24,
                  InflectionData.$fReadTense23
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
ef165a186fbafaf5cc0bbe099a4b91b0
  $fReadTense23 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.NFUT) -}
b057d8a6c0f1c8b38d6ed88d7d0e9903
  $fReadTense24 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NFUT"#) -}
ef165a186fbafaf5cc0bbe099a4b91b0
  $fReadTense25 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadTense27,
                  InflectionData.$fReadTense26
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
ef165a186fbafaf5cc0bbe099a4b91b0
  $fReadTense26 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.PRS) -}
2a2f4b2c908f8c4cfa4b9a4c089587a5
  $fReadTense27 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PRS"#) -}
ef165a186fbafaf5cc0bbe099a4b91b0
  $fReadTense28 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadTense30,
                  InflectionData.$fReadTense29
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
ef165a186fbafaf5cc0bbe099a4b91b0
  $fReadTense29 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.NPST) -}
ef165a186fbafaf5cc0bbe099a4b91b0
  $fReadTense3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: InflectionData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ InflectionData.Tense
                   InflectionData.$fReadTense4
                   eta
                   @ b
                   eta1) -}
907b4a065aa540a3ecc5ea01c1dc14e6
  $fReadTense30 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NPST"#) -}
ef165a186fbafaf5cc0bbe099a4b91b0
  $fReadTense31 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadTense33,
                  InflectionData.$fReadTense32
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
ef165a186fbafaf5cc0bbe099a4b91b0
  $fReadTense32 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.REC) -}
184cd2649123eb7b37dd40c97f84cc46
  $fReadTense33 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "REC"#) -}
ef165a186fbafaf5cc0bbe099a4b91b0
  $fReadTense34 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadTense36,
                  InflectionData.$fReadTense35
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
ef165a186fbafaf5cc0bbe099a4b91b0
  $fReadTense35 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.REM) -}
3b48f209ca37d7586e9a060a87e7af36
  $fReadTense36 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "REM"#) -}
ef165a186fbafaf5cc0bbe099a4b91b0
  $fReadTense37 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadTense39,
                  InflectionData.$fReadTense38
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
ef165a186fbafaf5cc0bbe099a4b91b0
  $fReadTense38 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.PST) -}
3d81e866c7f4edc18c8711d2c3b9dd21
  $fReadTense39 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PST"#) -}
ef165a186fbafaf5cc0bbe099a4b91b0
  $fReadTense4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadTense37
                   InflectionData.$fReadTense5) -}
ef165a186fbafaf5cc0bbe099a4b91b0
  $fReadTense5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadTense34
                   InflectionData.$fReadTense6) -}
ef165a186fbafaf5cc0bbe099a4b91b0
  $fReadTense6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadTense31
                   InflectionData.$fReadTense7) -}
ef165a186fbafaf5cc0bbe099a4b91b0
  $fReadTense7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadTense28
                   InflectionData.$fReadTense8) -}
ef165a186fbafaf5cc0bbe099a4b91b0
  $fReadTense8 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadTense25
                   InflectionData.$fReadTense9) -}
ef165a186fbafaf5cc0bbe099a4b91b0
  $fReadTense9 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadTense22
                   InflectionData.$fReadTense10) -}
ef165a186fbafaf5cc0bbe099a4b91b0
  $fReadTense_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [InflectionData.Tense]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadTense1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.Tense]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.Tense]>_R))) -}
ef165a186fbafaf5cc0bbe099a4b91b0
  $fReadTense_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadTense2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.Tense>_R)) -}
ef165a186fbafaf5cc0bbe099a4b91b0
  $fReadTense_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Tense
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ InflectionData.Tense
                   InflectionData.$fReadTense_$creadPrec
                   eta) -}
ef165a186fbafaf5cc0bbe099a4b91b0
  $fReadTense_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Tense]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Tense]
                   ((InflectionData.$fReadTense_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[InflectionData.Tense]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[InflectionData.Tense]>_R)
                      @ [InflectionData.Tense]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [InflectionData.Tense]))) -}
ae01a43ac4566693ed520efc4ae942af
  $fReadTopic :: GHC.Read.Read InflectionData.Topic
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Topic
                  InflectionData.$fReadTopic_$s$dmreadsPrec
                  InflectionData.$fReadTopic_$sreadListDefault
                  InflectionData.$fReadTopic_$creadPrec
                  InflectionData.$fReadTopic_$creadListPrec -}
ae01a43ac4566693ed520efc4ae942af
  $fReadTopic1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Topic] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.Topic]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.Topic
                   InflectionData.$fReadTopic2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Topic>_R))
                   @ b
                   eta1) -}
ae01a43ac4566693ed520efc4ae942af
  $fReadTopic10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Topic -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Topic -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.TOP) -}
c384df2d3b0d0ed9b1cc4cdd45efd779
  $fReadTopic11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TOP"#) -}
ae01a43ac4566693ed520efc4ae942af
  $fReadTopic2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Topic
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Topic
                   InflectionData.$fReadTopic3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.Topic>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.Topic>_R)))) -}
ae01a43ac4566693ed520efc4ae942af
  $fReadTopic3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Topic -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: InflectionData.Topic -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ InflectionData.Topic
                   InflectionData.$fReadTopic4
                   eta
                   @ b
                   eta1) -}
ae01a43ac4566693ed520efc4ae942af
  $fReadTopic4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Topic)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Topic)
                   InflectionData.$fReadTopic9
                   InflectionData.$fReadTopic5) -}
ae01a43ac4566693ed520efc4ae942af
  $fReadTopic5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Topic)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Topic)
                   InflectionData.$fReadTopic6
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Topic))) -}
ae01a43ac4566693ed520efc4ae942af
  $fReadTopic6 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Topic)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadTopic8,
                  InflectionData.$fReadTopic7
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Topic>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Topic>_R))))) -}
ae01a43ac4566693ed520efc4ae942af
  $fReadTopic7 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Topic -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Topic -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.NTOP) -}
58b965cfa06b25256fed1c086fbdf97c
  $fReadTopic8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NTOP"#) -}
ae01a43ac4566693ed520efc4ae942af
  $fReadTopic9 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Topic)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadTopic11,
                  InflectionData.$fReadTopic10
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Topic>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Topic>_R))))) -}
ae01a43ac4566693ed520efc4ae942af
  $fReadTopic_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [InflectionData.Topic]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadTopic1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.Topic]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.Topic]>_R))) -}
ae01a43ac4566693ed520efc4ae942af
  $fReadTopic_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Topic
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadTopic2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.Topic>_R)) -}
ae01a43ac4566693ed520efc4ae942af
  $fReadTopic_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Topic
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ InflectionData.Topic
                   InflectionData.$fReadTopic_$creadPrec
                   eta) -}
ae01a43ac4566693ed520efc4ae942af
  $fReadTopic_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Topic]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Topic]
                   ((InflectionData.$fReadTopic_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[InflectionData.Topic]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[InflectionData.Topic]>_R)
                      @ [InflectionData.Topic]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [InflectionData.Topic]))) -}
771b2c7bf1a5cdb98a55ddd9b2879a4c
  $fReadTransitivity :: GHC.Read.Read InflectionData.Transitivity
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Transitivity
                  InflectionData.$fReadTransitivity_$s$dmreadsPrec
                  InflectionData.$fReadTransitivity_$sreadListDefault
                  InflectionData.$fReadTransitivity_$creadPrec
                  InflectionData.$fReadTransitivity_$creadListPrec -}
771b2c7bf1a5cdb98a55ddd9b2879a4c
  $fReadTransitivity1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Transitivity] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.Transitivity]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.Transitivity
                   InflectionData.$fReadTransitivity2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Transitivity>_R))
                   @ b
                   eta1) -}
771b2c7bf1a5cdb98a55ddd9b2879a4c
  $fReadTransitivity10 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Transitivity)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadTransitivity12,
                  InflectionData.$fReadTransitivity11
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Transitivity>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Transitivity>_R))))) -}
771b2c7bf1a5cdb98a55ddd9b2879a4c
  $fReadTransitivity11 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Transitivity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Transitivity
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.TRANS) -}
0665d9257ef65071c217860a4d9d7169
  $fReadTransitivity12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TRANS"#) -}
771b2c7bf1a5cdb98a55ddd9b2879a4c
  $fReadTransitivity13 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Transitivity)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadTransitivity15,
                  InflectionData.$fReadTransitivity14
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Transitivity>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Transitivity>_R))))) -}
771b2c7bf1a5cdb98a55ddd9b2879a4c
  $fReadTransitivity14 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Transitivity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Transitivity
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.NTRANS) -}
262bdd9ad36a414e6ce59c90ab775d03
  $fReadTransitivity15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NTRANS"#) -}
771b2c7bf1a5cdb98a55ddd9b2879a4c
  $fReadTransitivity2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Transitivity
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Transitivity
                   InflectionData.$fReadTransitivity3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.Transitivity>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.Transitivity>_R)))) -}
771b2c7bf1a5cdb98a55ddd9b2879a4c
  $fReadTransitivity3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Transitivity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: InflectionData.Transitivity
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ InflectionData.Transitivity
                   InflectionData.$fReadTransitivity4
                   eta
                   @ b
                   eta1) -}
771b2c7bf1a5cdb98a55ddd9b2879a4c
  $fReadTransitivity4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Transitivity)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Transitivity)
                   InflectionData.$fReadTransitivity13
                   InflectionData.$fReadTransitivity5) -}
771b2c7bf1a5cdb98a55ddd9b2879a4c
  $fReadTransitivity5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Transitivity)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Transitivity)
                   InflectionData.$fReadTransitivity10
                   InflectionData.$fReadTransitivity6) -}
771b2c7bf1a5cdb98a55ddd9b2879a4c
  $fReadTransitivity6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Transitivity)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Transitivity)
                   InflectionData.$fReadTransitivity7
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           InflectionData.Transitivity))) -}
771b2c7bf1a5cdb98a55ddd9b2879a4c
  $fReadTransitivity7 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Transitivity)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadTransitivity9,
                  InflectionData.$fReadTransitivity8
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Transitivity>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Transitivity>_R))))) -}
771b2c7bf1a5cdb98a55ddd9b2879a4c
  $fReadTransitivity8 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Transitivity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Transitivity
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.DITRANS) -}
bf4e206054e9f5b1356f552a6c18012f
  $fReadTransitivity9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DITRANS"#) -}
771b2c7bf1a5cdb98a55ddd9b2879a4c
  $fReadTransitivity_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [InflectionData.Transitivity]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadTransitivity1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.Transitivity]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.Transitivity]>_R))) -}
771b2c7bf1a5cdb98a55ddd9b2879a4c
  $fReadTransitivity_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      InflectionData.Transitivity
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadTransitivity2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.Transitivity>_R)) -}
771b2c7bf1a5cdb98a55ddd9b2879a4c
  $fReadTransitivity_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Transitivity
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ InflectionData.Transitivity
                   InflectionData.$fReadTransitivity_$creadPrec
                   eta) -}
771b2c7bf1a5cdb98a55ddd9b2879a4c
  $fReadTransitivity_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Transitivity]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Transitivity]
                   ((InflectionData.$fReadTransitivity_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[InflectionData.Transitivity]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[InflectionData.Transitivity]>_R)
                      @ [InflectionData.Transitivity]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [InflectionData.Transitivity]))) -}
efe0567aac5cdd53235e250e93c9bff0
  $fReadVoice :: GHC.Read.Read InflectionData.Voice
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Voice
                  InflectionData.$fReadVoice_$s$dmreadsPrec
                  InflectionData.$fReadVoice_$sreadListDefault
                  InflectionData.$fReadVoice_$creadPrec
                  InflectionData.$fReadVoice_$creadListPrec -}
efe0567aac5cdd53235e250e93c9bff0
  $fReadVoice1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Voice] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.Voice]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.Voice
                   InflectionData.$fReadVoice2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Voice>_R))
                   @ b
                   eta1) -}
efe0567aac5cdd53235e250e93c9bff0
  $fReadVoice10 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Voice)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadVoice12,
                  InflectionData.$fReadVoice11
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Voice>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Voice>_R))))) -}
efe0567aac5cdd53235e250e93c9bff0
  $fReadVoice11 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Voice -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Voice -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.MIDDLE) -}
3c1ed72513b17150adbd67db4e1d5545
  $fReadVoice12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "MIDDLE"#) -}
efe0567aac5cdd53235e250e93c9bff0
  $fReadVoice13 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Voice)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadVoice15,
                  InflectionData.$fReadVoice14
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Voice>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Voice>_R))))) -}
efe0567aac5cdd53235e250e93c9bff0
  $fReadVoice14 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Voice -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Voice -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.ACTIVE) -}
aa2fe2bce3da03b0dad80356f588feef
  $fReadVoice15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ACTIVE"#) -}
efe0567aac5cdd53235e250e93c9bff0
  $fReadVoice2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Voice
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Voice
                   InflectionData.$fReadVoice3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.Voice>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.Voice>_R)))) -}
efe0567aac5cdd53235e250e93c9bff0
  $fReadVoice3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Voice -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: InflectionData.Voice -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ InflectionData.Voice
                   InflectionData.$fReadVoice4
                   eta
                   @ b
                   eta1) -}
efe0567aac5cdd53235e250e93c9bff0
  $fReadVoice4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Voice)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Voice)
                   InflectionData.$fReadVoice13
                   InflectionData.$fReadVoice5) -}
efe0567aac5cdd53235e250e93c9bff0
  $fReadVoice5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Voice)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Voice)
                   InflectionData.$fReadVoice10
                   InflectionData.$fReadVoice6) -}
efe0567aac5cdd53235e250e93c9bff0
  $fReadVoice6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Voice)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Voice)
                   InflectionData.$fReadVoice7
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Voice))) -}
efe0567aac5cdd53235e250e93c9bff0
  $fReadVoice7 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Voice)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadVoice9,
                  InflectionData.$fReadVoice8
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Voice>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Voice>_R))))) -}
efe0567aac5cdd53235e250e93c9bff0
  $fReadVoice8 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Voice -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Voice -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.PASSIVE) -}
1b9f2ade72d09f4960ea49b20128a80a
  $fReadVoice9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PASSIVE"#) -}
efe0567aac5cdd53235e250e93c9bff0
  $fReadVoice_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [InflectionData.Voice]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadVoice1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.Voice]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.Voice]>_R))) -}
efe0567aac5cdd53235e250e93c9bff0
  $fReadVoice_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Voice
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadVoice2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.Voice>_R)) -}
efe0567aac5cdd53235e250e93c9bff0
  $fReadVoice_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Voice
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ InflectionData.Voice
                   InflectionData.$fReadVoice_$creadPrec
                   eta) -}
efe0567aac5cdd53235e250e93c9bff0
  $fReadVoice_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Voice]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Voice]
                   ((InflectionData.$fReadVoice_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[InflectionData.Voice]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[InflectionData.Voice]>_R)
                      @ [InflectionData.Voice]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [InflectionData.Voice]))) -}
d7b9cc4c84b4eba4e706d67aa644c840
  $fReadVolition :: GHC.Read.Read InflectionData.Volition
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Volition
                  InflectionData.$fReadVolition_$s$dmreadsPrec
                  InflectionData.$fReadVolition_$sreadListDefault
                  InflectionData.$fReadVolition_$creadPrec
                  InflectionData.$fReadVolition_$creadListPrec -}
d7b9cc4c84b4eba4e706d67aa644c840
  $fReadVolition1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Volition] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [InflectionData.Volition]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ InflectionData.Volition
                   InflectionData.$fReadVolition2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <InflectionData.Volition>_R))
                   @ b
                   eta1) -}
d7b9cc4c84b4eba4e706d67aa644c840
  $fReadVolition10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Volition -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Volition
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.VOL) -}
1bc6b3baae87959526ec450536cb3a2f
  $fReadVolition11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "VOL"#) -}
d7b9cc4c84b4eba4e706d67aa644c840
  $fReadVolition2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Volition
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Volition
                   InflectionData.$fReadVolition3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <InflectionData.Volition>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <InflectionData.Volition>_R)))) -}
d7b9cc4c84b4eba4e706d67aa644c840
  $fReadVolition3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Volition -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: InflectionData.Volition
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ InflectionData.Volition
                   InflectionData.$fReadVolition4
                   eta
                   @ b
                   eta1) -}
d7b9cc4c84b4eba4e706d67aa644c840
  $fReadVolition4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Volition)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Volition)
                   InflectionData.$fReadVolition9
                   InflectionData.$fReadVolition5) -}
d7b9cc4c84b4eba4e706d67aa644c840
  $fReadVolition5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Volition)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Volition)
                   InflectionData.$fReadVolition6
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           InflectionData.Volition))) -}
d7b9cc4c84b4eba4e706d67aa644c840
  $fReadVolition6 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Volition)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadVolition8,
                  InflectionData.$fReadVolition7
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Volition>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Volition>_R))))) -}
d7b9cc4c84b4eba4e706d67aa644c840
  $fReadVolition7 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Volition -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: InflectionData.Volition
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta InflectionData.NVOL) -}
8b0a3912bb455507262ef6d9d5b5b9fe
  $fReadVolition8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NVOL"#) -}
d7b9cc4c84b4eba4e706d67aa644c840
  $fReadVolition9 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Volition)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadVolition11,
                  InflectionData.$fReadVolition10
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <InflectionData.Volition>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <InflectionData.Volition>_R))))) -}
d7b9cc4c84b4eba4e706d67aa644c840
  $fReadVolition_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [InflectionData.Volition]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadVolition1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[InflectionData.Volition]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[InflectionData.Volition]>_R))) -}
d7b9cc4c84b4eba4e706d67aa644c840
  $fReadVolition_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Volition
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadVolition2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <InflectionData.Volition>_R)) -}
d7b9cc4c84b4eba4e706d67aa644c840
  $fReadVolition_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Volition
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ InflectionData.Volition
                   InflectionData.$fReadVolition_$creadPrec
                   eta) -}
d7b9cc4c84b4eba4e706d67aa644c840
  $fReadVolition_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Volition]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Volition]
                   ((InflectionData.$fReadVolition_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[InflectionData.Volition]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[InflectionData.Volition]>_R)
                      @ [InflectionData.Volition]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [InflectionData.Volition]))) -}
c942a7775ac0b3595268c20738fabd56
  $fShow(,,,,,,,,,,,,,,,,,) ::
    (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
     GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
     GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
     GHC.Show.Show l, GHC.Show.Show m, GHC.Show.Show n, GHC.Show.Show o,
     GHC.Show.Show p, GHC.Show.Show q, GHC.Show.Show r) =>
    GHC.Show.Show
      (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r)
  DFunId[0]
  {- Arity: 18,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a20
                      @ b
                      @ c
                      @ d
                      @ e
                      @ f
                      @ g
                      @ h
                      @ i
                      @ j
                      @ k
                      @ l
                      @ m
                      @ n
                      @ o
                      @ p
                      @ q
                      @ r
                      $dShow :: GHC.Show.Show a20
                      $dShow1 :: GHC.Show.Show b
                      $dShow2 :: GHC.Show.Show c
                      $dShow3 :: GHC.Show.Show d
                      $dShow4 :: GHC.Show.Show e
                      $dShow5 :: GHC.Show.Show f
                      $dShow6 :: GHC.Show.Show g
                      $dShow7 :: GHC.Show.Show h
                      $dShow8 :: GHC.Show.Show i
                      $dShow9 :: GHC.Show.Show j
                      $dShow10 :: GHC.Show.Show k
                      $dShow11 :: GHC.Show.Show l
                      $dShow12 :: GHC.Show.Show m
                      $dShow13 :: GHC.Show.Show n
                      $dShow14 :: GHC.Show.Show o
                      $dShow15 :: GHC.Show.Show p
                      $dShow16 :: GHC.Show.Show q
                      $dShow17 :: GHC.Show.Show r.
                  @ (a20, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r)
                  (InflectionData.$fShow(,,,,,,,,,,,,,,,,,)_$cshowsPrec
                     @ a20
                     @ b
                     @ c
                     @ d
                     @ e
                     @ f
                     @ g
                     @ h
                     @ i
                     @ j
                     @ k
                     @ l
                     @ m
                     @ n
                     @ o
                     @ p
                     @ q
                     @ r
                     $dShow
                     $dShow1
                     $dShow2
                     $dShow3
                     $dShow4
                     $dShow5
                     $dShow6
                     $dShow7
                     $dShow8
                     $dShow9
                     $dShow10
                     $dShow11
                     $dShow12
                     $dShow13
                     $dShow14
                     $dShow15
                     $dShow16
                     $dShow17)
                  (InflectionData.$fShow(,,,,,,,,,,,,,,,,,)_$cshow
                     @ a20
                     @ b
                     @ c
                     @ d
                     @ e
                     @ f
                     @ g
                     @ h
                     @ i
                     @ j
                     @ k
                     @ l
                     @ m
                     @ n
                     @ o
                     @ p
                     @ q
                     @ r
                     $dShow
                     $dShow1
                     $dShow2
                     $dShow3
                     $dShow4
                     $dShow5
                     $dShow6
                     $dShow7
                     $dShow8
                     $dShow9
                     $dShow10
                     $dShow11
                     $dShow12
                     $dShow13
                     $dShow14
                     $dShow15
                     $dShow16
                     $dShow17)
                  (InflectionData.$fShow(,,,,,,,,,,,,,,,,,)_$cshowList
                     @ a20
                     @ b
                     @ c
                     @ d
                     @ e
                     @ f
                     @ g
                     @ h
                     @ i
                     @ j
                     @ k
                     @ l
                     @ m
                     @ n
                     @ o
                     @ p
                     @ q
                     @ r
                     $dShow
                     $dShow1
                     $dShow2
                     $dShow3
                     $dShow4
                     $dShow5
                     $dShow6
                     $dShow7
                     $dShow8
                     $dShow9
                     $dShow10
                     $dShow11
                     $dShow12
                     $dShow13
                     $dShow14
                     $dShow15
                     $dShow16
                     $dShow17) -}
92661c975df3b59ae2c45cdd9cc1bb39
  $fShow(,,,,,,,,,,,,,,,,,)1 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# ')') -}
dace8b484561a502ea588a88a341bf42
  $fShow(,,,,,,,,,,,,,,,,,)2 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '(') -}
bf0abf6a1571339179cd00af3e99666c
  $fShow(,,,,,,,,,,,,,,,,,)3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Manifest "#) -}
7e799d10efa21921bd64eb74d8b5da96
  $fShow(,,,,,,,,,,,,,,,,,)_$cshow ::
    (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
     GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
     GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
     GHC.Show.Show l, GHC.Show.Show m, GHC.Show.Show n, GHC.Show.Show o,
     GHC.Show.Show p, GHC.Show.Show q, GHC.Show.Show r) =>
    (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r)
    -> GHC.Base.String
  {- Arity: 19,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Unfolding: InlineRule (19, True, False)
                (\ @ a20
                   @ b
                   @ c
                   @ d
                   @ e
                   @ f
                   @ g
                   @ h
                   @ i
                   @ j
                   @ k
                   @ l
                   @ m
                   @ n
                   @ o
                   @ p
                   @ q
                   @ r
                   $dShow :: GHC.Show.Show a20
                   $dShow1 :: GHC.Show.Show b
                   $dShow2 :: GHC.Show.Show c
                   $dShow3 :: GHC.Show.Show d
                   $dShow4 :: GHC.Show.Show e
                   $dShow5 :: GHC.Show.Show f
                   $dShow6 :: GHC.Show.Show g
                   $dShow7 :: GHC.Show.Show h
                   $dShow8 :: GHC.Show.Show i
                   $dShow9 :: GHC.Show.Show j
                   $dShow10 :: GHC.Show.Show k
                   $dShow11 :: GHC.Show.Show l
                   $dShow12 :: GHC.Show.Show m
                   $dShow13 :: GHC.Show.Show n
                   $dShow14 :: GHC.Show.Show o
                   $dShow15 :: GHC.Show.Show p
                   $dShow16 :: GHC.Show.Show q
                   $dShow17 :: GHC.Show.Show r
                   x :: (a20, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) ->
                 InflectionData.$fShow(,,,,,,,,,,,,,,,,,)_$cshowsPrec
                   @ a20
                   @ b
                   @ c
                   @ d
                   @ e
                   @ f
                   @ g
                   @ h
                   @ i
                   @ j
                   @ k
                   @ l
                   @ m
                   @ n
                   @ o
                   @ p
                   @ q
                   @ r
                   $dShow
                   $dShow1
                   $dShow2
                   $dShow3
                   $dShow4
                   $dShow5
                   $dShow6
                   $dShow7
                   $dShow8
                   $dShow9
                   $dShow10
                   $dShow11
                   $dShow12
                   $dShow13
                   $dShow14
                   $dShow15
                   $dShow16
                   $dShow17
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
0dd0d40234ceea6e59592730b3cc4d8a
  $fShow(,,,,,,,,,,,,,,,,,)_$cshowList ::
    (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
     GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
     GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
     GHC.Show.Show l, GHC.Show.Show m, GHC.Show.Show n, GHC.Show.Show o,
     GHC.Show.Show p, GHC.Show.Show q, GHC.Show.Show r) =>
    [(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r)]
    -> GHC.Show.ShowS
  {- Arity: 20,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (20, True, False)
                (\ @ a20
                   @ b
                   @ c
                   @ d
                   @ e
                   @ f
                   @ g
                   @ h
                   @ i
                   @ j
                   @ k
                   @ l
                   @ m
                   @ n
                   @ o
                   @ p
                   @ q
                   @ r
                   $dShow :: GHC.Show.Show a20
                   $dShow1 :: GHC.Show.Show b
                   $dShow2 :: GHC.Show.Show c
                   $dShow3 :: GHC.Show.Show d
                   $dShow4 :: GHC.Show.Show e
                   $dShow5 :: GHC.Show.Show f
                   $dShow6 :: GHC.Show.Show g
                   $dShow7 :: GHC.Show.Show h
                   $dShow8 :: GHC.Show.Show i
                   $dShow9 :: GHC.Show.Show j
                   $dShow10 :: GHC.Show.Show k
                   $dShow11 :: GHC.Show.Show l
                   $dShow12 :: GHC.Show.Show m
                   $dShow13 :: GHC.Show.Show n
                   $dShow14 :: GHC.Show.Show o
                   $dShow15 :: GHC.Show.Show p
                   $dShow16 :: GHC.Show.Show q
                   $dShow17 :: GHC.Show.Show r
                   ls :: [(a20, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r)]
                   s :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (a20, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r)
                   (InflectionData.$fShow(,,,,,,,,,,,,,,,,,)_$cshowsPrec
                      @ a20
                      @ b
                      @ c
                      @ d
                      @ e
                      @ f
                      @ g
                      @ h
                      @ i
                      @ j
                      @ k
                      @ l
                      @ m
                      @ n
                      @ o
                      @ p
                      @ q
                      @ r
                      $dShow
                      $dShow1
                      $dShow2
                      $dShow3
                      $dShow4
                      $dShow5
                      $dShow6
                      $dShow7
                      $dShow8
                      $dShow9
                      $dShow10
                      $dShow11
                      $dShow12
                      $dShow13
                      $dShow14
                      $dShow15
                      $dShow16
                      $dShow17
                      GHC.Show.shows18)
                   ls
                   s) -}
c944427a4b7aadc2f44f32141ad2eb0e
  $fShow(,,,,,,,,,,,,,,,,,)_$cshowsPrec ::
    (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
     GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
     GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
     GHC.Show.Show l, GHC.Show.Show m, GHC.Show.Show n, GHC.Show.Show o,
     GHC.Show.Show p, GHC.Show.Show q, GHC.Show.Show r) =>
    GHC.Types.Int
    -> (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r)
    -> GHC.Show.ShowS
  {- Arity: 20,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,A><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (20, True, False)
                (\ @ a20
                   @ b
                   @ c
                   @ d
                   @ e
                   @ f
                   @ g
                   @ h
                   @ i
                   @ j
                   @ k
                   @ l
                   @ m
                   @ n
                   @ o
                   @ p
                   @ q
                   @ r
                   w :: GHC.Show.Show a20
                   w1 :: GHC.Show.Show b
                   w2 :: GHC.Show.Show c
                   w3 :: GHC.Show.Show d
                   w4 :: GHC.Show.Show e
                   w5 :: GHC.Show.Show f
                   w6 :: GHC.Show.Show g
                   w7 :: GHC.Show.Show h
                   w8 :: GHC.Show.Show i
                   w9 :: GHC.Show.Show j
                   w10 :: GHC.Show.Show k
                   w11 :: GHC.Show.Show l
                   w12 :: GHC.Show.Show m
                   w13 :: GHC.Show.Show n
                   w14 :: GHC.Show.Show o
                   w15 :: GHC.Show.Show p
                   w16 :: GHC.Show.Show q
                   w17 :: GHC.Show.Show r
                   w18 :: GHC.Types.Int
                   w19 :: (a20, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) ->
                 case w19 of ww { (,,,,,,,,,,,,,,,,,) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ->
                 InflectionData.$w$cshowsPrec8
                   @ a20
                   @ b
                   @ c
                   @ d
                   @ e
                   @ f
                   @ g
                   @ h
                   @ i
                   @ j
                   @ k
                   @ l
                   @ m
                   @ n
                   @ o
                   @ p
                   @ q
                   @ r
                   w
                   w1
                   w2
                   w3
                   w4
                   w5
                   w6
                   w7
                   w8
                   w9
                   w10
                   w11
                   w12
                   w13
                   w14
                   w15
                   w16
                   w17
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww17
                   ww18 }) -}
14fec65287fdbb06ce4e9e396345475a
  $fShow(,,,,,,,,,,,,,,,,,)_$s$cshowsPrec1 ::
    GHC.Types.Int
    -> InflectionData.Manifest InflectionData.Volition
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Manifest InflectionData.Volition
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest22 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShow(,,,,,,,,,,,,,,,,,)3
                            (InflectionData.$w$cshowsPrec
                               b1
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (case b2 of wild2 {
                                     InflectionData.VOL
                                     -> GHC.Base.++
                                          @ GHC.Types.Char
                                          InflectionData.$fReadVolition11
                                          x1
                                     InflectionData.NVOL
                                     -> GHC.Base.++
                                          @ GHC.Types.Char
                                          InflectionData.$fReadVolition8
                                          x1 })))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
14fec65287fdbb06ce4e9e396345475a
  $fShow(,,,,,,,,,,,,,,,,,)_$s$cshowsPrec10 ::
    GHC.Types.Int
    -> InflectionData.Manifest InflectionData.Clusivity
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Manifest InflectionData.Clusivity
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest22 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShow(,,,,,,,,,,,,,,,,,)3
                            (InflectionData.$w$cshowsPrec
                               b1
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (case b2 of wild2 {
                                     InflectionData.INCL
                                     -> GHC.Base.++
                                          @ GHC.Types.Char
                                          InflectionData.$fReadClusivity11
                                          x1
                                     InflectionData.EXCL
                                     -> GHC.Base.++
                                          @ GHC.Types.Char
                                          InflectionData.$fReadClusivity8
                                          x1 })))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
14fec65287fdbb06ce4e9e396345475a
  $fShow(,,,,,,,,,,,,,,,,,)_$s$cshowsPrec11 ::
    GHC.Types.Int
    -> InflectionData.Manifest InflectionData.Person -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Manifest InflectionData.Person
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest22 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShow(,,,,,,,,,,,,,,,,,)3
                            (InflectionData.$w$cshowsPrec
                               b1
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (case b2 of wild2 {
                                     InflectionData.FIRST
                                     -> GHC.Base.++
                                          @ GHC.Types.Char
                                          InflectionData.$fReadPerson15
                                          x1
                                     InflectionData.SECOND
                                     -> GHC.Base.++
                                          @ GHC.Types.Char
                                          InflectionData.$fReadPerson12
                                          x1
                                     InflectionData.THIRD
                                     -> GHC.Base.++
                                          @ GHC.Types.Char
                                          InflectionData.$fReadPerson9
                                          x1 })))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
14fec65287fdbb06ce4e9e396345475a
  $fShow(,,,,,,,,,,,,,,,,,)_$s$cshowsPrec12 ::
    GHC.Types.Int
    -> InflectionData.Manifest InflectionData.Topic -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Manifest InflectionData.Topic
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest22 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShow(,,,,,,,,,,,,,,,,,)3
                            (InflectionData.$w$cshowsPrec
                               b1
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (case b2 of wild2 {
                                     InflectionData.TOP
                                     -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadTopic11 x1
                                     InflectionData.NTOP
                                     -> GHC.Base.++
                                          @ GHC.Types.Char
                                          InflectionData.$fReadTopic8
                                          x1 })))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
14fec65287fdbb06ce4e9e396345475a
  $fShow(,,,,,,,,,,,,,,,,,)_$s$cshowsPrec13 ::
    GHC.Types.Int
    -> InflectionData.Manifest InflectionData.Specificity
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Manifest InflectionData.Specificity
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest22 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShow(,,,,,,,,,,,,,,,,,)3
                            (InflectionData.$w$cshowsPrec
                               b1
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (case b2 of wild2 {
                                     InflectionData.SPEC
                                     -> GHC.Base.++
                                          @ GHC.Types.Char
                                          InflectionData.$fReadSpecificity11
                                          x1
                                     InflectionData.NSPEC
                                     -> GHC.Base.++
                                          @ GHC.Types.Char
                                          InflectionData.$fReadSpecificity8
                                          x1 })))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
14fec65287fdbb06ce4e9e396345475a
  $fShow(,,,,,,,,,,,,,,,,,)_$s$cshowsPrec14 ::
    GHC.Types.Int
    -> InflectionData.Manifest InflectionData.Definiteness
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Manifest InflectionData.Definiteness
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest22 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShow(,,,,,,,,,,,,,,,,,)3
                            (InflectionData.$w$cshowsPrec
                               b1
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (case b2 of wild2 {
                                     InflectionData.DEF
                                     -> GHC.Base.++
                                          @ GHC.Types.Char
                                          InflectionData.$fReadDefiniteness11
                                          x1
                                     InflectionData.INDF
                                     -> GHC.Base.++
                                          @ GHC.Types.Char
                                          InflectionData.$fReadDefiniteness8
                                          x1 })))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
14fec65287fdbb06ce4e9e396345475a
  $fShow(,,,,,,,,,,,,,,,,,)_$s$cshowsPrec15 ::
    GHC.Types.Int
    -> InflectionData.Manifest InflectionData.Number -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Manifest InflectionData.Number
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest22 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             InflectionData.$fShow(,,,,,,,,,,,,,,,,,)3
                             (InflectionData.$w$cshowsPrec
                                b1
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.showSpace1
                                   (InflectionData.$w$cshowsPrec4 b2 eta)))
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                InflectionData.$fShow(,,,,,,,,,,,,,,,,,)3
                                (InflectionData.$w$cshowsPrec
                                   b1
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.showSpace1
                                      (InflectionData.$w$cshowsPrec4
                                         b2
                                         (GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.shows8
                                            eta))))) } } }) -}
14fec65287fdbb06ce4e9e396345475a
  $fShow(,,,,,,,,,,,,,,,,,)_$s$cshowsPrec16 ::
    GHC.Types.Int
    -> InflectionData.Manifest InflectionData.Case -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Manifest InflectionData.Case
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest22 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             InflectionData.$fShow(,,,,,,,,,,,,,,,,,)3
                             (InflectionData.$w$cshowsPrec
                                b1
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.showSpace1
                                   (InflectionData.$w$cshowsPrec5 b2 eta)))
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                InflectionData.$fShow(,,,,,,,,,,,,,,,,,)3
                                (InflectionData.$w$cshowsPrec
                                   b1
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.showSpace1
                                      (InflectionData.$w$cshowsPrec5
                                         b2
                                         (GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.shows8
                                            eta))))) } } }) -}
14fec65287fdbb06ce4e9e396345475a
  $fShow(,,,,,,,,,,,,,,,,,)_$s$cshowsPrec17 ::
    GHC.Types.Int
    -> InflectionData.Manifest InflectionData.Animacy -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Manifest InflectionData.Animacy
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest22 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             InflectionData.$fShow(,,,,,,,,,,,,,,,,,)3
                             (InflectionData.$w$cshowsPrec
                                b1
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.showSpace1
                                   (InflectionData.$w$cshowsPrec6 b2 eta)))
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                InflectionData.$fShow(,,,,,,,,,,,,,,,,,)3
                                (InflectionData.$w$cshowsPrec
                                   b1
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.showSpace1
                                      (InflectionData.$w$cshowsPrec6
                                         b2
                                         (GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.shows8
                                            eta))))) } } }) -}
14fec65287fdbb06ce4e9e396345475a
  $fShow(,,,,,,,,,,,,,,,,,)_$s$cshowsPrec18 ::
    GHC.Types.Int
    -> InflectionData.Manifest InflectionData.Gender -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Manifest InflectionData.Gender
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest22 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             InflectionData.$fShow(,,,,,,,,,,,,,,,,,)3
                             (InflectionData.$w$cshowsPrec
                                b1
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.showSpace1
                                   (InflectionData.$w$cshowsPrec7 b2 eta)))
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                InflectionData.$fShow(,,,,,,,,,,,,,,,,,)3
                                (InflectionData.$w$cshowsPrec
                                   b1
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.showSpace1
                                      (InflectionData.$w$cshowsPrec7
                                         b2
                                         (GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.shows8
                                            eta))))) } } }) -}
14fec65287fdbb06ce4e9e396345475a
  $fShow(,,,,,,,,,,,,,,,,,)_$s$cshowsPrec2 ::
    GHC.Types.Int
    -> InflectionData.Manifest InflectionData.Transitivity
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Manifest InflectionData.Transitivity
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest22 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShow(,,,,,,,,,,,,,,,,,)3
                            (InflectionData.$w$cshowsPrec
                               b1
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (case b2 of wild2 {
                                     InflectionData.NTRANS
                                     -> GHC.Base.++
                                          @ GHC.Types.Char
                                          InflectionData.$fReadTransitivity15
                                          x1
                                     InflectionData.TRANS
                                     -> GHC.Base.++
                                          @ GHC.Types.Char
                                          InflectionData.$fReadTransitivity12
                                          x1
                                     InflectionData.DITRANS
                                     -> GHC.Base.++
                                          @ GHC.Types.Char
                                          InflectionData.$fReadTransitivity9
                                          x1 })))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
14fec65287fdbb06ce4e9e396345475a
  $fShow(,,,,,,,,,,,,,,,,,)_$s$cshowsPrec3 ::
    GHC.Types.Int
    -> InflectionData.Manifest InflectionData.Evidentiality
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Manifest InflectionData.Evidentiality
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest22 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             InflectionData.$fShow(,,,,,,,,,,,,,,,,,)3
                             (InflectionData.$w$cshowsPrec
                                b1
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.showSpace1
                                   (InflectionData.$w$cshowsPrec1 b2 eta)))
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                InflectionData.$fShow(,,,,,,,,,,,,,,,,,)3
                                (InflectionData.$w$cshowsPrec
                                   b1
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.showSpace1
                                      (InflectionData.$w$cshowsPrec1
                                         b2
                                         (GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.shows8
                                            eta))))) } } }) -}
14fec65287fdbb06ce4e9e396345475a
  $fShow(,,,,,,,,,,,,,,,,,)_$s$cshowsPrec4 ::
    GHC.Types.Int
    -> InflectionData.Manifest InflectionData.Voice -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Manifest InflectionData.Voice
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest22 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShow(,,,,,,,,,,,,,,,,,)3
                            (InflectionData.$w$cshowsPrec
                               b1
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (case b2 of wild2 {
                                     InflectionData.ACTIVE
                                     -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadVoice15 x1
                                     InflectionData.MIDDLE
                                     -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadVoice12 x1
                                     InflectionData.PASSIVE
                                     -> GHC.Base.++
                                          @ GHC.Types.Char
                                          InflectionData.$fReadVoice9
                                          x1 })))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
14fec65287fdbb06ce4e9e396345475a
  $fShow(,,,,,,,,,,,,,,,,,)_$s$cshowsPrec5 ::
    GHC.Types.Int
    -> InflectionData.Manifest InflectionData.Mood -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Manifest InflectionData.Mood
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest22 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             InflectionData.$fShow(,,,,,,,,,,,,,,,,,)3
                             (InflectionData.$w$cshowsPrec
                                b1
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.showSpace1
                                   (InflectionData.$w$cshowsPrec2 b2 eta)))
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                InflectionData.$fShow(,,,,,,,,,,,,,,,,,)3
                                (InflectionData.$w$cshowsPrec
                                   b1
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.showSpace1
                                      (InflectionData.$w$cshowsPrec2
                                         b2
                                         (GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.shows8
                                            eta))))) } } }) -}
14fec65287fdbb06ce4e9e396345475a
  $fShow(,,,,,,,,,,,,,,,,,)_$s$cshowsPrec6 ::
    GHC.Types.Int
    -> InflectionData.Manifest InflectionData.Aspect -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Manifest InflectionData.Aspect
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest22 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShow(,,,,,,,,,,,,,,,,,)3
                            (InflectionData.$w$cshowsPrec
                               b1
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (case b2 of wild2 {
                                     InflectionData.PFV
                                     -> GHC.Base.++
                                          @ GHC.Types.Char
                                          InflectionData.$fReadAspect11
                                          x1
                                     InflectionData.IPFV
                                     -> GHC.Base.++
                                          @ GHC.Types.Char
                                          InflectionData.$fReadAspect8
                                          x1 })))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
14fec65287fdbb06ce4e9e396345475a
  $fShow(,,,,,,,,,,,,,,,,,)_$s$cshowsPrec7 ::
    GHC.Types.Int
    -> InflectionData.Manifest InflectionData.Tense -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Manifest InflectionData.Tense
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest22 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             InflectionData.$fShow(,,,,,,,,,,,,,,,,,)3
                             (InflectionData.$w$cshowsPrec
                                b1
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.showSpace1
                                   (InflectionData.$w$cshowsPrec3 b2 eta)))
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                InflectionData.$fShow(,,,,,,,,,,,,,,,,,)3
                                (InflectionData.$w$cshowsPrec
                                   b1
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.showSpace1
                                      (InflectionData.$w$cshowsPrec3
                                         b2
                                         (GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.shows8
                                            eta))))) } } }) -}
14fec65287fdbb06ce4e9e396345475a
  $fShow(,,,,,,,,,,,,,,,,,)_$s$cshowsPrec8 ::
    GHC.Types.Int
    -> InflectionData.Manifest InflectionData.Polarity
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Manifest InflectionData.Polarity
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest22 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShow(,,,,,,,,,,,,,,,,,)3
                            (InflectionData.$w$cshowsPrec
                               b1
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (case b2 of wild2 {
                                     InflectionData.AFF
                                     -> GHC.Base.++
                                          @ GHC.Types.Char
                                          InflectionData.$fReadPolarity11
                                          x1
                                     InflectionData.NEG
                                     -> GHC.Base.++
                                          @ GHC.Types.Char
                                          InflectionData.$fReadPolarity8
                                          x1 })))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
14fec65287fdbb06ce4e9e396345475a
  $fShow(,,,,,,,,,,,,,,,,,)_$s$cshowsPrec9 ::
    GHC.Types.Int
    -> InflectionData.Manifest InflectionData.Honorific
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Manifest InflectionData.Honorific
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest22 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShow(,,,,,,,,,,,,,,,,,)3
                            (InflectionData.$w$cshowsPrec
                               b1
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (case b2 of wild2 {
                                     InflectionData.FAM
                                     -> GHC.Base.++
                                          @ GHC.Types.Char
                                          InflectionData.$fReadHonorific11
                                          x1
                                     InflectionData.FORM
                                     -> GHC.Base.++
                                          @ GHC.Types.Char
                                          InflectionData.$fReadHonorific8
                                          x1 })))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
fdd324339d646dcb3174c00a146e460c
  $fShow(,,,,,,,,,,,,,,,,,)_go ::
    [GHC.Base.String -> GHC.Base.String]
    -> GHC.Base.String -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U> -}
ef42610b404b654d1dfaa49f103925b4
  $fShowAgreement :: GHC.Show.Show InflectionData.Agreement
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Agreement
                  InflectionData.$fShowAgreement_$cshowsPrec
                  InflectionData.$fShowAgreement_$cshow
                  InflectionData.$fShowAgreement_$cshowList -}
2829004f86c028ee96f81739e9772565
  $fShowAgreementSystem ::
    GHC.Show.Show InflectionData.AgreementSystem
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.AgreementSystem
                  InflectionData.$fShowAgreementSystem_$cshowsPrec
                  InflectionData.$fShowAgreementSystem_$cshow
                  InflectionData.$fShowAgreementSystem_$cshowList -}
2829004f86c028ee96f81739e9772565
  $fShowAgreementSystem1 ::
    InflectionData.AgreementSystem -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: InflectionData.AgreementSystem
                   w1 :: GHC.Base.String ->
                 case w of ww { InflectionData.AgreementSystem ww1 ->
                 InflectionData.$w$cshowsPrec10 0 ww1 w1 }) -}
260d27023aaf68a979a52e7c5e9e120d
  $fShowAgreementSystem2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AgreementSystem "#) -}
2829004f86c028ee96f81739e9772565
  $fShowAgreementSystem_$cshow ::
    InflectionData.AgreementSystem -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.AgreementSystem ->
                 InflectionData.$fShowAgreementSystem_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
2829004f86c028ee96f81739e9772565
  $fShowAgreementSystem_$cshowList ::
    [InflectionData.AgreementSystem] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.AgreementSystem
                   InflectionData.$fShowAgreementSystem1) -}
2829004f86c028ee96f81739e9772565
  $fShowAgreementSystem_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.AgreementSystem -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S,1*U(1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int
                   w1 :: InflectionData.AgreementSystem
                   w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { InflectionData.AgreementSystem ww3 ->
                 InflectionData.$w$cshowsPrec10 ww1 ww3 w2 } }) -}
ef42610b404b654d1dfaa49f103925b4
  $fShowAgreement_$cshow ::
    InflectionData.Agreement -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.Agreement ->
                 InflectionData.$fShowAgreement_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
ef42610b404b654d1dfaa49f103925b4
  $fShowAgreement_$cshowList ::
    [InflectionData.Agreement] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Agreement
                   InflectionData.$w$cshowsPrec9) -}
ef42610b404b654d1dfaa49f103925b4
  $fShowAgreement_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Agreement -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: InflectionData.Agreement
                   w2 :: GHC.Base.String ->
                 InflectionData.$w$cshowsPrec9 w1 w2) -}
733cd520a7c9e157df7c0aea38100a5a
  $fShowAnimacy :: GHC.Show.Show InflectionData.Animacy
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Animacy
                  InflectionData.$fShowAnimacy_$cshowsPrec
                  InflectionData.$fShowAnimacy_$cshow
                  InflectionData.$fShowAnimacy_$cshowList -}
733cd520a7c9e157df7c0aea38100a5a
  $fShowAnimacy_$cshow :: InflectionData.Animacy -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.Animacy ->
                 InflectionData.$fShowAnimacy_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
733cd520a7c9e157df7c0aea38100a5a
  $fShowAnimacy_$cshowList ::
    [InflectionData.Animacy] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Animacy
                   InflectionData.$w$cshowsPrec6) -}
733cd520a7c9e157df7c0aea38100a5a
  $fShowAnimacy_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Animacy -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: InflectionData.Animacy
                   w2 :: GHC.Base.String ->
                 InflectionData.$w$cshowsPrec6 w1 w2) -}
3850d91a00b41f2f5240a98d717e8e72
  $fShowAspect :: GHC.Show.Show InflectionData.Aspect
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Aspect
                  InflectionData.$fShowAspect_$cshowsPrec
                  InflectionData.$fShowAspect_$cshow
                  InflectionData.$fShowAspect_$cshowList -}
3850d91a00b41f2f5240a98d717e8e72
  $fShowAspect1 :: InflectionData.Aspect -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.Aspect eta :: GHC.Base.String ->
                 case ds of wild {
                   InflectionData.PFV
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           InflectionData.$fReadAspect11)
                        eta
                   InflectionData.IPFV
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           InflectionData.$fReadAspect8)
                        eta }) -}
3850d91a00b41f2f5240a98d717e8e72
  $fShowAspect_$cshow :: InflectionData.Aspect -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.Aspect ->
                 case x of wild {
                   InflectionData.PFV -> InflectionData.$fReadAspect11
                   InflectionData.IPFV -> InflectionData.$fReadAspect8 }) -}
3850d91a00b41f2f5240a98d717e8e72
  $fShowAspect_$cshowList ::
    [InflectionData.Aspect] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Aspect
                   InflectionData.$fShowAspect1) -}
3850d91a00b41f2f5240a98d717e8e72
  $fShowAspect_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Aspect -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Aspect
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.PFV
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           InflectionData.$fReadAspect11)
                        eta
                   InflectionData.IPFV
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           InflectionData.$fReadAspect8)
                        eta }) -}
3e30b77606116c9a528b5a2b5461d97b
  $fShowCase :: GHC.Show.Show InflectionData.Case
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Case
                  InflectionData.$fShowCase_$cshowsPrec
                  InflectionData.$fShowCase_$cshow
                  InflectionData.$fShowCase_$cshowList -}
3e30b77606116c9a528b5a2b5461d97b
  $fShowCase_$cshow :: InflectionData.Case -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.Case ->
                 InflectionData.$fShowCase_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
3e30b77606116c9a528b5a2b5461d97b
  $fShowCase_$cshowList :: [InflectionData.Case] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Case
                   InflectionData.$w$cshowsPrec5) -}
3e30b77606116c9a528b5a2b5461d97b
  $fShowCase_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Case -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: InflectionData.Case
                   w2 :: GHC.Base.String ->
                 InflectionData.$w$cshowsPrec5 w1 w2) -}
c413fee28212168b6775aefd548e00c9
  $fShowClusivity :: GHC.Show.Show InflectionData.Clusivity
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Clusivity
                  InflectionData.$fShowClusivity_$cshowsPrec
                  InflectionData.$fShowClusivity_$cshow
                  InflectionData.$fShowClusivity_$cshowList -}
c413fee28212168b6775aefd548e00c9
  $fShowClusivity1 :: InflectionData.Clusivity -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.Clusivity eta :: GHC.Base.String ->
                 case ds of wild {
                   InflectionData.INCL
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           InflectionData.$fReadClusivity11)
                        eta
                   InflectionData.EXCL
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           InflectionData.$fReadClusivity8)
                        eta }) -}
c413fee28212168b6775aefd548e00c9
  $fShowClusivity_$cshow ::
    InflectionData.Clusivity -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.Clusivity ->
                 case x of wild {
                   InflectionData.INCL -> InflectionData.$fReadClusivity11
                   InflectionData.EXCL -> InflectionData.$fReadClusivity8 }) -}
c413fee28212168b6775aefd548e00c9
  $fShowClusivity_$cshowList ::
    [InflectionData.Clusivity] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Clusivity
                   InflectionData.$fShowClusivity1) -}
c413fee28212168b6775aefd548e00c9
  $fShowClusivity_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Clusivity -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Clusivity
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.INCL
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           InflectionData.$fReadClusivity11)
                        eta
                   InflectionData.EXCL
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           InflectionData.$fReadClusivity8)
                        eta }) -}
b9da224a5a14860d49d67b2859c0b465
  $fShowDefiniteness :: GHC.Show.Show InflectionData.Definiteness
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Definiteness
                  InflectionData.$fShowDefiniteness_$cshowsPrec
                  InflectionData.$fShowDefiniteness_$cshow
                  InflectionData.$fShowDefiniteness_$cshowList -}
b9da224a5a14860d49d67b2859c0b465
  $fShowDefiniteness1 ::
    InflectionData.Definiteness -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.Definiteness eta :: GHC.Base.String ->
                 case ds of wild {
                   InflectionData.DEF
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           InflectionData.$fReadDefiniteness11)
                        eta
                   InflectionData.INDF
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           InflectionData.$fReadDefiniteness8)
                        eta }) -}
b9da224a5a14860d49d67b2859c0b465
  $fShowDefiniteness_$cshow ::
    InflectionData.Definiteness -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.Definiteness ->
                 case x of wild {
                   InflectionData.DEF -> InflectionData.$fReadDefiniteness11
                   InflectionData.INDF -> InflectionData.$fReadDefiniteness8 }) -}
b9da224a5a14860d49d67b2859c0b465
  $fShowDefiniteness_$cshowList ::
    [InflectionData.Definiteness] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Definiteness
                   InflectionData.$fShowDefiniteness1) -}
b9da224a5a14860d49d67b2859c0b465
  $fShowDefiniteness_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Definiteness -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Definiteness
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.DEF
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           InflectionData.$fReadDefiniteness11)
                        eta
                   InflectionData.INDF
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           InflectionData.$fReadDefiniteness8)
                        eta }) -}
81ef3758cd3f737f92a15566b4335acf
  $fShowEvidentiality :: GHC.Show.Show InflectionData.Evidentiality
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Evidentiality
                  InflectionData.$fShowEvidentiality_$cshowsPrec
                  InflectionData.$fShowEvidentiality_$cshow
                  InflectionData.$fShowEvidentiality_$cshowList -}
81ef3758cd3f737f92a15566b4335acf
  $fShowEvidentiality_$cshow ::
    InflectionData.Evidentiality -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.Evidentiality ->
                 InflectionData.$fShowEvidentiality_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
81ef3758cd3f737f92a15566b4335acf
  $fShowEvidentiality_$cshowList ::
    [InflectionData.Evidentiality] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Evidentiality
                   InflectionData.$w$cshowsPrec1) -}
81ef3758cd3f737f92a15566b4335acf
  $fShowEvidentiality_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Evidentiality -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: InflectionData.Evidentiality
                   w2 :: GHC.Base.String ->
                 InflectionData.$w$cshowsPrec1 w1 w2) -}
c5edda692e03a9e3df065b8d199e385d
  $fShowGender :: GHC.Show.Show InflectionData.Gender
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Gender
                  InflectionData.$fShowGender_$cshowsPrec
                  InflectionData.$fShowGender_$cshow
                  InflectionData.$fShowGender_$cshowList -}
c5edda692e03a9e3df065b8d199e385d
  $fShowGender_$cshow :: InflectionData.Gender -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.Gender ->
                 InflectionData.$fShowGender_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
c5edda692e03a9e3df065b8d199e385d
  $fShowGender_$cshowList ::
    [InflectionData.Gender] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Gender
                   InflectionData.$w$cshowsPrec7) -}
c5edda692e03a9e3df065b8d199e385d
  $fShowGender_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Gender -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: InflectionData.Gender
                   w2 :: GHC.Base.String ->
                 InflectionData.$w$cshowsPrec7 w1 w2) -}
dfb063e584002de31fb83fb825dd29ff
  $fShowHonorific :: GHC.Show.Show InflectionData.Honorific
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Honorific
                  InflectionData.$fShowHonorific_$cshowsPrec
                  InflectionData.$fShowHonorific_$cshow
                  InflectionData.$fShowHonorific_$cshowList -}
dfb063e584002de31fb83fb825dd29ff
  $fShowHonorific1 :: InflectionData.Honorific -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.Honorific eta :: GHC.Base.String ->
                 case ds of wild {
                   InflectionData.FAM
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           InflectionData.$fReadHonorific11)
                        eta
                   InflectionData.FORM
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           InflectionData.$fReadHonorific8)
                        eta }) -}
dfb063e584002de31fb83fb825dd29ff
  $fShowHonorific_$cshow ::
    InflectionData.Honorific -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.Honorific ->
                 case x of wild {
                   InflectionData.FAM -> InflectionData.$fReadHonorific11
                   InflectionData.FORM -> InflectionData.$fReadHonorific8 }) -}
dfb063e584002de31fb83fb825dd29ff
  $fShowHonorific_$cshowList ::
    [InflectionData.Honorific] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Honorific
                   InflectionData.$fShowHonorific1) -}
dfb063e584002de31fb83fb825dd29ff
  $fShowHonorific_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Honorific -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Honorific
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.FAM
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           InflectionData.$fReadHonorific11)
                        eta
                   InflectionData.FORM
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           InflectionData.$fReadHonorific8)
                        eta }) -}
14fec65287fdbb06ce4e9e396345475a
  $fShowManifest ::
    GHC.Show.Show a => GHC.Show.Show (InflectionData.Manifest a)
  DFunId[0]
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a20 $dShow :: GHC.Show.Show a20.
                  @ (InflectionData.Manifest a20)
                  (InflectionData.$fShowManifest_$cshowsPrec @ a20 $dShow)
                  (InflectionData.$fShowManifest_$cshow @ a20 $dShow)
                  (InflectionData.$fShowManifest_$cshowList @ a20 $dShow) -}
5a8ab4c8c4b866d5381db416ee1e7fdc
  $fShowManifest2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0) -}
01e6e6de011e2e756e448eaff2915fae
  $fShowManifest20 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   InflectionData.$fReadManifest22) -}
5cbe6db833ae3aa93592b3769fcc5964
  $fShowManifestSystem :: GHC.Show.Show InflectionData.ManifestSystem
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.ManifestSystem
                  InflectionData.$fShowManifestSystem_$cshowsPrec
                  InflectionData.$fShowManifestSystem_$cshow
                  InflectionData.$fShowManifestSystem_$cshowList -}
5cbe6db833ae3aa93592b3769fcc5964
  $fShowManifestSystem1 ::
    InflectionData.ManifestSystem -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: InflectionData.ManifestSystem
                   w1 :: GHC.Base.String ->
                 InflectionData.$w$cshowsPrec11 0 w w1) -}
717c495b15cef434cf2b7d16cb520e38
  $fShowManifestSystem2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SuffixSystem "#) -}
029e155172a07b95ca0e08b1a0bbdcb7
  $fShowManifestSystem3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PrefixSystem "#) -}
fc33ee55eac40b974f1f0c4d4224d963
  $fShowManifestSystem4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "PostParticleSystem "#) -}
46f65c33644920d95256e9b86ec65f11
  $fShowManifestSystem5 ::
    (PhonemeData.Morpheme,
     (InflectionData.Manifest InflectionData.Gender,
      InflectionData.Manifest InflectionData.Animacy,
      InflectionData.Manifest InflectionData.Case,
      InflectionData.Manifest InflectionData.Number,
      InflectionData.Manifest InflectionData.Definiteness,
      InflectionData.Manifest InflectionData.Specificity,
      InflectionData.Manifest InflectionData.Topic,
      InflectionData.Manifest InflectionData.Person,
      InflectionData.Manifest InflectionData.Clusivity,
      InflectionData.Manifest InflectionData.Honorific,
      InflectionData.Manifest InflectionData.Polarity,
      InflectionData.Manifest InflectionData.Tense,
      InflectionData.Manifest InflectionData.Aspect,
      InflectionData.Manifest InflectionData.Mood,
      InflectionData.Manifest InflectionData.Voice,
      InflectionData.Manifest InflectionData.Evidentiality,
      InflectionData.Manifest InflectionData.Transitivity,
      InflectionData.Manifest InflectionData.Volition))
    -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ w3 :: (PhonemeData.Morpheme,
                          (InflectionData.Manifest InflectionData.Gender,
                           InflectionData.Manifest InflectionData.Animacy,
                           InflectionData.Manifest InflectionData.Case,
                           InflectionData.Manifest InflectionData.Number,
                           InflectionData.Manifest InflectionData.Definiteness,
                           InflectionData.Manifest InflectionData.Specificity,
                           InflectionData.Manifest InflectionData.Topic,
                           InflectionData.Manifest InflectionData.Person,
                           InflectionData.Manifest InflectionData.Clusivity,
                           InflectionData.Manifest InflectionData.Honorific,
                           InflectionData.Manifest InflectionData.Polarity,
                           InflectionData.Manifest InflectionData.Tense,
                           InflectionData.Manifest InflectionData.Aspect,
                           InflectionData.Manifest InflectionData.Mood,
                           InflectionData.Manifest InflectionData.Voice,
                           InflectionData.Manifest InflectionData.Evidentiality,
                           InflectionData.Manifest InflectionData.Transitivity,
                           InflectionData.Manifest InflectionData.Volition))
                   w4 :: GHC.Base.String[OneShot] ->
                 case w3 of ww { (,) ww1 ww2 ->
                 GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows9
                   (case ww1 of ww4 { PhonemeData.Morpheme ww3 ->
                    PhonemeData.$w$cshowsPrec4
                      0
                      ww3
                      (GHC.Types.:
                         @ GHC.Types.Char
                         GHC.Show.showList__1
                         (GHC.Show.$fShow(,)_$sgo
                            (case ww2 of ww5 { (,,,,,,,,,,,,,,,,,) ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ww21 ww22 ww23 ->
                             InflectionData.$w$s$cshowsPrec
                               ww6
                               ww7
                               ww8
                               ww9
                               ww10
                               ww11
                               ww12
                               ww13
                               ww14
                               ww15
                               ww16
                               ww17
                               ww18
                               ww19
                               ww20
                               ww21
                               ww22
                               ww23 })
                            (GHC.Types.[] @ GHC.Show.ShowS)
                            (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w4))) }) }) -}
d07a67ede8f86b33cc72377b3541eddb
  $fShowManifestSystem6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PreParticleSystem "#) -}
5cbe6db833ae3aa93592b3769fcc5964
  $fShowManifestSystem_$cshow ::
    InflectionData.ManifestSystem -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.ManifestSystem ->
                 InflectionData.$fShowManifestSystem_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
5cbe6db833ae3aa93592b3769fcc5964
  $fShowManifestSystem_$cshowList ::
    [InflectionData.ManifestSystem] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.ManifestSystem
                   InflectionData.$fShowManifestSystem1) -}
5cbe6db833ae3aa93592b3769fcc5964
  $fShowManifestSystem_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.ManifestSystem -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S,1*U><L,U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int
                   w1 :: InflectionData.ManifestSystem
                   w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 InflectionData.$w$cshowsPrec11 ww1 w1 w2 }) -}
2e270cd14c5f83f9fdcd19315b6b2c0b
  $fShowManifestType :: GHC.Show.Show InflectionData.ManifestType
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.ManifestType
                  InflectionData.$fShowManifestType_$cshowsPrec
                  InflectionData.$fShowManifestType_$cshow
                  InflectionData.$fShowManifestType_$cshowList -}
2e270cd14c5f83f9fdcd19315b6b2c0b
  $fShowManifestType_$cshow ::
    InflectionData.ManifestType -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.ManifestType ->
                 InflectionData.$fShowManifestType_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
2e270cd14c5f83f9fdcd19315b6b2c0b
  $fShowManifestType_$cshowList ::
    [InflectionData.ManifestType] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.ManifestType
                   InflectionData.$w$cshowsPrec) -}
2e270cd14c5f83f9fdcd19315b6b2c0b
  $fShowManifestType_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.ManifestType -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: InflectionData.ManifestType
                   w2 :: GHC.Base.String ->
                 InflectionData.$w$cshowsPrec w1 w2) -}
14fec65287fdbb06ce4e9e396345475a
  $fShowManifest_$cshow ::
    GHC.Show.Show a => InflectionData.Manifest a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(1*C1(C1(C1(U))),A,A)><S,1*U>,
     Unfolding: (\ @ a20
                   $dShow :: GHC.Show.Show a20
                   x :: InflectionData.Manifest a20 ->
                 case x of wild {
                   InflectionData.NoManifest -> InflectionData.$fReadManifest22
                   InflectionData.Manifest b1 b2
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fShow(,,,,,,,,,,,,,,,,,)3
                        (InflectionData.$w$cshowsPrec
                           b1
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.showSpace1
                              (GHC.Show.showsPrec
                                 @ a20
                                 $dShow
                                 InflectionData.$fReadManifest4
                                 b2
                                 (GHC.Types.[] @ GHC.Types.Char)))) }) -}
14fec65287fdbb06ce4e9e396345475a
  $fShowManifest_$cshowList ::
    GHC.Show.Show a => [InflectionData.Manifest a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a20
                   $dShow :: GHC.Show.Show a20
                   eta :: [InflectionData.Manifest a20]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (InflectionData.Manifest a20)
                   (InflectionData.$fShowManifest_$cshowsPrec
                      @ a20
                      $dShow
                      InflectionData.$fShowManifest2)
                   eta
                   eta1) -}
14fec65287fdbb06ce4e9e396345475a
  $fShowManifest_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int -> InflectionData.Manifest a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(U)><S,1*U>,
     Unfolding: (\ @ a20
                   $dShow :: GHC.Show.Show a20
                   ds :: GHC.Types.Int
                   ds1 :: InflectionData.Manifest a20 ->
                 case ds1 of wild {
                   InflectionData.NoManifest -> InflectionData.$fShowManifest20
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.showsPrec @ a20 $dShow InflectionData.$fReadManifest4 b2
                      } in
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ x1 :: GHC.Base.String ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShow(,,,,,,,,,,,,,,,,,)3
                            (InflectionData.$w$cshowsPrec
                               b1
                               (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x1)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p
                        GHC.Types.True
                        -> \ x1 :: GHC.Base.String ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x1)) } } }) -}
c8b893053b386faa19ee0015c2b817c2
  $fShowMood :: GHC.Show.Show InflectionData.Mood
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Mood
                  InflectionData.$fShowMood_$cshowsPrec
                  InflectionData.$fShowMood_$cshow
                  InflectionData.$fShowMood_$cshowList -}
c8b893053b386faa19ee0015c2b817c2
  $fShowMood_$cshow :: InflectionData.Mood -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.Mood ->
                 InflectionData.$fShowMood_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
c8b893053b386faa19ee0015c2b817c2
  $fShowMood_$cshowList :: [InflectionData.Mood] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Mood
                   InflectionData.$w$cshowsPrec2) -}
c8b893053b386faa19ee0015c2b817c2
  $fShowMood_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Mood -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: InflectionData.Mood
                   w2 :: GHC.Base.String ->
                 InflectionData.$w$cshowsPrec2 w1 w2) -}
50da230f212270d0c1b92a32c3347c6c
  $fShowNumber :: GHC.Show.Show InflectionData.Number
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Number
                  InflectionData.$fShowNumber_$cshowsPrec
                  InflectionData.$fShowNumber_$cshow
                  InflectionData.$fShowNumber_$cshowList -}
50da230f212270d0c1b92a32c3347c6c
  $fShowNumber_$cshow :: InflectionData.Number -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.Number ->
                 InflectionData.$fShowNumber_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
50da230f212270d0c1b92a32c3347c6c
  $fShowNumber_$cshowList ::
    [InflectionData.Number] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Number
                   InflectionData.$w$cshowsPrec4) -}
50da230f212270d0c1b92a32c3347c6c
  $fShowNumber_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Number -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: InflectionData.Number
                   w2 :: GHC.Base.String ->
                 InflectionData.$w$cshowsPrec4 w1 w2) -}
a2d676a93bd091804cbdfda78f682da8
  $fShowPerson :: GHC.Show.Show InflectionData.Person
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Person
                  InflectionData.$fShowPerson_$cshowsPrec
                  InflectionData.$fShowPerson_$cshow
                  InflectionData.$fShowPerson_$cshowList -}
a2d676a93bd091804cbdfda78f682da8
  $fShowPerson_$cshow :: InflectionData.Person -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.Person ->
                 case x of wild {
                   InflectionData.FIRST -> InflectionData.$fReadPerson15
                   InflectionData.SECOND -> InflectionData.$fReadPerson12
                   InflectionData.THIRD -> InflectionData.$fReadPerson9 }) -}
a2d676a93bd091804cbdfda78f682da8
  $fShowPerson_$cshowList ::
    [InflectionData.Person] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Person
                   InflectionData.$w$cshowsPrec12) -}
a2d676a93bd091804cbdfda78f682da8
  $fShowPerson_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Person -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: InflectionData.Person
                   w2 :: GHC.Base.String ->
                 InflectionData.$w$cshowsPrec12 w1 w2) -}
760d4f86d6aad7519f1cff401393492d
  $fShowPolarity :: GHC.Show.Show InflectionData.Polarity
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Polarity
                  InflectionData.$fShowPolarity_$cshowsPrec
                  InflectionData.$fShowPolarity_$cshow
                  InflectionData.$fShowPolarity_$cshowList -}
760d4f86d6aad7519f1cff401393492d
  $fShowPolarity1 :: InflectionData.Polarity -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.Polarity eta :: GHC.Base.String ->
                 case ds of wild {
                   InflectionData.AFF
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           InflectionData.$fReadPolarity11)
                        eta
                   InflectionData.NEG
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           InflectionData.$fReadPolarity8)
                        eta }) -}
760d4f86d6aad7519f1cff401393492d
  $fShowPolarity_$cshow :: InflectionData.Polarity -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.Polarity ->
                 case x of wild {
                   InflectionData.AFF -> InflectionData.$fReadPolarity11
                   InflectionData.NEG -> InflectionData.$fReadPolarity8 }) -}
760d4f86d6aad7519f1cff401393492d
  $fShowPolarity_$cshowList ::
    [InflectionData.Polarity] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Polarity
                   InflectionData.$fShowPolarity1) -}
760d4f86d6aad7519f1cff401393492d
  $fShowPolarity_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Polarity -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Polarity
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.AFF
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           InflectionData.$fReadPolarity11)
                        eta
                   InflectionData.NEG
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           InflectionData.$fReadPolarity8)
                        eta }) -}
ddf06519a04fe9d7312b057c3bf2a55a
  $fShowSpecificity :: GHC.Show.Show InflectionData.Specificity
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Specificity
                  InflectionData.$fShowSpecificity_$cshowsPrec
                  InflectionData.$fShowSpecificity_$cshow
                  InflectionData.$fShowSpecificity_$cshowList -}
ddf06519a04fe9d7312b057c3bf2a55a
  $fShowSpecificity1 :: InflectionData.Specificity -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.Specificity eta :: GHC.Base.String ->
                 case ds of wild {
                   InflectionData.SPEC
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           InflectionData.$fReadSpecificity11)
                        eta
                   InflectionData.NSPEC
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           InflectionData.$fReadSpecificity8)
                        eta }) -}
ddf06519a04fe9d7312b057c3bf2a55a
  $fShowSpecificity_$cshow ::
    InflectionData.Specificity -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.Specificity ->
                 case x of wild {
                   InflectionData.SPEC -> InflectionData.$fReadSpecificity11
                   InflectionData.NSPEC -> InflectionData.$fReadSpecificity8 }) -}
ddf06519a04fe9d7312b057c3bf2a55a
  $fShowSpecificity_$cshowList ::
    [InflectionData.Specificity] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Specificity
                   InflectionData.$fShowSpecificity1) -}
ddf06519a04fe9d7312b057c3bf2a55a
  $fShowSpecificity_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Specificity -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Specificity
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.SPEC
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           InflectionData.$fReadSpecificity11)
                        eta
                   InflectionData.NSPEC
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           InflectionData.$fReadSpecificity8)
                        eta }) -}
ef165a186fbafaf5cc0bbe099a4b91b0
  $fShowTense :: GHC.Show.Show InflectionData.Tense
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Tense
                  InflectionData.$fShowTense_$cshowsPrec
                  InflectionData.$fShowTense_$cshow
                  InflectionData.$fShowTense_$cshowList -}
ef165a186fbafaf5cc0bbe099a4b91b0
  $fShowTense_$cshow :: InflectionData.Tense -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.Tense ->
                 InflectionData.$fShowTense_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
ef165a186fbafaf5cc0bbe099a4b91b0
  $fShowTense_$cshowList :: [InflectionData.Tense] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Tense
                   InflectionData.$w$cshowsPrec3) -}
ef165a186fbafaf5cc0bbe099a4b91b0
  $fShowTense_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Tense -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: InflectionData.Tense
                   w2 :: GHC.Base.String ->
                 InflectionData.$w$cshowsPrec3 w1 w2) -}
ae01a43ac4566693ed520efc4ae942af
  $fShowTopic :: GHC.Show.Show InflectionData.Topic
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Topic
                  InflectionData.$fShowTopic_$cshowsPrec
                  InflectionData.$fShowTopic_$cshow
                  InflectionData.$fShowTopic_$cshowList -}
ae01a43ac4566693ed520efc4ae942af
  $fShowTopic1 :: InflectionData.Topic -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.Topic eta :: GHC.Base.String ->
                 case ds of wild {
                   InflectionData.TOP
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           InflectionData.$fReadTopic11)
                        eta
                   InflectionData.NTOP
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           InflectionData.$fReadTopic8)
                        eta }) -}
ae01a43ac4566693ed520efc4ae942af
  $fShowTopic_$cshow :: InflectionData.Topic -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.Topic ->
                 case x of wild {
                   InflectionData.TOP -> InflectionData.$fReadTopic11
                   InflectionData.NTOP -> InflectionData.$fReadTopic8 }) -}
ae01a43ac4566693ed520efc4ae942af
  $fShowTopic_$cshowList :: [InflectionData.Topic] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Topic
                   InflectionData.$fShowTopic1) -}
ae01a43ac4566693ed520efc4ae942af
  $fShowTopic_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Topic -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Topic
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.TOP
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           InflectionData.$fReadTopic11)
                        eta
                   InflectionData.NTOP
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           InflectionData.$fReadTopic8)
                        eta }) -}
771b2c7bf1a5cdb98a55ddd9b2879a4c
  $fShowTransitivity :: GHC.Show.Show InflectionData.Transitivity
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Transitivity
                  InflectionData.$fShowTransitivity_$cshowsPrec
                  InflectionData.$fShowTransitivity_$cshow
                  InflectionData.$fShowTransitivity_$cshowList -}
771b2c7bf1a5cdb98a55ddd9b2879a4c
  $fShowTransitivity_$cshow ::
    InflectionData.Transitivity -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.Transitivity ->
                 case x of wild {
                   InflectionData.NTRANS -> InflectionData.$fReadTransitivity15
                   InflectionData.TRANS -> InflectionData.$fReadTransitivity12
                   InflectionData.DITRANS -> InflectionData.$fReadTransitivity9 }) -}
771b2c7bf1a5cdb98a55ddd9b2879a4c
  $fShowTransitivity_$cshowList ::
    [InflectionData.Transitivity] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Transitivity
                   InflectionData.$w$cshowsPrec13) -}
771b2c7bf1a5cdb98a55ddd9b2879a4c
  $fShowTransitivity_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Transitivity -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: InflectionData.Transitivity
                   w2 :: GHC.Base.String ->
                 InflectionData.$w$cshowsPrec13 w1 w2) -}
efe0567aac5cdd53235e250e93c9bff0
  $fShowVoice :: GHC.Show.Show InflectionData.Voice
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Voice
                  InflectionData.$fShowVoice_$cshowsPrec
                  InflectionData.$fShowVoice_$cshow
                  InflectionData.$fShowVoice_$cshowList -}
efe0567aac5cdd53235e250e93c9bff0
  $fShowVoice_$cshow :: InflectionData.Voice -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.Voice ->
                 case x of wild {
                   InflectionData.ACTIVE -> InflectionData.$fReadVoice15
                   InflectionData.MIDDLE -> InflectionData.$fReadVoice12
                   InflectionData.PASSIVE -> InflectionData.$fReadVoice9 }) -}
efe0567aac5cdd53235e250e93c9bff0
  $fShowVoice_$cshowList :: [InflectionData.Voice] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Voice
                   InflectionData.$w$cshowsPrec14) -}
efe0567aac5cdd53235e250e93c9bff0
  $fShowVoice_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Voice -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: InflectionData.Voice
                   w2 :: GHC.Base.String ->
                 InflectionData.$w$cshowsPrec14 w1 w2) -}
d7b9cc4c84b4eba4e706d67aa644c840
  $fShowVolition :: GHC.Show.Show InflectionData.Volition
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Volition
                  InflectionData.$fShowVolition_$cshowsPrec
                  InflectionData.$fShowVolition_$cshow
                  InflectionData.$fShowVolition_$cshowList -}
d7b9cc4c84b4eba4e706d67aa644c840
  $fShowVolition1 :: InflectionData.Volition -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.Volition eta :: GHC.Base.String ->
                 case ds of wild {
                   InflectionData.VOL
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           InflectionData.$fReadVolition11)
                        eta
                   InflectionData.NVOL
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           InflectionData.$fReadVolition8)
                        eta }) -}
d7b9cc4c84b4eba4e706d67aa644c840
  $fShowVolition_$cshow :: InflectionData.Volition -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: InflectionData.Volition ->
                 case x of wild {
                   InflectionData.VOL -> InflectionData.$fReadVolition11
                   InflectionData.NVOL -> InflectionData.$fReadVolition8 }) -}
d7b9cc4c84b4eba4e706d67aa644c840
  $fShowVolition_$cshowList ::
    [InflectionData.Volition] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Volition
                   InflectionData.$fShowVolition1) -}
d7b9cc4c84b4eba4e706d67aa644c840
  $fShowVolition_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Volition -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   ds1 :: InflectionData.Volition
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   InflectionData.VOL
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           InflectionData.$fReadVolition11)
                        eta
                   InflectionData.NVOL
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           InflectionData.$fReadVolition8)
                        eta }) -}
fcaf73c0209bc537fa01600d2542087f
  $w$c== ::
    (GHC.Classes.Eq a, GHC.Classes.Eq b, GHC.Classes.Eq c,
     GHC.Classes.Eq d, GHC.Classes.Eq e, GHC.Classes.Eq f,
     GHC.Classes.Eq g, GHC.Classes.Eq h, GHC.Classes.Eq i,
     GHC.Classes.Eq j, GHC.Classes.Eq k, GHC.Classes.Eq l,
     GHC.Classes.Eq m, GHC.Classes.Eq n, GHC.Classes.Eq o,
     GHC.Classes.Eq p, GHC.Classes.Eq q, GHC.Classes.Eq r) =>
    a
    -> b
    -> c
    -> d
    -> e
    -> f
    -> g
    -> h
    -> i
    -> j
    -> k
    -> l
    -> m
    -> n
    -> o
    -> p
    -> q
    -> r
    -> a
    -> b
    -> c
    -> d
    -> e
    -> f
    -> g
    -> h
    -> i
    -> j
    -> k
    -> l
    -> m
    -> n
    -> o
    -> p
    -> q
    -> r
    -> GHC.Types.Bool
  {- Arity: 54, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
2e270cd14c5f83f9fdcd19315b6b2c0b
  $w$cshowsPrec ::
    InflectionData.ManifestType -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: InflectionData.ManifestType
                   w1 :: GHC.Base.String ->
                 case w of wild {
                   InflectionData.PreParticle
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest21 w1
                   InflectionData.Prefix
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest18 w1
                   InflectionData.Suffix
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest15 w1
                   InflectionData.PostParticle
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadManifest12
                        w1 }) -}
81ef3758cd3f737f92a15566b4335acf
  $w$cshowsPrec1 ::
    InflectionData.Evidentiality -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: InflectionData.Evidentiality
                   w1 :: GHC.Base.String ->
                 case w of wild {
                   InflectionData.EXP
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadEvidentiality39
                        w1
                   InflectionData.VIS
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadEvidentiality36
                        w1
                   InflectionData.NVIS
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadEvidentiality33
                        w1
                   InflectionData.AUD
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadEvidentiality30
                        w1
                   InflectionData.INFER
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadEvidentiality27
                        w1
                   InflectionData.REP
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadEvidentiality24
                        w1
                   InflectionData.HSY
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadEvidentiality21
                        w1
                   InflectionData.QUO
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadEvidentiality18
                        w1
                   InflectionData.ASS
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadEvidentiality15
                        w1 }) -}
f61bfd6c6a6308c8e1509e798e8cde93
  $w$cshowsPrec10 ::
    GHC.Prim.Int#
    -> [InflectionData.Agreement] -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: [InflectionData.Agreement]
                   w :: GHC.Base.String ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fShowAgreementSystem2
                        (GHC.Show.showList__
                           @ InflectionData.Agreement
                           InflectionData.$w$cshowsPrec9
                           ww1
                           w)
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           InflectionData.$fShowAgreementSystem2
                           (GHC.Show.showList__
                              @ InflectionData.Agreement
                              InflectionData.$w$cshowsPrec9
                              ww1
                              (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w))) }) -}
5cbe6db833ae3aa93592b3769fcc5964
  $w$cshowsPrec11 ::
    GHC.Prim.Int#
    -> InflectionData.ManifestSystem
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><S,1*U><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   w :: InflectionData.ManifestSystem
                   w1 :: GHC.Base.String ->
                 case w of wild {
                   InflectionData.PreParticleSystem b1
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11) of wild1 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             InflectionData.$fShowManifestSystem6
                             (GHC.Show.showList__
                                @ (PhonemeData.Morpheme,
                                   (InflectionData.Manifest InflectionData.Gender,
                                    InflectionData.Manifest InflectionData.Animacy,
                                    InflectionData.Manifest InflectionData.Case,
                                    InflectionData.Manifest InflectionData.Number,
                                    InflectionData.Manifest InflectionData.Definiteness,
                                    InflectionData.Manifest InflectionData.Specificity,
                                    InflectionData.Manifest InflectionData.Topic,
                                    InflectionData.Manifest InflectionData.Person,
                                    InflectionData.Manifest InflectionData.Clusivity,
                                    InflectionData.Manifest InflectionData.Honorific,
                                    InflectionData.Manifest InflectionData.Polarity,
                                    InflectionData.Manifest InflectionData.Tense,
                                    InflectionData.Manifest InflectionData.Aspect,
                                    InflectionData.Manifest InflectionData.Mood,
                                    InflectionData.Manifest InflectionData.Voice,
                                    InflectionData.Manifest InflectionData.Evidentiality,
                                    InflectionData.Manifest InflectionData.Transitivity,
                                    InflectionData.Manifest InflectionData.Volition))
                                InflectionData.$fShowManifestSystem5
                                b1
                                w1)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                InflectionData.$fShowManifestSystem6
                                (GHC.Show.showList__
                                   @ (PhonemeData.Morpheme,
                                      (InflectionData.Manifest InflectionData.Gender,
                                       InflectionData.Manifest InflectionData.Animacy,
                                       InflectionData.Manifest InflectionData.Case,
                                       InflectionData.Manifest InflectionData.Number,
                                       InflectionData.Manifest InflectionData.Definiteness,
                                       InflectionData.Manifest InflectionData.Specificity,
                                       InflectionData.Manifest InflectionData.Topic,
                                       InflectionData.Manifest InflectionData.Person,
                                       InflectionData.Manifest InflectionData.Clusivity,
                                       InflectionData.Manifest InflectionData.Honorific,
                                       InflectionData.Manifest InflectionData.Polarity,
                                       InflectionData.Manifest InflectionData.Tense,
                                       InflectionData.Manifest InflectionData.Aspect,
                                       InflectionData.Manifest InflectionData.Mood,
                                       InflectionData.Manifest InflectionData.Voice,
                                       InflectionData.Manifest InflectionData.Evidentiality,
                                       InflectionData.Manifest InflectionData.Transitivity,
                                       InflectionData.Manifest InflectionData.Volition))
                                   InflectionData.$fShowManifestSystem5
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w1))) }
                   InflectionData.PostParticleSystem b1
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11) of wild1 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             InflectionData.$fShowManifestSystem4
                             (GHC.Show.showList__
                                @ (PhonemeData.Morpheme,
                                   (InflectionData.Manifest InflectionData.Gender,
                                    InflectionData.Manifest InflectionData.Animacy,
                                    InflectionData.Manifest InflectionData.Case,
                                    InflectionData.Manifest InflectionData.Number,
                                    InflectionData.Manifest InflectionData.Definiteness,
                                    InflectionData.Manifest InflectionData.Specificity,
                                    InflectionData.Manifest InflectionData.Topic,
                                    InflectionData.Manifest InflectionData.Person,
                                    InflectionData.Manifest InflectionData.Clusivity,
                                    InflectionData.Manifest InflectionData.Honorific,
                                    InflectionData.Manifest InflectionData.Polarity,
                                    InflectionData.Manifest InflectionData.Tense,
                                    InflectionData.Manifest InflectionData.Aspect,
                                    InflectionData.Manifest InflectionData.Mood,
                                    InflectionData.Manifest InflectionData.Voice,
                                    InflectionData.Manifest InflectionData.Evidentiality,
                                    InflectionData.Manifest InflectionData.Transitivity,
                                    InflectionData.Manifest InflectionData.Volition))
                                InflectionData.$fShowManifestSystem5
                                b1
                                w1)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                InflectionData.$fShowManifestSystem4
                                (GHC.Show.showList__
                                   @ (PhonemeData.Morpheme,
                                      (InflectionData.Manifest InflectionData.Gender,
                                       InflectionData.Manifest InflectionData.Animacy,
                                       InflectionData.Manifest InflectionData.Case,
                                       InflectionData.Manifest InflectionData.Number,
                                       InflectionData.Manifest InflectionData.Definiteness,
                                       InflectionData.Manifest InflectionData.Specificity,
                                       InflectionData.Manifest InflectionData.Topic,
                                       InflectionData.Manifest InflectionData.Person,
                                       InflectionData.Manifest InflectionData.Clusivity,
                                       InflectionData.Manifest InflectionData.Honorific,
                                       InflectionData.Manifest InflectionData.Polarity,
                                       InflectionData.Manifest InflectionData.Tense,
                                       InflectionData.Manifest InflectionData.Aspect,
                                       InflectionData.Manifest InflectionData.Mood,
                                       InflectionData.Manifest InflectionData.Voice,
                                       InflectionData.Manifest InflectionData.Evidentiality,
                                       InflectionData.Manifest InflectionData.Transitivity,
                                       InflectionData.Manifest InflectionData.Volition))
                                   InflectionData.$fShowManifestSystem5
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w1))) }
                   InflectionData.PrefixSystem b1
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11) of wild1 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             InflectionData.$fShowManifestSystem3
                             (GHC.Show.showList__
                                @ (PhonemeData.Morpheme,
                                   (InflectionData.Manifest InflectionData.Gender,
                                    InflectionData.Manifest InflectionData.Animacy,
                                    InflectionData.Manifest InflectionData.Case,
                                    InflectionData.Manifest InflectionData.Number,
                                    InflectionData.Manifest InflectionData.Definiteness,
                                    InflectionData.Manifest InflectionData.Specificity,
                                    InflectionData.Manifest InflectionData.Topic,
                                    InflectionData.Manifest InflectionData.Person,
                                    InflectionData.Manifest InflectionData.Clusivity,
                                    InflectionData.Manifest InflectionData.Honorific,
                                    InflectionData.Manifest InflectionData.Polarity,
                                    InflectionData.Manifest InflectionData.Tense,
                                    InflectionData.Manifest InflectionData.Aspect,
                                    InflectionData.Manifest InflectionData.Mood,
                                    InflectionData.Manifest InflectionData.Voice,
                                    InflectionData.Manifest InflectionData.Evidentiality,
                                    InflectionData.Manifest InflectionData.Transitivity,
                                    InflectionData.Manifest InflectionData.Volition))
                                InflectionData.$fShowManifestSystem5
                                b1
                                w1)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                InflectionData.$fShowManifestSystem3
                                (GHC.Show.showList__
                                   @ (PhonemeData.Morpheme,
                                      (InflectionData.Manifest InflectionData.Gender,
                                       InflectionData.Manifest InflectionData.Animacy,
                                       InflectionData.Manifest InflectionData.Case,
                                       InflectionData.Manifest InflectionData.Number,
                                       InflectionData.Manifest InflectionData.Definiteness,
                                       InflectionData.Manifest InflectionData.Specificity,
                                       InflectionData.Manifest InflectionData.Topic,
                                       InflectionData.Manifest InflectionData.Person,
                                       InflectionData.Manifest InflectionData.Clusivity,
                                       InflectionData.Manifest InflectionData.Honorific,
                                       InflectionData.Manifest InflectionData.Polarity,
                                       InflectionData.Manifest InflectionData.Tense,
                                       InflectionData.Manifest InflectionData.Aspect,
                                       InflectionData.Manifest InflectionData.Mood,
                                       InflectionData.Manifest InflectionData.Voice,
                                       InflectionData.Manifest InflectionData.Evidentiality,
                                       InflectionData.Manifest InflectionData.Transitivity,
                                       InflectionData.Manifest InflectionData.Volition))
                                   InflectionData.$fShowManifestSystem5
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w1))) }
                   InflectionData.SuffixSystem b1
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11) of wild1 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             InflectionData.$fShowManifestSystem2
                             (GHC.Show.showList__
                                @ (PhonemeData.Morpheme,
                                   (InflectionData.Manifest InflectionData.Gender,
                                    InflectionData.Manifest InflectionData.Animacy,
                                    InflectionData.Manifest InflectionData.Case,
                                    InflectionData.Manifest InflectionData.Number,
                                    InflectionData.Manifest InflectionData.Definiteness,
                                    InflectionData.Manifest InflectionData.Specificity,
                                    InflectionData.Manifest InflectionData.Topic,
                                    InflectionData.Manifest InflectionData.Person,
                                    InflectionData.Manifest InflectionData.Clusivity,
                                    InflectionData.Manifest InflectionData.Honorific,
                                    InflectionData.Manifest InflectionData.Polarity,
                                    InflectionData.Manifest InflectionData.Tense,
                                    InflectionData.Manifest InflectionData.Aspect,
                                    InflectionData.Manifest InflectionData.Mood,
                                    InflectionData.Manifest InflectionData.Voice,
                                    InflectionData.Manifest InflectionData.Evidentiality,
                                    InflectionData.Manifest InflectionData.Transitivity,
                                    InflectionData.Manifest InflectionData.Volition))
                                InflectionData.$fShowManifestSystem5
                                b1
                                w1)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                InflectionData.$fShowManifestSystem2
                                (GHC.Show.showList__
                                   @ (PhonemeData.Morpheme,
                                      (InflectionData.Manifest InflectionData.Gender,
                                       InflectionData.Manifest InflectionData.Animacy,
                                       InflectionData.Manifest InflectionData.Case,
                                       InflectionData.Manifest InflectionData.Number,
                                       InflectionData.Manifest InflectionData.Definiteness,
                                       InflectionData.Manifest InflectionData.Specificity,
                                       InflectionData.Manifest InflectionData.Topic,
                                       InflectionData.Manifest InflectionData.Person,
                                       InflectionData.Manifest InflectionData.Clusivity,
                                       InflectionData.Manifest InflectionData.Honorific,
                                       InflectionData.Manifest InflectionData.Polarity,
                                       InflectionData.Manifest InflectionData.Tense,
                                       InflectionData.Manifest InflectionData.Aspect,
                                       InflectionData.Manifest InflectionData.Mood,
                                       InflectionData.Manifest InflectionData.Voice,
                                       InflectionData.Manifest InflectionData.Evidentiality,
                                       InflectionData.Manifest InflectionData.Transitivity,
                                       InflectionData.Manifest InflectionData.Volition))
                                   InflectionData.$fShowManifestSystem5
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w1))) } }) -}
a2d676a93bd091804cbdfda78f682da8
  $w$cshowsPrec12 ::
    InflectionData.Person -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: InflectionData.Person w1 :: GHC.Base.String ->
                 case w of wild {
                   InflectionData.FIRST
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadPerson15 w1
                   InflectionData.SECOND
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadPerson12 w1
                   InflectionData.THIRD
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadPerson9
                        w1 }) -}
771b2c7bf1a5cdb98a55ddd9b2879a4c
  $w$cshowsPrec13 ::
    InflectionData.Transitivity -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: InflectionData.Transitivity
                   w1 :: GHC.Base.String ->
                 case w of wild {
                   InflectionData.NTRANS
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadTransitivity15
                        w1
                   InflectionData.TRANS
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadTransitivity12
                        w1
                   InflectionData.DITRANS
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadTransitivity9
                        w1 }) -}
efe0567aac5cdd53235e250e93c9bff0
  $w$cshowsPrec14 ::
    InflectionData.Voice -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: InflectionData.Voice w1 :: GHC.Base.String ->
                 case w of wild {
                   InflectionData.ACTIVE
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadVoice15 w1
                   InflectionData.MIDDLE
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadVoice12 w1
                   InflectionData.PASSIVE
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadVoice9
                        w1 }) -}
c8b893053b386faa19ee0015c2b817c2
  $w$cshowsPrec2 ::
    InflectionData.Mood -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: InflectionData.Mood w1 :: GHC.Base.String ->
                 case w of wild {
                   InflectionData.IND
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadMood43 w1
                   InflectionData.IRR
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadMood40 w1
                   InflectionData.DEO
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadMood37 w1
                   InflectionData.IMP
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadMood34 w1
                   InflectionData.JUS
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadMood31 w1
                   InflectionData.OPT
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadMood28 w1
                   InflectionData.EPIS
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadMood25 w1
                   InflectionData.SBJV
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadMood22 w1
                   InflectionData.POT
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadMood19 w1
                   InflectionData.COND
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadMood16
                        w1 }) -}
ef165a186fbafaf5cc0bbe099a4b91b0
  $w$cshowsPrec3 ::
    InflectionData.Tense -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: InflectionData.Tense w1 :: GHC.Base.String ->
                 case w of wild {
                   InflectionData.PST
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadTense39 w1
                   InflectionData.REM
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadTense36 w1
                   InflectionData.REC
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadTense33 w1
                   InflectionData.NPST
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadTense30 w1
                   InflectionData.PRS
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadTense27 w1
                   InflectionData.NFUT
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadTense24 w1
                   InflectionData.FUT
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadTense21 w1
                   InflectionData.IMMF
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadTense18 w1
                   InflectionData.REMF
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadTense15
                        w1 }) -}
50da230f212270d0c1b92a32c3347c6c
  $w$cshowsPrec4 ::
    InflectionData.Number -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: InflectionData.Number w1 :: GHC.Base.String ->
                 case w of wild {
                   InflectionData.SG
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadNumber23 w1
                   InflectionData.DU
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadNumber20 w1
                   InflectionData.TRI
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadNumber17 w1
                   InflectionData.PA
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadNumber14 w1
                   InflectionData.PL
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadNumber11
                        w1 }) -}
3e30b77606116c9a528b5a2b5461d97b
  $w$cshowsPrec5 ::
    InflectionData.Case -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0] -}
733cd520a7c9e157df7c0aea38100a5a
  $w$cshowsPrec6 ::
    InflectionData.Animacy -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: InflectionData.Animacy w1 :: GHC.Base.String ->
                 case w of wild {
                   InflectionData.AN
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadAnimacy23 w1
                   InflectionData.HUM
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadAnimacy20 w1
                   InflectionData.NHUM
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadAnimacy17 w1
                   InflectionData.ZO
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadAnimacy14 w1
                   InflectionData.INAN
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadAnimacy11
                        w1 }) -}
c5edda692e03a9e3df065b8d199e385d
  $w$cshowsPrec7 ::
    InflectionData.Gender -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: InflectionData.Gender w1 :: GHC.Base.String ->
                 case w of wild {
                   InflectionData.M
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadGender19 w1
                   InflectionData.F
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadGender16 w1
                   InflectionData.COM
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadGender13 w1
                   InflectionData.N
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadGender10
                        w1 }) -}
6ddcb2ad1d03ff90bed9194dae51837d
  $w$cshowsPrec8 ::
    (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
     GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
     GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
     GHC.Show.Show l, GHC.Show.Show m, GHC.Show.Show n, GHC.Show.Show o,
     GHC.Show.Show p, GHC.Show.Show q, GHC.Show.Show r) =>
    a
    -> b
    -> c
    -> d
    -> e
    -> f
    -> g
    -> h
    -> i
    -> j
    -> k
    -> l
    -> m
    -> n
    -> o
    -> p
    -> q
    -> r
    -> GHC.Show.ShowS
  {- Arity: 36,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
ef42610b404b654d1dfaa49f103925b4
  $w$cshowsPrec9 ::
    InflectionData.Agreement -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: InflectionData.Agreement
                   w1 :: GHC.Base.String ->
                 case w of wild {
                   InflectionData.SubVerb
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadAgreement31 w1
                   InflectionData.ObjVerb
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadAgreement28 w1
                   InflectionData.AdjNoun
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadAgreement25 w1
                   InflectionData.AdvAdj
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadAgreement22 w1
                   InflectionData.AdvVerb
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadAgreement19 w1
                   InflectionData.PrepNoun
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadAgreement16 w1
                   InflectionData.VerbPrep
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadAgreement13
                        w1 }) -}
4d64920d6f366b56cc178502a30b7bed
  $w$s$cshowsPrec ::
    InflectionData.Manifest InflectionData.Gender
    -> InflectionData.Manifest InflectionData.Animacy
    -> InflectionData.Manifest InflectionData.Case
    -> InflectionData.Manifest InflectionData.Number
    -> InflectionData.Manifest InflectionData.Definiteness
    -> InflectionData.Manifest InflectionData.Specificity
    -> InflectionData.Manifest InflectionData.Topic
    -> InflectionData.Manifest InflectionData.Person
    -> InflectionData.Manifest InflectionData.Clusivity
    -> InflectionData.Manifest InflectionData.Honorific
    -> InflectionData.Manifest InflectionData.Polarity
    -> InflectionData.Manifest InflectionData.Tense
    -> InflectionData.Manifest InflectionData.Aspect
    -> InflectionData.Manifest InflectionData.Mood
    -> InflectionData.Manifest InflectionData.Voice
    -> InflectionData.Manifest InflectionData.Evidentiality
    -> InflectionData.Manifest InflectionData.Transitivity
    -> InflectionData.Manifest InflectionData.Volition
    -> GHC.Show.ShowS
  {- Arity: 18,
     Strictness: <L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ ww :: InflectionData.Manifest InflectionData.Gender
                   ww1 :: InflectionData.Manifest InflectionData.Animacy
                   ww2 :: InflectionData.Manifest InflectionData.Case
                   ww3 :: InflectionData.Manifest InflectionData.Number
                   ww4 :: InflectionData.Manifest InflectionData.Definiteness
                   ww5 :: InflectionData.Manifest InflectionData.Specificity
                   ww6 :: InflectionData.Manifest InflectionData.Topic
                   ww7 :: InflectionData.Manifest InflectionData.Person
                   ww8 :: InflectionData.Manifest InflectionData.Clusivity
                   ww9 :: InflectionData.Manifest InflectionData.Honorific
                   ww10 :: InflectionData.Manifest InflectionData.Polarity
                   ww11 :: InflectionData.Manifest InflectionData.Tense
                   ww12 :: InflectionData.Manifest InflectionData.Aspect
                   ww13 :: InflectionData.Manifest InflectionData.Mood
                   ww14 :: InflectionData.Manifest InflectionData.Voice
                   ww15 :: InflectionData.Manifest InflectionData.Evidentiality
                   ww16 :: InflectionData.Manifest InflectionData.Transitivity
                   ww17 :: InflectionData.Manifest InflectionData.Volition ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = InflectionData.$fShow(,,,,,,,,,,,,,,,,,)_go
                       (GHC.Types.:
                          @ GHC.Show.ShowS
                          (InflectionData.$fShow(,,,,,,,,,,,,,,,,,)_$s$cshowsPrec18
                             GHC.Show.shows18
                             ww)
                          (GHC.Types.:
                             @ GHC.Show.ShowS
                             (InflectionData.$fShow(,,,,,,,,,,,,,,,,,)_$s$cshowsPrec17
                                GHC.Show.shows18
                                ww1)
                             (GHC.Types.:
                                @ GHC.Show.ShowS
                                (InflectionData.$fShow(,,,,,,,,,,,,,,,,,)_$s$cshowsPrec16
                                   GHC.Show.shows18
                                   ww2)
                                (GHC.Types.:
                                   @ GHC.Show.ShowS
                                   (InflectionData.$fShow(,,,,,,,,,,,,,,,,,)_$s$cshowsPrec15
                                      GHC.Show.shows18
                                      ww3)
                                   (GHC.Types.:
                                      @ GHC.Show.ShowS
                                      (InflectionData.$fShow(,,,,,,,,,,,,,,,,,)_$s$cshowsPrec14
                                         GHC.Show.shows18
                                         ww4)
                                      (GHC.Types.:
                                         @ GHC.Show.ShowS
                                         (InflectionData.$fShow(,,,,,,,,,,,,,,,,,)_$s$cshowsPrec13
                                            GHC.Show.shows18
                                            ww5)
                                         (GHC.Types.:
                                            @ GHC.Show.ShowS
                                            (InflectionData.$fShow(,,,,,,,,,,,,,,,,,)_$s$cshowsPrec12
                                               GHC.Show.shows18
                                               ww6)
                                            (GHC.Types.:
                                               @ GHC.Show.ShowS
                                               (InflectionData.$fShow(,,,,,,,,,,,,,,,,,)_$s$cshowsPrec11
                                                  GHC.Show.shows18
                                                  ww7)
                                               (GHC.Types.:
                                                  @ GHC.Show.ShowS
                                                  (InflectionData.$fShow(,,,,,,,,,,,,,,,,,)_$s$cshowsPrec10
                                                     GHC.Show.shows18
                                                     ww8)
                                                  (GHC.Types.:
                                                     @ GHC.Show.ShowS
                                                     (InflectionData.$fShow(,,,,,,,,,,,,,,,,,)_$s$cshowsPrec9
                                                        GHC.Show.shows18
                                                        ww9)
                                                     (GHC.Types.:
                                                        @ GHC.Show.ShowS
                                                        (InflectionData.$fShow(,,,,,,,,,,,,,,,,,)_$s$cshowsPrec8
                                                           GHC.Show.shows18
                                                           ww10)
                                                        (GHC.Types.:
                                                           @ GHC.Show.ShowS
                                                           (InflectionData.$fShow(,,,,,,,,,,,,,,,,,)_$s$cshowsPrec7
                                                              GHC.Show.shows18
                                                              ww11)
                                                           (GHC.Types.:
                                                              @ GHC.Show.ShowS
                                                              (InflectionData.$fShow(,,,,,,,,,,,,,,,,,)_$s$cshowsPrec6
                                                                 GHC.Show.shows18
                                                                 ww12)
                                                              (GHC.Types.:
                                                                 @ GHC.Show.ShowS
                                                                 (InflectionData.$fShow(,,,,,,,,,,,,,,,,,)_$s$cshowsPrec5
                                                                    GHC.Show.shows18
                                                                    ww13)
                                                                 (GHC.Types.:
                                                                    @ GHC.Show.ShowS
                                                                    (InflectionData.$fShow(,,,,,,,,,,,,,,,,,)_$s$cshowsPrec4
                                                                       GHC.Show.shows18
                                                                       ww14)
                                                                    (GHC.Types.:
                                                                       @ GHC.Show.ShowS
                                                                       (InflectionData.$fShow(,,,,,,,,,,,,,,,,,)_$s$cshowsPrec3
                                                                          GHC.Show.shows18
                                                                          ww15)
                                                                       (GHC.Types.:
                                                                          @ GHC.Show.ShowS
                                                                          (InflectionData.$fShow(,,,,,,,,,,,,,,,,,)_$s$cshowsPrec2
                                                                             GHC.Show.shows18
                                                                             ww16)
                                                                          (GHC.Types.:
                                                                             @ GHC.Show.ShowS
                                                                             (InflectionData.$fShow(,,,,,,,,,,,,,,,,,)_$s$cshowsPrec1
                                                                                GHC.Show.shows18
                                                                                ww17)
                                                                             (GHC.Types.[]
                                                                                @ GHC.Show.ShowS)))))))))))))))))))
                 } in
                 \ x :: GHC.Base.String ->
                 GHC.Types.:
                   @ GHC.Types.Char
                   InflectionData.$fShow(,,,,,,,,,,,,,,,,,)2
                   (f (GHC.Types.:
                         @ GHC.Types.Char
                         InflectionData.$fShow(,,,,,,,,,,,,,,,,,)1
                         x))) -}
2829004f86c028ee96f81739e9772565
  $wa ::
    GHC.Prim.Int#
    -> forall b.
       (InflectionData.AgreementSystem
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   @ b
                   w :: InflectionData.AgreementSystem
                        -> Text.ParserCombinators.ReadP.P b ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 10) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> let {
                        lvl78 :: Text.ParserCombinators.ReadP.P b
                        = let {
                            lvl79 :: Text.ParserCombinators.ReadP.P b
                            = GHC.Read.$wa
                                @ InflectionData.Agreement
                                InflectionData.$fReadAgreement2
                                  `cast`
                                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                          <InflectionData.Agreement>_R))
                                @ b
                                (\ a20 :: [InflectionData.Agreement] ->
                                 w (InflectionData.AgreementSystem a20))
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ a98 :: Text.Read.Lex.Lexeme ->
                             case a98 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a20
                               -> case GHC.Base.eqString
                                         a20
                                         InflectionData.$fReadAgreementSystem4 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl79 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                             Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl78) -}
                        = \ w2 :: () -> lvl78
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ a98 :: GHC.Base.String ->
                         (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                           `cast`
                         (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                           @ b
                           k) }) -}
ef42610b404b654d1dfaa49f103925b4
  data Agreement
    = SubVerb
    | ObjVerb
    | AdjNoun
    | AdvAdj
    | AdvVerb
    | PrepNoun
    | VerbPrep
    Promotable
2829004f86c028ee96f81739e9772565
  data AgreementSystem = AgreementSystem [InflectionData.Agreement]
    Promotable
733cd520a7c9e157df7c0aea38100a5a
  data Animacy = AN | HUM | NHUM | ZO | INAN
    Promotable
3850d91a00b41f2f5240a98d717e8e72
  data Aspect = PFV | IPFV
    Promotable
3e30b77606116c9a528b5a2b5461d97b
  data Case
    = INTR
    | ACC
    | ERG
    | PEG
    | INDIR
    | SEC
    | NOM
    | ABS
    | MTR
    | DIR
    | PRIM
    | ERG2
    | NOM2
    | ABS2
    | ABS3
    | DTR
    | OBJ
    | DRT1
    | TR
    | DRT2
    | ADP
    | PREP
    | POST
    | OBL1
    | OBL2
    | OBL3
    | OBL4
    | OBL5
    | OBL6
    Promotable
c413fee28212168b6775aefd548e00c9
  data Clusivity = INCL | EXCL
    Promotable
b9da224a5a14860d49d67b2859c0b465
  data Definiteness = DEF | INDF
    Promotable
81ef3758cd3f737f92a15566b4335acf
  data Evidentiality
    = EXP | VIS | NVIS | AUD | INFER | REP | HSY | QUO | ASS
    Promotable
c5edda692e03a9e3df065b8d199e385d
  data Gender = M | F | COM | N
    Promotable
dfb063e584002de31fb83fb825dd29ff
  data Honorific = FAM | FORM
    Promotable
a77baed6c20192b8f22b3dec38ab08b3
  data InflectionSystem
    = InflectionSystem {genSys :: InflectionData.Manifest
                                    ([InflectionData.Gender], GHC.Types.Int),
                        aniSys :: InflectionData.Manifest
                                    ([InflectionData.Animacy], GHC.Types.Int),
                        casSys :: InflectionData.Manifest
                                    ([InflectionData.Case], GHC.Types.Int),
                        numSys :: InflectionData.Manifest
                                    ([InflectionData.Number], GHC.Types.Int),
                        defSys :: InflectionData.Manifest
                                    ([InflectionData.Definiteness], GHC.Types.Int),
                        speSys :: InflectionData.Manifest
                                    ([InflectionData.Specificity], GHC.Types.Int),
                        topSys :: InflectionData.Manifest
                                    ([InflectionData.Topic], GHC.Types.Int),
                        perSys :: InflectionData.Manifest
                                    ([InflectionData.Person], GHC.Types.Int),
                        cluSys :: InflectionData.Manifest
                                    ([InflectionData.Clusivity], GHC.Types.Int),
                        honSys :: InflectionData.Manifest
                                    ([InflectionData.Honorific], GHC.Types.Int),
                        polSys :: InflectionData.Manifest
                                    ([InflectionData.Polarity], GHC.Types.Int),
                        tenSys :: InflectionData.Manifest
                                    ([InflectionData.Tense], GHC.Types.Int),
                        aspSys :: InflectionData.Manifest
                                    ([InflectionData.Aspect], GHC.Types.Int),
                        mooSys :: InflectionData.Manifest
                                    ([InflectionData.Mood], GHC.Types.Int),
                        voiSys :: InflectionData.Manifest
                                    ([InflectionData.Voice], GHC.Types.Int),
                        eviSys :: InflectionData.Manifest
                                    ([InflectionData.Evidentiality], GHC.Types.Int),
                        traSys :: InflectionData.Manifest
                                    ([InflectionData.Transitivity], GHC.Types.Int),
                        volSys :: InflectionData.Manifest
                                    ([InflectionData.Volition], GHC.Types.Int)}
14fec65287fdbb06ce4e9e396345475a
  data Manifest a
    = NoManifest | Manifest InflectionData.ManifestType a
    Promotable
5cbe6db833ae3aa93592b3769fcc5964
  data ManifestSystem
    = PreParticleSystem [(PhonemeData.Morpheme,
                          (InflectionData.Manifest InflectionData.Gender,
                           InflectionData.Manifest InflectionData.Animacy,
                           InflectionData.Manifest InflectionData.Case,
                           InflectionData.Manifest InflectionData.Number,
                           InflectionData.Manifest InflectionData.Definiteness,
                           InflectionData.Manifest InflectionData.Specificity,
                           InflectionData.Manifest InflectionData.Topic,
                           InflectionData.Manifest InflectionData.Person,
                           InflectionData.Manifest InflectionData.Clusivity,
                           InflectionData.Manifest InflectionData.Honorific,
                           InflectionData.Manifest InflectionData.Polarity,
                           InflectionData.Manifest InflectionData.Tense,
                           InflectionData.Manifest InflectionData.Aspect,
                           InflectionData.Manifest InflectionData.Mood,
                           InflectionData.Manifest InflectionData.Voice,
                           InflectionData.Manifest InflectionData.Evidentiality,
                           InflectionData.Manifest InflectionData.Transitivity,
                           InflectionData.Manifest InflectionData.Volition))]
    | PostParticleSystem [(PhonemeData.Morpheme,
                           (InflectionData.Manifest InflectionData.Gender,
                            InflectionData.Manifest InflectionData.Animacy,
                            InflectionData.Manifest InflectionData.Case,
                            InflectionData.Manifest InflectionData.Number,
                            InflectionData.Manifest InflectionData.Definiteness,
                            InflectionData.Manifest InflectionData.Specificity,
                            InflectionData.Manifest InflectionData.Topic,
                            InflectionData.Manifest InflectionData.Person,
                            InflectionData.Manifest InflectionData.Clusivity,
                            InflectionData.Manifest InflectionData.Honorific,
                            InflectionData.Manifest InflectionData.Polarity,
                            InflectionData.Manifest InflectionData.Tense,
                            InflectionData.Manifest InflectionData.Aspect,
                            InflectionData.Manifest InflectionData.Mood,
                            InflectionData.Manifest InflectionData.Voice,
                            InflectionData.Manifest InflectionData.Evidentiality,
                            InflectionData.Manifest InflectionData.Transitivity,
                            InflectionData.Manifest InflectionData.Volition))]
    | PrefixSystem [(PhonemeData.Morpheme,
                     (InflectionData.Manifest InflectionData.Gender,
                      InflectionData.Manifest InflectionData.Animacy,
                      InflectionData.Manifest InflectionData.Case,
                      InflectionData.Manifest InflectionData.Number,
                      InflectionData.Manifest InflectionData.Definiteness,
                      InflectionData.Manifest InflectionData.Specificity,
                      InflectionData.Manifest InflectionData.Topic,
                      InflectionData.Manifest InflectionData.Person,
                      InflectionData.Manifest InflectionData.Clusivity,
                      InflectionData.Manifest InflectionData.Honorific,
                      InflectionData.Manifest InflectionData.Polarity,
                      InflectionData.Manifest InflectionData.Tense,
                      InflectionData.Manifest InflectionData.Aspect,
                      InflectionData.Manifest InflectionData.Mood,
                      InflectionData.Manifest InflectionData.Voice,
                      InflectionData.Manifest InflectionData.Evidentiality,
                      InflectionData.Manifest InflectionData.Transitivity,
                      InflectionData.Manifest InflectionData.Volition))]
    | SuffixSystem [(PhonemeData.Morpheme,
                     (InflectionData.Manifest InflectionData.Gender,
                      InflectionData.Manifest InflectionData.Animacy,
                      InflectionData.Manifest InflectionData.Case,
                      InflectionData.Manifest InflectionData.Number,
                      InflectionData.Manifest InflectionData.Definiteness,
                      InflectionData.Manifest InflectionData.Specificity,
                      InflectionData.Manifest InflectionData.Topic,
                      InflectionData.Manifest InflectionData.Person,
                      InflectionData.Manifest InflectionData.Clusivity,
                      InflectionData.Manifest InflectionData.Honorific,
                      InflectionData.Manifest InflectionData.Polarity,
                      InflectionData.Manifest InflectionData.Tense,
                      InflectionData.Manifest InflectionData.Aspect,
                      InflectionData.Manifest InflectionData.Mood,
                      InflectionData.Manifest InflectionData.Voice,
                      InflectionData.Manifest InflectionData.Evidentiality,
                      InflectionData.Manifest InflectionData.Transitivity,
                      InflectionData.Manifest InflectionData.Volition))]
2e270cd14c5f83f9fdcd19315b6b2c0b
  data ManifestType = PreParticle | Prefix | Suffix | PostParticle
    Promotable
c8b893053b386faa19ee0015c2b817c2
  data Mood
    = IND | IRR | DEO | IMP | JUS | OPT | EPIS | SBJV | POT | COND
    Promotable
50da230f212270d0c1b92a32c3347c6c
  data Number = SG | DU | TRI | PA | PL
    Promotable
a2d676a93bd091804cbdfda78f682da8
  data Person = FIRST | SECOND | THIRD
    Promotable
760d4f86d6aad7519f1cff401393492d
  data Polarity = AFF | NEG
    Promotable
ddf06519a04fe9d7312b057c3bf2a55a
  data Specificity = SPEC | NSPEC
    Promotable
ef165a186fbafaf5cc0bbe099a4b91b0
  data Tense
    = PST | REM | REC | NPST | PRS | NFUT | FUT | IMMF | REMF
    Promotable
ae01a43ac4566693ed520efc4ae942af
  data Topic = TOP | NTOP
    Promotable
771b2c7bf1a5cdb98a55ddd9b2879a4c
  data Transitivity = NTRANS | TRANS | DITRANS
    Promotable
efe0567aac5cdd53235e250e93c9bff0
  data Voice = ACTIVE | MIDDLE | PASSIVE
    Promotable
d7b9cc4c84b4eba4e706d67aa644c840
  data Volition = VOL | NVOL
    Promotable
ebbd5dac4586671c2ab3bdb1857380d3
  aniSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest
         ([InflectionData.Animacy], GHC.Types.Int)
  RecSel InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLLLLLLLLLLLLLL),1*U(A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.InflectionSystem ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ->
                 ds2 }) -}
bef40311d53fce6d2e0eaf90bf037732
  aspSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest ([InflectionData.Aspect], GHC.Types.Int)
  RecSel InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLSLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,1*U,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.InflectionSystem ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ->
                 ds13 }) -}
b3835102aba8cf24606f601e1d473e8b
  casSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest ([InflectionData.Case], GHC.Types.Int)
  RecSel InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLLLLLLLLLLLLLL),1*U(A,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.InflectionSystem ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ->
                 ds3 }) -}
4a234ac60619972ed818e008a4afe914
  cluSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest
         ([InflectionData.Clusivity], GHC.Types.Int)
  RecSel InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLSLLLLLLLLL),1*U(A,A,A,A,A,A,A,A,1*U,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.InflectionSystem ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ->
                 ds9 }) -}
ac6a6b9f32cd0f07fb8c447673c66e7c
  defSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest
         ([InflectionData.Definiteness], GHC.Types.Int)
  RecSel InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSLLLLLLLLLLLLL),1*U(A,A,A,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.InflectionSystem ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ->
                 ds5 }) -}
f22958469441b5d2ff50bd9ce2a0b264
  eviSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest
         ([InflectionData.Evidentiality], GHC.Types.Int)
  RecSel InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLLSLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.InflectionSystem ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ->
                 ds16 }) -}
975f89892bcfe3f47c3b35cfa8174f87
  genSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest ([InflectionData.Gender], GHC.Types.Int)
  RecSel InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLLLLLLLLLLLLLL),1*U(1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.InflectionSystem ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ->
                 ds1 }) -}
949bc9b42706b2791331dd68ac592d28
  honSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest
         ([InflectionData.Honorific], GHC.Types.Int)
  RecSel InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLSLLLLLLLL),1*U(A,A,A,A,A,A,A,A,A,1*U,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.InflectionSystem ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ->
                 ds10 }) -}
1832180fcdfe6653270f0d17fdf81fa0
  mooSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest ([InflectionData.Mood], GHC.Types.Int)
  RecSel InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLSLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,1*U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.InflectionSystem ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ->
                 ds14 }) -}
29bb00d9e497c60b9a3e61fff6697abb
  numSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest ([InflectionData.Number], GHC.Types.Int)
  RecSel InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLLLLLLLLLLLLLL),1*U(A,A,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.InflectionSystem ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ->
                 ds4 }) -}
c9b40b4cf6fdaf61ee830a5101350153
  perSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest ([InflectionData.Person], GHC.Types.Int)
  RecSel InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLSLLLLLLLLLL),1*U(A,A,A,A,A,A,A,1*U,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.InflectionSystem ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ->
                 ds8 }) -}
760602abd650e1446dc561af1f7226dc
  polSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest
         ([InflectionData.Polarity], GHC.Types.Int)
  RecSel InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLSLLLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,1*U,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.InflectionSystem ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ->
                 ds11 }) -}
6b00508c29849609e879f981d4d7e2b6
  speSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest
         ([InflectionData.Specificity], GHC.Types.Int)
  RecSel InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLSLLLLLLLLLLLL),1*U(A,A,A,A,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.InflectionSystem ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ->
                 ds6 }) -}
cbe4372a2163a0ac65b36d97702538b7
  tenSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest ([InflectionData.Tense], GHC.Types.Int)
  RecSel InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLSLLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,1*U,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.InflectionSystem ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ->
                 ds12 }) -}
f2c45ab27985d0e4d27d3d9ec20605b7
  topSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest ([InflectionData.Topic], GHC.Types.Int)
  RecSel InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLSLLLLLLLLLLL),1*U(A,A,A,A,A,A,1*U,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.InflectionSystem ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ->
                 ds7 }) -}
173e8b57af892a8018ada9d7ad3874d3
  traSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest
         ([InflectionData.Transitivity], GHC.Types.Int)
  RecSel InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLLLSL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.InflectionSystem ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ->
                 ds17 }) -}
965f587afc177bd9b5b0f2b92932f449
  voiSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest ([InflectionData.Voice], GHC.Types.Int)
  RecSel InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLSLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.InflectionSystem ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ->
                 ds15 }) -}
47b95d244c436bd9df28af9746faaf6d
  volSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest
         ([InflectionData.Volition], GHC.Types.Int)
  RecSel InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLLLLS),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: InflectionData.InflectionSystem ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ->
                 ds18 }) -}
instance GHC.Classes.Eq [(,,,,,,,,,,,,,,,,,)]
  = InflectionData.$fEq(,,,,,,,,,,,,,,,,,)
instance GHC.Classes.Eq [InflectionData.Agreement]
  = InflectionData.$fEqAgreement
instance GHC.Classes.Eq [InflectionData.AgreementSystem]
  = InflectionData.$fEqAgreementSystem
instance GHC.Classes.Eq [InflectionData.Animacy]
  = InflectionData.$fEqAnimacy
instance GHC.Classes.Eq [InflectionData.Aspect]
  = InflectionData.$fEqAspect
instance GHC.Classes.Eq [InflectionData.Case]
  = InflectionData.$fEqCase
instance GHC.Classes.Eq [InflectionData.Clusivity]
  = InflectionData.$fEqClusivity
instance GHC.Classes.Eq [InflectionData.Definiteness]
  = InflectionData.$fEqDefiniteness
instance GHC.Classes.Eq [InflectionData.Evidentiality]
  = InflectionData.$fEqEvidentiality
instance GHC.Classes.Eq [InflectionData.Gender]
  = InflectionData.$fEqGender
instance GHC.Classes.Eq [InflectionData.Honorific]
  = InflectionData.$fEqHonorific
instance GHC.Classes.Eq [InflectionData.Manifest]
  = InflectionData.$fEqManifest
instance GHC.Classes.Eq [InflectionData.ManifestType]
  = InflectionData.$fEqManifestType
instance GHC.Classes.Eq [InflectionData.Mood]
  = InflectionData.$fEqMood
instance GHC.Classes.Eq [InflectionData.Number]
  = InflectionData.$fEqNumber
instance GHC.Classes.Eq [InflectionData.Person]
  = InflectionData.$fEqPerson
instance GHC.Classes.Eq [InflectionData.Polarity]
  = InflectionData.$fEqPolarity
instance GHC.Classes.Eq [InflectionData.Specificity]
  = InflectionData.$fEqSpecificity
instance GHC.Classes.Eq [InflectionData.Tense]
  = InflectionData.$fEqTense
instance GHC.Classes.Eq [InflectionData.Topic]
  = InflectionData.$fEqTopic
instance GHC.Classes.Eq [InflectionData.Transitivity]
  = InflectionData.$fEqTransitivity
instance GHC.Classes.Eq [InflectionData.Voice]
  = InflectionData.$fEqVoice
instance GHC.Classes.Eq [InflectionData.Volition]
  = InflectionData.$fEqVolition
instance GHC.Read.Read [InflectionData.Agreement]
  = InflectionData.$fReadAgreement
instance GHC.Read.Read [InflectionData.AgreementSystem]
  = InflectionData.$fReadAgreementSystem
instance GHC.Read.Read [InflectionData.Animacy]
  = InflectionData.$fReadAnimacy
instance GHC.Read.Read [InflectionData.Aspect]
  = InflectionData.$fReadAspect
instance GHC.Read.Read [InflectionData.Case]
  = InflectionData.$fReadCase
instance GHC.Read.Read [InflectionData.Clusivity]
  = InflectionData.$fReadClusivity
instance GHC.Read.Read [InflectionData.Definiteness]
  = InflectionData.$fReadDefiniteness
instance GHC.Read.Read [InflectionData.Evidentiality]
  = InflectionData.$fReadEvidentiality
instance GHC.Read.Read [InflectionData.Gender]
  = InflectionData.$fReadGender
instance GHC.Read.Read [InflectionData.Honorific]
  = InflectionData.$fReadHonorific
instance GHC.Read.Read [InflectionData.Manifest]
  = InflectionData.$fReadManifest
instance GHC.Read.Read [InflectionData.ManifestType]
  = InflectionData.$fReadManifestType
instance GHC.Read.Read [InflectionData.Mood]
  = InflectionData.$fReadMood
instance GHC.Read.Read [InflectionData.Number]
  = InflectionData.$fReadNumber
instance GHC.Read.Read [InflectionData.Person]
  = InflectionData.$fReadPerson
instance GHC.Read.Read [InflectionData.Polarity]
  = InflectionData.$fReadPolarity
instance GHC.Read.Read [InflectionData.Specificity]
  = InflectionData.$fReadSpecificity
instance GHC.Read.Read [InflectionData.Tense]
  = InflectionData.$fReadTense
instance GHC.Read.Read [InflectionData.Topic]
  = InflectionData.$fReadTopic
instance GHC.Read.Read [InflectionData.Transitivity]
  = InflectionData.$fReadTransitivity
instance GHC.Read.Read [InflectionData.Voice]
  = InflectionData.$fReadVoice
instance GHC.Read.Read [InflectionData.Volition]
  = InflectionData.$fReadVolition
instance GHC.Show.Show [(,,,,,,,,,,,,,,,,,)]
  = InflectionData.$fShow(,,,,,,,,,,,,,,,,,)
instance GHC.Show.Show [InflectionData.Agreement]
  = InflectionData.$fShowAgreement
instance GHC.Show.Show [InflectionData.AgreementSystem]
  = InflectionData.$fShowAgreementSystem
instance GHC.Show.Show [InflectionData.Animacy]
  = InflectionData.$fShowAnimacy
instance GHC.Show.Show [InflectionData.Aspect]
  = InflectionData.$fShowAspect
instance GHC.Show.Show [InflectionData.Case]
  = InflectionData.$fShowCase
instance GHC.Show.Show [InflectionData.Clusivity]
  = InflectionData.$fShowClusivity
instance GHC.Show.Show [InflectionData.Definiteness]
  = InflectionData.$fShowDefiniteness
instance GHC.Show.Show [InflectionData.Evidentiality]
  = InflectionData.$fShowEvidentiality
instance GHC.Show.Show [InflectionData.Gender]
  = InflectionData.$fShowGender
instance GHC.Show.Show [InflectionData.Honorific]
  = InflectionData.$fShowHonorific
instance GHC.Show.Show [InflectionData.Manifest]
  = InflectionData.$fShowManifest
instance GHC.Show.Show [InflectionData.ManifestSystem]
  = InflectionData.$fShowManifestSystem
instance GHC.Show.Show [InflectionData.ManifestType]
  = InflectionData.$fShowManifestType
instance GHC.Show.Show [InflectionData.Mood]
  = InflectionData.$fShowMood
instance GHC.Show.Show [InflectionData.Number]
  = InflectionData.$fShowNumber
instance GHC.Show.Show [InflectionData.Person]
  = InflectionData.$fShowPerson
instance GHC.Show.Show [InflectionData.Polarity]
  = InflectionData.$fShowPolarity
instance GHC.Show.Show [InflectionData.Specificity]
  = InflectionData.$fShowSpecificity
instance GHC.Show.Show [InflectionData.Tense]
  = InflectionData.$fShowTense
instance GHC.Show.Show [InflectionData.Topic]
  = InflectionData.$fShowTopic
instance GHC.Show.Show [InflectionData.Transitivity]
  = InflectionData.$fShowTransitivity
instance GHC.Show.Show [InflectionData.Voice]
  = InflectionData.$fShowVoice
instance GHC.Show.Show [InflectionData.Volition]
  = InflectionData.$fShowVolition
"SPEC $cshowsPrec @ Animacy" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                         InflectionData.Animacy
  InflectionData.$fShowManifest_$cshowsPrec @ InflectionData.Animacy
                                            $dShow
  = InflectionData.$fShow(,,,,,,,,,,,,,,,,,)_$s$cshowsPrec17
"SPEC $cshowsPrec @ Aspect" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                        InflectionData.Aspect
  InflectionData.$fShowManifest_$cshowsPrec @ InflectionData.Aspect
                                            $dShow
  = InflectionData.$fShow(,,,,,,,,,,,,,,,,,)_$s$cshowsPrec6
"SPEC $cshowsPrec @ Case" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                      InflectionData.Case
  InflectionData.$fShowManifest_$cshowsPrec @ InflectionData.Case
                                            $dShow
  = InflectionData.$fShow(,,,,,,,,,,,,,,,,,)_$s$cshowsPrec16
"SPEC $cshowsPrec @ Clusivity" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                           InflectionData.Clusivity
  InflectionData.$fShowManifest_$cshowsPrec @ InflectionData.Clusivity
                                            $dShow
  = InflectionData.$fShow(,,,,,,,,,,,,,,,,,)_$s$cshowsPrec10
"SPEC $cshowsPrec @ Definiteness" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                              InflectionData.Definiteness
  InflectionData.$fShowManifest_$cshowsPrec @ InflectionData.Definiteness
                                            $dShow
  = InflectionData.$fShow(,,,,,,,,,,,,,,,,,)_$s$cshowsPrec14
"SPEC $cshowsPrec @ Evidentiality" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                               InflectionData.Evidentiality
  InflectionData.$fShowManifest_$cshowsPrec @ InflectionData.Evidentiality
                                            $dShow
  = InflectionData.$fShow(,,,,,,,,,,,,,,,,,)_$s$cshowsPrec3
"SPEC $cshowsPrec @ Gender" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                        InflectionData.Gender
  InflectionData.$fShowManifest_$cshowsPrec @ InflectionData.Gender
                                            $dShow
  = InflectionData.$fShow(,,,,,,,,,,,,,,,,,)_$s$cshowsPrec18
"SPEC $cshowsPrec @ Honorific" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                           InflectionData.Honorific
  InflectionData.$fShowManifest_$cshowsPrec @ InflectionData.Honorific
                                            $dShow
  = InflectionData.$fShow(,,,,,,,,,,,,,,,,,)_$s$cshowsPrec9
"SPEC $cshowsPrec @ Mood" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                      InflectionData.Mood
  InflectionData.$fShowManifest_$cshowsPrec @ InflectionData.Mood
                                            $dShow
  = InflectionData.$fShow(,,,,,,,,,,,,,,,,,)_$s$cshowsPrec5
"SPEC $cshowsPrec @ Number" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                        InflectionData.Number
  InflectionData.$fShowManifest_$cshowsPrec @ InflectionData.Number
                                            $dShow
  = InflectionData.$fShow(,,,,,,,,,,,,,,,,,)_$s$cshowsPrec15
"SPEC $cshowsPrec @ Person" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                        InflectionData.Person
  InflectionData.$fShowManifest_$cshowsPrec @ InflectionData.Person
                                            $dShow
  = InflectionData.$fShow(,,,,,,,,,,,,,,,,,)_$s$cshowsPrec11
"SPEC $cshowsPrec @ Polarity" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                          InflectionData.Polarity
  InflectionData.$fShowManifest_$cshowsPrec @ InflectionData.Polarity
                                            $dShow
  = InflectionData.$fShow(,,,,,,,,,,,,,,,,,)_$s$cshowsPrec8
"SPEC $cshowsPrec @ Specificity" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                             InflectionData.Specificity
  InflectionData.$fShowManifest_$cshowsPrec @ InflectionData.Specificity
                                            $dShow
  = InflectionData.$fShow(,,,,,,,,,,,,,,,,,)_$s$cshowsPrec13
"SPEC $cshowsPrec @ Tense" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                       InflectionData.Tense
  InflectionData.$fShowManifest_$cshowsPrec @ InflectionData.Tense
                                            $dShow
  = InflectionData.$fShow(,,,,,,,,,,,,,,,,,)_$s$cshowsPrec7
"SPEC $cshowsPrec @ Topic" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                       InflectionData.Topic
  InflectionData.$fShowManifest_$cshowsPrec @ InflectionData.Topic
                                            $dShow
  = InflectionData.$fShow(,,,,,,,,,,,,,,,,,)_$s$cshowsPrec12
"SPEC $cshowsPrec @ Transitivity" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                              InflectionData.Transitivity
  InflectionData.$fShowManifest_$cshowsPrec @ InflectionData.Transitivity
                                            $dShow
  = InflectionData.$fShow(,,,,,,,,,,,,,,,,,)_$s$cshowsPrec2
"SPEC $cshowsPrec @ Voice" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                       InflectionData.Voice
  InflectionData.$fShowManifest_$cshowsPrec @ InflectionData.Voice
                                            $dShow
  = InflectionData.$fShow(,,,,,,,,,,,,,,,,,)_$s$cshowsPrec4
"SPEC $cshowsPrec @ Volition" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                          InflectionData.Volition
  InflectionData.$fShowManifest_$cshowsPrec @ InflectionData.Volition
                                            $dShow
  = InflectionData.$fShow(,,,,,,,,,,,,,,,,,)_$s$cshowsPrec1
"SPEC/InflectionData $dmreadsPrec @ Agreement" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                           InflectionData.Agreement
  GHC.Read.$dmreadsPrec @ InflectionData.Agreement $dRead
  = InflectionData.$fReadAgreement_$s$dmreadsPrec
"SPEC/InflectionData $dmreadsPrec @ Animacy" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                         InflectionData.Animacy
  GHC.Read.$dmreadsPrec @ InflectionData.Animacy $dRead
  = InflectionData.$fReadAnimacy_$s$dmreadsPrec
"SPEC/InflectionData $dmreadsPrec @ Aspect" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                        InflectionData.Aspect
  GHC.Read.$dmreadsPrec @ InflectionData.Aspect $dRead
  = InflectionData.$fReadAspect_$s$dmreadsPrec
"SPEC/InflectionData $dmreadsPrec @ Case" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                      InflectionData.Case
  GHC.Read.$dmreadsPrec @ InflectionData.Case $dRead
  = InflectionData.$fReadCase_$s$dmreadsPrec
"SPEC/InflectionData $dmreadsPrec @ Clusivity" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                           InflectionData.Clusivity
  GHC.Read.$dmreadsPrec @ InflectionData.Clusivity $dRead
  = InflectionData.$fReadClusivity_$s$dmreadsPrec
"SPEC/InflectionData $dmreadsPrec @ Definiteness" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                              InflectionData.Definiteness
  GHC.Read.$dmreadsPrec @ InflectionData.Definiteness $dRead
  = InflectionData.$fReadDefiniteness_$s$dmreadsPrec
"SPEC/InflectionData $dmreadsPrec @ Evidentiality" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                               InflectionData.Evidentiality
  GHC.Read.$dmreadsPrec @ InflectionData.Evidentiality $dRead
  = InflectionData.$fReadEvidentiality_$s$dmreadsPrec
"SPEC/InflectionData $dmreadsPrec @ Gender" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                        InflectionData.Gender
  GHC.Read.$dmreadsPrec @ InflectionData.Gender $dRead
  = InflectionData.$fReadGender_$s$dmreadsPrec
"SPEC/InflectionData $dmreadsPrec @ Honorific" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                           InflectionData.Honorific
  GHC.Read.$dmreadsPrec @ InflectionData.Honorific $dRead
  = InflectionData.$fReadHonorific_$s$dmreadsPrec
"SPEC/InflectionData $dmreadsPrec @ ManifestType" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                              InflectionData.ManifestType
  GHC.Read.$dmreadsPrec @ InflectionData.ManifestType $dRead
  = InflectionData.$fReadManifestType_$s$dmreadsPrec
"SPEC/InflectionData $dmreadsPrec @ Mood" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                      InflectionData.Mood
  GHC.Read.$dmreadsPrec @ InflectionData.Mood $dRead
  = InflectionData.$fReadMood_$s$dmreadsPrec
"SPEC/InflectionData $dmreadsPrec @ Number" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                        InflectionData.Number
  GHC.Read.$dmreadsPrec @ InflectionData.Number $dRead
  = InflectionData.$fReadNumber_$s$dmreadsPrec
"SPEC/InflectionData $dmreadsPrec @ Person" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                        InflectionData.Person
  GHC.Read.$dmreadsPrec @ InflectionData.Person $dRead
  = InflectionData.$fReadPerson_$s$dmreadsPrec
"SPEC/InflectionData $dmreadsPrec @ Polarity" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                          InflectionData.Polarity
  GHC.Read.$dmreadsPrec @ InflectionData.Polarity $dRead
  = InflectionData.$fReadPolarity_$s$dmreadsPrec
"SPEC/InflectionData $dmreadsPrec @ Specificity" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                             InflectionData.Specificity
  GHC.Read.$dmreadsPrec @ InflectionData.Specificity $dRead
  = InflectionData.$fReadSpecificity_$s$dmreadsPrec
"SPEC/InflectionData $dmreadsPrec @ Tense" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                       InflectionData.Tense
  GHC.Read.$dmreadsPrec @ InflectionData.Tense $dRead
  = InflectionData.$fReadTense_$s$dmreadsPrec
"SPEC/InflectionData $dmreadsPrec @ Topic" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                       InflectionData.Topic
  GHC.Read.$dmreadsPrec @ InflectionData.Topic $dRead
  = InflectionData.$fReadTopic_$s$dmreadsPrec
"SPEC/InflectionData $dmreadsPrec @ Transitivity" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                              InflectionData.Transitivity
  GHC.Read.$dmreadsPrec @ InflectionData.Transitivity $dRead
  = InflectionData.$fReadTransitivity_$s$dmreadsPrec
"SPEC/InflectionData $dmreadsPrec @ Voice" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                       InflectionData.Voice
  GHC.Read.$dmreadsPrec @ InflectionData.Voice $dRead
  = InflectionData.$fReadVoice_$s$dmreadsPrec
"SPEC/InflectionData $dmreadsPrec @ Volition" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                          InflectionData.Volition
  GHC.Read.$dmreadsPrec @ InflectionData.Volition $dRead
  = InflectionData.$fReadVolition_$s$dmreadsPrec
"SPEC/InflectionData readListDefault @ Agreement" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                              InflectionData.Agreement
  GHC.Read.readListDefault @ InflectionData.Agreement $dRead
  = InflectionData.$fReadAgreement_$sreadListDefault
"SPEC/InflectionData readListDefault @ AgreementSystem" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                                    InflectionData.AgreementSystem
  GHC.Read.readListDefault @ InflectionData.AgreementSystem $dRead
  = InflectionData.$fReadAgreementSystem_$sreadListDefault
"SPEC/InflectionData readListDefault @ Animacy" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                            InflectionData.Animacy
  GHC.Read.readListDefault @ InflectionData.Animacy $dRead
  = InflectionData.$fReadAnimacy_$sreadListDefault
"SPEC/InflectionData readListDefault @ Aspect" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                           InflectionData.Aspect
  GHC.Read.readListDefault @ InflectionData.Aspect $dRead
  = InflectionData.$fReadAspect_$sreadListDefault
"SPEC/InflectionData readListDefault @ Case" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                         InflectionData.Case
  GHC.Read.readListDefault @ InflectionData.Case $dRead
  = InflectionData.$fReadCase_$sreadListDefault
"SPEC/InflectionData readListDefault @ Clusivity" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                              InflectionData.Clusivity
  GHC.Read.readListDefault @ InflectionData.Clusivity $dRead
  = InflectionData.$fReadClusivity_$sreadListDefault
"SPEC/InflectionData readListDefault @ Definiteness" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                                 InflectionData.Definiteness
  GHC.Read.readListDefault @ InflectionData.Definiteness $dRead
  = InflectionData.$fReadDefiniteness_$sreadListDefault
"SPEC/InflectionData readListDefault @ Evidentiality" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                                  InflectionData.Evidentiality
  GHC.Read.readListDefault @ InflectionData.Evidentiality $dRead
  = InflectionData.$fReadEvidentiality_$sreadListDefault
"SPEC/InflectionData readListDefault @ Gender" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                           InflectionData.Gender
  GHC.Read.readListDefault @ InflectionData.Gender $dRead
  = InflectionData.$fReadGender_$sreadListDefault
"SPEC/InflectionData readListDefault @ Honorific" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                              InflectionData.Honorific
  GHC.Read.readListDefault @ InflectionData.Honorific $dRead
  = InflectionData.$fReadHonorific_$sreadListDefault
"SPEC/InflectionData readListDefault @ ManifestType" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                                 InflectionData.ManifestType
  GHC.Read.readListDefault @ InflectionData.ManifestType $dRead
  = InflectionData.$fReadManifestType_$sreadListDefault
"SPEC/InflectionData readListDefault @ Mood" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                         InflectionData.Mood
  GHC.Read.readListDefault @ InflectionData.Mood $dRead
  = InflectionData.$fReadMood_$sreadListDefault
"SPEC/InflectionData readListDefault @ Number" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                           InflectionData.Number
  GHC.Read.readListDefault @ InflectionData.Number $dRead
  = InflectionData.$fReadNumber_$sreadListDefault
"SPEC/InflectionData readListDefault @ Person" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                           InflectionData.Person
  GHC.Read.readListDefault @ InflectionData.Person $dRead
  = InflectionData.$fReadPerson_$sreadListDefault
"SPEC/InflectionData readListDefault @ Polarity" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                             InflectionData.Polarity
  GHC.Read.readListDefault @ InflectionData.Polarity $dRead
  = InflectionData.$fReadPolarity_$sreadListDefault
"SPEC/InflectionData readListDefault @ Specificity" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                                InflectionData.Specificity
  GHC.Read.readListDefault @ InflectionData.Specificity $dRead
  = InflectionData.$fReadSpecificity_$sreadListDefault
"SPEC/InflectionData readListDefault @ Tense" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                          InflectionData.Tense
  GHC.Read.readListDefault @ InflectionData.Tense $dRead
  = InflectionData.$fReadTense_$sreadListDefault
"SPEC/InflectionData readListDefault @ Topic" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                          InflectionData.Topic
  GHC.Read.readListDefault @ InflectionData.Topic $dRead
  = InflectionData.$fReadTopic_$sreadListDefault
"SPEC/InflectionData readListDefault @ Transitivity" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                                 InflectionData.Transitivity
  GHC.Read.readListDefault @ InflectionData.Transitivity $dRead
  = InflectionData.$fReadTransitivity_$sreadListDefault
"SPEC/InflectionData readListDefault @ Voice" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                          InflectionData.Voice
  GHC.Read.readListDefault @ InflectionData.Voice $dRead
  = InflectionData.$fReadVoice_$sreadListDefault
"SPEC/InflectionData readListDefault @ Volition" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                             InflectionData.Volition
  GHC.Read.readListDefault @ InflectionData.Volition $dRead
  = InflectionData.$fReadVolition_$sreadListDefault
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

