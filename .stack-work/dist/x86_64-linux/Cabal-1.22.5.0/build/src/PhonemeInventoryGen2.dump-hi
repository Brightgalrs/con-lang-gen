
==================== FINAL INTERFACE ====================
2016-10-22 02:56:07.237589 UTC

interface conla_1eA9qWUPH9nBowcXqqaV8r:PhonemeInventoryGen2 7103
  interface hash: cbc552482eeb58ab17731514fc8e29b7
  ABI hash: 028442f3ca6f86e43d6eb9055f754995
  export-list hash: 40a207f7cb9bcb8d8940e9cce91a12e2
  orphan hash: f7bd36333a4e279053066505baa5b037
  flag hash: 962af636f8e927040c7daa9c21457292
  sig of: Nothing
  used TH splices: False
  where
exports:
  PhonemeInventoryGen2.makeBacknesses
  PhonemeInventoryGen2.makeConsonants
  PhonemeInventoryGen2.makeDiphInventory
  PhonemeInventoryGen2.makeHeights
  PhonemeInventoryGen2.makeLengths
  PhonemeInventoryGen2.makeManners
  PhonemeInventoryGen2.makePhonations
  PhonemeInventoryGen2.makePlaces
  PhonemeInventoryGen2.makeRoundedneses
  PhonemeInventoryGen2.makeVowels
module dependencies: PhonemeType2
package dependencies: MonadPrompt-1.0.0.5@Monad_5vpMHuuRBzi4bKjpRN3A9L
                      MonadRandom-0.4.2.3@Monad_I7tEJH7vOtsKQS7CpG48fz
                      array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA base-4.8.2.0
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59
                      erf-2.0.0.0@erf_6l78BnvLL4b2mWYp3HJJxX
                      flexible-defaults-0.0.1.2@flexi_70LqvhG3vbS8bRvV8pHtMk
                      ghc-prim-0.4.0.0 integer-gmp-1.0.0.0
                      math-functions-0.1.7.0@mathf_BN6S7j0ar3LC4TsnYu0us5
                      mersenne-random-pure64-0.2.0.5@merse_42koSxEhmjwBS69WXi19xI
                      monad-loops-0.4.3@monad_LQiHRUYhFhYBU7nOOWDOrb
                      mtl-2.2.1@mtl_Aue4leSeVkpKLsfHIV51E8
                      mwc-random-0.13.4.0@mwcra_0lrQ1SkkNA85sa8eZ98xQk
                      old-locale-1.0.0.7@oldlo_7h2Gx6mVPJ5Gheca8j9Mpe
                      old-time-1.1.0.3@oldti_JVjJvknZJ0JKghfag2Jw2L
                      pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC
                      primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3
                      random-extras-0.19@rando_11jAc932BDRD7ydjCrRr4L
                      random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW
                      random-1.1@rando_9Kgekc9yEaLHLNUuw6paWL
                      random-shuffle-0.0.4@rando_9kOz9tEn1526ShtWz8x59X
                      random-fu-0.2.7.0@rando_HO0DW1nA2fDCxZJ62mvJHr
                      rvar-0.2.0.3@rvar_HDSuhGFxwNTDX4EfF6w8WG
                      stateref-0.3@state_KptOBHsY85L8YzpDAos2Hi
                      stm-2.4.4.1@stm_EyxFXFfnfY05IrjGaqCxeD
                      syb-0.6@syb_4kccWaTe3QZLxAMQYKgEyE template-haskell-2.10.0.0
                      th-extras-0.0.0.4@thext_LRY1RUMy7ShLl2tqhMyHdO
                      time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn
                      transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF
                      vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln
orphans: MonadRandom-0.4.2.3@Monad_I7tEJH7vOtsKQS7CpG48fz:Control.Monad.Random
         base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         mersenne-random-pure64-0.2.0.5@merse_42koSxEhmjwBS69WXi19xI:System.Random.Mersenne.Pure64
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source.IO
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source.MWC
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source.PureMT
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source.StdGen
         stateref-0.3@state_KptOBHsY85L8YzpDAos2Hi:Data.StateRef.Instances
         stateref-0.3@state_KptOBHsY85L8YzpDAos2Hi:Data.StateRef.Instances.STM
         stm-2.4.4.1@stm_EyxFXFfnfY05IrjGaqCxeD:Control.Monad.STM
         syb-0.6@syb_4kccWaTe3QZLxAMQYKgEyE:Data.Generics.Instances
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Calendar.Gregorian
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Format.Parse
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.LocalTime.LocalTime
         transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.Trans.Error
         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Fusion.Bundle
         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Sequence
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
                         mwc-random-0.13.4.0@mwcra_0lrQ1SkkNA85sa8eZ98xQk:System.Random.MWC
                         pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3:Control.Monad.Primitive
                         template-haskell-2.10.0.0:Language.Haskell.TH.Syntax
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Primitive
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed.Base
import  -/  base-4.8.2.0:Control.Monad 480c5067477275068c9b98be08410df9
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:Data.Functor 5c701b0af1708f0192a25dfe14ce6274
import  -/  base-4.8.2.0:Data.List 3f0782c8d4bf50eecefcd5ea1798aac8
import  -/  base-4.8.2.0:Data.Traversable 7576318f4ef8587ad947f87012b65abf
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  PhonemeType2 197339ce6b16abf97787f114b13340ff
  exports: df9b2faa8257842f4b45d50bfdeb2c0c
  AFFRICATE 7f9b56ccdd51beda21fbca2d7c4390ff
  ALVEOLAR 1002bef474c0cf17e04f7952d3e9615d
  ALVEOLOPALATAL 7e3d63e3234d8fb2fc1e7ef87f1610f4
  APPROXIMANT 57179ac9330f0a6a6cacb2b1f21f5a30
  ASPIRATED c44131623543ff85f5296adc1f046ccf
  BACK bd4326b0f074220e7bcdb1b6131dc4ba
  BILABIAL 474bada338b57149d9dcbfce23a1b969
  BREATHY ee49fa52f2a091d27a50c9d3e28c04b3
  Backness ca97fc28a82e78e4c561f0291cfc5413
  CENTRAL f90d79e899aaf4564670749266cf7fb7
  CLOSE 124669774fbe44b2d4555fcbaf098c12
  CLOSEMID 58d6a7e202141084b11f942ab6298eca
  CORONAL afe8b9b2b34d6611efdd5c3ef0a590e7
  CREAKY 4181102944d7882da867be5bf8dc8cf4
  Consonant bc0bd90ab878d81164ac4fb7babd69d6
  DEFAULT 7ed36c5de0c3760c4ebbc11bc2b43a10
  DENTAL 6f5ac053179b5faec650dc3ce26843d1
  DENTIALVEOLAR 0fb9235015b300356b5f0b885a92576e
  DORSAL 62874b02be389b333f6d56b503b7dba1
  Diphthong e39fe806f632e9a04b50747a0a03008e
  EPIGLOTTAL 5c03f6751090ba67220bf409496ee43c
  EPIPHARYNGEAL be828cb16b7914b9db8ae3fb5177bbf1
  FLAP 4c03b39b6f1fbde5bac5f3878b9da27f
  FRICATIVE c45d36265199ca0c180e5e5d0fb9ad01
  FRONT 4ea3e79dec6d179ada718bece2d7a552
  GLOTTAL 21d75c2e04edaf16e9d80b3ecd6e3863
  Height 259830e3ec94d1ed981c032991c75e25
  LABIAL 20d75582f1f44e3d37bffcc163007a6b
  LABIODENTAL 7b974a173c22348c14c357b07b52f8f3
  LAFFRICATE ae1d3269351068c54f142f04b7728fa7
  LAPPROXIMANT c70fe2e653e5f27fbbcee02aaf60f916
  LARYNGEAL 314e3f8ca129bb132ebef21a393c777a
  LFLAP 1b494ff2f51b82db5845f010e2bdbdc1
  LFRICATIVE 6b89d8892f3c55fdbe87f10d069e7cf8
  LONG dde4995c165bb91589275a673d94ff9e
  Length f70a5441da9178aaaa0d5d40e666f6d3
  MID 765e89afd9e863571bebda9e8f94d079
  MODAL bcf40a06dcc3f1abc814ad76f131d0d0
  Manner 9412c45cd95f18b011a2b8e64ee99754
  NASAL 0d2fd6bc2c4ba81f05bee7974aa27c6e
  NEARBACK c6ec4205f17f2930c6223fec97935106
  NEARCLOSE 34ef302d7ea89a95c7787470df54dc00
  NEARFRONT b6915085d3a909777bff8d1915e05569
  NEAROPEN 87962e2e7a7f94f9b17fe6eb7b25d511
  NORMAL 2be931513512ffe190f36cec98b454d3
  OPEN 7f0bd64d5767cdea0f86ce40e6f5757d
  OPENMID 49564928ec9b5e28349e6c61a8095130
  PALATAL 4d90a172e8f082cae5f4b83d1defe9ef
  PHARYNGEAL f01268aa8ee0dc0ff219d4fe40d30aee
  POSTALVEOLAR 80f9af98fecea71eff739c62a36c5eac
  Phonation 784f1f65fce67f349dccdb2a747dd13a
  Phoneme 20569906d69b1b60892d82b112a7f488
  Place f8e121d7060ad8a0878087af8ae85de9
  RETROFLEX 2055608f7f8383c1ab913e1ba0935e8b
  ROUNDED e6d9ff2379c9df53625b56e2c4f9a237
  Roundedness 142ff138328e86990b904685ecd67f0e
  SAFFRICATE 086130152032b767a0cf7491380e4756
  SHORT c84e15786c228acc9880c9ff40818946
  SILIBANT 1340b5094dc1eab3afb36889a59fa1b5
  SLACK 05cd15071bdee9f81b3ef4189423d48e
  STIFF 848b2b5df4a421897fcdf43fbe81df73
  STOP a9ff17b83a14b51a42e34344c2fe90aa
  TRILL 83b20206325bba2ed3b347c642118bd7
  UNROUNDED 23aef0c799eff806fb16266c96b1f2e0
  UVULAR e83365e0a374867b5fbeee44b8852cdd
  VELAR 7ce2d18b50a8dba21c9d0805ac314696
  VOICELESS 8b62bb6163b0ec4f57a4780c6d0b3e2f
  Vowel 7b55ccf548e3963c82bbac249efc2663
  csymbol 30ee196a1b2ab856dfeafcf6c7f1e4de
  vsymbol 04e5c1e7290d5155773319b75f6b2e4a
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  random-extras-0.19@rando_11jAc932BDRD7ydjCrRr4L:Data.Random.Extras 5dc1684f88e3f2655bfb5d7aca60bf5c
import  -/  random-fu-0.2.7.0@rando_HO0DW1nA2fDCxZJ62mvJHr:Data.Random 355d6844bb1b3189cb19ec0007f6f130
import  -/  random-fu-0.2.7.0@rando_HO0DW1nA2fDCxZJ62mvJHr:Data.Random.Distribution.Uniform ce34c1edd0e59e868fcf9e0bf914c4ef
import  -/  rvar-0.2.0.3@rvar_HDSuhGFxwNTDX4EfF6w8WG:Data.RVar 9b7fbdb5f1778e76b8a65f45a17cccb1
d07849dc8786089aae993c1c3ec3eb09
  $s$fEq(,) ::
    GHC.Classes.Eq (PhonemeType2.Place, PhonemeType2.Manner)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (PhonemeType2.Place, PhonemeType2.Manner)
                  (GHC.Classes.$fEq(,)_$c==
                     @ PhonemeType2.Place
                     @ PhonemeType2.Manner
                     PhonemeType2.$fEqPlace
                     PhonemeType2.$fEqManner)
                  (GHC.Classes.$fEq(,)_$c/=
                     @ PhonemeType2.Place
                     @ PhonemeType2.Manner
                     PhonemeType2.$fEqPlace
                     PhonemeType2.$fEqManner) -}
d47cf0a389578013ca6a5ec2a53d4174
  makeBacknesses :: Data.RVar.RVar [PhonemeType2.Backness]
  {- Unfolding: (Data.Random.Extras.choice
                   @ [PhonemeType2.Backness]
                   PhonemeInventoryGen2.makeBacknesses1) -}
c7656fe528a7d5de9930f7ee04e83db6
  makeBacknesses1 :: [[PhonemeType2.Backness]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeType2.Backness]
                   PhonemeInventoryGen2.makeBacknesses13
                   PhonemeInventoryGen2.makeBacknesses2) -}
e10ad7345a34bb23dd0c7bf19b9effcc
  makeBacknesses10 :: [PhonemeType2.Backness]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeType2.Backness
                   PhonemeType2.FRONT
                   PhonemeInventoryGen2.makeBacknesses11) -}
0cc0c33c89247eb9c21444b0ec670d72
  makeBacknesses11 :: [PhonemeType2.Backness]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeType2.Backness
                   PhonemeType2.CENTRAL
                   PhonemeInventoryGen2.makeBacknesses9) -}
b0b58c8850db1b7f3db0ee964a489407
  makeBacknesses12 :: [PhonemeType2.Backness]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeType2.Backness
                   PhonemeType2.FRONT
                   PhonemeInventoryGen2.makeBacknesses9) -}
d73c08f53da94822ec2da0355d463370
  makeBacknesses13 :: [PhonemeType2.Backness]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeType2.Backness
                   PhonemeType2.CENTRAL
                   (GHC.Types.[] @ PhonemeType2.Backness)) -}
952b102a72e039e9aacdaafcad847b2a
  makeBacknesses2 :: [[PhonemeType2.Backness]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeType2.Backness]
                   PhonemeInventoryGen2.makeBacknesses12
                   PhonemeInventoryGen2.makeBacknesses3) -}
49612110a7a35fc0291c6360e661d713
  makeBacknesses3 :: [[PhonemeType2.Backness]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeType2.Backness]
                   PhonemeInventoryGen2.makeBacknesses10
                   PhonemeInventoryGen2.makeBacknesses4) -}
f69a8e3876faf49da1c37473776c85f6
  makeBacknesses4 :: [[PhonemeType2.Backness]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeType2.Backness]
                   PhonemeInventoryGen2.makeBacknesses5
                   (GHC.Types.[] @ [PhonemeType2.Backness])) -}
84bf7189de85e2157105450d713d039a
  makeBacknesses5 :: [PhonemeType2.Backness]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeType2.Backness
                   PhonemeType2.FRONT
                   PhonemeInventoryGen2.makeBacknesses6) -}
f3b8003df94f9af47837104a0243dccb
  makeBacknesses6 :: [PhonemeType2.Backness]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeType2.Backness
                   PhonemeType2.NEARFRONT
                   PhonemeInventoryGen2.makeBacknesses7) -}
92883b27f3c1264302a07f7ff99fc878
  makeBacknesses7 :: [PhonemeType2.Backness]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeType2.Backness
                   PhonemeType2.CENTRAL
                   PhonemeInventoryGen2.makeBacknesses8) -}
181683b6c0b0c68ffa82b973a8b71850
  makeBacknesses8 :: [PhonemeType2.Backness]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeType2.Backness
                   PhonemeType2.NEARBACK
                   PhonemeInventoryGen2.makeBacknesses9) -}
dbe90db81e0ed0649973e64baee3da1b
  makeBacknesses9 :: [PhonemeType2.Backness]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeType2.Backness
                   PhonemeType2.BACK
                   (GHC.Types.[] @ PhonemeType2.Backness)) -}
bec58619e60cc2a802f24dca36081cdf
  makeConsonants ::
    [PhonemeType2.Place]
    -> [PhonemeType2.Manner]
    -> [PhonemeType2.Phonation]
    -> Data.RVar.RVar [PhonemeType2.Phoneme]
  {- Arity: 3, Strictness: <L,U><L,U><L,U> -}
9d84559b62cad9f8b2d6e5500497e0be
  makeDiphInventory ::
    GHC.Types.Int
    -> [PhonemeType2.Phoneme] -> Data.RVar.RVar [PhonemeType2.Phoneme]
  {- Arity: 2, Strictness: <L,1*U(U)><L,U> -}
c458da505b7fc70464fcce48718483c3
  makeHeights :: Data.RVar.RVar [PhonemeType2.Height]
  {- Unfolding: (Data.Random.Extras.choice
                   @ [PhonemeType2.Height]
                   PhonemeInventoryGen2.makeHeights1) -}
b12d2f0cffc01608e2aa4d473aaddda1
  makeHeights1 :: [[PhonemeType2.Height]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeType2.Height]
                   PhonemeInventoryGen2.makeHeights20
                   PhonemeInventoryGen2.makeHeights2) -}
4d3949537ad294e904e984292c928d22
  makeHeights10 :: [PhonemeType2.Height]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeType2.Height
                   PhonemeType2.OPENMID
                   PhonemeInventoryGen2.makeHeights11) -}
b90ef6da3eda30d90dc47b714f41b8cc
  makeHeights11 :: [PhonemeType2.Height]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeType2.Height
                   PhonemeType2.NEAROPEN
                   PhonemeInventoryGen2.makeHeights12) -}
2e3a3100cec899d3ead8721ab7b21f59
  makeHeights12 :: [PhonemeType2.Height]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeType2.Height
                   PhonemeType2.OPEN
                   (GHC.Types.[] @ PhonemeType2.Height)) -}
7f4c74018d4814003888f18ab3cc71a2
  makeHeights13 :: [PhonemeType2.Height]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeType2.Height
                   PhonemeType2.CLOSE
                   PhonemeInventoryGen2.makeHeights14) -}
d9a4bd936ca046839f46c144358a5dfb
  makeHeights14 :: [PhonemeType2.Height]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeType2.Height
                   PhonemeType2.NEARCLOSE
                   PhonemeInventoryGen2.makeHeights15) -}
7a4b8befe25400bcd330586f5a620216
  makeHeights15 :: [PhonemeType2.Height]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeType2.Height
                   PhonemeType2.CLOSEMID
                   PhonemeInventoryGen2.makeHeights10) -}
2909ad8df67c4e6a5939dada4da4ce81
  makeHeights16 :: [PhonemeType2.Height]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeType2.Height
                   PhonemeType2.CLOSE
                   PhonemeInventoryGen2.makeHeights17) -}
785234d0229a57937798ed7da56578aa
  makeHeights17 :: [PhonemeType2.Height]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeType2.Height
                   PhonemeType2.CLOSEMID
                   PhonemeInventoryGen2.makeHeights18) -}
0f029395afaed2048dc032cb7dda4bf4
  makeHeights18 :: [PhonemeType2.Height]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeType2.Height
                   PhonemeType2.OPENMID
                   PhonemeInventoryGen2.makeHeights12) -}
8843afd42e1ed9ec79cb03087ca8d009
  makeHeights19 :: [PhonemeType2.Height]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeType2.Height
                   PhonemeType2.CLOSE
                   PhonemeInventoryGen2.makeHeights12) -}
d598ab2faea444c3b077fd4e3a377bf9
  makeHeights2 :: [[PhonemeType2.Height]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeType2.Height]
                   PhonemeInventoryGen2.makeHeights19
                   PhonemeInventoryGen2.makeHeights3) -}
b4da88c3aad6505d4a0d563e3aa53cfc
  makeHeights20 :: [PhonemeType2.Height]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeType2.Height
                   PhonemeType2.MID
                   (GHC.Types.[] @ PhonemeType2.Height)) -}
ccd761519646f1c30be41343c5015768
  makeHeights3 :: [[PhonemeType2.Height]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeType2.Height]
                   PhonemeInventoryGen2.makeHeights16
                   PhonemeInventoryGen2.makeHeights4) -}
540e35e5eb7bd6d3a2775aefc64ae777
  makeHeights4 :: [[PhonemeType2.Height]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeType2.Height]
                   PhonemeInventoryGen2.makeHeights13
                   PhonemeInventoryGen2.makeHeights5) -}
967325828caf53441a92c6c323cfe5ae
  makeHeights5 :: [[PhonemeType2.Height]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeType2.Height]
                   PhonemeInventoryGen2.makeHeights6
                   (GHC.Types.[] @ [PhonemeType2.Height])) -}
3f04b9c8c94807ef25bc1938643f47d1
  makeHeights6 :: [PhonemeType2.Height]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeType2.Height
                   PhonemeType2.CLOSE
                   PhonemeInventoryGen2.makeHeights7) -}
0b7281ddcc1753f06cffb0a1ec865366
  makeHeights7 :: [PhonemeType2.Height]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeType2.Height
                   PhonemeType2.NEARCLOSE
                   PhonemeInventoryGen2.makeHeights8) -}
640058aae5f09e4c2377f52329b59b21
  makeHeights8 :: [PhonemeType2.Height]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeType2.Height
                   PhonemeType2.CLOSEMID
                   PhonemeInventoryGen2.makeHeights9) -}
80bc4cf3a37fcc19c8195b71eb354819
  makeHeights9 :: [PhonemeType2.Height]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeType2.Height
                   PhonemeType2.MID
                   PhonemeInventoryGen2.makeHeights10) -}
eb291d0741c303689c8b9a8566b9045d
  makeLengths :: Data.RVar.RVar [PhonemeType2.Length]
  {- Unfolding: (Data.Random.Extras.choice
                   @ [PhonemeType2.Length]
                   PhonemeInventoryGen2.makeLengths1) -}
f6ceca1836ccc9849cb38216a75f7b18
  makeLengths1 :: [[PhonemeType2.Length]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeType2.Length]
                   PhonemeInventoryGen2.makeLengths9
                   PhonemeInventoryGen2.makeLengths2) -}
3a790d653c2b92723e08a446659d6ea4
  makeLengths2 :: [[PhonemeType2.Length]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeType2.Length]
                   PhonemeInventoryGen2.makeLengths6
                   PhonemeInventoryGen2.makeLengths3) -}
64565f2aba6b6aed903ec02c686053b4
  makeLengths3 :: [[PhonemeType2.Length]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeType2.Length]
                   PhonemeInventoryGen2.makeLengths8
                   PhonemeInventoryGen2.makeLengths4) -}
25837ccf717ff6898b042e8286ebfe0a
  makeLengths4 :: [[PhonemeType2.Length]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeType2.Length]
                   PhonemeInventoryGen2.makeLengths5
                   (GHC.Types.[] @ [PhonemeType2.Length])) -}
053f07ddc823d0d146684b4091b94d62
  makeLengths5 :: [PhonemeType2.Length]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeType2.Length
                   PhonemeType2.SHORT
                   PhonemeInventoryGen2.makeLengths6) -}
9fbbb35a0c59171164ec968cb85e828a
  makeLengths6 :: [PhonemeType2.Length]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeType2.Length
                   PhonemeType2.NORMAL
                   PhonemeInventoryGen2.makeLengths7) -}
ec43c666e82e80061d25c6eec67ffe79
  makeLengths7 :: [PhonemeType2.Length]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeType2.Length
                   PhonemeType2.LONG
                   (GHC.Types.[] @ PhonemeType2.Length)) -}
771f774d8eff6e781e7ff4d008884d6a
  makeLengths8 :: [PhonemeType2.Length]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeType2.Length
                   PhonemeType2.SHORT
                   PhonemeInventoryGen2.makeLengths9) -}
19e351c5a0f51661629f204dbeafa69c
  makeLengths9 :: [PhonemeType2.Length]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeType2.Length
                   PhonemeType2.NORMAL
                   (GHC.Types.[] @ PhonemeType2.Length)) -}
e1af4ee2035caf41b1dfb23aeeacb445
  makeManners :: Data.RVar.RVar [PhonemeType2.Manner]
  {- Arity: 2, Strictness: <L,C(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                PhonemeInventoryGen2.makeManners1
                  `cast`
                (Trans
                     (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                               <Control.Monad.Prompt.Lift
                                  Data.Random.Source.Internal.Prim.Prim
                                  Data.Functor.Identity.Identity>_R
                               <[PhonemeType2.Manner]>_R))
                     (Trans
                          (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                    <Data.Random.Source.Internal.Prim.Prim>_R
                                    <Data.Functor.Identity.Identity>_R))
                          (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeType2.Manner]>_N)) -}
26333b061fb6bd4a67f1979cd794f458
  makeManners1 ::
    ([PhonemeType2.Manner] -> b1)
    -> (forall a2.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a2
        -> (a2 -> b1) -> b1)
    -> b1
  {- Arity: 2, Strictness: <L,C(U)><L,U>,
     Unfolding: (\ @ b1
                   eta :: [PhonemeType2.Manner] -> b1
                   eta1 :: forall a6.
                           Control.Monad.Prompt.Lift
                             Data.Random.Source.Internal.Prim.Prim
                             Data.Functor.Identity.Identity
                             a6
                           -> (a6 -> b1) -> b1 ->
                 PhonemeInventoryGen2.makeManners77
                   PhonemeInventoryGen2.makeManners2
                   @ b1
                   (\ x :: [[PhonemeType2.Manner]] ->
                    case PhonemeInventoryGen2.makeManners_go x of vx { DEFAULT ->
                    eta vx })
                   eta1) -}
ae737c5d98e61a5bd8e2a6ac2c683507
  makeManners10 :: [[PhonemeType2.Manner]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeType2.Manner]
                   PhonemeInventoryGen2.makeManners11
                   (GHC.Types.[] @ [PhonemeType2.Manner])) -}
94838db309fdf31baf06eb35b50dbc07
  makeManners11 :: [PhonemeType2.Manner]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeType2.Manner
                   PhonemeType2.TRILL
                   (GHC.Types.[] @ PhonemeType2.Manner)) -}
dbf3ef6ac455838cea816e75aaa45f65
  makeManners12 ::
    ([PhonemeType2.Manner] -> b1)
    -> (forall a2.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a2
        -> (a2 -> b1) -> b1)
    -> b1
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ b1
                   eta2 :: [PhonemeType2.Manner] -> b1
                   eta3 :: forall a6.
                           Control.Monad.Prompt.Lift
                             Data.Random.Source.Internal.Prim.Prim
                             Data.Functor.Identity.Identity
                             a6
                           -> (a6 -> b1) -> b1 ->
                 PhonemeInventoryGen2.makeManners_eta
                   `cast`
                 (Trans
                      (Trans
                           (Data.RVar.NTCo:RVarT[0] <Data.Functor.Identity.Identity>_N)
                           (Control.Monad.Prompt.NTCo:PromptT[0]
                                <Data.Random.Source.Internal.Prim.Prim>_R
                                <Data.Functor.Identity.Identity>_R) <Data.RVar.RVarT
                                                                       Data.Functor.Identity.Identity
                                                                       [PhonemeType2.Manner]>_N)
                      (Control.Monad.Prompt.NTCo:Prompt[0]
                           <Control.Monad.Prompt.Lift
                              Data.Random.Source.Internal.Prim.Prim
                              Data.Functor.Identity.Identity>_R
                           <Data.RVar.RVarT
                              Data.Functor.Identity.Identity [PhonemeType2.Manner]>_R))
                   @ b1
                   (\ x :: Data.RVar.RVarT
                             Data.Functor.Identity.Identity [PhonemeType2.Manner] ->
                    case x `cast`
                         (Trans
                              (Trans
                                   (Data.RVar.NTCo:RVarT[0] <Data.Functor.Identity.Identity>_N)
                                   (Control.Monad.Prompt.NTCo:PromptT[0]
                                        <Data.Random.Source.Internal.Prim.Prim>_R
                                        <Data.Functor.Identity.Identity>_R) <[PhonemeType2.Manner]>_N)
                              (Control.Monad.Prompt.NTCo:Prompt[0]
                                   <Control.Monad.Prompt.Lift
                                      Data.Random.Source.Internal.Prim.Prim
                                      Data.Functor.Identity.Identity>_R
                                   <[PhonemeType2.Manner]>_R)) of nt { DEFAULT ->
                    nt @ b1 eta2 eta3 })
                   eta3) -}
6e0316e1a42506c937a4d6822379c4f3
  makeManners13 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeType2.Manner]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeType2.Manner])
                   PhonemeInventoryGen2.makeManners24
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[PhonemeType2.Manner]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeType2.Manner]>_N))
                   PhonemeInventoryGen2.makeManners14) -}
88bc504f653d77e32456484fc680b80f
  makeManners14 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeType2.Manner]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeType2.Manner])
                   PhonemeInventoryGen2.makeManners15
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[PhonemeType2.Manner]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeType2.Manner]>_N))
                   (GHC.Types.[]
                      @ (Data.RVar.RVarT
                           Data.Functor.Identity.Identity [PhonemeType2.Manner]))) -}
4bf38d0183d0c3a0767902bfa6843803
  makeManners15 ::
    ([PhonemeType2.Manner] -> b1)
    -> (forall a2.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a2
        -> (a2 -> b1) -> b1)
    -> b1
  {- Arity: 2,
     Unfolding: (\ @ b1
                   eta :: [PhonemeType2.Manner] -> b1
                   eta1 :: forall a6.
                           Control.Monad.Prompt.Lift
                             Data.Random.Source.Internal.Prim.Prim
                             Data.Functor.Identity.Identity
                             a6
                           -> (a6 -> b1) -> b1 ->
                 PhonemeInventoryGen2.makeManners23
                   PhonemeInventoryGen2.makeManners16
                   @ b1
                   (\ x :: [[PhonemeType2.Manner]] ->
                    case PhonemeInventoryGen2.makeManners_go1 x of vx { DEFAULT ->
                    eta vx })
                   eta1) -}
abafe67f0274b09a92fb34e61894bee1
  makeManners16 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeType2.Manner]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeType2.Manner])
                   PhonemeInventoryGen2.makeManners22
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[PhonemeType2.Manner]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeType2.Manner]>_N))
                   PhonemeInventoryGen2.makeManners17) -}
540b426e173dd19ac4a9fad1a92790b0
  makeManners17 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeType2.Manner]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeType2.Manner])
                   PhonemeInventoryGen2.makeManners18
                   (GHC.Types.[]
                      @ (Data.RVar.RVarT
                           Data.Functor.Identity.Identity [PhonemeType2.Manner]))) -}
e0f05039747392a66cf65db779f75c18
  makeManners18 :: Data.RVar.RVar [PhonemeType2.Manner]
  {- Unfolding: (Data.Random.Extras.choice
                   @ [PhonemeType2.Manner]
                   PhonemeInventoryGen2.makeManners19) -}
d32540cd841865f254e21c5c5e5a89a1
  makeManners19 :: [[PhonemeType2.Manner]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeType2.Manner]
                   (GHC.Types.[] @ PhonemeType2.Manner)
                   PhonemeInventoryGen2.makeManners20) -}
eeaee1133fe4250d70e6e35eed329158
  makeManners2 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeType2.Manner]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeType2.Manner])
                   PhonemeInventoryGen2.makeManners76
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[PhonemeType2.Manner]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeType2.Manner]>_N))
                   PhonemeInventoryGen2.makeManners3) -}
7a27e095c935e2c3660472b8c22990a1
  makeManners20 :: [[PhonemeType2.Manner]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeType2.Manner]
                   PhonemeInventoryGen2.makeManners21
                   (GHC.Types.[] @ [PhonemeType2.Manner])) -}
3b5e8bac3ae6992ec9be7b20c599bf0a
  makeManners21 :: [PhonemeType2.Manner]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeType2.Manner
                   PhonemeType2.LAPPROXIMANT
                   (GHC.Types.[] @ PhonemeType2.Manner)) -}
7d421684c490a30c398ca1b681184aba
  makeManners22 ::
    ([PhonemeType2.Manner] -> b)
    -> (forall a2.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a2
        -> (a2 -> b) -> b)
    -> b
  {- Arity: 2, HasNoCafRefs, Strictness: <C(S),1*C1(U)><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ b
                   eta1 :: [PhonemeType2.Manner] -> b
                   eta2 :: forall a6.
                           Control.Monad.Prompt.Lift
                             Data.Random.Source.Internal.Prim.Prim
                             Data.Functor.Identity.Identity
                             a6
                           -> (a6 -> b) -> b ->
                 eta1 PhonemeInventoryGen2.makeManners_eta1) -}
a45b790e5b300e15ce508f2fd2193ace
  makeManners23 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeType2.Manner]]
    -> forall b.
       ([[PhonemeType2.Manner]] -> b)
       -> (forall a.
           Control.Monad.Prompt.Lift
             Data.Random.Source.Internal.Prim.Prim
             Data.Functor.Identity.Identity
             a
           -> (a -> b) -> b)
       -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,C(U)><L,U> -}
97454b486ff165f6f9b5e5421f6aadc9
  makeManners24 ::
    ([PhonemeType2.Manner] -> b)
    -> (forall a2.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a2
        -> (a2 -> b) -> b)
    -> b
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (\ @ b
                   eta1 :: [PhonemeType2.Manner] -> b
                   eta2 :: forall a6.
                           Control.Monad.Prompt.Lift
                             Data.Random.Source.Internal.Prim.Prim
                             Data.Functor.Identity.Identity
                             a6
                           -> (a6 -> b) -> b ->
                 eta1 (GHC.Types.[] @ PhonemeType2.Manner)) -}
c90d1ff42855e8c62ac57a9f333adfd8
  makeManners25 ::
    ([PhonemeType2.Manner] -> b1)
    -> (forall a2.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a2
        -> (a2 -> b1) -> b1)
    -> b1
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ b1
                   eta2 :: [PhonemeType2.Manner] -> b1
                   eta3 :: forall a6.
                           Control.Monad.Prompt.Lift
                             Data.Random.Source.Internal.Prim.Prim
                             Data.Functor.Identity.Identity
                             a6
                           -> (a6 -> b1) -> b1 ->
                 PhonemeInventoryGen2.makeManners_eta2
                   `cast`
                 (Trans
                      (Trans
                           (Data.RVar.NTCo:RVarT[0] <Data.Functor.Identity.Identity>_N)
                           (Control.Monad.Prompt.NTCo:PromptT[0]
                                <Data.Random.Source.Internal.Prim.Prim>_R
                                <Data.Functor.Identity.Identity>_R) <Data.RVar.RVarT
                                                                       Data.Functor.Identity.Identity
                                                                       [PhonemeType2.Manner]>_N)
                      (Control.Monad.Prompt.NTCo:Prompt[0]
                           <Control.Monad.Prompt.Lift
                              Data.Random.Source.Internal.Prim.Prim
                              Data.Functor.Identity.Identity>_R
                           <Data.RVar.RVarT
                              Data.Functor.Identity.Identity [PhonemeType2.Manner]>_R))
                   @ b1
                   (\ x :: Data.RVar.RVarT
                             Data.Functor.Identity.Identity [PhonemeType2.Manner] ->
                    case x `cast`
                         (Trans
                              (Trans
                                   (Data.RVar.NTCo:RVarT[0] <Data.Functor.Identity.Identity>_N)
                                   (Control.Monad.Prompt.NTCo:PromptT[0]
                                        <Data.Random.Source.Internal.Prim.Prim>_R
                                        <Data.Functor.Identity.Identity>_R) <[PhonemeType2.Manner]>_N)
                              (Control.Monad.Prompt.NTCo:Prompt[0]
                                   <Control.Monad.Prompt.Lift
                                      Data.Random.Source.Internal.Prim.Prim
                                      Data.Functor.Identity.Identity>_R
                                   <[PhonemeType2.Manner]>_R)) of nt { DEFAULT ->
                    nt @ b1 eta2 eta3 })
                   eta3) -}
00508272e88e411aff1f67a63c5a85bc
  makeManners26 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeType2.Manner]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeType2.Manner])
                   PhonemeInventoryGen2.makeManners24
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[PhonemeType2.Manner]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeType2.Manner]>_N))
                   PhonemeInventoryGen2.makeManners27) -}
b13dd1b289a849076465c4ae4eb98301
  makeManners27 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeType2.Manner]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeType2.Manner])
                   PhonemeInventoryGen2.makeManners28
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[PhonemeType2.Manner]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeType2.Manner]>_N))
                   (GHC.Types.[]
                      @ (Data.RVar.RVarT
                           Data.Functor.Identity.Identity [PhonemeType2.Manner]))) -}
62e3e82a38c5da2c20544c30f3369e78
  makeManners28 ::
    ([PhonemeType2.Manner] -> b1)
    -> (forall a2.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a2
        -> (a2 -> b1) -> b1)
    -> b1
  {- Arity: 2,
     Unfolding: (\ @ b1
                   eta :: [PhonemeType2.Manner] -> b1
                   eta1 :: forall a6.
                           Control.Monad.Prompt.Lift
                             Data.Random.Source.Internal.Prim.Prim
                             Data.Functor.Identity.Identity
                             a6
                           -> (a6 -> b1) -> b1 ->
                 PhonemeInventoryGen2.makeManners59
                   PhonemeInventoryGen2.makeManners29
                   @ b1
                   (\ x :: [[PhonemeType2.Manner]] ->
                    case PhonemeInventoryGen2.makeManners_go2 x of vx { DEFAULT ->
                    eta vx })
                   eta1) -}
d564385c10355dcef123f9111e94e791
  makeManners29 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeType2.Manner]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeType2.Manner])
                   PhonemeInventoryGen2.makeManners58
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[PhonemeType2.Manner]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeType2.Manner]>_N))
                   PhonemeInventoryGen2.makeManners30) -}
517ac75e393f025c39cd44a45368dcfd
  makeManners3 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeType2.Manner]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeType2.Manner])
                   PhonemeInventoryGen2.makeManners72
                   PhonemeInventoryGen2.makeManners4) -}
7e5cc81f297bd1f7f3691ba9ea87a075
  makeManners30 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeType2.Manner]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeType2.Manner])
                   PhonemeInventoryGen2.makeManners41
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[PhonemeType2.Manner]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeType2.Manner]>_N))
                   PhonemeInventoryGen2.makeManners31) -}
a751930672e69424e45bb3440a1b5eb7
  makeManners31 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeType2.Manner]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeType2.Manner])
                   PhonemeInventoryGen2.makeManners37
                   PhonemeInventoryGen2.makeManners32) -}
6d6af497b74b413a3d965693d8cc9a7b
  makeManners32 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeType2.Manner]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeType2.Manner])
                   PhonemeInventoryGen2.makeManners33
                   (GHC.Types.[]
                      @ (Data.RVar.RVarT
                           Data.Functor.Identity.Identity [PhonemeType2.Manner]))) -}
bb79b84324a464b52ef97306ed424b56
  makeManners33 :: Data.RVar.RVar [PhonemeType2.Manner]
  {- Unfolding: (Data.Random.Extras.choice
                   @ [PhonemeType2.Manner]
                   PhonemeInventoryGen2.makeManners34) -}
2ad7e904caf929f2ae0d8a1287e46156
  makeManners34 :: [[PhonemeType2.Manner]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeType2.Manner]
                   (GHC.Types.[] @ PhonemeType2.Manner)
                   PhonemeInventoryGen2.makeManners35) -}
9783a2994af484ac3e045de98891445f
  makeManners35 :: [[PhonemeType2.Manner]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeType2.Manner]
                   PhonemeInventoryGen2.makeManners36
                   (GHC.Types.[] @ [PhonemeType2.Manner])) -}
344151845d748795dc388fc595e4b932
  makeManners36 :: [PhonemeType2.Manner]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeType2.Manner
                   PhonemeType2.LFRICATIVE
                   (GHC.Types.[] @ PhonemeType2.Manner)) -}
e362b9fca2390fd0013ee4267cb31f76
  makeManners37 :: Data.RVar.RVar [PhonemeType2.Manner]
  {- Unfolding: (Data.Random.Extras.choice
                   @ [PhonemeType2.Manner]
                   PhonemeInventoryGen2.makeManners38) -}
48b64d4ccb6fbb6b443ebae074c3cb11
  makeManners38 :: [[PhonemeType2.Manner]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeType2.Manner]
                   (GHC.Types.[] @ PhonemeType2.Manner)
                   PhonemeInventoryGen2.makeManners39) -}
af6eb1852cc1cc1b0cec460f630ab2c4
  makeManners39 :: [[PhonemeType2.Manner]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeType2.Manner]
                   PhonemeInventoryGen2.makeManners40
                   (GHC.Types.[] @ [PhonemeType2.Manner])) -}
57d9395c7f0519fde72fa5def26d0b61
  makeManners4 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeType2.Manner]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeType2.Manner])
                   PhonemeInventoryGen2.makeManners60
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[PhonemeType2.Manner]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeType2.Manner]>_N))
                   PhonemeInventoryGen2.makeManners5) -}
6596e82032ffebf930def4858fc87c1f
  makeManners40 :: [PhonemeType2.Manner]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeType2.Manner
                   PhonemeType2.SILIBANT
                   (GHC.Types.[] @ PhonemeType2.Manner)) -}
c5045d0a303eebc7fa5615b8ec458c55
  makeManners41 ::
    ([PhonemeType2.Manner] -> b1)
    -> (forall a2.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a2
        -> (a2 -> b1) -> b1)
    -> b1
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ b1
                   eta2 :: [PhonemeType2.Manner] -> b1
                   eta3 :: forall a6.
                           Control.Monad.Prompt.Lift
                             Data.Random.Source.Internal.Prim.Prim
                             Data.Functor.Identity.Identity
                             a6
                           -> (a6 -> b1) -> b1 ->
                 PhonemeInventoryGen2.makeManners_eta3
                   `cast`
                 (Trans
                      (Trans
                           (Data.RVar.NTCo:RVarT[0] <Data.Functor.Identity.Identity>_N)
                           (Control.Monad.Prompt.NTCo:PromptT[0]
                                <Data.Random.Source.Internal.Prim.Prim>_R
                                <Data.Functor.Identity.Identity>_R) <Data.RVar.RVarT
                                                                       Data.Functor.Identity.Identity
                                                                       [PhonemeType2.Manner]>_N)
                      (Control.Monad.Prompt.NTCo:Prompt[0]
                           <Control.Monad.Prompt.Lift
                              Data.Random.Source.Internal.Prim.Prim
                              Data.Functor.Identity.Identity>_R
                           <Data.RVar.RVarT
                              Data.Functor.Identity.Identity [PhonemeType2.Manner]>_R))
                   @ b1
                   (\ x :: Data.RVar.RVarT
                             Data.Functor.Identity.Identity [PhonemeType2.Manner] ->
                    case x `cast`
                         (Trans
                              (Trans
                                   (Data.RVar.NTCo:RVarT[0] <Data.Functor.Identity.Identity>_N)
                                   (Control.Monad.Prompt.NTCo:PromptT[0]
                                        <Data.Random.Source.Internal.Prim.Prim>_R
                                        <Data.Functor.Identity.Identity>_R) <[PhonemeType2.Manner]>_N)
                              (Control.Monad.Prompt.NTCo:Prompt[0]
                                   <Control.Monad.Prompt.Lift
                                      Data.Random.Source.Internal.Prim.Prim
                                      Data.Functor.Identity.Identity>_R
                                   <[PhonemeType2.Manner]>_R)) of nt { DEFAULT ->
                    nt @ b1 eta2 eta3 })
                   eta3) -}
dbf8a2b9b30aa8d8f83c737c1ad06e5d
  makeManners42 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeType2.Manner]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeType2.Manner])
                   PhonemeInventoryGen2.makeManners24
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[PhonemeType2.Manner]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeType2.Manner]>_N))
                   PhonemeInventoryGen2.makeManners43) -}
bf8e2781a72292d3ae1f772a3d026240
  makeManners43 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeType2.Manner]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeType2.Manner])
                   PhonemeInventoryGen2.makeManners44
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[PhonemeType2.Manner]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeType2.Manner]>_N))
                   (GHC.Types.[]
                      @ (Data.RVar.RVarT
                           Data.Functor.Identity.Identity [PhonemeType2.Manner]))) -}
bed6e86bf01e5b05c387b76d878b7d98
  makeManners44 ::
    ([PhonemeType2.Manner] -> b1)
    -> (forall a2.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a2
        -> (a2 -> b1) -> b1)
    -> b1
  {- Arity: 2,
     Unfolding: (\ @ b1
                   eta :: [PhonemeType2.Manner] -> b1
                   eta1 :: forall a6.
                           Control.Monad.Prompt.Lift
                             Data.Random.Source.Internal.Prim.Prim
                             Data.Functor.Identity.Identity
                             a6
                           -> (a6 -> b1) -> b1 ->
                 PhonemeInventoryGen2.makeManners57
                   PhonemeInventoryGen2.makeManners45
                   @ b1
                   (\ x :: [[PhonemeType2.Manner]] ->
                    case PhonemeInventoryGen2.makeManners_go3 x of vx { DEFAULT ->
                    eta vx })
                   eta1) -}
5201cc5f205a4b492543c0261625dd81
  makeManners45 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeType2.Manner]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeType2.Manner])
                   PhonemeInventoryGen2.makeManners56
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[PhonemeType2.Manner]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeType2.Manner]>_N))
                   PhonemeInventoryGen2.makeManners46) -}
fc2e4c548b81208bd2053c7334d357a5
  makeManners46 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeType2.Manner]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeType2.Manner])
                   PhonemeInventoryGen2.makeManners52
                   PhonemeInventoryGen2.makeManners47) -}
18024c0ed45ae5ad471b1b2405bd4579
  makeManners47 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeType2.Manner]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeType2.Manner])
                   PhonemeInventoryGen2.makeManners48
                   (GHC.Types.[]
                      @ (Data.RVar.RVarT
                           Data.Functor.Identity.Identity [PhonemeType2.Manner]))) -}
2a4199b0515d20bc8146db7bc662e4c7
  makeManners48 :: Data.RVar.RVar [PhonemeType2.Manner]
  {- Unfolding: (Data.Random.Extras.choice
                   @ [PhonemeType2.Manner]
                   PhonemeInventoryGen2.makeManners49) -}
4fe7d05d6396576d92b2027e180a06c6
  makeManners49 :: [[PhonemeType2.Manner]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeType2.Manner]
                   (GHC.Types.[] @ PhonemeType2.Manner)
                   PhonemeInventoryGen2.makeManners50) -}
154f96e28045b62c6cb5fe8467ea020c
  makeManners5 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeType2.Manner]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeType2.Manner])
                   PhonemeInventoryGen2.makeManners25
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[PhonemeType2.Manner]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeType2.Manner]>_N))
                   PhonemeInventoryGen2.makeManners6) -}
ef86b2ba21cb7a71f2cb39ce2357fcbd
  makeManners50 :: [[PhonemeType2.Manner]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeType2.Manner]
                   PhonemeInventoryGen2.makeManners51
                   (GHC.Types.[] @ [PhonemeType2.Manner])) -}
7be5e3a760e733e6d216520043fbfe82
  makeManners51 :: [PhonemeType2.Manner]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeType2.Manner
                   PhonemeType2.LAFFRICATE
                   (GHC.Types.[] @ PhonemeType2.Manner)) -}
f89c57afcc3508ae3b85e2012220c82a
  makeManners52 :: Data.RVar.RVar [PhonemeType2.Manner]
  {- Unfolding: (Data.Random.Extras.choice
                   @ [PhonemeType2.Manner]
                   PhonemeInventoryGen2.makeManners53) -}
9918e738e99cbee8953208b4ec5cf8ad
  makeManners53 :: [[PhonemeType2.Manner]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeType2.Manner]
                   (GHC.Types.[] @ PhonemeType2.Manner)
                   PhonemeInventoryGen2.makeManners54) -}
40a052c6e39c31938d0668b41a439d86
  makeManners54 :: [[PhonemeType2.Manner]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeType2.Manner]
                   PhonemeInventoryGen2.makeManners55
                   (GHC.Types.[] @ [PhonemeType2.Manner])) -}
329e4a75af111bf9d49c6d43e348fb5a
  makeManners55 :: [PhonemeType2.Manner]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeType2.Manner
                   PhonemeType2.SAFFRICATE
                   (GHC.Types.[] @ PhonemeType2.Manner)) -}
84e8e8b8133ebe36cbda4584f62b9c5a
  makeManners56 ::
    ([PhonemeType2.Manner] -> b)
    -> (forall a2.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a2
        -> (a2 -> b) -> b)
    -> b
  {- Arity: 2, HasNoCafRefs, Strictness: <C(S),1*C1(U)><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ b
                   eta1 :: [PhonemeType2.Manner] -> b
                   eta2 :: forall a6.
                           Control.Monad.Prompt.Lift
                             Data.Random.Source.Internal.Prim.Prim
                             Data.Functor.Identity.Identity
                             a6
                           -> (a6 -> b) -> b ->
                 eta1 PhonemeInventoryGen2.makeManners_eta4) -}
2e1a6fdf42bf0acb15807ed6a8015514
  makeManners57 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeType2.Manner]]
    -> forall b.
       ([[PhonemeType2.Manner]] -> b)
       -> (forall a.
           Control.Monad.Prompt.Lift
             Data.Random.Source.Internal.Prim.Prim
             Data.Functor.Identity.Identity
             a
           -> (a -> b) -> b)
       -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,C(U)><L,U> -}
6beca36a4464d5a850f9deaee141aaea
  makeManners58 ::
    ([PhonemeType2.Manner] -> b)
    -> (forall a2.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a2
        -> (a2 -> b) -> b)
    -> b
  {- Arity: 2, HasNoCafRefs, Strictness: <C(S),1*C1(U)><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ b
                   eta1 :: [PhonemeType2.Manner] -> b
                   eta2 :: forall a6.
                           Control.Monad.Prompt.Lift
                             Data.Random.Source.Internal.Prim.Prim
                             Data.Functor.Identity.Identity
                             a6
                           -> (a6 -> b) -> b ->
                 eta1 PhonemeInventoryGen2.makeManners_eta5) -}
24ab24859790a22d5ae372bfc45ebb81
  makeManners59 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeType2.Manner]]
    -> forall b.
       ([[PhonemeType2.Manner]] -> b)
       -> (forall a.
           Control.Monad.Prompt.Lift
             Data.Random.Source.Internal.Prim.Prim
             Data.Functor.Identity.Identity
             a
           -> (a -> b) -> b)
       -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,C(U)><L,U> -}
bd164b057e13ec448b214f6ca2e331fc
  makeManners6 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeType2.Manner]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeType2.Manner])
                   PhonemeInventoryGen2.makeManners12
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[PhonemeType2.Manner]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeType2.Manner]>_N))
                   PhonemeInventoryGen2.makeManners7) -}
06a8df8991fd23742317fa570f46f177
  makeManners60 ::
    ([PhonemeType2.Manner] -> b1)
    -> (forall a2.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a2
        -> (a2 -> b1) -> b1)
    -> b1
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ b1
                   eta2 :: [PhonemeType2.Manner] -> b1
                   eta3 :: forall a6.
                           Control.Monad.Prompt.Lift
                             Data.Random.Source.Internal.Prim.Prim
                             Data.Functor.Identity.Identity
                             a6
                           -> (a6 -> b1) -> b1 ->
                 PhonemeInventoryGen2.makeManners_eta6
                   `cast`
                 (Trans
                      (Trans
                           (Data.RVar.NTCo:RVarT[0] <Data.Functor.Identity.Identity>_N)
                           (Control.Monad.Prompt.NTCo:PromptT[0]
                                <Data.Random.Source.Internal.Prim.Prim>_R
                                <Data.Functor.Identity.Identity>_R) <Data.RVar.RVarT
                                                                       Data.Functor.Identity.Identity
                                                                       [PhonemeType2.Manner]>_N)
                      (Control.Monad.Prompt.NTCo:Prompt[0]
                           <Control.Monad.Prompt.Lift
                              Data.Random.Source.Internal.Prim.Prim
                              Data.Functor.Identity.Identity>_R
                           <Data.RVar.RVarT
                              Data.Functor.Identity.Identity [PhonemeType2.Manner]>_R))
                   @ b1
                   (\ x :: Data.RVar.RVarT
                             Data.Functor.Identity.Identity [PhonemeType2.Manner] ->
                    case x `cast`
                         (Trans
                              (Trans
                                   (Data.RVar.NTCo:RVarT[0] <Data.Functor.Identity.Identity>_N)
                                   (Control.Monad.Prompt.NTCo:PromptT[0]
                                        <Data.Random.Source.Internal.Prim.Prim>_R
                                        <Data.Functor.Identity.Identity>_R) <[PhonemeType2.Manner]>_N)
                              (Control.Monad.Prompt.NTCo:Prompt[0]
                                   <Control.Monad.Prompt.Lift
                                      Data.Random.Source.Internal.Prim.Prim
                                      Data.Functor.Identity.Identity>_R
                                   <[PhonemeType2.Manner]>_R)) of nt { DEFAULT ->
                    nt @ b1 eta2 eta3 })
                   eta3) -}
56b14fbf8388fd811f90056b683a68b8
  makeManners61 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeType2.Manner]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeType2.Manner])
                   PhonemeInventoryGen2.makeManners24
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[PhonemeType2.Manner]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeType2.Manner]>_N))
                   PhonemeInventoryGen2.makeManners62) -}
a1cfbd7b7623c24ff25100b5b8775d48
  makeManners62 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeType2.Manner]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeType2.Manner])
                   PhonemeInventoryGen2.makeManners63
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[PhonemeType2.Manner]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeType2.Manner]>_N))
                   (GHC.Types.[]
                      @ (Data.RVar.RVarT
                           Data.Functor.Identity.Identity [PhonemeType2.Manner]))) -}
4a6075177fea7f20880b887170db6ca9
  makeManners63 ::
    ([PhonemeType2.Manner] -> b1)
    -> (forall a2.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a2
        -> (a2 -> b1) -> b1)
    -> b1
  {- Arity: 2,
     Unfolding: (\ @ b1
                   eta :: [PhonemeType2.Manner] -> b1
                   eta1 :: forall a6.
                           Control.Monad.Prompt.Lift
                             Data.Random.Source.Internal.Prim.Prim
                             Data.Functor.Identity.Identity
                             a6
                           -> (a6 -> b1) -> b1 ->
                 PhonemeInventoryGen2.makeManners71
                   PhonemeInventoryGen2.makeManners64
                   @ b1
                   (\ x :: [[PhonemeType2.Manner]] ->
                    case PhonemeInventoryGen2.makeManners_go4 x of vx { DEFAULT ->
                    eta vx })
                   eta1) -}
72a5fe02235ff61f9afe3fb5be5acfa4
  makeManners64 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeType2.Manner]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeType2.Manner])
                   PhonemeInventoryGen2.makeManners70
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[PhonemeType2.Manner]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeType2.Manner]>_N))
                   PhonemeInventoryGen2.makeManners65) -}
9f496a4a9708f7afd08cbd7c11129e74
  makeManners65 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeType2.Manner]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeType2.Manner])
                   PhonemeInventoryGen2.makeManners66
                   (GHC.Types.[]
                      @ (Data.RVar.RVarT
                           Data.Functor.Identity.Identity [PhonemeType2.Manner]))) -}
3d4b1198f69f782537da2309389b9255
  makeManners66 :: Data.RVar.RVar [PhonemeType2.Manner]
  {- Unfolding: (Data.Random.Extras.choice
                   @ [PhonemeType2.Manner]
                   PhonemeInventoryGen2.makeManners67) -}
b9a8aca568ce0bda6b1d5a90b616a0ca
  makeManners67 :: [[PhonemeType2.Manner]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeType2.Manner]
                   (GHC.Types.[] @ PhonemeType2.Manner)
                   PhonemeInventoryGen2.makeManners68) -}
949ffccb48b3e672a8c036314d7146e8
  makeManners68 :: [[PhonemeType2.Manner]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeType2.Manner]
                   PhonemeInventoryGen2.makeManners69
                   (GHC.Types.[] @ [PhonemeType2.Manner])) -}
4ebb98ca0ebc7b482de53521127ca022
  makeManners69 :: [PhonemeType2.Manner]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeType2.Manner
                   PhonemeType2.LFLAP
                   (GHC.Types.[] @ PhonemeType2.Manner)) -}
4e8a6cb5db0094e025d28c7dda4d3f50
  makeManners7 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeType2.Manner]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeType2.Manner])
                   PhonemeInventoryGen2.makeManners8
                   (GHC.Types.[]
                      @ (Data.RVar.RVarT
                           Data.Functor.Identity.Identity [PhonemeType2.Manner]))) -}
093e338bc4a85c13f22f427a46da1304
  makeManners70 ::
    ([PhonemeType2.Manner] -> b)
    -> (forall a2.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a2
        -> (a2 -> b) -> b)
    -> b
  {- Arity: 2, HasNoCafRefs, Strictness: <C(S),1*C1(U)><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ b
                   eta1 :: [PhonemeType2.Manner] -> b
                   eta2 :: forall a6.
                           Control.Monad.Prompt.Lift
                             Data.Random.Source.Internal.Prim.Prim
                             Data.Functor.Identity.Identity
                             a6
                           -> (a6 -> b) -> b ->
                 eta1 PhonemeInventoryGen2.makeManners_eta7) -}
576143eee0373c8164f3120264f3e059
  makeManners71 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeType2.Manner]]
    -> forall b.
       ([[PhonemeType2.Manner]] -> b)
       -> (forall a.
           Control.Monad.Prompt.Lift
             Data.Random.Source.Internal.Prim.Prim
             Data.Functor.Identity.Identity
             a
           -> (a -> b) -> b)
       -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,C(U)><L,U> -}
b99f597397e7883f07150e2c439ffe08
  makeManners72 :: Data.RVar.RVar [PhonemeType2.Manner]
  {- Unfolding: (Data.Random.Extras.choice
                   @ [PhonemeType2.Manner]
                   PhonemeInventoryGen2.makeManners73) -}
2db770d8a7ff48a24cb86ae8af61b09e
  makeManners73 :: [[PhonemeType2.Manner]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeType2.Manner]
                   (GHC.Types.[] @ PhonemeType2.Manner)
                   PhonemeInventoryGen2.makeManners74) -}
4312b4338f55df1e7db4ebce76f3554d
  makeManners74 :: [[PhonemeType2.Manner]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeType2.Manner]
                   PhonemeInventoryGen2.makeManners75
                   (GHC.Types.[] @ [PhonemeType2.Manner])) -}
e13e2a16d0b2acfaf47ad73a4e502e20
  makeManners75 :: [PhonemeType2.Manner]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeType2.Manner
                   PhonemeType2.NASAL
                   (GHC.Types.[] @ PhonemeType2.Manner)) -}
2e735e3a029c4843fd6d20e77e69180f
  makeManners76 ::
    ([PhonemeType2.Manner] -> b)
    -> (forall a2.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a2
        -> (a2 -> b) -> b)
    -> b
  {- Arity: 2, HasNoCafRefs, Strictness: <C(S),1*C1(U)><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ b
                   eta1 :: [PhonemeType2.Manner] -> b
                   eta2 :: forall a6.
                           Control.Monad.Prompt.Lift
                             Data.Random.Source.Internal.Prim.Prim
                             Data.Functor.Identity.Identity
                             a6
                           -> (a6 -> b) -> b ->
                 eta1 PhonemeInventoryGen2.makeManners_eta8) -}
31e398d3a00ed110c4ad9647159f4404
  makeManners77 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeType2.Manner]]
    -> forall b.
       ([[PhonemeType2.Manner]] -> b)
       -> (forall a.
           Control.Monad.Prompt.Lift
             Data.Random.Source.Internal.Prim.Prim
             Data.Functor.Identity.Identity
             a
           -> (a -> b) -> b)
       -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,C(U)><L,U> -}
d4c9a29b1cba3db0ed9db6935c2e537d
  makeManners8 :: Data.RVar.RVar [PhonemeType2.Manner]
  {- Unfolding: (Data.Random.Extras.choice
                   @ [PhonemeType2.Manner]
                   PhonemeInventoryGen2.makeManners9) -}
0b75f068ede7f2af6a8cf52b7c5c6978
  makeManners9 :: [[PhonemeType2.Manner]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeType2.Manner]
                   (GHC.Types.[] @ PhonemeType2.Manner)
                   PhonemeInventoryGen2.makeManners10) -}
6ed7dadb1078b3d02cf28016565e40ed
  makeManners_eta ::
    Data.RVar.RVarT
      Data.Functor.Identity.Identity
      (Data.RVar.RVarT
         Data.Functor.Identity.Identity [PhonemeType2.Manner])
  {- Unfolding: (Data.Random.Extras.choice
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeType2.Manner])
                   PhonemeInventoryGen2.makeManners13) -}
f41fab61c0494cb4b0591e1005d89426
  makeManners_eta1 :: [PhonemeType2.Manner]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeType2.Manner
                   PhonemeType2.APPROXIMANT
                   (GHC.Types.[] @ PhonemeType2.Manner)) -}
bfb0d3f3c1d2f67b7fea4179082d24d1
  makeManners_eta2 ::
    Data.RVar.RVarT
      Data.Functor.Identity.Identity
      (Data.RVar.RVarT
         Data.Functor.Identity.Identity [PhonemeType2.Manner])
  {- Unfolding: (Data.Random.Extras.choice
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeType2.Manner])
                   PhonemeInventoryGen2.makeManners26) -}
a7edeba15fddf5e3900bb03137a5d436
  makeManners_eta3 ::
    Data.RVar.RVarT
      Data.Functor.Identity.Identity
      (Data.RVar.RVarT
         Data.Functor.Identity.Identity [PhonemeType2.Manner])
  {- Unfolding: (Data.Random.Extras.choice
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeType2.Manner])
                   PhonemeInventoryGen2.makeManners42) -}
fc2b4e350cf3107850b89698ba893c7b
  makeManners_eta4 :: [PhonemeType2.Manner]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeType2.Manner
                   PhonemeType2.AFFRICATE
                   (GHC.Types.[] @ PhonemeType2.Manner)) -}
d775730e803a1a651893ea081ec0e9e7
  makeManners_eta5 :: [PhonemeType2.Manner]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeType2.Manner
                   PhonemeType2.FRICATIVE
                   (GHC.Types.[] @ PhonemeType2.Manner)) -}
4e7d5c755b5f9bfa3083d26446b64206
  makeManners_eta6 ::
    Data.RVar.RVarT
      Data.Functor.Identity.Identity
      (Data.RVar.RVarT
         Data.Functor.Identity.Identity [PhonemeType2.Manner])
  {- Unfolding: (Data.Random.Extras.choice
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeType2.Manner])
                   PhonemeInventoryGen2.makeManners61) -}
c470bd8de290a79bb8d160756cf395b5
  makeManners_eta7 :: [PhonemeType2.Manner]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeType2.Manner
                   PhonemeType2.FLAP
                   (GHC.Types.[] @ PhonemeType2.Manner)) -}
cbac0cd5f8034c64080030dba7d3794d
  makeManners_eta8 :: [PhonemeType2.Manner]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ PhonemeType2.Manner
                   PhonemeType2.STOP
                   (GHC.Types.[] @ PhonemeType2.Manner)) -}
1221ee33a0e320eb07b6231330ea75db
  makeManners_go :: [[PhonemeType2.Manner]] -> [PhonemeType2.Manner]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
c0e2b9161644415b3439bdad6ccb6328
  makeManners_go1 :: [[PhonemeType2.Manner]] -> [PhonemeType2.Manner]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
f374c5d8c116fb2020dadbe2ee17d130
  makeManners_go2 :: [[PhonemeType2.Manner]] -> [PhonemeType2.Manner]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
d545572fcefe41223438399df1b14f4f
  makeManners_go3 :: [[PhonemeType2.Manner]] -> [PhonemeType2.Manner]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
f2e02a3b92dfad8d76c383445b43492a
  makeManners_go4 :: [[PhonemeType2.Manner]] -> [PhonemeType2.Manner]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
1e320277d22d0d1838ce705272f83ddb
  makePhonations :: Data.RVar.RVar [PhonemeType2.Phonation]
  {- Unfolding: (Data.Random.Extras.choice
                   @ [PhonemeType2.Phonation]
                   PhonemeInventoryGen2.makePhonations1) -}
65eed5a287aadcc1db64ad948bc5bbe0
  makePhonations1 :: [[PhonemeType2.Phonation]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeType2.Phonation]
                   PhonemeInventoryGen2.makePhonations17
                   PhonemeInventoryGen2.makePhonations2) -}
68ddc961a3c8fe490fd85579f7d7caab
  makePhonations10 :: [PhonemeType2.Phonation]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeType2.Phonation
                   PhonemeType2.SLACK
                   PhonemeInventoryGen2.makePhonations11) -}
d57dc2bc03d7901bbe012c711bb40335
  makePhonations11 :: [PhonemeType2.Phonation]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeType2.Phonation
                   PhonemeType2.MODAL
                   PhonemeInventoryGen2.makePhonations12) -}
fd0826737bb49f4364fbc2733ad09291
  makePhonations12 :: [PhonemeType2.Phonation]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeType2.Phonation
                   PhonemeType2.STIFF
                   (GHC.Types.[] @ PhonemeType2.Phonation)) -}
001585653ab17614372ea1032b7691bc
  makePhonations13 :: [PhonemeType2.Phonation]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeType2.Phonation
                   PhonemeType2.BREATHY
                   PhonemeInventoryGen2.makePhonations14) -}
0fc1750dea1e70db41e1c01a01093ffb
  makePhonations14 :: [PhonemeType2.Phonation]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeType2.Phonation
                   PhonemeType2.MODAL
                   PhonemeInventoryGen2.makePhonations15) -}
f26e100525dd99a4b7d67bf6aa461a49
  makePhonations15 :: [PhonemeType2.Phonation]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeType2.Phonation
                   PhonemeType2.CREAKY
                   (GHC.Types.[] @ PhonemeType2.Phonation)) -}
5b6d8cb1921581f02e1c001ea8d7ae8e
  makePhonations16 :: [PhonemeType2.Phonation]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeType2.Phonation
                   PhonemeType2.VOICELESS
                   PhonemeInventoryGen2.makePhonations17) -}
678fc3fad808d73f4e505f12b03ed39d
  makePhonations17 :: [PhonemeType2.Phonation]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeType2.Phonation
                   PhonemeType2.MODAL
                   (GHC.Types.[] @ PhonemeType2.Phonation)) -}
0ef924657021ea2a79483349c23dfe88
  makePhonations2 :: [[PhonemeType2.Phonation]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeType2.Phonation]
                   PhonemeInventoryGen2.makePhonations16
                   PhonemeInventoryGen2.makePhonations3) -}
17ed67fd143d1c1a299008d53ee45d83
  makePhonations3 :: [[PhonemeType2.Phonation]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeType2.Phonation]
                   PhonemeInventoryGen2.makePhonations13
                   PhonemeInventoryGen2.makePhonations4) -}
493d68118ace276757491d4d645be63d
  makePhonations4 :: [[PhonemeType2.Phonation]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeType2.Phonation]
                   PhonemeInventoryGen2.makePhonations10
                   PhonemeInventoryGen2.makePhonations5) -}
948a2f427c8164a06656643659204bdc
  makePhonations5 :: [[PhonemeType2.Phonation]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeType2.Phonation]
                   PhonemeInventoryGen2.makePhonations9
                   PhonemeInventoryGen2.makePhonations6) -}
3ffa9325ed5dc62c72343821e650786d
  makePhonations6 :: [[PhonemeType2.Phonation]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeType2.Phonation]
                   PhonemeInventoryGen2.makePhonations7
                   (GHC.Types.[] @ [PhonemeType2.Phonation])) -}
cdbe14c53335d1d0906de66cc4e20a6c
  makePhonations7 :: [PhonemeType2.Phonation]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeType2.Phonation
                   PhonemeType2.MODAL
                   PhonemeInventoryGen2.makePhonations8) -}
473d9b1daa653af17b71861930e88e10
  makePhonations8 :: [PhonemeType2.Phonation]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeType2.Phonation
                   PhonemeType2.ASPIRATED
                   (GHC.Types.[] @ PhonemeType2.Phonation)) -}
bcda02b0554557a4b81df1fcef2ef048
  makePhonations9 :: [PhonemeType2.Phonation]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeType2.Phonation
                   PhonemeType2.VOICELESS
                   PhonemeInventoryGen2.makePhonations7) -}
1d2ec42a4efe138561b3622328fe142b
  makePlaces :: Data.RVar.RVar [PhonemeType2.Place]
  {- Arity: 2, Strictness: <L,C(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                PhonemeInventoryGen2.makePlaces1
                  `cast`
                (Trans
                     (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                               <Control.Monad.Prompt.Lift
                                  Data.Random.Source.Internal.Prim.Prim
                                  Data.Functor.Identity.Identity>_R
                               <[PhonemeType2.Place]>_R))
                     (Trans
                          (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                    <Data.Random.Source.Internal.Prim.Prim>_R
                                    <Data.Functor.Identity.Identity>_R))
                          (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeType2.Place]>_N)) -}
17723cb01c2fd651504408646d4ae08c
  makePlaces1 ::
    ([PhonemeType2.Place] -> b1)
    -> (forall a2.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a2
        -> (a2 -> b1) -> b1)
    -> b1
  {- Arity: 2, Strictness: <L,C(U)><L,U>,
     Unfolding: (\ @ b1
                   eta :: [PhonemeType2.Place] -> b1
                   eta1 :: forall a6.
                           Control.Monad.Prompt.Lift
                             Data.Random.Source.Internal.Prim.Prim
                             Data.Functor.Identity.Identity
                             a6
                           -> (a6 -> b1) -> b1 ->
                 PhonemeInventoryGen2.makePlaces62
                   PhonemeInventoryGen2.makePlaces2
                   @ b1
                   (\ x :: [[PhonemeType2.Place]] ->
                    case PhonemeInventoryGen2.makePlaces_go x of vx { DEFAULT ->
                    eta vx })
                   eta1) -}
ec0fa97258c8e617880032ed04da3962
  makePlaces10 ::
    ([PhonemeType2.Place] -> b1)
    -> (forall a2.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a2
        -> (a2 -> b1) -> b1)
    -> b1
  {- Arity: 2,
     Unfolding: (\ @ b1
                   eta :: [PhonemeType2.Place] -> b1
                   eta1 :: forall a6.
                           Control.Monad.Prompt.Lift
                             Data.Random.Source.Internal.Prim.Prim
                             Data.Functor.Identity.Identity
                             a6
                           -> (a6 -> b1) -> b1 ->
                 PhonemeInventoryGen2.makePlaces20
                   PhonemeInventoryGen2.makePlaces11
                   @ b1
                   (\ x :: [[PhonemeType2.Place]] ->
                    case PhonemeInventoryGen2.makePlaces_go1 x of vx { DEFAULT ->
                    eta vx })
                   eta1) -}
9582a1fa688eada43e63d2470d76a268
  makePlaces11 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeType2.Place]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeType2.Place])
                   PhonemeInventoryGen2.makePlaces14
                   PhonemeInventoryGen2.makePlaces12) -}
07de710213181a34d8808ba3b277736d
  makePlaces12 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeType2.Place]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeType2.Place])
                   PhonemeInventoryGen2.makePlaces13
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[PhonemeType2.Place]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeType2.Place]>_N))
                   (GHC.Types.[]
                      @ (Data.RVar.RVarT
                           Data.Functor.Identity.Identity [PhonemeType2.Place]))) -}
8615a22fe7db7966f3ff67a7bc5a163c
  makePlaces13 ::
    ([PhonemeType2.Place] -> b)
    -> (forall a2.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a2
        -> (a2 -> b) -> b)
    -> b
  {- Arity: 2, HasNoCafRefs, Strictness: <C(S),1*C1(U)><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ b
                   eta1 :: [PhonemeType2.Place] -> b
                   eta2 :: forall a6.
                           Control.Monad.Prompt.Lift
                             Data.Random.Source.Internal.Prim.Prim
                             Data.Functor.Identity.Identity
                             a6
                           -> (a6 -> b) -> b ->
                 eta1 PhonemeInventoryGen2.makePlaces_eta1) -}
46bab9836bee50e9ef61e0ecc6f208f1
  makePlaces14 :: Data.RVar.RVar [PhonemeType2.Place]
  {- Unfolding: (Data.Random.Extras.choice
                   @ [PhonemeType2.Place]
                   PhonemeInventoryGen2.makePlaces15) -}
3d35cbba0f8cb3484a5266364ad1aa5a
  makePlaces15 :: [[PhonemeType2.Place]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeType2.Place]
                   PhonemeInventoryGen2.makePlaces19
                   PhonemeInventoryGen2.makePlaces16) -}
26e9e356f14f99ebe77cd41fb7eb72ed
  makePlaces16 :: [[PhonemeType2.Place]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeType2.Place]
                   PhonemeInventoryGen2.makePlaces17
                   (GHC.Types.[] @ [PhonemeType2.Place])) -}
f677a38a5f7d4be478458d810835766f
  makePlaces17 :: [PhonemeType2.Place]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeType2.Place
                   PhonemeType2.PHARYNGEAL
                   PhonemeInventoryGen2.makePlaces18) -}
486854e78ea1cbd4e2fddcb3380ff567
  makePlaces18 :: [PhonemeType2.Place]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeType2.Place
                   PhonemeType2.EPIGLOTTAL
                   (GHC.Types.[] @ PhonemeType2.Place)) -}
ce60011442212865d1968dbb525a8d0f
  makePlaces19 :: [PhonemeType2.Place]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeType2.Place
                   PhonemeType2.EPIPHARYNGEAL
                   (GHC.Types.[] @ PhonemeType2.Place)) -}
f9dc8681d74c882f4c3172c46618de3b
  makePlaces2 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeType2.Place]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeType2.Place])
                   PhonemeInventoryGen2.makePlaces55
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[PhonemeType2.Place]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeType2.Place]>_N))
                   PhonemeInventoryGen2.makePlaces3) -}
544d3665fc18b640091b8f9e9403c39b
  makePlaces20 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeType2.Place]]
    -> forall b.
       ([[PhonemeType2.Place]] -> b)
       -> (forall a.
           Control.Monad.Prompt.Lift
             Data.Random.Source.Internal.Prim.Prim
             Data.Functor.Identity.Identity
             a
           -> (a -> b) -> b)
       -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,C(U)><L,U> -}
0b11def0a2de5351b7e5818166f7c75b
  makePlaces21 ::
    ([PhonemeType2.Place] -> b)
    -> (forall a2.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a2
        -> (a2 -> b) -> b)
    -> b
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (\ @ b
                   eta1 :: [PhonemeType2.Place] -> b
                   eta2 :: forall a6.
                           Control.Monad.Prompt.Lift
                             Data.Random.Source.Internal.Prim.Prim
                             Data.Functor.Identity.Identity
                             a6
                           -> (a6 -> b) -> b ->
                 eta1 PhonemeInventoryGen2.makePlaces_eta2) -}
aefbaf971244d5b18f99656199dbb6c8
  makePlaces22 ::
    ([PhonemeType2.Place] -> b)
    -> (forall a2.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a2
        -> (a2 -> b) -> b)
    -> b
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (\ @ b
                   eta1 :: [PhonemeType2.Place] -> b
                   eta2 :: forall a6.
                           Control.Monad.Prompt.Lift
                             Data.Random.Source.Internal.Prim.Prim
                             Data.Functor.Identity.Identity
                             a6
                           -> (a6 -> b) -> b ->
                 eta1 (GHC.Types.[] @ PhonemeType2.Place)) -}
4ce492883bb44082257086c854201bdd
  makePlaces23 ::
    ([PhonemeType2.Place] -> b1)
    -> (forall a2.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a2
        -> (a2 -> b1) -> b1)
    -> b1
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ b1
                   eta2 :: [PhonemeType2.Place] -> b1
                   eta3 :: forall a6.
                           Control.Monad.Prompt.Lift
                             Data.Random.Source.Internal.Prim.Prim
                             Data.Functor.Identity.Identity
                             a6
                           -> (a6 -> b1) -> b1 ->
                 PhonemeInventoryGen2.makePlaces_eta3
                   `cast`
                 (Trans
                      (Trans
                           (Data.RVar.NTCo:RVarT[0] <Data.Functor.Identity.Identity>_N)
                           (Control.Monad.Prompt.NTCo:PromptT[0]
                                <Data.Random.Source.Internal.Prim.Prim>_R
                                <Data.Functor.Identity.Identity>_R) <Data.RVar.RVarT
                                                                       Data.Functor.Identity.Identity
                                                                       [PhonemeType2.Place]>_N)
                      (Control.Monad.Prompt.NTCo:Prompt[0]
                           <Control.Monad.Prompt.Lift
                              Data.Random.Source.Internal.Prim.Prim
                              Data.Functor.Identity.Identity>_R
                           <Data.RVar.RVarT
                              Data.Functor.Identity.Identity [PhonemeType2.Place]>_R))
                   @ b1
                   (\ x :: Data.RVar.RVarT
                             Data.Functor.Identity.Identity [PhonemeType2.Place] ->
                    case x `cast`
                         (Trans
                              (Trans
                                   (Data.RVar.NTCo:RVarT[0] <Data.Functor.Identity.Identity>_N)
                                   (Control.Monad.Prompt.NTCo:PromptT[0]
                                        <Data.Random.Source.Internal.Prim.Prim>_R
                                        <Data.Functor.Identity.Identity>_R) <[PhonemeType2.Place]>_N)
                              (Control.Monad.Prompt.NTCo:Prompt[0]
                                   <Control.Monad.Prompt.Lift
                                      Data.Random.Source.Internal.Prim.Prim
                                      Data.Functor.Identity.Identity>_R
                                   <[PhonemeType2.Place]>_R)) of nt { DEFAULT ->
                    nt @ b1 eta2 eta3 })
                   eta3) -}
b3bb06d5811a61ea84c76b292cd340cf
  makePlaces24 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeType2.Place]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeType2.Place])
                   PhonemeInventoryGen2.makePlaces38
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[PhonemeType2.Place]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeType2.Place]>_N))
                   PhonemeInventoryGen2.makePlaces25) -}
ffdee200e03c0ba30f3eb6a45754df14
  makePlaces25 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeType2.Place]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeType2.Place])
                   PhonemeInventoryGen2.makePlaces26
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[PhonemeType2.Place]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeType2.Place]>_N))
                   (GHC.Types.[]
                      @ (Data.RVar.RVarT
                           Data.Functor.Identity.Identity [PhonemeType2.Place]))) -}
b415e0efb908d79a995f46dbdced95fa
  makePlaces26 ::
    ([PhonemeType2.Place] -> b1)
    -> (forall a2.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a2
        -> (a2 -> b1) -> b1)
    -> b1
  {- Arity: 2,
     Unfolding: (\ @ b1
                   eta :: [PhonemeType2.Place] -> b1
                   eta1 :: forall a6.
                           Control.Monad.Prompt.Lift
                             Data.Random.Source.Internal.Prim.Prim
                             Data.Functor.Identity.Identity
                             a6
                           -> (a6 -> b1) -> b1 ->
                 let {
                   eta2 :: [[PhonemeType2.Place]] -> b1
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ x :: [[PhonemeType2.Place]] ->
                     case PhonemeInventoryGen2.makePlaces_go2 x of vx { DEFAULT ->
                     eta vx }
                 } in
                 PhonemeInventoryGen2.makePlaces_m1
                   `cast`
                 (Trans
                      (Trans
                           (Data.RVar.NTCo:RVarT[0] <Data.Functor.Identity.Identity>_N)
                           (Control.Monad.Prompt.NTCo:PromptT[0]
                                <Data.Random.Source.Internal.Prim.Prim>_R
                                <Data.Functor.Identity.Identity>_R) <GHC.Types.Int>_N)
                      (Control.Monad.Prompt.NTCo:Prompt[0]
                           <Control.Monad.Prompt.Lift
                              Data.Random.Source.Internal.Prim.Prim
                              Data.Functor.Identity.Identity>_R
                           <GHC.Types.Int>_R))
                   @ b1
                   (\ x :: GHC.Types.Int ->
                    case x of x1 { GHC.Types.I# ipv ->
                    PhonemeInventoryGen2.makePlaces37
                      PhonemeInventoryGen2.makePlaces27
                      @ b1
                      (\ x2 :: [[PhonemeType2.Place]] ->
                       case x2 of x3 { DEFAULT ->
                       case (Data.Random.Extras.sampleSeq
                               @ [PhonemeType2.Place]
                               x1
                               (Data.Sequence.fromList1
                                  @ [PhonemeType2.Place]
                                  x3
                                    `cast`
                                  ([Sym (Data.Sequence.NTCo:Elem[0] <[PhonemeType2.Place]>_R)])_R)
                                 `cast`
                               (Sym (Data.Sequence.NTCo:Seq[0] <[PhonemeType2.Place]>_R)))
                              `cast`
                            (Trans
                                 (Trans
                                      (Data.RVar.NTCo:RVarT[0] <Data.Functor.Identity.Identity>_N)
                                      (Control.Monad.Prompt.NTCo:PromptT[0]
                                           <Data.Random.Source.Internal.Prim.Prim>_R
                                           <Data.Functor.Identity.Identity>_R) <[[PhonemeType2.Place]]>_N)
                                 (Control.Monad.Prompt.NTCo:Prompt[0]
                                      <Control.Monad.Prompt.Lift
                                         Data.Random.Source.Internal.Prim.Prim
                                         Data.Functor.Identity.Identity>_R
                                      <[[PhonemeType2.Place]]>_R)) of nt { DEFAULT ->
                       nt @ b1 eta2 eta1 } })
                      eta1 })
                   eta1) -}
55549caa2266acf6154953cd42ff2215
  makePlaces27 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeType2.Place]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeType2.Place])
                   PhonemeInventoryGen2.makePlaces32
                   PhonemeInventoryGen2.makePlaces28) -}
d7753f302a229b2998f30416839eebdb
  makePlaces28 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeType2.Place]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeType2.Place])
                   PhonemeInventoryGen2.makePlaces31
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[PhonemeType2.Place]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeType2.Place]>_N))
                   PhonemeInventoryGen2.makePlaces29) -}
55a33b16abf87f26f47fccbfe5ca93dc
  makePlaces29 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeType2.Place]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeType2.Place])
                   PhonemeInventoryGen2.makePlaces30
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[PhonemeType2.Place]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeType2.Place]>_N))
                   (GHC.Types.[]
                      @ (Data.RVar.RVarT
                           Data.Functor.Identity.Identity [PhonemeType2.Place]))) -}
bf4798c95643f907b0a08dd9be56e4b7
  makePlaces3 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeType2.Place]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeType2.Place])
                   PhonemeInventoryGen2.makePlaces39
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[PhonemeType2.Place]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeType2.Place]>_N))
                   PhonemeInventoryGen2.makePlaces4) -}
1f9d5b8565fabe47ee5f5418b76d4918
  makePlaces30 ::
    ([PhonemeType2.Place] -> b)
    -> (forall a2.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a2
        -> (a2 -> b) -> b)
    -> b
  {- Arity: 2, HasNoCafRefs, Strictness: <C(S),1*C1(U)><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ b
                   eta1 :: [PhonemeType2.Place] -> b
                   eta2 :: forall a6.
                           Control.Monad.Prompt.Lift
                             Data.Random.Source.Internal.Prim.Prim
                             Data.Functor.Identity.Identity
                             a6
                           -> (a6 -> b) -> b ->
                 eta1 PhonemeInventoryGen2.makePlaces_eta4) -}
52df31fb2159f669b97903c8d7e23e62
  makePlaces31 ::
    ([PhonemeType2.Place] -> b)
    -> (forall a2.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a2
        -> (a2 -> b) -> b)
    -> b
  {- Arity: 2, HasNoCafRefs, Strictness: <C(S),1*C1(U)><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ b
                   eta1 :: [PhonemeType2.Place] -> b
                   eta2 :: forall a6.
                           Control.Monad.Prompt.Lift
                             Data.Random.Source.Internal.Prim.Prim
                             Data.Functor.Identity.Identity
                             a6
                           -> (a6 -> b) -> b ->
                 eta1 PhonemeInventoryGen2.makePlaces_eta5) -}
8741e57a89a27393bfe64570f3ec6720
  makePlaces32 :: Data.RVar.RVar [PhonemeType2.Place]
  {- Unfolding: (Data.Random.Extras.choice
                   @ [PhonemeType2.Place]
                   PhonemeInventoryGen2.makePlaces33) -}
7562a2d984a459f8d36468b2c858eece
  makePlaces33 :: [[PhonemeType2.Place]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeType2.Place]
                   PhonemeInventoryGen2.makePlaces36
                   PhonemeInventoryGen2.makePlaces34) -}
dc96c66dc260bc4d3f72ca834dbbf909
  makePlaces34 :: [[PhonemeType2.Place]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeType2.Place]
                   PhonemeInventoryGen2.makePlaces35
                   (GHC.Types.[] @ [PhonemeType2.Place])) -}
20a76e2faa20d845a1056ea046411b04
  makePlaces35 :: [PhonemeType2.Place]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeType2.Place
                   PhonemeType2.ALVEOLOPALATAL
                   PhonemeInventoryGen2.makePlaces36) -}
443729bbaa7c066bd1ab96838866fa8b
  makePlaces36 :: [PhonemeType2.Place]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeType2.Place
                   PhonemeType2.PALATAL
                   (GHC.Types.[] @ PhonemeType2.Place)) -}
01136832ec22e60246772b8f0b654ff9
  makePlaces37 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeType2.Place]]
    -> forall b.
       ([[PhonemeType2.Place]] -> b)
       -> (forall a.
           Control.Monad.Prompt.Lift
             Data.Random.Source.Internal.Prim.Prim
             Data.Functor.Identity.Identity
             a
           -> (a -> b) -> b)
       -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,C(U)><L,U> -}
c642e44750dc29f5f0edb0178f7c3289
  makePlaces38 ::
    ([PhonemeType2.Place] -> b)
    -> (forall a2.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a2
        -> (a2 -> b) -> b)
    -> b
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (\ @ b
                   eta1 :: [PhonemeType2.Place] -> b
                   eta2 :: forall a6.
                           Control.Monad.Prompt.Lift
                             Data.Random.Source.Internal.Prim.Prim
                             Data.Functor.Identity.Identity
                             a6
                           -> (a6 -> b) -> b ->
                 eta1 PhonemeInventoryGen2.makePlaces_eta6) -}
dc3b4f6785e6d5c7bdaea27d85a3fc80
  makePlaces39 ::
    ([PhonemeType2.Place] -> b1)
    -> (forall a2.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a2
        -> (a2 -> b1) -> b1)
    -> b1
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ b1
                   eta2 :: [PhonemeType2.Place] -> b1
                   eta3 :: forall a6.
                           Control.Monad.Prompt.Lift
                             Data.Random.Source.Internal.Prim.Prim
                             Data.Functor.Identity.Identity
                             a6
                           -> (a6 -> b1) -> b1 ->
                 PhonemeInventoryGen2.makePlaces_eta7
                   `cast`
                 (Trans
                      (Trans
                           (Data.RVar.NTCo:RVarT[0] <Data.Functor.Identity.Identity>_N)
                           (Control.Monad.Prompt.NTCo:PromptT[0]
                                <Data.Random.Source.Internal.Prim.Prim>_R
                                <Data.Functor.Identity.Identity>_R) <Data.RVar.RVarT
                                                                       Data.Functor.Identity.Identity
                                                                       [PhonemeType2.Place]>_N)
                      (Control.Monad.Prompt.NTCo:Prompt[0]
                           <Control.Monad.Prompt.Lift
                              Data.Random.Source.Internal.Prim.Prim
                              Data.Functor.Identity.Identity>_R
                           <Data.RVar.RVarT
                              Data.Functor.Identity.Identity [PhonemeType2.Place]>_R))
                   @ b1
                   (\ x :: Data.RVar.RVarT
                             Data.Functor.Identity.Identity [PhonemeType2.Place] ->
                    case x `cast`
                         (Trans
                              (Trans
                                   (Data.RVar.NTCo:RVarT[0] <Data.Functor.Identity.Identity>_N)
                                   (Control.Monad.Prompt.NTCo:PromptT[0]
                                        <Data.Random.Source.Internal.Prim.Prim>_R
                                        <Data.Functor.Identity.Identity>_R) <[PhonemeType2.Place]>_N)
                              (Control.Monad.Prompt.NTCo:Prompt[0]
                                   <Control.Monad.Prompt.Lift
                                      Data.Random.Source.Internal.Prim.Prim
                                      Data.Functor.Identity.Identity>_R
                                   <[PhonemeType2.Place]>_R)) of nt { DEFAULT ->
                    nt @ b1 eta2 eta3 })
                   eta3) -}
980768ba9d53771d6b5651eb2e09363d
  makePlaces4 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeType2.Place]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeType2.Place])
                   PhonemeInventoryGen2.makePlaces23
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[PhonemeType2.Place]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeType2.Place]>_N))
                   PhonemeInventoryGen2.makePlaces5) -}
23c152f2a8eeb704a8e2eb76792c6338
  makePlaces40 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeType2.Place]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeType2.Place])
                   PhonemeInventoryGen2.makePlaces54
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[PhonemeType2.Place]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeType2.Place]>_N))
                   PhonemeInventoryGen2.makePlaces41) -}
ac38a3283689f3655bf1462b74490e60
  makePlaces41 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeType2.Place]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeType2.Place])
                   PhonemeInventoryGen2.makePlaces42
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[PhonemeType2.Place]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeType2.Place]>_N))
                   (GHC.Types.[]
                      @ (Data.RVar.RVarT
                           Data.Functor.Identity.Identity [PhonemeType2.Place]))) -}
23ad1bd0255b4aa7e04a808115ab1323
  makePlaces42 ::
    ([PhonemeType2.Place] -> b1)
    -> (forall a2.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a2
        -> (a2 -> b1) -> b1)
    -> b1
  {- Arity: 2,
     Unfolding: (\ @ b1
                   eta :: [PhonemeType2.Place] -> b1
                   eta1 :: forall a6.
                           Control.Monad.Prompt.Lift
                             Data.Random.Source.Internal.Prim.Prim
                             Data.Functor.Identity.Identity
                             a6
                           -> (a6 -> b1) -> b1 ->
                 PhonemeInventoryGen2.makePlaces53
                   PhonemeInventoryGen2.makePlaces43
                   @ b1
                   (\ x :: [[PhonemeType2.Place]] ->
                    case PhonemeInventoryGen2.makePlaces_go3 x of vx { DEFAULT ->
                    eta vx })
                   eta1) -}
4f6ac8d2ac8ebcf0bd8709beaae5c262
  makePlaces43 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeType2.Place]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeType2.Place])
                   PhonemeInventoryGen2.makePlaces46
                   PhonemeInventoryGen2.makePlaces44) -}
b83c5d2f62f77cc44d303cbf33d5fdba
  makePlaces44 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeType2.Place]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeType2.Place])
                   PhonemeInventoryGen2.makePlaces45
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[PhonemeType2.Place]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeType2.Place]>_N))
                   (GHC.Types.[]
                      @ (Data.RVar.RVarT
                           Data.Functor.Identity.Identity [PhonemeType2.Place]))) -}
56f86f840d0be6b8210b0c1254d85e19
  makePlaces45 ::
    ([PhonemeType2.Place] -> b)
    -> (forall a2.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a2
        -> (a2 -> b) -> b)
    -> b
  {- Arity: 2, HasNoCafRefs, Strictness: <C(S),1*C1(U)><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ b
                   eta1 :: [PhonemeType2.Place] -> b
                   eta2 :: forall a6.
                           Control.Monad.Prompt.Lift
                             Data.Random.Source.Internal.Prim.Prim
                             Data.Functor.Identity.Identity
                             a6
                           -> (a6 -> b) -> b ->
                 eta1 PhonemeInventoryGen2.makePlaces_eta8) -}
29e0c87a5e5ae81bb95246907edf5687
  makePlaces46 :: Data.RVar.RVar [PhonemeType2.Place]
  {- Unfolding: (Data.Random.Extras.choice
                   @ [PhonemeType2.Place]
                   PhonemeInventoryGen2.makePlaces47) -}
a752396bf208917f9e3f8c6d647a1b58
  makePlaces47 :: [[PhonemeType2.Place]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeType2.Place]
                   PhonemeInventoryGen2.makePlaces52
                   PhonemeInventoryGen2.makePlaces48) -}
89fbb529c3c9313cd3776d454d7038ed
  makePlaces48 :: [[PhonemeType2.Place]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeType2.Place]
                   PhonemeInventoryGen2.makePlaces49
                   (GHC.Types.[] @ [PhonemeType2.Place])) -}
b8a747482b905ca16ae9c3673e42f759
  makePlaces49 :: [PhonemeType2.Place]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeType2.Place
                   PhonemeType2.DENTAL
                   PhonemeInventoryGen2.makePlaces50) -}
ac87faacf11011fbb397419a076a246b
  makePlaces5 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeType2.Place]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeType2.Place])
                   PhonemeInventoryGen2.makePlaces6
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[PhonemeType2.Place]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeType2.Place]>_N))
                   (GHC.Types.[]
                      @ (Data.RVar.RVarT
                           Data.Functor.Identity.Identity [PhonemeType2.Place]))) -}
7fb73af0a2d8e81d778f3b110e021347
  makePlaces50 :: [PhonemeType2.Place]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeType2.Place
                   PhonemeType2.ALVEOLAR
                   PhonemeInventoryGen2.makePlaces51) -}
40b2e5024d8d58cbcdfc9ae40a0cce8d
  makePlaces51 :: [PhonemeType2.Place]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeType2.Place
                   PhonemeType2.POSTALVEOLAR
                   (GHC.Types.[] @ PhonemeType2.Place)) -}
081a51ee9da38674c17218ff73670f0a
  makePlaces52 :: [PhonemeType2.Place]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeType2.Place
                   PhonemeType2.DENTIALVEOLAR
                   (GHC.Types.[] @ PhonemeType2.Place)) -}
da3a8a9bba97e7a9cc4c802b5b5bc94d
  makePlaces53 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeType2.Place]]
    -> forall b.
       ([[PhonemeType2.Place]] -> b)
       -> (forall a.
           Control.Monad.Prompt.Lift
             Data.Random.Source.Internal.Prim.Prim
             Data.Functor.Identity.Identity
             a
           -> (a -> b) -> b)
       -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,C(U)><L,U> -}
2e10923a484b383e62f0f8fed6994846
  makePlaces54 ::
    ([PhonemeType2.Place] -> b)
    -> (forall a2.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a2
        -> (a2 -> b) -> b)
    -> b
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (\ @ b
                   eta1 :: [PhonemeType2.Place] -> b
                   eta2 :: forall a6.
                           Control.Monad.Prompt.Lift
                             Data.Random.Source.Internal.Prim.Prim
                             Data.Functor.Identity.Identity
                             a6
                           -> (a6 -> b) -> b ->
                 eta1 PhonemeInventoryGen2.makePlaces_eta9) -}
af74d52bf569d6246cfe7f84e094ebf2
  makePlaces55 ::
    ([PhonemeType2.Place] -> b1)
    -> (forall a2.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a2
        -> (a2 -> b1) -> b1)
    -> b1
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ b1
                   eta2 :: [PhonemeType2.Place] -> b1
                   eta3 :: forall a6.
                           Control.Monad.Prompt.Lift
                             Data.Random.Source.Internal.Prim.Prim
                             Data.Functor.Identity.Identity
                             a6
                           -> (a6 -> b1) -> b1 ->
                 PhonemeInventoryGen2.makePlaces_eta10
                   `cast`
                 (Trans
                      (Trans
                           (Data.RVar.NTCo:RVarT[0] <Data.Functor.Identity.Identity>_N)
                           (Control.Monad.Prompt.NTCo:PromptT[0]
                                <Data.Random.Source.Internal.Prim.Prim>_R
                                <Data.Functor.Identity.Identity>_R) <Data.RVar.RVarT
                                                                       Data.Functor.Identity.Identity
                                                                       [PhonemeType2.Place]>_N)
                      (Control.Monad.Prompt.NTCo:Prompt[0]
                           <Control.Monad.Prompt.Lift
                              Data.Random.Source.Internal.Prim.Prim
                              Data.Functor.Identity.Identity>_R
                           <Data.RVar.RVarT
                              Data.Functor.Identity.Identity [PhonemeType2.Place]>_R))
                   @ b1
                   (\ x :: Data.RVar.RVarT
                             Data.Functor.Identity.Identity [PhonemeType2.Place] ->
                    case x `cast`
                         (Trans
                              (Trans
                                   (Data.RVar.NTCo:RVarT[0] <Data.Functor.Identity.Identity>_N)
                                   (Control.Monad.Prompt.NTCo:PromptT[0]
                                        <Data.Random.Source.Internal.Prim.Prim>_R
                                        <Data.Functor.Identity.Identity>_R) <[PhonemeType2.Place]>_N)
                              (Control.Monad.Prompt.NTCo:Prompt[0]
                                   <Control.Monad.Prompt.Lift
                                      Data.Random.Source.Internal.Prim.Prim
                                      Data.Functor.Identity.Identity>_R
                                   <[PhonemeType2.Place]>_R)) of nt { DEFAULT ->
                    nt @ b1 eta2 eta3 })
                   eta3) -}
7b7691fde5f957fd044fa94b589b10cc
  makePlaces56 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeType2.Place]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeType2.Place])
                   PhonemeInventoryGen2.makePlaces22
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[PhonemeType2.Place]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeType2.Place]>_N))
                   PhonemeInventoryGen2.makePlaces57) -}
59c23fa370ae22b0f357022fd0a9c423
  makePlaces57 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeType2.Place]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeType2.Place])
                   PhonemeInventoryGen2.makePlaces61
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[PhonemeType2.Place]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeType2.Place]>_N))
                   PhonemeInventoryGen2.makePlaces58) -}
87d00ce34e17c40693e25423495a3864
  makePlaces58 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeType2.Place]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeType2.Place])
                   PhonemeInventoryGen2.makePlaces59
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[PhonemeType2.Place]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeType2.Place]>_N))
                   (GHC.Types.[]
                      @ (Data.RVar.RVarT
                           Data.Functor.Identity.Identity [PhonemeType2.Place]))) -}
6b7f1effdc5c49a4139c1b412cb1a47f
  makePlaces59 ::
    ([PhonemeType2.Place] -> b)
    -> (forall a2.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a2
        -> (a2 -> b) -> b)
    -> b
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (\ @ b
                   eta1 :: [PhonemeType2.Place] -> b
                   eta2 :: forall a6.
                           Control.Monad.Prompt.Lift
                             Data.Random.Source.Internal.Prim.Prim
                             Data.Functor.Identity.Identity
                             a6
                           -> (a6 -> b) -> b ->
                 eta1 PhonemeInventoryGen2.makePlaces_eta11) -}
2cbe93753cb9afd9e9d2631d845a8867
  makePlaces6 ::
    ([PhonemeType2.Place] -> b1)
    -> (forall a2.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a2
        -> (a2 -> b1) -> b1)
    -> b1
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ b1
                   eta2 :: [PhonemeType2.Place] -> b1
                   eta3 :: forall a6.
                           Control.Monad.Prompt.Lift
                             Data.Random.Source.Internal.Prim.Prim
                             Data.Functor.Identity.Identity
                             a6
                           -> (a6 -> b1) -> b1 ->
                 PhonemeInventoryGen2.makePlaces_eta
                   `cast`
                 (Trans
                      (Trans
                           (Data.RVar.NTCo:RVarT[0] <Data.Functor.Identity.Identity>_N)
                           (Control.Monad.Prompt.NTCo:PromptT[0]
                                <Data.Random.Source.Internal.Prim.Prim>_R
                                <Data.Functor.Identity.Identity>_R) <Data.RVar.RVarT
                                                                       Data.Functor.Identity.Identity
                                                                       [PhonemeType2.Place]>_N)
                      (Control.Monad.Prompt.NTCo:Prompt[0]
                           <Control.Monad.Prompt.Lift
                              Data.Random.Source.Internal.Prim.Prim
                              Data.Functor.Identity.Identity>_R
                           <Data.RVar.RVarT
                              Data.Functor.Identity.Identity [PhonemeType2.Place]>_R))
                   @ b1
                   (\ x :: Data.RVar.RVarT
                             Data.Functor.Identity.Identity [PhonemeType2.Place] ->
                    case x `cast`
                         (Trans
                              (Trans
                                   (Data.RVar.NTCo:RVarT[0] <Data.Functor.Identity.Identity>_N)
                                   (Control.Monad.Prompt.NTCo:PromptT[0]
                                        <Data.Random.Source.Internal.Prim.Prim>_R
                                        <Data.Functor.Identity.Identity>_R) <[PhonemeType2.Place]>_N)
                              (Control.Monad.Prompt.NTCo:Prompt[0]
                                   <Control.Monad.Prompt.Lift
                                      Data.Random.Source.Internal.Prim.Prim
                                      Data.Functor.Identity.Identity>_R
                                   <[PhonemeType2.Place]>_R)) of nt { DEFAULT ->
                    nt @ b1 eta2 eta3 })
                   eta3) -}
540082e51c5882d80ef13e0635542e56
  makePlaces60 :: [PhonemeType2.Place]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeType2.Place
                   PhonemeType2.LABIODENTAL
                   (GHC.Types.[] @ PhonemeType2.Place)) -}
4bfb0543a7b2607b5c194f9fb2c05748
  makePlaces61 ::
    ([PhonemeType2.Place] -> b)
    -> (forall a2.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a2
        -> (a2 -> b) -> b)
    -> b
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (\ @ b
                   eta1 :: [PhonemeType2.Place] -> b
                   eta2 :: forall a6.
                           Control.Monad.Prompt.Lift
                             Data.Random.Source.Internal.Prim.Prim
                             Data.Functor.Identity.Identity
                             a6
                           -> (a6 -> b) -> b ->
                 eta1 PhonemeInventoryGen2.makePlaces_eta12) -}
9d38852ab41de7df2ef3a9bda92949a5
  makePlaces62 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeType2.Place]]
    -> forall b.
       ([[PhonemeType2.Place]] -> b)
       -> (forall a.
           Control.Monad.Prompt.Lift
             Data.Random.Source.Internal.Prim.Prim
             Data.Functor.Identity.Identity
             a
           -> (a -> b) -> b)
       -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,C(U)><L,U> -}
e876ffab2800175867999f75d012cfec
  makePlaces7 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeType2.Place]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeType2.Place])
                   PhonemeInventoryGen2.makePlaces22
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[PhonemeType2.Place]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeType2.Place]>_N))
                   PhonemeInventoryGen2.makePlaces8) -}
dd4b711c40a805948bb80d2abdec2fb4
  makePlaces8 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeType2.Place]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeType2.Place])
                   PhonemeInventoryGen2.makePlaces21
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[PhonemeType2.Place]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeType2.Place]>_N))
                   PhonemeInventoryGen2.makePlaces9) -}
ed9290a4956cf5a665e0b3bd5e362757
  makePlaces9 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [PhonemeType2.Place]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeType2.Place])
                   PhonemeInventoryGen2.makePlaces10
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[PhonemeType2.Place]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeType2.Place]>_N))
                   (GHC.Types.[]
                      @ (Data.RVar.RVarT
                           Data.Functor.Identity.Identity [PhonemeType2.Place]))) -}
c566ab6e5c02da776381afe738f3da51
  makePlaces_eta ::
    Data.RVar.RVarT
      Data.Functor.Identity.Identity
      (Data.RVar.RVarT
         Data.Functor.Identity.Identity [PhonemeType2.Place])
  {- Unfolding: (Data.Random.Extras.choice
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeType2.Place])
                   PhonemeInventoryGen2.makePlaces7) -}
bff8b4d077cce9b1dd5049327035a48b
  makePlaces_eta1 :: [PhonemeType2.Place]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeType2.Place
                   PhonemeType2.GLOTTAL
                   (GHC.Types.[] @ PhonemeType2.Place)) -}
b5c5f5720e1998c1fc74ff54765f5226
  makePlaces_eta10 ::
    Data.RVar.RVarT
      Data.Functor.Identity.Identity
      (Data.RVar.RVarT
         Data.Functor.Identity.Identity [PhonemeType2.Place])
  {- Unfolding: (Data.Random.Extras.choice
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeType2.Place])
                   PhonemeInventoryGen2.makePlaces56) -}
8c873d88acc31bacbaeb3cc4ab29d530
  makePlaces_eta11 :: [PhonemeType2.Place]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeType2.Place
                   PhonemeType2.BILABIAL
                   PhonemeInventoryGen2.makePlaces60) -}
6dd37c80002644402fc6006a53431976
  makePlaces_eta12 :: [PhonemeType2.Place]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeType2.Place
                   PhonemeType2.LABIAL
                   (GHC.Types.[] @ PhonemeType2.Place)) -}
800577c0221bdb0d24746d63d639244e
  makePlaces_eta2 :: [PhonemeType2.Place]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeType2.Place
                   PhonemeType2.LARYNGEAL
                   (GHC.Types.[] @ PhonemeType2.Place)) -}
122325cc7c7e0397d43cae63ef7811b5
  makePlaces_eta3 ::
    Data.RVar.RVarT
      Data.Functor.Identity.Identity
      (Data.RVar.RVarT
         Data.Functor.Identity.Identity [PhonemeType2.Place])
  {- Unfolding: (Data.Random.Extras.choice
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeType2.Place])
                   PhonemeInventoryGen2.makePlaces24) -}
04df58a0cb3b77cc292cdbd87b9241b7
  makePlaces_eta4 :: [PhonemeType2.Place]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeType2.Place
                   PhonemeType2.UVULAR
                   (GHC.Types.[] @ PhonemeType2.Place)) -}
0e935d4d6f3574e4d62654cc3f28d662
  makePlaces_eta5 :: [PhonemeType2.Place]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeType2.Place
                   PhonemeType2.VELAR
                   (GHC.Types.[] @ PhonemeType2.Place)) -}
089c72a44d424d17bd7bb4345ddfd466
  makePlaces_eta6 :: [PhonemeType2.Place]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeType2.Place
                   PhonemeType2.DORSAL
                   (GHC.Types.[] @ PhonemeType2.Place)) -}
c4bf7f17068bc8d3b99a312c5b546006
  makePlaces_eta7 ::
    Data.RVar.RVarT
      Data.Functor.Identity.Identity
      (Data.RVar.RVarT
         Data.Functor.Identity.Identity [PhonemeType2.Place])
  {- Unfolding: (Data.Random.Extras.choice
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [PhonemeType2.Place])
                   PhonemeInventoryGen2.makePlaces40) -}
99b444a22e3ede9ba77bfae706b321da
  makePlaces_eta8 :: [PhonemeType2.Place]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeType2.Place
                   PhonemeType2.RETROFLEX
                   (GHC.Types.[] @ PhonemeType2.Place)) -}
34ebc31d9adfc20c71b46e5c8a1f6d90
  makePlaces_eta9 :: [PhonemeType2.Place]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeType2.Place
                   PhonemeType2.CORONAL
                   (GHC.Types.[] @ PhonemeType2.Place)) -}
04a3c0fb25ed40a82327564d558c4ec0
  makePlaces_go :: [[PhonemeType2.Place]] -> [PhonemeType2.Place]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
6947dbc0af6350d3440e36f97c0ebbdc
  makePlaces_go1 :: [[PhonemeType2.Place]] -> [PhonemeType2.Place]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
d4bb8592b41484ebc933628f702e7b36
  makePlaces_go2 :: [[PhonemeType2.Place]] -> [PhonemeType2.Place]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
48faa64cc6407848a340587ab911d356
  makePlaces_go3 :: [[PhonemeType2.Place]] -> [PhonemeType2.Place]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
27b5774684339c2429858d85bef353aa
  makePlaces_m1 ::
    Data.RVar.RVarT Data.Functor.Identity.Identity GHC.Types.Int
  {- Unfolding: (Data.Random.Distribution.Uniform.$w$sintegralUniform'
                   @ Data.Functor.Identity.Identity
                   2
                   3) -}
6b2b67a8929cd15bc2f3164fa712c268
  makeRoundedneses :: Data.RVar.RVar [PhonemeType2.Roundedness]
  {- Unfolding: (Data.Random.Extras.choice
                   @ [PhonemeType2.Roundedness]
                   PhonemeInventoryGen2.makeRoundedneses1) -}
fd97f38cc7c3a05d75531804004305d3
  makeRoundedneses1 :: [[PhonemeType2.Roundedness]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeType2.Roundedness]
                   PhonemeInventoryGen2.makeRoundedneses5
                   PhonemeInventoryGen2.makeRoundedneses2) -}
d14bfae31505003ec7f06694109f606c
  makeRoundedneses2 :: [[PhonemeType2.Roundedness]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [PhonemeType2.Roundedness]
                   PhonemeInventoryGen2.makeRoundedneses3
                   (GHC.Types.[] @ [PhonemeType2.Roundedness])) -}
774e0b6dd5fa3de0c5ef8124f4786765
  makeRoundedneses3 :: [PhonemeType2.Roundedness]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeType2.Roundedness
                   PhonemeType2.UNROUNDED
                   PhonemeInventoryGen2.makeRoundedneses4) -}
89039967b8f9f4fc867d2125c1b8509a
  makeRoundedneses4 :: [PhonemeType2.Roundedness]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeType2.Roundedness
                   PhonemeType2.ROUNDED
                   (GHC.Types.[] @ PhonemeType2.Roundedness)) -}
3fb5c8cd69c76e60b64c8ab02cce8758
  makeRoundedneses5 :: [PhonemeType2.Roundedness]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ PhonemeType2.Roundedness
                   PhonemeType2.DEFAULT
                   (GHC.Types.[] @ PhonemeType2.Roundedness)) -}
2945551e756e92da7301a9845699fede
  makeVowels ::
    [PhonemeType2.Height]
    -> [PhonemeType2.Backness]
    -> [PhonemeType2.Roundedness]
    -> [PhonemeType2.Length]
    -> Data.RVar.RVar [PhonemeType2.Phoneme]
  {- Arity: 4, Strictness: <L,1*U><L,U><L,U><L,U>,
     Unfolding: (\ heights :: [PhonemeType2.Height]
                   backs :: [PhonemeType2.Backness]
                   rounds :: [PhonemeType2.Roundedness]
                   lengths :: [PhonemeType2.Length] ->
                 let {
                   eta :: [PhonemeType2.Phoneme]
                   = letrec {
                       go2 :: [PhonemeType2.Height] -> [PhonemeType2.Phoneme]
                         {- Arity: 1, Strictness: <S,1*U> -}
                       = \ ds :: [PhonemeType2.Height] ->
                         case ds of wild {
                           [] -> GHC.Types.[] @ PhonemeType2.Phoneme
                           : y ys
                           -> let {
                                ys1 :: [PhonemeType2.Phoneme] = go2 ys
                              } in
                              letrec {
                                go3 :: [PhonemeType2.Backness] -> [PhonemeType2.Phoneme]
                                  {- Arity: 1, Strictness: <S,1*U> -}
                                = \ ds1 :: [PhonemeType2.Backness] ->
                                  case ds1 of wild1 {
                                    [] -> ys1
                                    : y1 ys2
                                    -> let {
                                         z :: [PhonemeType2.Phoneme] = go3 ys2
                                       } in
                                       letrec {
                                         go4 :: [PhonemeType2.Roundedness] -> [PhonemeType2.Phoneme]
                                           {- Arity: 1, Strictness: <S,1*U> -}
                                         = \ ds2 :: [PhonemeType2.Roundedness] ->
                                           case ds2 of wild2 {
                                             [] -> z
                                             : y2 ys3
                                             -> let {
                                                  z1 :: [PhonemeType2.Phoneme] = go4 ys3
                                                } in
                                                letrec {
                                                  go5 :: [PhonemeType2.Length]
                                                         -> [PhonemeType2.Phoneme]
                                                    {- Arity: 1, Strictness: <S,1*U> -}
                                                  = \ ds3 :: [PhonemeType2.Length] ->
                                                    case ds3 of wild3 {
                                                      [] -> z1
                                                      : y3 ys4
                                                      -> GHC.Types.:
                                                           @ PhonemeType2.Phoneme
                                                           (PhonemeType2.Vowel
                                                              y
                                                              y1
                                                              y2
                                                              y3
                                                              (PhonemeInventoryGen2.retrieveVSymbol
                                                                 y
                                                                 y1
                                                                 y2
                                                                 y3))
                                                           (go5 ys4) }
                                                } in
                                                go5 lengths }
                                       } in
                                       go4 rounds }
                              } in
                              go3 backs }
                     } in
                     go2 heights
                 } in
                 (\ @ b
                    eta1 :: [PhonemeType2.Phoneme] -> b
                    eta2 :: forall a6.
                            Control.Monad.Prompt.Lift
                              Data.Random.Source.Internal.Prim.Prim
                              Data.Functor.Identity.Identity
                              a6
                            -> (a6 -> b) -> b ->
                  Data.RVar.$fApplicativeRVarT3
                    @ Data.Functor.Identity.Identity
                    @ [PhonemeType2.Phoneme]
                    eta
                    @ b
                    eta1
                    eta2)
                   `cast`
                 (Trans
                      (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                <Control.Monad.Prompt.Lift
                                   Data.Random.Source.Internal.Prim.Prim
                                   Data.Functor.Identity.Identity>_R
                                <[PhonemeType2.Phoneme]>_R))
                      (Trans
                           (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                     <Data.Random.Source.Internal.Prim.Prim>_R
                                     <Data.Functor.Identity.Identity>_R))
                           (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeType2.Phoneme]>_N))) -}
c7af70a65dcc1def8bc91567f14c54ab
  retrieveVSymbol ::
    PhonemeType2.Height
    -> PhonemeType2.Backness
    -> PhonemeType2.Roundedness
    -> PhonemeType2.Length
    -> GHC.Base.String
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U> -}
"SPEC/PhonemeInventoryGen2 $fEq(,) @ Place @ Manner" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                               PhonemeType2.Place
                                                                     $dEq1 :: GHC.Classes.Eq
                                                                                PhonemeType2.Manner
  GHC.Classes.$fEq(,) @ PhonemeType2.Place
                      @ PhonemeType2.Manner
                      $dEq
                      $dEq1
  = PhonemeInventoryGen2.$s$fEq(,)
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

