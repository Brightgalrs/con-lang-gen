
==================== FINAL INTERFACE ====================
2016-10-22 22:13:16.166131 UTC

interface conla_1eA9qWUPH9nBowcXqqaV8r:GrammarType2 7103
  interface hash: 0ccd1b727b24a7452d237518c0fa3d19
  ABI hash: 554c1372029403d0f78a34fd86291814
  export-list hash: bc4b67f93b57e401f71bf872fb10af16
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 962af636f8e927040c7daa9c21457292
  sig of: Nothing
  used TH splices: False
  where
exports:
  GrammarType2.Animacy{GrammarType2.AN GrammarType2.HUM GrammarType2.INAN GrammarType2.NHUM GrammarType2.ZO}
  GrammarType2.Case{GrammarType2.ABL GrammarType2.ACC GrammarType2.DAT GrammarType2.ERG GrammarType2.GEN GrammarType2.INS GrammarType2.LOC GrammarType2.NOM GrammarType2.PREP GrammarType2.VOC}
  GrammarType2.Definiteness{GrammarType2.DEF GrammarType2.INDF}
  GrammarType2.ExponentSystem{GrammarType2.ExponentSystem}
  GrammarType2.Gender{GrammarType2.COM GrammarType2.F GrammarType2.M GrammarType2.N}
  GrammarType2.GrammarSystem{GrammarType2.GrammarSystem GrammarType2.aSys GrammarType2.cSys GrammarType2.dSys GrammarType2.gSys GrammarType2.hSys GrammarType2.nSys GrammarType2.sSys}
  GrammarType2.Honorific{GrammarType2.FAM GrammarType2.FORM}
  GrammarType2.Manifest{GrammarType2.Exponent GrammarType2.NoManifest GrammarType2.Particle}
  GrammarType2.Number{GrammarType2.DU GrammarType2.PA GrammarType2.PL GrammarType2.SG GrammarType2.TRI}
  GrammarType2.ParticleSystem{GrammarType2.ParticleSystem}
  GrammarType2.Specificity{GrammarType2.NSPEC GrammarType2.SPEC}
module dependencies: OtherData2 PhonemeType2
package dependencies: base-4.8.2.0* ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Monoid
                         base-4.8.2.0:Data.Type.Equality base-4.8.2.0:GHC.Generics
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.Read b423b4506a014855edbd329b567629f3
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  base-4.8.2.0:Text.ParserCombinators.ReadPrec 2590e0e0a57a86ac7c62727f4d868dd2
import  -/  base-4.8.2.0:Text.Read.Lex 724ca44ddd38ddc5f47a501d62736c26
import  -/  OtherData2 08f9fdb83c0ec02cbc12c2fe756e9c77
  exports: b7fb5a9c6a9b7223e3a71462099d5c6f
import  -/  PhonemeType2 197339ce6b16abf97787f114b13340ff
  exports: df9b2faa8257842f4b45d50bfdeb2c0c
  Morpheme 2ae9d5e2279d7aff2754760a9a3abd27
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
08fe611e10b39cec598d03993fbc490b
  $fEqAnimacy :: GHC.Classes.Eq GrammarType2.Animacy
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Animacy
                  GrammarType2.$fEqAnimacy_$c==
                  GrammarType2.$fEqAnimacy_$c/= -}
08fe611e10b39cec598d03993fbc490b
  $fEqAnimacy_$c/= ::
    GrammarType2.Animacy -> GrammarType2.Animacy -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a22 :: GrammarType2.Animacy
                   b :: GrammarType2.Animacy ->
                 case a22 of wild {
                   GrammarType2.AN
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.AN -> GHC.Types.False }
                   GrammarType2.HUM
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.HUM -> GHC.Types.False }
                   GrammarType2.NHUM
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.NHUM -> GHC.Types.False }
                   GrammarType2.ZO
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.ZO -> GHC.Types.False }
                   GrammarType2.INAN
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        GrammarType2.INAN -> GHC.Types.False } }) -}
08fe611e10b39cec598d03993fbc490b
  $fEqAnimacy_$c== ::
    GrammarType2.Animacy -> GrammarType2.Animacy -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: GrammarType2.Animacy
                   ds1 :: GrammarType2.Animacy ->
                 case ds of wild {
                   GrammarType2.AN
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.AN -> GHC.Types.True }
                   GrammarType2.HUM
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.HUM -> GHC.Types.True }
                   GrammarType2.NHUM
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.NHUM -> GHC.Types.True }
                   GrammarType2.ZO
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.ZO -> GHC.Types.True }
                   GrammarType2.INAN
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarType2.INAN -> GHC.Types.True } }) -}
56c069b86a972ddd52b64b5a722f7b12
  $fEqAspect :: GHC.Classes.Eq GrammarType2.Aspect
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Aspect
                  GrammarType2.$fEqAspect_$c==
                  GrammarType2.$fEqAspect_$c/= -}
56c069b86a972ddd52b64b5a722f7b12
  $fEqAspect_$c/= ::
    GrammarType2.Aspect -> GrammarType2.Aspect -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a22 :: GrammarType2.Aspect b :: GrammarType2.Aspect ->
                 case a22 of wild {
                   GrammarType2.PFV
                   -> case b of wild1 {
                        GrammarType2.PFV -> GHC.Types.False
                        GrammarType2.IPFV -> GHC.Types.True }
                   GrammarType2.IPFV
                   -> case b of wild1 {
                        GrammarType2.PFV -> GHC.Types.True
                        GrammarType2.IPFV -> GHC.Types.False } }) -}
56c069b86a972ddd52b64b5a722f7b12
  $fEqAspect_$c== ::
    GrammarType2.Aspect -> GrammarType2.Aspect -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarType2.Aspect ds1 :: GrammarType2.Aspect ->
                 case ds of wild {
                   GrammarType2.PFV
                   -> case ds1 of wild1 {
                        GrammarType2.PFV -> GHC.Types.True
                        GrammarType2.IPFV -> GHC.Types.False }
                   GrammarType2.IPFV
                   -> case ds1 of wild1 {
                        GrammarType2.PFV -> GHC.Types.False
                        GrammarType2.IPFV -> GHC.Types.True } }) -}
fcaa4072d88a1238ff7d9377b198162c
  $fEqCase :: GHC.Classes.Eq GrammarType2.Case
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Case
                  GrammarType2.$fEqCase_$c==
                  GrammarType2.$fEqCase_$c/= -}
fcaa4072d88a1238ff7d9377b198162c
  $fEqCase_$c/= ::
    GrammarType2.Case -> GrammarType2.Case -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a22 :: GrammarType2.Case b :: GrammarType2.Case ->
                 case a22 of wild {
                   GrammarType2.NOM
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.NOM -> GHC.Types.False }
                   GrammarType2.ACC
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.ACC -> GHC.Types.False }
                   GrammarType2.ERG
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.ERG -> GHC.Types.False }
                   GrammarType2.GEN
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.GEN -> GHC.Types.False }
                   GrammarType2.DAT
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.DAT -> GHC.Types.False }
                   GrammarType2.LOC
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.LOC -> GHC.Types.False }
                   GrammarType2.PREP
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.PREP -> GHC.Types.False }
                   GrammarType2.ABL
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.ABL -> GHC.Types.False }
                   GrammarType2.INS
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.INS -> GHC.Types.False }
                   GrammarType2.VOC
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        GrammarType2.VOC -> GHC.Types.False } }) -}
fcaa4072d88a1238ff7d9377b198162c
  $fEqCase_$c== ::
    GrammarType2.Case -> GrammarType2.Case -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: GrammarType2.Case ds1 :: GrammarType2.Case ->
                 case ds of wild {
                   GrammarType2.NOM
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.NOM -> GHC.Types.True }
                   GrammarType2.ACC
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.ACC -> GHC.Types.True }
                   GrammarType2.ERG
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.ERG -> GHC.Types.True }
                   GrammarType2.GEN
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.GEN -> GHC.Types.True }
                   GrammarType2.DAT
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.DAT -> GHC.Types.True }
                   GrammarType2.LOC
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.LOC -> GHC.Types.True }
                   GrammarType2.PREP
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.PREP -> GHC.Types.True }
                   GrammarType2.ABL
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.ABL -> GHC.Types.True }
                   GrammarType2.INS
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.INS -> GHC.Types.True }
                   GrammarType2.VOC
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarType2.VOC -> GHC.Types.True } }) -}
ae15ce513899bbb81e1bdfe89e424f26
  $fEqDefiniteness :: GHC.Classes.Eq GrammarType2.Definiteness
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Definiteness
                  GrammarType2.$fEqDefiniteness_$c==
                  GrammarType2.$fEqDefiniteness_$c/= -}
ae15ce513899bbb81e1bdfe89e424f26
  $fEqDefiniteness_$c/= ::
    GrammarType2.Definiteness
    -> GrammarType2.Definiteness -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a22 :: GrammarType2.Definiteness
                   b :: GrammarType2.Definiteness ->
                 case a22 of wild {
                   GrammarType2.DEF
                   -> case b of wild1 {
                        GrammarType2.DEF -> GHC.Types.False
                        GrammarType2.INDF -> GHC.Types.True }
                   GrammarType2.INDF
                   -> case b of wild1 {
                        GrammarType2.DEF -> GHC.Types.True
                        GrammarType2.INDF -> GHC.Types.False } }) -}
ae15ce513899bbb81e1bdfe89e424f26
  $fEqDefiniteness_$c== ::
    GrammarType2.Definiteness
    -> GrammarType2.Definiteness -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarType2.Definiteness
                   ds1 :: GrammarType2.Definiteness ->
                 case ds of wild {
                   GrammarType2.DEF
                   -> case ds1 of wild1 {
                        GrammarType2.DEF -> GHC.Types.True
                        GrammarType2.INDF -> GHC.Types.False }
                   GrammarType2.INDF
                   -> case ds1 of wild1 {
                        GrammarType2.DEF -> GHC.Types.False
                        GrammarType2.INDF -> GHC.Types.True } }) -}
757b853fc306b345be9181f15f1f4033
  $fEqEvidentiality :: GHC.Classes.Eq GrammarType2.Evidentiality
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Evidentiality
                  GrammarType2.$fEqEvidentiality_$c==
                  GrammarType2.$fEqEvidentiality_$c/= -}
757b853fc306b345be9181f15f1f4033
  $fEqEvidentiality_$c/= ::
    GrammarType2.Evidentiality
    -> GrammarType2.Evidentiality -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a22 :: GrammarType2.Evidentiality
                   b :: GrammarType2.Evidentiality ->
                 case a22 of wild {
                   GrammarType2.EXP
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.EXP -> GHC.Types.False }
                   GrammarType2.SENS
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.SENS -> GHC.Types.False }
                   GrammarType2.VIS
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.VIS -> GHC.Types.False }
                   GrammarType2.NVIS
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.NVIS -> GHC.Types.False }
                   GrammarType2.AUD
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.AUD -> GHC.Types.False }
                   GrammarType2.INFER
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.INFER -> GHC.Types.False }
                   GrammarType2.REP
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.REP -> GHC.Types.False }
                   GrammarType2.HSY
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.HSY -> GHC.Types.False }
                   GrammarType2.QUO
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.QUO -> GHC.Types.False }
                   GrammarType2.ASS
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        GrammarType2.ASS -> GHC.Types.False } }) -}
757b853fc306b345be9181f15f1f4033
  $fEqEvidentiality_$c== ::
    GrammarType2.Evidentiality
    -> GrammarType2.Evidentiality -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: GrammarType2.Evidentiality
                   ds1 :: GrammarType2.Evidentiality ->
                 case ds of wild {
                   GrammarType2.EXP
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.EXP -> GHC.Types.True }
                   GrammarType2.SENS
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.SENS -> GHC.Types.True }
                   GrammarType2.VIS
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.VIS -> GHC.Types.True }
                   GrammarType2.NVIS
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.NVIS -> GHC.Types.True }
                   GrammarType2.AUD
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.AUD -> GHC.Types.True }
                   GrammarType2.INFER
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.INFER -> GHC.Types.True }
                   GrammarType2.REP
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.REP -> GHC.Types.True }
                   GrammarType2.HSY
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.HSY -> GHC.Types.True }
                   GrammarType2.QUO
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.QUO -> GHC.Types.True }
                   GrammarType2.ASS
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarType2.ASS -> GHC.Types.True } }) -}
8458b2ed20531adbd7e1f0415074af95
  $fEqExponentSystem :: GHC.Classes.Eq GrammarType2.ExponentSystem
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.ExponentSystem
                  GrammarType2.$fEqExponentSystem_$c==1
                  GrammarType2.$fEqExponentSystem_$c/= -}
9f382e20b662a608dc27210703ba886e
  $fEqExponentSystem1 ::
    GHC.Classes.Eq
      (GrammarType2.Manifest GrammarType2.Gender,
       GrammarType2.Manifest GrammarType2.Animacy,
       GrammarType2.Manifest GrammarType2.Case,
       GrammarType2.Manifest GrammarType2.Number,
       GrammarType2.Manifest GrammarType2.Honorific,
       GrammarType2.Manifest GrammarType2.Definiteness,
       GrammarType2.Manifest GrammarType2.Specificity)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fEqExponentSystem_$s$fEq(,,,,,,) -}
84cc90c6a5412a6b803962da47820872
  $fEqExponentSystem2 ::
    GHC.Classes.Eq (GrammarType2.Manifest GrammarType2.Specificity)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fEqExponentSystem_$s$fEqManifest -}
fd2e4f6f534fd240b9cde0b8f8a520af
  $fEqExponentSystem3 ::
    GrammarType2.Manifest GrammarType2.Specificity
    -> GrammarType2.Manifest GrammarType2.Specificity -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a22 :: GrammarType2.Manifest GrammarType2.Specificity
                   b :: GrammarType2.Manifest GrammarType2.Specificity ->
                 case a22 of wild {
                   GrammarType2.NoManifest
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        GrammarType2.NoManifest -> GHC.Types.False }
                   GrammarType2.Particle a23
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        GrammarType2.Particle b1
                        -> case a23 of wild2 {
                             GrammarType2.SPEC
                             -> case b1 of wild3 {
                                  GrammarType2.SPEC -> GHC.Types.False
                                  GrammarType2.NSPEC -> GHC.Types.True }
                             GrammarType2.NSPEC
                             -> case b1 of wild3 {
                                  GrammarType2.SPEC -> GHC.Types.True
                                  GrammarType2.NSPEC -> GHC.Types.False } } }
                   GrammarType2.Exponent a23
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        GrammarType2.Exponent b1
                        -> case a23 of wild2 {
                             GrammarType2.SPEC
                             -> case b1 of wild3 {
                                  GrammarType2.SPEC -> GHC.Types.False
                                  GrammarType2.NSPEC -> GHC.Types.True }
                             GrammarType2.NSPEC
                             -> case b1 of wild3 {
                                  GrammarType2.SPEC -> GHC.Types.True
                                  GrammarType2.NSPEC -> GHC.Types.False } } } }) -}
3979b8af8fdba6f1a464ba5782af10c9
  $fEqExponentSystem4 ::
    GHC.Classes.Eq (GrammarType2.Manifest GrammarType2.Definiteness)
  {- Unfolding: (GrammarType2.$fEqManifest
                   @ GrammarType2.Definiteness
                   GrammarType2.$fEqDefiniteness) -}
57d0995fe9a906c1ecefe23954274453
  $fEqExponentSystem5 ::
    GHC.Classes.Eq (GrammarType2.Manifest GrammarType2.Honorific)
  {- Unfolding: (GrammarType2.$fEqManifest
                   @ GrammarType2.Honorific
                   GrammarType2.$fEqHonorific) -}
327ff6b2366efe497a1c9ea6d39eca36
  $fEqExponentSystem6 ::
    GHC.Classes.Eq (GrammarType2.Manifest GrammarType2.Number)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fEqManifest_$s$fEqManifest -}
ab3d0aece327b3a871b30ca63dadc5b3
  $fEqExponentSystem7 ::
    GHC.Classes.Eq (GrammarType2.Manifest GrammarType2.Case)
  {- Unfolding: (GrammarType2.$fEqManifest
                   @ GrammarType2.Case
                   GrammarType2.$fEqCase) -}
80313a4a1fbf1a9d672980aa34ce56bf
  $fEqExponentSystem8 ::
    GHC.Classes.Eq (GrammarType2.Manifest GrammarType2.Animacy)
  {- Unfolding: (GrammarType2.$fEqManifest
                   @ GrammarType2.Animacy
                   GrammarType2.$fEqAnimacy) -}
e914da970aefca1ae2d79a4c0b21d569
  $fEqExponentSystem9 ::
    GHC.Classes.Eq (GrammarType2.Manifest GrammarType2.Gender)
  {- Unfolding: (GrammarType2.$fEqManifest
                   @ GrammarType2.Gender
                   GrammarType2.$fEqGender) -}
8458b2ed20531adbd7e1f0415074af95
  $fEqExponentSystem_$c/= ::
    GrammarType2.ExponentSystem
    -> GrammarType2.ExponentSystem -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ a22 :: GrammarType2.ExponentSystem
                   b :: GrammarType2.ExponentSystem ->
                 case a22 of wild { GrammarType2.ExponentSystem a23 ->
                 case b of wild1 { GrammarType2.ExponentSystem b1 ->
                 case GHC.Classes.$fEq[]_$c==
                        @ (PhonemeType2.Morpheme,
                           (GrammarType2.Manifest GrammarType2.Gender,
                            GrammarType2.Manifest GrammarType2.Animacy,
                            GrammarType2.Manifest GrammarType2.Case,
                            GrammarType2.Manifest GrammarType2.Number,
                            GrammarType2.Manifest GrammarType2.Honorific,
                            GrammarType2.Manifest GrammarType2.Definiteness,
                            GrammarType2.Manifest GrammarType2.Specificity))
                        GrammarType2.$fEqExponentSystem_$s$fEq(,)
                        a23
                        b1 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
6417e4f225623173ad75902202935d29
  $fEqExponentSystem_$c== ::
    GrammarType2.Specificity
    -> GrammarType2.Specificity -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarType2.Specificity
                   ds1 :: GrammarType2.Specificity ->
                 case ds of wild {
                   GrammarType2.SPEC
                   -> case ds1 of wild1 {
                        GrammarType2.SPEC -> GHC.Types.True
                        GrammarType2.NSPEC -> GHC.Types.False }
                   GrammarType2.NSPEC
                   -> case ds1 of wild1 {
                        GrammarType2.SPEC -> GHC.Types.False
                        GrammarType2.NSPEC -> GHC.Types.True } }) -}
8458b2ed20531adbd7e1f0415074af95
  $fEqExponentSystem_$c==1 ::
    GrammarType2.ExponentSystem
    -> GrammarType2.ExponentSystem -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarType2.ExponentSystem
                   ds1 :: GrammarType2.ExponentSystem ->
                 case ds of wild { GrammarType2.ExponentSystem a22 ->
                 case ds1 of wild1 { GrammarType2.ExponentSystem b1 ->
                 GHC.Classes.$fEq[]_$c==
                   @ (PhonemeType2.Morpheme,
                      (GrammarType2.Manifest GrammarType2.Gender,
                       GrammarType2.Manifest GrammarType2.Animacy,
                       GrammarType2.Manifest GrammarType2.Case,
                       GrammarType2.Manifest GrammarType2.Number,
                       GrammarType2.Manifest GrammarType2.Honorific,
                       GrammarType2.Manifest GrammarType2.Definiteness,
                       GrammarType2.Manifest GrammarType2.Specificity))
                   GrammarType2.$fEqExponentSystem_$s$fEq(,)
                   a22
                   b1 } }) -}
fd2e4f6f534fd240b9cde0b8f8a520af
  $fEqExponentSystem_$s$c== ::
    GrammarType2.Manifest GrammarType2.Specificity
    -> GrammarType2.Manifest GrammarType2.Specificity -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: GrammarType2.Manifest GrammarType2.Specificity
                   ds1 :: GrammarType2.Manifest GrammarType2.Specificity ->
                 case ds of wild {
                   GrammarType2.NoManifest
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarType2.NoManifest -> GHC.Types.True }
                   GrammarType2.Particle a22
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarType2.Particle b1
                        -> GrammarType2.$fEqExponentSystem_$c== a22 b1 }
                   GrammarType2.Exponent a22
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarType2.Exponent b1
                        -> GrammarType2.$fEqExponentSystem_$c== a22 b1 } }) -}
0b54c3a9387a6f08326a54553478c616
  $fEqExponentSystem_$s$fEq(,) ::
    GHC.Classes.Eq
      (PhonemeType2.Morpheme,
       (GrammarType2.Manifest GrammarType2.Gender,
        GrammarType2.Manifest GrammarType2.Animacy,
        GrammarType2.Manifest GrammarType2.Case,
        GrammarType2.Manifest GrammarType2.Number,
        GrammarType2.Manifest GrammarType2.Honorific,
        GrammarType2.Manifest GrammarType2.Definiteness,
        GrammarType2.Manifest GrammarType2.Specificity))
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (PhonemeType2.Morpheme,
                     (GrammarType2.Manifest GrammarType2.Gender,
                      GrammarType2.Manifest GrammarType2.Animacy,
                      GrammarType2.Manifest GrammarType2.Case,
                      GrammarType2.Manifest GrammarType2.Number,
                      GrammarType2.Manifest GrammarType2.Honorific,
                      GrammarType2.Manifest GrammarType2.Definiteness,
                      GrammarType2.Manifest GrammarType2.Specificity))
                  (GHC.Classes.$fEq(,)_$c==
                     @ PhonemeType2.Morpheme
                     @ (GrammarType2.Manifest GrammarType2.Gender,
                        GrammarType2.Manifest GrammarType2.Animacy,
                        GrammarType2.Manifest GrammarType2.Case,
                        GrammarType2.Manifest GrammarType2.Number,
                        GrammarType2.Manifest GrammarType2.Honorific,
                        GrammarType2.Manifest GrammarType2.Definiteness,
                        GrammarType2.Manifest GrammarType2.Specificity)
                     PhonemeType2.$fEqMorpheme
                     GrammarType2.$fEqExponentSystem1)
                  (GHC.Classes.$fEq(,)_$c/=
                     @ PhonemeType2.Morpheme
                     @ (GrammarType2.Manifest GrammarType2.Gender,
                        GrammarType2.Manifest GrammarType2.Animacy,
                        GrammarType2.Manifest GrammarType2.Case,
                        GrammarType2.Manifest GrammarType2.Number,
                        GrammarType2.Manifest GrammarType2.Honorific,
                        GrammarType2.Manifest GrammarType2.Definiteness,
                        GrammarType2.Manifest GrammarType2.Specificity)
                     PhonemeType2.$fEqMorpheme
                     GrammarType2.$fEqExponentSystem1) -}
533b26a358bc80abdc9caf32feb39052
  $fEqExponentSystem_$s$fEq(,,,,,,) ::
    GHC.Classes.Eq
      (GrammarType2.Manifest GrammarType2.Gender,
       GrammarType2.Manifest GrammarType2.Animacy,
       GrammarType2.Manifest GrammarType2.Case,
       GrammarType2.Manifest GrammarType2.Number,
       GrammarType2.Manifest GrammarType2.Honorific,
       GrammarType2.Manifest GrammarType2.Definiteness,
       GrammarType2.Manifest GrammarType2.Specificity)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GrammarType2.Manifest GrammarType2.Gender,
                     GrammarType2.Manifest GrammarType2.Animacy,
                     GrammarType2.Manifest GrammarType2.Case,
                     GrammarType2.Manifest GrammarType2.Number,
                     GrammarType2.Manifest GrammarType2.Honorific,
                     GrammarType2.Manifest GrammarType2.Definiteness,
                     GrammarType2.Manifest GrammarType2.Specificity)
                  (GHC.Classes.$fEq(,,,,,,)_$c==
                     @ (GrammarType2.Manifest GrammarType2.Gender)
                     @ (GrammarType2.Manifest GrammarType2.Animacy)
                     @ (GrammarType2.Manifest GrammarType2.Case)
                     @ (GrammarType2.Manifest GrammarType2.Number)
                     @ (GrammarType2.Manifest GrammarType2.Honorific)
                     @ (GrammarType2.Manifest GrammarType2.Definiteness)
                     @ (GrammarType2.Manifest GrammarType2.Specificity)
                     GrammarType2.$fEqExponentSystem9
                     GrammarType2.$fEqExponentSystem8
                     GrammarType2.$fEqExponentSystem7
                     GrammarType2.$fEqExponentSystem6
                     GrammarType2.$fEqExponentSystem5
                     GrammarType2.$fEqExponentSystem4
                     GrammarType2.$fEqExponentSystem2)
                  GrammarType2.$fEqExponentSystem_$s$fEq(,,,,,,)_$c/= -}
e464b0f66872b68486ff12184d8cd270
  $fEqExponentSystem_$s$fEq(,,,,,,)_$c/= ::
    (GrammarType2.Manifest GrammarType2.Gender,
     GrammarType2.Manifest GrammarType2.Animacy,
     GrammarType2.Manifest GrammarType2.Case,
     GrammarType2.Manifest GrammarType2.Number,
     GrammarType2.Manifest GrammarType2.Honorific,
     GrammarType2.Manifest GrammarType2.Definiteness,
     GrammarType2.Manifest GrammarType2.Specificity)
    -> (GrammarType2.Manifest GrammarType2.Gender,
        GrammarType2.Manifest GrammarType2.Animacy,
        GrammarType2.Manifest GrammarType2.Case,
        GrammarType2.Manifest GrammarType2.Number,
        GrammarType2.Manifest GrammarType2.Honorific,
        GrammarType2.Manifest GrammarType2.Definiteness,
        GrammarType2.Manifest GrammarType2.Specificity)
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U)><S(SLLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ a22 :: (GrammarType2.Manifest GrammarType2.Gender,
                           GrammarType2.Manifest GrammarType2.Animacy,
                           GrammarType2.Manifest GrammarType2.Case,
                           GrammarType2.Manifest GrammarType2.Number,
                           GrammarType2.Manifest GrammarType2.Honorific,
                           GrammarType2.Manifest GrammarType2.Definiteness,
                           GrammarType2.Manifest GrammarType2.Specificity)
                   b1 :: (GrammarType2.Manifest GrammarType2.Gender,
                          GrammarType2.Manifest GrammarType2.Animacy,
                          GrammarType2.Manifest GrammarType2.Case,
                          GrammarType2.Manifest GrammarType2.Number,
                          GrammarType2.Manifest GrammarType2.Honorific,
                          GrammarType2.Manifest GrammarType2.Definiteness,
                          GrammarType2.Manifest GrammarType2.Specificity) ->
                 case GHC.Classes.$fEq(,,,,,,)_$c==
                        @ (GrammarType2.Manifest GrammarType2.Gender)
                        @ (GrammarType2.Manifest GrammarType2.Animacy)
                        @ (GrammarType2.Manifest GrammarType2.Case)
                        @ (GrammarType2.Manifest GrammarType2.Number)
                        @ (GrammarType2.Manifest GrammarType2.Honorific)
                        @ (GrammarType2.Manifest GrammarType2.Definiteness)
                        @ (GrammarType2.Manifest GrammarType2.Specificity)
                        GrammarType2.$fEqExponentSystem9
                        GrammarType2.$fEqExponentSystem8
                        GrammarType2.$fEqExponentSystem7
                        GrammarType2.$fEqExponentSystem6
                        GrammarType2.$fEqExponentSystem5
                        GrammarType2.$fEqExponentSystem4
                        GrammarType2.$fEqExponentSystem2
                        a22
                        b1 of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
fd2e4f6f534fd240b9cde0b8f8a520af
  $fEqExponentSystem_$s$fEqManifest ::
    GHC.Classes.Eq (GrammarType2.Manifest GrammarType2.Specificity)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GrammarType2.Manifest GrammarType2.Specificity)
                  GrammarType2.$fEqExponentSystem_$s$c==
                  GrammarType2.$fEqExponentSystem3 -}
498ce41f2238314803d9983a3ee7b9a8
  $fEqGender :: GHC.Classes.Eq GrammarType2.Gender
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Gender
                  GrammarType2.$fEqGender_$c==
                  GrammarType2.$fEqGender_$c/= -}
498ce41f2238314803d9983a3ee7b9a8
  $fEqGender_$c/= ::
    GrammarType2.Gender -> GrammarType2.Gender -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a22 :: GrammarType2.Gender
                   b :: GrammarType2.Gender ->
                 case a22 of wild {
                   GrammarType2.M
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.M -> GHC.Types.False }
                   GrammarType2.F
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.F -> GHC.Types.False }
                   GrammarType2.COM
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.COM -> GHC.Types.False }
                   GrammarType2.N
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.N -> GHC.Types.False } }) -}
498ce41f2238314803d9983a3ee7b9a8
  $fEqGender_$c== ::
    GrammarType2.Gender -> GrammarType2.Gender -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: GrammarType2.Gender
                   ds1 :: GrammarType2.Gender ->
                 case ds of wild {
                   GrammarType2.M
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.M -> GHC.Types.True }
                   GrammarType2.F
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.F -> GHC.Types.True }
                   GrammarType2.COM
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.COM -> GHC.Types.True }
                   GrammarType2.N
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.N -> GHC.Types.True } }) -}
270aa74414213d38a897e2c2f04e2cb0
  $fEqHonorific :: GHC.Classes.Eq GrammarType2.Honorific
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Honorific
                  GrammarType2.$fEqHonorific_$c==
                  GrammarType2.$fEqHonorific_$c/= -}
270aa74414213d38a897e2c2f04e2cb0
  $fEqHonorific_$c/= ::
    GrammarType2.Honorific -> GrammarType2.Honorific -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a22 :: GrammarType2.Honorific b :: GrammarType2.Honorific ->
                 case a22 of wild {
                   GrammarType2.FAM
                   -> case b of wild1 {
                        GrammarType2.FAM -> GHC.Types.False
                        GrammarType2.FORM -> GHC.Types.True }
                   GrammarType2.FORM
                   -> case b of wild1 {
                        GrammarType2.FAM -> GHC.Types.True
                        GrammarType2.FORM -> GHC.Types.False } }) -}
270aa74414213d38a897e2c2f04e2cb0
  $fEqHonorific_$c== ::
    GrammarType2.Honorific -> GrammarType2.Honorific -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarType2.Honorific ds1 :: GrammarType2.Honorific ->
                 case ds of wild {
                   GrammarType2.FAM
                   -> case ds1 of wild1 {
                        GrammarType2.FAM -> GHC.Types.True
                        GrammarType2.FORM -> GHC.Types.False }
                   GrammarType2.FORM
                   -> case ds1 of wild1 {
                        GrammarType2.FAM -> GHC.Types.False
                        GrammarType2.FORM -> GHC.Types.True } }) -}
fd2e4f6f534fd240b9cde0b8f8a520af
  $fEqManifest ::
    GHC.Classes.Eq a => GHC.Classes.Eq (GrammarType2.Manifest a)
  DFunId[0]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a22 $dEq :: GHC.Classes.Eq a22.
                  @ (GrammarType2.Manifest a22)
                  (GrammarType2.$fEqManifest_$c==1 @ a22 $dEq)
                  (GrammarType2.$fEqManifest_$c/= @ a22 $dEq) -}
fd2e4f6f534fd240b9cde0b8f8a520af
  $fEqManifest1 ::
    GrammarType2.Manifest GrammarType2.Number
    -> GrammarType2.Manifest GrammarType2.Number -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a22 :: GrammarType2.Manifest GrammarType2.Number
                   b :: GrammarType2.Manifest GrammarType2.Number ->
                 case a22 of wild {
                   GrammarType2.NoManifest
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        GrammarType2.NoManifest -> GHC.Types.False }
                   GrammarType2.Particle a23
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        GrammarType2.Particle b1
                        -> case a23 of wild2 {
                             GrammarType2.SG
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarType2.SG -> GHC.Types.False }
                             GrammarType2.DU
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarType2.DU -> GHC.Types.False }
                             GrammarType2.TRI
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarType2.TRI -> GHC.Types.False }
                             GrammarType2.PA
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarType2.PA -> GHC.Types.False }
                             GrammarType2.PL
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarType2.PL -> GHC.Types.False } } }
                   GrammarType2.Exponent a23
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        GrammarType2.Exponent b1
                        -> case a23 of wild2 {
                             GrammarType2.SG
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarType2.SG -> GHC.Types.False }
                             GrammarType2.DU
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarType2.DU -> GHC.Types.False }
                             GrammarType2.TRI
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarType2.TRI -> GHC.Types.False }
                             GrammarType2.PA
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True GrammarType2.PA -> GHC.Types.False }
                             GrammarType2.PL
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True
                                  GrammarType2.PL -> GHC.Types.False } } } }) -}
fd2e4f6f534fd240b9cde0b8f8a520af
  $fEqManifest_$c/= ::
    GHC.Classes.Eq a =>
    GrammarType2.Manifest a
    -> GrammarType2.Manifest a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a22
                   $dEq :: GHC.Classes.Eq a22
                   a23 :: GrammarType2.Manifest a22
                   b :: GrammarType2.Manifest a22 ->
                 case GrammarType2.$fEqManifest_$c==1 @ a22 $dEq a23 b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
dc554c15fa6745d82b7cf16c87b8dfc7
  $fEqManifest_$c== ::
    GrammarType2.Number -> GrammarType2.Number -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: GrammarType2.Number
                   ds1 :: GrammarType2.Number ->
                 case ds of wild {
                   GrammarType2.SG
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.SG -> GHC.Types.True }
                   GrammarType2.DU
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.DU -> GHC.Types.True }
                   GrammarType2.TRI
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.TRI -> GHC.Types.True }
                   GrammarType2.PA
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.PA -> GHC.Types.True }
                   GrammarType2.PL
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarType2.PL -> GHC.Types.True } }) -}
fd2e4f6f534fd240b9cde0b8f8a520af
  $fEqManifest_$c==1 ::
    GHC.Classes.Eq a =>
    GrammarType2.Manifest a
    -> GrammarType2.Manifest a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a22
                   $dEq :: GHC.Classes.Eq a22
                   ds :: GrammarType2.Manifest a22
                   ds1 :: GrammarType2.Manifest a22 ->
                 case ds of wild {
                   GrammarType2.NoManifest
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarType2.NoManifest -> GHC.Types.True }
                   GrammarType2.Particle a23
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarType2.Particle b1 -> GHC.Classes.== @ a22 $dEq a23 b1 }
                   GrammarType2.Exponent a23
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarType2.Exponent b1
                        -> GHC.Classes.== @ a22 $dEq a23 b1 } }) -}
fd2e4f6f534fd240b9cde0b8f8a520af
  $fEqManifest_$s$c== ::
    GrammarType2.Manifest GrammarType2.Number
    -> GrammarType2.Manifest GrammarType2.Number -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: GrammarType2.Manifest GrammarType2.Number
                   ds1 :: GrammarType2.Manifest GrammarType2.Number ->
                 case ds of wild {
                   GrammarType2.NoManifest
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarType2.NoManifest -> GHC.Types.True }
                   GrammarType2.Particle a22
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarType2.Particle b1 -> GrammarType2.$fEqManifest_$c== a22 b1 }
                   GrammarType2.Exponent a22
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarType2.Exponent b1
                        -> GrammarType2.$fEqManifest_$c== a22 b1 } }) -}
fd2e4f6f534fd240b9cde0b8f8a520af
  $fEqManifest_$s$fEqManifest ::
    GHC.Classes.Eq (GrammarType2.Manifest GrammarType2.Number)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GrammarType2.Manifest GrammarType2.Number)
                  GrammarType2.$fEqManifest_$s$c==
                  GrammarType2.$fEqManifest1 -}
b72254827f48011cc46d25b53a3dee43
  $fEqMood :: GHC.Classes.Eq GrammarType2.Mood
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Mood
                  GrammarType2.$fEqMood_$c==
                  GrammarType2.$fEqMood_$c/= -}
b72254827f48011cc46d25b53a3dee43
  $fEqMood_$c/= ::
    GrammarType2.Mood -> GrammarType2.Mood -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a22 :: GrammarType2.Mood b :: GrammarType2.Mood ->
                 case a22 of wild {
                   GrammarType2.IND
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.IND -> GHC.Types.False }
                   GrammarType2.IRR
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.IRR -> GHC.Types.False }
                   GrammarType2.DEO
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.DEO -> GHC.Types.False }
                   GrammarType2.IMP
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.IMP -> GHC.Types.False }
                   GrammarType2.JUS
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.JUS -> GHC.Types.False }
                   GrammarType2.OPT
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.OPT -> GHC.Types.False }
                   GrammarType2.EPIS
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.EPIS -> GHC.Types.False }
                   GrammarType2.SBJV
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.SBJV -> GHC.Types.False }
                   GrammarType2.POT
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.POT -> GHC.Types.False }
                   GrammarType2.COND
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        GrammarType2.COND -> GHC.Types.False } }) -}
b72254827f48011cc46d25b53a3dee43
  $fEqMood_$c== ::
    GrammarType2.Mood -> GrammarType2.Mood -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: GrammarType2.Mood ds1 :: GrammarType2.Mood ->
                 case ds of wild {
                   GrammarType2.IND
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.IND -> GHC.Types.True }
                   GrammarType2.IRR
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.IRR -> GHC.Types.True }
                   GrammarType2.DEO
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.DEO -> GHC.Types.True }
                   GrammarType2.IMP
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.IMP -> GHC.Types.True }
                   GrammarType2.JUS
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.JUS -> GHC.Types.True }
                   GrammarType2.OPT
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.OPT -> GHC.Types.True }
                   GrammarType2.EPIS
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.EPIS -> GHC.Types.True }
                   GrammarType2.SBJV
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.SBJV -> GHC.Types.True }
                   GrammarType2.POT
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.POT -> GHC.Types.True }
                   GrammarType2.COND
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarType2.COND -> GHC.Types.True } }) -}
dc554c15fa6745d82b7cf16c87b8dfc7
  $fEqNumber :: GHC.Classes.Eq GrammarType2.Number
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Number
                  GrammarType2.$fEqManifest_$c==
                  GrammarType2.$fEqNumber_$c/= -}
dc554c15fa6745d82b7cf16c87b8dfc7
  $fEqNumber_$c/= ::
    GrammarType2.Number -> GrammarType2.Number -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a22 :: GrammarType2.Number
                   b :: GrammarType2.Number ->
                 case a22 of wild {
                   GrammarType2.SG
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.SG -> GHC.Types.False }
                   GrammarType2.DU
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.DU -> GHC.Types.False }
                   GrammarType2.TRI
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.TRI -> GHC.Types.False }
                   GrammarType2.PA
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.PA -> GHC.Types.False }
                   GrammarType2.PL
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        GrammarType2.PL -> GHC.Types.False } }) -}
125a489a929ba59bfb3d55b4a92e21d5
  $fEqParticleSystem :: GHC.Classes.Eq GrammarType2.ParticleSystem
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.ParticleSystem
                  GrammarType2.$fEqParticleSystem_$c==
                  GrammarType2.$fEqParticleSystem_$c/= -}
125a489a929ba59bfb3d55b4a92e21d5
  $fEqParticleSystem_$c/= ::
    GrammarType2.ParticleSystem
    -> GrammarType2.ParticleSystem -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ a22 :: GrammarType2.ParticleSystem
                   b :: GrammarType2.ParticleSystem ->
                 case a22 of wild { GrammarType2.ParticleSystem a23 ->
                 case b of wild1 { GrammarType2.ParticleSystem b1 ->
                 case GHC.Classes.$fEq[]_$c==
                        @ (PhonemeType2.Morpheme,
                           (GrammarType2.Manifest GrammarType2.Gender,
                            GrammarType2.Manifest GrammarType2.Animacy,
                            GrammarType2.Manifest GrammarType2.Case,
                            GrammarType2.Manifest GrammarType2.Number,
                            GrammarType2.Manifest GrammarType2.Honorific,
                            GrammarType2.Manifest GrammarType2.Definiteness,
                            GrammarType2.Manifest GrammarType2.Specificity))
                        GrammarType2.$fEqExponentSystem_$s$fEq(,)
                        a23
                        b1 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
125a489a929ba59bfb3d55b4a92e21d5
  $fEqParticleSystem_$c== ::
    GrammarType2.ParticleSystem
    -> GrammarType2.ParticleSystem -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarType2.ParticleSystem
                   ds1 :: GrammarType2.ParticleSystem ->
                 case ds of wild { GrammarType2.ParticleSystem a22 ->
                 case ds1 of wild1 { GrammarType2.ParticleSystem b1 ->
                 GHC.Classes.$fEq[]_$c==
                   @ (PhonemeType2.Morpheme,
                      (GrammarType2.Manifest GrammarType2.Gender,
                       GrammarType2.Manifest GrammarType2.Animacy,
                       GrammarType2.Manifest GrammarType2.Case,
                       GrammarType2.Manifest GrammarType2.Number,
                       GrammarType2.Manifest GrammarType2.Honorific,
                       GrammarType2.Manifest GrammarType2.Definiteness,
                       GrammarType2.Manifest GrammarType2.Specificity))
                   GrammarType2.$fEqExponentSystem_$s$fEq(,)
                   a22
                   b1 } }) -}
e885d3ffc1f7745e767bf38433d6405b
  $fEqPerson :: GHC.Classes.Eq GrammarType2.Person
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Person
                  GrammarType2.$fEqPerson_$c==
                  GrammarType2.$fEqPerson_$c/= -}
e885d3ffc1f7745e767bf38433d6405b
  $fEqPerson_$c/= ::
    GrammarType2.Person -> GrammarType2.Person -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a22 :: GrammarType2.Person b :: GrammarType2.Person ->
                 case a22 of wild {
                   GrammarType2.FIRST
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.FIRST -> GHC.Types.False }
                   GrammarType2.SECOND
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.SECOND -> GHC.Types.False }
                   GrammarType2.THIRD
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        GrammarType2.THIRD -> GHC.Types.False } }) -}
e885d3ffc1f7745e767bf38433d6405b
  $fEqPerson_$c== ::
    GrammarType2.Person -> GrammarType2.Person -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarType2.Person ds1 :: GrammarType2.Person ->
                 case ds of wild {
                   GrammarType2.FIRST
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.FIRST -> GHC.Types.True }
                   GrammarType2.SECOND
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.SECOND -> GHC.Types.True }
                   GrammarType2.THIRD
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarType2.THIRD -> GHC.Types.True } }) -}
e950d26ec1212aa6dfda04b44113e591
  $fEqPolarity :: GHC.Classes.Eq GrammarType2.Polarity
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Polarity
                  GrammarType2.$fEqPolarity_$c==
                  GrammarType2.$fEqPolarity_$c/= -}
e950d26ec1212aa6dfda04b44113e591
  $fEqPolarity_$c/= ::
    GrammarType2.Polarity -> GrammarType2.Polarity -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a22 :: GrammarType2.Polarity b :: GrammarType2.Polarity ->
                 case a22 of wild {
                   GrammarType2.AFF
                   -> case b of wild1 {
                        GrammarType2.AFF -> GHC.Types.False
                        GrammarType2.NEG -> GHC.Types.True }
                   GrammarType2.NEG
                   -> case b of wild1 {
                        GrammarType2.AFF -> GHC.Types.True
                        GrammarType2.NEG -> GHC.Types.False } }) -}
e950d26ec1212aa6dfda04b44113e591
  $fEqPolarity_$c== ::
    GrammarType2.Polarity -> GrammarType2.Polarity -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarType2.Polarity ds1 :: GrammarType2.Polarity ->
                 case ds of wild {
                   GrammarType2.AFF
                   -> case ds1 of wild1 {
                        GrammarType2.AFF -> GHC.Types.True
                        GrammarType2.NEG -> GHC.Types.False }
                   GrammarType2.NEG
                   -> case ds1 of wild1 {
                        GrammarType2.AFF -> GHC.Types.False
                        GrammarType2.NEG -> GHC.Types.True } }) -}
6417e4f225623173ad75902202935d29
  $fEqSpecificity :: GHC.Classes.Eq GrammarType2.Specificity
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Specificity
                  GrammarType2.$fEqExponentSystem_$c==
                  GrammarType2.$fEqSpecificity_$c/= -}
6417e4f225623173ad75902202935d29
  $fEqSpecificity_$c/= ::
    GrammarType2.Specificity
    -> GrammarType2.Specificity -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a22 :: GrammarType2.Specificity b :: GrammarType2.Specificity ->
                 case a22 of wild {
                   GrammarType2.SPEC
                   -> case b of wild1 {
                        GrammarType2.SPEC -> GHC.Types.False
                        GrammarType2.NSPEC -> GHC.Types.True }
                   GrammarType2.NSPEC
                   -> case b of wild1 {
                        GrammarType2.SPEC -> GHC.Types.True
                        GrammarType2.NSPEC -> GHC.Types.False } }) -}
4ff954811d952a50e05d52d81f3a558f
  $fEqTense :: GHC.Classes.Eq GrammarType2.Tense
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Tense
                  GrammarType2.$fEqTense_$c==
                  GrammarType2.$fEqTense_$c/= -}
4ff954811d952a50e05d52d81f3a558f
  $fEqTense_$c/= ::
    GrammarType2.Tense -> GrammarType2.Tense -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a22 :: GrammarType2.Tense b :: GrammarType2.Tense ->
                 case a22 of wild {
                   GrammarType2.PST
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.PST -> GHC.Types.False }
                   GrammarType2.REM
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.REM -> GHC.Types.False }
                   GrammarType2.REC
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.REC -> GHC.Types.False }
                   GrammarType2.NPST
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.NPST -> GHC.Types.False }
                   GrammarType2.PRS
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.PRS -> GHC.Types.False }
                   GrammarType2.NFUT
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.NFUT -> GHC.Types.False }
                   GrammarType2.FUT
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.FUT -> GHC.Types.False }
                   GrammarType2.IMMF
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.IMMF -> GHC.Types.False }
                   GrammarType2.REMF
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        GrammarType2.REMF -> GHC.Types.False } }) -}
4ff954811d952a50e05d52d81f3a558f
  $fEqTense_$c== ::
    GrammarType2.Tense -> GrammarType2.Tense -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: GrammarType2.Tense ds1 :: GrammarType2.Tense ->
                 case ds of wild {
                   GrammarType2.PST
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.PST -> GHC.Types.True }
                   GrammarType2.REM
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.REM -> GHC.Types.True }
                   GrammarType2.REC
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.REC -> GHC.Types.True }
                   GrammarType2.NPST
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.NPST -> GHC.Types.True }
                   GrammarType2.PRS
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.PRS -> GHC.Types.True }
                   GrammarType2.NFUT
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.NFUT -> GHC.Types.True }
                   GrammarType2.FUT
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.FUT -> GHC.Types.True }
                   GrammarType2.IMMF
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.IMMF -> GHC.Types.True }
                   GrammarType2.REMF
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarType2.REMF -> GHC.Types.True } }) -}
1c835916f9c6590c31a144e0d776533f
  $fEqTransitivity :: GHC.Classes.Eq GrammarType2.Transitivity
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Transitivity
                  GrammarType2.$fEqTransitivity_$c==
                  GrammarType2.$fEqTransitivity_$c/= -}
1c835916f9c6590c31a144e0d776533f
  $fEqTransitivity_$c/= ::
    GrammarType2.Transitivity
    -> GrammarType2.Transitivity -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a22 :: GrammarType2.Transitivity
                   b :: GrammarType2.Transitivity ->
                 case a22 of wild {
                   GrammarType2.INTR
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.INTR -> GHC.Types.False }
                   GrammarType2.TR
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.TR -> GHC.Types.False }
                   GrammarType2.DITR
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        GrammarType2.DITR -> GHC.Types.False } }) -}
1c835916f9c6590c31a144e0d776533f
  $fEqTransitivity_$c== ::
    GrammarType2.Transitivity
    -> GrammarType2.Transitivity -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarType2.Transitivity
                   ds1 :: GrammarType2.Transitivity ->
                 case ds of wild {
                   GrammarType2.INTR
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.INTR -> GHC.Types.True }
                   GrammarType2.TR
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.TR -> GHC.Types.True }
                   GrammarType2.DITR
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarType2.DITR -> GHC.Types.True } }) -}
8b275556c515642f0f8313dbcecf6b7b
  $fEqVoice :: GHC.Classes.Eq GrammarType2.Voice
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Voice
                  GrammarType2.$fEqVoice_$c==
                  GrammarType2.$fEqVoice_$c/= -}
8b275556c515642f0f8313dbcecf6b7b
  $fEqVoice_$c/= ::
    GrammarType2.Voice -> GrammarType2.Voice -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a22 :: GrammarType2.Voice b :: GrammarType2.Voice ->
                 case a22 of wild {
                   GrammarType2.ACT
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.ACT -> GHC.Types.False }
                   GrammarType2.MID
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.MID -> GHC.Types.False }
                   GrammarType2.PAS
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        GrammarType2.PAS -> GHC.Types.False } }) -}
8b275556c515642f0f8313dbcecf6b7b
  $fEqVoice_$c== ::
    GrammarType2.Voice -> GrammarType2.Voice -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarType2.Voice ds1 :: GrammarType2.Voice ->
                 case ds of wild {
                   GrammarType2.ACT
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.ACT -> GHC.Types.True }
                   GrammarType2.MID
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.MID -> GHC.Types.True }
                   GrammarType2.PAS
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarType2.PAS -> GHC.Types.True } }) -}
ae1ee59187d5466e323897f7a019b5b8
  $fEqVolition :: GHC.Classes.Eq GrammarType2.Volition
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Volition
                  GrammarType2.$fEqVolition_$c==
                  GrammarType2.$fEqVolition_$c/= -}
ae1ee59187d5466e323897f7a019b5b8
  $fEqVolition_$c/= ::
    GrammarType2.Volition -> GrammarType2.Volition -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a22 :: GrammarType2.Volition b :: GrammarType2.Volition ->
                 case a22 of wild {
                   GrammarType2.VOL
                   -> case b of wild1 {
                        GrammarType2.VOL -> GHC.Types.False
                        GrammarType2.NVOL -> GHC.Types.True }
                   GrammarType2.NVOL
                   -> case b of wild1 {
                        GrammarType2.VOL -> GHC.Types.True
                        GrammarType2.NVOL -> GHC.Types.False } }) -}
ae1ee59187d5466e323897f7a019b5b8
  $fEqVolition_$c== ::
    GrammarType2.Volition -> GrammarType2.Volition -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarType2.Volition ds1 :: GrammarType2.Volition ->
                 case ds of wild {
                   GrammarType2.VOL
                   -> case ds1 of wild1 {
                        GrammarType2.VOL -> GHC.Types.True
                        GrammarType2.NVOL -> GHC.Types.False }
                   GrammarType2.NVOL
                   -> case ds1 of wild1 {
                        GrammarType2.VOL -> GHC.Types.False
                        GrammarType2.NVOL -> GHC.Types.True } }) -}
08fe611e10b39cec598d03993fbc490b
  $fReadAnimacy :: GHC.Read.Read GrammarType2.Animacy
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Animacy
                  GrammarType2.$fReadAnimacy_$s$dmreadsPrec
                  GrammarType2.$fReadAnimacy_$sreadListDefault
                  GrammarType2.$fReadAnimacy_$creadPrec
                  GrammarType2.$fReadAnimacy_$creadListPrec -}
08fe611e10b39cec598d03993fbc490b
  $fReadAnimacy1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarType2.Animacy] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarType2.Animacy]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarType2.Animacy
                   GrammarType2.$fReadAnimacy2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarType2.Animacy>_R))
                   @ b
                   eta1) -}
08fe611e10b39cec598d03993fbc490b
  $fReadAnimacy10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Animacy -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Animacy -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.INAN) -}
33f10f87c8cca6b77bbe7ced86fc94ff
  $fReadAnimacy11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "INAN"#) -}
08fe611e10b39cec598d03993fbc490b
  $fReadAnimacy12 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Animacy)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadAnimacy14,
                  GrammarType2.$fReadAnimacy13
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Animacy>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Animacy>_R))))) -}
08fe611e10b39cec598d03993fbc490b
  $fReadAnimacy13 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Animacy -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Animacy -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.ZO) -}
fab5db2d4d70ad124db43f3065f53835
  $fReadAnimacy14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ZO"#) -}
08fe611e10b39cec598d03993fbc490b
  $fReadAnimacy15 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Animacy)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadAnimacy17,
                  GrammarType2.$fReadAnimacy16
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Animacy>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Animacy>_R))))) -}
08fe611e10b39cec598d03993fbc490b
  $fReadAnimacy16 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Animacy -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Animacy -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.NHUM) -}
553c44f214916034f08b8d4b918c8979
  $fReadAnimacy17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NHUM"#) -}
08fe611e10b39cec598d03993fbc490b
  $fReadAnimacy18 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Animacy)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadAnimacy20,
                  GrammarType2.$fReadAnimacy19
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Animacy>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Animacy>_R))))) -}
08fe611e10b39cec598d03993fbc490b
  $fReadAnimacy19 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Animacy -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Animacy -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.HUM) -}
08fe611e10b39cec598d03993fbc490b
  $fReadAnimacy2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarType2.Animacy
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarType2.Animacy
                   GrammarType2.$fReadAnimacy3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarType2.Animacy>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarType2.Animacy>_R)))) -}
3a10aa45553bf08d355e95478b26df12
  $fReadAnimacy20 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "HUM"#) -}
08fe611e10b39cec598d03993fbc490b
  $fReadAnimacy21 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Animacy)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadAnimacy23,
                  GrammarType2.$fReadAnimacy22
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Animacy>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Animacy>_R))))) -}
08fe611e10b39cec598d03993fbc490b
  $fReadAnimacy22 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Animacy -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Animacy -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.AN) -}
ae92adb1a38939a276c56ce9fcdcc512
  $fReadAnimacy23 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AN"#) -}
08fe611e10b39cec598d03993fbc490b
  $fReadAnimacy3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Animacy -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarType2.Animacy -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarType2.Animacy
                   GrammarType2.$fReadAnimacy4
                   eta
                   @ b
                   eta1) -}
08fe611e10b39cec598d03993fbc490b
  $fReadAnimacy4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Animacy)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Animacy)
                   GrammarType2.$fReadAnimacy21
                   GrammarType2.$fReadAnimacy5) -}
08fe611e10b39cec598d03993fbc490b
  $fReadAnimacy5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Animacy)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Animacy)
                   GrammarType2.$fReadAnimacy18
                   GrammarType2.$fReadAnimacy6) -}
08fe611e10b39cec598d03993fbc490b
  $fReadAnimacy6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Animacy)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Animacy)
                   GrammarType2.$fReadAnimacy15
                   GrammarType2.$fReadAnimacy7) -}
08fe611e10b39cec598d03993fbc490b
  $fReadAnimacy7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Animacy)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Animacy)
                   GrammarType2.$fReadAnimacy12
                   GrammarType2.$fReadAnimacy8) -}
08fe611e10b39cec598d03993fbc490b
  $fReadAnimacy8 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Animacy)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Animacy)
                   GrammarType2.$fReadAnimacy9
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Animacy))) -}
08fe611e10b39cec598d03993fbc490b
  $fReadAnimacy9 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Animacy)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadAnimacy11,
                  GrammarType2.$fReadAnimacy10
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Animacy>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Animacy>_R))))) -}
08fe611e10b39cec598d03993fbc490b
  $fReadAnimacy_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [GrammarType2.Animacy]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadAnimacy1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarType2.Animacy]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarType2.Animacy]>_R))) -}
08fe611e10b39cec598d03993fbc490b
  $fReadAnimacy_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Animacy
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadAnimacy2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarType2.Animacy>_R)) -}
08fe611e10b39cec598d03993fbc490b
  $fReadAnimacy_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarType2.Animacy
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarType2.Animacy
                   GrammarType2.$fReadAnimacy_$creadPrec
                   eta) -}
08fe611e10b39cec598d03993fbc490b
  $fReadAnimacy_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarType2.Animacy]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarType2.Animacy]
                   ((GrammarType2.$fReadAnimacy_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarType2.Animacy]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarType2.Animacy]>_R)
                      @ [GrammarType2.Animacy]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarType2.Animacy]))) -}
56c069b86a972ddd52b64b5a722f7b12
  $fReadAspect :: GHC.Read.Read GrammarType2.Aspect
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Aspect
                  GrammarType2.$fReadAspect_$s$dmreadsPrec
                  GrammarType2.$fReadAspect_$sreadListDefault
                  GrammarType2.$fReadAspect_$creadPrec
                  GrammarType2.$fReadAspect_$creadListPrec -}
56c069b86a972ddd52b64b5a722f7b12
  $fReadAspect1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarType2.Aspect] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarType2.Aspect]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarType2.Aspect
                   GrammarType2.$fReadAspect2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarType2.Aspect>_R))
                   @ b
                   eta1) -}
56c069b86a972ddd52b64b5a722f7b12
  $fReadAspect10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Aspect -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Aspect -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.PFV) -}
13a968507d5f0e075e5775f47559c439
  $fReadAspect11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PFV"#) -}
56c069b86a972ddd52b64b5a722f7b12
  $fReadAspect2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarType2.Aspect
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarType2.Aspect
                   GrammarType2.$fReadAspect3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarType2.Aspect>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarType2.Aspect>_R)))) -}
56c069b86a972ddd52b64b5a722f7b12
  $fReadAspect3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Aspect -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarType2.Aspect -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarType2.Aspect
                   GrammarType2.$fReadAspect4
                   eta
                   @ b
                   eta1) -}
56c069b86a972ddd52b64b5a722f7b12
  $fReadAspect4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Aspect)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Aspect)
                   GrammarType2.$fReadAspect9
                   GrammarType2.$fReadAspect5) -}
56c069b86a972ddd52b64b5a722f7b12
  $fReadAspect5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Aspect)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Aspect)
                   GrammarType2.$fReadAspect6
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Aspect))) -}
56c069b86a972ddd52b64b5a722f7b12
  $fReadAspect6 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Aspect)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadAspect8,
                  GrammarType2.$fReadAspect7
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Aspect>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Aspect>_R))))) -}
56c069b86a972ddd52b64b5a722f7b12
  $fReadAspect7 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Aspect -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Aspect -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.IPFV) -}
aa4fe093ca9d92c5b3a32dd7f0e96037
  $fReadAspect8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "IPFV"#) -}
56c069b86a972ddd52b64b5a722f7b12
  $fReadAspect9 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Aspect)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadAspect11,
                  GrammarType2.$fReadAspect10
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Aspect>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Aspect>_R))))) -}
56c069b86a972ddd52b64b5a722f7b12
  $fReadAspect_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [GrammarType2.Aspect]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadAspect1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarType2.Aspect]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarType2.Aspect]>_R))) -}
56c069b86a972ddd52b64b5a722f7b12
  $fReadAspect_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Aspect
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadAspect2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarType2.Aspect>_R)) -}
56c069b86a972ddd52b64b5a722f7b12
  $fReadAspect_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarType2.Aspect
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarType2.Aspect
                   GrammarType2.$fReadAspect_$creadPrec
                   eta) -}
56c069b86a972ddd52b64b5a722f7b12
  $fReadAspect_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarType2.Aspect]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarType2.Aspect]
                   ((GrammarType2.$fReadAspect_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarType2.Aspect]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarType2.Aspect]>_R)
                      @ [GrammarType2.Aspect]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarType2.Aspect]))) -}
fcaa4072d88a1238ff7d9377b198162c
  $fReadCase :: GHC.Read.Read GrammarType2.Case
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Case
                  GrammarType2.$fReadCase_$s$dmreadsPrec
                  GrammarType2.$fReadCase_$sreadListDefault
                  GrammarType2.$fReadCase_$creadPrec
                  GrammarType2.$fReadCase_$creadListPrec -}
fcaa4072d88a1238ff7d9377b198162c
  $fReadCase1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarType2.Case] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarType2.Case] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarType2.Case
                   GrammarType2.$fReadCase2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarType2.Case>_R))
                   @ b
                   eta1) -}
fcaa4072d88a1238ff7d9377b198162c
  $fReadCase10 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Case)
                   GrammarType2.$fReadCase23
                   GrammarType2.$fReadCase11) -}
fcaa4072d88a1238ff7d9377b198162c
  $fReadCase11 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Case)
                   GrammarType2.$fReadCase20
                   GrammarType2.$fReadCase12) -}
fcaa4072d88a1238ff7d9377b198162c
  $fReadCase12 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Case)
                   GrammarType2.$fReadCase17
                   GrammarType2.$fReadCase13) -}
fcaa4072d88a1238ff7d9377b198162c
  $fReadCase13 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Case)
                   GrammarType2.$fReadCase14
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Case))) -}
fcaa4072d88a1238ff7d9377b198162c
  $fReadCase14 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Case)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadCase16,
                  GrammarType2.$fReadCase15
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Case>_R))))) -}
fcaa4072d88a1238ff7d9377b198162c
  $fReadCase15 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.VOC) -}
50f9a0773d14fbf9cd093e82bbfcd470
  $fReadCase16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "VOC"#) -}
fcaa4072d88a1238ff7d9377b198162c
  $fReadCase17 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Case)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadCase19,
                  GrammarType2.$fReadCase18
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Case>_R))))) -}
fcaa4072d88a1238ff7d9377b198162c
  $fReadCase18 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.INS) -}
7809b287e1d9578f7c747d49825b5594
  $fReadCase19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "INS"#) -}
fcaa4072d88a1238ff7d9377b198162c
  $fReadCase2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarType2.Case
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarType2.Case
                   GrammarType2.$fReadCase3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarType2.Case>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarType2.Case>_R)))) -}
fcaa4072d88a1238ff7d9377b198162c
  $fReadCase20 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Case)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadCase22,
                  GrammarType2.$fReadCase21
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Case>_R))))) -}
fcaa4072d88a1238ff7d9377b198162c
  $fReadCase21 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.ABL) -}
c766ca7e1dfb1dbc86a4c5613f212329
  $fReadCase22 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ABL"#) -}
fcaa4072d88a1238ff7d9377b198162c
  $fReadCase23 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Case)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadCase25,
                  GrammarType2.$fReadCase24
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Case>_R))))) -}
fcaa4072d88a1238ff7d9377b198162c
  $fReadCase24 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.PREP) -}
964275917f7f5e682db4fdf8f850b44e
  $fReadCase25 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PREP"#) -}
fcaa4072d88a1238ff7d9377b198162c
  $fReadCase26 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Case)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadCase28,
                  GrammarType2.$fReadCase27
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Case>_R))))) -}
fcaa4072d88a1238ff7d9377b198162c
  $fReadCase27 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.LOC) -}
bc396b4324fa5caca7919c466480ae20
  $fReadCase28 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "LOC"#) -}
fcaa4072d88a1238ff7d9377b198162c
  $fReadCase29 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Case)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadCase31,
                  GrammarType2.$fReadCase30
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Case>_R))))) -}
fcaa4072d88a1238ff7d9377b198162c
  $fReadCase3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarType2.Case -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarType2.Case
                   GrammarType2.$fReadCase4
                   eta
                   @ b
                   eta1) -}
fcaa4072d88a1238ff7d9377b198162c
  $fReadCase30 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.DAT) -}
9bcf7578ea3e443eb1c1f162d0da8fae
  $fReadCase31 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DAT"#) -}
fcaa4072d88a1238ff7d9377b198162c
  $fReadCase32 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Case)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadCase34,
                  GrammarType2.$fReadCase33
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Case>_R))))) -}
fcaa4072d88a1238ff7d9377b198162c
  $fReadCase33 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.GEN) -}
230251de4952b79ef891459d2ef55030
  $fReadCase34 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "GEN"#) -}
fcaa4072d88a1238ff7d9377b198162c
  $fReadCase35 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Case)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadCase37,
                  GrammarType2.$fReadCase36
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Case>_R))))) -}
fcaa4072d88a1238ff7d9377b198162c
  $fReadCase36 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.ERG) -}
b9d511a8f4432f6dafae9adc03730042
  $fReadCase37 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ERG"#) -}
fcaa4072d88a1238ff7d9377b198162c
  $fReadCase38 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Case)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadCase40,
                  GrammarType2.$fReadCase39
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Case>_R))))) -}
fcaa4072d88a1238ff7d9377b198162c
  $fReadCase39 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.ACC) -}
fcaa4072d88a1238ff7d9377b198162c
  $fReadCase4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Case)
                   GrammarType2.$fReadCase41
                   GrammarType2.$fReadCase5) -}
b12124ad2434454139be7e8cd1f78f70
  $fReadCase40 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ACC"#) -}
fcaa4072d88a1238ff7d9377b198162c
  $fReadCase41 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Case)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadCase43,
                  GrammarType2.$fReadCase42
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Case>_R))))) -}
fcaa4072d88a1238ff7d9377b198162c
  $fReadCase42 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.NOM) -}
8e723ceb31765644a10d03629b2f7d5e
  $fReadCase43 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NOM"#) -}
fcaa4072d88a1238ff7d9377b198162c
  $fReadCase5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Case)
                   GrammarType2.$fReadCase38
                   GrammarType2.$fReadCase6) -}
fcaa4072d88a1238ff7d9377b198162c
  $fReadCase6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Case)
                   GrammarType2.$fReadCase35
                   GrammarType2.$fReadCase7) -}
fcaa4072d88a1238ff7d9377b198162c
  $fReadCase7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Case)
                   GrammarType2.$fReadCase32
                   GrammarType2.$fReadCase8) -}
fcaa4072d88a1238ff7d9377b198162c
  $fReadCase8 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Case)
                   GrammarType2.$fReadCase29
                   GrammarType2.$fReadCase9) -}
fcaa4072d88a1238ff7d9377b198162c
  $fReadCase9 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Case)
                   GrammarType2.$fReadCase26
                   GrammarType2.$fReadCase10) -}
fcaa4072d88a1238ff7d9377b198162c
  $fReadCase_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [GrammarType2.Case]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadCase1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarType2.Case]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarType2.Case]>_R))) -}
fcaa4072d88a1238ff7d9377b198162c
  $fReadCase_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Case
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadCase2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarType2.Case>_R)) -}
fcaa4072d88a1238ff7d9377b198162c
  $fReadCase_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarType2.Case
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarType2.Case
                   GrammarType2.$fReadCase_$creadPrec
                   eta) -}
fcaa4072d88a1238ff7d9377b198162c
  $fReadCase_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarType2.Case]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarType2.Case]
                   ((GrammarType2.$fReadCase_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarType2.Case]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarType2.Case]>_R)
                      @ [GrammarType2.Case]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarType2.Case]))) -}
ae15ce513899bbb81e1bdfe89e424f26
  $fReadDefiniteness :: GHC.Read.Read GrammarType2.Definiteness
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Definiteness
                  GrammarType2.$fReadDefiniteness_$s$dmreadsPrec
                  GrammarType2.$fReadDefiniteness_$sreadListDefault
                  GrammarType2.$fReadDefiniteness_$creadPrec
                  GrammarType2.$fReadDefiniteness_$creadListPrec -}
ae15ce513899bbb81e1bdfe89e424f26
  $fReadDefiniteness1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarType2.Definiteness] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarType2.Definiteness]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarType2.Definiteness
                   GrammarType2.$fReadDefiniteness2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarType2.Definiteness>_R))
                   @ b
                   eta1) -}
ae15ce513899bbb81e1bdfe89e424f26
  $fReadDefiniteness10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Definiteness -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Definiteness
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.DEF) -}
24b55da87cef159e003daf6801bb1ca1
  $fReadDefiniteness11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DEF"#) -}
ae15ce513899bbb81e1bdfe89e424f26
  $fReadDefiniteness2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarType2.Definiteness
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarType2.Definiteness
                   GrammarType2.$fReadDefiniteness3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarType2.Definiteness>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarType2.Definiteness>_R)))) -}
ae15ce513899bbb81e1bdfe89e424f26
  $fReadDefiniteness3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Definiteness -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarType2.Definiteness
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarType2.Definiteness
                   GrammarType2.$fReadDefiniteness4
                   eta
                   @ b
                   eta1) -}
ae15ce513899bbb81e1bdfe89e424f26
  $fReadDefiniteness4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GrammarType2.Definiteness)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Definiteness)
                   GrammarType2.$fReadDefiniteness9
                   GrammarType2.$fReadDefiniteness5) -}
ae15ce513899bbb81e1bdfe89e424f26
  $fReadDefiniteness5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GrammarType2.Definiteness)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Definiteness)
                   GrammarType2.$fReadDefiniteness6
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           GrammarType2.Definiteness))) -}
ae15ce513899bbb81e1bdfe89e424f26
  $fReadDefiniteness6 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Definiteness)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadDefiniteness8,
                  GrammarType2.$fReadDefiniteness7
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Definiteness>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Definiteness>_R))))) -}
ae15ce513899bbb81e1bdfe89e424f26
  $fReadDefiniteness7 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Definiteness -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Definiteness
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.INDF) -}
9f3a47ea601ef58daa87fb1ed277ead3
  $fReadDefiniteness8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "INDF"#) -}
ae15ce513899bbb81e1bdfe89e424f26
  $fReadDefiniteness9 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Definiteness)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadDefiniteness11,
                  GrammarType2.$fReadDefiniteness10
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Definiteness>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Definiteness>_R))))) -}
ae15ce513899bbb81e1bdfe89e424f26
  $fReadDefiniteness_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [GrammarType2.Definiteness]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadDefiniteness1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarType2.Definiteness]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarType2.Definiteness]>_R))) -}
ae15ce513899bbb81e1bdfe89e424f26
  $fReadDefiniteness_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Definiteness
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadDefiniteness2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarType2.Definiteness>_R)) -}
ae15ce513899bbb81e1bdfe89e424f26
  $fReadDefiniteness_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarType2.Definiteness
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarType2.Definiteness
                   GrammarType2.$fReadDefiniteness_$creadPrec
                   eta) -}
ae15ce513899bbb81e1bdfe89e424f26
  $fReadDefiniteness_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarType2.Definiteness]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarType2.Definiteness]
                   ((GrammarType2.$fReadDefiniteness_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarType2.Definiteness]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarType2.Definiteness]>_R)
                      @ [GrammarType2.Definiteness]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarType2.Definiteness]))) -}
757b853fc306b345be9181f15f1f4033
  $fReadEvidentiality :: GHC.Read.Read GrammarType2.Evidentiality
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Evidentiality
                  GrammarType2.$fReadEvidentiality_$s$dmreadsPrec
                  GrammarType2.$fReadEvidentiality_$sreadListDefault
                  GrammarType2.$fReadEvidentiality_$creadPrec
                  GrammarType2.$fReadEvidentiality_$creadListPrec -}
757b853fc306b345be9181f15f1f4033
  $fReadEvidentiality1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarType2.Evidentiality] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarType2.Evidentiality]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarType2.Evidentiality
                   GrammarType2.$fReadEvidentiality2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarType2.Evidentiality>_R))
                   @ b
                   eta1) -}
757b853fc306b345be9181f15f1f4033
  $fReadEvidentiality10 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GrammarType2.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GrammarType2.Evidentiality)
                   GrammarType2.$fReadEvidentiality23
                   GrammarType2.$fReadEvidentiality11) -}
757b853fc306b345be9181f15f1f4033
  $fReadEvidentiality11 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GrammarType2.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GrammarType2.Evidentiality)
                   GrammarType2.$fReadEvidentiality20
                   GrammarType2.$fReadEvidentiality12) -}
757b853fc306b345be9181f15f1f4033
  $fReadEvidentiality12 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GrammarType2.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GrammarType2.Evidentiality)
                   GrammarType2.$fReadEvidentiality17
                   GrammarType2.$fReadEvidentiality13) -}
757b853fc306b345be9181f15f1f4033
  $fReadEvidentiality13 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GrammarType2.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GrammarType2.Evidentiality)
                   GrammarType2.$fReadEvidentiality14
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           GrammarType2.Evidentiality))) -}
757b853fc306b345be9181f15f1f4033
  $fReadEvidentiality14 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GrammarType2.Evidentiality)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadEvidentiality16,
                  GrammarType2.$fReadEvidentiality15
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Evidentiality>_R))))) -}
757b853fc306b345be9181f15f1f4033
  $fReadEvidentiality15 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Evidentiality
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.ASS) -}
32252c1fb64dce48ea4ece79b63b1424
  $fReadEvidentiality16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ASS"#) -}
757b853fc306b345be9181f15f1f4033
  $fReadEvidentiality17 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GrammarType2.Evidentiality)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadEvidentiality19,
                  GrammarType2.$fReadEvidentiality18
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Evidentiality>_R))))) -}
757b853fc306b345be9181f15f1f4033
  $fReadEvidentiality18 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Evidentiality
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.QUO) -}
a9f89f6d6ff83c8dae50241d6325a1b4
  $fReadEvidentiality19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "QUO"#) -}
757b853fc306b345be9181f15f1f4033
  $fReadEvidentiality2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarType2.Evidentiality
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarType2.Evidentiality
                   GrammarType2.$fReadEvidentiality3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarType2.Evidentiality>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarType2.Evidentiality>_R)))) -}
757b853fc306b345be9181f15f1f4033
  $fReadEvidentiality20 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GrammarType2.Evidentiality)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadEvidentiality22,
                  GrammarType2.$fReadEvidentiality21
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Evidentiality>_R))))) -}
757b853fc306b345be9181f15f1f4033
  $fReadEvidentiality21 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Evidentiality
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.HSY) -}
a78f5c0333ea9a245b3f19ea0641ce57
  $fReadEvidentiality22 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "HSY"#) -}
757b853fc306b345be9181f15f1f4033
  $fReadEvidentiality23 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GrammarType2.Evidentiality)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadEvidentiality25,
                  GrammarType2.$fReadEvidentiality24
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Evidentiality>_R))))) -}
757b853fc306b345be9181f15f1f4033
  $fReadEvidentiality24 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Evidentiality
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.REP) -}
548735350a9fca031e270ae7b8e41005
  $fReadEvidentiality25 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "REP"#) -}
757b853fc306b345be9181f15f1f4033
  $fReadEvidentiality26 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GrammarType2.Evidentiality)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadEvidentiality28,
                  GrammarType2.$fReadEvidentiality27
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Evidentiality>_R))))) -}
757b853fc306b345be9181f15f1f4033
  $fReadEvidentiality27 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Evidentiality
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.INFER) -}
bf006e95b5cf522f30d94df471d7db12
  $fReadEvidentiality28 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "INFER"#) -}
757b853fc306b345be9181f15f1f4033
  $fReadEvidentiality29 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GrammarType2.Evidentiality)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadEvidentiality31,
                  GrammarType2.$fReadEvidentiality30
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Evidentiality>_R))))) -}
757b853fc306b345be9181f15f1f4033
  $fReadEvidentiality3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarType2.Evidentiality
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarType2.Evidentiality
                   GrammarType2.$fReadEvidentiality4
                   eta
                   @ b
                   eta1) -}
757b853fc306b345be9181f15f1f4033
  $fReadEvidentiality30 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Evidentiality
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.AUD) -}
d8014c0479f17423fea087ffe37e1524
  $fReadEvidentiality31 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AUD"#) -}
757b853fc306b345be9181f15f1f4033
  $fReadEvidentiality32 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GrammarType2.Evidentiality)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadEvidentiality34,
                  GrammarType2.$fReadEvidentiality33
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Evidentiality>_R))))) -}
757b853fc306b345be9181f15f1f4033
  $fReadEvidentiality33 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Evidentiality
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.NVIS) -}
9cdd390e381a77824c9c64a4c44d2277
  $fReadEvidentiality34 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NVIS"#) -}
757b853fc306b345be9181f15f1f4033
  $fReadEvidentiality35 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GrammarType2.Evidentiality)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadEvidentiality37,
                  GrammarType2.$fReadEvidentiality36
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Evidentiality>_R))))) -}
757b853fc306b345be9181f15f1f4033
  $fReadEvidentiality36 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Evidentiality
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.VIS) -}
649cfdde87563bb84a4cdc270d222726
  $fReadEvidentiality37 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "VIS"#) -}
757b853fc306b345be9181f15f1f4033
  $fReadEvidentiality38 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GrammarType2.Evidentiality)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadEvidentiality40,
                  GrammarType2.$fReadEvidentiality39
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Evidentiality>_R))))) -}
757b853fc306b345be9181f15f1f4033
  $fReadEvidentiality39 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Evidentiality
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.SENS) -}
757b853fc306b345be9181f15f1f4033
  $fReadEvidentiality4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GrammarType2.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GrammarType2.Evidentiality)
                   GrammarType2.$fReadEvidentiality41
                   GrammarType2.$fReadEvidentiality5) -}
413625d248c14cb60a41000f13c0dfff
  $fReadEvidentiality40 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SENS"#) -}
757b853fc306b345be9181f15f1f4033
  $fReadEvidentiality41 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GrammarType2.Evidentiality)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadEvidentiality43,
                  GrammarType2.$fReadEvidentiality42
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Evidentiality>_R))))) -}
757b853fc306b345be9181f15f1f4033
  $fReadEvidentiality42 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Evidentiality
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.EXP) -}
2ef7530012bd7c50ed031279cc4c8ae8
  $fReadEvidentiality43 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "EXP"#) -}
757b853fc306b345be9181f15f1f4033
  $fReadEvidentiality5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GrammarType2.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GrammarType2.Evidentiality)
                   GrammarType2.$fReadEvidentiality38
                   GrammarType2.$fReadEvidentiality6) -}
757b853fc306b345be9181f15f1f4033
  $fReadEvidentiality6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GrammarType2.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GrammarType2.Evidentiality)
                   GrammarType2.$fReadEvidentiality35
                   GrammarType2.$fReadEvidentiality7) -}
757b853fc306b345be9181f15f1f4033
  $fReadEvidentiality7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GrammarType2.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GrammarType2.Evidentiality)
                   GrammarType2.$fReadEvidentiality32
                   GrammarType2.$fReadEvidentiality8) -}
757b853fc306b345be9181f15f1f4033
  $fReadEvidentiality8 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GrammarType2.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GrammarType2.Evidentiality)
                   GrammarType2.$fReadEvidentiality29
                   GrammarType2.$fReadEvidentiality9) -}
757b853fc306b345be9181f15f1f4033
  $fReadEvidentiality9 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GrammarType2.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GrammarType2.Evidentiality)
                   GrammarType2.$fReadEvidentiality26
                   GrammarType2.$fReadEvidentiality10) -}
757b853fc306b345be9181f15f1f4033
  $fReadEvidentiality_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [GrammarType2.Evidentiality]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadEvidentiality1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarType2.Evidentiality]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarType2.Evidentiality]>_R))) -}
757b853fc306b345be9181f15f1f4033
  $fReadEvidentiality_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Evidentiality
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadEvidentiality2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarType2.Evidentiality>_R)) -}
757b853fc306b345be9181f15f1f4033
  $fReadEvidentiality_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarType2.Evidentiality
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarType2.Evidentiality
                   GrammarType2.$fReadEvidentiality_$creadPrec
                   eta) -}
757b853fc306b345be9181f15f1f4033
  $fReadEvidentiality_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarType2.Evidentiality]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarType2.Evidentiality]
                   ((GrammarType2.$fReadEvidentiality_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarType2.Evidentiality]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarType2.Evidentiality]>_R)
                      @ [GrammarType2.Evidentiality]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarType2.Evidentiality]))) -}
8458b2ed20531adbd7e1f0415074af95
  $fReadExponentSystem :: GHC.Read.Read GrammarType2.ExponentSystem
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.ExponentSystem
                  GrammarType2.$fReadExponentSystem_$creadsPrec
                  GrammarType2.$fReadExponentSystem_$sreadListDefault
                  GrammarType2.$fReadExponentSystem_$creadPrec
                  GrammarType2.$fReadExponentSystem_$creadListPrec -}
8458b2ed20531adbd7e1f0415074af95
  $fReadExponentSystem1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarType2.ExponentSystem] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarType2.ExponentSystem]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarType2.ExponentSystem
                   GrammarType2.$fReadExponentSystem2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarType2.ExponentSystem>_R))
                   @ b
                   eta1) -}
15efc4eb898e478367830d9726f1cb79
  $fReadExponentSystem10 ::
    GHC.Read.Read (GrammarType2.Manifest GrammarType2.Case)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadManifest_$s$fReadManifest -}
daed55d36154e6282a0c87dec926159a
  $fReadExponentSystem11 ::
    GHC.Read.Read (GrammarType2.Manifest GrammarType2.Animacy)
  {- Unfolding: (GrammarType2.$fReadManifest
                   @ GrammarType2.Animacy
                   GrammarType2.$fReadAnimacy) -}
dd0edd028fc339c85aef2414ff73abcc
  $fReadExponentSystem12 ::
    GHC.Read.Read (GrammarType2.Manifest GrammarType2.Gender)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadManifest_$s$fReadManifest2 -}
8458b2ed20531adbd7e1f0415074af95
  $fReadExponentSystem2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarType2.ExponentSystem
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarType2.ExponentSystem
                   GrammarType2.$fReadExponentSystem3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarType2.ExponentSystem>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarType2.ExponentSystem>_R)))) -}
8458b2ed20531adbd7e1f0415074af95
  $fReadExponentSystem3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.ExponentSystem -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: GrammarType2.ExponentSystem
                         -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 ->
                 GrammarType2.$wa ww1 @ b w1 }) -}
896e1348bcd6914c174540ed0fc03ed5
  $fReadExponentSystem4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ExponentSystem"#) -}
20e28ff82972f40b8858cf52ec8720c0
  $fReadExponentSystem5 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b1.
       ((PhonemeType2.Morpheme,
         (GrammarType2.Manifest GrammarType2.Gender,
          GrammarType2.Manifest GrammarType2.Animacy,
          GrammarType2.Manifest GrammarType2.Case,
          GrammarType2.Manifest GrammarType2.Number,
          GrammarType2.Manifest GrammarType2.Honorific,
          GrammarType2.Manifest GrammarType2.Definiteness,
          GrammarType2.Manifest GrammarType2.Specificity))
        -> Text.ParserCombinators.ReadP.P b1)
       -> Text.ParserCombinators.ReadP.P b1
  {- Arity: 2,
     Unfolding: (\ w2 :: Text.ParserCombinators.ReadPrec.Prec
                   @ b1
                   w3 :: (PhonemeType2.Morpheme,
                          (GrammarType2.Manifest GrammarType2.Gender,
                           GrammarType2.Manifest GrammarType2.Animacy,
                           GrammarType2.Manifest GrammarType2.Case,
                           GrammarType2.Manifest GrammarType2.Number,
                           GrammarType2.Manifest GrammarType2.Honorific,
                           GrammarType2.Manifest GrammarType2.Definiteness,
                           GrammarType2.Manifest GrammarType2.Specificity))
                         -> Text.ParserCombinators.ReadP.P b1[OneShot] ->
                 GHC.Read.$wa2
                   @ PhonemeType2.Morpheme
                   @ (GrammarType2.Manifest GrammarType2.Gender,
                      GrammarType2.Manifest GrammarType2.Animacy,
                      GrammarType2.Manifest GrammarType2.Case,
                      GrammarType2.Manifest GrammarType2.Number,
                      GrammarType2.Manifest GrammarType2.Honorific,
                      GrammarType2.Manifest GrammarType2.Definiteness,
                      GrammarType2.Manifest GrammarType2.Specificity)
                   PhonemeType2.$fReadMorpheme
                   GrammarType2.$fReadExponentSystem_$s$fRead(,,,,,,)
                   @ b1
                   w3) -}
638d88dabc954afee816ea64f343642b
  $fReadExponentSystem6 ::
    GHC.Read.Read (GrammarType2.Manifest GrammarType2.Specificity)
  {- Unfolding: (GrammarType2.$fReadManifest
                   @ GrammarType2.Specificity
                   GrammarType2.$fReadSpecificity) -}
82e61fe3195a9883dc1a0fd7d19fe67e
  $fReadExponentSystem7 ::
    GHC.Read.Read (GrammarType2.Manifest GrammarType2.Definiteness)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadManifest_$s$fReadManifest1 -}
2664721a280e5d95dc95119b0ec1a248
  $fReadExponentSystem8 ::
    GHC.Read.Read (GrammarType2.Manifest GrammarType2.Honorific)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadManifest_$s$fReadManifest3 -}
a682a49f4dc01e945cc72a9727d40869
  $fReadExponentSystem9 ::
    GHC.Read.Read (GrammarType2.Manifest GrammarType2.Number)
  {- Unfolding: (GrammarType2.$fReadManifest
                   @ GrammarType2.Number
                   GrammarType2.$fReadNumber) -}
8458b2ed20531adbd7e1f0415074af95
  $fReadExponentSystem_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [GrammarType2.ExponentSystem]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadExponentSystem1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarType2.ExponentSystem]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarType2.ExponentSystem]>_R))) -}
8458b2ed20531adbd7e1f0415074af95
  $fReadExponentSystem_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      GrammarType2.ExponentSystem
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadExponentSystem2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarType2.ExponentSystem>_R)) -}
8458b2ed20531adbd7e1f0415074af95
  $fReadExponentSystem_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarType2.ExponentSystem
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadP.run
                   @ GrammarType2.ExponentSystem
                   ((GHC.Read.$fReadDouble10
                       @ GrammarType2.ExponentSystem
                       GrammarType2.$fReadExponentSystem3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                           <GrammarType2.ExponentSystem>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                      <GrammarType2.ExponentSystem>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <GrammarType2.ExponentSystem>_R)
                      @ GrammarType2.ExponentSystem
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ GrammarType2.ExponentSystem))) -}
5afa79c6ef9d1b88352635bb26e1630a
  $fReadExponentSystem_$s$fRead(,,,,,,) ::
    GHC.Read.Read
      (GrammarType2.Manifest GrammarType2.Gender,
       GrammarType2.Manifest GrammarType2.Animacy,
       GrammarType2.Manifest GrammarType2.Case,
       GrammarType2.Manifest GrammarType2.Number,
       GrammarType2.Manifest GrammarType2.Honorific,
       GrammarType2.Manifest GrammarType2.Definiteness,
       GrammarType2.Manifest GrammarType2.Specificity)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GrammarType2.Manifest GrammarType2.Gender,
                     GrammarType2.Manifest GrammarType2.Animacy,
                     GrammarType2.Manifest GrammarType2.Case,
                     GrammarType2.Manifest GrammarType2.Number,
                     GrammarType2.Manifest GrammarType2.Honorific,
                     GrammarType2.Manifest GrammarType2.Definiteness,
                     GrammarType2.Manifest GrammarType2.Specificity)
                  GrammarType2.$fReadExponentSystem_$s$fRead(,,,,,,)_$creadsPrec
                  GrammarType2.$fReadExponentSystem_$s$fRead(,,,,,,)_$creadList
                  (GHC.Read.$fRead(,,,,,,)_$creadPrec
                     @ (GrammarType2.Manifest GrammarType2.Gender)
                     @ (GrammarType2.Manifest GrammarType2.Animacy)
                     @ (GrammarType2.Manifest GrammarType2.Case)
                     @ (GrammarType2.Manifest GrammarType2.Number)
                     @ (GrammarType2.Manifest GrammarType2.Honorific)
                     @ (GrammarType2.Manifest GrammarType2.Definiteness)
                     @ (GrammarType2.Manifest GrammarType2.Specificity)
                     GrammarType2.$fReadExponentSystem12
                     GrammarType2.$fReadExponentSystem11
                     GrammarType2.$fReadExponentSystem10
                     GrammarType2.$fReadExponentSystem9
                     GrammarType2.$fReadExponentSystem8
                     GrammarType2.$fReadExponentSystem7
                     GrammarType2.$fReadExponentSystem6)
                  (GHC.Read.$fRead(,,,,,,)_$creadListPrec
                     @ (GrammarType2.Manifest GrammarType2.Gender)
                     @ (GrammarType2.Manifest GrammarType2.Animacy)
                     @ (GrammarType2.Manifest GrammarType2.Case)
                     @ (GrammarType2.Manifest GrammarType2.Number)
                     @ (GrammarType2.Manifest GrammarType2.Honorific)
                     @ (GrammarType2.Manifest GrammarType2.Definiteness)
                     @ (GrammarType2.Manifest GrammarType2.Specificity)
                     GrammarType2.$fReadExponentSystem12
                     GrammarType2.$fReadExponentSystem11
                     GrammarType2.$fReadExponentSystem10
                     GrammarType2.$fReadExponentSystem9
                     GrammarType2.$fReadExponentSystem8
                     GrammarType2.$fReadExponentSystem7
                     GrammarType2.$fReadExponentSystem6) -}
168daf15db0f329bf852934068a849fa
  $fReadExponentSystem_$s$fRead(,,,,,,)_$creadList ::
    Text.ParserCombinators.ReadP.ReadS
      [(GrammarType2.Manifest GrammarType2.Gender,
        GrammarType2.Manifest GrammarType2.Animacy,
        GrammarType2.Manifest GrammarType2.Case,
        GrammarType2.Manifest GrammarType2.Number,
        GrammarType2.Manifest GrammarType2.Honorific,
        GrammarType2.Manifest GrammarType2.Definiteness,
        GrammarType2.Manifest GrammarType2.Specificity)]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [(GrammarType2.Manifest GrammarType2.Gender,
                       GrammarType2.Manifest GrammarType2.Animacy,
                       GrammarType2.Manifest GrammarType2.Case,
                       GrammarType2.Manifest GrammarType2.Number,
                       GrammarType2.Manifest GrammarType2.Honorific,
                       GrammarType2.Manifest GrammarType2.Definiteness,
                       GrammarType2.Manifest GrammarType2.Specificity)]
                   (GHC.Read.list1
                      @ (GrammarType2.Manifest GrammarType2.Gender,
                         GrammarType2.Manifest GrammarType2.Animacy,
                         GrammarType2.Manifest GrammarType2.Case,
                         GrammarType2.Manifest GrammarType2.Number,
                         GrammarType2.Manifest GrammarType2.Honorific,
                         GrammarType2.Manifest GrammarType2.Definiteness,
                         GrammarType2.Manifest GrammarType2.Specificity)
                      (GHC.Read.$fRead(,,,,,,)2
                         @ (GrammarType2.Manifest GrammarType2.Gender)
                         @ (GrammarType2.Manifest GrammarType2.Animacy)
                         @ (GrammarType2.Manifest GrammarType2.Case)
                         @ (GrammarType2.Manifest GrammarType2.Number)
                         @ (GrammarType2.Manifest GrammarType2.Honorific)
                         @ (GrammarType2.Manifest GrammarType2.Definiteness)
                         @ (GrammarType2.Manifest GrammarType2.Specificity)
                         GrammarType2.$fReadExponentSystem12
                         GrammarType2.$fReadExponentSystem11
                         GrammarType2.$fReadExponentSystem10
                         GrammarType2.$fReadExponentSystem9
                         GrammarType2.$fReadExponentSystem8
                         GrammarType2.$fReadExponentSystem7
                         GrammarType2.$fReadExponentSystem6)
                        `cast`
                      (Trans
                           (<Text.ParserCombinators.ReadPrec.Prec>_R
                            ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                          <(GrammarType2.Manifest GrammarType2.Gender,
                                            GrammarType2.Manifest GrammarType2.Animacy,
                                            GrammarType2.Manifest GrammarType2.Case,
                                            GrammarType2.Manifest GrammarType2.Number,
                                            GrammarType2.Manifest GrammarType2.Honorific,
                                            GrammarType2.Manifest GrammarType2.Definiteness,
                                            GrammarType2.Manifest GrammarType2.Specificity)>_R))
                           (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                     <(GrammarType2.Manifest GrammarType2.Gender,
                                       GrammarType2.Manifest GrammarType2.Animacy,
                                       GrammarType2.Manifest GrammarType2.Case,
                                       GrammarType2.Manifest GrammarType2.Number,
                                       GrammarType2.Manifest GrammarType2.Honorific,
                                       GrammarType2.Manifest GrammarType2.Definiteness,
                                       GrammarType2.Manifest GrammarType2.Specificity)>_R)))
                      GHC.Read.$fRead(,)7
                      @ [(GrammarType2.Manifest GrammarType2.Gender,
                          GrammarType2.Manifest GrammarType2.Animacy,
                          GrammarType2.Manifest GrammarType2.Case,
                          GrammarType2.Manifest GrammarType2.Number,
                          GrammarType2.Manifest GrammarType2.Honorific,
                          GrammarType2.Manifest GrammarType2.Definiteness,
                          GrammarType2.Manifest GrammarType2.Specificity)]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [(GrammarType2.Manifest GrammarType2.Gender,
                             GrammarType2.Manifest GrammarType2.Animacy,
                             GrammarType2.Manifest GrammarType2.Case,
                             GrammarType2.Manifest GrammarType2.Number,
                             GrammarType2.Manifest GrammarType2.Honorific,
                             GrammarType2.Manifest GrammarType2.Definiteness,
                             GrammarType2.Manifest GrammarType2.Specificity)]))) -}
7e3c75671af13bf903020a28e2d975d0
  $fReadExponentSystem_$s$fRead(,,,,,,)_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS
         (GrammarType2.Manifest GrammarType2.Gender,
          GrammarType2.Manifest GrammarType2.Animacy,
          GrammarType2.Manifest GrammarType2.Case,
          GrammarType2.Manifest GrammarType2.Number,
          GrammarType2.Manifest GrammarType2.Honorific,
          GrammarType2.Manifest GrammarType2.Definiteness,
          GrammarType2.Manifest GrammarType2.Specificity)
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadP.run
                   @ (GrammarType2.Manifest GrammarType2.Gender,
                      GrammarType2.Manifest GrammarType2.Animacy,
                      GrammarType2.Manifest GrammarType2.Case,
                      GrammarType2.Manifest GrammarType2.Number,
                      GrammarType2.Manifest GrammarType2.Honorific,
                      GrammarType2.Manifest GrammarType2.Definiteness,
                      GrammarType2.Manifest GrammarType2.Specificity)
                   (GHC.Read.$fRead(,,,,,,)2
                      @ (GrammarType2.Manifest GrammarType2.Gender)
                      @ (GrammarType2.Manifest GrammarType2.Animacy)
                      @ (GrammarType2.Manifest GrammarType2.Case)
                      @ (GrammarType2.Manifest GrammarType2.Number)
                      @ (GrammarType2.Manifest GrammarType2.Honorific)
                      @ (GrammarType2.Manifest GrammarType2.Definiteness)
                      @ (GrammarType2.Manifest GrammarType2.Specificity)
                      GrammarType2.$fReadExponentSystem12
                      GrammarType2.$fReadExponentSystem11
                      GrammarType2.$fReadExponentSystem10
                      GrammarType2.$fReadExponentSystem9
                      GrammarType2.$fReadExponentSystem8
                      GrammarType2.$fReadExponentSystem7
                      GrammarType2.$fReadExponentSystem6
                      eta
                      @ (GrammarType2.Manifest GrammarType2.Gender,
                         GrammarType2.Manifest GrammarType2.Animacy,
                         GrammarType2.Manifest GrammarType2.Case,
                         GrammarType2.Manifest GrammarType2.Number,
                         GrammarType2.Manifest GrammarType2.Honorific,
                         GrammarType2.Manifest GrammarType2.Definiteness,
                         GrammarType2.Manifest GrammarType2.Specificity)
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ (GrammarType2.Manifest GrammarType2.Gender,
                            GrammarType2.Manifest GrammarType2.Animacy,
                            GrammarType2.Manifest GrammarType2.Case,
                            GrammarType2.Manifest GrammarType2.Number,
                            GrammarType2.Manifest GrammarType2.Honorific,
                            GrammarType2.Manifest GrammarType2.Definiteness,
                            GrammarType2.Manifest GrammarType2.Specificity)))) -}
8458b2ed20531adbd7e1f0415074af95
  $fReadExponentSystem_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarType2.ExponentSystem]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarType2.ExponentSystem]
                   ((GrammarType2.$fReadExponentSystem_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarType2.ExponentSystem]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarType2.ExponentSystem]>_R)
                      @ [GrammarType2.ExponentSystem]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarType2.ExponentSystem]))) -}
498ce41f2238314803d9983a3ee7b9a8
  $fReadGender :: GHC.Read.Read GrammarType2.Gender
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Gender
                  GrammarType2.$fReadGender_$s$dmreadsPrec
                  GrammarType2.$fReadGender_$sreadListDefault
                  GrammarType2.$fReadGender_$creadPrec
                  GrammarType2.$fReadGender_$creadListPrec -}
498ce41f2238314803d9983a3ee7b9a8
  $fReadGender1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarType2.Gender] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarType2.Gender]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarType2.Gender
                   GrammarType2.$fReadGender2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarType2.Gender>_R))
                   @ b
                   eta1) -}
36235d8a978286c3781e327202862f76
  $fReadGender10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "N"#) -}
498ce41f2238314803d9983a3ee7b9a8
  $fReadGender11 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Gender)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadGender13,
                  GrammarType2.$fReadGender12
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Gender>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Gender>_R))))) -}
498ce41f2238314803d9983a3ee7b9a8
  $fReadGender12 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Gender -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Gender -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.COM) -}
7c887b63a231d17e2cca5b4346733d77
  $fReadGender13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "COM"#) -}
498ce41f2238314803d9983a3ee7b9a8
  $fReadGender14 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Gender)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadGender16,
                  GrammarType2.$fReadGender15
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Gender>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Gender>_R))))) -}
498ce41f2238314803d9983a3ee7b9a8
  $fReadGender15 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Gender -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Gender -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.F) -}
c566611a17b7a25d0f3196f13bf90fa8
  $fReadGender16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "F"#) -}
498ce41f2238314803d9983a3ee7b9a8
  $fReadGender17 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Gender)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadGender19,
                  GrammarType2.$fReadGender18
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Gender>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Gender>_R))))) -}
498ce41f2238314803d9983a3ee7b9a8
  $fReadGender18 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Gender -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Gender -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.M) -}
24093da68d30fd06331eb629b3b36740
  $fReadGender19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "M"#) -}
498ce41f2238314803d9983a3ee7b9a8
  $fReadGender2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarType2.Gender
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarType2.Gender
                   GrammarType2.$fReadGender3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarType2.Gender>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarType2.Gender>_R)))) -}
498ce41f2238314803d9983a3ee7b9a8
  $fReadGender3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Gender -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarType2.Gender -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarType2.Gender
                   GrammarType2.$fReadGender4
                   eta
                   @ b
                   eta1) -}
498ce41f2238314803d9983a3ee7b9a8
  $fReadGender4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Gender)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Gender)
                   GrammarType2.$fReadGender17
                   GrammarType2.$fReadGender5) -}
498ce41f2238314803d9983a3ee7b9a8
  $fReadGender5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Gender)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Gender)
                   GrammarType2.$fReadGender14
                   GrammarType2.$fReadGender6) -}
498ce41f2238314803d9983a3ee7b9a8
  $fReadGender6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Gender)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Gender)
                   GrammarType2.$fReadGender11
                   GrammarType2.$fReadGender7) -}
498ce41f2238314803d9983a3ee7b9a8
  $fReadGender7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Gender)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Gender)
                   GrammarType2.$fReadGender8
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Gender))) -}
498ce41f2238314803d9983a3ee7b9a8
  $fReadGender8 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Gender)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadGender10,
                  GrammarType2.$fReadGender9
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Gender>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Gender>_R))))) -}
498ce41f2238314803d9983a3ee7b9a8
  $fReadGender9 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Gender -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Gender -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.N) -}
498ce41f2238314803d9983a3ee7b9a8
  $fReadGender_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [GrammarType2.Gender]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadGender1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarType2.Gender]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarType2.Gender]>_R))) -}
498ce41f2238314803d9983a3ee7b9a8
  $fReadGender_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Gender
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadGender2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarType2.Gender>_R)) -}
498ce41f2238314803d9983a3ee7b9a8
  $fReadGender_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarType2.Gender
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarType2.Gender
                   GrammarType2.$fReadGender_$creadPrec
                   eta) -}
498ce41f2238314803d9983a3ee7b9a8
  $fReadGender_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarType2.Gender]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarType2.Gender]
                   ((GrammarType2.$fReadGender_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarType2.Gender]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarType2.Gender]>_R)
                      @ [GrammarType2.Gender]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarType2.Gender]))) -}
270aa74414213d38a897e2c2f04e2cb0
  $fReadHonorific :: GHC.Read.Read GrammarType2.Honorific
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Honorific
                  GrammarType2.$fReadHonorific_$s$dmreadsPrec
                  GrammarType2.$fReadHonorific_$sreadListDefault
                  GrammarType2.$fReadHonorific_$creadPrec
                  GrammarType2.$fReadHonorific_$creadListPrec -}
270aa74414213d38a897e2c2f04e2cb0
  $fReadHonorific1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarType2.Honorific] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarType2.Honorific]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarType2.Honorific
                   GrammarType2.$fReadHonorific2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarType2.Honorific>_R))
                   @ b
                   eta1) -}
270aa74414213d38a897e2c2f04e2cb0
  $fReadHonorific10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Honorific -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Honorific
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.FAM) -}
d19510b6476037a8a6963370f2e7f853
  $fReadHonorific11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FAM"#) -}
270aa74414213d38a897e2c2f04e2cb0
  $fReadHonorific2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarType2.Honorific
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarType2.Honorific
                   GrammarType2.$fReadHonorific3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarType2.Honorific>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarType2.Honorific>_R)))) -}
270aa74414213d38a897e2c2f04e2cb0
  $fReadHonorific3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Honorific -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarType2.Honorific
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarType2.Honorific
                   GrammarType2.$fReadHonorific4
                   eta
                   @ b
                   eta1) -}
270aa74414213d38a897e2c2f04e2cb0
  $fReadHonorific4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Honorific)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Honorific)
                   GrammarType2.$fReadHonorific9
                   GrammarType2.$fReadHonorific5) -}
270aa74414213d38a897e2c2f04e2cb0
  $fReadHonorific5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Honorific)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Honorific)
                   GrammarType2.$fReadHonorific6
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           GrammarType2.Honorific))) -}
270aa74414213d38a897e2c2f04e2cb0
  $fReadHonorific6 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Honorific)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadHonorific8,
                  GrammarType2.$fReadHonorific7
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Honorific>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Honorific>_R))))) -}
270aa74414213d38a897e2c2f04e2cb0
  $fReadHonorific7 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Honorific -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Honorific
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.FORM) -}
1b4d843fcebc5a118f005a3da3f25327
  $fReadHonorific8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FORM"#) -}
270aa74414213d38a897e2c2f04e2cb0
  $fReadHonorific9 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Honorific)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadHonorific11,
                  GrammarType2.$fReadHonorific10
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Honorific>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Honorific>_R))))) -}
270aa74414213d38a897e2c2f04e2cb0
  $fReadHonorific_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [GrammarType2.Honorific]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadHonorific1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarType2.Honorific]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarType2.Honorific]>_R))) -}
270aa74414213d38a897e2c2f04e2cb0
  $fReadHonorific_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Honorific
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadHonorific2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarType2.Honorific>_R)) -}
270aa74414213d38a897e2c2f04e2cb0
  $fReadHonorific_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarType2.Honorific
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarType2.Honorific
                   GrammarType2.$fReadHonorific_$creadPrec
                   eta) -}
270aa74414213d38a897e2c2f04e2cb0
  $fReadHonorific_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarType2.Honorific]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarType2.Honorific]
                   ((GrammarType2.$fReadHonorific_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarType2.Honorific]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarType2.Honorific]>_R)
                      @ [GrammarType2.Honorific]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarType2.Honorific]))) -}
fd2e4f6f534fd240b9cde0b8f8a520af
  $fReadManifest ::
    GHC.Read.Read a => GHC.Read.Read (GrammarType2.Manifest a)
  DFunId[0]
  {- Arity: 1, Strictness: <L,U(A,A,U,A)>m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a22 $dRead :: GHC.Read.Read a22.
                  @ (GrammarType2.Manifest a22)
                  (GrammarType2.$fReadManifest_$creadsPrec @ a22 $dRead)
                  (GrammarType2.$fReadManifest_$creadList @ a22 $dRead)
                  (GrammarType2.$fReadManifest_$creadPrec @ a22 $dRead)
                  (GrammarType2.$fReadManifest_$creadListPrec @ a22 $dRead) -}
fd2e4f6f534fd240b9cde0b8f8a520af
  $fReadManifest1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarType2.Manifest GrammarType2.Case]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarType2.Manifest GrammarType2.Case]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ (GrammarType2.Manifest GrammarType2.Case)
                   GrammarType2.$fReadManifest2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarType2.Manifest GrammarType2.Case>_R))
                   @ b
                   eta1) -}
fd2e4f6f534fd240b9cde0b8f8a520af
  $fReadManifest10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarType2.Manifest GrammarType2.Honorific]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarType2.Manifest GrammarType2.Honorific]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ (GrammarType2.Manifest GrammarType2.Honorific)
                   GrammarType2.$fReadManifest11
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarType2.Manifest GrammarType2.Honorific>_R))
                   @ b
                   eta1) -}
fd2e4f6f534fd240b9cde0b8f8a520af
  $fReadManifest11 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP
         (GrammarType2.Manifest GrammarType2.Honorific)
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ (GrammarType2.Manifest GrammarType2.Honorific)
                   GrammarType2.$fReadManifest12
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarType2.Manifest GrammarType2.Honorific>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarType2.Manifest GrammarType2.Honorific>_R)))) -}
fd2e4f6f534fd240b9cde0b8f8a520af
  $fReadManifest12 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Manifest GrammarType2.Honorific
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)> -}
fd2e4f6f534fd240b9cde0b8f8a520af
  $fReadManifest13 ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarType2.Manifest a] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 3, Strictness: <L,U(A,A,U,A)><L,A><L,C(U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a22
                   $dRead :: GHC.Read.Read a22
                   eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarType2.Manifest a22]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ (GrammarType2.Manifest a22)
                   (GrammarType2.$fReadManifest14 @ a22 $dRead)
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarType2.Manifest a22>_R))
                   @ b
                   eta1) -}
fd2e4f6f534fd240b9cde0b8f8a520af
  $fReadManifest14 ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP (GrammarType2.Manifest a)
  {- Arity: 2, Strictness: <L,U(A,A,U,A)><L,U> -}
fd2e4f6f534fd240b9cde0b8f8a520af
  $fReadManifest2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP
         (GrammarType2.Manifest GrammarType2.Case)
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ (GrammarType2.Manifest GrammarType2.Case)
                   GrammarType2.$fReadManifest3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarType2.Manifest GrammarType2.Case>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarType2.Manifest GrammarType2.Case>_R)))) -}
fd2e4f6f534fd240b9cde0b8f8a520af
  $fReadManifest3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Manifest GrammarType2.Case
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)> -}
fd2e4f6f534fd240b9cde0b8f8a520af
  $fReadManifest4 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarType2.Manifest GrammarType2.Definiteness]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarType2.Manifest GrammarType2.Definiteness]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ (GrammarType2.Manifest GrammarType2.Definiteness)
                   GrammarType2.$fReadManifest5
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarType2.Manifest GrammarType2.Definiteness>_R))
                   @ b
                   eta1) -}
fd2e4f6f534fd240b9cde0b8f8a520af
  $fReadManifest5 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP
         (GrammarType2.Manifest GrammarType2.Definiteness)
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ (GrammarType2.Manifest GrammarType2.Definiteness)
                   GrammarType2.$fReadManifest6
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarType2.Manifest GrammarType2.Definiteness>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarType2.Manifest GrammarType2.Definiteness>_R)))) -}
fd2e4f6f534fd240b9cde0b8f8a520af
  $fReadManifest6 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Manifest GrammarType2.Definiteness
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)> -}
fd2e4f6f534fd240b9cde0b8f8a520af
  $fReadManifest7 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarType2.Manifest GrammarType2.Gender]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarType2.Manifest GrammarType2.Gender]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ (GrammarType2.Manifest GrammarType2.Gender)
                   GrammarType2.$fReadManifest8
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarType2.Manifest GrammarType2.Gender>_R))
                   @ b
                   eta1) -}
fd2e4f6f534fd240b9cde0b8f8a520af
  $fReadManifest8 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP
         (GrammarType2.Manifest GrammarType2.Gender)
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ (GrammarType2.Manifest GrammarType2.Gender)
                   GrammarType2.$fReadManifest9
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarType2.Manifest GrammarType2.Gender>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarType2.Manifest GrammarType2.Gender>_R)))) -}
fd2e4f6f534fd240b9cde0b8f8a520af
  $fReadManifest9 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Manifest GrammarType2.Gender
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)> -}
fd2e4f6f534fd240b9cde0b8f8a520af
  $fReadManifest_$creadList ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadP.ReadS [GrammarType2.Manifest a]
  {- Arity: 1, Strictness: <L,U(A,A,U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a22 $dRead :: GHC.Read.Read a22 ->
                 Text.ParserCombinators.ReadP.run
                   @ [GrammarType2.Manifest a22]
                   (GHC.Read.$wa
                      @ (GrammarType2.Manifest a22)
                      (GrammarType2.$fReadManifest14 @ a22 $dRead)
                        `cast`
                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                <GrammarType2.Manifest a22>_R))
                      @ [GrammarType2.Manifest a22]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarType2.Manifest a22]))) -}
fd2e4f6f534fd240b9cde0b8f8a520af
  $fReadManifest_$creadListPrec ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadPrec.ReadPrec [GrammarType2.Manifest a]
  {- Arity: 3, Strictness: <L,U(A,A,U,A)><L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadManifest13
                  `cast`
                (forall a22.
                 <GHC.Read.Read a22>_R
                 ->_R Trans
                          (<Text.ParserCombinators.ReadPrec.Prec>_R
                           ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                         <[GrammarType2.Manifest a22]>_R))
                          (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                    <[GrammarType2.Manifest a22]>_R))) -}
fd2e4f6f534fd240b9cde0b8f8a520af
  $fReadManifest_$creadPrec ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadPrec.ReadPrec (GrammarType2.Manifest a)
  {- Arity: 2, Strictness: <L,U(A,A,U,A)><L,U>,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadManifest14
                  `cast`
                (forall a22.
                 <GHC.Read.Read a22>_R
                 ->_R Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <GrammarType2.Manifest a22>_R)) -}
fd2e4f6f534fd240b9cde0b8f8a520af
  $fReadManifest_$creadsPrec ::
    GHC.Read.Read a =>
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS (GrammarType2.Manifest a)
  {- Arity: 2, Strictness: <L,U(A,A,U,A)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a22 $dRead :: GHC.Read.Read a22 eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadP.run
                   @ (GrammarType2.Manifest a22)
                   ((GrammarType2.$fReadManifest14 @ a22 $dRead eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <GrammarType2.Manifest a22>_R)
                      @ (GrammarType2.Manifest a22)
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ (GrammarType2.Manifest a22)))) -}
fd2e4f6f534fd240b9cde0b8f8a520af
  $fReadManifest_$s$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [GrammarType2.Manifest GrammarType2.Case]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadManifest1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarType2.Manifest GrammarType2.Case]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarType2.Manifest GrammarType2.Case]>_R))) -}
fd2e4f6f534fd240b9cde0b8f8a520af
  $fReadManifest_$s$creadListPrec1 ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [GrammarType2.Manifest GrammarType2.Definiteness]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadManifest4
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarType2.Manifest GrammarType2.Definiteness]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarType2.Manifest GrammarType2.Definiteness]>_R))) -}
fd2e4f6f534fd240b9cde0b8f8a520af
  $fReadManifest_$s$creadListPrec2 ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [GrammarType2.Manifest GrammarType2.Gender]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadManifest7
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarType2.Manifest GrammarType2.Gender]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarType2.Manifest GrammarType2.Gender]>_R))) -}
fd2e4f6f534fd240b9cde0b8f8a520af
  $fReadManifest_$s$creadListPrec3 ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [GrammarType2.Manifest GrammarType2.Honorific]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadManifest10
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarType2.Manifest GrammarType2.Honorific]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarType2.Manifest GrammarType2.Honorific]>_R))) -}
fd2e4f6f534fd240b9cde0b8f8a520af
  $fReadManifest_$s$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      (GrammarType2.Manifest GrammarType2.Case)
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadManifest2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarType2.Manifest GrammarType2.Case>_R)) -}
fd2e4f6f534fd240b9cde0b8f8a520af
  $fReadManifest_$s$creadPrec1 ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      (GrammarType2.Manifest GrammarType2.Definiteness)
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadManifest5
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarType2.Manifest GrammarType2.Definiteness>_R)) -}
fd2e4f6f534fd240b9cde0b8f8a520af
  $fReadManifest_$s$creadPrec2 ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      (GrammarType2.Manifest GrammarType2.Gender)
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadManifest8
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarType2.Manifest GrammarType2.Gender>_R)) -}
fd2e4f6f534fd240b9cde0b8f8a520af
  $fReadManifest_$s$creadPrec3 ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      (GrammarType2.Manifest GrammarType2.Honorific)
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadManifest11
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarType2.Manifest GrammarType2.Honorific>_R)) -}
fd2e4f6f534fd240b9cde0b8f8a520af
  $fReadManifest_$s$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS
         (GrammarType2.Manifest GrammarType2.Case)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadP.run
                   @ (GrammarType2.Manifest GrammarType2.Case)
                   ((GHC.Read.$fReadDouble10
                       @ (GrammarType2.Manifest GrammarType2.Case)
                       GrammarType2.$fReadManifest3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                           <GrammarType2.Manifest GrammarType2.Case>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                      <GrammarType2.Manifest GrammarType2.Case>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <GrammarType2.Manifest GrammarType2.Case>_R)
                      @ (GrammarType2.Manifest GrammarType2.Case)
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ (GrammarType2.Manifest GrammarType2.Case)))) -}
fd2e4f6f534fd240b9cde0b8f8a520af
  $fReadManifest_$s$creadsPrec1 ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS
         (GrammarType2.Manifest GrammarType2.Definiteness)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadP.run
                   @ (GrammarType2.Manifest GrammarType2.Definiteness)
                   ((GHC.Read.$fReadDouble10
                       @ (GrammarType2.Manifest GrammarType2.Definiteness)
                       GrammarType2.$fReadManifest6
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                           <GrammarType2.Manifest GrammarType2.Definiteness>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                      <GrammarType2.Manifest GrammarType2.Definiteness>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <GrammarType2.Manifest GrammarType2.Definiteness>_R)
                      @ (GrammarType2.Manifest GrammarType2.Definiteness)
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ (GrammarType2.Manifest GrammarType2.Definiteness)))) -}
fd2e4f6f534fd240b9cde0b8f8a520af
  $fReadManifest_$s$creadsPrec2 ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS
         (GrammarType2.Manifest GrammarType2.Gender)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadP.run
                   @ (GrammarType2.Manifest GrammarType2.Gender)
                   ((GHC.Read.$fReadDouble10
                       @ (GrammarType2.Manifest GrammarType2.Gender)
                       GrammarType2.$fReadManifest9
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                           <GrammarType2.Manifest GrammarType2.Gender>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                      <GrammarType2.Manifest GrammarType2.Gender>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <GrammarType2.Manifest GrammarType2.Gender>_R)
                      @ (GrammarType2.Manifest GrammarType2.Gender)
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ (GrammarType2.Manifest GrammarType2.Gender)))) -}
fd2e4f6f534fd240b9cde0b8f8a520af
  $fReadManifest_$s$creadsPrec3 ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS
         (GrammarType2.Manifest GrammarType2.Honorific)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadP.run
                   @ (GrammarType2.Manifest GrammarType2.Honorific)
                   ((GHC.Read.$fReadDouble10
                       @ (GrammarType2.Manifest GrammarType2.Honorific)
                       GrammarType2.$fReadManifest12
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                           <GrammarType2.Manifest GrammarType2.Honorific>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                      <GrammarType2.Manifest GrammarType2.Honorific>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <GrammarType2.Manifest GrammarType2.Honorific>_R)
                      @ (GrammarType2.Manifest GrammarType2.Honorific)
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ (GrammarType2.Manifest GrammarType2.Honorific)))) -}
fd2e4f6f534fd240b9cde0b8f8a520af
  $fReadManifest_$s$fReadManifest ::
    GHC.Read.Read (GrammarType2.Manifest GrammarType2.Case)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GrammarType2.Manifest GrammarType2.Case)
                  GrammarType2.$fReadManifest_$s$creadsPrec
                  GrammarType2.$fReadManifest_$sreadListDefault
                  GrammarType2.$fReadManifest_$s$creadPrec
                  GrammarType2.$fReadManifest_$s$creadListPrec -}
fd2e4f6f534fd240b9cde0b8f8a520af
  $fReadManifest_$s$fReadManifest1 ::
    GHC.Read.Read (GrammarType2.Manifest GrammarType2.Definiteness)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GrammarType2.Manifest GrammarType2.Definiteness)
                  GrammarType2.$fReadManifest_$s$creadsPrec1
                  GrammarType2.$fReadManifest_$sreadListDefault1
                  GrammarType2.$fReadManifest_$s$creadPrec1
                  GrammarType2.$fReadManifest_$s$creadListPrec1 -}
fd2e4f6f534fd240b9cde0b8f8a520af
  $fReadManifest_$s$fReadManifest2 ::
    GHC.Read.Read (GrammarType2.Manifest GrammarType2.Gender)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GrammarType2.Manifest GrammarType2.Gender)
                  GrammarType2.$fReadManifest_$s$creadsPrec2
                  GrammarType2.$fReadManifest_$sreadListDefault2
                  GrammarType2.$fReadManifest_$s$creadPrec2
                  GrammarType2.$fReadManifest_$s$creadListPrec2 -}
fd2e4f6f534fd240b9cde0b8f8a520af
  $fReadManifest_$s$fReadManifest3 ::
    GHC.Read.Read (GrammarType2.Manifest GrammarType2.Honorific)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GrammarType2.Manifest GrammarType2.Honorific)
                  GrammarType2.$fReadManifest_$s$creadsPrec3
                  GrammarType2.$fReadManifest_$sreadListDefault3
                  GrammarType2.$fReadManifest_$s$creadPrec3
                  GrammarType2.$fReadManifest_$s$creadListPrec3 -}
fd2e4f6f534fd240b9cde0b8f8a520af
  $fReadManifest_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS
      [GrammarType2.Manifest GrammarType2.Case]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarType2.Manifest GrammarType2.Case]
                   ((GrammarType2.$fReadManifest_$s$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarType2.Manifest GrammarType2.Case]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarType2.Manifest GrammarType2.Case]>_R)
                      @ [GrammarType2.Manifest GrammarType2.Case]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarType2.Manifest GrammarType2.Case]))) -}
fd2e4f6f534fd240b9cde0b8f8a520af
  $fReadManifest_$sreadListDefault1 ::
    Text.ParserCombinators.ReadP.ReadS
      [GrammarType2.Manifest GrammarType2.Definiteness]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarType2.Manifest GrammarType2.Definiteness]
                   ((GrammarType2.$fReadManifest_$s$creadListPrec1
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarType2.Manifest GrammarType2.Definiteness]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarType2.Manifest GrammarType2.Definiteness]>_R)
                      @ [GrammarType2.Manifest GrammarType2.Definiteness]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarType2.Manifest GrammarType2.Definiteness]))) -}
fd2e4f6f534fd240b9cde0b8f8a520af
  $fReadManifest_$sreadListDefault2 ::
    Text.ParserCombinators.ReadP.ReadS
      [GrammarType2.Manifest GrammarType2.Gender]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarType2.Manifest GrammarType2.Gender]
                   ((GrammarType2.$fReadManifest_$s$creadListPrec2
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarType2.Manifest GrammarType2.Gender]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarType2.Manifest GrammarType2.Gender]>_R)
                      @ [GrammarType2.Manifest GrammarType2.Gender]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarType2.Manifest GrammarType2.Gender]))) -}
fd2e4f6f534fd240b9cde0b8f8a520af
  $fReadManifest_$sreadListDefault3 ::
    Text.ParserCombinators.ReadP.ReadS
      [GrammarType2.Manifest GrammarType2.Honorific]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarType2.Manifest GrammarType2.Honorific]
                   ((GrammarType2.$fReadManifest_$s$creadListPrec3
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarType2.Manifest GrammarType2.Honorific]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarType2.Manifest GrammarType2.Honorific]>_R)
                      @ [GrammarType2.Manifest GrammarType2.Honorific]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarType2.Manifest GrammarType2.Honorific]))) -}
b72254827f48011cc46d25b53a3dee43
  $fReadMood :: GHC.Read.Read GrammarType2.Mood
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Mood
                  GrammarType2.$fReadMood_$s$dmreadsPrec
                  GrammarType2.$fReadMood_$sreadListDefault
                  GrammarType2.$fReadMood_$creadPrec
                  GrammarType2.$fReadMood_$creadListPrec -}
b72254827f48011cc46d25b53a3dee43
  $fReadMood1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarType2.Mood] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarType2.Mood] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarType2.Mood
                   GrammarType2.$fReadMood2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarType2.Mood>_R))
                   @ b
                   eta1) -}
b72254827f48011cc46d25b53a3dee43
  $fReadMood10 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Mood)
                   GrammarType2.$fReadMood23
                   GrammarType2.$fReadMood11) -}
b72254827f48011cc46d25b53a3dee43
  $fReadMood11 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Mood)
                   GrammarType2.$fReadMood20
                   GrammarType2.$fReadMood12) -}
b72254827f48011cc46d25b53a3dee43
  $fReadMood12 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Mood)
                   GrammarType2.$fReadMood17
                   GrammarType2.$fReadMood13) -}
b72254827f48011cc46d25b53a3dee43
  $fReadMood13 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Mood)
                   GrammarType2.$fReadMood14
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Mood))) -}
b72254827f48011cc46d25b53a3dee43
  $fReadMood14 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Mood)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadMood16,
                  GrammarType2.$fReadMood15
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Mood>_R))))) -}
b72254827f48011cc46d25b53a3dee43
  $fReadMood15 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Mood -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.COND) -}
adbf6461179191712fa0f9ace1d0ea6b
  $fReadMood16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "COND"#) -}
b72254827f48011cc46d25b53a3dee43
  $fReadMood17 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Mood)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadMood19,
                  GrammarType2.$fReadMood18
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Mood>_R))))) -}
b72254827f48011cc46d25b53a3dee43
  $fReadMood18 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Mood -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.POT) -}
141fc467e935d6ebddc7b2698f7b11c4
  $fReadMood19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "POT"#) -}
b72254827f48011cc46d25b53a3dee43
  $fReadMood2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarType2.Mood
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarType2.Mood
                   GrammarType2.$fReadMood3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarType2.Mood>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarType2.Mood>_R)))) -}
b72254827f48011cc46d25b53a3dee43
  $fReadMood20 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Mood)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadMood22,
                  GrammarType2.$fReadMood21
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Mood>_R))))) -}
b72254827f48011cc46d25b53a3dee43
  $fReadMood21 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Mood -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.SBJV) -}
53101f0bb6c84d1a262a08728dfe3ddd
  $fReadMood22 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SBJV"#) -}
b72254827f48011cc46d25b53a3dee43
  $fReadMood23 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Mood)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadMood25,
                  GrammarType2.$fReadMood24
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Mood>_R))))) -}
b72254827f48011cc46d25b53a3dee43
  $fReadMood24 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Mood -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.EPIS) -}
15fc8f204300741eeb194f6d2ce5deee
  $fReadMood25 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "EPIS"#) -}
b72254827f48011cc46d25b53a3dee43
  $fReadMood26 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Mood)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadMood28,
                  GrammarType2.$fReadMood27
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Mood>_R))))) -}
b72254827f48011cc46d25b53a3dee43
  $fReadMood27 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Mood -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.OPT) -}
98da4f976e4095f98567e72a1c7b659b
  $fReadMood28 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OPT"#) -}
b72254827f48011cc46d25b53a3dee43
  $fReadMood29 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Mood)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadMood31,
                  GrammarType2.$fReadMood30
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Mood>_R))))) -}
b72254827f48011cc46d25b53a3dee43
  $fReadMood3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarType2.Mood -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarType2.Mood
                   GrammarType2.$fReadMood4
                   eta
                   @ b
                   eta1) -}
b72254827f48011cc46d25b53a3dee43
  $fReadMood30 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Mood -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.JUS) -}
0a123e9b2df50eea3845205355a21284
  $fReadMood31 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "JUS"#) -}
b72254827f48011cc46d25b53a3dee43
  $fReadMood32 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Mood)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadMood34,
                  GrammarType2.$fReadMood33
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Mood>_R))))) -}
b72254827f48011cc46d25b53a3dee43
  $fReadMood33 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Mood -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.IMP) -}
7a463a0f9cd1ea5af023c2c0598a883d
  $fReadMood34 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "IMP"#) -}
b72254827f48011cc46d25b53a3dee43
  $fReadMood35 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Mood)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadMood37,
                  GrammarType2.$fReadMood36
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Mood>_R))))) -}
b72254827f48011cc46d25b53a3dee43
  $fReadMood36 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Mood -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.DEO) -}
f30a5d8abd93a8ec38635102af34f2f5
  $fReadMood37 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DEO"#) -}
b72254827f48011cc46d25b53a3dee43
  $fReadMood38 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Mood)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadMood40,
                  GrammarType2.$fReadMood39
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Mood>_R))))) -}
b72254827f48011cc46d25b53a3dee43
  $fReadMood39 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Mood -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.IRR) -}
b72254827f48011cc46d25b53a3dee43
  $fReadMood4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Mood)
                   GrammarType2.$fReadMood41
                   GrammarType2.$fReadMood5) -}
7e374d25e232d02d39d2d03485dbe250
  $fReadMood40 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "IRR"#) -}
b72254827f48011cc46d25b53a3dee43
  $fReadMood41 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Mood)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadMood43,
                  GrammarType2.$fReadMood42
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Mood>_R))))) -}
b72254827f48011cc46d25b53a3dee43
  $fReadMood42 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Mood -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.IND) -}
16f2e41f9939c8b3ef207f407c383ddb
  $fReadMood43 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "IND"#) -}
b72254827f48011cc46d25b53a3dee43
  $fReadMood5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Mood)
                   GrammarType2.$fReadMood38
                   GrammarType2.$fReadMood6) -}
b72254827f48011cc46d25b53a3dee43
  $fReadMood6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Mood)
                   GrammarType2.$fReadMood35
                   GrammarType2.$fReadMood7) -}
b72254827f48011cc46d25b53a3dee43
  $fReadMood7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Mood)
                   GrammarType2.$fReadMood32
                   GrammarType2.$fReadMood8) -}
b72254827f48011cc46d25b53a3dee43
  $fReadMood8 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Mood)
                   GrammarType2.$fReadMood29
                   GrammarType2.$fReadMood9) -}
b72254827f48011cc46d25b53a3dee43
  $fReadMood9 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Mood)
                   GrammarType2.$fReadMood26
                   GrammarType2.$fReadMood10) -}
b72254827f48011cc46d25b53a3dee43
  $fReadMood_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [GrammarType2.Mood]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadMood1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarType2.Mood]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarType2.Mood]>_R))) -}
b72254827f48011cc46d25b53a3dee43
  $fReadMood_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Mood
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadMood2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarType2.Mood>_R)) -}
b72254827f48011cc46d25b53a3dee43
  $fReadMood_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarType2.Mood
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarType2.Mood
                   GrammarType2.$fReadMood_$creadPrec
                   eta) -}
b72254827f48011cc46d25b53a3dee43
  $fReadMood_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarType2.Mood]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarType2.Mood]
                   ((GrammarType2.$fReadMood_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarType2.Mood]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarType2.Mood]>_R)
                      @ [GrammarType2.Mood]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarType2.Mood]))) -}
dc554c15fa6745d82b7cf16c87b8dfc7
  $fReadNumber :: GHC.Read.Read GrammarType2.Number
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Number
                  GrammarType2.$fReadNumber_$s$dmreadsPrec
                  GrammarType2.$fReadNumber_$sreadListDefault
                  GrammarType2.$fReadNumber_$creadPrec
                  GrammarType2.$fReadNumber_$creadListPrec -}
dc554c15fa6745d82b7cf16c87b8dfc7
  $fReadNumber1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarType2.Number] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarType2.Number]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarType2.Number
                   GrammarType2.$fReadNumber2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarType2.Number>_R))
                   @ b
                   eta1) -}
dc554c15fa6745d82b7cf16c87b8dfc7
  $fReadNumber10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Number -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Number -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.PL) -}
e8fa0bbd5e03f65db3a97d47c3267343
  $fReadNumber11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PL"#) -}
dc554c15fa6745d82b7cf16c87b8dfc7
  $fReadNumber12 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Number)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadNumber14,
                  GrammarType2.$fReadNumber13
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Number>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Number>_R))))) -}
dc554c15fa6745d82b7cf16c87b8dfc7
  $fReadNumber13 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Number -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Number -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.PA) -}
e0fd8786f27306a8d83799244497ff18
  $fReadNumber14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PA"#) -}
dc554c15fa6745d82b7cf16c87b8dfc7
  $fReadNumber15 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Number)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadNumber17,
                  GrammarType2.$fReadNumber16
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Number>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Number>_R))))) -}
dc554c15fa6745d82b7cf16c87b8dfc7
  $fReadNumber16 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Number -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Number -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.TRI) -}
ff77d1a8bd0ef16a490b70a28a840282
  $fReadNumber17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TRI"#) -}
dc554c15fa6745d82b7cf16c87b8dfc7
  $fReadNumber18 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Number)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadNumber20,
                  GrammarType2.$fReadNumber19
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Number>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Number>_R))))) -}
dc554c15fa6745d82b7cf16c87b8dfc7
  $fReadNumber19 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Number -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Number -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.DU) -}
dc554c15fa6745d82b7cf16c87b8dfc7
  $fReadNumber2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarType2.Number
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarType2.Number
                   GrammarType2.$fReadNumber3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarType2.Number>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarType2.Number>_R)))) -}
156fde3551f4cfd6773729fff6400e2c
  $fReadNumber20 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DU"#) -}
dc554c15fa6745d82b7cf16c87b8dfc7
  $fReadNumber21 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Number)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadNumber23,
                  GrammarType2.$fReadNumber22
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Number>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Number>_R))))) -}
dc554c15fa6745d82b7cf16c87b8dfc7
  $fReadNumber22 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Number -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Number -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.SG) -}
ff2cd48929e6e67d5a76eeba27e955c4
  $fReadNumber23 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SG"#) -}
dc554c15fa6745d82b7cf16c87b8dfc7
  $fReadNumber3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Number -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarType2.Number -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarType2.Number
                   GrammarType2.$fReadNumber4
                   eta
                   @ b
                   eta1) -}
dc554c15fa6745d82b7cf16c87b8dfc7
  $fReadNumber4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Number)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Number)
                   GrammarType2.$fReadNumber21
                   GrammarType2.$fReadNumber5) -}
dc554c15fa6745d82b7cf16c87b8dfc7
  $fReadNumber5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Number)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Number)
                   GrammarType2.$fReadNumber18
                   GrammarType2.$fReadNumber6) -}
dc554c15fa6745d82b7cf16c87b8dfc7
  $fReadNumber6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Number)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Number)
                   GrammarType2.$fReadNumber15
                   GrammarType2.$fReadNumber7) -}
dc554c15fa6745d82b7cf16c87b8dfc7
  $fReadNumber7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Number)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Number)
                   GrammarType2.$fReadNumber12
                   GrammarType2.$fReadNumber8) -}
dc554c15fa6745d82b7cf16c87b8dfc7
  $fReadNumber8 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Number)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Number)
                   GrammarType2.$fReadNumber9
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Number))) -}
dc554c15fa6745d82b7cf16c87b8dfc7
  $fReadNumber9 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Number)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadNumber11,
                  GrammarType2.$fReadNumber10
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Number>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Number>_R))))) -}
dc554c15fa6745d82b7cf16c87b8dfc7
  $fReadNumber_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [GrammarType2.Number]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadNumber1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarType2.Number]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarType2.Number]>_R))) -}
dc554c15fa6745d82b7cf16c87b8dfc7
  $fReadNumber_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Number
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadNumber2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarType2.Number>_R)) -}
dc554c15fa6745d82b7cf16c87b8dfc7
  $fReadNumber_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarType2.Number
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarType2.Number
                   GrammarType2.$fReadNumber_$creadPrec
                   eta) -}
dc554c15fa6745d82b7cf16c87b8dfc7
  $fReadNumber_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarType2.Number]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarType2.Number]
                   ((GrammarType2.$fReadNumber_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarType2.Number]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarType2.Number]>_R)
                      @ [GrammarType2.Number]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarType2.Number]))) -}
125a489a929ba59bfb3d55b4a92e21d5
  $fReadParticleSystem :: GHC.Read.Read GrammarType2.ParticleSystem
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.ParticleSystem
                  GrammarType2.$fReadParticleSystem_$creadsPrec
                  GrammarType2.$fReadParticleSystem_$sreadListDefault
                  GrammarType2.$fReadParticleSystem_$creadPrec
                  GrammarType2.$fReadParticleSystem_$creadListPrec -}
125a489a929ba59bfb3d55b4a92e21d5
  $fReadParticleSystem1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarType2.ParticleSystem] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarType2.ParticleSystem]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarType2.ParticleSystem
                   GrammarType2.$fReadParticleSystem2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarType2.ParticleSystem>_R))
                   @ b
                   eta1) -}
125a489a929ba59bfb3d55b4a92e21d5
  $fReadParticleSystem2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarType2.ParticleSystem
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarType2.ParticleSystem
                   GrammarType2.$fReadParticleSystem3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarType2.ParticleSystem>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarType2.ParticleSystem>_R)))) -}
125a489a929ba59bfb3d55b4a92e21d5
  $fReadParticleSystem3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.ParticleSystem -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: GrammarType2.ParticleSystem
                         -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 ->
                 GrammarType2.$wa1 ww1 @ b w1 }) -}
dc8d7b90a1c0874dfd73edb7e4b42f67
  $fReadParticleSystem4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ParticleSystem"#) -}
125a489a929ba59bfb3d55b4a92e21d5
  $fReadParticleSystem_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [GrammarType2.ParticleSystem]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadParticleSystem1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarType2.ParticleSystem]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarType2.ParticleSystem]>_R))) -}
125a489a929ba59bfb3d55b4a92e21d5
  $fReadParticleSystem_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      GrammarType2.ParticleSystem
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadParticleSystem2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarType2.ParticleSystem>_R)) -}
125a489a929ba59bfb3d55b4a92e21d5
  $fReadParticleSystem_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarType2.ParticleSystem
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadP.run
                   @ GrammarType2.ParticleSystem
                   ((GHC.Read.$fReadDouble10
                       @ GrammarType2.ParticleSystem
                       GrammarType2.$fReadParticleSystem3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                           <GrammarType2.ParticleSystem>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                      <GrammarType2.ParticleSystem>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <GrammarType2.ParticleSystem>_R)
                      @ GrammarType2.ParticleSystem
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ GrammarType2.ParticleSystem))) -}
125a489a929ba59bfb3d55b4a92e21d5
  $fReadParticleSystem_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarType2.ParticleSystem]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarType2.ParticleSystem]
                   ((GrammarType2.$fReadParticleSystem_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarType2.ParticleSystem]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarType2.ParticleSystem]>_R)
                      @ [GrammarType2.ParticleSystem]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarType2.ParticleSystem]))) -}
e885d3ffc1f7745e767bf38433d6405b
  $fReadPerson :: GHC.Read.Read GrammarType2.Person
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Person
                  GrammarType2.$fReadPerson_$s$dmreadsPrec
                  GrammarType2.$fReadPerson_$sreadListDefault
                  GrammarType2.$fReadPerson_$creadPrec
                  GrammarType2.$fReadPerson_$creadListPrec -}
e885d3ffc1f7745e767bf38433d6405b
  $fReadPerson1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarType2.Person] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarType2.Person]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarType2.Person
                   GrammarType2.$fReadPerson2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarType2.Person>_R))
                   @ b
                   eta1) -}
e885d3ffc1f7745e767bf38433d6405b
  $fReadPerson10 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Person)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadPerson12,
                  GrammarType2.$fReadPerson11
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Person>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Person>_R))))) -}
e885d3ffc1f7745e767bf38433d6405b
  $fReadPerson11 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Person -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Person -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.SECOND) -}
02d05d40db919d81df9bdc8ef69c6394
  $fReadPerson12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SECOND"#) -}
e885d3ffc1f7745e767bf38433d6405b
  $fReadPerson13 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Person)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadPerson15,
                  GrammarType2.$fReadPerson14
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Person>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Person>_R))))) -}
e885d3ffc1f7745e767bf38433d6405b
  $fReadPerson14 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Person -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Person -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.FIRST) -}
490b254baf9a60a8b796e8d70df2da3c
  $fReadPerson15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FIRST"#) -}
e885d3ffc1f7745e767bf38433d6405b
  $fReadPerson2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarType2.Person
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarType2.Person
                   GrammarType2.$fReadPerson3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarType2.Person>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarType2.Person>_R)))) -}
e885d3ffc1f7745e767bf38433d6405b
  $fReadPerson3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Person -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarType2.Person -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarType2.Person
                   GrammarType2.$fReadPerson4
                   eta
                   @ b
                   eta1) -}
e885d3ffc1f7745e767bf38433d6405b
  $fReadPerson4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Person)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Person)
                   GrammarType2.$fReadPerson13
                   GrammarType2.$fReadPerson5) -}
e885d3ffc1f7745e767bf38433d6405b
  $fReadPerson5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Person)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Person)
                   GrammarType2.$fReadPerson10
                   GrammarType2.$fReadPerson6) -}
e885d3ffc1f7745e767bf38433d6405b
  $fReadPerson6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Person)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Person)
                   GrammarType2.$fReadPerson7
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Person))) -}
e885d3ffc1f7745e767bf38433d6405b
  $fReadPerson7 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Person)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadPerson9,
                  GrammarType2.$fReadPerson8
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Person>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Person>_R))))) -}
e885d3ffc1f7745e767bf38433d6405b
  $fReadPerson8 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Person -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Person -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.THIRD) -}
1ae67b97b373a5e9715039291120bd33
  $fReadPerson9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "THIRD"#) -}
e885d3ffc1f7745e767bf38433d6405b
  $fReadPerson_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [GrammarType2.Person]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadPerson1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarType2.Person]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarType2.Person]>_R))) -}
e885d3ffc1f7745e767bf38433d6405b
  $fReadPerson_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Person
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadPerson2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarType2.Person>_R)) -}
e885d3ffc1f7745e767bf38433d6405b
  $fReadPerson_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarType2.Person
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarType2.Person
                   GrammarType2.$fReadPerson_$creadPrec
                   eta) -}
e885d3ffc1f7745e767bf38433d6405b
  $fReadPerson_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarType2.Person]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarType2.Person]
                   ((GrammarType2.$fReadPerson_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarType2.Person]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarType2.Person]>_R)
                      @ [GrammarType2.Person]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarType2.Person]))) -}
e950d26ec1212aa6dfda04b44113e591
  $fReadPolarity :: GHC.Read.Read GrammarType2.Polarity
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Polarity
                  GrammarType2.$fReadPolarity_$s$dmreadsPrec
                  GrammarType2.$fReadPolarity_$sreadListDefault
                  GrammarType2.$fReadPolarity_$creadPrec
                  GrammarType2.$fReadPolarity_$creadListPrec -}
e950d26ec1212aa6dfda04b44113e591
  $fReadPolarity1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarType2.Polarity] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarType2.Polarity]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarType2.Polarity
                   GrammarType2.$fReadPolarity2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarType2.Polarity>_R))
                   @ b
                   eta1) -}
e950d26ec1212aa6dfda04b44113e591
  $fReadPolarity10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Polarity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Polarity -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.AFF) -}
b335c5d8339d3c1eaebe43e188aa3b92
  $fReadPolarity11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AFF"#) -}
e950d26ec1212aa6dfda04b44113e591
  $fReadPolarity2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarType2.Polarity
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarType2.Polarity
                   GrammarType2.$fReadPolarity3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarType2.Polarity>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarType2.Polarity>_R)))) -}
e950d26ec1212aa6dfda04b44113e591
  $fReadPolarity3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Polarity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarType2.Polarity
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarType2.Polarity
                   GrammarType2.$fReadPolarity4
                   eta
                   @ b
                   eta1) -}
e950d26ec1212aa6dfda04b44113e591
  $fReadPolarity4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Polarity)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Polarity)
                   GrammarType2.$fReadPolarity9
                   GrammarType2.$fReadPolarity5) -}
e950d26ec1212aa6dfda04b44113e591
  $fReadPolarity5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Polarity)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Polarity)
                   GrammarType2.$fReadPolarity6
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           GrammarType2.Polarity))) -}
e950d26ec1212aa6dfda04b44113e591
  $fReadPolarity6 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Polarity)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadPolarity8,
                  GrammarType2.$fReadPolarity7
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Polarity>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Polarity>_R))))) -}
e950d26ec1212aa6dfda04b44113e591
  $fReadPolarity7 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Polarity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Polarity -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.NEG) -}
6dea4879ebb47a9f18e30241e2bacef4
  $fReadPolarity8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NEG"#) -}
e950d26ec1212aa6dfda04b44113e591
  $fReadPolarity9 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Polarity)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadPolarity11,
                  GrammarType2.$fReadPolarity10
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Polarity>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Polarity>_R))))) -}
e950d26ec1212aa6dfda04b44113e591
  $fReadPolarity_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [GrammarType2.Polarity]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadPolarity1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarType2.Polarity]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarType2.Polarity]>_R))) -}
e950d26ec1212aa6dfda04b44113e591
  $fReadPolarity_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Polarity
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadPolarity2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarType2.Polarity>_R)) -}
e950d26ec1212aa6dfda04b44113e591
  $fReadPolarity_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarType2.Polarity
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarType2.Polarity
                   GrammarType2.$fReadPolarity_$creadPrec
                   eta) -}
e950d26ec1212aa6dfda04b44113e591
  $fReadPolarity_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarType2.Polarity]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarType2.Polarity]
                   ((GrammarType2.$fReadPolarity_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarType2.Polarity]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarType2.Polarity]>_R)
                      @ [GrammarType2.Polarity]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarType2.Polarity]))) -}
6417e4f225623173ad75902202935d29
  $fReadSpecificity :: GHC.Read.Read GrammarType2.Specificity
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Specificity
                  GrammarType2.$fReadSpecificity_$s$dmreadsPrec
                  GrammarType2.$fReadSpecificity_$sreadListDefault
                  GrammarType2.$fReadSpecificity_$creadPrec
                  GrammarType2.$fReadSpecificity_$creadListPrec -}
6417e4f225623173ad75902202935d29
  $fReadSpecificity1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarType2.Specificity] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarType2.Specificity]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarType2.Specificity
                   GrammarType2.$fReadSpecificity2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarType2.Specificity>_R))
                   @ b
                   eta1) -}
6417e4f225623173ad75902202935d29
  $fReadSpecificity10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Specificity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Specificity
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.SPEC) -}
4b3e43f762ebcfceca8e1b14745149d8
  $fReadSpecificity11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SPEC"#) -}
6417e4f225623173ad75902202935d29
  $fReadSpecificity2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarType2.Specificity
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarType2.Specificity
                   GrammarType2.$fReadSpecificity3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarType2.Specificity>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarType2.Specificity>_R)))) -}
6417e4f225623173ad75902202935d29
  $fReadSpecificity3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Specificity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarType2.Specificity
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarType2.Specificity
                   GrammarType2.$fReadSpecificity4
                   eta
                   @ b
                   eta1) -}
6417e4f225623173ad75902202935d29
  $fReadSpecificity4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Specificity)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Specificity)
                   GrammarType2.$fReadSpecificity9
                   GrammarType2.$fReadSpecificity5) -}
6417e4f225623173ad75902202935d29
  $fReadSpecificity5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Specificity)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Specificity)
                   GrammarType2.$fReadSpecificity6
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           GrammarType2.Specificity))) -}
6417e4f225623173ad75902202935d29
  $fReadSpecificity6 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Specificity)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadSpecificity8,
                  GrammarType2.$fReadSpecificity7
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Specificity>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Specificity>_R))))) -}
6417e4f225623173ad75902202935d29
  $fReadSpecificity7 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Specificity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Specificity
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.NSPEC) -}
7f060ed682aea47e31c1cac8e6430284
  $fReadSpecificity8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NSPEC"#) -}
6417e4f225623173ad75902202935d29
  $fReadSpecificity9 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Specificity)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadSpecificity11,
                  GrammarType2.$fReadSpecificity10
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Specificity>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Specificity>_R))))) -}
6417e4f225623173ad75902202935d29
  $fReadSpecificity_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [GrammarType2.Specificity]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadSpecificity1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarType2.Specificity]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarType2.Specificity]>_R))) -}
6417e4f225623173ad75902202935d29
  $fReadSpecificity_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Specificity
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadSpecificity2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarType2.Specificity>_R)) -}
6417e4f225623173ad75902202935d29
  $fReadSpecificity_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarType2.Specificity
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarType2.Specificity
                   GrammarType2.$fReadSpecificity_$creadPrec
                   eta) -}
6417e4f225623173ad75902202935d29
  $fReadSpecificity_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarType2.Specificity]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarType2.Specificity]
                   ((GrammarType2.$fReadSpecificity_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarType2.Specificity]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarType2.Specificity]>_R)
                      @ [GrammarType2.Specificity]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarType2.Specificity]))) -}
4ff954811d952a50e05d52d81f3a558f
  $fReadTense :: GHC.Read.Read GrammarType2.Tense
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Tense
                  GrammarType2.$fReadTense_$s$dmreadsPrec
                  GrammarType2.$fReadTense_$sreadListDefault
                  GrammarType2.$fReadTense_$creadPrec
                  GrammarType2.$fReadTense_$creadListPrec -}
4ff954811d952a50e05d52d81f3a558f
  $fReadTense1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarType2.Tense] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarType2.Tense] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarType2.Tense
                   GrammarType2.$fReadTense2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarType2.Tense>_R))
                   @ b
                   eta1) -}
4ff954811d952a50e05d52d81f3a558f
  $fReadTense10 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Tense)
                   GrammarType2.$fReadTense19
                   GrammarType2.$fReadTense11) -}
4ff954811d952a50e05d52d81f3a558f
  $fReadTense11 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Tense)
                   GrammarType2.$fReadTense16
                   GrammarType2.$fReadTense12) -}
4ff954811d952a50e05d52d81f3a558f
  $fReadTense12 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Tense)
                   GrammarType2.$fReadTense13
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Tense))) -}
4ff954811d952a50e05d52d81f3a558f
  $fReadTense13 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Tense)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadTense15,
                  GrammarType2.$fReadTense14
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Tense>_R))))) -}
4ff954811d952a50e05d52d81f3a558f
  $fReadTense14 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.REMF) -}
2e3bfc3ff3490ce0eff900da10bcd54d
  $fReadTense15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "REMF"#) -}
4ff954811d952a50e05d52d81f3a558f
  $fReadTense16 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Tense)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadTense18,
                  GrammarType2.$fReadTense17
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Tense>_R))))) -}
4ff954811d952a50e05d52d81f3a558f
  $fReadTense17 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.IMMF) -}
a3aff2e994f22d801bf604c39b47f527
  $fReadTense18 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "IMMF"#) -}
4ff954811d952a50e05d52d81f3a558f
  $fReadTense19 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Tense)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadTense21,
                  GrammarType2.$fReadTense20
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Tense>_R))))) -}
4ff954811d952a50e05d52d81f3a558f
  $fReadTense2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarType2.Tense
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarType2.Tense
                   GrammarType2.$fReadTense3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarType2.Tense>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarType2.Tense>_R)))) -}
4ff954811d952a50e05d52d81f3a558f
  $fReadTense20 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.FUT) -}
0f894cc556179fdf53089fabceb642da
  $fReadTense21 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FUT"#) -}
4ff954811d952a50e05d52d81f3a558f
  $fReadTense22 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Tense)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadTense24,
                  GrammarType2.$fReadTense23
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Tense>_R))))) -}
4ff954811d952a50e05d52d81f3a558f
  $fReadTense23 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.NFUT) -}
7a72bd8306e928a53fae6b0ad5577fa3
  $fReadTense24 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NFUT"#) -}
4ff954811d952a50e05d52d81f3a558f
  $fReadTense25 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Tense)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadTense27,
                  GrammarType2.$fReadTense26
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Tense>_R))))) -}
4ff954811d952a50e05d52d81f3a558f
  $fReadTense26 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.PRS) -}
27bd253dfe4b621c7ab4e8ae09a580ac
  $fReadTense27 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PRS"#) -}
4ff954811d952a50e05d52d81f3a558f
  $fReadTense28 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Tense)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadTense30,
                  GrammarType2.$fReadTense29
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Tense>_R))))) -}
4ff954811d952a50e05d52d81f3a558f
  $fReadTense29 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.NPST) -}
4ff954811d952a50e05d52d81f3a558f
  $fReadTense3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarType2.Tense -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarType2.Tense
                   GrammarType2.$fReadTense4
                   eta
                   @ b
                   eta1) -}
300df378bd65944c549e213960fe0b88
  $fReadTense30 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NPST"#) -}
4ff954811d952a50e05d52d81f3a558f
  $fReadTense31 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Tense)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadTense33,
                  GrammarType2.$fReadTense32
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Tense>_R))))) -}
4ff954811d952a50e05d52d81f3a558f
  $fReadTense32 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.REC) -}
0f7db982b9a4766888487a01cd15ad55
  $fReadTense33 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "REC"#) -}
4ff954811d952a50e05d52d81f3a558f
  $fReadTense34 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Tense)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadTense36,
                  GrammarType2.$fReadTense35
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Tense>_R))))) -}
4ff954811d952a50e05d52d81f3a558f
  $fReadTense35 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.REM) -}
9d01c3b80f3db8a54cb2e5a5b24adc6d
  $fReadTense36 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "REM"#) -}
4ff954811d952a50e05d52d81f3a558f
  $fReadTense37 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Tense)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadTense39,
                  GrammarType2.$fReadTense38
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Tense>_R))))) -}
4ff954811d952a50e05d52d81f3a558f
  $fReadTense38 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.PST) -}
d765d6171fde4d58c25bce19c554e2e1
  $fReadTense39 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PST"#) -}
4ff954811d952a50e05d52d81f3a558f
  $fReadTense4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Tense)
                   GrammarType2.$fReadTense37
                   GrammarType2.$fReadTense5) -}
4ff954811d952a50e05d52d81f3a558f
  $fReadTense5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Tense)
                   GrammarType2.$fReadTense34
                   GrammarType2.$fReadTense6) -}
4ff954811d952a50e05d52d81f3a558f
  $fReadTense6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Tense)
                   GrammarType2.$fReadTense31
                   GrammarType2.$fReadTense7) -}
4ff954811d952a50e05d52d81f3a558f
  $fReadTense7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Tense)
                   GrammarType2.$fReadTense28
                   GrammarType2.$fReadTense8) -}
4ff954811d952a50e05d52d81f3a558f
  $fReadTense8 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Tense)
                   GrammarType2.$fReadTense25
                   GrammarType2.$fReadTense9) -}
4ff954811d952a50e05d52d81f3a558f
  $fReadTense9 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Tense)
                   GrammarType2.$fReadTense22
                   GrammarType2.$fReadTense10) -}
4ff954811d952a50e05d52d81f3a558f
  $fReadTense_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [GrammarType2.Tense]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadTense1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarType2.Tense]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarType2.Tense]>_R))) -}
4ff954811d952a50e05d52d81f3a558f
  $fReadTense_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Tense
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadTense2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarType2.Tense>_R)) -}
4ff954811d952a50e05d52d81f3a558f
  $fReadTense_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarType2.Tense
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarType2.Tense
                   GrammarType2.$fReadTense_$creadPrec
                   eta) -}
4ff954811d952a50e05d52d81f3a558f
  $fReadTense_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarType2.Tense]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarType2.Tense]
                   ((GrammarType2.$fReadTense_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarType2.Tense]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarType2.Tense]>_R)
                      @ [GrammarType2.Tense]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarType2.Tense]))) -}
1c835916f9c6590c31a144e0d776533f
  $fReadTransitivity :: GHC.Read.Read GrammarType2.Transitivity
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Transitivity
                  GrammarType2.$fReadTransitivity_$s$dmreadsPrec
                  GrammarType2.$fReadTransitivity_$sreadListDefault
                  GrammarType2.$fReadTransitivity_$creadPrec
                  GrammarType2.$fReadTransitivity_$creadListPrec -}
1c835916f9c6590c31a144e0d776533f
  $fReadTransitivity1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarType2.Transitivity] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarType2.Transitivity]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarType2.Transitivity
                   GrammarType2.$fReadTransitivity2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarType2.Transitivity>_R))
                   @ b
                   eta1) -}
1c835916f9c6590c31a144e0d776533f
  $fReadTransitivity10 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Transitivity)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadTransitivity12,
                  GrammarType2.$fReadTransitivity11
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Transitivity>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Transitivity>_R))))) -}
1c835916f9c6590c31a144e0d776533f
  $fReadTransitivity11 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Transitivity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Transitivity
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.TR) -}
e23f392a8d917d505ae2df7d55d2e1a8
  $fReadTransitivity12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TR"#) -}
1c835916f9c6590c31a144e0d776533f
  $fReadTransitivity13 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Transitivity)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadTransitivity15,
                  GrammarType2.$fReadTransitivity14
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Transitivity>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Transitivity>_R))))) -}
1c835916f9c6590c31a144e0d776533f
  $fReadTransitivity14 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Transitivity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Transitivity
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.INTR) -}
eb926e4172d3829d9f1489bf9aa4a215
  $fReadTransitivity15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "INTR"#) -}
1c835916f9c6590c31a144e0d776533f
  $fReadTransitivity2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarType2.Transitivity
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarType2.Transitivity
                   GrammarType2.$fReadTransitivity3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarType2.Transitivity>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarType2.Transitivity>_R)))) -}
1c835916f9c6590c31a144e0d776533f
  $fReadTransitivity3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Transitivity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarType2.Transitivity
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarType2.Transitivity
                   GrammarType2.$fReadTransitivity4
                   eta
                   @ b
                   eta1) -}
1c835916f9c6590c31a144e0d776533f
  $fReadTransitivity4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GrammarType2.Transitivity)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Transitivity)
                   GrammarType2.$fReadTransitivity13
                   GrammarType2.$fReadTransitivity5) -}
1c835916f9c6590c31a144e0d776533f
  $fReadTransitivity5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GrammarType2.Transitivity)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Transitivity)
                   GrammarType2.$fReadTransitivity10
                   GrammarType2.$fReadTransitivity6) -}
1c835916f9c6590c31a144e0d776533f
  $fReadTransitivity6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GrammarType2.Transitivity)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Transitivity)
                   GrammarType2.$fReadTransitivity7
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           GrammarType2.Transitivity))) -}
1c835916f9c6590c31a144e0d776533f
  $fReadTransitivity7 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Transitivity)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadTransitivity9,
                  GrammarType2.$fReadTransitivity8
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Transitivity>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Transitivity>_R))))) -}
1c835916f9c6590c31a144e0d776533f
  $fReadTransitivity8 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Transitivity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Transitivity
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.DITR) -}
235a23250dbbef3b0b9812790746a8b3
  $fReadTransitivity9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DITR"#) -}
1c835916f9c6590c31a144e0d776533f
  $fReadTransitivity_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [GrammarType2.Transitivity]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadTransitivity1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarType2.Transitivity]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarType2.Transitivity]>_R))) -}
1c835916f9c6590c31a144e0d776533f
  $fReadTransitivity_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Transitivity
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadTransitivity2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarType2.Transitivity>_R)) -}
1c835916f9c6590c31a144e0d776533f
  $fReadTransitivity_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarType2.Transitivity
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarType2.Transitivity
                   GrammarType2.$fReadTransitivity_$creadPrec
                   eta) -}
1c835916f9c6590c31a144e0d776533f
  $fReadTransitivity_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarType2.Transitivity]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarType2.Transitivity]
                   ((GrammarType2.$fReadTransitivity_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarType2.Transitivity]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarType2.Transitivity]>_R)
                      @ [GrammarType2.Transitivity]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarType2.Transitivity]))) -}
8b275556c515642f0f8313dbcecf6b7b
  $fReadVoice :: GHC.Read.Read GrammarType2.Voice
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Voice
                  GrammarType2.$fReadVoice_$s$dmreadsPrec
                  GrammarType2.$fReadVoice_$sreadListDefault
                  GrammarType2.$fReadVoice_$creadPrec
                  GrammarType2.$fReadVoice_$creadListPrec -}
8b275556c515642f0f8313dbcecf6b7b
  $fReadVoice1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarType2.Voice] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarType2.Voice] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarType2.Voice
                   GrammarType2.$fReadVoice2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarType2.Voice>_R))
                   @ b
                   eta1) -}
8b275556c515642f0f8313dbcecf6b7b
  $fReadVoice10 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Voice)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadVoice12,
                  GrammarType2.$fReadVoice11
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Voice>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Voice>_R))))) -}
8b275556c515642f0f8313dbcecf6b7b
  $fReadVoice11 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Voice -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Voice -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.MID) -}
7cc49bd404eabddd603ffc2f8a586455
  $fReadVoice12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "MID"#) -}
8b275556c515642f0f8313dbcecf6b7b
  $fReadVoice13 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Voice)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadVoice15,
                  GrammarType2.$fReadVoice14
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Voice>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Voice>_R))))) -}
8b275556c515642f0f8313dbcecf6b7b
  $fReadVoice14 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Voice -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Voice -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.ACT) -}
3ad1011e52478c56c152fa9a6fc95634
  $fReadVoice15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ACT"#) -}
8b275556c515642f0f8313dbcecf6b7b
  $fReadVoice2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarType2.Voice
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarType2.Voice
                   GrammarType2.$fReadVoice3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarType2.Voice>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarType2.Voice>_R)))) -}
8b275556c515642f0f8313dbcecf6b7b
  $fReadVoice3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Voice -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarType2.Voice -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarType2.Voice
                   GrammarType2.$fReadVoice4
                   eta
                   @ b
                   eta1) -}
8b275556c515642f0f8313dbcecf6b7b
  $fReadVoice4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Voice)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Voice)
                   GrammarType2.$fReadVoice13
                   GrammarType2.$fReadVoice5) -}
8b275556c515642f0f8313dbcecf6b7b
  $fReadVoice5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Voice)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Voice)
                   GrammarType2.$fReadVoice10
                   GrammarType2.$fReadVoice6) -}
8b275556c515642f0f8313dbcecf6b7b
  $fReadVoice6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Voice)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Voice)
                   GrammarType2.$fReadVoice7
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Voice))) -}
8b275556c515642f0f8313dbcecf6b7b
  $fReadVoice7 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Voice)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadVoice9,
                  GrammarType2.$fReadVoice8
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Voice>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Voice>_R))))) -}
8b275556c515642f0f8313dbcecf6b7b
  $fReadVoice8 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Voice -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Voice -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.PAS) -}
b74f4ec78ee40e2facf766e90ffc873c
  $fReadVoice9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PAS"#) -}
8b275556c515642f0f8313dbcecf6b7b
  $fReadVoice_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [GrammarType2.Voice]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadVoice1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarType2.Voice]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarType2.Voice]>_R))) -}
8b275556c515642f0f8313dbcecf6b7b
  $fReadVoice_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Voice
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadVoice2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarType2.Voice>_R)) -}
8b275556c515642f0f8313dbcecf6b7b
  $fReadVoice_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarType2.Voice
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarType2.Voice
                   GrammarType2.$fReadVoice_$creadPrec
                   eta) -}
8b275556c515642f0f8313dbcecf6b7b
  $fReadVoice_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarType2.Voice]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarType2.Voice]
                   ((GrammarType2.$fReadVoice_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarType2.Voice]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarType2.Voice]>_R)
                      @ [GrammarType2.Voice]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarType2.Voice]))) -}
ae1ee59187d5466e323897f7a019b5b8
  $fReadVolition :: GHC.Read.Read GrammarType2.Volition
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Volition
                  GrammarType2.$fReadVolition_$s$dmreadsPrec
                  GrammarType2.$fReadVolition_$sreadListDefault
                  GrammarType2.$fReadVolition_$creadPrec
                  GrammarType2.$fReadVolition_$creadListPrec -}
ae1ee59187d5466e323897f7a019b5b8
  $fReadVolition1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarType2.Volition] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarType2.Volition]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarType2.Volition
                   GrammarType2.$fReadVolition2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarType2.Volition>_R))
                   @ b
                   eta1) -}
ae1ee59187d5466e323897f7a019b5b8
  $fReadVolition10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Volition -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Volition -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.VOL) -}
3f1b3554c9f00817caa5676cedd18e41
  $fReadVolition11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "VOL"#) -}
ae1ee59187d5466e323897f7a019b5b8
  $fReadVolition2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarType2.Volition
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarType2.Volition
                   GrammarType2.$fReadVolition3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarType2.Volition>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarType2.Volition>_R)))) -}
ae1ee59187d5466e323897f7a019b5b8
  $fReadVolition3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Volition -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarType2.Volition
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarType2.Volition
                   GrammarType2.$fReadVolition4
                   eta
                   @ b
                   eta1) -}
ae1ee59187d5466e323897f7a019b5b8
  $fReadVolition4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Volition)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Volition)
                   GrammarType2.$fReadVolition9
                   GrammarType2.$fReadVolition5) -}
ae1ee59187d5466e323897f7a019b5b8
  $fReadVolition5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Volition)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Volition)
                   GrammarType2.$fReadVolition6
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           GrammarType2.Volition))) -}
ae1ee59187d5466e323897f7a019b5b8
  $fReadVolition6 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Volition)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadVolition8,
                  GrammarType2.$fReadVolition7
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Volition>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Volition>_R))))) -}
ae1ee59187d5466e323897f7a019b5b8
  $fReadVolition7 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Volition -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Volition -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.NVOL) -}
7a267d6878d7a83dee1a489f25fc061e
  $fReadVolition8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NVOL"#) -}
ae1ee59187d5466e323897f7a019b5b8
  $fReadVolition9 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Volition)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadVolition11,
                  GrammarType2.$fReadVolition10
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Volition>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Volition>_R))))) -}
ae1ee59187d5466e323897f7a019b5b8
  $fReadVolition_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [GrammarType2.Volition]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadVolition1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarType2.Volition]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarType2.Volition]>_R))) -}
ae1ee59187d5466e323897f7a019b5b8
  $fReadVolition_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Volition
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadVolition2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarType2.Volition>_R)) -}
ae1ee59187d5466e323897f7a019b5b8
  $fReadVolition_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarType2.Volition
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarType2.Volition
                   GrammarType2.$fReadVolition_$creadPrec
                   eta) -}
ae1ee59187d5466e323897f7a019b5b8
  $fReadVolition_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarType2.Volition]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarType2.Volition]
                   ((GrammarType2.$fReadVolition_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarType2.Volition]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarType2.Volition]>_R)
                      @ [GrammarType2.Volition]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarType2.Volition]))) -}
08fe611e10b39cec598d03993fbc490b
  $fShowAnimacy :: GHC.Show.Show GrammarType2.Animacy
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Animacy
                  GrammarType2.$fShowAnimacy_$cshowsPrec
                  GrammarType2.$fShowAnimacy_$cshow
                  GrammarType2.$fShowAnimacy_$cshowList -}
08fe611e10b39cec598d03993fbc490b
  $fShowAnimacy_$cshow :: GrammarType2.Animacy -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarType2.Animacy ->
                 GrammarType2.$fShowAnimacy_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
08fe611e10b39cec598d03993fbc490b
  $fShowAnimacy_$cshowList ::
    [GrammarType2.Animacy] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarType2.Animacy
                   GrammarType2.$w$cshowsPrec) -}
08fe611e10b39cec598d03993fbc490b
  $fShowAnimacy_$cshowsPrec ::
    GHC.Types.Int -> GrammarType2.Animacy -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: GrammarType2.Animacy
                   w2 :: GHC.Base.String ->
                 GrammarType2.$w$cshowsPrec w1 w2) -}
56c069b86a972ddd52b64b5a722f7b12
  $fShowAspect :: GHC.Show.Show GrammarType2.Aspect
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Aspect
                  GrammarType2.$fShowAspect_$cshowsPrec
                  GrammarType2.$fShowAspect_$cshow
                  GrammarType2.$fShowAspect_$cshowList -}
56c069b86a972ddd52b64b5a722f7b12
  $fShowAspect1 :: GrammarType2.Aspect -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarType2.Aspect eta :: GHC.Base.String ->
                 case ds of wild {
                   GrammarType2.PFV
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           GrammarType2.$fReadAspect11)
                        eta
                   GrammarType2.IPFV
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n GrammarType2.$fReadAspect8)
                        eta }) -}
56c069b86a972ddd52b64b5a722f7b12
  $fShowAspect_$cshow :: GrammarType2.Aspect -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarType2.Aspect ->
                 case x of wild {
                   GrammarType2.PFV -> GrammarType2.$fReadAspect11
                   GrammarType2.IPFV -> GrammarType2.$fReadAspect8 }) -}
56c069b86a972ddd52b64b5a722f7b12
  $fShowAspect_$cshowList :: [GrammarType2.Aspect] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarType2.Aspect
                   GrammarType2.$fShowAspect1) -}
56c069b86a972ddd52b64b5a722f7b12
  $fShowAspect_$cshowsPrec ::
    GHC.Types.Int -> GrammarType2.Aspect -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   ds1 :: GrammarType2.Aspect
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   GrammarType2.PFV
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           GrammarType2.$fReadAspect11)
                        eta
                   GrammarType2.IPFV
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n GrammarType2.$fReadAspect8)
                        eta }) -}
fcaa4072d88a1238ff7d9377b198162c
  $fShowCase :: GHC.Show.Show GrammarType2.Case
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Case
                  GrammarType2.$fShowCase_$cshowsPrec
                  GrammarType2.$fShowCase_$cshow
                  GrammarType2.$fShowCase_$cshowList -}
fcaa4072d88a1238ff7d9377b198162c
  $fShowCase_$cshow :: GrammarType2.Case -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarType2.Case ->
                 GrammarType2.$fShowCase_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
fcaa4072d88a1238ff7d9377b198162c
  $fShowCase_$cshowList :: [GrammarType2.Case] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarType2.Case
                   GrammarType2.$w$cshowsPrec1) -}
fcaa4072d88a1238ff7d9377b198162c
  $fShowCase_$cshowsPrec ::
    GHC.Types.Int -> GrammarType2.Case -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: GrammarType2.Case
                   w2 :: GHC.Base.String ->
                 GrammarType2.$w$cshowsPrec1 w1 w2) -}
ae15ce513899bbb81e1bdfe89e424f26
  $fShowDefiniteness :: GHC.Show.Show GrammarType2.Definiteness
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Definiteness
                  GrammarType2.$fShowDefiniteness_$cshowsPrec
                  GrammarType2.$fShowDefiniteness_$cshow
                  GrammarType2.$fShowDefiniteness_$cshowList -}
ae15ce513899bbb81e1bdfe89e424f26
  $fShowDefiniteness1 :: GrammarType2.Definiteness -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarType2.Definiteness eta :: GHC.Base.String ->
                 case ds of wild {
                   GrammarType2.DEF
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           GrammarType2.$fReadDefiniteness11)
                        eta
                   GrammarType2.INDF
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           GrammarType2.$fReadDefiniteness8)
                        eta }) -}
ae15ce513899bbb81e1bdfe89e424f26
  $fShowDefiniteness_$cshow ::
    GrammarType2.Definiteness -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarType2.Definiteness ->
                 case x of wild {
                   GrammarType2.DEF -> GrammarType2.$fReadDefiniteness11
                   GrammarType2.INDF -> GrammarType2.$fReadDefiniteness8 }) -}
ae15ce513899bbb81e1bdfe89e424f26
  $fShowDefiniteness_$cshowList ::
    [GrammarType2.Definiteness] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarType2.Definiteness
                   GrammarType2.$fShowDefiniteness1) -}
ae15ce513899bbb81e1bdfe89e424f26
  $fShowDefiniteness_$cshowsPrec ::
    GHC.Types.Int -> GrammarType2.Definiteness -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   ds1 :: GrammarType2.Definiteness
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   GrammarType2.DEF
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           GrammarType2.$fReadDefiniteness11)
                        eta
                   GrammarType2.INDF
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           GrammarType2.$fReadDefiniteness8)
                        eta }) -}
757b853fc306b345be9181f15f1f4033
  $fShowEvidentiality :: GHC.Show.Show GrammarType2.Evidentiality
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Evidentiality
                  GrammarType2.$fShowEvidentiality_$cshowsPrec
                  GrammarType2.$fShowEvidentiality_$cshow
                  GrammarType2.$fShowEvidentiality_$cshowList -}
757b853fc306b345be9181f15f1f4033
  $fShowEvidentiality_$cshow ::
    GrammarType2.Evidentiality -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarType2.Evidentiality ->
                 GrammarType2.$fShowEvidentiality_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
757b853fc306b345be9181f15f1f4033
  $fShowEvidentiality_$cshowList ::
    [GrammarType2.Evidentiality] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarType2.Evidentiality
                   GrammarType2.$w$cshowsPrec2) -}
757b853fc306b345be9181f15f1f4033
  $fShowEvidentiality_$cshowsPrec ::
    GHC.Types.Int -> GrammarType2.Evidentiality -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: GrammarType2.Evidentiality
                   w2 :: GHC.Base.String ->
                 GrammarType2.$w$cshowsPrec2 w1 w2) -}
8458b2ed20531adbd7e1f0415074af95
  $fShowExponentSystem :: GHC.Show.Show GrammarType2.ExponentSystem
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.ExponentSystem
                  GrammarType2.$fShowExponentSystem_$cshowsPrec1
                  GrammarType2.$fShowExponentSystem_$cshow
                  GrammarType2.$fShowExponentSystem_$cshowList -}
8458b2ed20531adbd7e1f0415074af95
  $fShowExponentSystem1 ::
    GrammarType2.ExponentSystem -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: GrammarType2.ExponentSystem
                   w1 :: GHC.Base.String ->
                 case w of ww { GrammarType2.ExponentSystem ww1 ->
                 GrammarType2.$w$cshowsPrec3 0 ww1 w1 }) -}
193238ad200d8ac0fa3f073c8566d3c0
  $fShowExponentSystem10 ::
    (PhonemeType2.Morpheme,
     (GrammarType2.Manifest GrammarType2.Gender,
      GrammarType2.Manifest GrammarType2.Animacy,
      GrammarType2.Manifest GrammarType2.Case,
      GrammarType2.Manifest GrammarType2.Number,
      GrammarType2.Manifest GrammarType2.Honorific,
      GrammarType2.Manifest GrammarType2.Definiteness,
      GrammarType2.Manifest GrammarType2.Specificity))
    -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ w3 :: (PhonemeType2.Morpheme,
                          (GrammarType2.Manifest GrammarType2.Gender,
                           GrammarType2.Manifest GrammarType2.Animacy,
                           GrammarType2.Manifest GrammarType2.Case,
                           GrammarType2.Manifest GrammarType2.Number,
                           GrammarType2.Manifest GrammarType2.Honorific,
                           GrammarType2.Manifest GrammarType2.Definiteness,
                           GrammarType2.Manifest GrammarType2.Specificity))
                   w4 :: GHC.Base.String[OneShot] ->
                 case w3 of ww { (,) ww1 ww2 ->
                 GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows9
                   (case ww1 of ww4 { PhonemeType2.Morpheme ww3 ->
                    PhonemeType2.$w$cshowsPrec4
                      0
                      ww3
                      (GHC.Types.:
                         @ GHC.Types.Char
                         GHC.Show.showList__1
                         (GHC.Show.$fShow(,)_$sgo
                            (\ w9 :: GHC.Base.String ->
                             case ww2 of ww5 { (,,,,,,) ww6 ww7 ww8 ww9 ww10 ww11 ww12 ->
                             GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.shows9
                               (let {
                                  a22 :: GHC.Base.String
                                  = GHC.Show.$fShow(,,,,,,)_$sgo
                                      (GrammarType2.$fShowExponentSystem_$cshowsPrec
                                         @ GrammarType2.Animacy
                                         GrammarType2.$fShowAnimacy
                                         GHC.Show.shows18
                                         ww7)
                                      (GHC.Types.:
                                         @ GHC.Show.ShowS
                                         (GrammarType2.$fShowExponentSystem_$cshowsPrec
                                            @ GrammarType2.Case
                                            GrammarType2.$fShowCase
                                            GHC.Show.shows18
                                            ww8)
                                         (GHC.Types.:
                                            @ GHC.Show.ShowS
                                            (GrammarType2.$fShowExponentSystem_$s$cshowsPrec1
                                               GHC.Show.shows18
                                               ww9)
                                            (GHC.Types.:
                                               @ GHC.Show.ShowS
                                               (GrammarType2.$fShowExponentSystem_$cshowsPrec
                                                  @ GrammarType2.Honorific
                                                  GrammarType2.$fShowHonorific
                                                  GHC.Show.shows18
                                                  ww10)
                                               (GHC.Types.:
                                                  @ GHC.Show.ShowS
                                                  (GrammarType2.$fShowExponentSystem_$cshowsPrec
                                                     @ GrammarType2.Definiteness
                                                     GrammarType2.$fShowDefiniteness
                                                     GHC.Show.shows18
                                                     ww11)
                                                  (GHC.Types.:
                                                     @ GHC.Show.ShowS
                                                     (GrammarType2.$fShowExponentSystem_$s$cshowsPrec
                                                        GHC.Show.shows18
                                                        ww12)
                                                     (GHC.Types.[] @ GHC.Show.ShowS))))))
                                      (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w9)
                                } in
                                case ww6 of wild {
                                  GrammarType2.NoManifest
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       GrammarType2.$fShowExponentSystem5
                                       (GHC.Types.: @ GHC.Types.Char GHC.Show.showList__1 a22)
                                  GrammarType2.Particle b1
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       GrammarType2.$fShowExponentSystem4
                                       (GrammarType2.$w$cshowsPrec4
                                          b1
                                          (GHC.Types.: @ GHC.Types.Char GHC.Show.showList__1 a22))
                                  GrammarType2.Exponent b1
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       GrammarType2.$fShowExponentSystem3
                                       (GrammarType2.$w$cshowsPrec4
                                          b1
                                          (GHC.Types.:
                                             @ GHC.Types.Char
                                             GHC.Show.showList__1
                                             a22)) }) })
                            (GHC.Types.[] @ GHC.Show.ShowS)
                            (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w4))) }) }) -}
69af027f1905dfb6a5d79fcde0306643
  $fShowExponentSystem2 ::
    (PhonemeType2.Morpheme,
     (GrammarType2.Manifest GrammarType2.Gender,
      GrammarType2.Manifest GrammarType2.Animacy,
      GrammarType2.Manifest GrammarType2.Case,
      GrammarType2.Manifest GrammarType2.Number,
      GrammarType2.Manifest GrammarType2.Honorific,
      GrammarType2.Manifest GrammarType2.Definiteness,
      GrammarType2.Manifest GrammarType2.Specificity))
    -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ w3 :: (PhonemeType2.Morpheme,
                          (GrammarType2.Manifest GrammarType2.Gender,
                           GrammarType2.Manifest GrammarType2.Animacy,
                           GrammarType2.Manifest GrammarType2.Case,
                           GrammarType2.Manifest GrammarType2.Number,
                           GrammarType2.Manifest GrammarType2.Honorific,
                           GrammarType2.Manifest GrammarType2.Definiteness,
                           GrammarType2.Manifest GrammarType2.Specificity))
                   w4 :: GHC.Base.String[OneShot] ->
                 case w3 of ww { (,) ww1 ww2 ->
                 GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows9
                   (case ww1 of ww4 { PhonemeType2.Morpheme ww3 ->
                    PhonemeType2.$w$cshowsPrec4
                      0
                      ww3
                      (GHC.Types.:
                         @ GHC.Types.Char
                         GHC.Show.showList__1
                         (GHC.Show.$fShow(,)_$sgo
                            (\ w9 :: GHC.Base.String ->
                             case ww2 of ww5 { (,,,,,,) ww6 ww7 ww8 ww9 ww10 ww11 ww12 ->
                             GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.shows9
                               (let {
                                  a22 :: GHC.Base.String
                                  = GHC.Show.$fShow(,,,,,,)_$sgo
                                      (GrammarType2.$fShowExponentSystem_$cshowsPrec
                                         @ GrammarType2.Animacy
                                         GrammarType2.$fShowAnimacy
                                         GHC.Show.shows18
                                         ww7)
                                      (GHC.Types.:
                                         @ GHC.Show.ShowS
                                         (GrammarType2.$fShowExponentSystem_$cshowsPrec
                                            @ GrammarType2.Case
                                            GrammarType2.$fShowCase
                                            GHC.Show.shows18
                                            ww8)
                                         (GHC.Types.:
                                            @ GHC.Show.ShowS
                                            (GrammarType2.$fShowExponentSystem_$s$cshowsPrec1
                                               GHC.Show.shows18
                                               ww9)
                                            (GHC.Types.:
                                               @ GHC.Show.ShowS
                                               (GrammarType2.$fShowExponentSystem_$cshowsPrec
                                                  @ GrammarType2.Honorific
                                                  GrammarType2.$fShowHonorific
                                                  GHC.Show.shows18
                                                  ww10)
                                               (GHC.Types.:
                                                  @ GHC.Show.ShowS
                                                  (GrammarType2.$fShowExponentSystem_$cshowsPrec
                                                     @ GrammarType2.Definiteness
                                                     GrammarType2.$fShowDefiniteness
                                                     GHC.Show.shows18
                                                     ww11)
                                                  (GHC.Types.:
                                                     @ GHC.Show.ShowS
                                                     (GrammarType2.$fShowExponentSystem_$s$cshowsPrec
                                                        GHC.Show.shows18
                                                        ww12)
                                                     (GHC.Types.[] @ GHC.Show.ShowS))))))
                                      (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w9)
                                } in
                                case ww6 of wild {
                                  GrammarType2.NoManifest
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       GrammarType2.$fShowExponentSystem5
                                       (GHC.Types.: @ GHC.Types.Char GHC.Show.showList__1 a22)
                                  GrammarType2.Particle b1
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       GrammarType2.$fShowExponentSystem4
                                       (GrammarType2.$w$cshowsPrec4
                                          b1
                                          (GHC.Types.: @ GHC.Types.Char GHC.Show.showList__1 a22))
                                  GrammarType2.Exponent b1
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       GrammarType2.$fShowExponentSystem3
                                       (GrammarType2.$w$cshowsPrec4
                                          b1
                                          (GHC.Types.:
                                             @ GHC.Types.Char
                                             GHC.Show.showList__1
                                             a22)) }) })
                            (GHC.Types.[] @ GHC.Show.ShowS)
                            (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w4))) }) }) -}
e7591fb5dc3f03b317554597bb1de724
  $fShowExponentSystem3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Exponent "#) -}
c9f663ecc4e90a9a61ef3d043827f9c4
  $fShowExponentSystem4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Particle "#) -}
e63d506dd8114bdc96e98e2cb6379bce
  $fShowExponentSystem5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NoManifest"#) -}
107d5dd41ad993a5aec4d125cf3184b5
  $fShowExponentSystem6 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11) -}
8fe6aa9e96e905c0048698c5d2bb81ad
  $fShowExponentSystem7 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   GrammarType2.$fShowExponentSystem5) -}
14a5340467d9b3904155b857597806ff
  $fShowExponentSystem8 ::
    (PhonemeType2.Morpheme,
     (GrammarType2.Manifest GrammarType2.Gender,
      GrammarType2.Manifest GrammarType2.Animacy,
      GrammarType2.Manifest GrammarType2.Case,
      GrammarType2.Manifest GrammarType2.Number,
      GrammarType2.Manifest GrammarType2.Honorific,
      GrammarType2.Manifest GrammarType2.Definiteness,
      GrammarType2.Manifest GrammarType2.Specificity))
    -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ w3 :: (PhonemeType2.Morpheme,
                          (GrammarType2.Manifest GrammarType2.Gender,
                           GrammarType2.Manifest GrammarType2.Animacy,
                           GrammarType2.Manifest GrammarType2.Case,
                           GrammarType2.Manifest GrammarType2.Number,
                           GrammarType2.Manifest GrammarType2.Honorific,
                           GrammarType2.Manifest GrammarType2.Definiteness,
                           GrammarType2.Manifest GrammarType2.Specificity))
                   w4 :: GHC.Base.String[OneShot] ->
                 case w3 of ww { (,) ww1 ww2 ->
                 GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows9
                   (case ww1 of ww4 { PhonemeType2.Morpheme ww3 ->
                    PhonemeType2.$w$cshowsPrec4
                      0
                      ww3
                      (GHC.Types.:
                         @ GHC.Types.Char
                         GHC.Show.showList__1
                         (GHC.Show.$fShow(,)_$sgo
                            (\ w9 :: GHC.Base.String ->
                             case ww2 of ww5 { (,,,,,,) ww6 ww7 ww8 ww9 ww10 ww11 ww12 ->
                             GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.shows9
                               (let {
                                  a22 :: GHC.Base.String
                                  = GHC.Show.$fShow(,,,,,,)_$sgo
                                      (GrammarType2.$fShowExponentSystem_$cshowsPrec
                                         @ GrammarType2.Animacy
                                         GrammarType2.$fShowAnimacy
                                         GHC.Show.shows18
                                         ww7)
                                      (GHC.Types.:
                                         @ GHC.Show.ShowS
                                         (GrammarType2.$fShowExponentSystem_$cshowsPrec
                                            @ GrammarType2.Case
                                            GrammarType2.$fShowCase
                                            GHC.Show.shows18
                                            ww8)
                                         (GHC.Types.:
                                            @ GHC.Show.ShowS
                                            (GrammarType2.$fShowExponentSystem_$s$cshowsPrec1
                                               GHC.Show.shows18
                                               ww9)
                                            (GHC.Types.:
                                               @ GHC.Show.ShowS
                                               (GrammarType2.$fShowExponentSystem_$cshowsPrec
                                                  @ GrammarType2.Honorific
                                                  GrammarType2.$fShowHonorific
                                                  GHC.Show.shows18
                                                  ww10)
                                               (GHC.Types.:
                                                  @ GHC.Show.ShowS
                                                  (GrammarType2.$fShowExponentSystem_$cshowsPrec
                                                     @ GrammarType2.Definiteness
                                                     GrammarType2.$fShowDefiniteness
                                                     GHC.Show.shows18
                                                     ww11)
                                                  (GHC.Types.:
                                                     @ GHC.Show.ShowS
                                                     (GrammarType2.$fShowExponentSystem_$s$cshowsPrec
                                                        GHC.Show.shows18
                                                        ww12)
                                                     (GHC.Types.[] @ GHC.Show.ShowS))))))
                                      (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w9)
                                } in
                                case ww6 of wild {
                                  GrammarType2.NoManifest
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       GrammarType2.$fShowExponentSystem5
                                       (GHC.Types.: @ GHC.Types.Char GHC.Show.showList__1 a22)
                                  GrammarType2.Particle b1
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       GrammarType2.$fShowExponentSystem4
                                       (GrammarType2.$w$cshowsPrec4
                                          b1
                                          (GHC.Types.: @ GHC.Types.Char GHC.Show.showList__1 a22))
                                  GrammarType2.Exponent b1
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       GrammarType2.$fShowExponentSystem3
                                       (GrammarType2.$w$cshowsPrec4
                                          b1
                                          (GHC.Types.:
                                             @ GHC.Types.Char
                                             GHC.Show.showList__1
                                             a22)) }) })
                            (GHC.Types.[] @ GHC.Show.ShowS)
                            (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w4))) }) }) -}
43d53fac9ca3c698a73e28a808a4d47a
  $fShowExponentSystem9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ExponentSystem "#) -}
8458b2ed20531adbd7e1f0415074af95
  $fShowExponentSystem_$cshow ::
    GrammarType2.ExponentSystem -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: GrammarType2.ExponentSystem ->
                 case w of ww { GrammarType2.ExponentSystem ww1 ->
                 GrammarType2.$w$cshow ww1 }) -}
8458b2ed20531adbd7e1f0415074af95
  $fShowExponentSystem_$cshowList ::
    [GrammarType2.ExponentSystem] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarType2.ExponentSystem
                   GrammarType2.$fShowExponentSystem1) -}
fd2e4f6f534fd240b9cde0b8f8a520af
  $fShowExponentSystem_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int -> GrammarType2.Manifest a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(U)><S,1*U>,
     Unfolding: (\ @ a22
                   $dShow :: GHC.Show.Show a22
                   ds :: GHC.Types.Int
                   ds1 :: GrammarType2.Manifest a22 ->
                 case ds1 of wild {
                   GrammarType2.NoManifest -> GrammarType2.$fShowExponentSystem7
                   GrammarType2.Particle b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.showsPrec
                            @ a22
                            $dShow
                            GrammarType2.$fShowExponentSystem6
                            b1
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> \ x1 :: GHC.Base.String ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             GrammarType2.$fShowExponentSystem4
                             (g x1)
                        GHC.Types.True
                        -> \ x1 :: GHC.Base.String ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                GrammarType2.$fShowExponentSystem4
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x1))) } }
                   GrammarType2.Exponent b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.showsPrec
                            @ a22
                            $dShow
                            GrammarType2.$fShowExponentSystem6
                            b1
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> \ x1 :: GHC.Base.String ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             GrammarType2.$fShowExponentSystem3
                             (g x1)
                        GHC.Types.True
                        -> \ x1 :: GHC.Base.String ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                GrammarType2.$fShowExponentSystem3
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x1))) } } }) -}
8458b2ed20531adbd7e1f0415074af95
  $fShowExponentSystem_$cshowsPrec1 ::
    GHC.Types.Int -> GrammarType2.ExponentSystem -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S,1*U(1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int
                   w1 :: GrammarType2.ExponentSystem
                   w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { GrammarType2.ExponentSystem ww3 ->
                 GrammarType2.$w$cshowsPrec3 ww1 ww3 w2 } }) -}
fd2e4f6f534fd240b9cde0b8f8a520af
  $fShowExponentSystem_$s$cshowsPrec ::
    GHC.Types.Int
    -> GrammarType2.Manifest GrammarType2.Specificity -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: GrammarType2.Manifest GrammarType2.Specificity
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   GrammarType2.NoManifest
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        GrammarType2.$fShowExponentSystem5
                        eta
                   GrammarType2.Particle b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            GrammarType2.$fShowExponentSystem4
                            (case b1 of wild2 {
                               GrammarType2.SPEC
                               -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadSpecificity11 x1
                               GrammarType2.NSPEC
                               -> GHC.Base.++
                                    @ GHC.Types.Char
                                    GrammarType2.$fReadSpecificity8
                                    x1 })
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } }
                   GrammarType2.Exponent b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ x1 :: GHC.Base.String[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            GrammarType2.$fShowExponentSystem3
                            (case b1 of wild2 {
                               GrammarType2.SPEC
                               -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadSpecificity11 x1
                               GrammarType2.NSPEC
                               -> GHC.Base.++
                                    @ GHC.Types.Char
                                    GrammarType2.$fReadSpecificity8
                                    x1 })
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta)) } } }) -}
fd2e4f6f534fd240b9cde0b8f8a520af
  $fShowExponentSystem_$s$cshowsPrec1 ::
    GHC.Types.Int
    -> GrammarType2.Manifest GrammarType2.Number -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: GrammarType2.Manifest GrammarType2.Number
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   GrammarType2.NoManifest
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        GrammarType2.$fShowExponentSystem5
                        eta
                   GrammarType2.Particle b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             GrammarType2.$fShowExponentSystem4
                             (GrammarType2.$w$cshowsPrec5 b1 eta)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                GrammarType2.$fShowExponentSystem4
                                (GrammarType2.$w$cshowsPrec5
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta))) } }
                   GrammarType2.Exponent b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             GrammarType2.$fShowExponentSystem3
                             (GrammarType2.$w$cshowsPrec5 b1 eta)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                GrammarType2.$fShowExponentSystem3
                                (GrammarType2.$w$cshowsPrec5
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 eta))) } } }) -}
fd2e4f6f534fd240b9cde0b8f8a520af
  $fShowExponentSystem_$s$cshowsPrec2 ::
    GHC.Types.Int
    -> GrammarType2.Manifest ([GrammarType2.Animacy], GHC.Types.Int)
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U> -}
fd2e4f6f534fd240b9cde0b8f8a520af
  $fShowExponentSystem_$s$cshowsPrec3 ::
    GHC.Types.Int
    -> GrammarType2.Manifest ([GrammarType2.Case], GHC.Types.Int)
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U> -}
fd2e4f6f534fd240b9cde0b8f8a520af
  $fShowExponentSystem_$s$cshowsPrec4 ::
    GHC.Types.Int
    -> GrammarType2.Manifest
         ([GrammarType2.Definiteness], GHC.Types.Int)
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U> -}
fd2e4f6f534fd240b9cde0b8f8a520af
  $fShowExponentSystem_$s$cshowsPrec5 ::
    GHC.Types.Int
    -> GrammarType2.Manifest ([GrammarType2.Gender], GHC.Types.Int)
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U> -}
fd2e4f6f534fd240b9cde0b8f8a520af
  $fShowExponentSystem_$s$cshowsPrec6 ::
    GHC.Types.Int
    -> GrammarType2.Manifest ([GrammarType2.Honorific], GHC.Types.Int)
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U> -}
fd2e4f6f534fd240b9cde0b8f8a520af
  $fShowExponentSystem_$s$cshowsPrec7 ::
    GHC.Types.Int
    -> GrammarType2.Manifest ([GrammarType2.Number], GHC.Types.Int)
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U> -}
fd2e4f6f534fd240b9cde0b8f8a520af
  $fShowExponentSystem_$s$cshowsPrec8 ::
    GHC.Types.Int
    -> GrammarType2.Manifest
         ([GrammarType2.Specificity], GHC.Types.Int)
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U> -}
498ce41f2238314803d9983a3ee7b9a8
  $fShowGender :: GHC.Show.Show GrammarType2.Gender
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Gender
                  GrammarType2.$fShowGender_$cshowsPrec
                  GrammarType2.$fShowGender_$cshow
                  GrammarType2.$fShowGender_$cshowList -}
498ce41f2238314803d9983a3ee7b9a8
  $fShowGender_$cshow :: GrammarType2.Gender -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarType2.Gender ->
                 GrammarType2.$fShowGender_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
498ce41f2238314803d9983a3ee7b9a8
  $fShowGender_$cshowList :: [GrammarType2.Gender] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarType2.Gender
                   GrammarType2.$w$cshowsPrec4) -}
498ce41f2238314803d9983a3ee7b9a8
  $fShowGender_$cshowsPrec ::
    GHC.Types.Int -> GrammarType2.Gender -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: GrammarType2.Gender
                   w2 :: GHC.Base.String ->
                 GrammarType2.$w$cshowsPrec4 w1 w2) -}
f1c45a0abc5686da3599290cbd333b39
  $fShowGrammarSystem :: GHC.Show.Show GrammarType2.GrammarSystem
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.GrammarSystem
                  GrammarType2.$fShowGrammarSystem_$cshowsPrec
                  GrammarType2.$fShowGrammarSystem_$cshow
                  GrammarType2.$fShowGrammarSystem_$cshowList -}
f1c45a0abc5686da3599290cbd333b39
  $fShowGrammarSystem1 ::
    GrammarType2.GrammarSystem -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: GrammarType2.GrammarSystem
                   w1 :: GHC.Base.String ->
                 case w of ww { GrammarType2.GrammarSystem ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 GrammarType2.$w$cshowsPrec6 0 ww1 ww2 ww3 ww4 ww5 ww6 ww7 w1 }) -}
f1c45a0abc5686da3599290cbd333b39
  $fShowGrammarSystem_$cshow ::
    GrammarType2.GrammarSystem -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarType2.GrammarSystem ->
                 GrammarType2.$fShowGrammarSystem_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
f1c45a0abc5686da3599290cbd333b39
  $fShowGrammarSystem_$cshowList ::
    [GrammarType2.GrammarSystem] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarType2.GrammarSystem
                   GrammarType2.$fShowGrammarSystem1) -}
f1c45a0abc5686da3599290cbd333b39
  $fShowGrammarSystem_$cshowsPrec ::
    GHC.Types.Int -> GrammarType2.GrammarSystem -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <S,1*U(U)><S,1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int
                   w1 :: GrammarType2.GrammarSystem
                   w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { GrammarType2.GrammarSystem ww3 ww4 ww5 ww6 ww7 ww8 ww9 ->
                 GrammarType2.$w$cshowsPrec6
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   w2 } }) -}
270aa74414213d38a897e2c2f04e2cb0
  $fShowHonorific :: GHC.Show.Show GrammarType2.Honorific
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Honorific
                  GrammarType2.$fShowHonorific_$cshowsPrec
                  GrammarType2.$fShowHonorific_$cshow
                  GrammarType2.$fShowHonorific_$cshowList -}
270aa74414213d38a897e2c2f04e2cb0
  $fShowHonorific1 :: GrammarType2.Honorific -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarType2.Honorific eta :: GHC.Base.String ->
                 case ds of wild {
                   GrammarType2.FAM
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           GrammarType2.$fReadHonorific11)
                        eta
                   GrammarType2.FORM
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           GrammarType2.$fReadHonorific8)
                        eta }) -}
270aa74414213d38a897e2c2f04e2cb0
  $fShowHonorific_$cshow :: GrammarType2.Honorific -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarType2.Honorific ->
                 case x of wild {
                   GrammarType2.FAM -> GrammarType2.$fReadHonorific11
                   GrammarType2.FORM -> GrammarType2.$fReadHonorific8 }) -}
270aa74414213d38a897e2c2f04e2cb0
  $fShowHonorific_$cshowList ::
    [GrammarType2.Honorific] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarType2.Honorific
                   GrammarType2.$fShowHonorific1) -}
270aa74414213d38a897e2c2f04e2cb0
  $fShowHonorific_$cshowsPrec ::
    GHC.Types.Int -> GrammarType2.Honorific -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   ds1 :: GrammarType2.Honorific
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   GrammarType2.FAM
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           GrammarType2.$fReadHonorific11)
                        eta
                   GrammarType2.FORM
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           GrammarType2.$fReadHonorific8)
                        eta }) -}
fd2e4f6f534fd240b9cde0b8f8a520af
  $fShowManifest ::
    GHC.Show.Show a => GHC.Show.Show (GrammarType2.Manifest a)
  DFunId[0]
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a22 $dShow :: GHC.Show.Show a22.
                  @ (GrammarType2.Manifest a22)
                  (GrammarType2.$fShowExponentSystem_$cshowsPrec @ a22 $dShow)
                  (GrammarType2.$fShowManifest_$cshow @ a22 $dShow)
                  (GrammarType2.$fShowManifest_$cshowList @ a22 $dShow) -}
b3e927a52a42f0d5f04a7011655fb331
  $fShowManifest2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0) -}
fd2e4f6f534fd240b9cde0b8f8a520af
  $fShowManifest_$cshow ::
    GHC.Show.Show a => GrammarType2.Manifest a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(1*C1(C1(C1(U))),A,A)><S,1*U>,
     Unfolding: (\ @ a22
                   $dShow :: GHC.Show.Show a22
                   x :: GrammarType2.Manifest a22 ->
                 case x of wild {
                   GrammarType2.NoManifest -> GrammarType2.$fShowExponentSystem5
                   GrammarType2.Particle b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        GrammarType2.$fShowExponentSystem4
                        (GHC.Show.showsPrec
                           @ a22
                           $dShow
                           GrammarType2.$fShowExponentSystem6
                           b1
                           (GHC.Types.[] @ GHC.Types.Char))
                   GrammarType2.Exponent b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        GrammarType2.$fShowExponentSystem3
                        (GHC.Show.showsPrec
                           @ a22
                           $dShow
                           GrammarType2.$fShowExponentSystem6
                           b1
                           (GHC.Types.[] @ GHC.Types.Char)) }) -}
fd2e4f6f534fd240b9cde0b8f8a520af
  $fShowManifest_$cshowList ::
    GHC.Show.Show a => [GrammarType2.Manifest a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a22
                   $dShow :: GHC.Show.Show a22
                   eta :: [GrammarType2.Manifest a22]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (GrammarType2.Manifest a22)
                   (GrammarType2.$fShowExponentSystem_$cshowsPrec
                      @ a22
                      $dShow
                      GrammarType2.$fShowManifest2)
                   eta
                   eta1) -}
b72254827f48011cc46d25b53a3dee43
  $fShowMood :: GHC.Show.Show GrammarType2.Mood
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Mood
                  GrammarType2.$fShowMood_$cshowsPrec
                  GrammarType2.$fShowMood_$cshow
                  GrammarType2.$fShowMood_$cshowList -}
b72254827f48011cc46d25b53a3dee43
  $fShowMood_$cshow :: GrammarType2.Mood -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarType2.Mood ->
                 GrammarType2.$fShowMood_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
b72254827f48011cc46d25b53a3dee43
  $fShowMood_$cshowList :: [GrammarType2.Mood] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarType2.Mood
                   GrammarType2.$w$cshowsPrec7) -}
b72254827f48011cc46d25b53a3dee43
  $fShowMood_$cshowsPrec ::
    GHC.Types.Int -> GrammarType2.Mood -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: GrammarType2.Mood
                   w2 :: GHC.Base.String ->
                 GrammarType2.$w$cshowsPrec7 w1 w2) -}
dc554c15fa6745d82b7cf16c87b8dfc7
  $fShowNumber :: GHC.Show.Show GrammarType2.Number
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Number
                  GrammarType2.$fShowNumber_$cshowsPrec
                  GrammarType2.$fShowNumber_$cshow
                  GrammarType2.$fShowNumber_$cshowList -}
dc554c15fa6745d82b7cf16c87b8dfc7
  $fShowNumber_$cshow :: GrammarType2.Number -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarType2.Number ->
                 GrammarType2.$fShowNumber_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
dc554c15fa6745d82b7cf16c87b8dfc7
  $fShowNumber_$cshowList :: [GrammarType2.Number] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarType2.Number
                   GrammarType2.$w$cshowsPrec5) -}
dc554c15fa6745d82b7cf16c87b8dfc7
  $fShowNumber_$cshowsPrec ::
    GHC.Types.Int -> GrammarType2.Number -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: GrammarType2.Number
                   w2 :: GHC.Base.String ->
                 GrammarType2.$w$cshowsPrec5 w1 w2) -}
125a489a929ba59bfb3d55b4a92e21d5
  $fShowParticleSystem :: GHC.Show.Show GrammarType2.ParticleSystem
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.ParticleSystem
                  GrammarType2.$fShowParticleSystem_$cshowsPrec
                  GrammarType2.$fShowParticleSystem_$cshow
                  GrammarType2.$fShowParticleSystem_$cshowList -}
125a489a929ba59bfb3d55b4a92e21d5
  $fShowParticleSystem1 ::
    GrammarType2.ParticleSystem -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: GrammarType2.ParticleSystem
                   w1 :: GHC.Base.String ->
                 case w of ww { GrammarType2.ParticleSystem ww1 ->
                 GrammarType2.$w$cshowsPrec8 0 ww1 w1 }) -}
f2de3964c15d69f1c821421259aece54
  $fShowParticleSystem2 ::
    (PhonemeType2.Morpheme,
     (GrammarType2.Manifest GrammarType2.Gender,
      GrammarType2.Manifest GrammarType2.Animacy,
      GrammarType2.Manifest GrammarType2.Case,
      GrammarType2.Manifest GrammarType2.Number,
      GrammarType2.Manifest GrammarType2.Honorific,
      GrammarType2.Manifest GrammarType2.Definiteness,
      GrammarType2.Manifest GrammarType2.Specificity))
    -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ w3 :: (PhonemeType2.Morpheme,
                          (GrammarType2.Manifest GrammarType2.Gender,
                           GrammarType2.Manifest GrammarType2.Animacy,
                           GrammarType2.Manifest GrammarType2.Case,
                           GrammarType2.Manifest GrammarType2.Number,
                           GrammarType2.Manifest GrammarType2.Honorific,
                           GrammarType2.Manifest GrammarType2.Definiteness,
                           GrammarType2.Manifest GrammarType2.Specificity))
                   w4 :: GHC.Base.String[OneShot] ->
                 case w3 of ww { (,) ww1 ww2 ->
                 GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows9
                   (case ww1 of ww4 { PhonemeType2.Morpheme ww3 ->
                    PhonemeType2.$w$cshowsPrec4
                      0
                      ww3
                      (GHC.Types.:
                         @ GHC.Types.Char
                         GHC.Show.showList__1
                         (GHC.Show.$fShow(,)_$sgo
                            (\ w9 :: GHC.Base.String ->
                             case ww2 of ww5 { (,,,,,,) ww6 ww7 ww8 ww9 ww10 ww11 ww12 ->
                             GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.shows9
                               (let {
                                  a22 :: GHC.Base.String
                                  = GHC.Show.$fShow(,,,,,,)_$sgo
                                      (GrammarType2.$fShowExponentSystem_$cshowsPrec
                                         @ GrammarType2.Animacy
                                         GrammarType2.$fShowAnimacy
                                         GHC.Show.shows18
                                         ww7)
                                      (GHC.Types.:
                                         @ GHC.Show.ShowS
                                         (GrammarType2.$fShowExponentSystem_$cshowsPrec
                                            @ GrammarType2.Case
                                            GrammarType2.$fShowCase
                                            GHC.Show.shows18
                                            ww8)
                                         (GHC.Types.:
                                            @ GHC.Show.ShowS
                                            (GrammarType2.$fShowExponentSystem_$s$cshowsPrec1
                                               GHC.Show.shows18
                                               ww9)
                                            (GHC.Types.:
                                               @ GHC.Show.ShowS
                                               (GrammarType2.$fShowExponentSystem_$cshowsPrec
                                                  @ GrammarType2.Honorific
                                                  GrammarType2.$fShowHonorific
                                                  GHC.Show.shows18
                                                  ww10)
                                               (GHC.Types.:
                                                  @ GHC.Show.ShowS
                                                  (GrammarType2.$fShowExponentSystem_$cshowsPrec
                                                     @ GrammarType2.Definiteness
                                                     GrammarType2.$fShowDefiniteness
                                                     GHC.Show.shows18
                                                     ww11)
                                                  (GHC.Types.:
                                                     @ GHC.Show.ShowS
                                                     (GrammarType2.$fShowExponentSystem_$s$cshowsPrec
                                                        GHC.Show.shows18
                                                        ww12)
                                                     (GHC.Types.[] @ GHC.Show.ShowS))))))
                                      (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w9)
                                } in
                                case ww6 of wild {
                                  GrammarType2.NoManifest
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       GrammarType2.$fShowExponentSystem5
                                       (GHC.Types.: @ GHC.Types.Char GHC.Show.showList__1 a22)
                                  GrammarType2.Particle b1
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       GrammarType2.$fShowExponentSystem4
                                       (GrammarType2.$w$cshowsPrec4
                                          b1
                                          (GHC.Types.: @ GHC.Types.Char GHC.Show.showList__1 a22))
                                  GrammarType2.Exponent b1
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       GrammarType2.$fShowExponentSystem3
                                       (GrammarType2.$w$cshowsPrec4
                                          b1
                                          (GHC.Types.:
                                             @ GHC.Types.Char
                                             GHC.Show.showList__1
                                             a22)) }) })
                            (GHC.Types.[] @ GHC.Show.ShowS)
                            (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w4))) }) }) -}
42c48f0cec184a12d9ec35945e3a2f1a
  $fShowParticleSystem3 ::
    (PhonemeType2.Morpheme,
     (GrammarType2.Manifest GrammarType2.Gender,
      GrammarType2.Manifest GrammarType2.Animacy,
      GrammarType2.Manifest GrammarType2.Case,
      GrammarType2.Manifest GrammarType2.Number,
      GrammarType2.Manifest GrammarType2.Honorific,
      GrammarType2.Manifest GrammarType2.Definiteness,
      GrammarType2.Manifest GrammarType2.Specificity))
    -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ w3 :: (PhonemeType2.Morpheme,
                          (GrammarType2.Manifest GrammarType2.Gender,
                           GrammarType2.Manifest GrammarType2.Animacy,
                           GrammarType2.Manifest GrammarType2.Case,
                           GrammarType2.Manifest GrammarType2.Number,
                           GrammarType2.Manifest GrammarType2.Honorific,
                           GrammarType2.Manifest GrammarType2.Definiteness,
                           GrammarType2.Manifest GrammarType2.Specificity))
                   w4 :: GHC.Base.String[OneShot] ->
                 case w3 of ww { (,) ww1 ww2 ->
                 GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows9
                   (case ww1 of ww4 { PhonemeType2.Morpheme ww3 ->
                    PhonemeType2.$w$cshowsPrec4
                      0
                      ww3
                      (GHC.Types.:
                         @ GHC.Types.Char
                         GHC.Show.showList__1
                         (GHC.Show.$fShow(,)_$sgo
                            (\ w9 :: GHC.Base.String ->
                             case ww2 of ww5 { (,,,,,,) ww6 ww7 ww8 ww9 ww10 ww11 ww12 ->
                             GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.shows9
                               (let {
                                  a22 :: GHC.Base.String
                                  = GHC.Show.$fShow(,,,,,,)_$sgo
                                      (GrammarType2.$fShowExponentSystem_$cshowsPrec
                                         @ GrammarType2.Animacy
                                         GrammarType2.$fShowAnimacy
                                         GHC.Show.shows18
                                         ww7)
                                      (GHC.Types.:
                                         @ GHC.Show.ShowS
                                         (GrammarType2.$fShowExponentSystem_$cshowsPrec
                                            @ GrammarType2.Case
                                            GrammarType2.$fShowCase
                                            GHC.Show.shows18
                                            ww8)
                                         (GHC.Types.:
                                            @ GHC.Show.ShowS
                                            (GrammarType2.$fShowExponentSystem_$s$cshowsPrec1
                                               GHC.Show.shows18
                                               ww9)
                                            (GHC.Types.:
                                               @ GHC.Show.ShowS
                                               (GrammarType2.$fShowExponentSystem_$cshowsPrec
                                                  @ GrammarType2.Honorific
                                                  GrammarType2.$fShowHonorific
                                                  GHC.Show.shows18
                                                  ww10)
                                               (GHC.Types.:
                                                  @ GHC.Show.ShowS
                                                  (GrammarType2.$fShowExponentSystem_$cshowsPrec
                                                     @ GrammarType2.Definiteness
                                                     GrammarType2.$fShowDefiniteness
                                                     GHC.Show.shows18
                                                     ww11)
                                                  (GHC.Types.:
                                                     @ GHC.Show.ShowS
                                                     (GrammarType2.$fShowExponentSystem_$s$cshowsPrec
                                                        GHC.Show.shows18
                                                        ww12)
                                                     (GHC.Types.[] @ GHC.Show.ShowS))))))
                                      (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w9)
                                } in
                                case ww6 of wild {
                                  GrammarType2.NoManifest
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       GrammarType2.$fShowExponentSystem5
                                       (GHC.Types.: @ GHC.Types.Char GHC.Show.showList__1 a22)
                                  GrammarType2.Particle b1
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       GrammarType2.$fShowExponentSystem4
                                       (GrammarType2.$w$cshowsPrec4
                                          b1
                                          (GHC.Types.: @ GHC.Types.Char GHC.Show.showList__1 a22))
                                  GrammarType2.Exponent b1
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       GrammarType2.$fShowExponentSystem3
                                       (GrammarType2.$w$cshowsPrec4
                                          b1
                                          (GHC.Types.:
                                             @ GHC.Types.Char
                                             GHC.Show.showList__1
                                             a22)) }) })
                            (GHC.Types.[] @ GHC.Show.ShowS)
                            (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w4))) }) }) -}
b4cb9c2555714a0de8cf36fa85feb8da
  $fShowParticleSystem4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ParticleSystem "#) -}
ea66fd46a197cc77b67dffe7e4cb32ce
  $fShowParticleSystem5 ::
    (PhonemeType2.Morpheme,
     (GrammarType2.Manifest GrammarType2.Gender,
      GrammarType2.Manifest GrammarType2.Animacy,
      GrammarType2.Manifest GrammarType2.Case,
      GrammarType2.Manifest GrammarType2.Number,
      GrammarType2.Manifest GrammarType2.Honorific,
      GrammarType2.Manifest GrammarType2.Definiteness,
      GrammarType2.Manifest GrammarType2.Specificity))
    -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ w3 :: (PhonemeType2.Morpheme,
                          (GrammarType2.Manifest GrammarType2.Gender,
                           GrammarType2.Manifest GrammarType2.Animacy,
                           GrammarType2.Manifest GrammarType2.Case,
                           GrammarType2.Manifest GrammarType2.Number,
                           GrammarType2.Manifest GrammarType2.Honorific,
                           GrammarType2.Manifest GrammarType2.Definiteness,
                           GrammarType2.Manifest GrammarType2.Specificity))
                   w4 :: GHC.Base.String[OneShot] ->
                 case w3 of ww { (,) ww1 ww2 ->
                 GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows9
                   (case ww1 of ww4 { PhonemeType2.Morpheme ww3 ->
                    PhonemeType2.$w$cshowsPrec4
                      0
                      ww3
                      (GHC.Types.:
                         @ GHC.Types.Char
                         GHC.Show.showList__1
                         (GHC.Show.$fShow(,)_$sgo
                            (\ w9 :: GHC.Base.String ->
                             case ww2 of ww5 { (,,,,,,) ww6 ww7 ww8 ww9 ww10 ww11 ww12 ->
                             GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.shows9
                               (let {
                                  a22 :: GHC.Base.String
                                  = GHC.Show.$fShow(,,,,,,)_$sgo
                                      (GrammarType2.$fShowExponentSystem_$cshowsPrec
                                         @ GrammarType2.Animacy
                                         GrammarType2.$fShowAnimacy
                                         GHC.Show.shows18
                                         ww7)
                                      (GHC.Types.:
                                         @ GHC.Show.ShowS
                                         (GrammarType2.$fShowExponentSystem_$cshowsPrec
                                            @ GrammarType2.Case
                                            GrammarType2.$fShowCase
                                            GHC.Show.shows18
                                            ww8)
                                         (GHC.Types.:
                                            @ GHC.Show.ShowS
                                            (GrammarType2.$fShowExponentSystem_$s$cshowsPrec1
                                               GHC.Show.shows18
                                               ww9)
                                            (GHC.Types.:
                                               @ GHC.Show.ShowS
                                               (GrammarType2.$fShowExponentSystem_$cshowsPrec
                                                  @ GrammarType2.Honorific
                                                  GrammarType2.$fShowHonorific
                                                  GHC.Show.shows18
                                                  ww10)
                                               (GHC.Types.:
                                                  @ GHC.Show.ShowS
                                                  (GrammarType2.$fShowExponentSystem_$cshowsPrec
                                                     @ GrammarType2.Definiteness
                                                     GrammarType2.$fShowDefiniteness
                                                     GHC.Show.shows18
                                                     ww11)
                                                  (GHC.Types.:
                                                     @ GHC.Show.ShowS
                                                     (GrammarType2.$fShowExponentSystem_$s$cshowsPrec
                                                        GHC.Show.shows18
                                                        ww12)
                                                     (GHC.Types.[] @ GHC.Show.ShowS))))))
                                      (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w9)
                                } in
                                case ww6 of wild {
                                  GrammarType2.NoManifest
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       GrammarType2.$fShowExponentSystem5
                                       (GHC.Types.: @ GHC.Types.Char GHC.Show.showList__1 a22)
                                  GrammarType2.Particle b1
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       GrammarType2.$fShowExponentSystem4
                                       (GrammarType2.$w$cshowsPrec4
                                          b1
                                          (GHC.Types.: @ GHC.Types.Char GHC.Show.showList__1 a22))
                                  GrammarType2.Exponent b1
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       GrammarType2.$fShowExponentSystem3
                                       (GrammarType2.$w$cshowsPrec4
                                          b1
                                          (GHC.Types.:
                                             @ GHC.Types.Char
                                             GHC.Show.showList__1
                                             a22)) }) })
                            (GHC.Types.[] @ GHC.Show.ShowS)
                            (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w4))) }) }) -}
125a489a929ba59bfb3d55b4a92e21d5
  $fShowParticleSystem_$cshow ::
    GrammarType2.ParticleSystem -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: GrammarType2.ParticleSystem ->
                 case w of ww { GrammarType2.ParticleSystem ww1 ->
                 GrammarType2.$w$cshow1 ww1 }) -}
125a489a929ba59bfb3d55b4a92e21d5
  $fShowParticleSystem_$cshowList ::
    [GrammarType2.ParticleSystem] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarType2.ParticleSystem
                   GrammarType2.$fShowParticleSystem1) -}
125a489a929ba59bfb3d55b4a92e21d5
  $fShowParticleSystem_$cshowsPrec ::
    GHC.Types.Int -> GrammarType2.ParticleSystem -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S,1*U(1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int
                   w1 :: GrammarType2.ParticleSystem
                   w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { GrammarType2.ParticleSystem ww3 ->
                 GrammarType2.$w$cshowsPrec8 ww1 ww3 w2 } }) -}
e885d3ffc1f7745e767bf38433d6405b
  $fShowPerson :: GHC.Show.Show GrammarType2.Person
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Person
                  GrammarType2.$fShowPerson_$cshowsPrec
                  GrammarType2.$fShowPerson_$cshow
                  GrammarType2.$fShowPerson_$cshowList -}
e885d3ffc1f7745e767bf38433d6405b
  $fShowPerson_$cshow :: GrammarType2.Person -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarType2.Person ->
                 case x of wild {
                   GrammarType2.FIRST -> GrammarType2.$fReadPerson15
                   GrammarType2.SECOND -> GrammarType2.$fReadPerson12
                   GrammarType2.THIRD -> GrammarType2.$fReadPerson9 }) -}
e885d3ffc1f7745e767bf38433d6405b
  $fShowPerson_$cshowList :: [GrammarType2.Person] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarType2.Person
                   GrammarType2.$w$cshowsPrec9) -}
e885d3ffc1f7745e767bf38433d6405b
  $fShowPerson_$cshowsPrec ::
    GHC.Types.Int -> GrammarType2.Person -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: GrammarType2.Person
                   w2 :: GHC.Base.String ->
                 GrammarType2.$w$cshowsPrec9 w1 w2) -}
e950d26ec1212aa6dfda04b44113e591
  $fShowPolarity :: GHC.Show.Show GrammarType2.Polarity
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Polarity
                  GrammarType2.$fShowPolarity_$cshowsPrec
                  GrammarType2.$fShowPolarity_$cshow
                  GrammarType2.$fShowPolarity_$cshowList -}
e950d26ec1212aa6dfda04b44113e591
  $fShowPolarity1 :: GrammarType2.Polarity -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarType2.Polarity eta :: GHC.Base.String ->
                 case ds of wild {
                   GrammarType2.AFF
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           GrammarType2.$fReadPolarity11)
                        eta
                   GrammarType2.NEG
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           GrammarType2.$fReadPolarity8)
                        eta }) -}
e950d26ec1212aa6dfda04b44113e591
  $fShowPolarity_$cshow :: GrammarType2.Polarity -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarType2.Polarity ->
                 case x of wild {
                   GrammarType2.AFF -> GrammarType2.$fReadPolarity11
                   GrammarType2.NEG -> GrammarType2.$fReadPolarity8 }) -}
e950d26ec1212aa6dfda04b44113e591
  $fShowPolarity_$cshowList ::
    [GrammarType2.Polarity] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarType2.Polarity
                   GrammarType2.$fShowPolarity1) -}
e950d26ec1212aa6dfda04b44113e591
  $fShowPolarity_$cshowsPrec ::
    GHC.Types.Int -> GrammarType2.Polarity -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   ds1 :: GrammarType2.Polarity
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   GrammarType2.AFF
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           GrammarType2.$fReadPolarity11)
                        eta
                   GrammarType2.NEG
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           GrammarType2.$fReadPolarity8)
                        eta }) -}
6417e4f225623173ad75902202935d29
  $fShowSpecificity :: GHC.Show.Show GrammarType2.Specificity
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Specificity
                  GrammarType2.$fShowSpecificity_$cshowsPrec
                  GrammarType2.$fShowSpecificity_$cshow
                  GrammarType2.$fShowSpecificity_$cshowList -}
6417e4f225623173ad75902202935d29
  $fShowSpecificity1 :: GrammarType2.Specificity -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarType2.Specificity eta :: GHC.Base.String ->
                 case ds of wild {
                   GrammarType2.SPEC
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           GrammarType2.$fReadSpecificity11)
                        eta
                   GrammarType2.NSPEC
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           GrammarType2.$fReadSpecificity8)
                        eta }) -}
6417e4f225623173ad75902202935d29
  $fShowSpecificity_$cshow ::
    GrammarType2.Specificity -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarType2.Specificity ->
                 case x of wild {
                   GrammarType2.SPEC -> GrammarType2.$fReadSpecificity11
                   GrammarType2.NSPEC -> GrammarType2.$fReadSpecificity8 }) -}
6417e4f225623173ad75902202935d29
  $fShowSpecificity_$cshowList ::
    [GrammarType2.Specificity] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarType2.Specificity
                   GrammarType2.$fShowSpecificity1) -}
6417e4f225623173ad75902202935d29
  $fShowSpecificity_$cshowsPrec ::
    GHC.Types.Int -> GrammarType2.Specificity -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   ds1 :: GrammarType2.Specificity
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   GrammarType2.SPEC
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           GrammarType2.$fReadSpecificity11)
                        eta
                   GrammarType2.NSPEC
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           GrammarType2.$fReadSpecificity8)
                        eta }) -}
4ff954811d952a50e05d52d81f3a558f
  $fShowTense :: GHC.Show.Show GrammarType2.Tense
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Tense
                  GrammarType2.$fShowTense_$cshowsPrec
                  GrammarType2.$fShowTense_$cshow
                  GrammarType2.$fShowTense_$cshowList -}
4ff954811d952a50e05d52d81f3a558f
  $fShowTense_$cshow :: GrammarType2.Tense -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarType2.Tense ->
                 GrammarType2.$fShowTense_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
4ff954811d952a50e05d52d81f3a558f
  $fShowTense_$cshowList :: [GrammarType2.Tense] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarType2.Tense
                   GrammarType2.$w$cshowsPrec10) -}
4ff954811d952a50e05d52d81f3a558f
  $fShowTense_$cshowsPrec ::
    GHC.Types.Int -> GrammarType2.Tense -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: GrammarType2.Tense
                   w2 :: GHC.Base.String ->
                 GrammarType2.$w$cshowsPrec10 w1 w2) -}
1c835916f9c6590c31a144e0d776533f
  $fShowTransitivity :: GHC.Show.Show GrammarType2.Transitivity
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Transitivity
                  GrammarType2.$fShowTransitivity_$cshowsPrec
                  GrammarType2.$fShowTransitivity_$cshow
                  GrammarType2.$fShowTransitivity_$cshowList -}
1c835916f9c6590c31a144e0d776533f
  $fShowTransitivity_$cshow ::
    GrammarType2.Transitivity -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarType2.Transitivity ->
                 case x of wild {
                   GrammarType2.INTR -> GrammarType2.$fReadTransitivity15
                   GrammarType2.TR -> GrammarType2.$fReadTransitivity12
                   GrammarType2.DITR -> GrammarType2.$fReadTransitivity9 }) -}
1c835916f9c6590c31a144e0d776533f
  $fShowTransitivity_$cshowList ::
    [GrammarType2.Transitivity] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarType2.Transitivity
                   GrammarType2.$w$cshowsPrec11) -}
1c835916f9c6590c31a144e0d776533f
  $fShowTransitivity_$cshowsPrec ::
    GHC.Types.Int -> GrammarType2.Transitivity -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: GrammarType2.Transitivity
                   w2 :: GHC.Base.String ->
                 GrammarType2.$w$cshowsPrec11 w1 w2) -}
8b275556c515642f0f8313dbcecf6b7b
  $fShowVoice :: GHC.Show.Show GrammarType2.Voice
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Voice
                  GrammarType2.$fShowVoice_$cshowsPrec
                  GrammarType2.$fShowVoice_$cshow
                  GrammarType2.$fShowVoice_$cshowList -}
8b275556c515642f0f8313dbcecf6b7b
  $fShowVoice_$cshow :: GrammarType2.Voice -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarType2.Voice ->
                 case x of wild {
                   GrammarType2.ACT -> GrammarType2.$fReadVoice15
                   GrammarType2.MID -> GrammarType2.$fReadVoice12
                   GrammarType2.PAS -> GrammarType2.$fReadVoice9 }) -}
8b275556c515642f0f8313dbcecf6b7b
  $fShowVoice_$cshowList :: [GrammarType2.Voice] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarType2.Voice
                   GrammarType2.$w$cshowsPrec12) -}
8b275556c515642f0f8313dbcecf6b7b
  $fShowVoice_$cshowsPrec ::
    GHC.Types.Int -> GrammarType2.Voice -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: GrammarType2.Voice
                   w2 :: GHC.Base.String ->
                 GrammarType2.$w$cshowsPrec12 w1 w2) -}
ae1ee59187d5466e323897f7a019b5b8
  $fShowVolition :: GHC.Show.Show GrammarType2.Volition
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Volition
                  GrammarType2.$fShowVolition_$cshowsPrec
                  GrammarType2.$fShowVolition_$cshow
                  GrammarType2.$fShowVolition_$cshowList -}
ae1ee59187d5466e323897f7a019b5b8
  $fShowVolition1 :: GrammarType2.Volition -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarType2.Volition eta :: GHC.Base.String ->
                 case ds of wild {
                   GrammarType2.VOL
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           GrammarType2.$fReadVolition11)
                        eta
                   GrammarType2.NVOL
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           GrammarType2.$fReadVolition8)
                        eta }) -}
ae1ee59187d5466e323897f7a019b5b8
  $fShowVolition_$cshow :: GrammarType2.Volition -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarType2.Volition ->
                 case x of wild {
                   GrammarType2.VOL -> GrammarType2.$fReadVolition11
                   GrammarType2.NVOL -> GrammarType2.$fReadVolition8 }) -}
ae1ee59187d5466e323897f7a019b5b8
  $fShowVolition_$cshowList ::
    [GrammarType2.Volition] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarType2.Volition
                   GrammarType2.$fShowVolition1) -}
ae1ee59187d5466e323897f7a019b5b8
  $fShowVolition_$cshowsPrec ::
    GHC.Types.Int -> GrammarType2.Volition -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   ds1 :: GrammarType2.Volition
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   GrammarType2.VOL
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           GrammarType2.$fReadVolition11)
                        eta
                   GrammarType2.NVOL
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           GrammarType2.$fReadVolition8)
                        eta }) -}
a58226069b25de4760acdfacf8c7425c
  $w$cshow ::
    [(PhonemeType2.Morpheme,
      (GrammarType2.Manifest GrammarType2.Gender,
       GrammarType2.Manifest GrammarType2.Animacy,
       GrammarType2.Manifest GrammarType2.Case,
       GrammarType2.Manifest GrammarType2.Number,
       GrammarType2.Manifest GrammarType2.Honorific,
       GrammarType2.Manifest GrammarType2.Definiteness,
       GrammarType2.Manifest GrammarType2.Specificity))]
    -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>, Inline: [0],
     Unfolding: (\ ww :: [(PhonemeType2.Morpheme,
                           (GrammarType2.Manifest GrammarType2.Gender,
                            GrammarType2.Manifest GrammarType2.Animacy,
                            GrammarType2.Manifest GrammarType2.Case,
                            GrammarType2.Manifest GrammarType2.Number,
                            GrammarType2.Manifest GrammarType2.Honorific,
                            GrammarType2.Manifest GrammarType2.Definiteness,
                            GrammarType2.Manifest GrammarType2.Specificity))] ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   GrammarType2.$fShowExponentSystem9
                   (GHC.Show.showList__
                      @ (PhonemeType2.Morpheme,
                         (GrammarType2.Manifest GrammarType2.Gender,
                          GrammarType2.Manifest GrammarType2.Animacy,
                          GrammarType2.Manifest GrammarType2.Case,
                          GrammarType2.Manifest GrammarType2.Number,
                          GrammarType2.Manifest GrammarType2.Honorific,
                          GrammarType2.Manifest GrammarType2.Definiteness,
                          GrammarType2.Manifest GrammarType2.Specificity))
                      GrammarType2.$fShowExponentSystem10
                      ww
                      (GHC.Types.[] @ GHC.Types.Char))) -}
32fd0d82fe2ca2802d1492f00c7f3bd6
  $w$cshow1 ::
    [(PhonemeType2.Morpheme,
      (GrammarType2.Manifest GrammarType2.Gender,
       GrammarType2.Manifest GrammarType2.Animacy,
       GrammarType2.Manifest GrammarType2.Case,
       GrammarType2.Manifest GrammarType2.Number,
       GrammarType2.Manifest GrammarType2.Honorific,
       GrammarType2.Manifest GrammarType2.Definiteness,
       GrammarType2.Manifest GrammarType2.Specificity))]
    -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>, Inline: [0],
     Unfolding: (\ ww :: [(PhonemeType2.Morpheme,
                           (GrammarType2.Manifest GrammarType2.Gender,
                            GrammarType2.Manifest GrammarType2.Animacy,
                            GrammarType2.Manifest GrammarType2.Case,
                            GrammarType2.Manifest GrammarType2.Number,
                            GrammarType2.Manifest GrammarType2.Honorific,
                            GrammarType2.Manifest GrammarType2.Definiteness,
                            GrammarType2.Manifest GrammarType2.Specificity))] ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   GrammarType2.$fShowParticleSystem4
                   (GHC.Show.showList__
                      @ (PhonemeType2.Morpheme,
                         (GrammarType2.Manifest GrammarType2.Gender,
                          GrammarType2.Manifest GrammarType2.Animacy,
                          GrammarType2.Manifest GrammarType2.Case,
                          GrammarType2.Manifest GrammarType2.Number,
                          GrammarType2.Manifest GrammarType2.Honorific,
                          GrammarType2.Manifest GrammarType2.Definiteness,
                          GrammarType2.Manifest GrammarType2.Specificity))
                      GrammarType2.$fShowParticleSystem5
                      ww
                      (GHC.Types.[] @ GHC.Types.Char))) -}
08fe611e10b39cec598d03993fbc490b
  $w$cshowsPrec ::
    GrammarType2.Animacy -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: GrammarType2.Animacy w1 :: GHC.Base.String ->
                 case w of wild {
                   GrammarType2.AN
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadAnimacy23 w1
                   GrammarType2.HUM
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadAnimacy20 w1
                   GrammarType2.NHUM
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadAnimacy17 w1
                   GrammarType2.ZO
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadAnimacy14 w1
                   GrammarType2.INAN
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        GrammarType2.$fReadAnimacy11
                        w1 }) -}
fcaa4072d88a1238ff7d9377b198162c
  $w$cshowsPrec1 ::
    GrammarType2.Case -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: GrammarType2.Case w1 :: GHC.Base.String ->
                 case w of wild {
                   GrammarType2.NOM
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadCase43 w1
                   GrammarType2.ACC
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadCase40 w1
                   GrammarType2.ERG
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadCase37 w1
                   GrammarType2.GEN
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadCase34 w1
                   GrammarType2.DAT
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadCase31 w1
                   GrammarType2.LOC
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadCase28 w1
                   GrammarType2.PREP
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadCase25 w1
                   GrammarType2.ABL
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadCase22 w1
                   GrammarType2.INS
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadCase19 w1
                   GrammarType2.VOC
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadCase16 w1 }) -}
4ff954811d952a50e05d52d81f3a558f
  $w$cshowsPrec10 ::
    GrammarType2.Tense -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: GrammarType2.Tense w1 :: GHC.Base.String ->
                 case w of wild {
                   GrammarType2.PST
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadTense39 w1
                   GrammarType2.REM
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadTense36 w1
                   GrammarType2.REC
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadTense33 w1
                   GrammarType2.NPST
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadTense30 w1
                   GrammarType2.PRS
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadTense27 w1
                   GrammarType2.NFUT
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadTense24 w1
                   GrammarType2.FUT
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadTense21 w1
                   GrammarType2.IMMF
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadTense18 w1
                   GrammarType2.REMF
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadTense15 w1 }) -}
1c835916f9c6590c31a144e0d776533f
  $w$cshowsPrec11 ::
    GrammarType2.Transitivity -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: GrammarType2.Transitivity
                   w1 :: GHC.Base.String ->
                 case w of wild {
                   GrammarType2.INTR
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        GrammarType2.$fReadTransitivity15
                        w1
                   GrammarType2.TR
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        GrammarType2.$fReadTransitivity12
                        w1
                   GrammarType2.DITR
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        GrammarType2.$fReadTransitivity9
                        w1 }) -}
8b275556c515642f0f8313dbcecf6b7b
  $w$cshowsPrec12 ::
    GrammarType2.Voice -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: GrammarType2.Voice w1 :: GHC.Base.String ->
                 case w of wild {
                   GrammarType2.ACT
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadVoice15 w1
                   GrammarType2.MID
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadVoice12 w1
                   GrammarType2.PAS
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadVoice9 w1 }) -}
757b853fc306b345be9181f15f1f4033
  $w$cshowsPrec2 ::
    GrammarType2.Evidentiality -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: GrammarType2.Evidentiality
                   w1 :: GHC.Base.String ->
                 case w of wild {
                   GrammarType2.EXP
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        GrammarType2.$fReadEvidentiality43
                        w1
                   GrammarType2.SENS
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        GrammarType2.$fReadEvidentiality40
                        w1
                   GrammarType2.VIS
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        GrammarType2.$fReadEvidentiality37
                        w1
                   GrammarType2.NVIS
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        GrammarType2.$fReadEvidentiality34
                        w1
                   GrammarType2.AUD
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        GrammarType2.$fReadEvidentiality31
                        w1
                   GrammarType2.INFER
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        GrammarType2.$fReadEvidentiality28
                        w1
                   GrammarType2.REP
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        GrammarType2.$fReadEvidentiality25
                        w1
                   GrammarType2.HSY
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        GrammarType2.$fReadEvidentiality22
                        w1
                   GrammarType2.QUO
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        GrammarType2.$fReadEvidentiality19
                        w1
                   GrammarType2.ASS
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        GrammarType2.$fReadEvidentiality16
                        w1 }) -}
dbabf5ff944178cd6a00c7eb72c8cf85
  $w$cshowsPrec3 ::
    GHC.Prim.Int#
    -> [(PhonemeType2.Morpheme,
         (GrammarType2.Manifest GrammarType2.Gender,
          GrammarType2.Manifest GrammarType2.Animacy,
          GrammarType2.Manifest GrammarType2.Case,
          GrammarType2.Manifest GrammarType2.Number,
          GrammarType2.Manifest GrammarType2.Honorific,
          GrammarType2.Manifest GrammarType2.Definiteness,
          GrammarType2.Manifest GrammarType2.Specificity))]
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: [(PhonemeType2.Morpheme,
                            (GrammarType2.Manifest GrammarType2.Gender,
                             GrammarType2.Manifest GrammarType2.Animacy,
                             GrammarType2.Manifest GrammarType2.Case,
                             GrammarType2.Manifest GrammarType2.Number,
                             GrammarType2.Manifest GrammarType2.Honorific,
                             GrammarType2.Manifest GrammarType2.Definiteness,
                             GrammarType2.Manifest GrammarType2.Specificity))]
                   w :: GHC.Base.String ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        GrammarType2.$fShowExponentSystem9
                        (GHC.Show.showList__
                           @ (PhonemeType2.Morpheme,
                              (GrammarType2.Manifest GrammarType2.Gender,
                               GrammarType2.Manifest GrammarType2.Animacy,
                               GrammarType2.Manifest GrammarType2.Case,
                               GrammarType2.Manifest GrammarType2.Number,
                               GrammarType2.Manifest GrammarType2.Honorific,
                               GrammarType2.Manifest GrammarType2.Definiteness,
                               GrammarType2.Manifest GrammarType2.Specificity))
                           GrammarType2.$fShowExponentSystem8
                           ww1
                           w)
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           GrammarType2.$fShowExponentSystem9
                           (GHC.Show.showList__
                              @ (PhonemeType2.Morpheme,
                                 (GrammarType2.Manifest GrammarType2.Gender,
                                  GrammarType2.Manifest GrammarType2.Animacy,
                                  GrammarType2.Manifest GrammarType2.Case,
                                  GrammarType2.Manifest GrammarType2.Number,
                                  GrammarType2.Manifest GrammarType2.Honorific,
                                  GrammarType2.Manifest GrammarType2.Definiteness,
                                  GrammarType2.Manifest GrammarType2.Specificity))
                              GrammarType2.$fShowExponentSystem2
                              ww1
                              (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w))) }) -}
498ce41f2238314803d9983a3ee7b9a8
  $w$cshowsPrec4 ::
    GrammarType2.Gender -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: GrammarType2.Gender w1 :: GHC.Base.String ->
                 case w of wild {
                   GrammarType2.M
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadGender19 w1
                   GrammarType2.F
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadGender16 w1
                   GrammarType2.COM
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadGender13 w1
                   GrammarType2.N
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        GrammarType2.$fReadGender10
                        w1 }) -}
dc554c15fa6745d82b7cf16c87b8dfc7
  $w$cshowsPrec5 ::
    GrammarType2.Number -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: GrammarType2.Number w1 :: GHC.Base.String ->
                 case w of wild {
                   GrammarType2.SG
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadNumber23 w1
                   GrammarType2.DU
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadNumber20 w1
                   GrammarType2.TRI
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadNumber17 w1
                   GrammarType2.PA
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadNumber14 w1
                   GrammarType2.PL
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        GrammarType2.$fReadNumber11
                        w1 }) -}
1eb0ade2924d0b12f456df82a00d3511
  $w$cshowsPrec6 ::
    GHC.Prim.Int#
    -> GrammarType2.Manifest ([GrammarType2.Gender], GHC.Types.Int)
    -> GrammarType2.Manifest ([GrammarType2.Animacy], GHC.Types.Int)
    -> GrammarType2.Manifest ([GrammarType2.Case], GHC.Types.Int)
    -> GrammarType2.Manifest ([GrammarType2.Number], GHC.Types.Int)
    -> GrammarType2.Manifest ([GrammarType2.Honorific], GHC.Types.Int)
    -> GrammarType2.Manifest
         ([GrammarType2.Definiteness], GHC.Types.Int)
    -> GrammarType2.Manifest
         ([GrammarType2.Specificity], GHC.Types.Int)
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 9,
     Strictness: <L,U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,U>,
     Inline: [0] -}
b72254827f48011cc46d25b53a3dee43
  $w$cshowsPrec7 ::
    GrammarType2.Mood -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: GrammarType2.Mood w1 :: GHC.Base.String ->
                 case w of wild {
                   GrammarType2.IND
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadMood43 w1
                   GrammarType2.IRR
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadMood40 w1
                   GrammarType2.DEO
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadMood37 w1
                   GrammarType2.IMP
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadMood34 w1
                   GrammarType2.JUS
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadMood31 w1
                   GrammarType2.OPT
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadMood28 w1
                   GrammarType2.EPIS
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadMood25 w1
                   GrammarType2.SBJV
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadMood22 w1
                   GrammarType2.POT
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadMood19 w1
                   GrammarType2.COND
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadMood16 w1 }) -}
d48fd1d6986eef66c99ad5ad479f0962
  $w$cshowsPrec8 ::
    GHC.Prim.Int#
    -> [(PhonemeType2.Morpheme,
         (GrammarType2.Manifest GrammarType2.Gender,
          GrammarType2.Manifest GrammarType2.Animacy,
          GrammarType2.Manifest GrammarType2.Case,
          GrammarType2.Manifest GrammarType2.Number,
          GrammarType2.Manifest GrammarType2.Honorific,
          GrammarType2.Manifest GrammarType2.Definiteness,
          GrammarType2.Manifest GrammarType2.Specificity))]
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: [(PhonemeType2.Morpheme,
                            (GrammarType2.Manifest GrammarType2.Gender,
                             GrammarType2.Manifest GrammarType2.Animacy,
                             GrammarType2.Manifest GrammarType2.Case,
                             GrammarType2.Manifest GrammarType2.Number,
                             GrammarType2.Manifest GrammarType2.Honorific,
                             GrammarType2.Manifest GrammarType2.Definiteness,
                             GrammarType2.Manifest GrammarType2.Specificity))]
                   w :: GHC.Base.String ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        GrammarType2.$fShowParticleSystem4
                        (GHC.Show.showList__
                           @ (PhonemeType2.Morpheme,
                              (GrammarType2.Manifest GrammarType2.Gender,
                               GrammarType2.Manifest GrammarType2.Animacy,
                               GrammarType2.Manifest GrammarType2.Case,
                               GrammarType2.Manifest GrammarType2.Number,
                               GrammarType2.Manifest GrammarType2.Honorific,
                               GrammarType2.Manifest GrammarType2.Definiteness,
                               GrammarType2.Manifest GrammarType2.Specificity))
                           GrammarType2.$fShowParticleSystem3
                           ww1
                           w)
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           GrammarType2.$fShowParticleSystem4
                           (GHC.Show.showList__
                              @ (PhonemeType2.Morpheme,
                                 (GrammarType2.Manifest GrammarType2.Gender,
                                  GrammarType2.Manifest GrammarType2.Animacy,
                                  GrammarType2.Manifest GrammarType2.Case,
                                  GrammarType2.Manifest GrammarType2.Number,
                                  GrammarType2.Manifest GrammarType2.Honorific,
                                  GrammarType2.Manifest GrammarType2.Definiteness,
                                  GrammarType2.Manifest GrammarType2.Specificity))
                              GrammarType2.$fShowParticleSystem2
                              ww1
                              (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w))) }) -}
e885d3ffc1f7745e767bf38433d6405b
  $w$cshowsPrec9 ::
    GrammarType2.Person -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: GrammarType2.Person w1 :: GHC.Base.String ->
                 case w of wild {
                   GrammarType2.FIRST
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadPerson15 w1
                   GrammarType2.SECOND
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadPerson12 w1
                   GrammarType2.THIRD
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadPerson9 w1 }) -}
8458b2ed20531adbd7e1f0415074af95
  $wa ::
    GHC.Prim.Int#
    -> forall b.
       (GrammarType2.ExponentSystem -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   @ b
                   w :: GrammarType2.ExponentSystem
                        -> Text.ParserCombinators.ReadP.P b ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 10) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> let {
                        lvl93 :: Text.ParserCombinators.ReadP.P b
                        = let {
                            lvl94 :: Text.ParserCombinators.ReadP.P b
                            = GHC.Read.$wa
                                @ (PhonemeType2.Morpheme,
                                   (GrammarType2.Manifest GrammarType2.Gender,
                                    GrammarType2.Manifest GrammarType2.Animacy,
                                    GrammarType2.Manifest GrammarType2.Case,
                                    GrammarType2.Manifest GrammarType2.Number,
                                    GrammarType2.Manifest GrammarType2.Honorific,
                                    GrammarType2.Manifest GrammarType2.Definiteness,
                                    GrammarType2.Manifest GrammarType2.Specificity))
                                GrammarType2.$fReadExponentSystem5
                                  `cast`
                                (Trans
                                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                    <(PhonemeType2.Morpheme,
                                                      (GrammarType2.Manifest GrammarType2.Gender,
                                                       GrammarType2.Manifest GrammarType2.Animacy,
                                                       GrammarType2.Manifest GrammarType2.Case,
                                                       GrammarType2.Manifest GrammarType2.Number,
                                                       GrammarType2.Manifest GrammarType2.Honorific,
                                                       GrammarType2.Manifest
                                                         GrammarType2.Definiteness,
                                                       GrammarType2.Manifest
                                                         GrammarType2.Specificity))>_R))
                                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                               <(PhonemeType2.Morpheme,
                                                 (GrammarType2.Manifest GrammarType2.Gender,
                                                  GrammarType2.Manifest GrammarType2.Animacy,
                                                  GrammarType2.Manifest GrammarType2.Case,
                                                  GrammarType2.Manifest GrammarType2.Number,
                                                  GrammarType2.Manifest GrammarType2.Honorific,
                                                  GrammarType2.Manifest GrammarType2.Definiteness,
                                                  GrammarType2.Manifest
                                                    GrammarType2.Specificity))>_R)))
                                @ b
                                (\ a22 :: [(PhonemeType2.Morpheme,
                                            (GrammarType2.Manifest GrammarType2.Gender,
                                             GrammarType2.Manifest GrammarType2.Animacy,
                                             GrammarType2.Manifest GrammarType2.Case,
                                             GrammarType2.Manifest GrammarType2.Number,
                                             GrammarType2.Manifest GrammarType2.Honorific,
                                             GrammarType2.Manifest GrammarType2.Definiteness,
                                             GrammarType2.Manifest GrammarType2.Specificity))] ->
                                 w (GrammarType2.ExponentSystem a22))
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ a98 :: Text.Read.Lex.Lexeme ->
                             case a98 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a22
                               -> case GHC.Base.eqString
                                         a22
                                         GrammarType2.$fReadExponentSystem4 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl94 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                             Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl93) -}
                        = \ w2 :: () -> lvl93
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ a98 :: GHC.Base.String ->
                         (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                           `cast`
                         (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                           @ b
                           k) }) -}
125a489a929ba59bfb3d55b4a92e21d5
  $wa1 ::
    GHC.Prim.Int#
    -> forall b.
       (GrammarType2.ParticleSystem -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   @ b
                   w :: GrammarType2.ParticleSystem
                        -> Text.ParserCombinators.ReadP.P b ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 10) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> let {
                        lvl93 :: Text.ParserCombinators.ReadP.P b
                        = let {
                            lvl94 :: Text.ParserCombinators.ReadP.P b
                            = GHC.Read.$wa
                                @ (PhonemeType2.Morpheme,
                                   (GrammarType2.Manifest GrammarType2.Gender,
                                    GrammarType2.Manifest GrammarType2.Animacy,
                                    GrammarType2.Manifest GrammarType2.Case,
                                    GrammarType2.Manifest GrammarType2.Number,
                                    GrammarType2.Manifest GrammarType2.Honorific,
                                    GrammarType2.Manifest GrammarType2.Definiteness,
                                    GrammarType2.Manifest GrammarType2.Specificity))
                                GrammarType2.$fReadExponentSystem5
                                  `cast`
                                (Trans
                                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                    <(PhonemeType2.Morpheme,
                                                      (GrammarType2.Manifest GrammarType2.Gender,
                                                       GrammarType2.Manifest GrammarType2.Animacy,
                                                       GrammarType2.Manifest GrammarType2.Case,
                                                       GrammarType2.Manifest GrammarType2.Number,
                                                       GrammarType2.Manifest GrammarType2.Honorific,
                                                       GrammarType2.Manifest
                                                         GrammarType2.Definiteness,
                                                       GrammarType2.Manifest
                                                         GrammarType2.Specificity))>_R))
                                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                               <(PhonemeType2.Morpheme,
                                                 (GrammarType2.Manifest GrammarType2.Gender,
                                                  GrammarType2.Manifest GrammarType2.Animacy,
                                                  GrammarType2.Manifest GrammarType2.Case,
                                                  GrammarType2.Manifest GrammarType2.Number,
                                                  GrammarType2.Manifest GrammarType2.Honorific,
                                                  GrammarType2.Manifest GrammarType2.Definiteness,
                                                  GrammarType2.Manifest
                                                    GrammarType2.Specificity))>_R)))
                                @ b
                                (\ a22 :: [(PhonemeType2.Morpheme,
                                            (GrammarType2.Manifest GrammarType2.Gender,
                                             GrammarType2.Manifest GrammarType2.Animacy,
                                             GrammarType2.Manifest GrammarType2.Case,
                                             GrammarType2.Manifest GrammarType2.Number,
                                             GrammarType2.Manifest GrammarType2.Honorific,
                                             GrammarType2.Manifest GrammarType2.Definiteness,
                                             GrammarType2.Manifest GrammarType2.Specificity))] ->
                                 w (GrammarType2.ParticleSystem a22))
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ a98 :: Text.Read.Lex.Lexeme ->
                             case a98 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a22
                               -> case GHC.Base.eqString
                                         a22
                                         GrammarType2.$fReadParticleSystem4 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl94 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                             Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl93) -}
                        = \ w2 :: () -> lvl93
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ a98 :: GHC.Base.String ->
                         (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                           `cast`
                         (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                           @ b
                           k) }) -}
08fe611e10b39cec598d03993fbc490b
  data Animacy = AN | HUM | NHUM | ZO | INAN
    Promotable
56c069b86a972ddd52b64b5a722f7b12
  data Aspect = PFV | IPFV
    Promotable
fcaa4072d88a1238ff7d9377b198162c
  data Case
    = NOM | ACC | ERG | GEN | DAT | LOC | PREP | ABL | INS | VOC
    Promotable
ae15ce513899bbb81e1bdfe89e424f26
  data Definiteness = DEF | INDF
    Promotable
757b853fc306b345be9181f15f1f4033
  data Evidentiality
    = EXP | SENS | VIS | NVIS | AUD | INFER | REP | HSY | QUO | ASS
    Promotable
8458b2ed20531adbd7e1f0415074af95
  data ExponentSystem
    = ExponentSystem [(PhonemeType2.Morpheme,
                       (GrammarType2.Manifest GrammarType2.Gender,
                        GrammarType2.Manifest GrammarType2.Animacy,
                        GrammarType2.Manifest GrammarType2.Case,
                        GrammarType2.Manifest GrammarType2.Number,
                        GrammarType2.Manifest GrammarType2.Honorific,
                        GrammarType2.Manifest GrammarType2.Definiteness,
                        GrammarType2.Manifest GrammarType2.Specificity))]
498ce41f2238314803d9983a3ee7b9a8
  data Gender = M | F | COM | N
    Promotable
f1c45a0abc5686da3599290cbd333b39
  data GrammarSystem
    = GrammarSystem {gSys :: GrammarType2.Manifest
                               ([GrammarType2.Gender], GHC.Types.Int),
                     aSys :: GrammarType2.Manifest
                               ([GrammarType2.Animacy], GHC.Types.Int),
                     cSys :: GrammarType2.Manifest ([GrammarType2.Case], GHC.Types.Int),
                     nSys :: GrammarType2.Manifest
                               ([GrammarType2.Number], GHC.Types.Int),
                     hSys :: GrammarType2.Manifest
                               ([GrammarType2.Honorific], GHC.Types.Int),
                     dSys :: GrammarType2.Manifest
                               ([GrammarType2.Definiteness], GHC.Types.Int),
                     sSys :: GrammarType2.Manifest
                               ([GrammarType2.Specificity], GHC.Types.Int)}
270aa74414213d38a897e2c2f04e2cb0
  data Honorific = FAM | FORM
    Promotable
fd2e4f6f534fd240b9cde0b8f8a520af
  data Manifest a = NoManifest | Particle a | Exponent a
    Promotable
b72254827f48011cc46d25b53a3dee43
  data Mood
    = IND | IRR | DEO | IMP | JUS | OPT | EPIS | SBJV | POT | COND
    Promotable
dc554c15fa6745d82b7cf16c87b8dfc7
  data Number = SG | DU | TRI | PA | PL
    Promotable
125a489a929ba59bfb3d55b4a92e21d5
  data ParticleSystem
    = ParticleSystem [(PhonemeType2.Morpheme,
                       (GrammarType2.Manifest GrammarType2.Gender,
                        GrammarType2.Manifest GrammarType2.Animacy,
                        GrammarType2.Manifest GrammarType2.Case,
                        GrammarType2.Manifest GrammarType2.Number,
                        GrammarType2.Manifest GrammarType2.Honorific,
                        GrammarType2.Manifest GrammarType2.Definiteness,
                        GrammarType2.Manifest GrammarType2.Specificity))]
e885d3ffc1f7745e767bf38433d6405b
  data Person = FIRST | SECOND | THIRD
    Promotable
e950d26ec1212aa6dfda04b44113e591
  data Polarity = AFF | NEG
    Promotable
6417e4f225623173ad75902202935d29
  data Specificity = SPEC | NSPEC
    Promotable
4ff954811d952a50e05d52d81f3a558f
  data Tense
    = PST | REM | REC | NPST | PRS | NFUT | FUT | IMMF | REMF
    Promotable
1c835916f9c6590c31a144e0d776533f
  data Transitivity = INTR | TR | DITR
    Promotable
8b275556c515642f0f8313dbcecf6b7b
  data Voice = ACT | MID | PAS
    Promotable
ae1ee59187d5466e323897f7a019b5b8
  data Volition = VOL | NVOL
    Promotable
b28153b080deb74bae61e57b3aa09fb0
  aSys ::
    GrammarType2.GrammarSystem
    -> GrammarType2.Manifest ([GrammarType2.Animacy], GHC.Types.Int)
  RecSel GrammarType2.GrammarSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLLL),1*U(A,1*U,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarType2.GrammarSystem ->
                 case ds of wild { GrammarType2.GrammarSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds2 }) -}
307a71f4746149a69b70293d71669a43
  cSys ::
    GrammarType2.GrammarSystem
    -> GrammarType2.Manifest ([GrammarType2.Case], GHC.Types.Int)
  RecSel GrammarType2.GrammarSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLLL),1*U(A,A,1*U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarType2.GrammarSystem ->
                 case ds of wild { GrammarType2.GrammarSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds3 }) -}
9c768a06d579fdc1ec52e3d19de17993
  dSys ::
    GrammarType2.GrammarSystem
    -> GrammarType2.Manifest
         ([GrammarType2.Definiteness], GHC.Types.Int)
  RecSel GrammarType2.GrammarSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLSL),1*U(A,A,A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarType2.GrammarSystem ->
                 case ds of wild { GrammarType2.GrammarSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds6 }) -}
5fdb8327bf387a57166d29daab56f35c
  gSys ::
    GrammarType2.GrammarSystem
    -> GrammarType2.Manifest ([GrammarType2.Gender], GHC.Types.Int)
  RecSel GrammarType2.GrammarSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLLL),1*U(1*U,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarType2.GrammarSystem ->
                 case ds of wild { GrammarType2.GrammarSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds1 }) -}
ffc49b5cf7506f8fe38952bf18cc2f2a
  hSys ::
    GrammarType2.GrammarSystem
    -> GrammarType2.Manifest ([GrammarType2.Honorific], GHC.Types.Int)
  RecSel GrammarType2.GrammarSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSLL),1*U(A,A,A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarType2.GrammarSystem ->
                 case ds of wild { GrammarType2.GrammarSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds5 }) -}
6179438e519cdb4fe74dd18f5a5441b6
  nSys ::
    GrammarType2.GrammarSystem
    -> GrammarType2.Manifest ([GrammarType2.Number], GHC.Types.Int)
  RecSel GrammarType2.GrammarSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLLL),1*U(A,A,A,1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarType2.GrammarSystem ->
                 case ds of wild { GrammarType2.GrammarSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds4 }) -}
fbdc589d741cdb7db88e98d70e67268d
  sSys ::
    GrammarType2.GrammarSystem
    -> GrammarType2.Manifest
         ([GrammarType2.Specificity], GHC.Types.Int)
  RecSel GrammarType2.GrammarSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLS),1*U(A,A,A,A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarType2.GrammarSystem ->
                 case ds of wild { GrammarType2.GrammarSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds7 }) -}
instance GHC.Classes.Eq [GrammarType2.Animacy]
  = GrammarType2.$fEqAnimacy
instance GHC.Classes.Eq [GrammarType2.Aspect]
  = GrammarType2.$fEqAspect
instance GHC.Classes.Eq [GrammarType2.Case] = GrammarType2.$fEqCase
instance GHC.Classes.Eq [GrammarType2.Definiteness]
  = GrammarType2.$fEqDefiniteness
instance GHC.Classes.Eq [GrammarType2.Evidentiality]
  = GrammarType2.$fEqEvidentiality
instance GHC.Classes.Eq [GrammarType2.ExponentSystem]
  = GrammarType2.$fEqExponentSystem
instance GHC.Classes.Eq [GrammarType2.Gender]
  = GrammarType2.$fEqGender
instance GHC.Classes.Eq [GrammarType2.Honorific]
  = GrammarType2.$fEqHonorific
instance GHC.Classes.Eq [GrammarType2.Manifest]
  = GrammarType2.$fEqManifest
instance GHC.Classes.Eq [GrammarType2.Mood] = GrammarType2.$fEqMood
instance GHC.Classes.Eq [GrammarType2.Number]
  = GrammarType2.$fEqNumber
instance GHC.Classes.Eq [GrammarType2.ParticleSystem]
  = GrammarType2.$fEqParticleSystem
instance GHC.Classes.Eq [GrammarType2.Person]
  = GrammarType2.$fEqPerson
instance GHC.Classes.Eq [GrammarType2.Polarity]
  = GrammarType2.$fEqPolarity
instance GHC.Classes.Eq [GrammarType2.Specificity]
  = GrammarType2.$fEqSpecificity
instance GHC.Classes.Eq [GrammarType2.Tense]
  = GrammarType2.$fEqTense
instance GHC.Classes.Eq [GrammarType2.Transitivity]
  = GrammarType2.$fEqTransitivity
instance GHC.Classes.Eq [GrammarType2.Voice]
  = GrammarType2.$fEqVoice
instance GHC.Classes.Eq [GrammarType2.Volition]
  = GrammarType2.$fEqVolition
instance GHC.Read.Read [GrammarType2.Animacy]
  = GrammarType2.$fReadAnimacy
instance GHC.Read.Read [GrammarType2.Aspect]
  = GrammarType2.$fReadAspect
instance GHC.Read.Read [GrammarType2.Case]
  = GrammarType2.$fReadCase
instance GHC.Read.Read [GrammarType2.Definiteness]
  = GrammarType2.$fReadDefiniteness
instance GHC.Read.Read [GrammarType2.Evidentiality]
  = GrammarType2.$fReadEvidentiality
instance GHC.Read.Read [GrammarType2.ExponentSystem]
  = GrammarType2.$fReadExponentSystem
instance GHC.Read.Read [GrammarType2.Gender]
  = GrammarType2.$fReadGender
instance GHC.Read.Read [GrammarType2.Honorific]
  = GrammarType2.$fReadHonorific
instance GHC.Read.Read [GrammarType2.Manifest]
  = GrammarType2.$fReadManifest
instance GHC.Read.Read [GrammarType2.Mood]
  = GrammarType2.$fReadMood
instance GHC.Read.Read [GrammarType2.Number]
  = GrammarType2.$fReadNumber
instance GHC.Read.Read [GrammarType2.ParticleSystem]
  = GrammarType2.$fReadParticleSystem
instance GHC.Read.Read [GrammarType2.Person]
  = GrammarType2.$fReadPerson
instance GHC.Read.Read [GrammarType2.Polarity]
  = GrammarType2.$fReadPolarity
instance GHC.Read.Read [GrammarType2.Specificity]
  = GrammarType2.$fReadSpecificity
instance GHC.Read.Read [GrammarType2.Tense]
  = GrammarType2.$fReadTense
instance GHC.Read.Read [GrammarType2.Transitivity]
  = GrammarType2.$fReadTransitivity
instance GHC.Read.Read [GrammarType2.Voice]
  = GrammarType2.$fReadVoice
instance GHC.Read.Read [GrammarType2.Volition]
  = GrammarType2.$fReadVolition
instance GHC.Show.Show [GrammarType2.Animacy]
  = GrammarType2.$fShowAnimacy
instance GHC.Show.Show [GrammarType2.Aspect]
  = GrammarType2.$fShowAspect
instance GHC.Show.Show [GrammarType2.Case]
  = GrammarType2.$fShowCase
instance GHC.Show.Show [GrammarType2.Definiteness]
  = GrammarType2.$fShowDefiniteness
instance GHC.Show.Show [GrammarType2.Evidentiality]
  = GrammarType2.$fShowEvidentiality
instance GHC.Show.Show [GrammarType2.ExponentSystem]
  = GrammarType2.$fShowExponentSystem
instance GHC.Show.Show [GrammarType2.Gender]
  = GrammarType2.$fShowGender
instance GHC.Show.Show [GrammarType2.GrammarSystem]
  = GrammarType2.$fShowGrammarSystem
instance GHC.Show.Show [GrammarType2.Honorific]
  = GrammarType2.$fShowHonorific
instance GHC.Show.Show [GrammarType2.Manifest]
  = GrammarType2.$fShowManifest
instance GHC.Show.Show [GrammarType2.Mood]
  = GrammarType2.$fShowMood
instance GHC.Show.Show [GrammarType2.Number]
  = GrammarType2.$fShowNumber
instance GHC.Show.Show [GrammarType2.ParticleSystem]
  = GrammarType2.$fShowParticleSystem
instance GHC.Show.Show [GrammarType2.Person]
  = GrammarType2.$fShowPerson
instance GHC.Show.Show [GrammarType2.Polarity]
  = GrammarType2.$fShowPolarity
instance GHC.Show.Show [GrammarType2.Specificity]
  = GrammarType2.$fShowSpecificity
instance GHC.Show.Show [GrammarType2.Tense]
  = GrammarType2.$fShowTense
instance GHC.Show.Show [GrammarType2.Transitivity]
  = GrammarType2.$fShowTransitivity
instance GHC.Show.Show [GrammarType2.Voice]
  = GrammarType2.$fShowVoice
instance GHC.Show.Show [GrammarType2.Volition]
  = GrammarType2.$fShowVolition
"SPEC $c/= @ Number" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                               GrammarType2.Number
  GrammarType2.$fEqManifest_$c/= @ GrammarType2.Number $dEq
  = GrammarType2.$fEqManifest1
"SPEC $c/= @ Specificity" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                    GrammarType2.Specificity
  GrammarType2.$fEqManifest_$c/= @ GrammarType2.Specificity $dEq
  = GrammarType2.$fEqExponentSystem3
"SPEC $c== @ Number" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                               GrammarType2.Number
  GrammarType2.$fEqManifest_$c==1 @ GrammarType2.Number $dEq
  = GrammarType2.$fEqManifest_$s$c==
"SPEC $c== @ Specificity" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                    GrammarType2.Specificity
  GrammarType2.$fEqManifest_$c==1 @ GrammarType2.Specificity $dEq
  = GrammarType2.$fEqExponentSystem_$s$c==
"SPEC $creadList @ Case" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                     GrammarType2.Case
  GrammarType2.$fReadManifest_$creadList @ GrammarType2.Case $dRead
  = GrammarType2.$fReadManifest_$sreadListDefault
"SPEC $creadList @ Definiteness" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                             GrammarType2.Definiteness
  GrammarType2.$fReadManifest_$creadList @ GrammarType2.Definiteness
                                         $dRead
  = GrammarType2.$fReadManifest_$sreadListDefault1
"SPEC $creadList @ Gender" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                       GrammarType2.Gender
  GrammarType2.$fReadManifest_$creadList @ GrammarType2.Gender $dRead
  = GrammarType2.$fReadManifest_$sreadListDefault2
"SPEC $creadList @ Honorific" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                          GrammarType2.Honorific
  GrammarType2.$fReadManifest_$creadList @ GrammarType2.Honorific
                                         $dRead
  = GrammarType2.$fReadManifest_$sreadListDefault3
"SPEC $creadListPrec @ Case" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                         GrammarType2.Case
  GrammarType2.$fReadManifest_$creadListPrec @ GrammarType2.Case
                                             $dRead
  = GrammarType2.$fReadManifest_$s$creadListPrec
"SPEC $creadListPrec @ Definiteness" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                 GrammarType2.Definiteness
  GrammarType2.$fReadManifest_$creadListPrec @ GrammarType2.Definiteness
                                             $dRead
  = GrammarType2.$fReadManifest_$s$creadListPrec1
"SPEC $creadListPrec @ Gender" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                           GrammarType2.Gender
  GrammarType2.$fReadManifest_$creadListPrec @ GrammarType2.Gender
                                             $dRead
  = GrammarType2.$fReadManifest_$s$creadListPrec2
"SPEC $creadListPrec @ Honorific" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                              GrammarType2.Honorific
  GrammarType2.$fReadManifest_$creadListPrec @ GrammarType2.Honorific
                                             $dRead
  = GrammarType2.$fReadManifest_$s$creadListPrec3
"SPEC $creadPrec @ Case" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                     GrammarType2.Case
  GrammarType2.$fReadManifest_$creadPrec @ GrammarType2.Case $dRead
  = GrammarType2.$fReadManifest_$s$creadPrec
"SPEC $creadPrec @ Definiteness" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                             GrammarType2.Definiteness
  GrammarType2.$fReadManifest_$creadPrec @ GrammarType2.Definiteness
                                         $dRead
  = GrammarType2.$fReadManifest_$s$creadPrec1
"SPEC $creadPrec @ Gender" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                       GrammarType2.Gender
  GrammarType2.$fReadManifest_$creadPrec @ GrammarType2.Gender $dRead
  = GrammarType2.$fReadManifest_$s$creadPrec2
"SPEC $creadPrec @ Honorific" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                          GrammarType2.Honorific
  GrammarType2.$fReadManifest_$creadPrec @ GrammarType2.Honorific
                                         $dRead
  = GrammarType2.$fReadManifest_$s$creadPrec3
"SPEC $creadsPrec @ Case" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                      GrammarType2.Case
  GrammarType2.$fReadManifest_$creadsPrec @ GrammarType2.Case $dRead
  = GrammarType2.$fReadManifest_$s$creadsPrec
"SPEC $creadsPrec @ Definiteness" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                              GrammarType2.Definiteness
  GrammarType2.$fReadManifest_$creadsPrec @ GrammarType2.Definiteness
                                          $dRead
  = GrammarType2.$fReadManifest_$s$creadsPrec1
"SPEC $creadsPrec @ Gender" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                        GrammarType2.Gender
  GrammarType2.$fReadManifest_$creadsPrec @ GrammarType2.Gender
                                          $dRead
  = GrammarType2.$fReadManifest_$s$creadsPrec2
"SPEC $creadsPrec @ Honorific" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                           GrammarType2.Honorific
  GrammarType2.$fReadManifest_$creadsPrec @ GrammarType2.Honorific
                                          $dRead
  = GrammarType2.$fReadManifest_$s$creadsPrec3
"SPEC $cshowsPrec @ ([Animacy], Int)" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                  ([GrammarType2.Animacy],
                                                                   GHC.Types.Int)
  GrammarType2.$fShowExponentSystem_$cshowsPrec @ ([GrammarType2.Animacy],
                                                   GHC.Types.Int)
                                                $dShow
  = GrammarType2.$fShowExponentSystem_$s$cshowsPrec2
"SPEC $cshowsPrec @ ([Case], Int)" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                               ([GrammarType2.Case], GHC.Types.Int)
  GrammarType2.$fShowExponentSystem_$cshowsPrec @ ([GrammarType2.Case],
                                                   GHC.Types.Int)
                                                $dShow
  = GrammarType2.$fShowExponentSystem_$s$cshowsPrec3
"SPEC $cshowsPrec @ ([Definiteness], Int)" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                       ([GrammarType2.Definiteness],
                                                                        GHC.Types.Int)
  GrammarType2.$fShowExponentSystem_$cshowsPrec @ ([GrammarType2.Definiteness],
                                                   GHC.Types.Int)
                                                $dShow
  = GrammarType2.$fShowExponentSystem_$s$cshowsPrec4
"SPEC $cshowsPrec @ ([Gender], Int)" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                 ([GrammarType2.Gender],
                                                                  GHC.Types.Int)
  GrammarType2.$fShowExponentSystem_$cshowsPrec @ ([GrammarType2.Gender],
                                                   GHC.Types.Int)
                                                $dShow
  = GrammarType2.$fShowExponentSystem_$s$cshowsPrec5
"SPEC $cshowsPrec @ ([Honorific], Int)" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                    ([GrammarType2.Honorific],
                                                                     GHC.Types.Int)
  GrammarType2.$fShowExponentSystem_$cshowsPrec @ ([GrammarType2.Honorific],
                                                   GHC.Types.Int)
                                                $dShow
  = GrammarType2.$fShowExponentSystem_$s$cshowsPrec6
"SPEC $cshowsPrec @ ([Number], Int)" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                 ([GrammarType2.Number],
                                                                  GHC.Types.Int)
  GrammarType2.$fShowExponentSystem_$cshowsPrec @ ([GrammarType2.Number],
                                                   GHC.Types.Int)
                                                $dShow
  = GrammarType2.$fShowExponentSystem_$s$cshowsPrec7
"SPEC $cshowsPrec @ ([Specificity], Int)" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                      ([GrammarType2.Specificity],
                                                                       GHC.Types.Int)
  GrammarType2.$fShowExponentSystem_$cshowsPrec @ ([GrammarType2.Specificity],
                                                   GHC.Types.Int)
                                                $dShow
  = GrammarType2.$fShowExponentSystem_$s$cshowsPrec8
"SPEC $cshowsPrec @ Number" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                        GrammarType2.Number
  GrammarType2.$fShowExponentSystem_$cshowsPrec @ GrammarType2.Number
                                                $dShow
  = GrammarType2.$fShowExponentSystem_$s$cshowsPrec1
"SPEC $cshowsPrec @ Specificity" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                             GrammarType2.Specificity
  GrammarType2.$fShowExponentSystem_$cshowsPrec @ GrammarType2.Specificity
                                                $dShow
  = GrammarType2.$fShowExponentSystem_$s$cshowsPrec
"SPEC $fEqManifest @ Number" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                       GrammarType2.Number
  GrammarType2.$fEqManifest @ GrammarType2.Number $dEq
  = GrammarType2.$fEqManifest_$s$fEqManifest
"SPEC $fEqManifest @ Specificity" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                            GrammarType2.Specificity
  GrammarType2.$fEqManifest @ GrammarType2.Specificity $dEq
  = GrammarType2.$fEqExponentSystem_$s$fEqManifest
"SPEC $fReadManifest @ Case" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                         GrammarType2.Case
  GrammarType2.$fReadManifest @ GrammarType2.Case $dRead
  = GrammarType2.$fReadManifest_$s$fReadManifest
"SPEC $fReadManifest @ Definiteness" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                 GrammarType2.Definiteness
  GrammarType2.$fReadManifest @ GrammarType2.Definiteness $dRead
  = GrammarType2.$fReadManifest_$s$fReadManifest1
"SPEC $fReadManifest @ Gender" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                           GrammarType2.Gender
  GrammarType2.$fReadManifest @ GrammarType2.Gender $dRead
  = GrammarType2.$fReadManifest_$s$fReadManifest2
"SPEC $fReadManifest @ Honorific" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                              GrammarType2.Honorific
  GrammarType2.$fReadManifest @ GrammarType2.Honorific $dRead
  = GrammarType2.$fReadManifest_$s$fReadManifest3
"SPEC/GrammarType2 $dmreadsPrec @ Animacy" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                       GrammarType2.Animacy
  GHC.Read.$dmreadsPrec @ GrammarType2.Animacy $dRead
  = GrammarType2.$fReadAnimacy_$s$dmreadsPrec
"SPEC/GrammarType2 $dmreadsPrec @ Aspect" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                      GrammarType2.Aspect
  GHC.Read.$dmreadsPrec @ GrammarType2.Aspect $dRead
  = GrammarType2.$fReadAspect_$s$dmreadsPrec
"SPEC/GrammarType2 $dmreadsPrec @ Case" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                    GrammarType2.Case
  GHC.Read.$dmreadsPrec @ GrammarType2.Case $dRead
  = GrammarType2.$fReadCase_$s$dmreadsPrec
"SPEC/GrammarType2 $dmreadsPrec @ Definiteness" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                            GrammarType2.Definiteness
  GHC.Read.$dmreadsPrec @ GrammarType2.Definiteness $dRead
  = GrammarType2.$fReadDefiniteness_$s$dmreadsPrec
"SPEC/GrammarType2 $dmreadsPrec @ Evidentiality" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                             GrammarType2.Evidentiality
  GHC.Read.$dmreadsPrec @ GrammarType2.Evidentiality $dRead
  = GrammarType2.$fReadEvidentiality_$s$dmreadsPrec
"SPEC/GrammarType2 $dmreadsPrec @ Gender" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                      GrammarType2.Gender
  GHC.Read.$dmreadsPrec @ GrammarType2.Gender $dRead
  = GrammarType2.$fReadGender_$s$dmreadsPrec
"SPEC/GrammarType2 $dmreadsPrec @ Honorific" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                         GrammarType2.Honorific
  GHC.Read.$dmreadsPrec @ GrammarType2.Honorific $dRead
  = GrammarType2.$fReadHonorific_$s$dmreadsPrec
"SPEC/GrammarType2 $dmreadsPrec @ Mood" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                    GrammarType2.Mood
  GHC.Read.$dmreadsPrec @ GrammarType2.Mood $dRead
  = GrammarType2.$fReadMood_$s$dmreadsPrec
"SPEC/GrammarType2 $dmreadsPrec @ Number" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                      GrammarType2.Number
  GHC.Read.$dmreadsPrec @ GrammarType2.Number $dRead
  = GrammarType2.$fReadNumber_$s$dmreadsPrec
"SPEC/GrammarType2 $dmreadsPrec @ Person" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                      GrammarType2.Person
  GHC.Read.$dmreadsPrec @ GrammarType2.Person $dRead
  = GrammarType2.$fReadPerson_$s$dmreadsPrec
"SPEC/GrammarType2 $dmreadsPrec @ Polarity" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                        GrammarType2.Polarity
  GHC.Read.$dmreadsPrec @ GrammarType2.Polarity $dRead
  = GrammarType2.$fReadPolarity_$s$dmreadsPrec
"SPEC/GrammarType2 $dmreadsPrec @ Specificity" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                           GrammarType2.Specificity
  GHC.Read.$dmreadsPrec @ GrammarType2.Specificity $dRead
  = GrammarType2.$fReadSpecificity_$s$dmreadsPrec
"SPEC/GrammarType2 $dmreadsPrec @ Tense" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                     GrammarType2.Tense
  GHC.Read.$dmreadsPrec @ GrammarType2.Tense $dRead
  = GrammarType2.$fReadTense_$s$dmreadsPrec
"SPEC/GrammarType2 $dmreadsPrec @ Transitivity" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                            GrammarType2.Transitivity
  GHC.Read.$dmreadsPrec @ GrammarType2.Transitivity $dRead
  = GrammarType2.$fReadTransitivity_$s$dmreadsPrec
"SPEC/GrammarType2 $dmreadsPrec @ Voice" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                     GrammarType2.Voice
  GHC.Read.$dmreadsPrec @ GrammarType2.Voice $dRead
  = GrammarType2.$fReadVoice_$s$dmreadsPrec
"SPEC/GrammarType2 $dmreadsPrec @ Volition" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                        GrammarType2.Volition
  GHC.Read.$dmreadsPrec @ GrammarType2.Volition $dRead
  = GrammarType2.$fReadVolition_$s$dmreadsPrec
"SPEC/GrammarType2 $fEq(,) @ Morpheme @ (Manifest Gender,
                                        Manifest Animacy,
                                        Manifest Case,
                                        Manifest Number,
                                        Manifest Honorific,
                                        Manifest Definiteness,
                                        Manifest Specificity)" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                                                                                                                                                                                                                                                                                                                                                                                                        PhonemeType2.Morpheme
                                                                                                                                                                                                                                                                                                                                                                                                                                              $dEq1 :: GHC.Classes.Eq
                                                                                                                                                                                                                                                                                                                                                                                                                                                         (GrammarType2.Manifest
                                                                                                                                                                                                                                                                                                                                                                                                                                                            GrammarType2.Gender,
                                                                                                                                                                                                                                                                                                                                                                                                                                                          GrammarType2.Manifest
                                                                                                                                                                                                                                                                                                                                                                                                                                                            GrammarType2.Animacy,
                                                                                                                                                                                                                                                                                                                                                                                                                                                          GrammarType2.Manifest
                                                                                                                                                                                                                                                                                                                                                                                                                                                            GrammarType2.Case,
                                                                                                                                                                                                                                                                                                                                                                                                                                                          GrammarType2.Manifest
                                                                                                                                                                                                                                                                                                                                                                                                                                                            GrammarType2.Number,
                                                                                                                                                                                                                                                                                                                                                                                                                                                          GrammarType2.Manifest
                                                                                                                                                                                                                                                                                                                                                                                                                                                            GrammarType2.Honorific,
                                                                                                                                                                                                                                                                                                                                                                                                                                                          GrammarType2.Manifest
                                                                                                                                                                                                                                                                                                                                                                                                                                                            GrammarType2.Definiteness,
                                                                                                                                                                                                                                                                                                                                                                                                                                                          GrammarType2.Manifest
                                                                                                                                                                                                                                                                                                                                                                                                                                                            GrammarType2.Specificity)
  GHC.Classes.$fEq(,) @ PhonemeType2.Morpheme
                      @ (GrammarType2.Manifest GrammarType2.Gender,
                         GrammarType2.Manifest GrammarType2.Animacy,
                         GrammarType2.Manifest GrammarType2.Case,
                         GrammarType2.Manifest GrammarType2.Number,
                         GrammarType2.Manifest GrammarType2.Honorific,
                         GrammarType2.Manifest GrammarType2.Definiteness,
                         GrammarType2.Manifest GrammarType2.Specificity)
                      $dEq
                      $dEq1
  = GrammarType2.$fEqExponentSystem_$s$fEq(,)
"SPEC/GrammarType2 $fEq(,,,,,,) @ (Manifest Gender) @ (Manifest
                                                        Animacy) @ (Manifest Case) @ (Manifest
                                                                                        Number) @ (Manifest
                                                                                                     Honorific) @ (Manifest
                                                                                                                     Definiteness) @ (Manifest
                                                                                                                                        Specificity)" [ALWAYS] forall $dEq :: GHC.Classes.Eq
rammarType2.Manifest
rammarType2.Gender)
dEq1 :: GHC.Classes.Eq
rammarType2.Manifest
rammarType2.Animacy)
dEq2 :: GHC.Classes.Eq
rammarType2.Manifest
rammarType2.Case)
dEq3 :: GHC.Classes.Eq
rammarType2.Manifest
rammarType2.Number)
dEq4 :: GHC.Classes.Eq
rammarType2.Manifest
rammarType2.Honorific)
dEq5 :: GHC.Classes.Eq
rammarType2.Manifest
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          GrammarType2.Definiteness)
dEq6 :: GHC.Classes.Eq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       (GrammarType2.Manifest
rammarType2.Specificity)
  GHC.Classes.$fEq(,,,,,,) @ (GrammarType2.Manifest
                                GrammarType2.Gender)
                           @ (GrammarType2.Manifest GrammarType2.Animacy)
                           @ (GrammarType2.Manifest GrammarType2.Case)
                           @ (GrammarType2.Manifest GrammarType2.Number)
                           @ (GrammarType2.Manifest GrammarType2.Honorific)
                           @ (GrammarType2.Manifest GrammarType2.Definiteness)
                           @ (GrammarType2.Manifest GrammarType2.Specificity)
                           $dEq
                           $dEq1
                           $dEq2
                           $dEq3
                           $dEq4
                           $dEq5
                           $dEq6
  = GrammarType2.$fEqExponentSystem_$s$fEq(,,,,,,)
"SPEC/GrammarType2 $fEq(,,,,,,)_$c/= @ (Manifest Gender) @ (Manifest
                                                             Animacy) @ (Manifest Case) @ (Manifest
                                                                                             Number) @ (Manifest
                                                                                                          Honorific) @ (Manifest
                                                                                                                          Definiteness) @ (Manifest
                                                                                                                                             Specificity)" [ALWAYS] forall $dEq :: GHC.Classes.Eq
rammarType2.Manifest
rammarType2.Gender)
dEq1 :: GHC.Classes.Eq
rammarType2.Manifest
rammarType2.Animacy)
dEq2 :: GHC.Classes.Eq
rammarType2.Manifest
rammarType2.Case)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          $dEq3 :: GHC.Classes.Eq
rammarType2.Manifest
rammarType2.Number)
dEq4 :: GHC.Classes.Eq
rammarType2.Manifest
rammarType2.Honorific)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          $dEq5 :: GHC.Classes.Eq
rammarType2.Manifest
rammarType2.Definiteness)
dEq6 :: GHC.Classes.Eq
rammarType2.Manifest
rammarType2.Specificity)
  GHC.Classes.$fEq(,,,,,,)_$c/= @ (GrammarType2.Manifest
                                     GrammarType2.Gender)
                                @ (GrammarType2.Manifest GrammarType2.Animacy)
                                @ (GrammarType2.Manifest GrammarType2.Case)
                                @ (GrammarType2.Manifest GrammarType2.Number)
                                @ (GrammarType2.Manifest GrammarType2.Honorific)
                                @ (GrammarType2.Manifest GrammarType2.Definiteness)
                                @ (GrammarType2.Manifest GrammarType2.Specificity)
                                $dEq
                                $dEq1
                                $dEq2
                                $dEq3
                                $dEq4
                                $dEq5
                                $dEq6
  = GrammarType2.$fEqExponentSystem_$s$fEq(,,,,,,)_$c/=
"SPEC/GrammarType2 $fRead(,,,,,,) @ (Manifest Gender) @ (Manifest
                                                          Animacy) @ (Manifest Case) @ (Manifest
                                                                                          Number) @ (Manifest
                                                                                                       Honorific) @ (Manifest
                                                                                                                       Definiteness) @ (Manifest
                                                                                                                                          Specificity)" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    (GrammarType2.Manifest
rammarType2.Gender)
dRead1 :: GHC.Read.Read
rammarType2.Manifest
rammarType2.Animacy)
dRead2 :: GHC.Read.Read
rammarType2.Manifest
rammarType2.Case)
dRead3 :: GHC.Read.Read
rammarType2.Manifest
rammarType2.Number)
dRead4 :: GHC.Read.Read
rammarType2.Manifest
rammarType2.Honorific)
dRead5 :: GHC.Read.Read
rammarType2.Manifest
rammarType2.Definiteness)
dRead6 :: GHC.Read.Read
rammarType2.Manifest
rammarType2.Specificity)
  GHC.Read.$fRead(,,,,,,) @ (GrammarType2.Manifest
                               GrammarType2.Gender)
                          @ (GrammarType2.Manifest GrammarType2.Animacy)
                          @ (GrammarType2.Manifest GrammarType2.Case)
                          @ (GrammarType2.Manifest GrammarType2.Number)
                          @ (GrammarType2.Manifest GrammarType2.Honorific)
                          @ (GrammarType2.Manifest GrammarType2.Definiteness)
                          @ (GrammarType2.Manifest GrammarType2.Specificity)
                          $dRead
                          $dRead1
                          $dRead2
                          $dRead3
                          $dRead4
                          $dRead5
                          $dRead6
  = GrammarType2.$fReadExponentSystem_$s$fRead(,,,,,,)
"SPEC/GrammarType2 $fRead(,,,,,,)_$creadList @ (Manifest
                                                 Gender) @ (Manifest Animacy) @ (Manifest
                                                                                   Case) @ (Manifest
                                                                                              Number) @ (Manifest
                                                                                                           Honorific) @ (Manifest
                                                                                                                           Definiteness) @ (Manifest
                                                                                                                                              Specificity)" [ALWAYS] forall $dRead :: GHC.Read.Read
rammarType2.Manifest
rammarType2.Gender)
dRead1 :: GHC.Read.Read
rammarType2.Manifest
rammarType2.Animacy)
dRead2 :: GHC.Read.Read
rammarType2.Manifest
rammarType2.Case)
dRead3 :: GHC.Read.Read
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          (GrammarType2.Manifest
rammarType2.Number)
dRead4 :: GHC.Read.Read
rammarType2.Manifest
rammarType2.Honorific)
dRead5 :: GHC.Read.Read
rammarType2.Manifest
rammarType2.Definiteness)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             $dRead6 :: GHC.Read.Read
rammarType2.Manifest
rammarType2.Specificity)
  GHC.Read.$fRead(,,,,,,)_$creadList @ (GrammarType2.Manifest
                                          GrammarType2.Gender)
                                     @ (GrammarType2.Manifest GrammarType2.Animacy)
                                     @ (GrammarType2.Manifest GrammarType2.Case)
                                     @ (GrammarType2.Manifest GrammarType2.Number)
                                     @ (GrammarType2.Manifest GrammarType2.Honorific)
                                     @ (GrammarType2.Manifest GrammarType2.Definiteness)
                                     @ (GrammarType2.Manifest GrammarType2.Specificity)
                                     $dRead
                                     $dRead1
                                     $dRead2
                                     $dRead3
                                     $dRead4
                                     $dRead5
                                     $dRead6
  = GrammarType2.$fReadExponentSystem_$s$fRead(,,,,,,)_$creadList
"SPEC/GrammarType2 $fRead(,,,,,,)_$creadsPrec @ (Manifest
                                                  Gender) @ (Manifest Animacy) @ (Manifest
                                                                                    Case) @ (Manifest
                                                                                               Number) @ (Manifest
                                                                                                            Honorific) @ (Manifest
                                                                                                                            Definiteness) @ (Manifest
                                                                                                                                               Specificity)" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                (GrammarType2.Manifest
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   GrammarType2.Gender)
dRead1 :: GHC.Read.Read
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 (GrammarType2.Manifest
rammarType2.Animacy)
dRead2 :: GHC.Read.Read
rammarType2.Manifest
rammarType2.Case)
dRead3 :: GHC.Read.Read
rammarType2.Manifest
rammarType2.Number)
dRead4 :: GHC.Read.Read
rammarType2.Manifest
rammarType2.Honorific)
dRead5 :: GHC.Read.Read
rammarType2.Manifest
rammarType2.Definiteness)
dRead6 :: GHC.Read.Read
rammarType2.Manifest
rammarType2.Specificity)
  GHC.Read.$fRead(,,,,,,)_$creadsPrec @ (GrammarType2.Manifest
                                           GrammarType2.Gender)
                                      @ (GrammarType2.Manifest GrammarType2.Animacy)
                                      @ (GrammarType2.Manifest GrammarType2.Case)
                                      @ (GrammarType2.Manifest GrammarType2.Number)
                                      @ (GrammarType2.Manifest GrammarType2.Honorific)
                                      @ (GrammarType2.Manifest GrammarType2.Definiteness)
                                      @ (GrammarType2.Manifest GrammarType2.Specificity)
                                      $dRead
                                      $dRead1
                                      $dRead2
                                      $dRead3
                                      $dRead4
                                      $dRead5
                                      $dRead6
  = GrammarType2.$fReadExponentSystem_$s$fRead(,,,,,,)_$creadsPrec
"SPEC/GrammarType2 readListDefault @ (Manifest Case)" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                                  (GrammarType2.Manifest
                                                                                     GrammarType2.Case)
  GHC.Read.readListDefault @ (GrammarType2.Manifest
                                GrammarType2.Case)
                           $dRead
  = GrammarType2.$fReadManifest_$sreadListDefault
"SPEC/GrammarType2 readListDefault @ (Manifest Definiteness)" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                                          (GrammarType2.Manifest
                                                                                             GrammarType2.Definiteness)
  GHC.Read.readListDefault @ (GrammarType2.Manifest
                                GrammarType2.Definiteness)
                           $dRead
  = GrammarType2.$fReadManifest_$sreadListDefault1
"SPEC/GrammarType2 readListDefault @ (Manifest Gender)" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                                    (GrammarType2.Manifest
                                                                                       GrammarType2.Gender)
  GHC.Read.readListDefault @ (GrammarType2.Manifest
                                GrammarType2.Gender)
                           $dRead
  = GrammarType2.$fReadManifest_$sreadListDefault2
"SPEC/GrammarType2 readListDefault @ (Manifest Honorific)" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                                       (GrammarType2.Manifest
                                                                                          GrammarType2.Honorific)
  GHC.Read.readListDefault @ (GrammarType2.Manifest
                                GrammarType2.Honorific)
                           $dRead
  = GrammarType2.$fReadManifest_$sreadListDefault3
"SPEC/GrammarType2 readListDefault @ Animacy" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                          GrammarType2.Animacy
  GHC.Read.readListDefault @ GrammarType2.Animacy $dRead
  = GrammarType2.$fReadAnimacy_$sreadListDefault
"SPEC/GrammarType2 readListDefault @ Aspect" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                         GrammarType2.Aspect
  GHC.Read.readListDefault @ GrammarType2.Aspect $dRead
  = GrammarType2.$fReadAspect_$sreadListDefault
"SPEC/GrammarType2 readListDefault @ Case" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                       GrammarType2.Case
  GHC.Read.readListDefault @ GrammarType2.Case $dRead
  = GrammarType2.$fReadCase_$sreadListDefault
"SPEC/GrammarType2 readListDefault @ Definiteness" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                               GrammarType2.Definiteness
  GHC.Read.readListDefault @ GrammarType2.Definiteness $dRead
  = GrammarType2.$fReadDefiniteness_$sreadListDefault
"SPEC/GrammarType2 readListDefault @ Evidentiality" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                                GrammarType2.Evidentiality
  GHC.Read.readListDefault @ GrammarType2.Evidentiality $dRead
  = GrammarType2.$fReadEvidentiality_$sreadListDefault
"SPEC/GrammarType2 readListDefault @ ExponentSystem" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                                 GrammarType2.ExponentSystem
  GHC.Read.readListDefault @ GrammarType2.ExponentSystem $dRead
  = GrammarType2.$fReadExponentSystem_$sreadListDefault
"SPEC/GrammarType2 readListDefault @ Gender" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                         GrammarType2.Gender
  GHC.Read.readListDefault @ GrammarType2.Gender $dRead
  = GrammarType2.$fReadGender_$sreadListDefault
"SPEC/GrammarType2 readListDefault @ Honorific" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                            GrammarType2.Honorific
  GHC.Read.readListDefault @ GrammarType2.Honorific $dRead
  = GrammarType2.$fReadHonorific_$sreadListDefault
"SPEC/GrammarType2 readListDefault @ Mood" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                       GrammarType2.Mood
  GHC.Read.readListDefault @ GrammarType2.Mood $dRead
  = GrammarType2.$fReadMood_$sreadListDefault
"SPEC/GrammarType2 readListDefault @ Number" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                         GrammarType2.Number
  GHC.Read.readListDefault @ GrammarType2.Number $dRead
  = GrammarType2.$fReadNumber_$sreadListDefault
"SPEC/GrammarType2 readListDefault @ ParticleSystem" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                                 GrammarType2.ParticleSystem
  GHC.Read.readListDefault @ GrammarType2.ParticleSystem $dRead
  = GrammarType2.$fReadParticleSystem_$sreadListDefault
"SPEC/GrammarType2 readListDefault @ Person" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                         GrammarType2.Person
  GHC.Read.readListDefault @ GrammarType2.Person $dRead
  = GrammarType2.$fReadPerson_$sreadListDefault
"SPEC/GrammarType2 readListDefault @ Polarity" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                           GrammarType2.Polarity
  GHC.Read.readListDefault @ GrammarType2.Polarity $dRead
  = GrammarType2.$fReadPolarity_$sreadListDefault
"SPEC/GrammarType2 readListDefault @ Specificity" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                              GrammarType2.Specificity
  GHC.Read.readListDefault @ GrammarType2.Specificity $dRead
  = GrammarType2.$fReadSpecificity_$sreadListDefault
"SPEC/GrammarType2 readListDefault @ Tense" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                        GrammarType2.Tense
  GHC.Read.readListDefault @ GrammarType2.Tense $dRead
  = GrammarType2.$fReadTense_$sreadListDefault
"SPEC/GrammarType2 readListDefault @ Transitivity" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                               GrammarType2.Transitivity
  GHC.Read.readListDefault @ GrammarType2.Transitivity $dRead
  = GrammarType2.$fReadTransitivity_$sreadListDefault
"SPEC/GrammarType2 readListDefault @ Voice" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                        GrammarType2.Voice
  GHC.Read.readListDefault @ GrammarType2.Voice $dRead
  = GrammarType2.$fReadVoice_$sreadListDefault
"SPEC/GrammarType2 readListDefault @ Volition" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                           GrammarType2.Volition
  GHC.Read.readListDefault @ GrammarType2.Volition $dRead
  = GrammarType2.$fReadVolition_$sreadListDefault
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

