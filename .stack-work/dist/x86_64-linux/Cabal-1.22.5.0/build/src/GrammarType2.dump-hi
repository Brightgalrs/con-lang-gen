
==================== FINAL INTERFACE ====================
2016-10-22 02:56:04.651806 UTC

interface conla_1eA9qWUPH9nBowcXqqaV8r:GrammarType2 7103
  interface hash: 3ceb4c9e72999b55547164f3f3d1695d
  ABI hash: e2c3b99d01966a9bb196f4f8c3e58e7a
  export-list hash: 5ca45ab2b232909d9429e4b6138b838a
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 962af636f8e927040c7daa9c21457292
  sig of: Nothing
  used TH splices: False
  where
exports:
  GrammarType2.Animacy{GrammarType2.AN GrammarType2.HUM GrammarType2.INAN GrammarType2.NHUM GrammarType2.ZO}
  GrammarType2.Case{GrammarType2.ABL GrammarType2.ACC GrammarType2.DAT GrammarType2.ERG GrammarType2.GEN GrammarType2.INS GrammarType2.LOC GrammarType2.NOM GrammarType2.PREP GrammarType2.VOC}
  GrammarType2.Declension{GrammarType2.Declension}
  GrammarType2.Definiteness{GrammarType2.DEF GrammarType2.INDF}
  GrammarType2.Gender{GrammarType2.COM GrammarType2.F GrammarType2.M GrammarType2.N}
  GrammarType2.GrammarSystem{GrammarType2.GrammarSystem GrammarType2.aSys GrammarType2.cSys GrammarType2.dSys GrammarType2.gSys GrammarType2.hSys GrammarType2.nSys GrammarType2.sSys}
  GrammarType2.Honorific{GrammarType2.FAM GrammarType2.FORM}
  GrammarType2.Manifest{GrammarType2.Exponent GrammarType2.NoManifest GrammarType2.Particle}
  GrammarType2.Number{GrammarType2.DU GrammarType2.PA GrammarType2.PL GrammarType2.SG GrammarType2.TRI}
  GrammarType2.Specificity{GrammarType2.NSPEC GrammarType2.SPEC}
module dependencies: OtherData2 PhonemeType2
package dependencies: base-4.8.2.0* ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Monoid
                         base-4.8.2.0:Data.Type.Equality base-4.8.2.0:GHC.Generics
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.Read b423b4506a014855edbd329b567629f3
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  base-4.8.2.0:Text.ParserCombinators.ReadPrec 2590e0e0a57a86ac7c62727f4d868dd2
import  -/  base-4.8.2.0:Text.Read.Lex 724ca44ddd38ddc5f47a501d62736c26
import  -/  OtherData2 08f9fdb83c0ec02cbc12c2fe756e9c77
  exports: b7fb5a9c6a9b7223e3a71462099d5c6f
import  -/  PhonemeType2 197339ce6b16abf97787f114b13340ff
  exports: df9b2faa8257842f4b45d50bfdeb2c0c
  Morpheme 2ae9d5e2279d7aff2754760a9a3abd27
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
997f0106cc61a0dae6693b73d4ae044c
  $fEqAnimacy :: GHC.Classes.Eq GrammarType2.Animacy
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Animacy
                  GrammarType2.$fEqAnimacy_$c==
                  GrammarType2.$fEqAnimacy_$c/= -}
997f0106cc61a0dae6693b73d4ae044c
  $fEqAnimacy_$c/= ::
    GrammarType2.Animacy -> GrammarType2.Animacy -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a24 :: GrammarType2.Animacy
                   b :: GrammarType2.Animacy ->
                 case a24 of wild {
                   GrammarType2.AN
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.AN -> GHC.Types.False }
                   GrammarType2.HUM
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.HUM -> GHC.Types.False }
                   GrammarType2.NHUM
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.NHUM -> GHC.Types.False }
                   GrammarType2.ZO
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.ZO -> GHC.Types.False }
                   GrammarType2.INAN
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        GrammarType2.INAN -> GHC.Types.False } }) -}
997f0106cc61a0dae6693b73d4ae044c
  $fEqAnimacy_$c== ::
    GrammarType2.Animacy -> GrammarType2.Animacy -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: GrammarType2.Animacy
                   ds1 :: GrammarType2.Animacy ->
                 case ds of wild {
                   GrammarType2.AN
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.AN -> GHC.Types.True }
                   GrammarType2.HUM
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.HUM -> GHC.Types.True }
                   GrammarType2.NHUM
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.NHUM -> GHC.Types.True }
                   GrammarType2.ZO
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.ZO -> GHC.Types.True }
                   GrammarType2.INAN
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarType2.INAN -> GHC.Types.True } }) -}
d544c1f4b832edd20ebb4e3b0f6dfe57
  $fEqAspect :: GHC.Classes.Eq GrammarType2.Aspect
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Aspect
                  GrammarType2.$fEqAspect_$c==
                  GrammarType2.$fEqAspect_$c/= -}
d544c1f4b832edd20ebb4e3b0f6dfe57
  $fEqAspect_$c/= ::
    GrammarType2.Aspect -> GrammarType2.Aspect -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a24 :: GrammarType2.Aspect b :: GrammarType2.Aspect ->
                 case a24 of wild {
                   GrammarType2.PFV
                   -> case b of wild1 {
                        GrammarType2.PFV -> GHC.Types.False
                        GrammarType2.IPFV -> GHC.Types.True }
                   GrammarType2.IPFV
                   -> case b of wild1 {
                        GrammarType2.PFV -> GHC.Types.True
                        GrammarType2.IPFV -> GHC.Types.False } }) -}
d544c1f4b832edd20ebb4e3b0f6dfe57
  $fEqAspect_$c== ::
    GrammarType2.Aspect -> GrammarType2.Aspect -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarType2.Aspect ds1 :: GrammarType2.Aspect ->
                 case ds of wild {
                   GrammarType2.PFV
                   -> case ds1 of wild1 {
                        GrammarType2.PFV -> GHC.Types.True
                        GrammarType2.IPFV -> GHC.Types.False }
                   GrammarType2.IPFV
                   -> case ds1 of wild1 {
                        GrammarType2.PFV -> GHC.Types.False
                        GrammarType2.IPFV -> GHC.Types.True } }) -}
e317df6bd7f01bf53f9bafa3ac506fc7
  $fEqCase :: GHC.Classes.Eq GrammarType2.Case
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Case
                  GrammarType2.$fEqCase_$c==
                  GrammarType2.$fEqCase_$c/= -}
e317df6bd7f01bf53f9bafa3ac506fc7
  $fEqCase_$c/= ::
    GrammarType2.Case -> GrammarType2.Case -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a24 :: GrammarType2.Case b :: GrammarType2.Case ->
                 case a24 of wild {
                   GrammarType2.NOM
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.NOM -> GHC.Types.False }
                   GrammarType2.ACC
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.ACC -> GHC.Types.False }
                   GrammarType2.ERG
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.ERG -> GHC.Types.False }
                   GrammarType2.GEN
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.GEN -> GHC.Types.False }
                   GrammarType2.DAT
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.DAT -> GHC.Types.False }
                   GrammarType2.LOC
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.LOC -> GHC.Types.False }
                   GrammarType2.PREP
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.PREP -> GHC.Types.False }
                   GrammarType2.ABL
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.ABL -> GHC.Types.False }
                   GrammarType2.INS
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.INS -> GHC.Types.False }
                   GrammarType2.VOC
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        GrammarType2.VOC -> GHC.Types.False } }) -}
e317df6bd7f01bf53f9bafa3ac506fc7
  $fEqCase_$c== ::
    GrammarType2.Case -> GrammarType2.Case -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: GrammarType2.Case ds1 :: GrammarType2.Case ->
                 case ds of wild {
                   GrammarType2.NOM
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.NOM -> GHC.Types.True }
                   GrammarType2.ACC
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.ACC -> GHC.Types.True }
                   GrammarType2.ERG
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.ERG -> GHC.Types.True }
                   GrammarType2.GEN
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.GEN -> GHC.Types.True }
                   GrammarType2.DAT
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.DAT -> GHC.Types.True }
                   GrammarType2.LOC
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.LOC -> GHC.Types.True }
                   GrammarType2.PREP
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.PREP -> GHC.Types.True }
                   GrammarType2.ABL
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.ABL -> GHC.Types.True }
                   GrammarType2.INS
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.INS -> GHC.Types.True }
                   GrammarType2.VOC
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarType2.VOC -> GHC.Types.True } }) -}
2a24341dc728cf3214c312c2683a2f7a
  $fEqDefiniteness :: GHC.Classes.Eq GrammarType2.Definiteness
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Definiteness
                  GrammarType2.$fEqDefiniteness_$c==
                  GrammarType2.$fEqDefiniteness_$c/= -}
2a24341dc728cf3214c312c2683a2f7a
  $fEqDefiniteness_$c/= ::
    GrammarType2.Definiteness
    -> GrammarType2.Definiteness -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a24 :: GrammarType2.Definiteness
                   b :: GrammarType2.Definiteness ->
                 case a24 of wild {
                   GrammarType2.DEF
                   -> case b of wild1 {
                        GrammarType2.DEF -> GHC.Types.False
                        GrammarType2.INDF -> GHC.Types.True }
                   GrammarType2.INDF
                   -> case b of wild1 {
                        GrammarType2.DEF -> GHC.Types.True
                        GrammarType2.INDF -> GHC.Types.False } }) -}
2a24341dc728cf3214c312c2683a2f7a
  $fEqDefiniteness_$c== ::
    GrammarType2.Definiteness
    -> GrammarType2.Definiteness -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarType2.Definiteness
                   ds1 :: GrammarType2.Definiteness ->
                 case ds of wild {
                   GrammarType2.DEF
                   -> case ds1 of wild1 {
                        GrammarType2.DEF -> GHC.Types.True
                        GrammarType2.INDF -> GHC.Types.False }
                   GrammarType2.INDF
                   -> case ds1 of wild1 {
                        GrammarType2.DEF -> GHC.Types.False
                        GrammarType2.INDF -> GHC.Types.True } }) -}
97680a78ec9508d30ba0411b94ab5395
  $fEqEvidentiality :: GHC.Classes.Eq GrammarType2.Evidentiality
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Evidentiality
                  GrammarType2.$fEqEvidentiality_$c==
                  GrammarType2.$fEqEvidentiality_$c/= -}
97680a78ec9508d30ba0411b94ab5395
  $fEqEvidentiality_$c/= ::
    GrammarType2.Evidentiality
    -> GrammarType2.Evidentiality -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a24 :: GrammarType2.Evidentiality
                   b :: GrammarType2.Evidentiality ->
                 case a24 of wild {
                   GrammarType2.EXP
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.EXP -> GHC.Types.False }
                   GrammarType2.SENS
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.SENS -> GHC.Types.False }
                   GrammarType2.VIS
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.VIS -> GHC.Types.False }
                   GrammarType2.NVIS
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.NVIS -> GHC.Types.False }
                   GrammarType2.AUD
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.AUD -> GHC.Types.False }
                   GrammarType2.INFER
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.INFER -> GHC.Types.False }
                   GrammarType2.REP
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.REP -> GHC.Types.False }
                   GrammarType2.HSY
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.HSY -> GHC.Types.False }
                   GrammarType2.QUO
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.QUO -> GHC.Types.False }
                   GrammarType2.ASS
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        GrammarType2.ASS -> GHC.Types.False } }) -}
97680a78ec9508d30ba0411b94ab5395
  $fEqEvidentiality_$c== ::
    GrammarType2.Evidentiality
    -> GrammarType2.Evidentiality -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: GrammarType2.Evidentiality
                   ds1 :: GrammarType2.Evidentiality ->
                 case ds of wild {
                   GrammarType2.EXP
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.EXP -> GHC.Types.True }
                   GrammarType2.SENS
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.SENS -> GHC.Types.True }
                   GrammarType2.VIS
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.VIS -> GHC.Types.True }
                   GrammarType2.NVIS
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.NVIS -> GHC.Types.True }
                   GrammarType2.AUD
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.AUD -> GHC.Types.True }
                   GrammarType2.INFER
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.INFER -> GHC.Types.True }
                   GrammarType2.REP
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.REP -> GHC.Types.True }
                   GrammarType2.HSY
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.HSY -> GHC.Types.True }
                   GrammarType2.QUO
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.QUO -> GHC.Types.True }
                   GrammarType2.ASS
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarType2.ASS -> GHC.Types.True } }) -}
83b76b7eefbf738909a19bb1d1eb6a84
  $fEqExponentSystem :: GHC.Classes.Eq GrammarType2.ExponentSystem
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.ExponentSystem
                  GrammarType2.$fEqExponentSystem_$c==
                  GrammarType2.$fEqExponentSystem_$c/= -}
b687f38f32b164ca9c5697abd84dcd52
  $fEqExponentSystem1 ::
    GHC.Classes.Eq
      (GHC.Base.Maybe GrammarType2.Gender,
       GHC.Base.Maybe GrammarType2.Animacy,
       GHC.Base.Maybe GrammarType2.Case,
       GHC.Base.Maybe GrammarType2.Number,
       GHC.Base.Maybe GrammarType2.Honorific,
       GHC.Base.Maybe GrammarType2.Definiteness,
       GHC.Base.Maybe GrammarType2.Specificity)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fEqExponentSystem_$s$fEq(,,,,,,) -}
fe4688938fcd0c1874bed08a6b81b0bb
  $fEqExponentSystem2 ::
    GHC.Classes.Eq (GHC.Base.Maybe GrammarType2.Specificity)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fEqExponentSystem_$s$fEqMaybe -}
13f1dd0c7dc72dfdc726553b4f7d7386
  $fEqExponentSystem3 ::
    GHC.Classes.Eq (GHC.Base.Maybe GrammarType2.Definiteness)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fEqExponentSystem_$s$fEqMaybe1 -}
388341ee8a0d64c4810a6cf829395b97
  $fEqExponentSystem4 ::
    GHC.Classes.Eq (GHC.Base.Maybe GrammarType2.Honorific)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fEqExponentSystem_$s$fEqMaybe2 -}
c6d48809bddfbbea3e18c45aabec1cf1
  $fEqExponentSystem5 ::
    GHC.Classes.Eq (GHC.Base.Maybe GrammarType2.Number)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fEqExponentSystem_$s$fEqMaybe3 -}
83ab7c48e6aa09b33b89e3ae41d21128
  $fEqExponentSystem6 ::
    GHC.Classes.Eq (GHC.Base.Maybe GrammarType2.Case)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fEqExponentSystem_$s$fEqMaybe4 -}
523ae3472f1accc3f873e1e0446c8334
  $fEqExponentSystem7 ::
    GHC.Classes.Eq (GHC.Base.Maybe GrammarType2.Animacy)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fEqExponentSystem_$s$fEqMaybe5 -}
1a4593fa38255255edc9d2c94e89c6f4
  $fEqExponentSystem8 ::
    GHC.Classes.Eq (GHC.Base.Maybe GrammarType2.Gender)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fEqExponentSystem_$s$fEqMaybe6 -}
83b76b7eefbf738909a19bb1d1eb6a84
  $fEqExponentSystem_$c/= ::
    GrammarType2.ExponentSystem
    -> GrammarType2.ExponentSystem -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ a24 :: GrammarType2.ExponentSystem
                   b :: GrammarType2.ExponentSystem ->
                 case a24 of wild { GrammarType2.ExponentSystem a25 ->
                 case b of wild1 { GrammarType2.ExponentSystem b1 ->
                 case GHC.Classes.$fEq[]_$c==
                        @ (PhonemeType2.Morpheme,
                           (GHC.Base.Maybe GrammarType2.Gender,
                            GHC.Base.Maybe GrammarType2.Animacy,
                            GHC.Base.Maybe GrammarType2.Case,
                            GHC.Base.Maybe GrammarType2.Number,
                            GHC.Base.Maybe GrammarType2.Honorific,
                            GHC.Base.Maybe GrammarType2.Definiteness,
                            GHC.Base.Maybe GrammarType2.Specificity))
                        GrammarType2.$fEqExponentSystem_$s$fEq(,)
                        a25
                        b1 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
83b76b7eefbf738909a19bb1d1eb6a84
  $fEqExponentSystem_$c== ::
    GrammarType2.ExponentSystem
    -> GrammarType2.ExponentSystem -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarType2.ExponentSystem
                   ds1 :: GrammarType2.ExponentSystem ->
                 case ds of wild { GrammarType2.ExponentSystem a24 ->
                 case ds1 of wild1 { GrammarType2.ExponentSystem b1 ->
                 GHC.Classes.$fEq[]_$c==
                   @ (PhonemeType2.Morpheme,
                      (GHC.Base.Maybe GrammarType2.Gender,
                       GHC.Base.Maybe GrammarType2.Animacy,
                       GHC.Base.Maybe GrammarType2.Case,
                       GHC.Base.Maybe GrammarType2.Number,
                       GHC.Base.Maybe GrammarType2.Honorific,
                       GHC.Base.Maybe GrammarType2.Definiteness,
                       GHC.Base.Maybe GrammarType2.Specificity))
                   GrammarType2.$fEqExponentSystem_$s$fEq(,)
                   a24
                   b1 } }) -}
0da8c9c82d1163c826282917916eb949
  $fEqExponentSystem_$s$fEq(,) ::
    GHC.Classes.Eq
      (PhonemeType2.Morpheme,
       (GHC.Base.Maybe GrammarType2.Gender,
        GHC.Base.Maybe GrammarType2.Animacy,
        GHC.Base.Maybe GrammarType2.Case,
        GHC.Base.Maybe GrammarType2.Number,
        GHC.Base.Maybe GrammarType2.Honorific,
        GHC.Base.Maybe GrammarType2.Definiteness,
        GHC.Base.Maybe GrammarType2.Specificity))
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (PhonemeType2.Morpheme,
                     (GHC.Base.Maybe GrammarType2.Gender,
                      GHC.Base.Maybe GrammarType2.Animacy,
                      GHC.Base.Maybe GrammarType2.Case,
                      GHC.Base.Maybe GrammarType2.Number,
                      GHC.Base.Maybe GrammarType2.Honorific,
                      GHC.Base.Maybe GrammarType2.Definiteness,
                      GHC.Base.Maybe GrammarType2.Specificity))
                  (GHC.Classes.$fEq(,)_$c==
                     @ PhonemeType2.Morpheme
                     @ (GHC.Base.Maybe GrammarType2.Gender,
                        GHC.Base.Maybe GrammarType2.Animacy,
                        GHC.Base.Maybe GrammarType2.Case,
                        GHC.Base.Maybe GrammarType2.Number,
                        GHC.Base.Maybe GrammarType2.Honorific,
                        GHC.Base.Maybe GrammarType2.Definiteness,
                        GHC.Base.Maybe GrammarType2.Specificity)
                     PhonemeType2.$fEqMorpheme
                     GrammarType2.$fEqExponentSystem1)
                  (GHC.Classes.$fEq(,)_$c/=
                     @ PhonemeType2.Morpheme
                     @ (GHC.Base.Maybe GrammarType2.Gender,
                        GHC.Base.Maybe GrammarType2.Animacy,
                        GHC.Base.Maybe GrammarType2.Case,
                        GHC.Base.Maybe GrammarType2.Number,
                        GHC.Base.Maybe GrammarType2.Honorific,
                        GHC.Base.Maybe GrammarType2.Definiteness,
                        GHC.Base.Maybe GrammarType2.Specificity)
                     PhonemeType2.$fEqMorpheme
                     GrammarType2.$fEqExponentSystem1) -}
3f04a6523f15c37b993ef96b41251281
  $fEqExponentSystem_$s$fEq(,,,,,,) ::
    GHC.Classes.Eq
      (GHC.Base.Maybe GrammarType2.Gender,
       GHC.Base.Maybe GrammarType2.Animacy,
       GHC.Base.Maybe GrammarType2.Case,
       GHC.Base.Maybe GrammarType2.Number,
       GHC.Base.Maybe GrammarType2.Honorific,
       GHC.Base.Maybe GrammarType2.Definiteness,
       GHC.Base.Maybe GrammarType2.Specificity)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe GrammarType2.Gender,
                     GHC.Base.Maybe GrammarType2.Animacy,
                     GHC.Base.Maybe GrammarType2.Case,
                     GHC.Base.Maybe GrammarType2.Number,
                     GHC.Base.Maybe GrammarType2.Honorific,
                     GHC.Base.Maybe GrammarType2.Definiteness,
                     GHC.Base.Maybe GrammarType2.Specificity)
                  (GHC.Classes.$fEq(,,,,,,)_$c==
                     @ (GHC.Base.Maybe GrammarType2.Gender)
                     @ (GHC.Base.Maybe GrammarType2.Animacy)
                     @ (GHC.Base.Maybe GrammarType2.Case)
                     @ (GHC.Base.Maybe GrammarType2.Number)
                     @ (GHC.Base.Maybe GrammarType2.Honorific)
                     @ (GHC.Base.Maybe GrammarType2.Definiteness)
                     @ (GHC.Base.Maybe GrammarType2.Specificity)
                     GrammarType2.$fEqExponentSystem8
                     GrammarType2.$fEqExponentSystem7
                     GrammarType2.$fEqExponentSystem6
                     GrammarType2.$fEqExponentSystem5
                     GrammarType2.$fEqExponentSystem4
                     GrammarType2.$fEqExponentSystem3
                     GrammarType2.$fEqExponentSystem2)
                  GrammarType2.$fEqExponentSystem_$s$fEq(,,,,,,)_$c/= -}
9d1053ad7919539b2f57261737fe6e0f
  $fEqExponentSystem_$s$fEq(,,,,,,)_$c/= ::
    (GHC.Base.Maybe GrammarType2.Gender,
     GHC.Base.Maybe GrammarType2.Animacy,
     GHC.Base.Maybe GrammarType2.Case,
     GHC.Base.Maybe GrammarType2.Number,
     GHC.Base.Maybe GrammarType2.Honorific,
     GHC.Base.Maybe GrammarType2.Definiteness,
     GHC.Base.Maybe GrammarType2.Specificity)
    -> (GHC.Base.Maybe GrammarType2.Gender,
        GHC.Base.Maybe GrammarType2.Animacy,
        GHC.Base.Maybe GrammarType2.Case,
        GHC.Base.Maybe GrammarType2.Number,
        GHC.Base.Maybe GrammarType2.Honorific,
        GHC.Base.Maybe GrammarType2.Definiteness,
        GHC.Base.Maybe GrammarType2.Specificity)
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U)><S(SLLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ a24 :: (GHC.Base.Maybe GrammarType2.Gender,
                           GHC.Base.Maybe GrammarType2.Animacy,
                           GHC.Base.Maybe GrammarType2.Case,
                           GHC.Base.Maybe GrammarType2.Number,
                           GHC.Base.Maybe GrammarType2.Honorific,
                           GHC.Base.Maybe GrammarType2.Definiteness,
                           GHC.Base.Maybe GrammarType2.Specificity)
                   b1 :: (GHC.Base.Maybe GrammarType2.Gender,
                          GHC.Base.Maybe GrammarType2.Animacy,
                          GHC.Base.Maybe GrammarType2.Case,
                          GHC.Base.Maybe GrammarType2.Number,
                          GHC.Base.Maybe GrammarType2.Honorific,
                          GHC.Base.Maybe GrammarType2.Definiteness,
                          GHC.Base.Maybe GrammarType2.Specificity) ->
                 case GHC.Classes.$fEq(,,,,,,)_$c==
                        @ (GHC.Base.Maybe GrammarType2.Gender)
                        @ (GHC.Base.Maybe GrammarType2.Animacy)
                        @ (GHC.Base.Maybe GrammarType2.Case)
                        @ (GHC.Base.Maybe GrammarType2.Number)
                        @ (GHC.Base.Maybe GrammarType2.Honorific)
                        @ (GHC.Base.Maybe GrammarType2.Definiteness)
                        @ (GHC.Base.Maybe GrammarType2.Specificity)
                        GrammarType2.$fEqExponentSystem8
                        GrammarType2.$fEqExponentSystem7
                        GrammarType2.$fEqExponentSystem6
                        GrammarType2.$fEqExponentSystem5
                        GrammarType2.$fEqExponentSystem4
                        GrammarType2.$fEqExponentSystem3
                        GrammarType2.$fEqExponentSystem2
                        a24
                        b1 of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
e4a667148d4f826c5799f8d4a70aabb0
  $fEqExponentSystem_$s$fEqMaybe ::
    GHC.Classes.Eq (GHC.Base.Maybe GrammarType2.Specificity)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe GrammarType2.Specificity)
                  GrammarType2.$fEqExponentSystem_$s$fEqMaybe_$c==
                  (GHC.Base.$fEqMaybe_$c/=
                     @ GrammarType2.Specificity
                     GrammarType2.$fEqSpecificity) -}
18b4b08ef0f5469a50849f32fea5ff93
  $fEqExponentSystem_$s$fEqMaybe1 ::
    GHC.Classes.Eq (GHC.Base.Maybe GrammarType2.Definiteness)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe GrammarType2.Definiteness)
                  GrammarType2.$fEqExponentSystem_$s$fEqMaybe_$c==1
                  (GHC.Base.$fEqMaybe_$c/=
                     @ GrammarType2.Definiteness
                     GrammarType2.$fEqDefiniteness) -}
6c2b94d0bb619761940a67e0cb225d68
  $fEqExponentSystem_$s$fEqMaybe2 ::
    GHC.Classes.Eq (GHC.Base.Maybe GrammarType2.Honorific)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe GrammarType2.Honorific)
                  GrammarType2.$fEqExponentSystem_$s$fEqMaybe_$c==2
                  (GHC.Base.$fEqMaybe_$c/=
                     @ GrammarType2.Honorific
                     GrammarType2.$fEqHonorific) -}
2cd61f3204f8bf6f470108c1cf5d69ee
  $fEqExponentSystem_$s$fEqMaybe3 ::
    GHC.Classes.Eq (GHC.Base.Maybe GrammarType2.Number)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe GrammarType2.Number)
                  GrammarType2.$fEqExponentSystem_$s$fEqMaybe_$c==3
                  (GHC.Base.$fEqMaybe_$c/=
                     @ GrammarType2.Number
                     GrammarType2.$fEqNumber) -}
6841ef4f913cc5d26d9d9d81b1388e3f
  $fEqExponentSystem_$s$fEqMaybe4 ::
    GHC.Classes.Eq (GHC.Base.Maybe GrammarType2.Case)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe GrammarType2.Case)
                  GrammarType2.$fEqExponentSystem_$s$fEqMaybe_$c==4
                  (GHC.Base.$fEqMaybe_$c/=
                     @ GrammarType2.Case
                     GrammarType2.$fEqCase) -}
1e867de6ae18eca60b8082a2e1456365
  $fEqExponentSystem_$s$fEqMaybe5 ::
    GHC.Classes.Eq (GHC.Base.Maybe GrammarType2.Animacy)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe GrammarType2.Animacy)
                  GrammarType2.$fEqExponentSystem_$s$fEqMaybe_$c==5
                  (GHC.Base.$fEqMaybe_$c/=
                     @ GrammarType2.Animacy
                     GrammarType2.$fEqAnimacy) -}
1df180664f5956f514ed0d200b87ee0d
  $fEqExponentSystem_$s$fEqMaybe6 ::
    GHC.Classes.Eq (GHC.Base.Maybe GrammarType2.Gender)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe GrammarType2.Gender)
                  GrammarType2.$fEqExponentSystem_$s$fEqMaybe_$c==6
                  (GHC.Base.$fEqMaybe_$c/=
                     @ GrammarType2.Gender
                     GrammarType2.$fEqGender) -}
d472d0f7ba7cb78b10a9ddceed4c4a95
  $fEqExponentSystem_$s$fEqMaybe_$c== ::
    GHC.Base.Maybe GrammarType2.Specificity
    -> GHC.Base.Maybe GrammarType2.Specificity -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GHC.Base.Maybe GrammarType2.Specificity
                   ds1 :: GHC.Base.Maybe GrammarType2.Specificity ->
                 case ds of wild {
                   GHC.Base.Nothing
                   -> case ds1 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.True
                        GHC.Base.Just ipv -> GHC.Types.False }
                   GHC.Base.Just a24
                   -> case ds1 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.False
                        GHC.Base.Just b1
                        -> GrammarType2.$fEqSpecificity_$c== a24 b1 } }) -}
ff320b9ed0da52a55de93d8fede2be96
  $fEqExponentSystem_$s$fEqMaybe_$c==1 ::
    GHC.Base.Maybe GrammarType2.Definiteness
    -> GHC.Base.Maybe GrammarType2.Definiteness -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GHC.Base.Maybe GrammarType2.Definiteness
                   ds1 :: GHC.Base.Maybe GrammarType2.Definiteness ->
                 case ds of wild {
                   GHC.Base.Nothing
                   -> case ds1 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.True
                        GHC.Base.Just ipv -> GHC.Types.False }
                   GHC.Base.Just a24
                   -> case ds1 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.False
                        GHC.Base.Just b1
                        -> GrammarType2.$fEqDefiniteness_$c== a24 b1 } }) -}
57170cf2d6dfd2c34ae54a80c5653b67
  $fEqExponentSystem_$s$fEqMaybe_$c==2 ::
    GHC.Base.Maybe GrammarType2.Honorific
    -> GHC.Base.Maybe GrammarType2.Honorific -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GHC.Base.Maybe GrammarType2.Honorific
                   ds1 :: GHC.Base.Maybe GrammarType2.Honorific ->
                 case ds of wild {
                   GHC.Base.Nothing
                   -> case ds1 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.True
                        GHC.Base.Just ipv -> GHC.Types.False }
                   GHC.Base.Just a24
                   -> case ds1 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.False
                        GHC.Base.Just b1 -> GrammarType2.$fEqHonorific_$c== a24 b1 } }) -}
115eec9ff90e9c55df170790d8a3356c
  $fEqExponentSystem_$s$fEqMaybe_$c==3 ::
    GHC.Base.Maybe GrammarType2.Number
    -> GHC.Base.Maybe GrammarType2.Number -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GHC.Base.Maybe GrammarType2.Number
                   ds1 :: GHC.Base.Maybe GrammarType2.Number ->
                 case ds of wild {
                   GHC.Base.Nothing
                   -> case ds1 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.True
                        GHC.Base.Just ipv -> GHC.Types.False }
                   GHC.Base.Just a24
                   -> case ds1 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.False
                        GHC.Base.Just b1 -> GrammarType2.$fEqNumber_$c== a24 b1 } }) -}
31d35436049dc084f7c2a1b986880253
  $fEqExponentSystem_$s$fEqMaybe_$c==4 ::
    GHC.Base.Maybe GrammarType2.Case
    -> GHC.Base.Maybe GrammarType2.Case -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GHC.Base.Maybe GrammarType2.Case
                   ds1 :: GHC.Base.Maybe GrammarType2.Case ->
                 case ds of wild {
                   GHC.Base.Nothing
                   -> case ds1 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.True
                        GHC.Base.Just ipv -> GHC.Types.False }
                   GHC.Base.Just a24
                   -> case ds1 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.False
                        GHC.Base.Just b1 -> GrammarType2.$fEqCase_$c== a24 b1 } }) -}
546e09beb7781f582e5fd0ff93062add
  $fEqExponentSystem_$s$fEqMaybe_$c==5 ::
    GHC.Base.Maybe GrammarType2.Animacy
    -> GHC.Base.Maybe GrammarType2.Animacy -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GHC.Base.Maybe GrammarType2.Animacy
                   ds1 :: GHC.Base.Maybe GrammarType2.Animacy ->
                 case ds of wild {
                   GHC.Base.Nothing
                   -> case ds1 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.True
                        GHC.Base.Just ipv -> GHC.Types.False }
                   GHC.Base.Just a24
                   -> case ds1 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.False
                        GHC.Base.Just b1 -> GrammarType2.$fEqAnimacy_$c== a24 b1 } }) -}
43adafa60b1bdb46e5a75366e4028d31
  $fEqExponentSystem_$s$fEqMaybe_$c==6 ::
    GHC.Base.Maybe GrammarType2.Gender
    -> GHC.Base.Maybe GrammarType2.Gender -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GHC.Base.Maybe GrammarType2.Gender
                   ds1 :: GHC.Base.Maybe GrammarType2.Gender ->
                 case ds of wild {
                   GHC.Base.Nothing
                   -> case ds1 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.True
                        GHC.Base.Just ipv -> GHC.Types.False }
                   GHC.Base.Just a24
                   -> case ds1 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.False
                        GHC.Base.Just b1 -> GrammarType2.$fEqGender_$c== a24 b1 } }) -}
483b53f5081b71881e402c116818b125
  $fEqGender :: GHC.Classes.Eq GrammarType2.Gender
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Gender
                  GrammarType2.$fEqGender_$c==
                  GrammarType2.$fEqGender_$c/= -}
483b53f5081b71881e402c116818b125
  $fEqGender_$c/= ::
    GrammarType2.Gender -> GrammarType2.Gender -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a24 :: GrammarType2.Gender
                   b :: GrammarType2.Gender ->
                 case a24 of wild {
                   GrammarType2.M
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.M -> GHC.Types.False }
                   GrammarType2.F
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.F -> GHC.Types.False }
                   GrammarType2.COM
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.COM -> GHC.Types.False }
                   GrammarType2.N
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.N -> GHC.Types.False } }) -}
483b53f5081b71881e402c116818b125
  $fEqGender_$c== ::
    GrammarType2.Gender -> GrammarType2.Gender -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: GrammarType2.Gender
                   ds1 :: GrammarType2.Gender ->
                 case ds of wild {
                   GrammarType2.M
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.M -> GHC.Types.True }
                   GrammarType2.F
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.F -> GHC.Types.True }
                   GrammarType2.COM
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.COM -> GHC.Types.True }
                   GrammarType2.N
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.N -> GHC.Types.True } }) -}
f7bc47c734d5bf5ab3e9ea94b2c3ae2f
  $fEqHonorific :: GHC.Classes.Eq GrammarType2.Honorific
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Honorific
                  GrammarType2.$fEqHonorific_$c==
                  GrammarType2.$fEqHonorific_$c/= -}
f7bc47c734d5bf5ab3e9ea94b2c3ae2f
  $fEqHonorific_$c/= ::
    GrammarType2.Honorific -> GrammarType2.Honorific -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a24 :: GrammarType2.Honorific b :: GrammarType2.Honorific ->
                 case a24 of wild {
                   GrammarType2.FAM
                   -> case b of wild1 {
                        GrammarType2.FAM -> GHC.Types.False
                        GrammarType2.FORM -> GHC.Types.True }
                   GrammarType2.FORM
                   -> case b of wild1 {
                        GrammarType2.FAM -> GHC.Types.True
                        GrammarType2.FORM -> GHC.Types.False } }) -}
f7bc47c734d5bf5ab3e9ea94b2c3ae2f
  $fEqHonorific_$c== ::
    GrammarType2.Honorific -> GrammarType2.Honorific -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarType2.Honorific ds1 :: GrammarType2.Honorific ->
                 case ds of wild {
                   GrammarType2.FAM
                   -> case ds1 of wild1 {
                        GrammarType2.FAM -> GHC.Types.True
                        GrammarType2.FORM -> GHC.Types.False }
                   GrammarType2.FORM
                   -> case ds1 of wild1 {
                        GrammarType2.FAM -> GHC.Types.False
                        GrammarType2.FORM -> GHC.Types.True } }) -}
972fa0fec8d0708852832bdd0fd96d7e
  $fEqManifest ::
    GHC.Classes.Eq a => GHC.Classes.Eq (GrammarType2.Manifest a)
  DFunId[0]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a24 $dEq :: GHC.Classes.Eq a24.
                  @ (GrammarType2.Manifest a24)
                  (GrammarType2.$fEqManifest_$c== @ a24 $dEq)
                  (GrammarType2.$fEqManifest_$c/= @ a24 $dEq) -}
972fa0fec8d0708852832bdd0fd96d7e
  $fEqManifest_$c/= ::
    GHC.Classes.Eq a =>
    GrammarType2.Manifest a
    -> GrammarType2.Manifest a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a24
                   $dEq :: GHC.Classes.Eq a24
                   a25 :: GrammarType2.Manifest a24
                   b :: GrammarType2.Manifest a24 ->
                 case GrammarType2.$fEqManifest_$c== @ a24 $dEq a25 b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
972fa0fec8d0708852832bdd0fd96d7e
  $fEqManifest_$c== ::
    GHC.Classes.Eq a =>
    GrammarType2.Manifest a
    -> GrammarType2.Manifest a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a24
                   $dEq :: GHC.Classes.Eq a24
                   ds :: GrammarType2.Manifest a24
                   ds1 :: GrammarType2.Manifest a24 ->
                 case ds of wild {
                   GrammarType2.NoManifest
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarType2.NoManifest -> GHC.Types.True }
                   GrammarType2.Particle a25
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarType2.Particle b1 -> GHC.Classes.== @ a24 $dEq a25 b1 }
                   GrammarType2.Exponent a25
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarType2.Exponent b1
                        -> GHC.Classes.== @ a24 $dEq a25 b1 } }) -}
1e8428cf58353e5e31f8a5e0eb818421
  $fEqMood :: GHC.Classes.Eq GrammarType2.Mood
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Mood
                  GrammarType2.$fEqMood_$c==
                  GrammarType2.$fEqMood_$c/= -}
1e8428cf58353e5e31f8a5e0eb818421
  $fEqMood_$c/= ::
    GrammarType2.Mood -> GrammarType2.Mood -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a24 :: GrammarType2.Mood b :: GrammarType2.Mood ->
                 case a24 of wild {
                   GrammarType2.IND
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.IND -> GHC.Types.False }
                   GrammarType2.IRR
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.IRR -> GHC.Types.False }
                   GrammarType2.DEO
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.DEO -> GHC.Types.False }
                   GrammarType2.IMP
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.IMP -> GHC.Types.False }
                   GrammarType2.JUS
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.JUS -> GHC.Types.False }
                   GrammarType2.OPT
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.OPT -> GHC.Types.False }
                   GrammarType2.EPIS
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.EPIS -> GHC.Types.False }
                   GrammarType2.SBJV
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.SBJV -> GHC.Types.False }
                   GrammarType2.POT
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.POT -> GHC.Types.False }
                   GrammarType2.COND
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        GrammarType2.COND -> GHC.Types.False } }) -}
1e8428cf58353e5e31f8a5e0eb818421
  $fEqMood_$c== ::
    GrammarType2.Mood -> GrammarType2.Mood -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: GrammarType2.Mood ds1 :: GrammarType2.Mood ->
                 case ds of wild {
                   GrammarType2.IND
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.IND -> GHC.Types.True }
                   GrammarType2.IRR
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.IRR -> GHC.Types.True }
                   GrammarType2.DEO
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.DEO -> GHC.Types.True }
                   GrammarType2.IMP
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.IMP -> GHC.Types.True }
                   GrammarType2.JUS
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.JUS -> GHC.Types.True }
                   GrammarType2.OPT
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.OPT -> GHC.Types.True }
                   GrammarType2.EPIS
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.EPIS -> GHC.Types.True }
                   GrammarType2.SBJV
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.SBJV -> GHC.Types.True }
                   GrammarType2.POT
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.POT -> GHC.Types.True }
                   GrammarType2.COND
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarType2.COND -> GHC.Types.True } }) -}
a7c28e97173ad7b983bce4b939a8926c
  $fEqNumber :: GHC.Classes.Eq GrammarType2.Number
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Number
                  GrammarType2.$fEqNumber_$c==
                  GrammarType2.$fEqNumber_$c/= -}
a7c28e97173ad7b983bce4b939a8926c
  $fEqNumber_$c/= ::
    GrammarType2.Number -> GrammarType2.Number -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a24 :: GrammarType2.Number
                   b :: GrammarType2.Number ->
                 case a24 of wild {
                   GrammarType2.SG
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.SG -> GHC.Types.False }
                   GrammarType2.DU
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.DU -> GHC.Types.False }
                   GrammarType2.TRI
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.TRI -> GHC.Types.False }
                   GrammarType2.PA
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.PA -> GHC.Types.False }
                   GrammarType2.PL
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        GrammarType2.PL -> GHC.Types.False } }) -}
a7c28e97173ad7b983bce4b939a8926c
  $fEqNumber_$c== ::
    GrammarType2.Number -> GrammarType2.Number -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: GrammarType2.Number
                   ds1 :: GrammarType2.Number ->
                 case ds of wild {
                   GrammarType2.SG
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.SG -> GHC.Types.True }
                   GrammarType2.DU
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.DU -> GHC.Types.True }
                   GrammarType2.TRI
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.TRI -> GHC.Types.True }
                   GrammarType2.PA
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.PA -> GHC.Types.True }
                   GrammarType2.PL
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarType2.PL -> GHC.Types.True } }) -}
6982b76146a38d0a5bcfae8adeb790f1
  $fEqParticleSystem :: GHC.Classes.Eq GrammarType2.ParticleSystem
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.ParticleSystem
                  GrammarType2.$fEqParticleSystem_$c==
                  GrammarType2.$fEqParticleSystem_$c/= -}
6982b76146a38d0a5bcfae8adeb790f1
  $fEqParticleSystem_$c/= ::
    GrammarType2.ParticleSystem
    -> GrammarType2.ParticleSystem -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ a24 :: GrammarType2.ParticleSystem
                   b :: GrammarType2.ParticleSystem ->
                 case a24 of wild { GrammarType2.ParticleSystem a25 ->
                 case b of wild1 { GrammarType2.ParticleSystem b1 ->
                 case GHC.Classes.$fEq[]_$c==
                        @ (PhonemeType2.Morpheme,
                           (GHC.Base.Maybe GrammarType2.Gender,
                            GHC.Base.Maybe GrammarType2.Animacy,
                            GHC.Base.Maybe GrammarType2.Case,
                            GHC.Base.Maybe GrammarType2.Number,
                            GHC.Base.Maybe GrammarType2.Honorific,
                            GHC.Base.Maybe GrammarType2.Definiteness,
                            GHC.Base.Maybe GrammarType2.Specificity))
                        GrammarType2.$fEqExponentSystem_$s$fEq(,)
                        a25
                        b1 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
6982b76146a38d0a5bcfae8adeb790f1
  $fEqParticleSystem_$c== ::
    GrammarType2.ParticleSystem
    -> GrammarType2.ParticleSystem -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarType2.ParticleSystem
                   ds1 :: GrammarType2.ParticleSystem ->
                 case ds of wild { GrammarType2.ParticleSystem a24 ->
                 case ds1 of wild1 { GrammarType2.ParticleSystem b1 ->
                 GHC.Classes.$fEq[]_$c==
                   @ (PhonemeType2.Morpheme,
                      (GHC.Base.Maybe GrammarType2.Gender,
                       GHC.Base.Maybe GrammarType2.Animacy,
                       GHC.Base.Maybe GrammarType2.Case,
                       GHC.Base.Maybe GrammarType2.Number,
                       GHC.Base.Maybe GrammarType2.Honorific,
                       GHC.Base.Maybe GrammarType2.Definiteness,
                       GHC.Base.Maybe GrammarType2.Specificity))
                   GrammarType2.$fEqExponentSystem_$s$fEq(,)
                   a24
                   b1 } }) -}
db2825e3cf2c837756c98e763bcc411d
  $fEqPerson :: GHC.Classes.Eq GrammarType2.Person
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Person
                  GrammarType2.$fEqPerson_$c==
                  GrammarType2.$fEqPerson_$c/= -}
db2825e3cf2c837756c98e763bcc411d
  $fEqPerson_$c/= ::
    GrammarType2.Person -> GrammarType2.Person -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a24 :: GrammarType2.Person b :: GrammarType2.Person ->
                 case a24 of wild {
                   GrammarType2.FIRST
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.FIRST -> GHC.Types.False }
                   GrammarType2.SECOND
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.SECOND -> GHC.Types.False }
                   GrammarType2.THIRD
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        GrammarType2.THIRD -> GHC.Types.False } }) -}
db2825e3cf2c837756c98e763bcc411d
  $fEqPerson_$c== ::
    GrammarType2.Person -> GrammarType2.Person -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarType2.Person ds1 :: GrammarType2.Person ->
                 case ds of wild {
                   GrammarType2.FIRST
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.FIRST -> GHC.Types.True }
                   GrammarType2.SECOND
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.SECOND -> GHC.Types.True }
                   GrammarType2.THIRD
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarType2.THIRD -> GHC.Types.True } }) -}
a812e5c5789e0445882a8629e37b84c0
  $fEqPolarity :: GHC.Classes.Eq GrammarType2.Polarity
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Polarity
                  GrammarType2.$fEqPolarity_$c==
                  GrammarType2.$fEqPolarity_$c/= -}
a812e5c5789e0445882a8629e37b84c0
  $fEqPolarity_$c/= ::
    GrammarType2.Polarity -> GrammarType2.Polarity -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a24 :: GrammarType2.Polarity b :: GrammarType2.Polarity ->
                 case a24 of wild {
                   GrammarType2.AFF
                   -> case b of wild1 {
                        GrammarType2.AFF -> GHC.Types.False
                        GrammarType2.NEG -> GHC.Types.True }
                   GrammarType2.NEG
                   -> case b of wild1 {
                        GrammarType2.AFF -> GHC.Types.True
                        GrammarType2.NEG -> GHC.Types.False } }) -}
a812e5c5789e0445882a8629e37b84c0
  $fEqPolarity_$c== ::
    GrammarType2.Polarity -> GrammarType2.Polarity -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarType2.Polarity ds1 :: GrammarType2.Polarity ->
                 case ds of wild {
                   GrammarType2.AFF
                   -> case ds1 of wild1 {
                        GrammarType2.AFF -> GHC.Types.True
                        GrammarType2.NEG -> GHC.Types.False }
                   GrammarType2.NEG
                   -> case ds1 of wild1 {
                        GrammarType2.AFF -> GHC.Types.False
                        GrammarType2.NEG -> GHC.Types.True } }) -}
8acc464be69c950c5a5371aa4ffa757d
  $fEqSpecificity :: GHC.Classes.Eq GrammarType2.Specificity
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Specificity
                  GrammarType2.$fEqSpecificity_$c==
                  GrammarType2.$fEqSpecificity_$c/= -}
8acc464be69c950c5a5371aa4ffa757d
  $fEqSpecificity_$c/= ::
    GrammarType2.Specificity
    -> GrammarType2.Specificity -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a24 :: GrammarType2.Specificity b :: GrammarType2.Specificity ->
                 case a24 of wild {
                   GrammarType2.SPEC
                   -> case b of wild1 {
                        GrammarType2.SPEC -> GHC.Types.False
                        GrammarType2.NSPEC -> GHC.Types.True }
                   GrammarType2.NSPEC
                   -> case b of wild1 {
                        GrammarType2.SPEC -> GHC.Types.True
                        GrammarType2.NSPEC -> GHC.Types.False } }) -}
8acc464be69c950c5a5371aa4ffa757d
  $fEqSpecificity_$c== ::
    GrammarType2.Specificity
    -> GrammarType2.Specificity -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarType2.Specificity
                   ds1 :: GrammarType2.Specificity ->
                 case ds of wild {
                   GrammarType2.SPEC
                   -> case ds1 of wild1 {
                        GrammarType2.SPEC -> GHC.Types.True
                        GrammarType2.NSPEC -> GHC.Types.False }
                   GrammarType2.NSPEC
                   -> case ds1 of wild1 {
                        GrammarType2.SPEC -> GHC.Types.False
                        GrammarType2.NSPEC -> GHC.Types.True } }) -}
7c0511cad3468eb018d817a1a8934026
  $fEqTense :: GHC.Classes.Eq GrammarType2.Tense
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Tense
                  GrammarType2.$fEqTense_$c==
                  GrammarType2.$fEqTense_$c/= -}
7c0511cad3468eb018d817a1a8934026
  $fEqTense_$c/= ::
    GrammarType2.Tense -> GrammarType2.Tense -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a24 :: GrammarType2.Tense b :: GrammarType2.Tense ->
                 case a24 of wild {
                   GrammarType2.PST
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.PST -> GHC.Types.False }
                   GrammarType2.REM
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.REM -> GHC.Types.False }
                   GrammarType2.REC
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.REC -> GHC.Types.False }
                   GrammarType2.NPST
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.NPST -> GHC.Types.False }
                   GrammarType2.PRS
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.PRS -> GHC.Types.False }
                   GrammarType2.NFUT
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.NFUT -> GHC.Types.False }
                   GrammarType2.FUT
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.FUT -> GHC.Types.False }
                   GrammarType2.IMMF
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.IMMF -> GHC.Types.False }
                   GrammarType2.REMF
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        GrammarType2.REMF -> GHC.Types.False } }) -}
7c0511cad3468eb018d817a1a8934026
  $fEqTense_$c== ::
    GrammarType2.Tense -> GrammarType2.Tense -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: GrammarType2.Tense ds1 :: GrammarType2.Tense ->
                 case ds of wild {
                   GrammarType2.PST
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.PST -> GHC.Types.True }
                   GrammarType2.REM
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.REM -> GHC.Types.True }
                   GrammarType2.REC
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.REC -> GHC.Types.True }
                   GrammarType2.NPST
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.NPST -> GHC.Types.True }
                   GrammarType2.PRS
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.PRS -> GHC.Types.True }
                   GrammarType2.NFUT
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.NFUT -> GHC.Types.True }
                   GrammarType2.FUT
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.FUT -> GHC.Types.True }
                   GrammarType2.IMMF
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.IMMF -> GHC.Types.True }
                   GrammarType2.REMF
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarType2.REMF -> GHC.Types.True } }) -}
5fb21dc71ae46800ab0b386e73c2c62a
  $fEqTransitivity :: GHC.Classes.Eq GrammarType2.Transitivity
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Transitivity
                  GrammarType2.$fEqTransitivity_$c==
                  GrammarType2.$fEqTransitivity_$c/= -}
5fb21dc71ae46800ab0b386e73c2c62a
  $fEqTransitivity_$c/= ::
    GrammarType2.Transitivity
    -> GrammarType2.Transitivity -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a24 :: GrammarType2.Transitivity
                   b :: GrammarType2.Transitivity ->
                 case a24 of wild {
                   GrammarType2.INTR
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.INTR -> GHC.Types.False }
                   GrammarType2.TR
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.TR -> GHC.Types.False }
                   GrammarType2.DITR
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        GrammarType2.DITR -> GHC.Types.False } }) -}
5fb21dc71ae46800ab0b386e73c2c62a
  $fEqTransitivity_$c== ::
    GrammarType2.Transitivity
    -> GrammarType2.Transitivity -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarType2.Transitivity
                   ds1 :: GrammarType2.Transitivity ->
                 case ds of wild {
                   GrammarType2.INTR
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.INTR -> GHC.Types.True }
                   GrammarType2.TR
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.TR -> GHC.Types.True }
                   GrammarType2.DITR
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarType2.DITR -> GHC.Types.True } }) -}
12e9be3ba79cdb444f2fb86991189095
  $fEqVoice :: GHC.Classes.Eq GrammarType2.Voice
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Voice
                  GrammarType2.$fEqVoice_$c==
                  GrammarType2.$fEqVoice_$c/= -}
12e9be3ba79cdb444f2fb86991189095
  $fEqVoice_$c/= ::
    GrammarType2.Voice -> GrammarType2.Voice -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a24 :: GrammarType2.Voice b :: GrammarType2.Voice ->
                 case a24 of wild {
                   GrammarType2.ACT
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.ACT -> GHC.Types.False }
                   GrammarType2.MID
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType2.MID -> GHC.Types.False }
                   GrammarType2.PAS
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        GrammarType2.PAS -> GHC.Types.False } }) -}
12e9be3ba79cdb444f2fb86991189095
  $fEqVoice_$c== ::
    GrammarType2.Voice -> GrammarType2.Voice -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarType2.Voice ds1 :: GrammarType2.Voice ->
                 case ds of wild {
                   GrammarType2.ACT
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.ACT -> GHC.Types.True }
                   GrammarType2.MID
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType2.MID -> GHC.Types.True }
                   GrammarType2.PAS
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarType2.PAS -> GHC.Types.True } }) -}
455e61c4a5fa3c4b414a337c1d019d69
  $fEqVolition :: GHC.Classes.Eq GrammarType2.Volition
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Volition
                  GrammarType2.$fEqVolition_$c==
                  GrammarType2.$fEqVolition_$c/= -}
455e61c4a5fa3c4b414a337c1d019d69
  $fEqVolition_$c/= ::
    GrammarType2.Volition -> GrammarType2.Volition -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a24 :: GrammarType2.Volition b :: GrammarType2.Volition ->
                 case a24 of wild {
                   GrammarType2.VOL
                   -> case b of wild1 {
                        GrammarType2.VOL -> GHC.Types.False
                        GrammarType2.NVOL -> GHC.Types.True }
                   GrammarType2.NVOL
                   -> case b of wild1 {
                        GrammarType2.VOL -> GHC.Types.True
                        GrammarType2.NVOL -> GHC.Types.False } }) -}
455e61c4a5fa3c4b414a337c1d019d69
  $fEqVolition_$c== ::
    GrammarType2.Volition -> GrammarType2.Volition -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarType2.Volition ds1 :: GrammarType2.Volition ->
                 case ds of wild {
                   GrammarType2.VOL
                   -> case ds1 of wild1 {
                        GrammarType2.VOL -> GHC.Types.True
                        GrammarType2.NVOL -> GHC.Types.False }
                   GrammarType2.NVOL
                   -> case ds1 of wild1 {
                        GrammarType2.VOL -> GHC.Types.False
                        GrammarType2.NVOL -> GHC.Types.True } }) -}
997f0106cc61a0dae6693b73d4ae044c
  $fReadAnimacy :: GHC.Read.Read GrammarType2.Animacy
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Animacy
                  GrammarType2.$fReadAnimacy_$s$dmreadsPrec
                  GrammarType2.$fReadAnimacy_$sreadListDefault
                  GrammarType2.$fReadAnimacy_$creadPrec
                  GrammarType2.$fReadAnimacy_$creadListPrec -}
997f0106cc61a0dae6693b73d4ae044c
  $fReadAnimacy1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarType2.Animacy] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarType2.Animacy]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarType2.Animacy
                   GrammarType2.$fReadAnimacy2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarType2.Animacy>_R))
                   @ b
                   eta1) -}
997f0106cc61a0dae6693b73d4ae044c
  $fReadAnimacy10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Animacy -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Animacy -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.INAN) -}
33f10f87c8cca6b77bbe7ced86fc94ff
  $fReadAnimacy11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "INAN"#) -}
997f0106cc61a0dae6693b73d4ae044c
  $fReadAnimacy12 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Animacy)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadAnimacy14,
                  GrammarType2.$fReadAnimacy13
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Animacy>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Animacy>_R))))) -}
997f0106cc61a0dae6693b73d4ae044c
  $fReadAnimacy13 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Animacy -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Animacy -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.ZO) -}
fab5db2d4d70ad124db43f3065f53835
  $fReadAnimacy14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ZO"#) -}
997f0106cc61a0dae6693b73d4ae044c
  $fReadAnimacy15 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Animacy)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadAnimacy17,
                  GrammarType2.$fReadAnimacy16
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Animacy>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Animacy>_R))))) -}
997f0106cc61a0dae6693b73d4ae044c
  $fReadAnimacy16 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Animacy -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Animacy -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.NHUM) -}
553c44f214916034f08b8d4b918c8979
  $fReadAnimacy17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NHUM"#) -}
997f0106cc61a0dae6693b73d4ae044c
  $fReadAnimacy18 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Animacy)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadAnimacy20,
                  GrammarType2.$fReadAnimacy19
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Animacy>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Animacy>_R))))) -}
997f0106cc61a0dae6693b73d4ae044c
  $fReadAnimacy19 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Animacy -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Animacy -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.HUM) -}
997f0106cc61a0dae6693b73d4ae044c
  $fReadAnimacy2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarType2.Animacy
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarType2.Animacy
                   GrammarType2.$fReadAnimacy3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarType2.Animacy>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarType2.Animacy>_R)))) -}
3a10aa45553bf08d355e95478b26df12
  $fReadAnimacy20 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "HUM"#) -}
997f0106cc61a0dae6693b73d4ae044c
  $fReadAnimacy21 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Animacy)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadAnimacy23,
                  GrammarType2.$fReadAnimacy22
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Animacy>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Animacy>_R))))) -}
997f0106cc61a0dae6693b73d4ae044c
  $fReadAnimacy22 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Animacy -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Animacy -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.AN) -}
ae92adb1a38939a276c56ce9fcdcc512
  $fReadAnimacy23 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AN"#) -}
997f0106cc61a0dae6693b73d4ae044c
  $fReadAnimacy3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Animacy -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarType2.Animacy -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarType2.Animacy
                   GrammarType2.$fReadAnimacy4
                   eta
                   @ b
                   eta1) -}
997f0106cc61a0dae6693b73d4ae044c
  $fReadAnimacy4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Animacy)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Animacy)
                   GrammarType2.$fReadAnimacy21
                   GrammarType2.$fReadAnimacy5) -}
997f0106cc61a0dae6693b73d4ae044c
  $fReadAnimacy5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Animacy)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Animacy)
                   GrammarType2.$fReadAnimacy18
                   GrammarType2.$fReadAnimacy6) -}
997f0106cc61a0dae6693b73d4ae044c
  $fReadAnimacy6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Animacy)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Animacy)
                   GrammarType2.$fReadAnimacy15
                   GrammarType2.$fReadAnimacy7) -}
997f0106cc61a0dae6693b73d4ae044c
  $fReadAnimacy7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Animacy)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Animacy)
                   GrammarType2.$fReadAnimacy12
                   GrammarType2.$fReadAnimacy8) -}
997f0106cc61a0dae6693b73d4ae044c
  $fReadAnimacy8 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Animacy)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Animacy)
                   GrammarType2.$fReadAnimacy9
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Animacy))) -}
997f0106cc61a0dae6693b73d4ae044c
  $fReadAnimacy9 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Animacy)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadAnimacy11,
                  GrammarType2.$fReadAnimacy10
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Animacy>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Animacy>_R))))) -}
997f0106cc61a0dae6693b73d4ae044c
  $fReadAnimacy_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [GrammarType2.Animacy]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadAnimacy1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarType2.Animacy]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarType2.Animacy]>_R))) -}
997f0106cc61a0dae6693b73d4ae044c
  $fReadAnimacy_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Animacy
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadAnimacy2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarType2.Animacy>_R)) -}
997f0106cc61a0dae6693b73d4ae044c
  $fReadAnimacy_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarType2.Animacy
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarType2.Animacy
                   GrammarType2.$fReadAnimacy_$creadPrec
                   eta) -}
997f0106cc61a0dae6693b73d4ae044c
  $fReadAnimacy_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarType2.Animacy]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarType2.Animacy]
                   ((GrammarType2.$fReadAnimacy_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarType2.Animacy]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarType2.Animacy]>_R)
                      @ [GrammarType2.Animacy]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarType2.Animacy]))) -}
d544c1f4b832edd20ebb4e3b0f6dfe57
  $fReadAspect :: GHC.Read.Read GrammarType2.Aspect
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Aspect
                  GrammarType2.$fReadAspect_$s$dmreadsPrec
                  GrammarType2.$fReadAspect_$sreadListDefault
                  GrammarType2.$fReadAspect_$creadPrec
                  GrammarType2.$fReadAspect_$creadListPrec -}
d544c1f4b832edd20ebb4e3b0f6dfe57
  $fReadAspect1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarType2.Aspect] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarType2.Aspect]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarType2.Aspect
                   GrammarType2.$fReadAspect2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarType2.Aspect>_R))
                   @ b
                   eta1) -}
d544c1f4b832edd20ebb4e3b0f6dfe57
  $fReadAspect10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Aspect -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Aspect -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.PFV) -}
13a968507d5f0e075e5775f47559c439
  $fReadAspect11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PFV"#) -}
d544c1f4b832edd20ebb4e3b0f6dfe57
  $fReadAspect2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarType2.Aspect
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarType2.Aspect
                   GrammarType2.$fReadAspect3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarType2.Aspect>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarType2.Aspect>_R)))) -}
d544c1f4b832edd20ebb4e3b0f6dfe57
  $fReadAspect3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Aspect -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarType2.Aspect -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarType2.Aspect
                   GrammarType2.$fReadAspect4
                   eta
                   @ b
                   eta1) -}
d544c1f4b832edd20ebb4e3b0f6dfe57
  $fReadAspect4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Aspect)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Aspect)
                   GrammarType2.$fReadAspect9
                   GrammarType2.$fReadAspect5) -}
d544c1f4b832edd20ebb4e3b0f6dfe57
  $fReadAspect5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Aspect)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Aspect)
                   GrammarType2.$fReadAspect6
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Aspect))) -}
d544c1f4b832edd20ebb4e3b0f6dfe57
  $fReadAspect6 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Aspect)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadAspect8,
                  GrammarType2.$fReadAspect7
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Aspect>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Aspect>_R))))) -}
d544c1f4b832edd20ebb4e3b0f6dfe57
  $fReadAspect7 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Aspect -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Aspect -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.IPFV) -}
aa4fe093ca9d92c5b3a32dd7f0e96037
  $fReadAspect8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "IPFV"#) -}
d544c1f4b832edd20ebb4e3b0f6dfe57
  $fReadAspect9 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Aspect)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadAspect11,
                  GrammarType2.$fReadAspect10
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Aspect>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Aspect>_R))))) -}
d544c1f4b832edd20ebb4e3b0f6dfe57
  $fReadAspect_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [GrammarType2.Aspect]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadAspect1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarType2.Aspect]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarType2.Aspect]>_R))) -}
d544c1f4b832edd20ebb4e3b0f6dfe57
  $fReadAspect_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Aspect
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadAspect2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarType2.Aspect>_R)) -}
d544c1f4b832edd20ebb4e3b0f6dfe57
  $fReadAspect_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarType2.Aspect
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarType2.Aspect
                   GrammarType2.$fReadAspect_$creadPrec
                   eta) -}
d544c1f4b832edd20ebb4e3b0f6dfe57
  $fReadAspect_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarType2.Aspect]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarType2.Aspect]
                   ((GrammarType2.$fReadAspect_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarType2.Aspect]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarType2.Aspect]>_R)
                      @ [GrammarType2.Aspect]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarType2.Aspect]))) -}
e317df6bd7f01bf53f9bafa3ac506fc7
  $fReadCase :: GHC.Read.Read GrammarType2.Case
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Case
                  GrammarType2.$fReadCase_$s$dmreadsPrec
                  GrammarType2.$fReadCase_$sreadListDefault
                  GrammarType2.$fReadCase_$creadPrec
                  GrammarType2.$fReadCase_$creadListPrec -}
e317df6bd7f01bf53f9bafa3ac506fc7
  $fReadCase1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarType2.Case] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarType2.Case] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarType2.Case
                   GrammarType2.$fReadCase2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarType2.Case>_R))
                   @ b
                   eta1) -}
e317df6bd7f01bf53f9bafa3ac506fc7
  $fReadCase10 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Case)
                   GrammarType2.$fReadCase23
                   GrammarType2.$fReadCase11) -}
e317df6bd7f01bf53f9bafa3ac506fc7
  $fReadCase11 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Case)
                   GrammarType2.$fReadCase20
                   GrammarType2.$fReadCase12) -}
e317df6bd7f01bf53f9bafa3ac506fc7
  $fReadCase12 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Case)
                   GrammarType2.$fReadCase17
                   GrammarType2.$fReadCase13) -}
e317df6bd7f01bf53f9bafa3ac506fc7
  $fReadCase13 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Case)
                   GrammarType2.$fReadCase14
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Case))) -}
e317df6bd7f01bf53f9bafa3ac506fc7
  $fReadCase14 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Case)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadCase16,
                  GrammarType2.$fReadCase15
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Case>_R))))) -}
e317df6bd7f01bf53f9bafa3ac506fc7
  $fReadCase15 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.VOC) -}
50f9a0773d14fbf9cd093e82bbfcd470
  $fReadCase16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "VOC"#) -}
e317df6bd7f01bf53f9bafa3ac506fc7
  $fReadCase17 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Case)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadCase19,
                  GrammarType2.$fReadCase18
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Case>_R))))) -}
e317df6bd7f01bf53f9bafa3ac506fc7
  $fReadCase18 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.INS) -}
7809b287e1d9578f7c747d49825b5594
  $fReadCase19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "INS"#) -}
e317df6bd7f01bf53f9bafa3ac506fc7
  $fReadCase2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarType2.Case
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarType2.Case
                   GrammarType2.$fReadCase3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarType2.Case>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarType2.Case>_R)))) -}
e317df6bd7f01bf53f9bafa3ac506fc7
  $fReadCase20 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Case)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadCase22,
                  GrammarType2.$fReadCase21
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Case>_R))))) -}
e317df6bd7f01bf53f9bafa3ac506fc7
  $fReadCase21 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.ABL) -}
c766ca7e1dfb1dbc86a4c5613f212329
  $fReadCase22 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ABL"#) -}
e317df6bd7f01bf53f9bafa3ac506fc7
  $fReadCase23 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Case)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadCase25,
                  GrammarType2.$fReadCase24
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Case>_R))))) -}
e317df6bd7f01bf53f9bafa3ac506fc7
  $fReadCase24 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.PREP) -}
964275917f7f5e682db4fdf8f850b44e
  $fReadCase25 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PREP"#) -}
e317df6bd7f01bf53f9bafa3ac506fc7
  $fReadCase26 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Case)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadCase28,
                  GrammarType2.$fReadCase27
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Case>_R))))) -}
e317df6bd7f01bf53f9bafa3ac506fc7
  $fReadCase27 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.LOC) -}
bc396b4324fa5caca7919c466480ae20
  $fReadCase28 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "LOC"#) -}
e317df6bd7f01bf53f9bafa3ac506fc7
  $fReadCase29 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Case)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadCase31,
                  GrammarType2.$fReadCase30
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Case>_R))))) -}
e317df6bd7f01bf53f9bafa3ac506fc7
  $fReadCase3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarType2.Case -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarType2.Case
                   GrammarType2.$fReadCase4
                   eta
                   @ b
                   eta1) -}
e317df6bd7f01bf53f9bafa3ac506fc7
  $fReadCase30 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.DAT) -}
9bcf7578ea3e443eb1c1f162d0da8fae
  $fReadCase31 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DAT"#) -}
e317df6bd7f01bf53f9bafa3ac506fc7
  $fReadCase32 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Case)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadCase34,
                  GrammarType2.$fReadCase33
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Case>_R))))) -}
e317df6bd7f01bf53f9bafa3ac506fc7
  $fReadCase33 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.GEN) -}
230251de4952b79ef891459d2ef55030
  $fReadCase34 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "GEN"#) -}
e317df6bd7f01bf53f9bafa3ac506fc7
  $fReadCase35 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Case)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadCase37,
                  GrammarType2.$fReadCase36
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Case>_R))))) -}
e317df6bd7f01bf53f9bafa3ac506fc7
  $fReadCase36 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.ERG) -}
b9d511a8f4432f6dafae9adc03730042
  $fReadCase37 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ERG"#) -}
e317df6bd7f01bf53f9bafa3ac506fc7
  $fReadCase38 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Case)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadCase40,
                  GrammarType2.$fReadCase39
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Case>_R))))) -}
e317df6bd7f01bf53f9bafa3ac506fc7
  $fReadCase39 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.ACC) -}
e317df6bd7f01bf53f9bafa3ac506fc7
  $fReadCase4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Case)
                   GrammarType2.$fReadCase41
                   GrammarType2.$fReadCase5) -}
b12124ad2434454139be7e8cd1f78f70
  $fReadCase40 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ACC"#) -}
e317df6bd7f01bf53f9bafa3ac506fc7
  $fReadCase41 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Case)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadCase43,
                  GrammarType2.$fReadCase42
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Case>_R))))) -}
e317df6bd7f01bf53f9bafa3ac506fc7
  $fReadCase42 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.NOM) -}
8e723ceb31765644a10d03629b2f7d5e
  $fReadCase43 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NOM"#) -}
e317df6bd7f01bf53f9bafa3ac506fc7
  $fReadCase5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Case)
                   GrammarType2.$fReadCase38
                   GrammarType2.$fReadCase6) -}
e317df6bd7f01bf53f9bafa3ac506fc7
  $fReadCase6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Case)
                   GrammarType2.$fReadCase35
                   GrammarType2.$fReadCase7) -}
e317df6bd7f01bf53f9bafa3ac506fc7
  $fReadCase7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Case)
                   GrammarType2.$fReadCase32
                   GrammarType2.$fReadCase8) -}
e317df6bd7f01bf53f9bafa3ac506fc7
  $fReadCase8 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Case)
                   GrammarType2.$fReadCase29
                   GrammarType2.$fReadCase9) -}
e317df6bd7f01bf53f9bafa3ac506fc7
  $fReadCase9 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Case)
                   GrammarType2.$fReadCase26
                   GrammarType2.$fReadCase10) -}
e317df6bd7f01bf53f9bafa3ac506fc7
  $fReadCase_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [GrammarType2.Case]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadCase1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarType2.Case]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarType2.Case]>_R))) -}
e317df6bd7f01bf53f9bafa3ac506fc7
  $fReadCase_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Case
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadCase2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarType2.Case>_R)) -}
e317df6bd7f01bf53f9bafa3ac506fc7
  $fReadCase_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarType2.Case
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarType2.Case
                   GrammarType2.$fReadCase_$creadPrec
                   eta) -}
e317df6bd7f01bf53f9bafa3ac506fc7
  $fReadCase_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarType2.Case]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarType2.Case]
                   ((GrammarType2.$fReadCase_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarType2.Case]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarType2.Case]>_R)
                      @ [GrammarType2.Case]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarType2.Case]))) -}
2a24341dc728cf3214c312c2683a2f7a
  $fReadDefiniteness :: GHC.Read.Read GrammarType2.Definiteness
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Definiteness
                  GrammarType2.$fReadDefiniteness_$s$dmreadsPrec
                  GrammarType2.$fReadDefiniteness_$sreadListDefault
                  GrammarType2.$fReadDefiniteness_$creadPrec
                  GrammarType2.$fReadDefiniteness_$creadListPrec -}
2a24341dc728cf3214c312c2683a2f7a
  $fReadDefiniteness1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarType2.Definiteness] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarType2.Definiteness]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarType2.Definiteness
                   GrammarType2.$fReadDefiniteness2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarType2.Definiteness>_R))
                   @ b
                   eta1) -}
2a24341dc728cf3214c312c2683a2f7a
  $fReadDefiniteness10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Definiteness -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Definiteness
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.DEF) -}
24b55da87cef159e003daf6801bb1ca1
  $fReadDefiniteness11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DEF"#) -}
2a24341dc728cf3214c312c2683a2f7a
  $fReadDefiniteness2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarType2.Definiteness
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarType2.Definiteness
                   GrammarType2.$fReadDefiniteness3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarType2.Definiteness>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarType2.Definiteness>_R)))) -}
2a24341dc728cf3214c312c2683a2f7a
  $fReadDefiniteness3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Definiteness -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarType2.Definiteness
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarType2.Definiteness
                   GrammarType2.$fReadDefiniteness4
                   eta
                   @ b
                   eta1) -}
2a24341dc728cf3214c312c2683a2f7a
  $fReadDefiniteness4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GrammarType2.Definiteness)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Definiteness)
                   GrammarType2.$fReadDefiniteness9
                   GrammarType2.$fReadDefiniteness5) -}
2a24341dc728cf3214c312c2683a2f7a
  $fReadDefiniteness5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GrammarType2.Definiteness)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Definiteness)
                   GrammarType2.$fReadDefiniteness6
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           GrammarType2.Definiteness))) -}
2a24341dc728cf3214c312c2683a2f7a
  $fReadDefiniteness6 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Definiteness)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadDefiniteness8,
                  GrammarType2.$fReadDefiniteness7
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Definiteness>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Definiteness>_R))))) -}
2a24341dc728cf3214c312c2683a2f7a
  $fReadDefiniteness7 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Definiteness -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Definiteness
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.INDF) -}
9f3a47ea601ef58daa87fb1ed277ead3
  $fReadDefiniteness8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "INDF"#) -}
2a24341dc728cf3214c312c2683a2f7a
  $fReadDefiniteness9 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Definiteness)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadDefiniteness11,
                  GrammarType2.$fReadDefiniteness10
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Definiteness>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Definiteness>_R))))) -}
2a24341dc728cf3214c312c2683a2f7a
  $fReadDefiniteness_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [GrammarType2.Definiteness]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadDefiniteness1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarType2.Definiteness]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarType2.Definiteness]>_R))) -}
2a24341dc728cf3214c312c2683a2f7a
  $fReadDefiniteness_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Definiteness
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadDefiniteness2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarType2.Definiteness>_R)) -}
2a24341dc728cf3214c312c2683a2f7a
  $fReadDefiniteness_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarType2.Definiteness
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarType2.Definiteness
                   GrammarType2.$fReadDefiniteness_$creadPrec
                   eta) -}
2a24341dc728cf3214c312c2683a2f7a
  $fReadDefiniteness_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarType2.Definiteness]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarType2.Definiteness]
                   ((GrammarType2.$fReadDefiniteness_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarType2.Definiteness]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarType2.Definiteness]>_R)
                      @ [GrammarType2.Definiteness]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarType2.Definiteness]))) -}
97680a78ec9508d30ba0411b94ab5395
  $fReadEvidentiality :: GHC.Read.Read GrammarType2.Evidentiality
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Evidentiality
                  GrammarType2.$fReadEvidentiality_$s$dmreadsPrec
                  GrammarType2.$fReadEvidentiality_$sreadListDefault
                  GrammarType2.$fReadEvidentiality_$creadPrec
                  GrammarType2.$fReadEvidentiality_$creadListPrec -}
97680a78ec9508d30ba0411b94ab5395
  $fReadEvidentiality1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarType2.Evidentiality] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarType2.Evidentiality]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarType2.Evidentiality
                   GrammarType2.$fReadEvidentiality2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarType2.Evidentiality>_R))
                   @ b
                   eta1) -}
97680a78ec9508d30ba0411b94ab5395
  $fReadEvidentiality10 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GrammarType2.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GrammarType2.Evidentiality)
                   GrammarType2.$fReadEvidentiality23
                   GrammarType2.$fReadEvidentiality11) -}
97680a78ec9508d30ba0411b94ab5395
  $fReadEvidentiality11 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GrammarType2.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GrammarType2.Evidentiality)
                   GrammarType2.$fReadEvidentiality20
                   GrammarType2.$fReadEvidentiality12) -}
97680a78ec9508d30ba0411b94ab5395
  $fReadEvidentiality12 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GrammarType2.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GrammarType2.Evidentiality)
                   GrammarType2.$fReadEvidentiality17
                   GrammarType2.$fReadEvidentiality13) -}
97680a78ec9508d30ba0411b94ab5395
  $fReadEvidentiality13 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GrammarType2.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GrammarType2.Evidentiality)
                   GrammarType2.$fReadEvidentiality14
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           GrammarType2.Evidentiality))) -}
97680a78ec9508d30ba0411b94ab5395
  $fReadEvidentiality14 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GrammarType2.Evidentiality)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadEvidentiality16,
                  GrammarType2.$fReadEvidentiality15
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Evidentiality>_R))))) -}
97680a78ec9508d30ba0411b94ab5395
  $fReadEvidentiality15 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Evidentiality
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.ASS) -}
32252c1fb64dce48ea4ece79b63b1424
  $fReadEvidentiality16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ASS"#) -}
97680a78ec9508d30ba0411b94ab5395
  $fReadEvidentiality17 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GrammarType2.Evidentiality)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadEvidentiality19,
                  GrammarType2.$fReadEvidentiality18
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Evidentiality>_R))))) -}
97680a78ec9508d30ba0411b94ab5395
  $fReadEvidentiality18 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Evidentiality
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.QUO) -}
a9f89f6d6ff83c8dae50241d6325a1b4
  $fReadEvidentiality19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "QUO"#) -}
97680a78ec9508d30ba0411b94ab5395
  $fReadEvidentiality2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarType2.Evidentiality
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarType2.Evidentiality
                   GrammarType2.$fReadEvidentiality3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarType2.Evidentiality>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarType2.Evidentiality>_R)))) -}
97680a78ec9508d30ba0411b94ab5395
  $fReadEvidentiality20 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GrammarType2.Evidentiality)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadEvidentiality22,
                  GrammarType2.$fReadEvidentiality21
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Evidentiality>_R))))) -}
97680a78ec9508d30ba0411b94ab5395
  $fReadEvidentiality21 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Evidentiality
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.HSY) -}
a78f5c0333ea9a245b3f19ea0641ce57
  $fReadEvidentiality22 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "HSY"#) -}
97680a78ec9508d30ba0411b94ab5395
  $fReadEvidentiality23 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GrammarType2.Evidentiality)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadEvidentiality25,
                  GrammarType2.$fReadEvidentiality24
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Evidentiality>_R))))) -}
97680a78ec9508d30ba0411b94ab5395
  $fReadEvidentiality24 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Evidentiality
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.REP) -}
548735350a9fca031e270ae7b8e41005
  $fReadEvidentiality25 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "REP"#) -}
97680a78ec9508d30ba0411b94ab5395
  $fReadEvidentiality26 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GrammarType2.Evidentiality)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadEvidentiality28,
                  GrammarType2.$fReadEvidentiality27
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Evidentiality>_R))))) -}
97680a78ec9508d30ba0411b94ab5395
  $fReadEvidentiality27 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Evidentiality
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.INFER) -}
bf006e95b5cf522f30d94df471d7db12
  $fReadEvidentiality28 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "INFER"#) -}
97680a78ec9508d30ba0411b94ab5395
  $fReadEvidentiality29 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GrammarType2.Evidentiality)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadEvidentiality31,
                  GrammarType2.$fReadEvidentiality30
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Evidentiality>_R))))) -}
97680a78ec9508d30ba0411b94ab5395
  $fReadEvidentiality3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarType2.Evidentiality
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarType2.Evidentiality
                   GrammarType2.$fReadEvidentiality4
                   eta
                   @ b
                   eta1) -}
97680a78ec9508d30ba0411b94ab5395
  $fReadEvidentiality30 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Evidentiality
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.AUD) -}
d8014c0479f17423fea087ffe37e1524
  $fReadEvidentiality31 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AUD"#) -}
97680a78ec9508d30ba0411b94ab5395
  $fReadEvidentiality32 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GrammarType2.Evidentiality)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadEvidentiality34,
                  GrammarType2.$fReadEvidentiality33
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Evidentiality>_R))))) -}
97680a78ec9508d30ba0411b94ab5395
  $fReadEvidentiality33 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Evidentiality
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.NVIS) -}
9cdd390e381a77824c9c64a4c44d2277
  $fReadEvidentiality34 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NVIS"#) -}
97680a78ec9508d30ba0411b94ab5395
  $fReadEvidentiality35 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GrammarType2.Evidentiality)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadEvidentiality37,
                  GrammarType2.$fReadEvidentiality36
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Evidentiality>_R))))) -}
97680a78ec9508d30ba0411b94ab5395
  $fReadEvidentiality36 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Evidentiality
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.VIS) -}
649cfdde87563bb84a4cdc270d222726
  $fReadEvidentiality37 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "VIS"#) -}
97680a78ec9508d30ba0411b94ab5395
  $fReadEvidentiality38 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GrammarType2.Evidentiality)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadEvidentiality40,
                  GrammarType2.$fReadEvidentiality39
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Evidentiality>_R))))) -}
97680a78ec9508d30ba0411b94ab5395
  $fReadEvidentiality39 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Evidentiality
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.SENS) -}
97680a78ec9508d30ba0411b94ab5395
  $fReadEvidentiality4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GrammarType2.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GrammarType2.Evidentiality)
                   GrammarType2.$fReadEvidentiality41
                   GrammarType2.$fReadEvidentiality5) -}
413625d248c14cb60a41000f13c0dfff
  $fReadEvidentiality40 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SENS"#) -}
97680a78ec9508d30ba0411b94ab5395
  $fReadEvidentiality41 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       GrammarType2.Evidentiality)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadEvidentiality43,
                  GrammarType2.$fReadEvidentiality42
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Evidentiality>_R))))) -}
97680a78ec9508d30ba0411b94ab5395
  $fReadEvidentiality42 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Evidentiality
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.EXP) -}
2ef7530012bd7c50ed031279cc4c8ae8
  $fReadEvidentiality43 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "EXP"#) -}
97680a78ec9508d30ba0411b94ab5395
  $fReadEvidentiality5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GrammarType2.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GrammarType2.Evidentiality)
                   GrammarType2.$fReadEvidentiality38
                   GrammarType2.$fReadEvidentiality6) -}
97680a78ec9508d30ba0411b94ab5395
  $fReadEvidentiality6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GrammarType2.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GrammarType2.Evidentiality)
                   GrammarType2.$fReadEvidentiality35
                   GrammarType2.$fReadEvidentiality7) -}
97680a78ec9508d30ba0411b94ab5395
  $fReadEvidentiality7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GrammarType2.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GrammarType2.Evidentiality)
                   GrammarType2.$fReadEvidentiality32
                   GrammarType2.$fReadEvidentiality8) -}
97680a78ec9508d30ba0411b94ab5395
  $fReadEvidentiality8 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GrammarType2.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GrammarType2.Evidentiality)
                   GrammarType2.$fReadEvidentiality29
                   GrammarType2.$fReadEvidentiality9) -}
97680a78ec9508d30ba0411b94ab5395
  $fReadEvidentiality9 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GrammarType2.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        GrammarType2.Evidentiality)
                   GrammarType2.$fReadEvidentiality26
                   GrammarType2.$fReadEvidentiality10) -}
97680a78ec9508d30ba0411b94ab5395
  $fReadEvidentiality_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [GrammarType2.Evidentiality]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadEvidentiality1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarType2.Evidentiality]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarType2.Evidentiality]>_R))) -}
97680a78ec9508d30ba0411b94ab5395
  $fReadEvidentiality_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Evidentiality
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadEvidentiality2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarType2.Evidentiality>_R)) -}
97680a78ec9508d30ba0411b94ab5395
  $fReadEvidentiality_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarType2.Evidentiality
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarType2.Evidentiality
                   GrammarType2.$fReadEvidentiality_$creadPrec
                   eta) -}
97680a78ec9508d30ba0411b94ab5395
  $fReadEvidentiality_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarType2.Evidentiality]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarType2.Evidentiality]
                   ((GrammarType2.$fReadEvidentiality_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarType2.Evidentiality]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarType2.Evidentiality]>_R)
                      @ [GrammarType2.Evidentiality]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarType2.Evidentiality]))) -}
83b76b7eefbf738909a19bb1d1eb6a84
  $fReadExponentSystem :: GHC.Read.Read GrammarType2.ExponentSystem
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.ExponentSystem
                  GrammarType2.$fReadExponentSystem_$creadsPrec
                  GrammarType2.$fReadExponentSystem_$sreadListDefault
                  GrammarType2.$fReadExponentSystem_$creadPrec
                  GrammarType2.$fReadExponentSystem_$creadListPrec -}
83b76b7eefbf738909a19bb1d1eb6a84
  $fReadExponentSystem1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarType2.ExponentSystem] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarType2.ExponentSystem]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarType2.ExponentSystem
                   GrammarType2.$fReadExponentSystem2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarType2.ExponentSystem>_R))
                   @ b
                   eta1) -}
03655a701687a86b793b4ec494d18974
  $fReadExponentSystem10 ::
    GHC.Read.Read (GHC.Base.Maybe GrammarType2.Case)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadExponentSystem_$s$fReadMaybe4 -}
c943f688c7abded1266ec6c003c17b7f
  $fReadExponentSystem11 ::
    GHC.Read.Read (GHC.Base.Maybe GrammarType2.Animacy)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadExponentSystem_$s$fReadMaybe5 -}
0752e3bfebe6186d93856509430fc8b7
  $fReadExponentSystem12 ::
    GHC.Read.Read (GHC.Base.Maybe GrammarType2.Gender)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadExponentSystem_$s$fReadMaybe6 -}
83b76b7eefbf738909a19bb1d1eb6a84
  $fReadExponentSystem2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarType2.ExponentSystem
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarType2.ExponentSystem
                   GrammarType2.$fReadExponentSystem3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarType2.ExponentSystem>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarType2.ExponentSystem>_R)))) -}
83b76b7eefbf738909a19bb1d1eb6a84
  $fReadExponentSystem3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.ExponentSystem -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: GrammarType2.ExponentSystem
                         -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 ->
                 GrammarType2.$wa ww1 @ b w1 }) -}
896e1348bcd6914c174540ed0fc03ed5
  $fReadExponentSystem4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ExponentSystem"#) -}
9a87c6b42fae0dfc00a1b6b7ad656e21
  $fReadExponentSystem5 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b1.
       ((PhonemeType2.Morpheme,
         (GHC.Base.Maybe GrammarType2.Gender,
          GHC.Base.Maybe GrammarType2.Animacy,
          GHC.Base.Maybe GrammarType2.Case,
          GHC.Base.Maybe GrammarType2.Number,
          GHC.Base.Maybe GrammarType2.Honorific,
          GHC.Base.Maybe GrammarType2.Definiteness,
          GHC.Base.Maybe GrammarType2.Specificity))
        -> Text.ParserCombinators.ReadP.P b1)
       -> Text.ParserCombinators.ReadP.P b1
  {- Arity: 2,
     Unfolding: (\ w2 :: Text.ParserCombinators.ReadPrec.Prec
                   @ b1
                   w3 :: (PhonemeType2.Morpheme,
                          (GHC.Base.Maybe GrammarType2.Gender,
                           GHC.Base.Maybe GrammarType2.Animacy,
                           GHC.Base.Maybe GrammarType2.Case,
                           GHC.Base.Maybe GrammarType2.Number,
                           GHC.Base.Maybe GrammarType2.Honorific,
                           GHC.Base.Maybe GrammarType2.Definiteness,
                           GHC.Base.Maybe GrammarType2.Specificity))
                         -> Text.ParserCombinators.ReadP.P b1[OneShot] ->
                 GHC.Read.$wa2
                   @ PhonemeType2.Morpheme
                   @ (GHC.Base.Maybe GrammarType2.Gender,
                      GHC.Base.Maybe GrammarType2.Animacy,
                      GHC.Base.Maybe GrammarType2.Case,
                      GHC.Base.Maybe GrammarType2.Number,
                      GHC.Base.Maybe GrammarType2.Honorific,
                      GHC.Base.Maybe GrammarType2.Definiteness,
                      GHC.Base.Maybe GrammarType2.Specificity)
                   PhonemeType2.$fReadMorpheme
                   GrammarType2.$fReadExponentSystem_$s$fRead(,,,,,,)
                   @ b1
                   w3) -}
3648d92b832f712f211bd273d09e0540
  $fReadExponentSystem6 ::
    GHC.Read.Read (GHC.Base.Maybe GrammarType2.Specificity)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadExponentSystem_$s$fReadMaybe -}
4bc89a9a07c80dee72b43349abe46891
  $fReadExponentSystem7 ::
    GHC.Read.Read (GHC.Base.Maybe GrammarType2.Definiteness)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadExponentSystem_$s$fReadMaybe1 -}
8e221f36dbb7045b5219fa27699c3626
  $fReadExponentSystem8 ::
    GHC.Read.Read (GHC.Base.Maybe GrammarType2.Honorific)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadExponentSystem_$s$fReadMaybe2 -}
5b00adb61a743b6aeb885939a09c7e2f
  $fReadExponentSystem9 ::
    GHC.Read.Read (GHC.Base.Maybe GrammarType2.Number)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadExponentSystem_$s$fReadMaybe3 -}
83b76b7eefbf738909a19bb1d1eb6a84
  $fReadExponentSystem_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [GrammarType2.ExponentSystem]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadExponentSystem1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarType2.ExponentSystem]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarType2.ExponentSystem]>_R))) -}
83b76b7eefbf738909a19bb1d1eb6a84
  $fReadExponentSystem_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      GrammarType2.ExponentSystem
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadExponentSystem2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarType2.ExponentSystem>_R)) -}
83b76b7eefbf738909a19bb1d1eb6a84
  $fReadExponentSystem_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarType2.ExponentSystem
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadP.run
                   @ GrammarType2.ExponentSystem
                   ((GHC.Read.$fReadDouble10
                       @ GrammarType2.ExponentSystem
                       GrammarType2.$fReadExponentSystem3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                           <GrammarType2.ExponentSystem>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                      <GrammarType2.ExponentSystem>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <GrammarType2.ExponentSystem>_R)
                      @ GrammarType2.ExponentSystem
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ GrammarType2.ExponentSystem))) -}
9e4aeda9b9a525166aef51dac60d9f4a
  $fReadExponentSystem_$s$fRead(,,,,,,) ::
    GHC.Read.Read
      (GHC.Base.Maybe GrammarType2.Gender,
       GHC.Base.Maybe GrammarType2.Animacy,
       GHC.Base.Maybe GrammarType2.Case,
       GHC.Base.Maybe GrammarType2.Number,
       GHC.Base.Maybe GrammarType2.Honorific,
       GHC.Base.Maybe GrammarType2.Definiteness,
       GHC.Base.Maybe GrammarType2.Specificity)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe GrammarType2.Gender,
                     GHC.Base.Maybe GrammarType2.Animacy,
                     GHC.Base.Maybe GrammarType2.Case,
                     GHC.Base.Maybe GrammarType2.Number,
                     GHC.Base.Maybe GrammarType2.Honorific,
                     GHC.Base.Maybe GrammarType2.Definiteness,
                     GHC.Base.Maybe GrammarType2.Specificity)
                  GrammarType2.$fReadExponentSystem_$s$fRead(,,,,,,)_$creadsPrec
                  GrammarType2.$fReadExponentSystem_$s$fRead(,,,,,,)_$creadList
                  (GHC.Read.$fRead(,,,,,,)_$creadPrec
                     @ (GHC.Base.Maybe GrammarType2.Gender)
                     @ (GHC.Base.Maybe GrammarType2.Animacy)
                     @ (GHC.Base.Maybe GrammarType2.Case)
                     @ (GHC.Base.Maybe GrammarType2.Number)
                     @ (GHC.Base.Maybe GrammarType2.Honorific)
                     @ (GHC.Base.Maybe GrammarType2.Definiteness)
                     @ (GHC.Base.Maybe GrammarType2.Specificity)
                     GrammarType2.$fReadExponentSystem12
                     GrammarType2.$fReadExponentSystem11
                     GrammarType2.$fReadExponentSystem10
                     GrammarType2.$fReadExponentSystem9
                     GrammarType2.$fReadExponentSystem8
                     GrammarType2.$fReadExponentSystem7
                     GrammarType2.$fReadExponentSystem6)
                  (GHC.Read.$fRead(,,,,,,)_$creadListPrec
                     @ (GHC.Base.Maybe GrammarType2.Gender)
                     @ (GHC.Base.Maybe GrammarType2.Animacy)
                     @ (GHC.Base.Maybe GrammarType2.Case)
                     @ (GHC.Base.Maybe GrammarType2.Number)
                     @ (GHC.Base.Maybe GrammarType2.Honorific)
                     @ (GHC.Base.Maybe GrammarType2.Definiteness)
                     @ (GHC.Base.Maybe GrammarType2.Specificity)
                     GrammarType2.$fReadExponentSystem12
                     GrammarType2.$fReadExponentSystem11
                     GrammarType2.$fReadExponentSystem10
                     GrammarType2.$fReadExponentSystem9
                     GrammarType2.$fReadExponentSystem8
                     GrammarType2.$fReadExponentSystem7
                     GrammarType2.$fReadExponentSystem6) -}
ff1e48a31a00af0630400a65be521086
  $fReadExponentSystem_$s$fRead(,,,,,,)_$creadList ::
    Text.ParserCombinators.ReadP.ReadS
      [(GHC.Base.Maybe GrammarType2.Gender,
        GHC.Base.Maybe GrammarType2.Animacy,
        GHC.Base.Maybe GrammarType2.Case,
        GHC.Base.Maybe GrammarType2.Number,
        GHC.Base.Maybe GrammarType2.Honorific,
        GHC.Base.Maybe GrammarType2.Definiteness,
        GHC.Base.Maybe GrammarType2.Specificity)]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [(GHC.Base.Maybe GrammarType2.Gender,
                       GHC.Base.Maybe GrammarType2.Animacy,
                       GHC.Base.Maybe GrammarType2.Case,
                       GHC.Base.Maybe GrammarType2.Number,
                       GHC.Base.Maybe GrammarType2.Honorific,
                       GHC.Base.Maybe GrammarType2.Definiteness,
                       GHC.Base.Maybe GrammarType2.Specificity)]
                   (GHC.Read.list1
                      @ (GHC.Base.Maybe GrammarType2.Gender,
                         GHC.Base.Maybe GrammarType2.Animacy,
                         GHC.Base.Maybe GrammarType2.Case,
                         GHC.Base.Maybe GrammarType2.Number,
                         GHC.Base.Maybe GrammarType2.Honorific,
                         GHC.Base.Maybe GrammarType2.Definiteness,
                         GHC.Base.Maybe GrammarType2.Specificity)
                      (GHC.Read.$fRead(,,,,,,)2
                         @ (GHC.Base.Maybe GrammarType2.Gender)
                         @ (GHC.Base.Maybe GrammarType2.Animacy)
                         @ (GHC.Base.Maybe GrammarType2.Case)
                         @ (GHC.Base.Maybe GrammarType2.Number)
                         @ (GHC.Base.Maybe GrammarType2.Honorific)
                         @ (GHC.Base.Maybe GrammarType2.Definiteness)
                         @ (GHC.Base.Maybe GrammarType2.Specificity)
                         GrammarType2.$fReadExponentSystem12
                         GrammarType2.$fReadExponentSystem11
                         GrammarType2.$fReadExponentSystem10
                         GrammarType2.$fReadExponentSystem9
                         GrammarType2.$fReadExponentSystem8
                         GrammarType2.$fReadExponentSystem7
                         GrammarType2.$fReadExponentSystem6)
                        `cast`
                      (Trans
                           (<Text.ParserCombinators.ReadPrec.Prec>_R
                            ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                          <(GHC.Base.Maybe GrammarType2.Gender,
                                            GHC.Base.Maybe GrammarType2.Animacy,
                                            GHC.Base.Maybe GrammarType2.Case,
                                            GHC.Base.Maybe GrammarType2.Number,
                                            GHC.Base.Maybe GrammarType2.Honorific,
                                            GHC.Base.Maybe GrammarType2.Definiteness,
                                            GHC.Base.Maybe GrammarType2.Specificity)>_R))
                           (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                     <(GHC.Base.Maybe GrammarType2.Gender,
                                       GHC.Base.Maybe GrammarType2.Animacy,
                                       GHC.Base.Maybe GrammarType2.Case,
                                       GHC.Base.Maybe GrammarType2.Number,
                                       GHC.Base.Maybe GrammarType2.Honorific,
                                       GHC.Base.Maybe GrammarType2.Definiteness,
                                       GHC.Base.Maybe GrammarType2.Specificity)>_R)))
                      GHC.Read.$fRead(,)7
                      @ [(GHC.Base.Maybe GrammarType2.Gender,
                          GHC.Base.Maybe GrammarType2.Animacy,
                          GHC.Base.Maybe GrammarType2.Case,
                          GHC.Base.Maybe GrammarType2.Number,
                          GHC.Base.Maybe GrammarType2.Honorific,
                          GHC.Base.Maybe GrammarType2.Definiteness,
                          GHC.Base.Maybe GrammarType2.Specificity)]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [(GHC.Base.Maybe GrammarType2.Gender,
                             GHC.Base.Maybe GrammarType2.Animacy,
                             GHC.Base.Maybe GrammarType2.Case,
                             GHC.Base.Maybe GrammarType2.Number,
                             GHC.Base.Maybe GrammarType2.Honorific,
                             GHC.Base.Maybe GrammarType2.Definiteness,
                             GHC.Base.Maybe GrammarType2.Specificity)]))) -}
e08d4bfb0cb3595226fb8b2a565c3f3a
  $fReadExponentSystem_$s$fRead(,,,,,,)_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS
         (GHC.Base.Maybe GrammarType2.Gender,
          GHC.Base.Maybe GrammarType2.Animacy,
          GHC.Base.Maybe GrammarType2.Case,
          GHC.Base.Maybe GrammarType2.Number,
          GHC.Base.Maybe GrammarType2.Honorific,
          GHC.Base.Maybe GrammarType2.Definiteness,
          GHC.Base.Maybe GrammarType2.Specificity)
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadP.run
                   @ (GHC.Base.Maybe GrammarType2.Gender,
                      GHC.Base.Maybe GrammarType2.Animacy,
                      GHC.Base.Maybe GrammarType2.Case,
                      GHC.Base.Maybe GrammarType2.Number,
                      GHC.Base.Maybe GrammarType2.Honorific,
                      GHC.Base.Maybe GrammarType2.Definiteness,
                      GHC.Base.Maybe GrammarType2.Specificity)
                   (GHC.Read.$fRead(,,,,,,)2
                      @ (GHC.Base.Maybe GrammarType2.Gender)
                      @ (GHC.Base.Maybe GrammarType2.Animacy)
                      @ (GHC.Base.Maybe GrammarType2.Case)
                      @ (GHC.Base.Maybe GrammarType2.Number)
                      @ (GHC.Base.Maybe GrammarType2.Honorific)
                      @ (GHC.Base.Maybe GrammarType2.Definiteness)
                      @ (GHC.Base.Maybe GrammarType2.Specificity)
                      GrammarType2.$fReadExponentSystem12
                      GrammarType2.$fReadExponentSystem11
                      GrammarType2.$fReadExponentSystem10
                      GrammarType2.$fReadExponentSystem9
                      GrammarType2.$fReadExponentSystem8
                      GrammarType2.$fReadExponentSystem7
                      GrammarType2.$fReadExponentSystem6
                      eta
                      @ (GHC.Base.Maybe GrammarType2.Gender,
                         GHC.Base.Maybe GrammarType2.Animacy,
                         GHC.Base.Maybe GrammarType2.Case,
                         GHC.Base.Maybe GrammarType2.Number,
                         GHC.Base.Maybe GrammarType2.Honorific,
                         GHC.Base.Maybe GrammarType2.Definiteness,
                         GHC.Base.Maybe GrammarType2.Specificity)
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ (GHC.Base.Maybe GrammarType2.Gender,
                            GHC.Base.Maybe GrammarType2.Animacy,
                            GHC.Base.Maybe GrammarType2.Case,
                            GHC.Base.Maybe GrammarType2.Number,
                            GHC.Base.Maybe GrammarType2.Honorific,
                            GHC.Base.Maybe GrammarType2.Definiteness,
                            GHC.Base.Maybe GrammarType2.Specificity)))) -}
705c0ba968edc97dfac0e72ebeac3fc4
  $fReadExponentSystem_$s$fReadMaybe ::
    GHC.Read.Read (GHC.Base.Maybe GrammarType2.Specificity)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe GrammarType2.Specificity)
                  GrammarType2.$fReadExponentSystem_$s$fReadMaybe_$creadsPrec
                  GrammarType2.$fReadExponentSystem_$s$fReadMaybe_$creadList
                  (GHC.Read.$fReadMaybe_$creadPrec
                     @ GrammarType2.Specificity
                     GrammarType2.$fReadSpecificity)
                  (GHC.Read.$fReadMaybe_$creadListPrec
                     @ GrammarType2.Specificity
                     GrammarType2.$fReadSpecificity) -}
f791c9aea43d8ff27b803fb14d92680f
  $fReadExponentSystem_$s$fReadMaybe1 ::
    GHC.Read.Read (GHC.Base.Maybe GrammarType2.Definiteness)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe GrammarType2.Definiteness)
                  GrammarType2.$fReadExponentSystem_$s$fReadMaybe_$creadsPrec1
                  GrammarType2.$fReadExponentSystem_$s$fReadMaybe_$creadList1
                  (GHC.Read.$fReadMaybe_$creadPrec
                     @ GrammarType2.Definiteness
                     GrammarType2.$fReadDefiniteness)
                  (GHC.Read.$fReadMaybe_$creadListPrec
                     @ GrammarType2.Definiteness
                     GrammarType2.$fReadDefiniteness) -}
fe41a653d8429ea440b77baf39b4c384
  $fReadExponentSystem_$s$fReadMaybe2 ::
    GHC.Read.Read (GHC.Base.Maybe GrammarType2.Honorific)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe GrammarType2.Honorific)
                  GrammarType2.$fReadExponentSystem_$s$fReadMaybe_$creadsPrec2
                  GrammarType2.$fReadExponentSystem_$s$fReadMaybe_$creadList2
                  (GHC.Read.$fReadMaybe_$creadPrec
                     @ GrammarType2.Honorific
                     GrammarType2.$fReadHonorific)
                  (GHC.Read.$fReadMaybe_$creadListPrec
                     @ GrammarType2.Honorific
                     GrammarType2.$fReadHonorific) -}
c72b716d9728d9782206f4d64257b7da
  $fReadExponentSystem_$s$fReadMaybe3 ::
    GHC.Read.Read (GHC.Base.Maybe GrammarType2.Number)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe GrammarType2.Number)
                  GrammarType2.$fReadExponentSystem_$s$fReadMaybe_$creadsPrec3
                  GrammarType2.$fReadExponentSystem_$s$fReadMaybe_$creadList3
                  (GHC.Read.$fReadMaybe_$creadPrec
                     @ GrammarType2.Number
                     GrammarType2.$fReadNumber)
                  (GHC.Read.$fReadMaybe_$creadListPrec
                     @ GrammarType2.Number
                     GrammarType2.$fReadNumber) -}
12a573fa760cc8650c464c117ad104e5
  $fReadExponentSystem_$s$fReadMaybe4 ::
    GHC.Read.Read (GHC.Base.Maybe GrammarType2.Case)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe GrammarType2.Case)
                  GrammarType2.$fReadExponentSystem_$s$fReadMaybe_$creadsPrec4
                  GrammarType2.$fReadExponentSystem_$s$fReadMaybe_$creadList4
                  (GHC.Read.$fReadMaybe_$creadPrec
                     @ GrammarType2.Case
                     GrammarType2.$fReadCase)
                  (GHC.Read.$fReadMaybe_$creadListPrec
                     @ GrammarType2.Case
                     GrammarType2.$fReadCase) -}
6d39550d4b04767000fb9a3b8e0c6d41
  $fReadExponentSystem_$s$fReadMaybe5 ::
    GHC.Read.Read (GHC.Base.Maybe GrammarType2.Animacy)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe GrammarType2.Animacy)
                  GrammarType2.$fReadExponentSystem_$s$fReadMaybe_$creadsPrec5
                  GrammarType2.$fReadExponentSystem_$s$fReadMaybe_$creadList5
                  (GHC.Read.$fReadMaybe_$creadPrec
                     @ GrammarType2.Animacy
                     GrammarType2.$fReadAnimacy)
                  (GHC.Read.$fReadMaybe_$creadListPrec
                     @ GrammarType2.Animacy
                     GrammarType2.$fReadAnimacy) -}
9f90625772f3b22cb4b42f5a2ee46766
  $fReadExponentSystem_$s$fReadMaybe6 ::
    GHC.Read.Read (GHC.Base.Maybe GrammarType2.Gender)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe GrammarType2.Gender)
                  GrammarType2.$fReadExponentSystem_$s$fReadMaybe_$creadsPrec6
                  GrammarType2.$fReadExponentSystem_$s$fReadMaybe_$creadList6
                  (GHC.Read.$fReadMaybe_$creadPrec
                     @ GrammarType2.Gender
                     GrammarType2.$fReadGender)
                  (GHC.Read.$fReadMaybe_$creadListPrec
                     @ GrammarType2.Gender
                     GrammarType2.$fReadGender) -}
bd8aec6b2a9aa3adf28e19e177c06df6
  $fReadExponentSystem_$s$fReadMaybe_$creadList ::
    Text.ParserCombinators.ReadP.ReadS
      [GHC.Base.Maybe GrammarType2.Specificity]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GHC.Base.Maybe GrammarType2.Specificity]
                   (GHC.Read.list1
                      @ (GHC.Base.Maybe GrammarType2.Specificity)
                      (GHC.Read.$fReadMaybe2
                         @ GrammarType2.Specificity
                         GrammarType2.$fReadSpecificity)
                        `cast`
                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                <GHC.Base.Maybe GrammarType2.Specificity>_R))
                      GHC.Read.$fRead(,)7
                      @ [GHC.Base.Maybe GrammarType2.Specificity]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GHC.Base.Maybe GrammarType2.Specificity]))) -}
412b8fd7ea1f9497c559b544dab79073
  $fReadExponentSystem_$s$fReadMaybe_$creadList1 ::
    Text.ParserCombinators.ReadP.ReadS
      [GHC.Base.Maybe GrammarType2.Definiteness]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GHC.Base.Maybe GrammarType2.Definiteness]
                   (GHC.Read.list1
                      @ (GHC.Base.Maybe GrammarType2.Definiteness)
                      (GHC.Read.$fReadMaybe2
                         @ GrammarType2.Definiteness
                         GrammarType2.$fReadDefiniteness)
                        `cast`
                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                <GHC.Base.Maybe GrammarType2.Definiteness>_R))
                      GHC.Read.$fRead(,)7
                      @ [GHC.Base.Maybe GrammarType2.Definiteness]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GHC.Base.Maybe GrammarType2.Definiteness]))) -}
642e5e7f0353a588d966866c6b250b43
  $fReadExponentSystem_$s$fReadMaybe_$creadList2 ::
    Text.ParserCombinators.ReadP.ReadS
      [GHC.Base.Maybe GrammarType2.Honorific]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GHC.Base.Maybe GrammarType2.Honorific]
                   (GHC.Read.list1
                      @ (GHC.Base.Maybe GrammarType2.Honorific)
                      (GHC.Read.$fReadMaybe2
                         @ GrammarType2.Honorific
                         GrammarType2.$fReadHonorific)
                        `cast`
                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                <GHC.Base.Maybe GrammarType2.Honorific>_R))
                      GHC.Read.$fRead(,)7
                      @ [GHC.Base.Maybe GrammarType2.Honorific]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GHC.Base.Maybe GrammarType2.Honorific]))) -}
6b2fc3f164a7f59dd89977b87538d1d4
  $fReadExponentSystem_$s$fReadMaybe_$creadList3 ::
    Text.ParserCombinators.ReadP.ReadS
      [GHC.Base.Maybe GrammarType2.Number]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GHC.Base.Maybe GrammarType2.Number]
                   (GHC.Read.list1
                      @ (GHC.Base.Maybe GrammarType2.Number)
                      (GHC.Read.$fReadMaybe2
                         @ GrammarType2.Number
                         GrammarType2.$fReadNumber)
                        `cast`
                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                <GHC.Base.Maybe GrammarType2.Number>_R))
                      GHC.Read.$fRead(,)7
                      @ [GHC.Base.Maybe GrammarType2.Number]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GHC.Base.Maybe GrammarType2.Number]))) -}
225d0f4da29adde6a9752156f9086cb2
  $fReadExponentSystem_$s$fReadMaybe_$creadList4 ::
    Text.ParserCombinators.ReadP.ReadS
      [GHC.Base.Maybe GrammarType2.Case]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GHC.Base.Maybe GrammarType2.Case]
                   (GHC.Read.list1
                      @ (GHC.Base.Maybe GrammarType2.Case)
                      (GHC.Read.$fReadMaybe2 @ GrammarType2.Case GrammarType2.$fReadCase)
                        `cast`
                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                <GHC.Base.Maybe GrammarType2.Case>_R))
                      GHC.Read.$fRead(,)7
                      @ [GHC.Base.Maybe GrammarType2.Case]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GHC.Base.Maybe GrammarType2.Case]))) -}
c820d2fad1685da7ec435edec271aca6
  $fReadExponentSystem_$s$fReadMaybe_$creadList5 ::
    Text.ParserCombinators.ReadP.ReadS
      [GHC.Base.Maybe GrammarType2.Animacy]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GHC.Base.Maybe GrammarType2.Animacy]
                   (GHC.Read.list1
                      @ (GHC.Base.Maybe GrammarType2.Animacy)
                      (GHC.Read.$fReadMaybe2
                         @ GrammarType2.Animacy
                         GrammarType2.$fReadAnimacy)
                        `cast`
                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                <GHC.Base.Maybe GrammarType2.Animacy>_R))
                      GHC.Read.$fRead(,)7
                      @ [GHC.Base.Maybe GrammarType2.Animacy]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GHC.Base.Maybe GrammarType2.Animacy]))) -}
08b949dde5fe987e1846cf75add0e8ed
  $fReadExponentSystem_$s$fReadMaybe_$creadList6 ::
    Text.ParserCombinators.ReadP.ReadS
      [GHC.Base.Maybe GrammarType2.Gender]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GHC.Base.Maybe GrammarType2.Gender]
                   (GHC.Read.list1
                      @ (GHC.Base.Maybe GrammarType2.Gender)
                      (GHC.Read.$fReadMaybe2
                         @ GrammarType2.Gender
                         GrammarType2.$fReadGender)
                        `cast`
                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                <GHC.Base.Maybe GrammarType2.Gender>_R))
                      GHC.Read.$fRead(,)7
                      @ [GHC.Base.Maybe GrammarType2.Gender]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GHC.Base.Maybe GrammarType2.Gender]))) -}
26546c37f2ec30743e5d7a4294881121
  $fReadExponentSystem_$s$fReadMaybe_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS
         (GHC.Base.Maybe GrammarType2.Specificity)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadP.run
                   @ (GHC.Base.Maybe GrammarType2.Specificity)
                   ((GHC.Read.$fReadMaybe2
                       @ GrammarType2.Specificity
                       GrammarType2.$fReadSpecificity
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <GHC.Base.Maybe GrammarType2.Specificity>_R)
                      @ (GHC.Base.Maybe GrammarType2.Specificity)
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ (GHC.Base.Maybe GrammarType2.Specificity)))) -}
7d0fb74420ef81da3e4f8cd619419552
  $fReadExponentSystem_$s$fReadMaybe_$creadsPrec1 ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS
         (GHC.Base.Maybe GrammarType2.Definiteness)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadP.run
                   @ (GHC.Base.Maybe GrammarType2.Definiteness)
                   ((GHC.Read.$fReadMaybe2
                       @ GrammarType2.Definiteness
                       GrammarType2.$fReadDefiniteness
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <GHC.Base.Maybe GrammarType2.Definiteness>_R)
                      @ (GHC.Base.Maybe GrammarType2.Definiteness)
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ (GHC.Base.Maybe GrammarType2.Definiteness)))) -}
dba31587f270f22692859a5ac59b4fd9
  $fReadExponentSystem_$s$fReadMaybe_$creadsPrec2 ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS
         (GHC.Base.Maybe GrammarType2.Honorific)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadP.run
                   @ (GHC.Base.Maybe GrammarType2.Honorific)
                   ((GHC.Read.$fReadMaybe2
                       @ GrammarType2.Honorific
                       GrammarType2.$fReadHonorific
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <GHC.Base.Maybe GrammarType2.Honorific>_R)
                      @ (GHC.Base.Maybe GrammarType2.Honorific)
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ (GHC.Base.Maybe GrammarType2.Honorific)))) -}
98f503257007b67d815dcd852b5d297e
  $fReadExponentSystem_$s$fReadMaybe_$creadsPrec3 ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS
         (GHC.Base.Maybe GrammarType2.Number)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadP.run
                   @ (GHC.Base.Maybe GrammarType2.Number)
                   ((GHC.Read.$fReadMaybe2
                       @ GrammarType2.Number
                       GrammarType2.$fReadNumber
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <GHC.Base.Maybe GrammarType2.Number>_R)
                      @ (GHC.Base.Maybe GrammarType2.Number)
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ (GHC.Base.Maybe GrammarType2.Number)))) -}
d887a5b29f8905cc160083d05438b242
  $fReadExponentSystem_$s$fReadMaybe_$creadsPrec4 ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS
         (GHC.Base.Maybe GrammarType2.Case)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadP.run
                   @ (GHC.Base.Maybe GrammarType2.Case)
                   ((GHC.Read.$fReadMaybe2
                       @ GrammarType2.Case
                       GrammarType2.$fReadCase
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <GHC.Base.Maybe GrammarType2.Case>_R)
                      @ (GHC.Base.Maybe GrammarType2.Case)
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ (GHC.Base.Maybe GrammarType2.Case)))) -}
7a713604e45a32dce353b9261e9648e1
  $fReadExponentSystem_$s$fReadMaybe_$creadsPrec5 ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS
         (GHC.Base.Maybe GrammarType2.Animacy)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadP.run
                   @ (GHC.Base.Maybe GrammarType2.Animacy)
                   ((GHC.Read.$fReadMaybe2
                       @ GrammarType2.Animacy
                       GrammarType2.$fReadAnimacy
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <GHC.Base.Maybe GrammarType2.Animacy>_R)
                      @ (GHC.Base.Maybe GrammarType2.Animacy)
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ (GHC.Base.Maybe GrammarType2.Animacy)))) -}
5eaadba58e9f9477ab2a5d31639b0125
  $fReadExponentSystem_$s$fReadMaybe_$creadsPrec6 ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS
         (GHC.Base.Maybe GrammarType2.Gender)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadP.run
                   @ (GHC.Base.Maybe GrammarType2.Gender)
                   ((GHC.Read.$fReadMaybe2
                       @ GrammarType2.Gender
                       GrammarType2.$fReadGender
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <GHC.Base.Maybe GrammarType2.Gender>_R)
                      @ (GHC.Base.Maybe GrammarType2.Gender)
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ (GHC.Base.Maybe GrammarType2.Gender)))) -}
83b76b7eefbf738909a19bb1d1eb6a84
  $fReadExponentSystem_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarType2.ExponentSystem]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarType2.ExponentSystem]
                   ((GrammarType2.$fReadExponentSystem_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarType2.ExponentSystem]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarType2.ExponentSystem]>_R)
                      @ [GrammarType2.ExponentSystem]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarType2.ExponentSystem]))) -}
483b53f5081b71881e402c116818b125
  $fReadGender :: GHC.Read.Read GrammarType2.Gender
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Gender
                  GrammarType2.$fReadGender_$s$dmreadsPrec
                  GrammarType2.$fReadGender_$sreadListDefault
                  GrammarType2.$fReadGender_$creadPrec
                  GrammarType2.$fReadGender_$creadListPrec -}
483b53f5081b71881e402c116818b125
  $fReadGender1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarType2.Gender] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarType2.Gender]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarType2.Gender
                   GrammarType2.$fReadGender2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarType2.Gender>_R))
                   @ b
                   eta1) -}
36235d8a978286c3781e327202862f76
  $fReadGender10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "N"#) -}
483b53f5081b71881e402c116818b125
  $fReadGender11 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Gender)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadGender13,
                  GrammarType2.$fReadGender12
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Gender>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Gender>_R))))) -}
483b53f5081b71881e402c116818b125
  $fReadGender12 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Gender -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Gender -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.COM) -}
7c887b63a231d17e2cca5b4346733d77
  $fReadGender13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "COM"#) -}
483b53f5081b71881e402c116818b125
  $fReadGender14 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Gender)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadGender16,
                  GrammarType2.$fReadGender15
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Gender>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Gender>_R))))) -}
483b53f5081b71881e402c116818b125
  $fReadGender15 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Gender -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Gender -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.F) -}
c566611a17b7a25d0f3196f13bf90fa8
  $fReadGender16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "F"#) -}
483b53f5081b71881e402c116818b125
  $fReadGender17 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Gender)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadGender19,
                  GrammarType2.$fReadGender18
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Gender>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Gender>_R))))) -}
483b53f5081b71881e402c116818b125
  $fReadGender18 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Gender -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Gender -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.M) -}
24093da68d30fd06331eb629b3b36740
  $fReadGender19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "M"#) -}
483b53f5081b71881e402c116818b125
  $fReadGender2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarType2.Gender
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarType2.Gender
                   GrammarType2.$fReadGender3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarType2.Gender>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarType2.Gender>_R)))) -}
483b53f5081b71881e402c116818b125
  $fReadGender3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Gender -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarType2.Gender -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarType2.Gender
                   GrammarType2.$fReadGender4
                   eta
                   @ b
                   eta1) -}
483b53f5081b71881e402c116818b125
  $fReadGender4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Gender)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Gender)
                   GrammarType2.$fReadGender17
                   GrammarType2.$fReadGender5) -}
483b53f5081b71881e402c116818b125
  $fReadGender5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Gender)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Gender)
                   GrammarType2.$fReadGender14
                   GrammarType2.$fReadGender6) -}
483b53f5081b71881e402c116818b125
  $fReadGender6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Gender)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Gender)
                   GrammarType2.$fReadGender11
                   GrammarType2.$fReadGender7) -}
483b53f5081b71881e402c116818b125
  $fReadGender7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Gender)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Gender)
                   GrammarType2.$fReadGender8
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Gender))) -}
483b53f5081b71881e402c116818b125
  $fReadGender8 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Gender)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadGender10,
                  GrammarType2.$fReadGender9
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Gender>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Gender>_R))))) -}
483b53f5081b71881e402c116818b125
  $fReadGender9 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Gender -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Gender -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.N) -}
483b53f5081b71881e402c116818b125
  $fReadGender_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [GrammarType2.Gender]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadGender1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarType2.Gender]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarType2.Gender]>_R))) -}
483b53f5081b71881e402c116818b125
  $fReadGender_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Gender
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadGender2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarType2.Gender>_R)) -}
483b53f5081b71881e402c116818b125
  $fReadGender_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarType2.Gender
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarType2.Gender
                   GrammarType2.$fReadGender_$creadPrec
                   eta) -}
483b53f5081b71881e402c116818b125
  $fReadGender_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarType2.Gender]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarType2.Gender]
                   ((GrammarType2.$fReadGender_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarType2.Gender]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarType2.Gender]>_R)
                      @ [GrammarType2.Gender]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarType2.Gender]))) -}
f7bc47c734d5bf5ab3e9ea94b2c3ae2f
  $fReadHonorific :: GHC.Read.Read GrammarType2.Honorific
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Honorific
                  GrammarType2.$fReadHonorific_$s$dmreadsPrec
                  GrammarType2.$fReadHonorific_$sreadListDefault
                  GrammarType2.$fReadHonorific_$creadPrec
                  GrammarType2.$fReadHonorific_$creadListPrec -}
f7bc47c734d5bf5ab3e9ea94b2c3ae2f
  $fReadHonorific1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarType2.Honorific] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarType2.Honorific]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarType2.Honorific
                   GrammarType2.$fReadHonorific2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarType2.Honorific>_R))
                   @ b
                   eta1) -}
f7bc47c734d5bf5ab3e9ea94b2c3ae2f
  $fReadHonorific10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Honorific -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Honorific
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.FAM) -}
d19510b6476037a8a6963370f2e7f853
  $fReadHonorific11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FAM"#) -}
f7bc47c734d5bf5ab3e9ea94b2c3ae2f
  $fReadHonorific2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarType2.Honorific
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarType2.Honorific
                   GrammarType2.$fReadHonorific3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarType2.Honorific>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarType2.Honorific>_R)))) -}
f7bc47c734d5bf5ab3e9ea94b2c3ae2f
  $fReadHonorific3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Honorific -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarType2.Honorific
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarType2.Honorific
                   GrammarType2.$fReadHonorific4
                   eta
                   @ b
                   eta1) -}
f7bc47c734d5bf5ab3e9ea94b2c3ae2f
  $fReadHonorific4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Honorific)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Honorific)
                   GrammarType2.$fReadHonorific9
                   GrammarType2.$fReadHonorific5) -}
f7bc47c734d5bf5ab3e9ea94b2c3ae2f
  $fReadHonorific5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Honorific)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Honorific)
                   GrammarType2.$fReadHonorific6
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           GrammarType2.Honorific))) -}
f7bc47c734d5bf5ab3e9ea94b2c3ae2f
  $fReadHonorific6 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Honorific)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadHonorific8,
                  GrammarType2.$fReadHonorific7
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Honorific>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Honorific>_R))))) -}
f7bc47c734d5bf5ab3e9ea94b2c3ae2f
  $fReadHonorific7 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Honorific -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Honorific
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.FORM) -}
1b4d843fcebc5a118f005a3da3f25327
  $fReadHonorific8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FORM"#) -}
f7bc47c734d5bf5ab3e9ea94b2c3ae2f
  $fReadHonorific9 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Honorific)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadHonorific11,
                  GrammarType2.$fReadHonorific10
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Honorific>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Honorific>_R))))) -}
f7bc47c734d5bf5ab3e9ea94b2c3ae2f
  $fReadHonorific_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [GrammarType2.Honorific]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadHonorific1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarType2.Honorific]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarType2.Honorific]>_R))) -}
f7bc47c734d5bf5ab3e9ea94b2c3ae2f
  $fReadHonorific_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Honorific
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadHonorific2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarType2.Honorific>_R)) -}
f7bc47c734d5bf5ab3e9ea94b2c3ae2f
  $fReadHonorific_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarType2.Honorific
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarType2.Honorific
                   GrammarType2.$fReadHonorific_$creadPrec
                   eta) -}
f7bc47c734d5bf5ab3e9ea94b2c3ae2f
  $fReadHonorific_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarType2.Honorific]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarType2.Honorific]
                   ((GrammarType2.$fReadHonorific_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarType2.Honorific]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarType2.Honorific]>_R)
                      @ [GrammarType2.Honorific]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarType2.Honorific]))) -}
972fa0fec8d0708852832bdd0fd96d7e
  $fReadManifest ::
    GHC.Read.Read a => GHC.Read.Read (GrammarType2.Manifest a)
  DFunId[0]
  {- Arity: 1, Strictness: <L,U(A,A,U,A)>m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a24 $dRead :: GHC.Read.Read a24.
                  @ (GrammarType2.Manifest a24)
                  (GrammarType2.$fReadManifest_$creadsPrec @ a24 $dRead)
                  (GrammarType2.$fReadManifest_$creadList @ a24 $dRead)
                  (GrammarType2.$fReadManifest_$creadPrec @ a24 $dRead)
                  (GrammarType2.$fReadManifest_$creadListPrec @ a24 $dRead) -}
972fa0fec8d0708852832bdd0fd96d7e
  $fReadManifest1 ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarType2.Manifest a] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 3, Strictness: <L,U(A,A,U,A)><L,A><L,C(U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a24
                   $dRead :: GHC.Read.Read a24
                   eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarType2.Manifest a24]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ (GrammarType2.Manifest a24)
                   (GrammarType2.$fReadManifest2 @ a24 $dRead)
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarType2.Manifest a24>_R))
                   @ b
                   eta1) -}
972fa0fec8d0708852832bdd0fd96d7e
  $fReadManifest2 ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP (GrammarType2.Manifest a)
  {- Arity: 2, Strictness: <L,U(A,A,U,A)><L,U> -}
972fa0fec8d0708852832bdd0fd96d7e
  $fReadManifest_$creadList ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadP.ReadS [GrammarType2.Manifest a]
  {- Arity: 1, Strictness: <L,U(A,A,U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a24 $dRead :: GHC.Read.Read a24 ->
                 Text.ParserCombinators.ReadP.run
                   @ [GrammarType2.Manifest a24]
                   (GHC.Read.$wa
                      @ (GrammarType2.Manifest a24)
                      (GrammarType2.$fReadManifest2 @ a24 $dRead)
                        `cast`
                      (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                <GrammarType2.Manifest a24>_R))
                      @ [GrammarType2.Manifest a24]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarType2.Manifest a24]))) -}
972fa0fec8d0708852832bdd0fd96d7e
  $fReadManifest_$creadListPrec ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadPrec.ReadPrec [GrammarType2.Manifest a]
  {- Arity: 3, Strictness: <L,U(A,A,U,A)><L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadManifest1
                  `cast`
                (forall a24.
                 <GHC.Read.Read a24>_R
                 ->_R Trans
                          (<Text.ParserCombinators.ReadPrec.Prec>_R
                           ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                         <[GrammarType2.Manifest a24]>_R))
                          (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                    <[GrammarType2.Manifest a24]>_R))) -}
972fa0fec8d0708852832bdd0fd96d7e
  $fReadManifest_$creadPrec ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadPrec.ReadPrec (GrammarType2.Manifest a)
  {- Arity: 2, Strictness: <L,U(A,A,U,A)><L,U>,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadManifest2
                  `cast`
                (forall a24.
                 <GHC.Read.Read a24>_R
                 ->_R Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <GrammarType2.Manifest a24>_R)) -}
972fa0fec8d0708852832bdd0fd96d7e
  $fReadManifest_$creadsPrec ::
    GHC.Read.Read a =>
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS (GrammarType2.Manifest a)
  {- Arity: 2, Strictness: <L,U(A,A,U,A)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a24 $dRead :: GHC.Read.Read a24 eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadP.run
                   @ (GrammarType2.Manifest a24)
                   ((GrammarType2.$fReadManifest2 @ a24 $dRead eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <GrammarType2.Manifest a24>_R)
                      @ (GrammarType2.Manifest a24)
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ (GrammarType2.Manifest a24)))) -}
1e8428cf58353e5e31f8a5e0eb818421
  $fReadMood :: GHC.Read.Read GrammarType2.Mood
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Mood
                  GrammarType2.$fReadMood_$s$dmreadsPrec
                  GrammarType2.$fReadMood_$sreadListDefault
                  GrammarType2.$fReadMood_$creadPrec
                  GrammarType2.$fReadMood_$creadListPrec -}
1e8428cf58353e5e31f8a5e0eb818421
  $fReadMood1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarType2.Mood] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarType2.Mood] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarType2.Mood
                   GrammarType2.$fReadMood2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarType2.Mood>_R))
                   @ b
                   eta1) -}
1e8428cf58353e5e31f8a5e0eb818421
  $fReadMood10 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Mood)
                   GrammarType2.$fReadMood23
                   GrammarType2.$fReadMood11) -}
1e8428cf58353e5e31f8a5e0eb818421
  $fReadMood11 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Mood)
                   GrammarType2.$fReadMood20
                   GrammarType2.$fReadMood12) -}
1e8428cf58353e5e31f8a5e0eb818421
  $fReadMood12 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Mood)
                   GrammarType2.$fReadMood17
                   GrammarType2.$fReadMood13) -}
1e8428cf58353e5e31f8a5e0eb818421
  $fReadMood13 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Mood)
                   GrammarType2.$fReadMood14
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Mood))) -}
1e8428cf58353e5e31f8a5e0eb818421
  $fReadMood14 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Mood)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadMood16,
                  GrammarType2.$fReadMood15
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Mood>_R))))) -}
1e8428cf58353e5e31f8a5e0eb818421
  $fReadMood15 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Mood -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.COND) -}
adbf6461179191712fa0f9ace1d0ea6b
  $fReadMood16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "COND"#) -}
1e8428cf58353e5e31f8a5e0eb818421
  $fReadMood17 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Mood)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadMood19,
                  GrammarType2.$fReadMood18
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Mood>_R))))) -}
1e8428cf58353e5e31f8a5e0eb818421
  $fReadMood18 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Mood -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.POT) -}
141fc467e935d6ebddc7b2698f7b11c4
  $fReadMood19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "POT"#) -}
1e8428cf58353e5e31f8a5e0eb818421
  $fReadMood2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarType2.Mood
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarType2.Mood
                   GrammarType2.$fReadMood3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarType2.Mood>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarType2.Mood>_R)))) -}
1e8428cf58353e5e31f8a5e0eb818421
  $fReadMood20 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Mood)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadMood22,
                  GrammarType2.$fReadMood21
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Mood>_R))))) -}
1e8428cf58353e5e31f8a5e0eb818421
  $fReadMood21 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Mood -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.SBJV) -}
53101f0bb6c84d1a262a08728dfe3ddd
  $fReadMood22 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SBJV"#) -}
1e8428cf58353e5e31f8a5e0eb818421
  $fReadMood23 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Mood)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadMood25,
                  GrammarType2.$fReadMood24
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Mood>_R))))) -}
1e8428cf58353e5e31f8a5e0eb818421
  $fReadMood24 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Mood -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.EPIS) -}
15fc8f204300741eeb194f6d2ce5deee
  $fReadMood25 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "EPIS"#) -}
1e8428cf58353e5e31f8a5e0eb818421
  $fReadMood26 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Mood)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadMood28,
                  GrammarType2.$fReadMood27
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Mood>_R))))) -}
1e8428cf58353e5e31f8a5e0eb818421
  $fReadMood27 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Mood -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.OPT) -}
98da4f976e4095f98567e72a1c7b659b
  $fReadMood28 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OPT"#) -}
1e8428cf58353e5e31f8a5e0eb818421
  $fReadMood29 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Mood)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadMood31,
                  GrammarType2.$fReadMood30
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Mood>_R))))) -}
1e8428cf58353e5e31f8a5e0eb818421
  $fReadMood3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarType2.Mood -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarType2.Mood
                   GrammarType2.$fReadMood4
                   eta
                   @ b
                   eta1) -}
1e8428cf58353e5e31f8a5e0eb818421
  $fReadMood30 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Mood -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.JUS) -}
0a123e9b2df50eea3845205355a21284
  $fReadMood31 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "JUS"#) -}
1e8428cf58353e5e31f8a5e0eb818421
  $fReadMood32 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Mood)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadMood34,
                  GrammarType2.$fReadMood33
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Mood>_R))))) -}
1e8428cf58353e5e31f8a5e0eb818421
  $fReadMood33 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Mood -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.IMP) -}
7a463a0f9cd1ea5af023c2c0598a883d
  $fReadMood34 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "IMP"#) -}
1e8428cf58353e5e31f8a5e0eb818421
  $fReadMood35 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Mood)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadMood37,
                  GrammarType2.$fReadMood36
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Mood>_R))))) -}
1e8428cf58353e5e31f8a5e0eb818421
  $fReadMood36 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Mood -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.DEO) -}
f30a5d8abd93a8ec38635102af34f2f5
  $fReadMood37 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DEO"#) -}
1e8428cf58353e5e31f8a5e0eb818421
  $fReadMood38 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Mood)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadMood40,
                  GrammarType2.$fReadMood39
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Mood>_R))))) -}
1e8428cf58353e5e31f8a5e0eb818421
  $fReadMood39 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Mood -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.IRR) -}
1e8428cf58353e5e31f8a5e0eb818421
  $fReadMood4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Mood)
                   GrammarType2.$fReadMood41
                   GrammarType2.$fReadMood5) -}
7e374d25e232d02d39d2d03485dbe250
  $fReadMood40 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "IRR"#) -}
1e8428cf58353e5e31f8a5e0eb818421
  $fReadMood41 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Mood)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadMood43,
                  GrammarType2.$fReadMood42
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Mood>_R))))) -}
1e8428cf58353e5e31f8a5e0eb818421
  $fReadMood42 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Mood -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.IND) -}
16f2e41f9939c8b3ef207f407c383ddb
  $fReadMood43 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "IND"#) -}
1e8428cf58353e5e31f8a5e0eb818421
  $fReadMood5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Mood)
                   GrammarType2.$fReadMood38
                   GrammarType2.$fReadMood6) -}
1e8428cf58353e5e31f8a5e0eb818421
  $fReadMood6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Mood)
                   GrammarType2.$fReadMood35
                   GrammarType2.$fReadMood7) -}
1e8428cf58353e5e31f8a5e0eb818421
  $fReadMood7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Mood)
                   GrammarType2.$fReadMood32
                   GrammarType2.$fReadMood8) -}
1e8428cf58353e5e31f8a5e0eb818421
  $fReadMood8 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Mood)
                   GrammarType2.$fReadMood29
                   GrammarType2.$fReadMood9) -}
1e8428cf58353e5e31f8a5e0eb818421
  $fReadMood9 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Mood)
                   GrammarType2.$fReadMood26
                   GrammarType2.$fReadMood10) -}
1e8428cf58353e5e31f8a5e0eb818421
  $fReadMood_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [GrammarType2.Mood]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadMood1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarType2.Mood]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarType2.Mood]>_R))) -}
1e8428cf58353e5e31f8a5e0eb818421
  $fReadMood_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Mood
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadMood2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarType2.Mood>_R)) -}
1e8428cf58353e5e31f8a5e0eb818421
  $fReadMood_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarType2.Mood
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarType2.Mood
                   GrammarType2.$fReadMood_$creadPrec
                   eta) -}
1e8428cf58353e5e31f8a5e0eb818421
  $fReadMood_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarType2.Mood]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarType2.Mood]
                   ((GrammarType2.$fReadMood_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarType2.Mood]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarType2.Mood]>_R)
                      @ [GrammarType2.Mood]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarType2.Mood]))) -}
a7c28e97173ad7b983bce4b939a8926c
  $fReadNumber :: GHC.Read.Read GrammarType2.Number
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Number
                  GrammarType2.$fReadNumber_$s$dmreadsPrec
                  GrammarType2.$fReadNumber_$sreadListDefault
                  GrammarType2.$fReadNumber_$creadPrec
                  GrammarType2.$fReadNumber_$creadListPrec -}
a7c28e97173ad7b983bce4b939a8926c
  $fReadNumber1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarType2.Number] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarType2.Number]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarType2.Number
                   GrammarType2.$fReadNumber2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarType2.Number>_R))
                   @ b
                   eta1) -}
a7c28e97173ad7b983bce4b939a8926c
  $fReadNumber10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Number -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Number -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.PL) -}
e8fa0bbd5e03f65db3a97d47c3267343
  $fReadNumber11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PL"#) -}
a7c28e97173ad7b983bce4b939a8926c
  $fReadNumber12 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Number)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadNumber14,
                  GrammarType2.$fReadNumber13
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Number>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Number>_R))))) -}
a7c28e97173ad7b983bce4b939a8926c
  $fReadNumber13 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Number -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Number -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.PA) -}
e0fd8786f27306a8d83799244497ff18
  $fReadNumber14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PA"#) -}
a7c28e97173ad7b983bce4b939a8926c
  $fReadNumber15 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Number)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadNumber17,
                  GrammarType2.$fReadNumber16
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Number>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Number>_R))))) -}
a7c28e97173ad7b983bce4b939a8926c
  $fReadNumber16 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Number -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Number -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.TRI) -}
ff77d1a8bd0ef16a490b70a28a840282
  $fReadNumber17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TRI"#) -}
a7c28e97173ad7b983bce4b939a8926c
  $fReadNumber18 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Number)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadNumber20,
                  GrammarType2.$fReadNumber19
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Number>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Number>_R))))) -}
a7c28e97173ad7b983bce4b939a8926c
  $fReadNumber19 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Number -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Number -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.DU) -}
a7c28e97173ad7b983bce4b939a8926c
  $fReadNumber2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarType2.Number
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarType2.Number
                   GrammarType2.$fReadNumber3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarType2.Number>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarType2.Number>_R)))) -}
156fde3551f4cfd6773729fff6400e2c
  $fReadNumber20 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DU"#) -}
a7c28e97173ad7b983bce4b939a8926c
  $fReadNumber21 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Number)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadNumber23,
                  GrammarType2.$fReadNumber22
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Number>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Number>_R))))) -}
a7c28e97173ad7b983bce4b939a8926c
  $fReadNumber22 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Number -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Number -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.SG) -}
ff2cd48929e6e67d5a76eeba27e955c4
  $fReadNumber23 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SG"#) -}
a7c28e97173ad7b983bce4b939a8926c
  $fReadNumber3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Number -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarType2.Number -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarType2.Number
                   GrammarType2.$fReadNumber4
                   eta
                   @ b
                   eta1) -}
a7c28e97173ad7b983bce4b939a8926c
  $fReadNumber4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Number)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Number)
                   GrammarType2.$fReadNumber21
                   GrammarType2.$fReadNumber5) -}
a7c28e97173ad7b983bce4b939a8926c
  $fReadNumber5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Number)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Number)
                   GrammarType2.$fReadNumber18
                   GrammarType2.$fReadNumber6) -}
a7c28e97173ad7b983bce4b939a8926c
  $fReadNumber6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Number)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Number)
                   GrammarType2.$fReadNumber15
                   GrammarType2.$fReadNumber7) -}
a7c28e97173ad7b983bce4b939a8926c
  $fReadNumber7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Number)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Number)
                   GrammarType2.$fReadNumber12
                   GrammarType2.$fReadNumber8) -}
a7c28e97173ad7b983bce4b939a8926c
  $fReadNumber8 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Number)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Number)
                   GrammarType2.$fReadNumber9
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Number))) -}
a7c28e97173ad7b983bce4b939a8926c
  $fReadNumber9 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Number)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadNumber11,
                  GrammarType2.$fReadNumber10
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Number>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Number>_R))))) -}
a7c28e97173ad7b983bce4b939a8926c
  $fReadNumber_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [GrammarType2.Number]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadNumber1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarType2.Number]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarType2.Number]>_R))) -}
a7c28e97173ad7b983bce4b939a8926c
  $fReadNumber_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Number
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadNumber2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarType2.Number>_R)) -}
a7c28e97173ad7b983bce4b939a8926c
  $fReadNumber_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarType2.Number
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarType2.Number
                   GrammarType2.$fReadNumber_$creadPrec
                   eta) -}
a7c28e97173ad7b983bce4b939a8926c
  $fReadNumber_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarType2.Number]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarType2.Number]
                   ((GrammarType2.$fReadNumber_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarType2.Number]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarType2.Number]>_R)
                      @ [GrammarType2.Number]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarType2.Number]))) -}
6982b76146a38d0a5bcfae8adeb790f1
  $fReadParticleSystem :: GHC.Read.Read GrammarType2.ParticleSystem
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.ParticleSystem
                  GrammarType2.$fReadParticleSystem_$creadsPrec
                  GrammarType2.$fReadParticleSystem_$sreadListDefault
                  GrammarType2.$fReadParticleSystem_$creadPrec
                  GrammarType2.$fReadParticleSystem_$creadListPrec -}
6982b76146a38d0a5bcfae8adeb790f1
  $fReadParticleSystem1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarType2.ParticleSystem] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarType2.ParticleSystem]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarType2.ParticleSystem
                   GrammarType2.$fReadParticleSystem2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarType2.ParticleSystem>_R))
                   @ b
                   eta1) -}
6982b76146a38d0a5bcfae8adeb790f1
  $fReadParticleSystem2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarType2.ParticleSystem
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarType2.ParticleSystem
                   GrammarType2.$fReadParticleSystem3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarType2.ParticleSystem>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarType2.ParticleSystem>_R)))) -}
6982b76146a38d0a5bcfae8adeb790f1
  $fReadParticleSystem3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.ParticleSystem -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   w1 :: GrammarType2.ParticleSystem
                         -> Text.ParserCombinators.ReadP.P b ->
                 case w of ww { GHC.Types.I# ww1 ->
                 GrammarType2.$wa1 ww1 @ b w1 }) -}
dc8d7b90a1c0874dfd73edb7e4b42f67
  $fReadParticleSystem4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ParticleSystem"#) -}
6982b76146a38d0a5bcfae8adeb790f1
  $fReadParticleSystem_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [GrammarType2.ParticleSystem]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadParticleSystem1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarType2.ParticleSystem]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarType2.ParticleSystem]>_R))) -}
6982b76146a38d0a5bcfae8adeb790f1
  $fReadParticleSystem_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      GrammarType2.ParticleSystem
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadParticleSystem2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarType2.ParticleSystem>_R)) -}
6982b76146a38d0a5bcfae8adeb790f1
  $fReadParticleSystem_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarType2.ParticleSystem
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadP.run
                   @ GrammarType2.ParticleSystem
                   ((GHC.Read.$fReadDouble10
                       @ GrammarType2.ParticleSystem
                       GrammarType2.$fReadParticleSystem3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                           <GrammarType2.ParticleSystem>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                      <GrammarType2.ParticleSystem>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <GrammarType2.ParticleSystem>_R)
                      @ GrammarType2.ParticleSystem
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ GrammarType2.ParticleSystem))) -}
6982b76146a38d0a5bcfae8adeb790f1
  $fReadParticleSystem_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarType2.ParticleSystem]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarType2.ParticleSystem]
                   ((GrammarType2.$fReadParticleSystem_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarType2.ParticleSystem]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarType2.ParticleSystem]>_R)
                      @ [GrammarType2.ParticleSystem]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarType2.ParticleSystem]))) -}
db2825e3cf2c837756c98e763bcc411d
  $fReadPerson :: GHC.Read.Read GrammarType2.Person
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Person
                  GrammarType2.$fReadPerson_$s$dmreadsPrec
                  GrammarType2.$fReadPerson_$sreadListDefault
                  GrammarType2.$fReadPerson_$creadPrec
                  GrammarType2.$fReadPerson_$creadListPrec -}
db2825e3cf2c837756c98e763bcc411d
  $fReadPerson1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarType2.Person] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarType2.Person]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarType2.Person
                   GrammarType2.$fReadPerson2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarType2.Person>_R))
                   @ b
                   eta1) -}
db2825e3cf2c837756c98e763bcc411d
  $fReadPerson10 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Person)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadPerson12,
                  GrammarType2.$fReadPerson11
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Person>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Person>_R))))) -}
db2825e3cf2c837756c98e763bcc411d
  $fReadPerson11 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Person -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Person -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.SECOND) -}
02d05d40db919d81df9bdc8ef69c6394
  $fReadPerson12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SECOND"#) -}
db2825e3cf2c837756c98e763bcc411d
  $fReadPerson13 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Person)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadPerson15,
                  GrammarType2.$fReadPerson14
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Person>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Person>_R))))) -}
db2825e3cf2c837756c98e763bcc411d
  $fReadPerson14 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Person -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Person -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.FIRST) -}
490b254baf9a60a8b796e8d70df2da3c
  $fReadPerson15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FIRST"#) -}
db2825e3cf2c837756c98e763bcc411d
  $fReadPerson2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarType2.Person
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarType2.Person
                   GrammarType2.$fReadPerson3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarType2.Person>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarType2.Person>_R)))) -}
db2825e3cf2c837756c98e763bcc411d
  $fReadPerson3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Person -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarType2.Person -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarType2.Person
                   GrammarType2.$fReadPerson4
                   eta
                   @ b
                   eta1) -}
db2825e3cf2c837756c98e763bcc411d
  $fReadPerson4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Person)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Person)
                   GrammarType2.$fReadPerson13
                   GrammarType2.$fReadPerson5) -}
db2825e3cf2c837756c98e763bcc411d
  $fReadPerson5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Person)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Person)
                   GrammarType2.$fReadPerson10
                   GrammarType2.$fReadPerson6) -}
db2825e3cf2c837756c98e763bcc411d
  $fReadPerson6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Person)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Person)
                   GrammarType2.$fReadPerson7
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Person))) -}
db2825e3cf2c837756c98e763bcc411d
  $fReadPerson7 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Person)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadPerson9,
                  GrammarType2.$fReadPerson8
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Person>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Person>_R))))) -}
db2825e3cf2c837756c98e763bcc411d
  $fReadPerson8 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Person -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Person -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.THIRD) -}
1ae67b97b373a5e9715039291120bd33
  $fReadPerson9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "THIRD"#) -}
db2825e3cf2c837756c98e763bcc411d
  $fReadPerson_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [GrammarType2.Person]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadPerson1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarType2.Person]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarType2.Person]>_R))) -}
db2825e3cf2c837756c98e763bcc411d
  $fReadPerson_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Person
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadPerson2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarType2.Person>_R)) -}
db2825e3cf2c837756c98e763bcc411d
  $fReadPerson_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarType2.Person
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarType2.Person
                   GrammarType2.$fReadPerson_$creadPrec
                   eta) -}
db2825e3cf2c837756c98e763bcc411d
  $fReadPerson_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarType2.Person]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarType2.Person]
                   ((GrammarType2.$fReadPerson_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarType2.Person]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarType2.Person]>_R)
                      @ [GrammarType2.Person]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarType2.Person]))) -}
a812e5c5789e0445882a8629e37b84c0
  $fReadPolarity :: GHC.Read.Read GrammarType2.Polarity
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Polarity
                  GrammarType2.$fReadPolarity_$s$dmreadsPrec
                  GrammarType2.$fReadPolarity_$sreadListDefault
                  GrammarType2.$fReadPolarity_$creadPrec
                  GrammarType2.$fReadPolarity_$creadListPrec -}
a812e5c5789e0445882a8629e37b84c0
  $fReadPolarity1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarType2.Polarity] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarType2.Polarity]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarType2.Polarity
                   GrammarType2.$fReadPolarity2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarType2.Polarity>_R))
                   @ b
                   eta1) -}
a812e5c5789e0445882a8629e37b84c0
  $fReadPolarity10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Polarity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Polarity -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.AFF) -}
b335c5d8339d3c1eaebe43e188aa3b92
  $fReadPolarity11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AFF"#) -}
a812e5c5789e0445882a8629e37b84c0
  $fReadPolarity2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarType2.Polarity
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarType2.Polarity
                   GrammarType2.$fReadPolarity3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarType2.Polarity>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarType2.Polarity>_R)))) -}
a812e5c5789e0445882a8629e37b84c0
  $fReadPolarity3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Polarity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarType2.Polarity
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarType2.Polarity
                   GrammarType2.$fReadPolarity4
                   eta
                   @ b
                   eta1) -}
a812e5c5789e0445882a8629e37b84c0
  $fReadPolarity4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Polarity)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Polarity)
                   GrammarType2.$fReadPolarity9
                   GrammarType2.$fReadPolarity5) -}
a812e5c5789e0445882a8629e37b84c0
  $fReadPolarity5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Polarity)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Polarity)
                   GrammarType2.$fReadPolarity6
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           GrammarType2.Polarity))) -}
a812e5c5789e0445882a8629e37b84c0
  $fReadPolarity6 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Polarity)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadPolarity8,
                  GrammarType2.$fReadPolarity7
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Polarity>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Polarity>_R))))) -}
a812e5c5789e0445882a8629e37b84c0
  $fReadPolarity7 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Polarity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Polarity -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.NEG) -}
6dea4879ebb47a9f18e30241e2bacef4
  $fReadPolarity8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NEG"#) -}
a812e5c5789e0445882a8629e37b84c0
  $fReadPolarity9 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Polarity)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadPolarity11,
                  GrammarType2.$fReadPolarity10
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Polarity>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Polarity>_R))))) -}
a812e5c5789e0445882a8629e37b84c0
  $fReadPolarity_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [GrammarType2.Polarity]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadPolarity1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarType2.Polarity]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarType2.Polarity]>_R))) -}
a812e5c5789e0445882a8629e37b84c0
  $fReadPolarity_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Polarity
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadPolarity2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarType2.Polarity>_R)) -}
a812e5c5789e0445882a8629e37b84c0
  $fReadPolarity_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarType2.Polarity
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarType2.Polarity
                   GrammarType2.$fReadPolarity_$creadPrec
                   eta) -}
a812e5c5789e0445882a8629e37b84c0
  $fReadPolarity_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarType2.Polarity]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarType2.Polarity]
                   ((GrammarType2.$fReadPolarity_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarType2.Polarity]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarType2.Polarity]>_R)
                      @ [GrammarType2.Polarity]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarType2.Polarity]))) -}
8acc464be69c950c5a5371aa4ffa757d
  $fReadSpecificity :: GHC.Read.Read GrammarType2.Specificity
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Specificity
                  GrammarType2.$fReadSpecificity_$s$dmreadsPrec
                  GrammarType2.$fReadSpecificity_$sreadListDefault
                  GrammarType2.$fReadSpecificity_$creadPrec
                  GrammarType2.$fReadSpecificity_$creadListPrec -}
8acc464be69c950c5a5371aa4ffa757d
  $fReadSpecificity1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarType2.Specificity] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarType2.Specificity]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarType2.Specificity
                   GrammarType2.$fReadSpecificity2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarType2.Specificity>_R))
                   @ b
                   eta1) -}
8acc464be69c950c5a5371aa4ffa757d
  $fReadSpecificity10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Specificity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Specificity
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.SPEC) -}
4b3e43f762ebcfceca8e1b14745149d8
  $fReadSpecificity11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SPEC"#) -}
8acc464be69c950c5a5371aa4ffa757d
  $fReadSpecificity2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarType2.Specificity
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarType2.Specificity
                   GrammarType2.$fReadSpecificity3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarType2.Specificity>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarType2.Specificity>_R)))) -}
8acc464be69c950c5a5371aa4ffa757d
  $fReadSpecificity3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Specificity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarType2.Specificity
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarType2.Specificity
                   GrammarType2.$fReadSpecificity4
                   eta
                   @ b
                   eta1) -}
8acc464be69c950c5a5371aa4ffa757d
  $fReadSpecificity4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Specificity)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Specificity)
                   GrammarType2.$fReadSpecificity9
                   GrammarType2.$fReadSpecificity5) -}
8acc464be69c950c5a5371aa4ffa757d
  $fReadSpecificity5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Specificity)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Specificity)
                   GrammarType2.$fReadSpecificity6
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           GrammarType2.Specificity))) -}
8acc464be69c950c5a5371aa4ffa757d
  $fReadSpecificity6 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Specificity)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadSpecificity8,
                  GrammarType2.$fReadSpecificity7
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Specificity>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Specificity>_R))))) -}
8acc464be69c950c5a5371aa4ffa757d
  $fReadSpecificity7 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Specificity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Specificity
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.NSPEC) -}
7f060ed682aea47e31c1cac8e6430284
  $fReadSpecificity8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NSPEC"#) -}
8acc464be69c950c5a5371aa4ffa757d
  $fReadSpecificity9 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Specificity)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadSpecificity11,
                  GrammarType2.$fReadSpecificity10
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Specificity>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Specificity>_R))))) -}
8acc464be69c950c5a5371aa4ffa757d
  $fReadSpecificity_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [GrammarType2.Specificity]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadSpecificity1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarType2.Specificity]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarType2.Specificity]>_R))) -}
8acc464be69c950c5a5371aa4ffa757d
  $fReadSpecificity_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Specificity
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadSpecificity2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarType2.Specificity>_R)) -}
8acc464be69c950c5a5371aa4ffa757d
  $fReadSpecificity_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarType2.Specificity
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarType2.Specificity
                   GrammarType2.$fReadSpecificity_$creadPrec
                   eta) -}
8acc464be69c950c5a5371aa4ffa757d
  $fReadSpecificity_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarType2.Specificity]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarType2.Specificity]
                   ((GrammarType2.$fReadSpecificity_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarType2.Specificity]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarType2.Specificity]>_R)
                      @ [GrammarType2.Specificity]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarType2.Specificity]))) -}
7c0511cad3468eb018d817a1a8934026
  $fReadTense :: GHC.Read.Read GrammarType2.Tense
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Tense
                  GrammarType2.$fReadTense_$s$dmreadsPrec
                  GrammarType2.$fReadTense_$sreadListDefault
                  GrammarType2.$fReadTense_$creadPrec
                  GrammarType2.$fReadTense_$creadListPrec -}
7c0511cad3468eb018d817a1a8934026
  $fReadTense1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarType2.Tense] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarType2.Tense] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarType2.Tense
                   GrammarType2.$fReadTense2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarType2.Tense>_R))
                   @ b
                   eta1) -}
7c0511cad3468eb018d817a1a8934026
  $fReadTense10 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Tense)
                   GrammarType2.$fReadTense19
                   GrammarType2.$fReadTense11) -}
7c0511cad3468eb018d817a1a8934026
  $fReadTense11 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Tense)
                   GrammarType2.$fReadTense16
                   GrammarType2.$fReadTense12) -}
7c0511cad3468eb018d817a1a8934026
  $fReadTense12 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Tense)
                   GrammarType2.$fReadTense13
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Tense))) -}
7c0511cad3468eb018d817a1a8934026
  $fReadTense13 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Tense)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadTense15,
                  GrammarType2.$fReadTense14
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Tense>_R))))) -}
7c0511cad3468eb018d817a1a8934026
  $fReadTense14 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.REMF) -}
2e3bfc3ff3490ce0eff900da10bcd54d
  $fReadTense15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "REMF"#) -}
7c0511cad3468eb018d817a1a8934026
  $fReadTense16 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Tense)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadTense18,
                  GrammarType2.$fReadTense17
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Tense>_R))))) -}
7c0511cad3468eb018d817a1a8934026
  $fReadTense17 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.IMMF) -}
a3aff2e994f22d801bf604c39b47f527
  $fReadTense18 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "IMMF"#) -}
7c0511cad3468eb018d817a1a8934026
  $fReadTense19 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Tense)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadTense21,
                  GrammarType2.$fReadTense20
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Tense>_R))))) -}
7c0511cad3468eb018d817a1a8934026
  $fReadTense2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarType2.Tense
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarType2.Tense
                   GrammarType2.$fReadTense3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarType2.Tense>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarType2.Tense>_R)))) -}
7c0511cad3468eb018d817a1a8934026
  $fReadTense20 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.FUT) -}
0f894cc556179fdf53089fabceb642da
  $fReadTense21 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FUT"#) -}
7c0511cad3468eb018d817a1a8934026
  $fReadTense22 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Tense)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadTense24,
                  GrammarType2.$fReadTense23
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Tense>_R))))) -}
7c0511cad3468eb018d817a1a8934026
  $fReadTense23 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.NFUT) -}
7a72bd8306e928a53fae6b0ad5577fa3
  $fReadTense24 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NFUT"#) -}
7c0511cad3468eb018d817a1a8934026
  $fReadTense25 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Tense)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadTense27,
                  GrammarType2.$fReadTense26
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Tense>_R))))) -}
7c0511cad3468eb018d817a1a8934026
  $fReadTense26 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.PRS) -}
27bd253dfe4b621c7ab4e8ae09a580ac
  $fReadTense27 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PRS"#) -}
7c0511cad3468eb018d817a1a8934026
  $fReadTense28 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Tense)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadTense30,
                  GrammarType2.$fReadTense29
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Tense>_R))))) -}
7c0511cad3468eb018d817a1a8934026
  $fReadTense29 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.NPST) -}
7c0511cad3468eb018d817a1a8934026
  $fReadTense3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarType2.Tense -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarType2.Tense
                   GrammarType2.$fReadTense4
                   eta
                   @ b
                   eta1) -}
300df378bd65944c549e213960fe0b88
  $fReadTense30 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NPST"#) -}
7c0511cad3468eb018d817a1a8934026
  $fReadTense31 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Tense)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadTense33,
                  GrammarType2.$fReadTense32
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Tense>_R))))) -}
7c0511cad3468eb018d817a1a8934026
  $fReadTense32 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.REC) -}
0f7db982b9a4766888487a01cd15ad55
  $fReadTense33 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "REC"#) -}
7c0511cad3468eb018d817a1a8934026
  $fReadTense34 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Tense)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadTense36,
                  GrammarType2.$fReadTense35
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Tense>_R))))) -}
7c0511cad3468eb018d817a1a8934026
  $fReadTense35 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.REM) -}
9d01c3b80f3db8a54cb2e5a5b24adc6d
  $fReadTense36 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "REM"#) -}
7c0511cad3468eb018d817a1a8934026
  $fReadTense37 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Tense)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadTense39,
                  GrammarType2.$fReadTense38
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Tense>_R))))) -}
7c0511cad3468eb018d817a1a8934026
  $fReadTense38 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Tense -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.PST) -}
d765d6171fde4d58c25bce19c554e2e1
  $fReadTense39 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PST"#) -}
7c0511cad3468eb018d817a1a8934026
  $fReadTense4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Tense)
                   GrammarType2.$fReadTense37
                   GrammarType2.$fReadTense5) -}
7c0511cad3468eb018d817a1a8934026
  $fReadTense5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Tense)
                   GrammarType2.$fReadTense34
                   GrammarType2.$fReadTense6) -}
7c0511cad3468eb018d817a1a8934026
  $fReadTense6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Tense)
                   GrammarType2.$fReadTense31
                   GrammarType2.$fReadTense7) -}
7c0511cad3468eb018d817a1a8934026
  $fReadTense7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Tense)
                   GrammarType2.$fReadTense28
                   GrammarType2.$fReadTense8) -}
7c0511cad3468eb018d817a1a8934026
  $fReadTense8 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Tense)
                   GrammarType2.$fReadTense25
                   GrammarType2.$fReadTense9) -}
7c0511cad3468eb018d817a1a8934026
  $fReadTense9 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Tense)
                   GrammarType2.$fReadTense22
                   GrammarType2.$fReadTense10) -}
7c0511cad3468eb018d817a1a8934026
  $fReadTense_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [GrammarType2.Tense]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadTense1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarType2.Tense]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarType2.Tense]>_R))) -}
7c0511cad3468eb018d817a1a8934026
  $fReadTense_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Tense
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadTense2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarType2.Tense>_R)) -}
7c0511cad3468eb018d817a1a8934026
  $fReadTense_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarType2.Tense
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarType2.Tense
                   GrammarType2.$fReadTense_$creadPrec
                   eta) -}
7c0511cad3468eb018d817a1a8934026
  $fReadTense_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarType2.Tense]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarType2.Tense]
                   ((GrammarType2.$fReadTense_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarType2.Tense]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarType2.Tense]>_R)
                      @ [GrammarType2.Tense]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarType2.Tense]))) -}
5fb21dc71ae46800ab0b386e73c2c62a
  $fReadTransitivity :: GHC.Read.Read GrammarType2.Transitivity
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Transitivity
                  GrammarType2.$fReadTransitivity_$s$dmreadsPrec
                  GrammarType2.$fReadTransitivity_$sreadListDefault
                  GrammarType2.$fReadTransitivity_$creadPrec
                  GrammarType2.$fReadTransitivity_$creadListPrec -}
5fb21dc71ae46800ab0b386e73c2c62a
  $fReadTransitivity1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarType2.Transitivity] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarType2.Transitivity]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarType2.Transitivity
                   GrammarType2.$fReadTransitivity2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarType2.Transitivity>_R))
                   @ b
                   eta1) -}
5fb21dc71ae46800ab0b386e73c2c62a
  $fReadTransitivity10 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Transitivity)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadTransitivity12,
                  GrammarType2.$fReadTransitivity11
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Transitivity>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Transitivity>_R))))) -}
5fb21dc71ae46800ab0b386e73c2c62a
  $fReadTransitivity11 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Transitivity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Transitivity
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.TR) -}
e23f392a8d917d505ae2df7d55d2e1a8
  $fReadTransitivity12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TR"#) -}
5fb21dc71ae46800ab0b386e73c2c62a
  $fReadTransitivity13 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Transitivity)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadTransitivity15,
                  GrammarType2.$fReadTransitivity14
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Transitivity>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Transitivity>_R))))) -}
5fb21dc71ae46800ab0b386e73c2c62a
  $fReadTransitivity14 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Transitivity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Transitivity
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.INTR) -}
eb926e4172d3829d9f1489bf9aa4a215
  $fReadTransitivity15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "INTR"#) -}
5fb21dc71ae46800ab0b386e73c2c62a
  $fReadTransitivity2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarType2.Transitivity
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarType2.Transitivity
                   GrammarType2.$fReadTransitivity3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarType2.Transitivity>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarType2.Transitivity>_R)))) -}
5fb21dc71ae46800ab0b386e73c2c62a
  $fReadTransitivity3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Transitivity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarType2.Transitivity
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarType2.Transitivity
                   GrammarType2.$fReadTransitivity4
                   eta
                   @ b
                   eta1) -}
5fb21dc71ae46800ab0b386e73c2c62a
  $fReadTransitivity4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GrammarType2.Transitivity)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Transitivity)
                   GrammarType2.$fReadTransitivity13
                   GrammarType2.$fReadTransitivity5) -}
5fb21dc71ae46800ab0b386e73c2c62a
  $fReadTransitivity5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GrammarType2.Transitivity)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Transitivity)
                   GrammarType2.$fReadTransitivity10
                   GrammarType2.$fReadTransitivity6) -}
5fb21dc71ae46800ab0b386e73c2c62a
  $fReadTransitivity6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        GrammarType2.Transitivity)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Transitivity)
                   GrammarType2.$fReadTransitivity7
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           GrammarType2.Transitivity))) -}
5fb21dc71ae46800ab0b386e73c2c62a
  $fReadTransitivity7 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Transitivity)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadTransitivity9,
                  GrammarType2.$fReadTransitivity8
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Transitivity>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Transitivity>_R))))) -}
5fb21dc71ae46800ab0b386e73c2c62a
  $fReadTransitivity8 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Transitivity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Transitivity
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.DITR) -}
235a23250dbbef3b0b9812790746a8b3
  $fReadTransitivity9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DITR"#) -}
5fb21dc71ae46800ab0b386e73c2c62a
  $fReadTransitivity_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [GrammarType2.Transitivity]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadTransitivity1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarType2.Transitivity]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarType2.Transitivity]>_R))) -}
5fb21dc71ae46800ab0b386e73c2c62a
  $fReadTransitivity_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Transitivity
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadTransitivity2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarType2.Transitivity>_R)) -}
5fb21dc71ae46800ab0b386e73c2c62a
  $fReadTransitivity_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarType2.Transitivity
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarType2.Transitivity
                   GrammarType2.$fReadTransitivity_$creadPrec
                   eta) -}
5fb21dc71ae46800ab0b386e73c2c62a
  $fReadTransitivity_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarType2.Transitivity]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarType2.Transitivity]
                   ((GrammarType2.$fReadTransitivity_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarType2.Transitivity]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarType2.Transitivity]>_R)
                      @ [GrammarType2.Transitivity]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarType2.Transitivity]))) -}
12e9be3ba79cdb444f2fb86991189095
  $fReadVoice :: GHC.Read.Read GrammarType2.Voice
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Voice
                  GrammarType2.$fReadVoice_$s$dmreadsPrec
                  GrammarType2.$fReadVoice_$sreadListDefault
                  GrammarType2.$fReadVoice_$creadPrec
                  GrammarType2.$fReadVoice_$creadListPrec -}
12e9be3ba79cdb444f2fb86991189095
  $fReadVoice1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarType2.Voice] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarType2.Voice] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarType2.Voice
                   GrammarType2.$fReadVoice2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarType2.Voice>_R))
                   @ b
                   eta1) -}
12e9be3ba79cdb444f2fb86991189095
  $fReadVoice10 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Voice)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadVoice12,
                  GrammarType2.$fReadVoice11
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Voice>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Voice>_R))))) -}
12e9be3ba79cdb444f2fb86991189095
  $fReadVoice11 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Voice -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Voice -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.MID) -}
7cc49bd404eabddd603ffc2f8a586455
  $fReadVoice12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "MID"#) -}
12e9be3ba79cdb444f2fb86991189095
  $fReadVoice13 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Voice)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadVoice15,
                  GrammarType2.$fReadVoice14
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Voice>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Voice>_R))))) -}
12e9be3ba79cdb444f2fb86991189095
  $fReadVoice14 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Voice -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Voice -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.ACT) -}
3ad1011e52478c56c152fa9a6fc95634
  $fReadVoice15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ACT"#) -}
12e9be3ba79cdb444f2fb86991189095
  $fReadVoice2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarType2.Voice
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarType2.Voice
                   GrammarType2.$fReadVoice3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarType2.Voice>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarType2.Voice>_R)))) -}
12e9be3ba79cdb444f2fb86991189095
  $fReadVoice3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Voice -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarType2.Voice -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarType2.Voice
                   GrammarType2.$fReadVoice4
                   eta
                   @ b
                   eta1) -}
12e9be3ba79cdb444f2fb86991189095
  $fReadVoice4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Voice)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Voice)
                   GrammarType2.$fReadVoice13
                   GrammarType2.$fReadVoice5) -}
12e9be3ba79cdb444f2fb86991189095
  $fReadVoice5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Voice)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Voice)
                   GrammarType2.$fReadVoice10
                   GrammarType2.$fReadVoice6) -}
12e9be3ba79cdb444f2fb86991189095
  $fReadVoice6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Voice)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Voice)
                   GrammarType2.$fReadVoice7
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Voice))) -}
12e9be3ba79cdb444f2fb86991189095
  $fReadVoice7 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Voice)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadVoice9,
                  GrammarType2.$fReadVoice8
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Voice>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Voice>_R))))) -}
12e9be3ba79cdb444f2fb86991189095
  $fReadVoice8 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Voice -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Voice -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.PAS) -}
b74f4ec78ee40e2facf766e90ffc873c
  $fReadVoice9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PAS"#) -}
12e9be3ba79cdb444f2fb86991189095
  $fReadVoice_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [GrammarType2.Voice]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadVoice1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarType2.Voice]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarType2.Voice]>_R))) -}
12e9be3ba79cdb444f2fb86991189095
  $fReadVoice_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Voice
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadVoice2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarType2.Voice>_R)) -}
12e9be3ba79cdb444f2fb86991189095
  $fReadVoice_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarType2.Voice
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarType2.Voice
                   GrammarType2.$fReadVoice_$creadPrec
                   eta) -}
12e9be3ba79cdb444f2fb86991189095
  $fReadVoice_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarType2.Voice]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarType2.Voice]
                   ((GrammarType2.$fReadVoice_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarType2.Voice]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarType2.Voice]>_R)
                      @ [GrammarType2.Voice]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarType2.Voice]))) -}
455e61c4a5fa3c4b414a337c1d019d69
  $fReadVolition :: GHC.Read.Read GrammarType2.Volition
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Volition
                  GrammarType2.$fReadVolition_$s$dmreadsPrec
                  GrammarType2.$fReadVolition_$sreadListDefault
                  GrammarType2.$fReadVolition_$creadPrec
                  GrammarType2.$fReadVolition_$creadListPrec -}
455e61c4a5fa3c4b414a337c1d019d69
  $fReadVolition1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarType2.Volition] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarType2.Volition]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarType2.Volition
                   GrammarType2.$fReadVolition2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarType2.Volition>_R))
                   @ b
                   eta1) -}
455e61c4a5fa3c4b414a337c1d019d69
  $fReadVolition10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Volition -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Volition -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.VOL) -}
3f1b3554c9f00817caa5676cedd18e41
  $fReadVolition11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "VOL"#) -}
455e61c4a5fa3c4b414a337c1d019d69
  $fReadVolition2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarType2.Volition
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarType2.Volition
                   GrammarType2.$fReadVolition3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarType2.Volition>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarType2.Volition>_R)))) -}
455e61c4a5fa3c4b414a337c1d019d69
  $fReadVolition3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Volition -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarType2.Volition
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarType2.Volition
                   GrammarType2.$fReadVolition4
                   eta
                   @ b
                   eta1) -}
455e61c4a5fa3c4b414a337c1d019d69
  $fReadVolition4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Volition)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Volition)
                   GrammarType2.$fReadVolition9
                   GrammarType2.$fReadVolition5) -}
455e61c4a5fa3c4b414a337c1d019d69
  $fReadVolition5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Volition)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Volition)
                   GrammarType2.$fReadVolition6
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           GrammarType2.Volition))) -}
455e61c4a5fa3c4b414a337c1d019d69
  $fReadVolition6 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Volition)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadVolition8,
                  GrammarType2.$fReadVolition7
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Volition>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Volition>_R))))) -}
455e61c4a5fa3c4b414a337c1d019d69
  $fReadVolition7 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType2.Volition -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType2.Volition -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType2.NVOL) -}
7a267d6878d7a83dee1a489f25fc061e
  $fReadVolition8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NVOL"#) -}
455e61c4a5fa3c4b414a337c1d019d69
  $fReadVolition9 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Volition)
  {- Strictness: m,
     Unfolding: ((GrammarType2.$fReadVolition11,
                  GrammarType2.$fReadVolition10
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType2.Volition>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType2.Volition>_R))))) -}
455e61c4a5fa3c4b414a337c1d019d69
  $fReadVolition_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [GrammarType2.Volition]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadVolition1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarType2.Volition]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarType2.Volition]>_R))) -}
455e61c4a5fa3c4b414a337c1d019d69
  $fReadVolition_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec GrammarType2.Volition
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarType2.$fReadVolition2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarType2.Volition>_R)) -}
455e61c4a5fa3c4b414a337c1d019d69
  $fReadVolition_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarType2.Volition
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarType2.Volition
                   GrammarType2.$fReadVolition_$creadPrec
                   eta) -}
455e61c4a5fa3c4b414a337c1d019d69
  $fReadVolition_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarType2.Volition]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarType2.Volition]
                   ((GrammarType2.$fReadVolition_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarType2.Volition]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarType2.Volition]>_R)
                      @ [GrammarType2.Volition]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarType2.Volition]))) -}
997f0106cc61a0dae6693b73d4ae044c
  $fShowAnimacy :: GHC.Show.Show GrammarType2.Animacy
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Animacy
                  GrammarType2.$fShowAnimacy_$cshowsPrec
                  GrammarType2.$fShowAnimacy_$cshow
                  GrammarType2.$fShowAnimacy_$cshowList -}
997f0106cc61a0dae6693b73d4ae044c
  $fShowAnimacy_$cshow :: GrammarType2.Animacy -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarType2.Animacy ->
                 GrammarType2.$fShowAnimacy_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
997f0106cc61a0dae6693b73d4ae044c
  $fShowAnimacy_$cshowList ::
    [GrammarType2.Animacy] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarType2.Animacy
                   GrammarType2.$w$cshowsPrec) -}
997f0106cc61a0dae6693b73d4ae044c
  $fShowAnimacy_$cshowsPrec ::
    GHC.Types.Int -> GrammarType2.Animacy -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: GrammarType2.Animacy
                   w2 :: GHC.Base.String ->
                 GrammarType2.$w$cshowsPrec w1 w2) -}
d544c1f4b832edd20ebb4e3b0f6dfe57
  $fShowAspect :: GHC.Show.Show GrammarType2.Aspect
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Aspect
                  GrammarType2.$fShowAspect_$cshowsPrec
                  GrammarType2.$fShowAspect_$cshow
                  GrammarType2.$fShowAspect_$cshowList -}
d544c1f4b832edd20ebb4e3b0f6dfe57
  $fShowAspect1 :: GrammarType2.Aspect -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarType2.Aspect eta :: GHC.Base.String ->
                 case ds of wild {
                   GrammarType2.PFV
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           GrammarType2.$fReadAspect11)
                        eta
                   GrammarType2.IPFV
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n GrammarType2.$fReadAspect8)
                        eta }) -}
d544c1f4b832edd20ebb4e3b0f6dfe57
  $fShowAspect_$cshow :: GrammarType2.Aspect -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarType2.Aspect ->
                 case x of wild {
                   GrammarType2.PFV -> GrammarType2.$fReadAspect11
                   GrammarType2.IPFV -> GrammarType2.$fReadAspect8 }) -}
d544c1f4b832edd20ebb4e3b0f6dfe57
  $fShowAspect_$cshowList :: [GrammarType2.Aspect] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarType2.Aspect
                   GrammarType2.$fShowAspect1) -}
d544c1f4b832edd20ebb4e3b0f6dfe57
  $fShowAspect_$cshowsPrec ::
    GHC.Types.Int -> GrammarType2.Aspect -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   ds1 :: GrammarType2.Aspect
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   GrammarType2.PFV
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           GrammarType2.$fReadAspect11)
                        eta
                   GrammarType2.IPFV
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n GrammarType2.$fReadAspect8)
                        eta }) -}
e317df6bd7f01bf53f9bafa3ac506fc7
  $fShowCase :: GHC.Show.Show GrammarType2.Case
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Case
                  GrammarType2.$fShowCase_$cshowsPrec
                  GrammarType2.$fShowCase_$cshow
                  GrammarType2.$fShowCase_$cshowList -}
e317df6bd7f01bf53f9bafa3ac506fc7
  $fShowCase_$cshow :: GrammarType2.Case -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarType2.Case ->
                 GrammarType2.$fShowCase_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
e317df6bd7f01bf53f9bafa3ac506fc7
  $fShowCase_$cshowList :: [GrammarType2.Case] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarType2.Case
                   GrammarType2.$w$cshowsPrec1) -}
e317df6bd7f01bf53f9bafa3ac506fc7
  $fShowCase_$cshowsPrec ::
    GHC.Types.Int -> GrammarType2.Case -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: GrammarType2.Case
                   w2 :: GHC.Base.String ->
                 GrammarType2.$w$cshowsPrec1 w1 w2) -}
f0310ab24a9e46c14bec03bb33755d4f
  $fShowDeclension :: GHC.Show.Show GrammarType2.Declension
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Declension
                  GrammarType2.$fShowDeclension_$cshowsPrec
                  GrammarType2.$fShowDeclension_$cshow
                  GrammarType2.$fShowDeclension_$cshowList -}
f0310ab24a9e46c14bec03bb33755d4f
  $fShowDeclension1 :: GrammarType2.Declension -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: GrammarType2.Declension w1 :: GHC.Base.String ->
                 case w of ww { GrammarType2.Declension ww1 ->
                 GrammarType2.$w$cshowsPrec2 0 ww1 w1 }) -}
264ef27b8f12ed411f349cf8cb35c845
  $fShowDeclension2 ::
    (PhonemeType2.Morpheme,
     (GHC.Base.Maybe GrammarType2.Gender,
      GHC.Base.Maybe GrammarType2.Animacy,
      GHC.Base.Maybe GrammarType2.Case,
      GHC.Base.Maybe GrammarType2.Number,
      GHC.Base.Maybe GrammarType2.Honorific,
      GHC.Base.Maybe GrammarType2.Definiteness,
      GHC.Base.Maybe GrammarType2.Specificity))
    -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ w3 :: (PhonemeType2.Morpheme,
                          (GHC.Base.Maybe GrammarType2.Gender,
                           GHC.Base.Maybe GrammarType2.Animacy,
                           GHC.Base.Maybe GrammarType2.Case,
                           GHC.Base.Maybe GrammarType2.Number,
                           GHC.Base.Maybe GrammarType2.Honorific,
                           GHC.Base.Maybe GrammarType2.Definiteness,
                           GHC.Base.Maybe GrammarType2.Specificity))
                   w4 :: GHC.Base.String[OneShot] ->
                 case w3 of ww { (,) ww1 ww2 ->
                 GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows9
                   (case ww1 of ww4 { PhonemeType2.Morpheme ww3 ->
                    PhonemeType2.$w$cshowsPrec4
                      0
                      ww3
                      (GHC.Types.:
                         @ GHC.Types.Char
                         GHC.Show.showList__1
                         (GHC.Show.$fShow(,)_$sgo
                            (\ w9 :: GHC.Base.String ->
                             case ww2 of ww5 { (,,,,,,) ww6 ww7 ww8 ww9 ww10 ww11 ww12 ->
                             GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.shows9
                               (let {
                                  a24 :: GHC.Base.String
                                  = GHC.Show.$fShow(,,,,,,)_$sgo
                                      (GHC.Show.$fShowMaybe_$cshowsPrec
                                         @ GrammarType2.Animacy
                                         GrammarType2.$fShowAnimacy
                                         GHC.Show.shows18
                                         ww7)
                                      (GHC.Types.:
                                         @ GHC.Show.ShowS
                                         (GHC.Show.$fShowMaybe_$cshowsPrec
                                            @ GrammarType2.Case
                                            GrammarType2.$fShowCase
                                            GHC.Show.shows18
                                            ww8)
                                         (GHC.Types.:
                                            @ GHC.Show.ShowS
                                            (GHC.Show.$fShowMaybe_$cshowsPrec
                                               @ GrammarType2.Number
                                               GrammarType2.$fShowNumber
                                               GHC.Show.shows18
                                               ww9)
                                            (GHC.Types.:
                                               @ GHC.Show.ShowS
                                               (GHC.Show.$fShowMaybe_$cshowsPrec
                                                  @ GrammarType2.Honorific
                                                  GrammarType2.$fShowHonorific
                                                  GHC.Show.shows18
                                                  ww10)
                                               (GHC.Types.:
                                                  @ GHC.Show.ShowS
                                                  (GHC.Show.$fShowMaybe_$cshowsPrec
                                                     @ GrammarType2.Definiteness
                                                     GrammarType2.$fShowDefiniteness
                                                     GHC.Show.shows18
                                                     ww11)
                                                  (GHC.Types.:
                                                     @ GHC.Show.ShowS
                                                     (GHC.Show.$fShowMaybe_$cshowsPrec
                                                        @ GrammarType2.Specificity
                                                        GrammarType2.$fShowSpecificity
                                                        GHC.Show.shows18
                                                        ww12)
                                                     (GHC.Types.[] @ GHC.Show.ShowS))))))
                                      (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w9)
                                } in
                                case ww6 of wild {
                                  GHC.Base.Nothing
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       GHC.Show.$fShowMaybe3
                                       (GHC.Types.: @ GHC.Types.Char GHC.Show.showList__1 a24)
                                  GHC.Base.Just b1
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       GHC.Show.$fShowMaybe1
                                       (GrammarType2.$w$cshowsPrec3
                                          b1
                                          (GHC.Types.:
                                             @ GHC.Types.Char
                                             GHC.Show.showList__1
                                             a24)) }) })
                            (GHC.Types.[] @ GHC.Show.ShowS)
                            (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w4))) }) }) -}
e2ec00df0940bb006d89c3bec694f149
  $fShowDeclension3 ::
    (PhonemeType2.Morpheme,
     (GHC.Base.Maybe GrammarType2.Gender,
      GHC.Base.Maybe GrammarType2.Animacy,
      GHC.Base.Maybe GrammarType2.Case,
      GHC.Base.Maybe GrammarType2.Number,
      GHC.Base.Maybe GrammarType2.Honorific,
      GHC.Base.Maybe GrammarType2.Definiteness,
      GHC.Base.Maybe GrammarType2.Specificity))
    -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ w3 :: (PhonemeType2.Morpheme,
                          (GHC.Base.Maybe GrammarType2.Gender,
                           GHC.Base.Maybe GrammarType2.Animacy,
                           GHC.Base.Maybe GrammarType2.Case,
                           GHC.Base.Maybe GrammarType2.Number,
                           GHC.Base.Maybe GrammarType2.Honorific,
                           GHC.Base.Maybe GrammarType2.Definiteness,
                           GHC.Base.Maybe GrammarType2.Specificity))
                   w4 :: GHC.Base.String[OneShot] ->
                 case w3 of ww { (,) ww1 ww2 ->
                 GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows9
                   (case ww1 of ww4 { PhonemeType2.Morpheme ww3 ->
                    PhonemeType2.$w$cshowsPrec4
                      0
                      ww3
                      (GHC.Types.:
                         @ GHC.Types.Char
                         GHC.Show.showList__1
                         (GHC.Show.$fShow(,)_$sgo
                            (\ w9 :: GHC.Base.String ->
                             case ww2 of ww5 { (,,,,,,) ww6 ww7 ww8 ww9 ww10 ww11 ww12 ->
                             GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.shows9
                               (let {
                                  a24 :: GHC.Base.String
                                  = GHC.Show.$fShow(,,,,,,)_$sgo
                                      (GHC.Show.$fShowMaybe_$cshowsPrec
                                         @ GrammarType2.Animacy
                                         GrammarType2.$fShowAnimacy
                                         GHC.Show.shows18
                                         ww7)
                                      (GHC.Types.:
                                         @ GHC.Show.ShowS
                                         (GHC.Show.$fShowMaybe_$cshowsPrec
                                            @ GrammarType2.Case
                                            GrammarType2.$fShowCase
                                            GHC.Show.shows18
                                            ww8)
                                         (GHC.Types.:
                                            @ GHC.Show.ShowS
                                            (GHC.Show.$fShowMaybe_$cshowsPrec
                                               @ GrammarType2.Number
                                               GrammarType2.$fShowNumber
                                               GHC.Show.shows18
                                               ww9)
                                            (GHC.Types.:
                                               @ GHC.Show.ShowS
                                               (GHC.Show.$fShowMaybe_$cshowsPrec
                                                  @ GrammarType2.Honorific
                                                  GrammarType2.$fShowHonorific
                                                  GHC.Show.shows18
                                                  ww10)
                                               (GHC.Types.:
                                                  @ GHC.Show.ShowS
                                                  (GHC.Show.$fShowMaybe_$cshowsPrec
                                                     @ GrammarType2.Definiteness
                                                     GrammarType2.$fShowDefiniteness
                                                     GHC.Show.shows18
                                                     ww11)
                                                  (GHC.Types.:
                                                     @ GHC.Show.ShowS
                                                     (GHC.Show.$fShowMaybe_$cshowsPrec
                                                        @ GrammarType2.Specificity
                                                        GrammarType2.$fShowSpecificity
                                                        GHC.Show.shows18
                                                        ww12)
                                                     (GHC.Types.[] @ GHC.Show.ShowS))))))
                                      (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w9)
                                } in
                                case ww6 of wild {
                                  GHC.Base.Nothing
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       GHC.Show.$fShowMaybe3
                                       (GHC.Types.: @ GHC.Types.Char GHC.Show.showList__1 a24)
                                  GHC.Base.Just b1
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       GHC.Show.$fShowMaybe1
                                       (GrammarType2.$w$cshowsPrec3
                                          b1
                                          (GHC.Types.:
                                             @ GHC.Types.Char
                                             GHC.Show.showList__1
                                             a24)) }) })
                            (GHC.Types.[] @ GHC.Show.ShowS)
                            (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w4))) }) }) -}
b1d4630e583db71da075f8db918b2561
  $fShowDeclension4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Declension "#) -}
a90afe1a02159cf50fda37d803d2c7a0
  $fShowDeclension5 ::
    (PhonemeType2.Morpheme,
     (GHC.Base.Maybe GrammarType2.Gender,
      GHC.Base.Maybe GrammarType2.Animacy,
      GHC.Base.Maybe GrammarType2.Case,
      GHC.Base.Maybe GrammarType2.Number,
      GHC.Base.Maybe GrammarType2.Honorific,
      GHC.Base.Maybe GrammarType2.Definiteness,
      GHC.Base.Maybe GrammarType2.Specificity))
    -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ w3 :: (PhonemeType2.Morpheme,
                          (GHC.Base.Maybe GrammarType2.Gender,
                           GHC.Base.Maybe GrammarType2.Animacy,
                           GHC.Base.Maybe GrammarType2.Case,
                           GHC.Base.Maybe GrammarType2.Number,
                           GHC.Base.Maybe GrammarType2.Honorific,
                           GHC.Base.Maybe GrammarType2.Definiteness,
                           GHC.Base.Maybe GrammarType2.Specificity))
                   w4 :: GHC.Base.String[OneShot] ->
                 case w3 of ww { (,) ww1 ww2 ->
                 GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows9
                   (case ww1 of ww4 { PhonemeType2.Morpheme ww3 ->
                    PhonemeType2.$w$cshowsPrec4
                      0
                      ww3
                      (GHC.Types.:
                         @ GHC.Types.Char
                         GHC.Show.showList__1
                         (GHC.Show.$fShow(,)_$sgo
                            (\ w9 :: GHC.Base.String ->
                             case ww2 of ww5 { (,,,,,,) ww6 ww7 ww8 ww9 ww10 ww11 ww12 ->
                             GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.shows9
                               (let {
                                  a24 :: GHC.Base.String
                                  = GHC.Show.$fShow(,,,,,,)_$sgo
                                      (GHC.Show.$fShowMaybe_$cshowsPrec
                                         @ GrammarType2.Animacy
                                         GrammarType2.$fShowAnimacy
                                         GHC.Show.shows18
                                         ww7)
                                      (GHC.Types.:
                                         @ GHC.Show.ShowS
                                         (GHC.Show.$fShowMaybe_$cshowsPrec
                                            @ GrammarType2.Case
                                            GrammarType2.$fShowCase
                                            GHC.Show.shows18
                                            ww8)
                                         (GHC.Types.:
                                            @ GHC.Show.ShowS
                                            (GHC.Show.$fShowMaybe_$cshowsPrec
                                               @ GrammarType2.Number
                                               GrammarType2.$fShowNumber
                                               GHC.Show.shows18
                                               ww9)
                                            (GHC.Types.:
                                               @ GHC.Show.ShowS
                                               (GHC.Show.$fShowMaybe_$cshowsPrec
                                                  @ GrammarType2.Honorific
                                                  GrammarType2.$fShowHonorific
                                                  GHC.Show.shows18
                                                  ww10)
                                               (GHC.Types.:
                                                  @ GHC.Show.ShowS
                                                  (GHC.Show.$fShowMaybe_$cshowsPrec
                                                     @ GrammarType2.Definiteness
                                                     GrammarType2.$fShowDefiniteness
                                                     GHC.Show.shows18
                                                     ww11)
                                                  (GHC.Types.:
                                                     @ GHC.Show.ShowS
                                                     (GHC.Show.$fShowMaybe_$cshowsPrec
                                                        @ GrammarType2.Specificity
                                                        GrammarType2.$fShowSpecificity
                                                        GHC.Show.shows18
                                                        ww12)
                                                     (GHC.Types.[] @ GHC.Show.ShowS))))))
                                      (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w9)
                                } in
                                case ww6 of wild {
                                  GHC.Base.Nothing
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       GHC.Show.$fShowMaybe3
                                       (GHC.Types.: @ GHC.Types.Char GHC.Show.showList__1 a24)
                                  GHC.Base.Just b1
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       GHC.Show.$fShowMaybe1
                                       (GrammarType2.$w$cshowsPrec3
                                          b1
                                          (GHC.Types.:
                                             @ GHC.Types.Char
                                             GHC.Show.showList__1
                                             a24)) }) })
                            (GHC.Types.[] @ GHC.Show.ShowS)
                            (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w4))) }) }) -}
f0310ab24a9e46c14bec03bb33755d4f
  $fShowDeclension_$cshow ::
    GrammarType2.Declension -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: GrammarType2.Declension ->
                 case w of ww { GrammarType2.Declension ww1 ->
                 GrammarType2.$w$cshow ww1 }) -}
f0310ab24a9e46c14bec03bb33755d4f
  $fShowDeclension_$cshowList ::
    [GrammarType2.Declension] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarType2.Declension
                   GrammarType2.$fShowDeclension1) -}
f0310ab24a9e46c14bec03bb33755d4f
  $fShowDeclension_$cshowsPrec ::
    GHC.Types.Int -> GrammarType2.Declension -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S,1*U(1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int
                   w1 :: GrammarType2.Declension
                   w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { GrammarType2.Declension ww3 ->
                 GrammarType2.$w$cshowsPrec2 ww1 ww3 w2 } }) -}
2a24341dc728cf3214c312c2683a2f7a
  $fShowDefiniteness :: GHC.Show.Show GrammarType2.Definiteness
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Definiteness
                  GrammarType2.$fShowDefiniteness_$cshowsPrec
                  GrammarType2.$fShowDefiniteness_$cshow
                  GrammarType2.$fShowDefiniteness_$cshowList -}
2a24341dc728cf3214c312c2683a2f7a
  $fShowDefiniteness1 :: GrammarType2.Definiteness -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarType2.Definiteness eta :: GHC.Base.String ->
                 case ds of wild {
                   GrammarType2.DEF
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           GrammarType2.$fReadDefiniteness11)
                        eta
                   GrammarType2.INDF
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           GrammarType2.$fReadDefiniteness8)
                        eta }) -}
2a24341dc728cf3214c312c2683a2f7a
  $fShowDefiniteness_$cshow ::
    GrammarType2.Definiteness -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarType2.Definiteness ->
                 case x of wild {
                   GrammarType2.DEF -> GrammarType2.$fReadDefiniteness11
                   GrammarType2.INDF -> GrammarType2.$fReadDefiniteness8 }) -}
2a24341dc728cf3214c312c2683a2f7a
  $fShowDefiniteness_$cshowList ::
    [GrammarType2.Definiteness] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarType2.Definiteness
                   GrammarType2.$fShowDefiniteness1) -}
2a24341dc728cf3214c312c2683a2f7a
  $fShowDefiniteness_$cshowsPrec ::
    GHC.Types.Int -> GrammarType2.Definiteness -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   ds1 :: GrammarType2.Definiteness
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   GrammarType2.DEF
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           GrammarType2.$fReadDefiniteness11)
                        eta
                   GrammarType2.INDF
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           GrammarType2.$fReadDefiniteness8)
                        eta }) -}
97680a78ec9508d30ba0411b94ab5395
  $fShowEvidentiality :: GHC.Show.Show GrammarType2.Evidentiality
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Evidentiality
                  GrammarType2.$fShowEvidentiality_$cshowsPrec
                  GrammarType2.$fShowEvidentiality_$cshow
                  GrammarType2.$fShowEvidentiality_$cshowList -}
97680a78ec9508d30ba0411b94ab5395
  $fShowEvidentiality_$cshow ::
    GrammarType2.Evidentiality -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarType2.Evidentiality ->
                 GrammarType2.$fShowEvidentiality_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
97680a78ec9508d30ba0411b94ab5395
  $fShowEvidentiality_$cshowList ::
    [GrammarType2.Evidentiality] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarType2.Evidentiality
                   GrammarType2.$w$cshowsPrec5) -}
97680a78ec9508d30ba0411b94ab5395
  $fShowEvidentiality_$cshowsPrec ::
    GHC.Types.Int -> GrammarType2.Evidentiality -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: GrammarType2.Evidentiality
                   w2 :: GHC.Base.String ->
                 GrammarType2.$w$cshowsPrec5 w1 w2) -}
83b76b7eefbf738909a19bb1d1eb6a84
  $fShowExponentSystem :: GHC.Show.Show GrammarType2.ExponentSystem
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.ExponentSystem
                  GrammarType2.$fShowExponentSystem_$cshowsPrec
                  GrammarType2.$fShowExponentSystem_$cshow
                  GrammarType2.$fShowExponentSystem_$cshowList -}
83b76b7eefbf738909a19bb1d1eb6a84
  $fShowExponentSystem1 ::
    GrammarType2.ExponentSystem -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: GrammarType2.ExponentSystem
                   w1 :: GHC.Base.String ->
                 case w of ww { GrammarType2.ExponentSystem ww1 ->
                 GrammarType2.$w$cshowsPrec6 0 ww1 w1 }) -}
3d29a42894ba5bd4f9cee03ecd9d57d2
  $fShowExponentSystem2 ::
    (PhonemeType2.Morpheme,
     (GHC.Base.Maybe GrammarType2.Gender,
      GHC.Base.Maybe GrammarType2.Animacy,
      GHC.Base.Maybe GrammarType2.Case,
      GHC.Base.Maybe GrammarType2.Number,
      GHC.Base.Maybe GrammarType2.Honorific,
      GHC.Base.Maybe GrammarType2.Definiteness,
      GHC.Base.Maybe GrammarType2.Specificity))
    -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ w3 :: (PhonemeType2.Morpheme,
                          (GHC.Base.Maybe GrammarType2.Gender,
                           GHC.Base.Maybe GrammarType2.Animacy,
                           GHC.Base.Maybe GrammarType2.Case,
                           GHC.Base.Maybe GrammarType2.Number,
                           GHC.Base.Maybe GrammarType2.Honorific,
                           GHC.Base.Maybe GrammarType2.Definiteness,
                           GHC.Base.Maybe GrammarType2.Specificity))
                   w4 :: GHC.Base.String[OneShot] ->
                 case w3 of ww { (,) ww1 ww2 ->
                 GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows9
                   (case ww1 of ww4 { PhonemeType2.Morpheme ww3 ->
                    PhonemeType2.$w$cshowsPrec4
                      0
                      ww3
                      (GHC.Types.:
                         @ GHC.Types.Char
                         GHC.Show.showList__1
                         (GHC.Show.$fShow(,)_$sgo
                            (\ w9 :: GHC.Base.String ->
                             case ww2 of ww5 { (,,,,,,) ww6 ww7 ww8 ww9 ww10 ww11 ww12 ->
                             GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.shows9
                               (let {
                                  a24 :: GHC.Base.String
                                  = GHC.Show.$fShow(,,,,,,)_$sgo
                                      (GHC.Show.$fShowMaybe_$cshowsPrec
                                         @ GrammarType2.Animacy
                                         GrammarType2.$fShowAnimacy
                                         GHC.Show.shows18
                                         ww7)
                                      (GHC.Types.:
                                         @ GHC.Show.ShowS
                                         (GHC.Show.$fShowMaybe_$cshowsPrec
                                            @ GrammarType2.Case
                                            GrammarType2.$fShowCase
                                            GHC.Show.shows18
                                            ww8)
                                         (GHC.Types.:
                                            @ GHC.Show.ShowS
                                            (GHC.Show.$fShowMaybe_$cshowsPrec
                                               @ GrammarType2.Number
                                               GrammarType2.$fShowNumber
                                               GHC.Show.shows18
                                               ww9)
                                            (GHC.Types.:
                                               @ GHC.Show.ShowS
                                               (GHC.Show.$fShowMaybe_$cshowsPrec
                                                  @ GrammarType2.Honorific
                                                  GrammarType2.$fShowHonorific
                                                  GHC.Show.shows18
                                                  ww10)
                                               (GHC.Types.:
                                                  @ GHC.Show.ShowS
                                                  (GHC.Show.$fShowMaybe_$cshowsPrec
                                                     @ GrammarType2.Definiteness
                                                     GrammarType2.$fShowDefiniteness
                                                     GHC.Show.shows18
                                                     ww11)
                                                  (GHC.Types.:
                                                     @ GHC.Show.ShowS
                                                     (GHC.Show.$fShowMaybe_$cshowsPrec
                                                        @ GrammarType2.Specificity
                                                        GrammarType2.$fShowSpecificity
                                                        GHC.Show.shows18
                                                        ww12)
                                                     (GHC.Types.[] @ GHC.Show.ShowS))))))
                                      (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w9)
                                } in
                                case ww6 of wild {
                                  GHC.Base.Nothing
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       GHC.Show.$fShowMaybe3
                                       (GHC.Types.: @ GHC.Types.Char GHC.Show.showList__1 a24)
                                  GHC.Base.Just b1
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       GHC.Show.$fShowMaybe1
                                       (GrammarType2.$w$cshowsPrec3
                                          b1
                                          (GHC.Types.:
                                             @ GHC.Types.Char
                                             GHC.Show.showList__1
                                             a24)) }) })
                            (GHC.Types.[] @ GHC.Show.ShowS)
                            (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w4))) }) }) -}
6ab535947967da820d4fcc5c4a2044ec
  $fShowExponentSystem3 ::
    (PhonemeType2.Morpheme,
     (GHC.Base.Maybe GrammarType2.Gender,
      GHC.Base.Maybe GrammarType2.Animacy,
      GHC.Base.Maybe GrammarType2.Case,
      GHC.Base.Maybe GrammarType2.Number,
      GHC.Base.Maybe GrammarType2.Honorific,
      GHC.Base.Maybe GrammarType2.Definiteness,
      GHC.Base.Maybe GrammarType2.Specificity))
    -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ w3 :: (PhonemeType2.Morpheme,
                          (GHC.Base.Maybe GrammarType2.Gender,
                           GHC.Base.Maybe GrammarType2.Animacy,
                           GHC.Base.Maybe GrammarType2.Case,
                           GHC.Base.Maybe GrammarType2.Number,
                           GHC.Base.Maybe GrammarType2.Honorific,
                           GHC.Base.Maybe GrammarType2.Definiteness,
                           GHC.Base.Maybe GrammarType2.Specificity))
                   w4 :: GHC.Base.String[OneShot] ->
                 case w3 of ww { (,) ww1 ww2 ->
                 GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows9
                   (case ww1 of ww4 { PhonemeType2.Morpheme ww3 ->
                    PhonemeType2.$w$cshowsPrec4
                      0
                      ww3
                      (GHC.Types.:
                         @ GHC.Types.Char
                         GHC.Show.showList__1
                         (GHC.Show.$fShow(,)_$sgo
                            (\ w9 :: GHC.Base.String ->
                             case ww2 of ww5 { (,,,,,,) ww6 ww7 ww8 ww9 ww10 ww11 ww12 ->
                             GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.shows9
                               (let {
                                  a24 :: GHC.Base.String
                                  = GHC.Show.$fShow(,,,,,,)_$sgo
                                      (GHC.Show.$fShowMaybe_$cshowsPrec
                                         @ GrammarType2.Animacy
                                         GrammarType2.$fShowAnimacy
                                         GHC.Show.shows18
                                         ww7)
                                      (GHC.Types.:
                                         @ GHC.Show.ShowS
                                         (GHC.Show.$fShowMaybe_$cshowsPrec
                                            @ GrammarType2.Case
                                            GrammarType2.$fShowCase
                                            GHC.Show.shows18
                                            ww8)
                                         (GHC.Types.:
                                            @ GHC.Show.ShowS
                                            (GHC.Show.$fShowMaybe_$cshowsPrec
                                               @ GrammarType2.Number
                                               GrammarType2.$fShowNumber
                                               GHC.Show.shows18
                                               ww9)
                                            (GHC.Types.:
                                               @ GHC.Show.ShowS
                                               (GHC.Show.$fShowMaybe_$cshowsPrec
                                                  @ GrammarType2.Honorific
                                                  GrammarType2.$fShowHonorific
                                                  GHC.Show.shows18
                                                  ww10)
                                               (GHC.Types.:
                                                  @ GHC.Show.ShowS
                                                  (GHC.Show.$fShowMaybe_$cshowsPrec
                                                     @ GrammarType2.Definiteness
                                                     GrammarType2.$fShowDefiniteness
                                                     GHC.Show.shows18
                                                     ww11)
                                                  (GHC.Types.:
                                                     @ GHC.Show.ShowS
                                                     (GHC.Show.$fShowMaybe_$cshowsPrec
                                                        @ GrammarType2.Specificity
                                                        GrammarType2.$fShowSpecificity
                                                        GHC.Show.shows18
                                                        ww12)
                                                     (GHC.Types.[] @ GHC.Show.ShowS))))))
                                      (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w9)
                                } in
                                case ww6 of wild {
                                  GHC.Base.Nothing
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       GHC.Show.$fShowMaybe3
                                       (GHC.Types.: @ GHC.Types.Char GHC.Show.showList__1 a24)
                                  GHC.Base.Just b1
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       GHC.Show.$fShowMaybe1
                                       (GrammarType2.$w$cshowsPrec3
                                          b1
                                          (GHC.Types.:
                                             @ GHC.Types.Char
                                             GHC.Show.showList__1
                                             a24)) }) })
                            (GHC.Types.[] @ GHC.Show.ShowS)
                            (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w4))) }) }) -}
821bddb0e0088560e947784dfa744e69
  $fShowExponentSystem4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ExponentSystem "#) -}
86f7cb5b41194cecde3376f606e1122e
  $fShowExponentSystem5 ::
    (PhonemeType2.Morpheme,
     (GHC.Base.Maybe GrammarType2.Gender,
      GHC.Base.Maybe GrammarType2.Animacy,
      GHC.Base.Maybe GrammarType2.Case,
      GHC.Base.Maybe GrammarType2.Number,
      GHC.Base.Maybe GrammarType2.Honorific,
      GHC.Base.Maybe GrammarType2.Definiteness,
      GHC.Base.Maybe GrammarType2.Specificity))
    -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ w3 :: (PhonemeType2.Morpheme,
                          (GHC.Base.Maybe GrammarType2.Gender,
                           GHC.Base.Maybe GrammarType2.Animacy,
                           GHC.Base.Maybe GrammarType2.Case,
                           GHC.Base.Maybe GrammarType2.Number,
                           GHC.Base.Maybe GrammarType2.Honorific,
                           GHC.Base.Maybe GrammarType2.Definiteness,
                           GHC.Base.Maybe GrammarType2.Specificity))
                   w4 :: GHC.Base.String[OneShot] ->
                 case w3 of ww { (,) ww1 ww2 ->
                 GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows9
                   (case ww1 of ww4 { PhonemeType2.Morpheme ww3 ->
                    PhonemeType2.$w$cshowsPrec4
                      0
                      ww3
                      (GHC.Types.:
                         @ GHC.Types.Char
                         GHC.Show.showList__1
                         (GHC.Show.$fShow(,)_$sgo
                            (\ w9 :: GHC.Base.String ->
                             case ww2 of ww5 { (,,,,,,) ww6 ww7 ww8 ww9 ww10 ww11 ww12 ->
                             GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.shows9
                               (let {
                                  a24 :: GHC.Base.String
                                  = GHC.Show.$fShow(,,,,,,)_$sgo
                                      (GHC.Show.$fShowMaybe_$cshowsPrec
                                         @ GrammarType2.Animacy
                                         GrammarType2.$fShowAnimacy
                                         GHC.Show.shows18
                                         ww7)
                                      (GHC.Types.:
                                         @ GHC.Show.ShowS
                                         (GHC.Show.$fShowMaybe_$cshowsPrec
                                            @ GrammarType2.Case
                                            GrammarType2.$fShowCase
                                            GHC.Show.shows18
                                            ww8)
                                         (GHC.Types.:
                                            @ GHC.Show.ShowS
                                            (GHC.Show.$fShowMaybe_$cshowsPrec
                                               @ GrammarType2.Number
                                               GrammarType2.$fShowNumber
                                               GHC.Show.shows18
                                               ww9)
                                            (GHC.Types.:
                                               @ GHC.Show.ShowS
                                               (GHC.Show.$fShowMaybe_$cshowsPrec
                                                  @ GrammarType2.Honorific
                                                  GrammarType2.$fShowHonorific
                                                  GHC.Show.shows18
                                                  ww10)
                                               (GHC.Types.:
                                                  @ GHC.Show.ShowS
                                                  (GHC.Show.$fShowMaybe_$cshowsPrec
                                                     @ GrammarType2.Definiteness
                                                     GrammarType2.$fShowDefiniteness
                                                     GHC.Show.shows18
                                                     ww11)
                                                  (GHC.Types.:
                                                     @ GHC.Show.ShowS
                                                     (GHC.Show.$fShowMaybe_$cshowsPrec
                                                        @ GrammarType2.Specificity
                                                        GrammarType2.$fShowSpecificity
                                                        GHC.Show.shows18
                                                        ww12)
                                                     (GHC.Types.[] @ GHC.Show.ShowS))))))
                                      (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w9)
                                } in
                                case ww6 of wild {
                                  GHC.Base.Nothing
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       GHC.Show.$fShowMaybe3
                                       (GHC.Types.: @ GHC.Types.Char GHC.Show.showList__1 a24)
                                  GHC.Base.Just b1
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       GHC.Show.$fShowMaybe1
                                       (GrammarType2.$w$cshowsPrec3
                                          b1
                                          (GHC.Types.:
                                             @ GHC.Types.Char
                                             GHC.Show.showList__1
                                             a24)) }) })
                            (GHC.Types.[] @ GHC.Show.ShowS)
                            (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w4))) }) }) -}
83b76b7eefbf738909a19bb1d1eb6a84
  $fShowExponentSystem_$cshow ::
    GrammarType2.ExponentSystem -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: GrammarType2.ExponentSystem ->
                 case w of ww { GrammarType2.ExponentSystem ww1 ->
                 GrammarType2.$w$cshow1 ww1 }) -}
83b76b7eefbf738909a19bb1d1eb6a84
  $fShowExponentSystem_$cshowList ::
    [GrammarType2.ExponentSystem] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarType2.ExponentSystem
                   GrammarType2.$fShowExponentSystem1) -}
83b76b7eefbf738909a19bb1d1eb6a84
  $fShowExponentSystem_$cshowsPrec ::
    GHC.Types.Int -> GrammarType2.ExponentSystem -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S,1*U(1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int
                   w1 :: GrammarType2.ExponentSystem
                   w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { GrammarType2.ExponentSystem ww3 ->
                 GrammarType2.$w$cshowsPrec6 ww1 ww3 w2 } }) -}
483b53f5081b71881e402c116818b125
  $fShowGender :: GHC.Show.Show GrammarType2.Gender
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Gender
                  GrammarType2.$fShowGender_$cshowsPrec
                  GrammarType2.$fShowGender_$cshow
                  GrammarType2.$fShowGender_$cshowList -}
483b53f5081b71881e402c116818b125
  $fShowGender_$cshow :: GrammarType2.Gender -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarType2.Gender ->
                 GrammarType2.$fShowGender_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
483b53f5081b71881e402c116818b125
  $fShowGender_$cshowList :: [GrammarType2.Gender] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarType2.Gender
                   GrammarType2.$w$cshowsPrec3) -}
483b53f5081b71881e402c116818b125
  $fShowGender_$cshowsPrec ::
    GHC.Types.Int -> GrammarType2.Gender -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: GrammarType2.Gender
                   w2 :: GHC.Base.String ->
                 GrammarType2.$w$cshowsPrec3 w1 w2) -}
56e731ee30b3dfb09e37589f3037fcd9
  $fShowGrammarSystem :: GHC.Show.Show GrammarType2.GrammarSystem
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.GrammarSystem
                  GrammarType2.$fShowGrammarSystem_$cshowsPrec
                  GrammarType2.$fShowGrammarSystem_$cshow
                  GrammarType2.$fShowGrammarSystem_$cshowList -}
56e731ee30b3dfb09e37589f3037fcd9
  $fShowGrammarSystem1 ::
    GrammarType2.GrammarSystem -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: GrammarType2.GrammarSystem
                   w1 :: GHC.Base.String ->
                 case w of ww { GrammarType2.GrammarSystem ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 GrammarType2.$w$cshowsPrec7 0 ww1 ww2 ww3 ww4 ww5 ww6 ww7 w1 }) -}
56e731ee30b3dfb09e37589f3037fcd9
  $fShowGrammarSystem_$cshow ::
    GrammarType2.GrammarSystem -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarType2.GrammarSystem ->
                 GrammarType2.$fShowGrammarSystem_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
56e731ee30b3dfb09e37589f3037fcd9
  $fShowGrammarSystem_$cshowList ::
    [GrammarType2.GrammarSystem] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarType2.GrammarSystem
                   GrammarType2.$fShowGrammarSystem1) -}
56e731ee30b3dfb09e37589f3037fcd9
  $fShowGrammarSystem_$cshowsPrec ::
    GHC.Types.Int -> GrammarType2.GrammarSystem -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <S,1*U(U)><S,1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int
                   w1 :: GrammarType2.GrammarSystem
                   w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { GrammarType2.GrammarSystem ww3 ww4 ww5 ww6 ww7 ww8 ww9 ->
                 GrammarType2.$w$cshowsPrec7
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   w2 } }) -}
f7bc47c734d5bf5ab3e9ea94b2c3ae2f
  $fShowHonorific :: GHC.Show.Show GrammarType2.Honorific
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Honorific
                  GrammarType2.$fShowHonorific_$cshowsPrec
                  GrammarType2.$fShowHonorific_$cshow
                  GrammarType2.$fShowHonorific_$cshowList -}
f7bc47c734d5bf5ab3e9ea94b2c3ae2f
  $fShowHonorific1 :: GrammarType2.Honorific -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarType2.Honorific eta :: GHC.Base.String ->
                 case ds of wild {
                   GrammarType2.FAM
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           GrammarType2.$fReadHonorific11)
                        eta
                   GrammarType2.FORM
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           GrammarType2.$fReadHonorific8)
                        eta }) -}
f7bc47c734d5bf5ab3e9ea94b2c3ae2f
  $fShowHonorific_$cshow :: GrammarType2.Honorific -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarType2.Honorific ->
                 case x of wild {
                   GrammarType2.FAM -> GrammarType2.$fReadHonorific11
                   GrammarType2.FORM -> GrammarType2.$fReadHonorific8 }) -}
f7bc47c734d5bf5ab3e9ea94b2c3ae2f
  $fShowHonorific_$cshowList ::
    [GrammarType2.Honorific] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarType2.Honorific
                   GrammarType2.$fShowHonorific1) -}
f7bc47c734d5bf5ab3e9ea94b2c3ae2f
  $fShowHonorific_$cshowsPrec ::
    GHC.Types.Int -> GrammarType2.Honorific -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   ds1 :: GrammarType2.Honorific
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   GrammarType2.FAM
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           GrammarType2.$fReadHonorific11)
                        eta
                   GrammarType2.FORM
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           GrammarType2.$fReadHonorific8)
                        eta }) -}
972fa0fec8d0708852832bdd0fd96d7e
  $fShowManifest ::
    GHC.Show.Show a => GHC.Show.Show (GrammarType2.Manifest a)
  DFunId[0]
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a24 $dShow :: GHC.Show.Show a24.
                  @ (GrammarType2.Manifest a24)
                  (GrammarType2.$fShowManifest_$cshowsPrec @ a24 $dShow)
                  (GrammarType2.$fShowManifest_$cshow @ a24 $dShow)
                  (GrammarType2.$fShowManifest_$cshowList @ a24 $dShow) -}
d94b1d9b21df20fc27f25560f42ec3fe
  $fShowManifest1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0) -}
8dbd893da7792defe1539adc36a6b755
  $fShowManifest2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Exponent "#) -}
842ef45340de59e9877a8fb5b53da7d0
  $fShowManifest3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Particle "#) -}
f1cef9bf00ac90c507be4866cb57ee46
  $fShowManifest4 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 11) -}
debba161a9a585b5021c6a6a4874b77b
  $fShowManifest5 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   GrammarType2.$fShowManifest6) -}
6dde89e737bb4ecc8f8a0cf0ed48766e
  $fShowManifest6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NoManifest"#) -}
972fa0fec8d0708852832bdd0fd96d7e
  $fShowManifest_$cshow ::
    GHC.Show.Show a => GrammarType2.Manifest a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(1*C1(C1(C1(U))),A,A)><S,1*U>,
     Unfolding: (\ @ a24
                   $dShow :: GHC.Show.Show a24
                   x :: GrammarType2.Manifest a24 ->
                 case x of wild {
                   GrammarType2.NoManifest -> GrammarType2.$fShowManifest6
                   GrammarType2.Particle b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        GrammarType2.$fShowManifest3
                        (GHC.Show.showsPrec
                           @ a24
                           $dShow
                           GrammarType2.$fShowManifest4
                           b1
                           (GHC.Types.[] @ GHC.Types.Char))
                   GrammarType2.Exponent b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        GrammarType2.$fShowManifest2
                        (GHC.Show.showsPrec
                           @ a24
                           $dShow
                           GrammarType2.$fShowManifest4
                           b1
                           (GHC.Types.[] @ GHC.Types.Char)) }) -}
972fa0fec8d0708852832bdd0fd96d7e
  $fShowManifest_$cshowList ::
    GHC.Show.Show a => [GrammarType2.Manifest a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a24
                   $dShow :: GHC.Show.Show a24
                   eta :: [GrammarType2.Manifest a24]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (GrammarType2.Manifest a24)
                   (GrammarType2.$fShowManifest_$cshowsPrec
                      @ a24
                      $dShow
                      GrammarType2.$fShowManifest1)
                   eta
                   eta1) -}
972fa0fec8d0708852832bdd0fd96d7e
  $fShowManifest_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int -> GrammarType2.Manifest a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(U)><S,1*U>,
     Unfolding: (\ @ a24
                   $dShow :: GHC.Show.Show a24
                   ds :: GHC.Types.Int
                   ds1 :: GrammarType2.Manifest a24 ->
                 case ds1 of wild {
                   GrammarType2.NoManifest -> GrammarType2.$fShowManifest5
                   GrammarType2.Particle b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.showsPrec @ a24 $dShow GrammarType2.$fShowManifest4 b1
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> \ x1 :: GHC.Base.String ->
                           GHC.Base.++ @ GHC.Types.Char GrammarType2.$fShowManifest3 (g x1)
                        GHC.Types.True
                        -> \ x1 :: GHC.Base.String ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                GrammarType2.$fShowManifest3
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x1))) } }
                   GrammarType2.Exponent b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.showsPrec @ a24 $dShow GrammarType2.$fShowManifest4 b1
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11) of wild2 {
                        GHC.Types.False
                        -> \ x1 :: GHC.Base.String ->
                           GHC.Base.++ @ GHC.Types.Char GrammarType2.$fShowManifest2 (g x1)
                        GHC.Types.True
                        -> \ x1 :: GHC.Base.String ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                GrammarType2.$fShowManifest2
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x1))) } } }) -}
84741eed8eb56348e0f23e997fe122e2
  $fShowManifest_$s$cshowsPrec ::
    GHC.Types.Int
    -> GrammarType2.Manifest ([GrammarType2.Gender], GHC.Types.Int)
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U> -}
2b3429a4b5db8caf26f4d7cb0beaca5a
  $fShowManifest_$s$cshowsPrec1 ::
    GHC.Types.Int
    -> GrammarType2.Manifest ([GrammarType2.Animacy], GHC.Types.Int)
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U> -}
c82045b72db0554c0fa272d1ebe43742
  $fShowManifest_$s$cshowsPrec2 ::
    GHC.Types.Int
    -> GrammarType2.Manifest ([GrammarType2.Case], GHC.Types.Int)
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U> -}
cc6035716857089e8631f0d6a8981542
  $fShowManifest_$s$cshowsPrec3 ::
    GHC.Types.Int
    -> GrammarType2.Manifest ([GrammarType2.Number], GHC.Types.Int)
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U> -}
8a8be5553e976e183591d8a01d8dfd53
  $fShowManifest_$s$cshowsPrec4 ::
    GHC.Types.Int
    -> GrammarType2.Manifest ([GrammarType2.Honorific], GHC.Types.Int)
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U> -}
54b42eb86d7f9a7de4e10c4b9560ff68
  $fShowManifest_$s$cshowsPrec5 ::
    GHC.Types.Int
    -> GrammarType2.Manifest
         ([GrammarType2.Definiteness], GHC.Types.Int)
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U> -}
3916077e1071f03e8d6c908159d99944
  $fShowManifest_$s$cshowsPrec6 ::
    GHC.Types.Int
    -> GrammarType2.Manifest
         ([GrammarType2.Specificity], GHC.Types.Int)
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U> -}
1e8428cf58353e5e31f8a5e0eb818421
  $fShowMood :: GHC.Show.Show GrammarType2.Mood
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Mood
                  GrammarType2.$fShowMood_$cshowsPrec
                  GrammarType2.$fShowMood_$cshow
                  GrammarType2.$fShowMood_$cshowList -}
1e8428cf58353e5e31f8a5e0eb818421
  $fShowMood_$cshow :: GrammarType2.Mood -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarType2.Mood ->
                 GrammarType2.$fShowMood_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
1e8428cf58353e5e31f8a5e0eb818421
  $fShowMood_$cshowList :: [GrammarType2.Mood] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarType2.Mood
                   GrammarType2.$w$cshowsPrec8) -}
1e8428cf58353e5e31f8a5e0eb818421
  $fShowMood_$cshowsPrec ::
    GHC.Types.Int -> GrammarType2.Mood -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: GrammarType2.Mood
                   w2 :: GHC.Base.String ->
                 GrammarType2.$w$cshowsPrec8 w1 w2) -}
a7c28e97173ad7b983bce4b939a8926c
  $fShowNumber :: GHC.Show.Show GrammarType2.Number
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Number
                  GrammarType2.$fShowNumber_$cshowsPrec
                  GrammarType2.$fShowNumber_$cshow
                  GrammarType2.$fShowNumber_$cshowList -}
a7c28e97173ad7b983bce4b939a8926c
  $fShowNumber_$cshow :: GrammarType2.Number -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarType2.Number ->
                 GrammarType2.$fShowNumber_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
a7c28e97173ad7b983bce4b939a8926c
  $fShowNumber_$cshowList :: [GrammarType2.Number] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarType2.Number
                   GrammarType2.$w$cshowsPrec4) -}
a7c28e97173ad7b983bce4b939a8926c
  $fShowNumber_$cshowsPrec ::
    GHC.Types.Int -> GrammarType2.Number -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: GrammarType2.Number
                   w2 :: GHC.Base.String ->
                 GrammarType2.$w$cshowsPrec4 w1 w2) -}
6982b76146a38d0a5bcfae8adeb790f1
  $fShowParticleSystem :: GHC.Show.Show GrammarType2.ParticleSystem
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.ParticleSystem
                  GrammarType2.$fShowParticleSystem_$cshowsPrec
                  GrammarType2.$fShowParticleSystem_$cshow
                  GrammarType2.$fShowParticleSystem_$cshowList -}
6982b76146a38d0a5bcfae8adeb790f1
  $fShowParticleSystem1 ::
    GrammarType2.ParticleSystem -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: GrammarType2.ParticleSystem
                   w1 :: GHC.Base.String ->
                 case w of ww { GrammarType2.ParticleSystem ww1 ->
                 GrammarType2.$w$cshowsPrec9 0 ww1 w1 }) -}
21c1ae3c9a56a1f7b0a89235a6e8c727
  $fShowParticleSystem2 ::
    (PhonemeType2.Morpheme,
     (GHC.Base.Maybe GrammarType2.Gender,
      GHC.Base.Maybe GrammarType2.Animacy,
      GHC.Base.Maybe GrammarType2.Case,
      GHC.Base.Maybe GrammarType2.Number,
      GHC.Base.Maybe GrammarType2.Honorific,
      GHC.Base.Maybe GrammarType2.Definiteness,
      GHC.Base.Maybe GrammarType2.Specificity))
    -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ w3 :: (PhonemeType2.Morpheme,
                          (GHC.Base.Maybe GrammarType2.Gender,
                           GHC.Base.Maybe GrammarType2.Animacy,
                           GHC.Base.Maybe GrammarType2.Case,
                           GHC.Base.Maybe GrammarType2.Number,
                           GHC.Base.Maybe GrammarType2.Honorific,
                           GHC.Base.Maybe GrammarType2.Definiteness,
                           GHC.Base.Maybe GrammarType2.Specificity))
                   w4 :: GHC.Base.String[OneShot] ->
                 case w3 of ww { (,) ww1 ww2 ->
                 GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows9
                   (case ww1 of ww4 { PhonemeType2.Morpheme ww3 ->
                    PhonemeType2.$w$cshowsPrec4
                      0
                      ww3
                      (GHC.Types.:
                         @ GHC.Types.Char
                         GHC.Show.showList__1
                         (GHC.Show.$fShow(,)_$sgo
                            (\ w9 :: GHC.Base.String ->
                             case ww2 of ww5 { (,,,,,,) ww6 ww7 ww8 ww9 ww10 ww11 ww12 ->
                             GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.shows9
                               (let {
                                  a24 :: GHC.Base.String
                                  = GHC.Show.$fShow(,,,,,,)_$sgo
                                      (GHC.Show.$fShowMaybe_$cshowsPrec
                                         @ GrammarType2.Animacy
                                         GrammarType2.$fShowAnimacy
                                         GHC.Show.shows18
                                         ww7)
                                      (GHC.Types.:
                                         @ GHC.Show.ShowS
                                         (GHC.Show.$fShowMaybe_$cshowsPrec
                                            @ GrammarType2.Case
                                            GrammarType2.$fShowCase
                                            GHC.Show.shows18
                                            ww8)
                                         (GHC.Types.:
                                            @ GHC.Show.ShowS
                                            (GHC.Show.$fShowMaybe_$cshowsPrec
                                               @ GrammarType2.Number
                                               GrammarType2.$fShowNumber
                                               GHC.Show.shows18
                                               ww9)
                                            (GHC.Types.:
                                               @ GHC.Show.ShowS
                                               (GHC.Show.$fShowMaybe_$cshowsPrec
                                                  @ GrammarType2.Honorific
                                                  GrammarType2.$fShowHonorific
                                                  GHC.Show.shows18
                                                  ww10)
                                               (GHC.Types.:
                                                  @ GHC.Show.ShowS
                                                  (GHC.Show.$fShowMaybe_$cshowsPrec
                                                     @ GrammarType2.Definiteness
                                                     GrammarType2.$fShowDefiniteness
                                                     GHC.Show.shows18
                                                     ww11)
                                                  (GHC.Types.:
                                                     @ GHC.Show.ShowS
                                                     (GHC.Show.$fShowMaybe_$cshowsPrec
                                                        @ GrammarType2.Specificity
                                                        GrammarType2.$fShowSpecificity
                                                        GHC.Show.shows18
                                                        ww12)
                                                     (GHC.Types.[] @ GHC.Show.ShowS))))))
                                      (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w9)
                                } in
                                case ww6 of wild {
                                  GHC.Base.Nothing
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       GHC.Show.$fShowMaybe3
                                       (GHC.Types.: @ GHC.Types.Char GHC.Show.showList__1 a24)
                                  GHC.Base.Just b1
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       GHC.Show.$fShowMaybe1
                                       (GrammarType2.$w$cshowsPrec3
                                          b1
                                          (GHC.Types.:
                                             @ GHC.Types.Char
                                             GHC.Show.showList__1
                                             a24)) }) })
                            (GHC.Types.[] @ GHC.Show.ShowS)
                            (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w4))) }) }) -}
ec14984f36f489d066223d3e86522a07
  $fShowParticleSystem3 ::
    (PhonemeType2.Morpheme,
     (GHC.Base.Maybe GrammarType2.Gender,
      GHC.Base.Maybe GrammarType2.Animacy,
      GHC.Base.Maybe GrammarType2.Case,
      GHC.Base.Maybe GrammarType2.Number,
      GHC.Base.Maybe GrammarType2.Honorific,
      GHC.Base.Maybe GrammarType2.Definiteness,
      GHC.Base.Maybe GrammarType2.Specificity))
    -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ w3 :: (PhonemeType2.Morpheme,
                          (GHC.Base.Maybe GrammarType2.Gender,
                           GHC.Base.Maybe GrammarType2.Animacy,
                           GHC.Base.Maybe GrammarType2.Case,
                           GHC.Base.Maybe GrammarType2.Number,
                           GHC.Base.Maybe GrammarType2.Honorific,
                           GHC.Base.Maybe GrammarType2.Definiteness,
                           GHC.Base.Maybe GrammarType2.Specificity))
                   w4 :: GHC.Base.String[OneShot] ->
                 case w3 of ww { (,) ww1 ww2 ->
                 GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows9
                   (case ww1 of ww4 { PhonemeType2.Morpheme ww3 ->
                    PhonemeType2.$w$cshowsPrec4
                      0
                      ww3
                      (GHC.Types.:
                         @ GHC.Types.Char
                         GHC.Show.showList__1
                         (GHC.Show.$fShow(,)_$sgo
                            (\ w9 :: GHC.Base.String ->
                             case ww2 of ww5 { (,,,,,,) ww6 ww7 ww8 ww9 ww10 ww11 ww12 ->
                             GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.shows9
                               (let {
                                  a24 :: GHC.Base.String
                                  = GHC.Show.$fShow(,,,,,,)_$sgo
                                      (GHC.Show.$fShowMaybe_$cshowsPrec
                                         @ GrammarType2.Animacy
                                         GrammarType2.$fShowAnimacy
                                         GHC.Show.shows18
                                         ww7)
                                      (GHC.Types.:
                                         @ GHC.Show.ShowS
                                         (GHC.Show.$fShowMaybe_$cshowsPrec
                                            @ GrammarType2.Case
                                            GrammarType2.$fShowCase
                                            GHC.Show.shows18
                                            ww8)
                                         (GHC.Types.:
                                            @ GHC.Show.ShowS
                                            (GHC.Show.$fShowMaybe_$cshowsPrec
                                               @ GrammarType2.Number
                                               GrammarType2.$fShowNumber
                                               GHC.Show.shows18
                                               ww9)
                                            (GHC.Types.:
                                               @ GHC.Show.ShowS
                                               (GHC.Show.$fShowMaybe_$cshowsPrec
                                                  @ GrammarType2.Honorific
                                                  GrammarType2.$fShowHonorific
                                                  GHC.Show.shows18
                                                  ww10)
                                               (GHC.Types.:
                                                  @ GHC.Show.ShowS
                                                  (GHC.Show.$fShowMaybe_$cshowsPrec
                                                     @ GrammarType2.Definiteness
                                                     GrammarType2.$fShowDefiniteness
                                                     GHC.Show.shows18
                                                     ww11)
                                                  (GHC.Types.:
                                                     @ GHC.Show.ShowS
                                                     (GHC.Show.$fShowMaybe_$cshowsPrec
                                                        @ GrammarType2.Specificity
                                                        GrammarType2.$fShowSpecificity
                                                        GHC.Show.shows18
                                                        ww12)
                                                     (GHC.Types.[] @ GHC.Show.ShowS))))))
                                      (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w9)
                                } in
                                case ww6 of wild {
                                  GHC.Base.Nothing
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       GHC.Show.$fShowMaybe3
                                       (GHC.Types.: @ GHC.Types.Char GHC.Show.showList__1 a24)
                                  GHC.Base.Just b1
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       GHC.Show.$fShowMaybe1
                                       (GrammarType2.$w$cshowsPrec3
                                          b1
                                          (GHC.Types.:
                                             @ GHC.Types.Char
                                             GHC.Show.showList__1
                                             a24)) }) })
                            (GHC.Types.[] @ GHC.Show.ShowS)
                            (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w4))) }) }) -}
b4cb9c2555714a0de8cf36fa85feb8da
  $fShowParticleSystem4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ParticleSystem "#) -}
501fae751381029609f81d2fffc98da6
  $fShowParticleSystem5 ::
    (PhonemeType2.Morpheme,
     (GHC.Base.Maybe GrammarType2.Gender,
      GHC.Base.Maybe GrammarType2.Animacy,
      GHC.Base.Maybe GrammarType2.Case,
      GHC.Base.Maybe GrammarType2.Number,
      GHC.Base.Maybe GrammarType2.Honorific,
      GHC.Base.Maybe GrammarType2.Definiteness,
      GHC.Base.Maybe GrammarType2.Specificity))
    -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ w3 :: (PhonemeType2.Morpheme,
                          (GHC.Base.Maybe GrammarType2.Gender,
                           GHC.Base.Maybe GrammarType2.Animacy,
                           GHC.Base.Maybe GrammarType2.Case,
                           GHC.Base.Maybe GrammarType2.Number,
                           GHC.Base.Maybe GrammarType2.Honorific,
                           GHC.Base.Maybe GrammarType2.Definiteness,
                           GHC.Base.Maybe GrammarType2.Specificity))
                   w4 :: GHC.Base.String[OneShot] ->
                 case w3 of ww { (,) ww1 ww2 ->
                 GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows9
                   (case ww1 of ww4 { PhonemeType2.Morpheme ww3 ->
                    PhonemeType2.$w$cshowsPrec4
                      0
                      ww3
                      (GHC.Types.:
                         @ GHC.Types.Char
                         GHC.Show.showList__1
                         (GHC.Show.$fShow(,)_$sgo
                            (\ w9 :: GHC.Base.String ->
                             case ww2 of ww5 { (,,,,,,) ww6 ww7 ww8 ww9 ww10 ww11 ww12 ->
                             GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.shows9
                               (let {
                                  a24 :: GHC.Base.String
                                  = GHC.Show.$fShow(,,,,,,)_$sgo
                                      (GHC.Show.$fShowMaybe_$cshowsPrec
                                         @ GrammarType2.Animacy
                                         GrammarType2.$fShowAnimacy
                                         GHC.Show.shows18
                                         ww7)
                                      (GHC.Types.:
                                         @ GHC.Show.ShowS
                                         (GHC.Show.$fShowMaybe_$cshowsPrec
                                            @ GrammarType2.Case
                                            GrammarType2.$fShowCase
                                            GHC.Show.shows18
                                            ww8)
                                         (GHC.Types.:
                                            @ GHC.Show.ShowS
                                            (GHC.Show.$fShowMaybe_$cshowsPrec
                                               @ GrammarType2.Number
                                               GrammarType2.$fShowNumber
                                               GHC.Show.shows18
                                               ww9)
                                            (GHC.Types.:
                                               @ GHC.Show.ShowS
                                               (GHC.Show.$fShowMaybe_$cshowsPrec
                                                  @ GrammarType2.Honorific
                                                  GrammarType2.$fShowHonorific
                                                  GHC.Show.shows18
                                                  ww10)
                                               (GHC.Types.:
                                                  @ GHC.Show.ShowS
                                                  (GHC.Show.$fShowMaybe_$cshowsPrec
                                                     @ GrammarType2.Definiteness
                                                     GrammarType2.$fShowDefiniteness
                                                     GHC.Show.shows18
                                                     ww11)
                                                  (GHC.Types.:
                                                     @ GHC.Show.ShowS
                                                     (GHC.Show.$fShowMaybe_$cshowsPrec
                                                        @ GrammarType2.Specificity
                                                        GrammarType2.$fShowSpecificity
                                                        GHC.Show.shows18
                                                        ww12)
                                                     (GHC.Types.[] @ GHC.Show.ShowS))))))
                                      (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w9)
                                } in
                                case ww6 of wild {
                                  GHC.Base.Nothing
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       GHC.Show.$fShowMaybe3
                                       (GHC.Types.: @ GHC.Types.Char GHC.Show.showList__1 a24)
                                  GHC.Base.Just b1
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       GHC.Show.$fShowMaybe1
                                       (GrammarType2.$w$cshowsPrec3
                                          b1
                                          (GHC.Types.:
                                             @ GHC.Types.Char
                                             GHC.Show.showList__1
                                             a24)) }) })
                            (GHC.Types.[] @ GHC.Show.ShowS)
                            (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w4))) }) }) -}
6982b76146a38d0a5bcfae8adeb790f1
  $fShowParticleSystem_$cshow ::
    GrammarType2.ParticleSystem -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: GrammarType2.ParticleSystem ->
                 case w of ww { GrammarType2.ParticleSystem ww1 ->
                 GrammarType2.$w$cshow2 ww1 }) -}
6982b76146a38d0a5bcfae8adeb790f1
  $fShowParticleSystem_$cshowList ::
    [GrammarType2.ParticleSystem] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarType2.ParticleSystem
                   GrammarType2.$fShowParticleSystem1) -}
6982b76146a38d0a5bcfae8adeb790f1
  $fShowParticleSystem_$cshowsPrec ::
    GHC.Types.Int -> GrammarType2.ParticleSystem -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S,1*U(1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int
                   w1 :: GrammarType2.ParticleSystem
                   w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { GrammarType2.ParticleSystem ww3 ->
                 GrammarType2.$w$cshowsPrec9 ww1 ww3 w2 } }) -}
db2825e3cf2c837756c98e763bcc411d
  $fShowPerson :: GHC.Show.Show GrammarType2.Person
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Person
                  GrammarType2.$fShowPerson_$cshowsPrec
                  GrammarType2.$fShowPerson_$cshow
                  GrammarType2.$fShowPerson_$cshowList -}
db2825e3cf2c837756c98e763bcc411d
  $fShowPerson_$cshow :: GrammarType2.Person -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarType2.Person ->
                 case x of wild {
                   GrammarType2.FIRST -> GrammarType2.$fReadPerson15
                   GrammarType2.SECOND -> GrammarType2.$fReadPerson12
                   GrammarType2.THIRD -> GrammarType2.$fReadPerson9 }) -}
db2825e3cf2c837756c98e763bcc411d
  $fShowPerson_$cshowList :: [GrammarType2.Person] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarType2.Person
                   GrammarType2.$w$cshowsPrec10) -}
db2825e3cf2c837756c98e763bcc411d
  $fShowPerson_$cshowsPrec ::
    GHC.Types.Int -> GrammarType2.Person -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: GrammarType2.Person
                   w2 :: GHC.Base.String ->
                 GrammarType2.$w$cshowsPrec10 w1 w2) -}
a812e5c5789e0445882a8629e37b84c0
  $fShowPolarity :: GHC.Show.Show GrammarType2.Polarity
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Polarity
                  GrammarType2.$fShowPolarity_$cshowsPrec
                  GrammarType2.$fShowPolarity_$cshow
                  GrammarType2.$fShowPolarity_$cshowList -}
a812e5c5789e0445882a8629e37b84c0
  $fShowPolarity1 :: GrammarType2.Polarity -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarType2.Polarity eta :: GHC.Base.String ->
                 case ds of wild {
                   GrammarType2.AFF
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           GrammarType2.$fReadPolarity11)
                        eta
                   GrammarType2.NEG
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           GrammarType2.$fReadPolarity8)
                        eta }) -}
a812e5c5789e0445882a8629e37b84c0
  $fShowPolarity_$cshow :: GrammarType2.Polarity -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarType2.Polarity ->
                 case x of wild {
                   GrammarType2.AFF -> GrammarType2.$fReadPolarity11
                   GrammarType2.NEG -> GrammarType2.$fReadPolarity8 }) -}
a812e5c5789e0445882a8629e37b84c0
  $fShowPolarity_$cshowList ::
    [GrammarType2.Polarity] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarType2.Polarity
                   GrammarType2.$fShowPolarity1) -}
a812e5c5789e0445882a8629e37b84c0
  $fShowPolarity_$cshowsPrec ::
    GHC.Types.Int -> GrammarType2.Polarity -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   ds1 :: GrammarType2.Polarity
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   GrammarType2.AFF
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           GrammarType2.$fReadPolarity11)
                        eta
                   GrammarType2.NEG
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           GrammarType2.$fReadPolarity8)
                        eta }) -}
8acc464be69c950c5a5371aa4ffa757d
  $fShowSpecificity :: GHC.Show.Show GrammarType2.Specificity
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Specificity
                  GrammarType2.$fShowSpecificity_$cshowsPrec
                  GrammarType2.$fShowSpecificity_$cshow
                  GrammarType2.$fShowSpecificity_$cshowList -}
8acc464be69c950c5a5371aa4ffa757d
  $fShowSpecificity1 :: GrammarType2.Specificity -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarType2.Specificity eta :: GHC.Base.String ->
                 case ds of wild {
                   GrammarType2.SPEC
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           GrammarType2.$fReadSpecificity11)
                        eta
                   GrammarType2.NSPEC
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           GrammarType2.$fReadSpecificity8)
                        eta }) -}
8acc464be69c950c5a5371aa4ffa757d
  $fShowSpecificity_$cshow ::
    GrammarType2.Specificity -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarType2.Specificity ->
                 case x of wild {
                   GrammarType2.SPEC -> GrammarType2.$fReadSpecificity11
                   GrammarType2.NSPEC -> GrammarType2.$fReadSpecificity8 }) -}
8acc464be69c950c5a5371aa4ffa757d
  $fShowSpecificity_$cshowList ::
    [GrammarType2.Specificity] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarType2.Specificity
                   GrammarType2.$fShowSpecificity1) -}
8acc464be69c950c5a5371aa4ffa757d
  $fShowSpecificity_$cshowsPrec ::
    GHC.Types.Int -> GrammarType2.Specificity -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   ds1 :: GrammarType2.Specificity
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   GrammarType2.SPEC
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           GrammarType2.$fReadSpecificity11)
                        eta
                   GrammarType2.NSPEC
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           GrammarType2.$fReadSpecificity8)
                        eta }) -}
7c0511cad3468eb018d817a1a8934026
  $fShowTense :: GHC.Show.Show GrammarType2.Tense
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Tense
                  GrammarType2.$fShowTense_$cshowsPrec
                  GrammarType2.$fShowTense_$cshow
                  GrammarType2.$fShowTense_$cshowList -}
7c0511cad3468eb018d817a1a8934026
  $fShowTense_$cshow :: GrammarType2.Tense -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarType2.Tense ->
                 GrammarType2.$fShowTense_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
7c0511cad3468eb018d817a1a8934026
  $fShowTense_$cshowList :: [GrammarType2.Tense] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarType2.Tense
                   GrammarType2.$w$cshowsPrec11) -}
7c0511cad3468eb018d817a1a8934026
  $fShowTense_$cshowsPrec ::
    GHC.Types.Int -> GrammarType2.Tense -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: GrammarType2.Tense
                   w2 :: GHC.Base.String ->
                 GrammarType2.$w$cshowsPrec11 w1 w2) -}
5fb21dc71ae46800ab0b386e73c2c62a
  $fShowTransitivity :: GHC.Show.Show GrammarType2.Transitivity
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Transitivity
                  GrammarType2.$fShowTransitivity_$cshowsPrec
                  GrammarType2.$fShowTransitivity_$cshow
                  GrammarType2.$fShowTransitivity_$cshowList -}
5fb21dc71ae46800ab0b386e73c2c62a
  $fShowTransitivity_$cshow ::
    GrammarType2.Transitivity -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarType2.Transitivity ->
                 case x of wild {
                   GrammarType2.INTR -> GrammarType2.$fReadTransitivity15
                   GrammarType2.TR -> GrammarType2.$fReadTransitivity12
                   GrammarType2.DITR -> GrammarType2.$fReadTransitivity9 }) -}
5fb21dc71ae46800ab0b386e73c2c62a
  $fShowTransitivity_$cshowList ::
    [GrammarType2.Transitivity] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarType2.Transitivity
                   GrammarType2.$w$cshowsPrec12) -}
5fb21dc71ae46800ab0b386e73c2c62a
  $fShowTransitivity_$cshowsPrec ::
    GHC.Types.Int -> GrammarType2.Transitivity -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: GrammarType2.Transitivity
                   w2 :: GHC.Base.String ->
                 GrammarType2.$w$cshowsPrec12 w1 w2) -}
12e9be3ba79cdb444f2fb86991189095
  $fShowVoice :: GHC.Show.Show GrammarType2.Voice
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Voice
                  GrammarType2.$fShowVoice_$cshowsPrec
                  GrammarType2.$fShowVoice_$cshow
                  GrammarType2.$fShowVoice_$cshowList -}
12e9be3ba79cdb444f2fb86991189095
  $fShowVoice_$cshow :: GrammarType2.Voice -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarType2.Voice ->
                 case x of wild {
                   GrammarType2.ACT -> GrammarType2.$fReadVoice15
                   GrammarType2.MID -> GrammarType2.$fReadVoice12
                   GrammarType2.PAS -> GrammarType2.$fReadVoice9 }) -}
12e9be3ba79cdb444f2fb86991189095
  $fShowVoice_$cshowList :: [GrammarType2.Voice] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarType2.Voice
                   GrammarType2.$w$cshowsPrec13) -}
12e9be3ba79cdb444f2fb86991189095
  $fShowVoice_$cshowsPrec ::
    GHC.Types.Int -> GrammarType2.Voice -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: GrammarType2.Voice
                   w2 :: GHC.Base.String ->
                 GrammarType2.$w$cshowsPrec13 w1 w2) -}
455e61c4a5fa3c4b414a337c1d019d69
  $fShowVolition :: GHC.Show.Show GrammarType2.Volition
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType2.Volition
                  GrammarType2.$fShowVolition_$cshowsPrec
                  GrammarType2.$fShowVolition_$cshow
                  GrammarType2.$fShowVolition_$cshowList -}
455e61c4a5fa3c4b414a337c1d019d69
  $fShowVolition1 :: GrammarType2.Volition -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarType2.Volition eta :: GHC.Base.String ->
                 case ds of wild {
                   GrammarType2.VOL
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           GrammarType2.$fReadVolition11)
                        eta
                   GrammarType2.NVOL
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           GrammarType2.$fReadVolition8)
                        eta }) -}
455e61c4a5fa3c4b414a337c1d019d69
  $fShowVolition_$cshow :: GrammarType2.Volition -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarType2.Volition ->
                 case x of wild {
                   GrammarType2.VOL -> GrammarType2.$fReadVolition11
                   GrammarType2.NVOL -> GrammarType2.$fReadVolition8 }) -}
455e61c4a5fa3c4b414a337c1d019d69
  $fShowVolition_$cshowList ::
    [GrammarType2.Volition] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarType2.Volition
                   GrammarType2.$fShowVolition1) -}
455e61c4a5fa3c4b414a337c1d019d69
  $fShowVolition_$cshowsPrec ::
    GHC.Types.Int -> GrammarType2.Volition -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   ds1 :: GrammarType2.Volition
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   GrammarType2.VOL
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           GrammarType2.$fReadVolition11)
                        eta
                   GrammarType2.NVOL
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           GrammarType2.$fReadVolition8)
                        eta }) -}
7495886faf110389b0be95c1c3647a9d
  $w$cshow ::
    [(PhonemeType2.Morpheme,
      (GHC.Base.Maybe GrammarType2.Gender,
       GHC.Base.Maybe GrammarType2.Animacy,
       GHC.Base.Maybe GrammarType2.Case,
       GHC.Base.Maybe GrammarType2.Number,
       GHC.Base.Maybe GrammarType2.Honorific,
       GHC.Base.Maybe GrammarType2.Definiteness,
       GHC.Base.Maybe GrammarType2.Specificity))]
    -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>, Inline: [0],
     Unfolding: (\ ww :: [(PhonemeType2.Morpheme,
                           (GHC.Base.Maybe GrammarType2.Gender,
                            GHC.Base.Maybe GrammarType2.Animacy,
                            GHC.Base.Maybe GrammarType2.Case,
                            GHC.Base.Maybe GrammarType2.Number,
                            GHC.Base.Maybe GrammarType2.Honorific,
                            GHC.Base.Maybe GrammarType2.Definiteness,
                            GHC.Base.Maybe GrammarType2.Specificity))] ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   GrammarType2.$fShowDeclension4
                   (GHC.Show.showList__
                      @ (PhonemeType2.Morpheme,
                         (GHC.Base.Maybe GrammarType2.Gender,
                          GHC.Base.Maybe GrammarType2.Animacy,
                          GHC.Base.Maybe GrammarType2.Case,
                          GHC.Base.Maybe GrammarType2.Number,
                          GHC.Base.Maybe GrammarType2.Honorific,
                          GHC.Base.Maybe GrammarType2.Definiteness,
                          GHC.Base.Maybe GrammarType2.Specificity))
                      GrammarType2.$fShowDeclension5
                      ww
                      (GHC.Types.[] @ GHC.Types.Char))) -}
e7a9e5290c0fc74d802d9bece12c72fe
  $w$cshow1 ::
    [(PhonemeType2.Morpheme,
      (GHC.Base.Maybe GrammarType2.Gender,
       GHC.Base.Maybe GrammarType2.Animacy,
       GHC.Base.Maybe GrammarType2.Case,
       GHC.Base.Maybe GrammarType2.Number,
       GHC.Base.Maybe GrammarType2.Honorific,
       GHC.Base.Maybe GrammarType2.Definiteness,
       GHC.Base.Maybe GrammarType2.Specificity))]
    -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>, Inline: [0],
     Unfolding: (\ ww :: [(PhonemeType2.Morpheme,
                           (GHC.Base.Maybe GrammarType2.Gender,
                            GHC.Base.Maybe GrammarType2.Animacy,
                            GHC.Base.Maybe GrammarType2.Case,
                            GHC.Base.Maybe GrammarType2.Number,
                            GHC.Base.Maybe GrammarType2.Honorific,
                            GHC.Base.Maybe GrammarType2.Definiteness,
                            GHC.Base.Maybe GrammarType2.Specificity))] ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   GrammarType2.$fShowExponentSystem4
                   (GHC.Show.showList__
                      @ (PhonemeType2.Morpheme,
                         (GHC.Base.Maybe GrammarType2.Gender,
                          GHC.Base.Maybe GrammarType2.Animacy,
                          GHC.Base.Maybe GrammarType2.Case,
                          GHC.Base.Maybe GrammarType2.Number,
                          GHC.Base.Maybe GrammarType2.Honorific,
                          GHC.Base.Maybe GrammarType2.Definiteness,
                          GHC.Base.Maybe GrammarType2.Specificity))
                      GrammarType2.$fShowExponentSystem5
                      ww
                      (GHC.Types.[] @ GHC.Types.Char))) -}
d094aa1a64e465a21dcbf6ed2a9dc08f
  $w$cshow2 ::
    [(PhonemeType2.Morpheme,
      (GHC.Base.Maybe GrammarType2.Gender,
       GHC.Base.Maybe GrammarType2.Animacy,
       GHC.Base.Maybe GrammarType2.Case,
       GHC.Base.Maybe GrammarType2.Number,
       GHC.Base.Maybe GrammarType2.Honorific,
       GHC.Base.Maybe GrammarType2.Definiteness,
       GHC.Base.Maybe GrammarType2.Specificity))]
    -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>, Inline: [0],
     Unfolding: (\ ww :: [(PhonemeType2.Morpheme,
                           (GHC.Base.Maybe GrammarType2.Gender,
                            GHC.Base.Maybe GrammarType2.Animacy,
                            GHC.Base.Maybe GrammarType2.Case,
                            GHC.Base.Maybe GrammarType2.Number,
                            GHC.Base.Maybe GrammarType2.Honorific,
                            GHC.Base.Maybe GrammarType2.Definiteness,
                            GHC.Base.Maybe GrammarType2.Specificity))] ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   GrammarType2.$fShowParticleSystem4
                   (GHC.Show.showList__
                      @ (PhonemeType2.Morpheme,
                         (GHC.Base.Maybe GrammarType2.Gender,
                          GHC.Base.Maybe GrammarType2.Animacy,
                          GHC.Base.Maybe GrammarType2.Case,
                          GHC.Base.Maybe GrammarType2.Number,
                          GHC.Base.Maybe GrammarType2.Honorific,
                          GHC.Base.Maybe GrammarType2.Definiteness,
                          GHC.Base.Maybe GrammarType2.Specificity))
                      GrammarType2.$fShowParticleSystem5
                      ww
                      (GHC.Types.[] @ GHC.Types.Char))) -}
997f0106cc61a0dae6693b73d4ae044c
  $w$cshowsPrec ::
    GrammarType2.Animacy -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: GrammarType2.Animacy w1 :: GHC.Base.String ->
                 case w of wild {
                   GrammarType2.AN
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadAnimacy23 w1
                   GrammarType2.HUM
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadAnimacy20 w1
                   GrammarType2.NHUM
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadAnimacy17 w1
                   GrammarType2.ZO
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadAnimacy14 w1
                   GrammarType2.INAN
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        GrammarType2.$fReadAnimacy11
                        w1 }) -}
e317df6bd7f01bf53f9bafa3ac506fc7
  $w$cshowsPrec1 ::
    GrammarType2.Case -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: GrammarType2.Case w1 :: GHC.Base.String ->
                 case w of wild {
                   GrammarType2.NOM
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadCase43 w1
                   GrammarType2.ACC
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadCase40 w1
                   GrammarType2.ERG
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadCase37 w1
                   GrammarType2.GEN
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadCase34 w1
                   GrammarType2.DAT
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadCase31 w1
                   GrammarType2.LOC
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadCase28 w1
                   GrammarType2.PREP
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadCase25 w1
                   GrammarType2.ABL
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadCase22 w1
                   GrammarType2.INS
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadCase19 w1
                   GrammarType2.VOC
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadCase16 w1 }) -}
db2825e3cf2c837756c98e763bcc411d
  $w$cshowsPrec10 ::
    GrammarType2.Person -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: GrammarType2.Person w1 :: GHC.Base.String ->
                 case w of wild {
                   GrammarType2.FIRST
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadPerson15 w1
                   GrammarType2.SECOND
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadPerson12 w1
                   GrammarType2.THIRD
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadPerson9 w1 }) -}
7c0511cad3468eb018d817a1a8934026
  $w$cshowsPrec11 ::
    GrammarType2.Tense -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: GrammarType2.Tense w1 :: GHC.Base.String ->
                 case w of wild {
                   GrammarType2.PST
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadTense39 w1
                   GrammarType2.REM
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadTense36 w1
                   GrammarType2.REC
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadTense33 w1
                   GrammarType2.NPST
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadTense30 w1
                   GrammarType2.PRS
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadTense27 w1
                   GrammarType2.NFUT
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadTense24 w1
                   GrammarType2.FUT
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadTense21 w1
                   GrammarType2.IMMF
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadTense18 w1
                   GrammarType2.REMF
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadTense15 w1 }) -}
5fb21dc71ae46800ab0b386e73c2c62a
  $w$cshowsPrec12 ::
    GrammarType2.Transitivity -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: GrammarType2.Transitivity
                   w1 :: GHC.Base.String ->
                 case w of wild {
                   GrammarType2.INTR
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        GrammarType2.$fReadTransitivity15
                        w1
                   GrammarType2.TR
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        GrammarType2.$fReadTransitivity12
                        w1
                   GrammarType2.DITR
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        GrammarType2.$fReadTransitivity9
                        w1 }) -}
12e9be3ba79cdb444f2fb86991189095
  $w$cshowsPrec13 ::
    GrammarType2.Voice -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: GrammarType2.Voice w1 :: GHC.Base.String ->
                 case w of wild {
                   GrammarType2.ACT
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadVoice15 w1
                   GrammarType2.MID
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadVoice12 w1
                   GrammarType2.PAS
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadVoice9 w1 }) -}
5ed696a7eeb3868ca05f522a2d885c06
  $w$cshowsPrec2 ::
    GHC.Prim.Int#
    -> [(PhonemeType2.Morpheme,
         (GHC.Base.Maybe GrammarType2.Gender,
          GHC.Base.Maybe GrammarType2.Animacy,
          GHC.Base.Maybe GrammarType2.Case,
          GHC.Base.Maybe GrammarType2.Number,
          GHC.Base.Maybe GrammarType2.Honorific,
          GHC.Base.Maybe GrammarType2.Definiteness,
          GHC.Base.Maybe GrammarType2.Specificity))]
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: [(PhonemeType2.Morpheme,
                            (GHC.Base.Maybe GrammarType2.Gender,
                             GHC.Base.Maybe GrammarType2.Animacy,
                             GHC.Base.Maybe GrammarType2.Case,
                             GHC.Base.Maybe GrammarType2.Number,
                             GHC.Base.Maybe GrammarType2.Honorific,
                             GHC.Base.Maybe GrammarType2.Definiteness,
                             GHC.Base.Maybe GrammarType2.Specificity))]
                   w :: GHC.Base.String ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        GrammarType2.$fShowDeclension4
                        (GHC.Show.showList__
                           @ (PhonemeType2.Morpheme,
                              (GHC.Base.Maybe GrammarType2.Gender,
                               GHC.Base.Maybe GrammarType2.Animacy,
                               GHC.Base.Maybe GrammarType2.Case,
                               GHC.Base.Maybe GrammarType2.Number,
                               GHC.Base.Maybe GrammarType2.Honorific,
                               GHC.Base.Maybe GrammarType2.Definiteness,
                               GHC.Base.Maybe GrammarType2.Specificity))
                           GrammarType2.$fShowDeclension3
                           ww1
                           w)
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           GrammarType2.$fShowDeclension4
                           (GHC.Show.showList__
                              @ (PhonemeType2.Morpheme,
                                 (GHC.Base.Maybe GrammarType2.Gender,
                                  GHC.Base.Maybe GrammarType2.Animacy,
                                  GHC.Base.Maybe GrammarType2.Case,
                                  GHC.Base.Maybe GrammarType2.Number,
                                  GHC.Base.Maybe GrammarType2.Honorific,
                                  GHC.Base.Maybe GrammarType2.Definiteness,
                                  GHC.Base.Maybe GrammarType2.Specificity))
                              GrammarType2.$fShowDeclension2
                              ww1
                              (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w))) }) -}
483b53f5081b71881e402c116818b125
  $w$cshowsPrec3 ::
    GrammarType2.Gender -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: GrammarType2.Gender w1 :: GHC.Base.String ->
                 case w of wild {
                   GrammarType2.M
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadGender19 w1
                   GrammarType2.F
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadGender16 w1
                   GrammarType2.COM
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadGender13 w1
                   GrammarType2.N
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        GrammarType2.$fReadGender10
                        w1 }) -}
a7c28e97173ad7b983bce4b939a8926c
  $w$cshowsPrec4 ::
    GrammarType2.Number -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: GrammarType2.Number w1 :: GHC.Base.String ->
                 case w of wild {
                   GrammarType2.SG
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadNumber23 w1
                   GrammarType2.DU
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadNumber20 w1
                   GrammarType2.TRI
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadNumber17 w1
                   GrammarType2.PA
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadNumber14 w1
                   GrammarType2.PL
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        GrammarType2.$fReadNumber11
                        w1 }) -}
97680a78ec9508d30ba0411b94ab5395
  $w$cshowsPrec5 ::
    GrammarType2.Evidentiality -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: GrammarType2.Evidentiality
                   w1 :: GHC.Base.String ->
                 case w of wild {
                   GrammarType2.EXP
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        GrammarType2.$fReadEvidentiality43
                        w1
                   GrammarType2.SENS
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        GrammarType2.$fReadEvidentiality40
                        w1
                   GrammarType2.VIS
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        GrammarType2.$fReadEvidentiality37
                        w1
                   GrammarType2.NVIS
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        GrammarType2.$fReadEvidentiality34
                        w1
                   GrammarType2.AUD
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        GrammarType2.$fReadEvidentiality31
                        w1
                   GrammarType2.INFER
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        GrammarType2.$fReadEvidentiality28
                        w1
                   GrammarType2.REP
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        GrammarType2.$fReadEvidentiality25
                        w1
                   GrammarType2.HSY
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        GrammarType2.$fReadEvidentiality22
                        w1
                   GrammarType2.QUO
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        GrammarType2.$fReadEvidentiality19
                        w1
                   GrammarType2.ASS
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        GrammarType2.$fReadEvidentiality16
                        w1 }) -}
9664fee876dab0536f79ce7d027ec708
  $w$cshowsPrec6 ::
    GHC.Prim.Int#
    -> [(PhonemeType2.Morpheme,
         (GHC.Base.Maybe GrammarType2.Gender,
          GHC.Base.Maybe GrammarType2.Animacy,
          GHC.Base.Maybe GrammarType2.Case,
          GHC.Base.Maybe GrammarType2.Number,
          GHC.Base.Maybe GrammarType2.Honorific,
          GHC.Base.Maybe GrammarType2.Definiteness,
          GHC.Base.Maybe GrammarType2.Specificity))]
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: [(PhonemeType2.Morpheme,
                            (GHC.Base.Maybe GrammarType2.Gender,
                             GHC.Base.Maybe GrammarType2.Animacy,
                             GHC.Base.Maybe GrammarType2.Case,
                             GHC.Base.Maybe GrammarType2.Number,
                             GHC.Base.Maybe GrammarType2.Honorific,
                             GHC.Base.Maybe GrammarType2.Definiteness,
                             GHC.Base.Maybe GrammarType2.Specificity))]
                   w :: GHC.Base.String ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        GrammarType2.$fShowExponentSystem4
                        (GHC.Show.showList__
                           @ (PhonemeType2.Morpheme,
                              (GHC.Base.Maybe GrammarType2.Gender,
                               GHC.Base.Maybe GrammarType2.Animacy,
                               GHC.Base.Maybe GrammarType2.Case,
                               GHC.Base.Maybe GrammarType2.Number,
                               GHC.Base.Maybe GrammarType2.Honorific,
                               GHC.Base.Maybe GrammarType2.Definiteness,
                               GHC.Base.Maybe GrammarType2.Specificity))
                           GrammarType2.$fShowExponentSystem3
                           ww1
                           w)
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           GrammarType2.$fShowExponentSystem4
                           (GHC.Show.showList__
                              @ (PhonemeType2.Morpheme,
                                 (GHC.Base.Maybe GrammarType2.Gender,
                                  GHC.Base.Maybe GrammarType2.Animacy,
                                  GHC.Base.Maybe GrammarType2.Case,
                                  GHC.Base.Maybe GrammarType2.Number,
                                  GHC.Base.Maybe GrammarType2.Honorific,
                                  GHC.Base.Maybe GrammarType2.Definiteness,
                                  GHC.Base.Maybe GrammarType2.Specificity))
                              GrammarType2.$fShowExponentSystem2
                              ww1
                              (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w))) }) -}
745e8073eb3908179b83ed5105b4d128
  $w$cshowsPrec7 ::
    GHC.Prim.Int#
    -> GrammarType2.Manifest ([GrammarType2.Gender], GHC.Types.Int)
    -> GrammarType2.Manifest ([GrammarType2.Animacy], GHC.Types.Int)
    -> GrammarType2.Manifest ([GrammarType2.Case], GHC.Types.Int)
    -> GrammarType2.Manifest ([GrammarType2.Number], GHC.Types.Int)
    -> GrammarType2.Manifest ([GrammarType2.Honorific], GHC.Types.Int)
    -> GrammarType2.Manifest
         ([GrammarType2.Definiteness], GHC.Types.Int)
    -> GrammarType2.Manifest
         ([GrammarType2.Specificity], GHC.Types.Int)
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 9,
     Strictness: <L,U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,U>,
     Inline: [0] -}
1e8428cf58353e5e31f8a5e0eb818421
  $w$cshowsPrec8 ::
    GrammarType2.Mood -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: GrammarType2.Mood w1 :: GHC.Base.String ->
                 case w of wild {
                   GrammarType2.IND
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadMood43 w1
                   GrammarType2.IRR
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadMood40 w1
                   GrammarType2.DEO
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadMood37 w1
                   GrammarType2.IMP
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadMood34 w1
                   GrammarType2.JUS
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadMood31 w1
                   GrammarType2.OPT
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadMood28 w1
                   GrammarType2.EPIS
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadMood25 w1
                   GrammarType2.SBJV
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadMood22 w1
                   GrammarType2.POT
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadMood19 w1
                   GrammarType2.COND
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType2.$fReadMood16 w1 }) -}
50daf2530d6134c2886d8a5333063e27
  $w$cshowsPrec9 ::
    GHC.Prim.Int#
    -> [(PhonemeType2.Morpheme,
         (GHC.Base.Maybe GrammarType2.Gender,
          GHC.Base.Maybe GrammarType2.Animacy,
          GHC.Base.Maybe GrammarType2.Case,
          GHC.Base.Maybe GrammarType2.Number,
          GHC.Base.Maybe GrammarType2.Honorific,
          GHC.Base.Maybe GrammarType2.Definiteness,
          GHC.Base.Maybe GrammarType2.Specificity))]
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: [(PhonemeType2.Morpheme,
                            (GHC.Base.Maybe GrammarType2.Gender,
                             GHC.Base.Maybe GrammarType2.Animacy,
                             GHC.Base.Maybe GrammarType2.Case,
                             GHC.Base.Maybe GrammarType2.Number,
                             GHC.Base.Maybe GrammarType2.Honorific,
                             GHC.Base.Maybe GrammarType2.Definiteness,
                             GHC.Base.Maybe GrammarType2.Specificity))]
                   w :: GHC.Base.String ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        GrammarType2.$fShowParticleSystem4
                        (GHC.Show.showList__
                           @ (PhonemeType2.Morpheme,
                              (GHC.Base.Maybe GrammarType2.Gender,
                               GHC.Base.Maybe GrammarType2.Animacy,
                               GHC.Base.Maybe GrammarType2.Case,
                               GHC.Base.Maybe GrammarType2.Number,
                               GHC.Base.Maybe GrammarType2.Honorific,
                               GHC.Base.Maybe GrammarType2.Definiteness,
                               GHC.Base.Maybe GrammarType2.Specificity))
                           GrammarType2.$fShowParticleSystem3
                           ww1
                           w)
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           GrammarType2.$fShowParticleSystem4
                           (GHC.Show.showList__
                              @ (PhonemeType2.Morpheme,
                                 (GHC.Base.Maybe GrammarType2.Gender,
                                  GHC.Base.Maybe GrammarType2.Animacy,
                                  GHC.Base.Maybe GrammarType2.Case,
                                  GHC.Base.Maybe GrammarType2.Number,
                                  GHC.Base.Maybe GrammarType2.Honorific,
                                  GHC.Base.Maybe GrammarType2.Definiteness,
                                  GHC.Base.Maybe GrammarType2.Specificity))
                              GrammarType2.$fShowParticleSystem2
                              ww1
                              (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w))) }) -}
83b76b7eefbf738909a19bb1d1eb6a84
  $wa ::
    GHC.Prim.Int#
    -> forall b.
       (GrammarType2.ExponentSystem -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   @ b
                   w :: GrammarType2.ExponentSystem
                        -> Text.ParserCombinators.ReadP.P b ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 10) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> let {
                        lvl130 :: Text.ParserCombinators.ReadP.P b
                        = let {
                            lvl131 :: Text.ParserCombinators.ReadP.P b
                            = GHC.Read.$wa
                                @ (PhonemeType2.Morpheme,
                                   (GHC.Base.Maybe GrammarType2.Gender,
                                    GHC.Base.Maybe GrammarType2.Animacy,
                                    GHC.Base.Maybe GrammarType2.Case,
                                    GHC.Base.Maybe GrammarType2.Number,
                                    GHC.Base.Maybe GrammarType2.Honorific,
                                    GHC.Base.Maybe GrammarType2.Definiteness,
                                    GHC.Base.Maybe GrammarType2.Specificity))
                                GrammarType2.$fReadExponentSystem5
                                  `cast`
                                (Trans
                                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                    <(PhonemeType2.Morpheme,
                                                      (GHC.Base.Maybe GrammarType2.Gender,
                                                       GHC.Base.Maybe GrammarType2.Animacy,
                                                       GHC.Base.Maybe GrammarType2.Case,
                                                       GHC.Base.Maybe GrammarType2.Number,
                                                       GHC.Base.Maybe GrammarType2.Honorific,
                                                       GHC.Base.Maybe GrammarType2.Definiteness,
                                                       GHC.Base.Maybe
                                                         GrammarType2.Specificity))>_R))
                                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                               <(PhonemeType2.Morpheme,
                                                 (GHC.Base.Maybe GrammarType2.Gender,
                                                  GHC.Base.Maybe GrammarType2.Animacy,
                                                  GHC.Base.Maybe GrammarType2.Case,
                                                  GHC.Base.Maybe GrammarType2.Number,
                                                  GHC.Base.Maybe GrammarType2.Honorific,
                                                  GHC.Base.Maybe GrammarType2.Definiteness,
                                                  GHC.Base.Maybe GrammarType2.Specificity))>_R)))
                                @ b
                                (\ a24 :: [(PhonemeType2.Morpheme,
                                            (GHC.Base.Maybe GrammarType2.Gender,
                                             GHC.Base.Maybe GrammarType2.Animacy,
                                             GHC.Base.Maybe GrammarType2.Case,
                                             GHC.Base.Maybe GrammarType2.Number,
                                             GHC.Base.Maybe GrammarType2.Honorific,
                                             GHC.Base.Maybe GrammarType2.Definiteness,
                                             GHC.Base.Maybe GrammarType2.Specificity))] ->
                                 w (GrammarType2.ExponentSystem a24))
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ a98 :: Text.Read.Lex.Lexeme ->
                             case a98 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a24
                               -> case GHC.Base.eqString
                                         a24
                                         GrammarType2.$fReadExponentSystem4 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl131 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                             Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl130) -}
                        = \ w2 :: () -> lvl130
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ a98 :: GHC.Base.String ->
                         (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                           `cast`
                         (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                           @ b
                           k) }) -}
6982b76146a38d0a5bcfae8adeb790f1
  $wa1 ::
    GHC.Prim.Int#
    -> forall b.
       (GrammarType2.ParticleSystem -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,C(U)>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   @ b
                   w :: GrammarType2.ParticleSystem
                        -> Text.ParserCombinators.ReadP.P b ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 10) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> let {
                        lvl130 :: Text.ParserCombinators.ReadP.P b
                        = let {
                            lvl131 :: Text.ParserCombinators.ReadP.P b
                            = GHC.Read.$wa
                                @ (PhonemeType2.Morpheme,
                                   (GHC.Base.Maybe GrammarType2.Gender,
                                    GHC.Base.Maybe GrammarType2.Animacy,
                                    GHC.Base.Maybe GrammarType2.Case,
                                    GHC.Base.Maybe GrammarType2.Number,
                                    GHC.Base.Maybe GrammarType2.Honorific,
                                    GHC.Base.Maybe GrammarType2.Definiteness,
                                    GHC.Base.Maybe GrammarType2.Specificity))
                                GrammarType2.$fReadExponentSystem5
                                  `cast`
                                (Trans
                                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                                    <(PhonemeType2.Morpheme,
                                                      (GHC.Base.Maybe GrammarType2.Gender,
                                                       GHC.Base.Maybe GrammarType2.Animacy,
                                                       GHC.Base.Maybe GrammarType2.Case,
                                                       GHC.Base.Maybe GrammarType2.Number,
                                                       GHC.Base.Maybe GrammarType2.Honorific,
                                                       GHC.Base.Maybe GrammarType2.Definiteness,
                                                       GHC.Base.Maybe
                                                         GrammarType2.Specificity))>_R))
                                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                               <(PhonemeType2.Morpheme,
                                                 (GHC.Base.Maybe GrammarType2.Gender,
                                                  GHC.Base.Maybe GrammarType2.Animacy,
                                                  GHC.Base.Maybe GrammarType2.Case,
                                                  GHC.Base.Maybe GrammarType2.Number,
                                                  GHC.Base.Maybe GrammarType2.Honorific,
                                                  GHC.Base.Maybe GrammarType2.Definiteness,
                                                  GHC.Base.Maybe GrammarType2.Specificity))>_R)))
                                @ b
                                (\ a24 :: [(PhonemeType2.Morpheme,
                                            (GHC.Base.Maybe GrammarType2.Gender,
                                             GHC.Base.Maybe GrammarType2.Animacy,
                                             GHC.Base.Maybe GrammarType2.Case,
                                             GHC.Base.Maybe GrammarType2.Number,
                                             GHC.Base.Maybe GrammarType2.Honorific,
                                             GHC.Base.Maybe GrammarType2.Definiteness,
                                             GHC.Base.Maybe GrammarType2.Specificity))] ->
                                 w (GrammarType2.ParticleSystem a24))
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ a98 :: Text.Read.Lex.Lexeme ->
                             case a98 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a24
                               -> case GHC.Base.eqString
                                         a24
                                         GrammarType2.$fReadParticleSystem4 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl131 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                             Unfolding: InlineRule (1, True, True) (\ w2 :: () -> lvl130) -}
                        = \ w2 :: () -> lvl130
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ a98 :: GHC.Base.String ->
                         (Text.ParserCombinators.ReadP.skipSpaces_skip a98)
                           `cast`
                         (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <()>_R)
                           @ b
                           k) }) -}
997f0106cc61a0dae6693b73d4ae044c
  data Animacy = AN | HUM | NHUM | ZO | INAN
    Promotable
d544c1f4b832edd20ebb4e3b0f6dfe57
  data Aspect = PFV | IPFV
    Promotable
e317df6bd7f01bf53f9bafa3ac506fc7
  data Case
    = NOM | ACC | ERG | GEN | DAT | LOC | PREP | ABL | INS | VOC
    Promotable
f0310ab24a9e46c14bec03bb33755d4f
  data Declension
    = Declension [(PhonemeType2.Morpheme,
                   (GHC.Base.Maybe GrammarType2.Gender,
                    GHC.Base.Maybe GrammarType2.Animacy,
                    GHC.Base.Maybe GrammarType2.Case,
                    GHC.Base.Maybe GrammarType2.Number,
                    GHC.Base.Maybe GrammarType2.Honorific,
                    GHC.Base.Maybe GrammarType2.Definiteness,
                    GHC.Base.Maybe GrammarType2.Specificity))]
2a24341dc728cf3214c312c2683a2f7a
  data Definiteness = DEF | INDF
    Promotable
97680a78ec9508d30ba0411b94ab5395
  data Evidentiality
    = EXP | SENS | VIS | NVIS | AUD | INFER | REP | HSY | QUO | ASS
    Promotable
83b76b7eefbf738909a19bb1d1eb6a84
  data ExponentSystem
    = ExponentSystem [(PhonemeType2.Morpheme,
                       (GHC.Base.Maybe GrammarType2.Gender,
                        GHC.Base.Maybe GrammarType2.Animacy,
                        GHC.Base.Maybe GrammarType2.Case,
                        GHC.Base.Maybe GrammarType2.Number,
                        GHC.Base.Maybe GrammarType2.Honorific,
                        GHC.Base.Maybe GrammarType2.Definiteness,
                        GHC.Base.Maybe GrammarType2.Specificity))]
483b53f5081b71881e402c116818b125
  data Gender = M | F | COM | N
    Promotable
56e731ee30b3dfb09e37589f3037fcd9
  data GrammarSystem
    = GrammarSystem {gSys :: GrammarType2.Manifest
                               ([GrammarType2.Gender], GHC.Types.Int),
                     aSys :: GrammarType2.Manifest
                               ([GrammarType2.Animacy], GHC.Types.Int),
                     cSys :: GrammarType2.Manifest ([GrammarType2.Case], GHC.Types.Int),
                     nSys :: GrammarType2.Manifest
                               ([GrammarType2.Number], GHC.Types.Int),
                     hSys :: GrammarType2.Manifest
                               ([GrammarType2.Honorific], GHC.Types.Int),
                     dSys :: GrammarType2.Manifest
                               ([GrammarType2.Definiteness], GHC.Types.Int),
                     sSys :: GrammarType2.Manifest
                               ([GrammarType2.Specificity], GHC.Types.Int)}
f7bc47c734d5bf5ab3e9ea94b2c3ae2f
  data Honorific = FAM | FORM
    Promotable
972fa0fec8d0708852832bdd0fd96d7e
  data Manifest a = NoManifest | Particle a | Exponent a
    Promotable
1e8428cf58353e5e31f8a5e0eb818421
  data Mood
    = IND | IRR | DEO | IMP | JUS | OPT | EPIS | SBJV | POT | COND
    Promotable
a7c28e97173ad7b983bce4b939a8926c
  data Number = SG | DU | TRI | PA | PL
    Promotable
6982b76146a38d0a5bcfae8adeb790f1
  data ParticleSystem
    = ParticleSystem [(PhonemeType2.Morpheme,
                       (GHC.Base.Maybe GrammarType2.Gender,
                        GHC.Base.Maybe GrammarType2.Animacy,
                        GHC.Base.Maybe GrammarType2.Case,
                        GHC.Base.Maybe GrammarType2.Number,
                        GHC.Base.Maybe GrammarType2.Honorific,
                        GHC.Base.Maybe GrammarType2.Definiteness,
                        GHC.Base.Maybe GrammarType2.Specificity))]
db2825e3cf2c837756c98e763bcc411d
  data Person = FIRST | SECOND | THIRD
    Promotable
a812e5c5789e0445882a8629e37b84c0
  data Polarity = AFF | NEG
    Promotable
8acc464be69c950c5a5371aa4ffa757d
  data Specificity = SPEC | NSPEC
    Promotable
7c0511cad3468eb018d817a1a8934026
  data Tense
    = PST | REM | REC | NPST | PRS | NFUT | FUT | IMMF | REMF
    Promotable
5fb21dc71ae46800ab0b386e73c2c62a
  data Transitivity = INTR | TR | DITR
    Promotable
12e9be3ba79cdb444f2fb86991189095
  data Voice = ACT | MID | PAS
    Promotable
455e61c4a5fa3c4b414a337c1d019d69
  data Volition = VOL | NVOL
    Promotable
779e92ccd97a7898dde6e429ef287d9e
  aSys ::
    GrammarType2.GrammarSystem
    -> GrammarType2.Manifest ([GrammarType2.Animacy], GHC.Types.Int)
  RecSel GrammarType2.GrammarSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLLL),1*U(A,1*U,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarType2.GrammarSystem ->
                 case ds of wild { GrammarType2.GrammarSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds2 }) -}
acad02f82189be9b440ef9a73a751ad1
  cSys ::
    GrammarType2.GrammarSystem
    -> GrammarType2.Manifest ([GrammarType2.Case], GHC.Types.Int)
  RecSel GrammarType2.GrammarSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLLL),1*U(A,A,1*U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarType2.GrammarSystem ->
                 case ds of wild { GrammarType2.GrammarSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds3 }) -}
826e61eefe0409e4bced9af7c17e74d7
  dSys ::
    GrammarType2.GrammarSystem
    -> GrammarType2.Manifest
         ([GrammarType2.Definiteness], GHC.Types.Int)
  RecSel GrammarType2.GrammarSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLSL),1*U(A,A,A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarType2.GrammarSystem ->
                 case ds of wild { GrammarType2.GrammarSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds6 }) -}
75aaee7a0819db87d1776d5421a5252d
  gSys ::
    GrammarType2.GrammarSystem
    -> GrammarType2.Manifest ([GrammarType2.Gender], GHC.Types.Int)
  RecSel GrammarType2.GrammarSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLLL),1*U(1*U,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarType2.GrammarSystem ->
                 case ds of wild { GrammarType2.GrammarSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds1 }) -}
2b8ad935157a5faa60bd935701648bbf
  hSys ::
    GrammarType2.GrammarSystem
    -> GrammarType2.Manifest ([GrammarType2.Honorific], GHC.Types.Int)
  RecSel GrammarType2.GrammarSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSLL),1*U(A,A,A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarType2.GrammarSystem ->
                 case ds of wild { GrammarType2.GrammarSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds5 }) -}
8ddd717f6fe4e77dd041a08e167da70f
  nSys ::
    GrammarType2.GrammarSystem
    -> GrammarType2.Manifest ([GrammarType2.Number], GHC.Types.Int)
  RecSel GrammarType2.GrammarSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLLL),1*U(A,A,A,1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarType2.GrammarSystem ->
                 case ds of wild { GrammarType2.GrammarSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds4 }) -}
a6358505bc6e4f409818a8519927fd01
  sSys ::
    GrammarType2.GrammarSystem
    -> GrammarType2.Manifest
         ([GrammarType2.Specificity], GHC.Types.Int)
  RecSel GrammarType2.GrammarSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLS),1*U(A,A,A,A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarType2.GrammarSystem ->
                 case ds of wild { GrammarType2.GrammarSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds7 }) -}
instance GHC.Classes.Eq [GrammarType2.Animacy]
  = GrammarType2.$fEqAnimacy
instance GHC.Classes.Eq [GrammarType2.Aspect]
  = GrammarType2.$fEqAspect
instance GHC.Classes.Eq [GrammarType2.Case] = GrammarType2.$fEqCase
instance GHC.Classes.Eq [GrammarType2.Definiteness]
  = GrammarType2.$fEqDefiniteness
instance GHC.Classes.Eq [GrammarType2.Evidentiality]
  = GrammarType2.$fEqEvidentiality
instance GHC.Classes.Eq [GrammarType2.ExponentSystem]
  = GrammarType2.$fEqExponentSystem
instance GHC.Classes.Eq [GrammarType2.Gender]
  = GrammarType2.$fEqGender
instance GHC.Classes.Eq [GrammarType2.Honorific]
  = GrammarType2.$fEqHonorific
instance GHC.Classes.Eq [GrammarType2.Manifest]
  = GrammarType2.$fEqManifest
instance GHC.Classes.Eq [GrammarType2.Mood] = GrammarType2.$fEqMood
instance GHC.Classes.Eq [GrammarType2.Number]
  = GrammarType2.$fEqNumber
instance GHC.Classes.Eq [GrammarType2.ParticleSystem]
  = GrammarType2.$fEqParticleSystem
instance GHC.Classes.Eq [GrammarType2.Person]
  = GrammarType2.$fEqPerson
instance GHC.Classes.Eq [GrammarType2.Polarity]
  = GrammarType2.$fEqPolarity
instance GHC.Classes.Eq [GrammarType2.Specificity]
  = GrammarType2.$fEqSpecificity
instance GHC.Classes.Eq [GrammarType2.Tense]
  = GrammarType2.$fEqTense
instance GHC.Classes.Eq [GrammarType2.Transitivity]
  = GrammarType2.$fEqTransitivity
instance GHC.Classes.Eq [GrammarType2.Voice]
  = GrammarType2.$fEqVoice
instance GHC.Classes.Eq [GrammarType2.Volition]
  = GrammarType2.$fEqVolition
instance GHC.Read.Read [GrammarType2.Animacy]
  = GrammarType2.$fReadAnimacy
instance GHC.Read.Read [GrammarType2.Aspect]
  = GrammarType2.$fReadAspect
instance GHC.Read.Read [GrammarType2.Case]
  = GrammarType2.$fReadCase
instance GHC.Read.Read [GrammarType2.Definiteness]
  = GrammarType2.$fReadDefiniteness
instance GHC.Read.Read [GrammarType2.Evidentiality]
  = GrammarType2.$fReadEvidentiality
instance GHC.Read.Read [GrammarType2.ExponentSystem]
  = GrammarType2.$fReadExponentSystem
instance GHC.Read.Read [GrammarType2.Gender]
  = GrammarType2.$fReadGender
instance GHC.Read.Read [GrammarType2.Honorific]
  = GrammarType2.$fReadHonorific
instance GHC.Read.Read [GrammarType2.Manifest]
  = GrammarType2.$fReadManifest
instance GHC.Read.Read [GrammarType2.Mood]
  = GrammarType2.$fReadMood
instance GHC.Read.Read [GrammarType2.Number]
  = GrammarType2.$fReadNumber
instance GHC.Read.Read [GrammarType2.ParticleSystem]
  = GrammarType2.$fReadParticleSystem
instance GHC.Read.Read [GrammarType2.Person]
  = GrammarType2.$fReadPerson
instance GHC.Read.Read [GrammarType2.Polarity]
  = GrammarType2.$fReadPolarity
instance GHC.Read.Read [GrammarType2.Specificity]
  = GrammarType2.$fReadSpecificity
instance GHC.Read.Read [GrammarType2.Tense]
  = GrammarType2.$fReadTense
instance GHC.Read.Read [GrammarType2.Transitivity]
  = GrammarType2.$fReadTransitivity
instance GHC.Read.Read [GrammarType2.Voice]
  = GrammarType2.$fReadVoice
instance GHC.Read.Read [GrammarType2.Volition]
  = GrammarType2.$fReadVolition
instance GHC.Show.Show [GrammarType2.Animacy]
  = GrammarType2.$fShowAnimacy
instance GHC.Show.Show [GrammarType2.Aspect]
  = GrammarType2.$fShowAspect
instance GHC.Show.Show [GrammarType2.Case]
  = GrammarType2.$fShowCase
instance GHC.Show.Show [GrammarType2.Declension]
  = GrammarType2.$fShowDeclension
instance GHC.Show.Show [GrammarType2.Definiteness]
  = GrammarType2.$fShowDefiniteness
instance GHC.Show.Show [GrammarType2.Evidentiality]
  = GrammarType2.$fShowEvidentiality
instance GHC.Show.Show [GrammarType2.ExponentSystem]
  = GrammarType2.$fShowExponentSystem
instance GHC.Show.Show [GrammarType2.Gender]
  = GrammarType2.$fShowGender
instance GHC.Show.Show [GrammarType2.GrammarSystem]
  = GrammarType2.$fShowGrammarSystem
instance GHC.Show.Show [GrammarType2.Honorific]
  = GrammarType2.$fShowHonorific
instance GHC.Show.Show [GrammarType2.Manifest]
  = GrammarType2.$fShowManifest
instance GHC.Show.Show [GrammarType2.Mood]
  = GrammarType2.$fShowMood
instance GHC.Show.Show [GrammarType2.Number]
  = GrammarType2.$fShowNumber
instance GHC.Show.Show [GrammarType2.ParticleSystem]
  = GrammarType2.$fShowParticleSystem
instance GHC.Show.Show [GrammarType2.Person]
  = GrammarType2.$fShowPerson
instance GHC.Show.Show [GrammarType2.Polarity]
  = GrammarType2.$fShowPolarity
instance GHC.Show.Show [GrammarType2.Specificity]
  = GrammarType2.$fShowSpecificity
instance GHC.Show.Show [GrammarType2.Tense]
  = GrammarType2.$fShowTense
instance GHC.Show.Show [GrammarType2.Transitivity]
  = GrammarType2.$fShowTransitivity
instance GHC.Show.Show [GrammarType2.Voice]
  = GrammarType2.$fShowVoice
instance GHC.Show.Show [GrammarType2.Volition]
  = GrammarType2.$fShowVolition
"SPEC $cshowsPrec @ ([Animacy], Int)" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                  ([GrammarType2.Animacy],
                                                                   GHC.Types.Int)
  GrammarType2.$fShowManifest_$cshowsPrec @ ([GrammarType2.Animacy],
                                             GHC.Types.Int)
                                          $dShow
  = GrammarType2.$fShowManifest_$s$cshowsPrec1
"SPEC $cshowsPrec @ ([Case], Int)" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                               ([GrammarType2.Case], GHC.Types.Int)
  GrammarType2.$fShowManifest_$cshowsPrec @ ([GrammarType2.Case],
                                             GHC.Types.Int)
                                          $dShow
  = GrammarType2.$fShowManifest_$s$cshowsPrec2
"SPEC $cshowsPrec @ ([Definiteness], Int)" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                       ([GrammarType2.Definiteness],
                                                                        GHC.Types.Int)
  GrammarType2.$fShowManifest_$cshowsPrec @ ([GrammarType2.Definiteness],
                                             GHC.Types.Int)
                                          $dShow
  = GrammarType2.$fShowManifest_$s$cshowsPrec5
"SPEC $cshowsPrec @ ([Gender], Int)" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                 ([GrammarType2.Gender],
                                                                  GHC.Types.Int)
  GrammarType2.$fShowManifest_$cshowsPrec @ ([GrammarType2.Gender],
                                             GHC.Types.Int)
                                          $dShow
  = GrammarType2.$fShowManifest_$s$cshowsPrec
"SPEC $cshowsPrec @ ([Honorific], Int)" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                    ([GrammarType2.Honorific],
                                                                     GHC.Types.Int)
  GrammarType2.$fShowManifest_$cshowsPrec @ ([GrammarType2.Honorific],
                                             GHC.Types.Int)
                                          $dShow
  = GrammarType2.$fShowManifest_$s$cshowsPrec4
"SPEC $cshowsPrec @ ([Number], Int)" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                 ([GrammarType2.Number],
                                                                  GHC.Types.Int)
  GrammarType2.$fShowManifest_$cshowsPrec @ ([GrammarType2.Number],
                                             GHC.Types.Int)
                                          $dShow
  = GrammarType2.$fShowManifest_$s$cshowsPrec3
"SPEC $cshowsPrec @ ([Specificity], Int)" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                      ([GrammarType2.Specificity],
                                                                       GHC.Types.Int)
  GrammarType2.$fShowManifest_$cshowsPrec @ ([GrammarType2.Specificity],
                                             GHC.Types.Int)
                                          $dShow
  = GrammarType2.$fShowManifest_$s$cshowsPrec6
"SPEC/GrammarType2 $dmreadsPrec @ Animacy" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                       GrammarType2.Animacy
  GHC.Read.$dmreadsPrec @ GrammarType2.Animacy $dRead
  = GrammarType2.$fReadAnimacy_$s$dmreadsPrec
"SPEC/GrammarType2 $dmreadsPrec @ Aspect" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                      GrammarType2.Aspect
  GHC.Read.$dmreadsPrec @ GrammarType2.Aspect $dRead
  = GrammarType2.$fReadAspect_$s$dmreadsPrec
"SPEC/GrammarType2 $dmreadsPrec @ Case" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                    GrammarType2.Case
  GHC.Read.$dmreadsPrec @ GrammarType2.Case $dRead
  = GrammarType2.$fReadCase_$s$dmreadsPrec
"SPEC/GrammarType2 $dmreadsPrec @ Definiteness" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                            GrammarType2.Definiteness
  GHC.Read.$dmreadsPrec @ GrammarType2.Definiteness $dRead
  = GrammarType2.$fReadDefiniteness_$s$dmreadsPrec
"SPEC/GrammarType2 $dmreadsPrec @ Evidentiality" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                             GrammarType2.Evidentiality
  GHC.Read.$dmreadsPrec @ GrammarType2.Evidentiality $dRead
  = GrammarType2.$fReadEvidentiality_$s$dmreadsPrec
"SPEC/GrammarType2 $dmreadsPrec @ Gender" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                      GrammarType2.Gender
  GHC.Read.$dmreadsPrec @ GrammarType2.Gender $dRead
  = GrammarType2.$fReadGender_$s$dmreadsPrec
"SPEC/GrammarType2 $dmreadsPrec @ Honorific" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                         GrammarType2.Honorific
  GHC.Read.$dmreadsPrec @ GrammarType2.Honorific $dRead
  = GrammarType2.$fReadHonorific_$s$dmreadsPrec
"SPEC/GrammarType2 $dmreadsPrec @ Mood" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                    GrammarType2.Mood
  GHC.Read.$dmreadsPrec @ GrammarType2.Mood $dRead
  = GrammarType2.$fReadMood_$s$dmreadsPrec
"SPEC/GrammarType2 $dmreadsPrec @ Number" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                      GrammarType2.Number
  GHC.Read.$dmreadsPrec @ GrammarType2.Number $dRead
  = GrammarType2.$fReadNumber_$s$dmreadsPrec
"SPEC/GrammarType2 $dmreadsPrec @ Person" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                      GrammarType2.Person
  GHC.Read.$dmreadsPrec @ GrammarType2.Person $dRead
  = GrammarType2.$fReadPerson_$s$dmreadsPrec
"SPEC/GrammarType2 $dmreadsPrec @ Polarity" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                        GrammarType2.Polarity
  GHC.Read.$dmreadsPrec @ GrammarType2.Polarity $dRead
  = GrammarType2.$fReadPolarity_$s$dmreadsPrec
"SPEC/GrammarType2 $dmreadsPrec @ Specificity" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                           GrammarType2.Specificity
  GHC.Read.$dmreadsPrec @ GrammarType2.Specificity $dRead
  = GrammarType2.$fReadSpecificity_$s$dmreadsPrec
"SPEC/GrammarType2 $dmreadsPrec @ Tense" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                     GrammarType2.Tense
  GHC.Read.$dmreadsPrec @ GrammarType2.Tense $dRead
  = GrammarType2.$fReadTense_$s$dmreadsPrec
"SPEC/GrammarType2 $dmreadsPrec @ Transitivity" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                            GrammarType2.Transitivity
  GHC.Read.$dmreadsPrec @ GrammarType2.Transitivity $dRead
  = GrammarType2.$fReadTransitivity_$s$dmreadsPrec
"SPEC/GrammarType2 $dmreadsPrec @ Voice" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                     GrammarType2.Voice
  GHC.Read.$dmreadsPrec @ GrammarType2.Voice $dRead
  = GrammarType2.$fReadVoice_$s$dmreadsPrec
"SPEC/GrammarType2 $dmreadsPrec @ Volition" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                        GrammarType2.Volition
  GHC.Read.$dmreadsPrec @ GrammarType2.Volition $dRead
  = GrammarType2.$fReadVolition_$s$dmreadsPrec
"SPEC/GrammarType2 $fEq(,) @ Morpheme @ (Maybe Gender,
                                        Maybe Animacy,
                                        Maybe Case,
                                        Maybe Number,
                                        Maybe Honorific,
                                        Maybe Definiteness,
                                        Maybe Specificity)" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                                                                                                                                                                                                                                                                                                                                                                                   PhonemeType2.Morpheme
                                                                                                                                                                                                                                                                                                                                                                                                                         $dEq1 :: GHC.Classes.Eq
                                                                                                                                                                                                                                                                                                                                                                                                                                    (GHC.Base.Maybe
                                                                                                                                                                                                                                                                                                                                                                                                                                       GrammarType2.Gender,
                                                                                                                                                                                                                                                                                                                                                                                                                                     GHC.Base.Maybe
                                                                                                                                                                                                                                                                                                                                                                                                                                       GrammarType2.Animacy,
                                                                                                                                                                                                                                                                                                                                                                                                                                     GHC.Base.Maybe
                                                                                                                                                                                                                                                                                                                                                                                                                                       GrammarType2.Case,
                                                                                                                                                                                                                                                                                                                                                                                                                                     GHC.Base.Maybe
                                                                                                                                                                                                                                                                                                                                                                                                                                       GrammarType2.Number,
                                                                                                                                                                                                                                                                                                                                                                                                                                     GHC.Base.Maybe
                                                                                                                                                                                                                                                                                                                                                                                                                                       GrammarType2.Honorific,
                                                                                                                                                                                                                                                                                                                                                                                                                                     GHC.Base.Maybe
                                                                                                                                                                                                                                                                                                                                                                                                                                       GrammarType2.Definiteness,
                                                                                                                                                                                                                                                                                                                                                                                                                                     GHC.Base.Maybe
                                                                                                                                                                                                                                                                                                                                                                                                                                       GrammarType2.Specificity)
  GHC.Classes.$fEq(,) @ PhonemeType2.Morpheme
                      @ (GHC.Base.Maybe GrammarType2.Gender,
                         GHC.Base.Maybe GrammarType2.Animacy,
                         GHC.Base.Maybe GrammarType2.Case,
                         GHC.Base.Maybe GrammarType2.Number,
                         GHC.Base.Maybe GrammarType2.Honorific,
                         GHC.Base.Maybe GrammarType2.Definiteness,
                         GHC.Base.Maybe GrammarType2.Specificity)
                      $dEq
                      $dEq1
  = GrammarType2.$fEqExponentSystem_$s$fEq(,)
"SPEC/GrammarType2 $fEq(,,,,,,) @ (Maybe Gender) @ (Maybe
                                                     Animacy) @ (Maybe Case) @ (Maybe
                                                                                  Number) @ (Maybe
                                                                                               Honorific) @ (Maybe
                                                                                                               Definiteness) @ (Maybe
                                                                                                                                  Specificity)" [ALWAYS] forall $dEq :: GHC.Classes.Eq
ase.Maybe
rammarType2.Gender)
dEq1 :: GHC.Classes.Eq
ase.Maybe
rammarType2.Animacy)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            $dEq2 :: GHC.Classes.Eq
ase.Maybe
rammarType2.Case)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            $dEq3 :: GHC.Classes.Eq
ase.Maybe
rammarType2.Number)
dEq4 :: GHC.Classes.Eq
ase.Maybe
rammarType2.Honorific)
dEq5 :: GHC.Classes.Eq
ase.Maybe
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          GrammarType2.Definiteness)
dEq6 :: GHC.Classes.Eq
ase.Maybe
rammarType2.Specificity)
  GHC.Classes.$fEq(,,,,,,) @ (GHC.Base.Maybe GrammarType2.Gender)
                           @ (GHC.Base.Maybe GrammarType2.Animacy)
                           @ (GHC.Base.Maybe GrammarType2.Case)
                           @ (GHC.Base.Maybe GrammarType2.Number)
                           @ (GHC.Base.Maybe GrammarType2.Honorific)
                           @ (GHC.Base.Maybe GrammarType2.Definiteness)
                           @ (GHC.Base.Maybe GrammarType2.Specificity)
                           $dEq
                           $dEq1
                           $dEq2
                           $dEq3
                           $dEq4
                           $dEq5
                           $dEq6
  = GrammarType2.$fEqExponentSystem_$s$fEq(,,,,,,)
"SPEC/GrammarType2 $fEq(,,,,,,)_$c/= @ (Maybe Gender) @ (Maybe
                                                          Animacy) @ (Maybe Case) @ (Maybe
                                                                                       Number) @ (Maybe
                                                                                                    Honorific) @ (Maybe
                                                                                                                    Definiteness) @ (Maybe
                                                                                                                                       Specificity)" [ALWAYS] forall $dEq :: GHC.Classes.Eq
ase.Maybe
rammarType2.Gender)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          $dEq1 :: GHC.Classes.Eq
ase.Maybe
rammarType2.Animacy)
dEq2 :: GHC.Classes.Eq
ase.Maybe
rammarType2.Case)
dEq3 :: GHC.Classes.Eq
ase.Maybe
rammarType2.Number)
dEq4 :: GHC.Classes.Eq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     (GHC.Base.Maybe
rammarType2.Honorific)
dEq5 :: GHC.Classes.Eq
ase.Maybe
rammarType2.Definiteness)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          $dEq6 :: GHC.Classes.Eq
ase.Maybe
rammarType2.Specificity)
  GHC.Classes.$fEq(,,,,,,)_$c/= @ (GHC.Base.Maybe
                                     GrammarType2.Gender)
                                @ (GHC.Base.Maybe GrammarType2.Animacy)
                                @ (GHC.Base.Maybe GrammarType2.Case)
                                @ (GHC.Base.Maybe GrammarType2.Number)
                                @ (GHC.Base.Maybe GrammarType2.Honorific)
                                @ (GHC.Base.Maybe GrammarType2.Definiteness)
                                @ (GHC.Base.Maybe GrammarType2.Specificity)
                                $dEq
                                $dEq1
                                $dEq2
                                $dEq3
                                $dEq4
                                $dEq5
                                $dEq6
  = GrammarType2.$fEqExponentSystem_$s$fEq(,,,,,,)_$c/=
"SPEC/GrammarType2 $fEqMaybe @ Animacy" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                  GrammarType2.Animacy
  GHC.Base.$fEqMaybe @ GrammarType2.Animacy $dEq
  = GrammarType2.$fEqExponentSystem_$s$fEqMaybe5
"SPEC/GrammarType2 $fEqMaybe @ Case" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                               GrammarType2.Case
  GHC.Base.$fEqMaybe @ GrammarType2.Case $dEq
  = GrammarType2.$fEqExponentSystem_$s$fEqMaybe4
"SPEC/GrammarType2 $fEqMaybe @ Definiteness" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                       GrammarType2.Definiteness
  GHC.Base.$fEqMaybe @ GrammarType2.Definiteness $dEq
  = GrammarType2.$fEqExponentSystem_$s$fEqMaybe1
"SPEC/GrammarType2 $fEqMaybe @ Gender" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                 GrammarType2.Gender
  GHC.Base.$fEqMaybe @ GrammarType2.Gender $dEq
  = GrammarType2.$fEqExponentSystem_$s$fEqMaybe6
"SPEC/GrammarType2 $fEqMaybe @ Honorific" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                    GrammarType2.Honorific
  GHC.Base.$fEqMaybe @ GrammarType2.Honorific $dEq
  = GrammarType2.$fEqExponentSystem_$s$fEqMaybe2
"SPEC/GrammarType2 $fEqMaybe @ Number" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                 GrammarType2.Number
  GHC.Base.$fEqMaybe @ GrammarType2.Number $dEq
  = GrammarType2.$fEqExponentSystem_$s$fEqMaybe3
"SPEC/GrammarType2 $fEqMaybe @ Specificity" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                      GrammarType2.Specificity
  GHC.Base.$fEqMaybe @ GrammarType2.Specificity $dEq
  = GrammarType2.$fEqExponentSystem_$s$fEqMaybe
"SPEC/GrammarType2 $fEqMaybe_$c== @ Animacy" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                       GrammarType2.Animacy
  GHC.Base.$fEqMaybe_$c== @ GrammarType2.Animacy $dEq
  = GrammarType2.$fEqExponentSystem_$s$fEqMaybe_$c==5
"SPEC/GrammarType2 $fEqMaybe_$c== @ Case" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                    GrammarType2.Case
  GHC.Base.$fEqMaybe_$c== @ GrammarType2.Case $dEq
  = GrammarType2.$fEqExponentSystem_$s$fEqMaybe_$c==4
"SPEC/GrammarType2 $fEqMaybe_$c== @ Definiteness" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                            GrammarType2.Definiteness
  GHC.Base.$fEqMaybe_$c== @ GrammarType2.Definiteness $dEq
  = GrammarType2.$fEqExponentSystem_$s$fEqMaybe_$c==1
"SPEC/GrammarType2 $fEqMaybe_$c== @ Gender" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                      GrammarType2.Gender
  GHC.Base.$fEqMaybe_$c== @ GrammarType2.Gender $dEq
  = GrammarType2.$fEqExponentSystem_$s$fEqMaybe_$c==6
"SPEC/GrammarType2 $fEqMaybe_$c== @ Honorific" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                         GrammarType2.Honorific
  GHC.Base.$fEqMaybe_$c== @ GrammarType2.Honorific $dEq
  = GrammarType2.$fEqExponentSystem_$s$fEqMaybe_$c==2
"SPEC/GrammarType2 $fEqMaybe_$c== @ Number" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                      GrammarType2.Number
  GHC.Base.$fEqMaybe_$c== @ GrammarType2.Number $dEq
  = GrammarType2.$fEqExponentSystem_$s$fEqMaybe_$c==3
"SPEC/GrammarType2 $fEqMaybe_$c== @ Specificity" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                           GrammarType2.Specificity
  GHC.Base.$fEqMaybe_$c== @ GrammarType2.Specificity $dEq
  = GrammarType2.$fEqExponentSystem_$s$fEqMaybe_$c==
"SPEC/GrammarType2 $fRead(,,,,,,) @ (Maybe Gender) @ (Maybe
                                                       Animacy) @ (Maybe Case) @ (Maybe
                                                                                    Number) @ (Maybe
                                                                                                 Honorific) @ (Maybe
                                                                                                                 Definiteness) @ (Maybe
                                                                                                                                    Specificity)" [ALWAYS] forall $dRead :: GHC.Read.Read
ase.Maybe
rammarType2.Gender)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        $dRead1 :: GHC.Read.Read
ase.Maybe
rammarType2.Animacy)
dRead2 :: GHC.Read.Read
ase.Maybe
rammarType2.Case)
dRead3 :: GHC.Read.Read
ase.Maybe
rammarType2.Number)
dRead4 :: GHC.Read.Read
ase.Maybe
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        GrammarType2.Honorific)
dRead5 :: GHC.Read.Read
ase.Maybe
rammarType2.Definiteness)
dRead6 :: GHC.Read.Read
ase.Maybe
rammarType2.Specificity)
  GHC.Read.$fRead(,,,,,,) @ (GHC.Base.Maybe GrammarType2.Gender)
                          @ (GHC.Base.Maybe GrammarType2.Animacy)
                          @ (GHC.Base.Maybe GrammarType2.Case)
                          @ (GHC.Base.Maybe GrammarType2.Number)
                          @ (GHC.Base.Maybe GrammarType2.Honorific)
                          @ (GHC.Base.Maybe GrammarType2.Definiteness)
                          @ (GHC.Base.Maybe GrammarType2.Specificity)
                          $dRead
                          $dRead1
                          $dRead2
                          $dRead3
                          $dRead4
                          $dRead5
                          $dRead6
  = GrammarType2.$fReadExponentSystem_$s$fRead(,,,,,,)
"SPEC/GrammarType2 $fRead(,,,,,,)_$creadList @ (Maybe
                                                 Gender) @ (Maybe Animacy) @ (Maybe Case) @ (Maybe
                                                                                               Number) @ (Maybe
                                                                                                            Honorific) @ (Maybe
                                                                                                                            Definiteness) @ (Maybe
                                                                                                                                               Specificity)" [ALWAYS] forall $dRead :: GHC.Read.Read
ase.Maybe
rammarType2.Gender)
dRead1 :: GHC.Read.Read
ase.Maybe
rammarType2.Animacy)
dRead2 :: GHC.Read.Read
ase.Maybe
rammarType2.Case)
dRead3 :: GHC.Read.Read
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      (GHC.Base.Maybe
rammarType2.Number)
dRead4 :: GHC.Read.Read
ase.Maybe
rammarType2.Honorific)
dRead5 :: GHC.Read.Read
ase.Maybe
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         GrammarType2.Definiteness)
dRead6 :: GHC.Read.Read
ase.Maybe
rammarType2.Specificity)
  GHC.Read.$fRead(,,,,,,)_$creadList @ (GHC.Base.Maybe
                                          GrammarType2.Gender)
                                     @ (GHC.Base.Maybe GrammarType2.Animacy)
                                     @ (GHC.Base.Maybe GrammarType2.Case)
                                     @ (GHC.Base.Maybe GrammarType2.Number)
                                     @ (GHC.Base.Maybe GrammarType2.Honorific)
                                     @ (GHC.Base.Maybe GrammarType2.Definiteness)
                                     @ (GHC.Base.Maybe GrammarType2.Specificity)
                                     $dRead
                                     $dRead1
                                     $dRead2
                                     $dRead3
                                     $dRead4
                                     $dRead5
                                     $dRead6
  = GrammarType2.$fReadExponentSystem_$s$fRead(,,,,,,)_$creadList
"SPEC/GrammarType2 $fRead(,,,,,,)_$creadsPrec @ (Maybe
                                                  Gender) @ (Maybe Animacy) @ (Maybe Case) @ (Maybe
                                                                                                Number) @ (Maybe
                                                                                                             Honorific) @ (Maybe
                                                                                                                             Definiteness) @ (Maybe
                                                                                                                                                Specificity)" [ALWAYS] forall $dRead :: GHC.Read.Read
ase.Maybe
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              GrammarType2.Gender)
dRead1 :: GHC.Read.Read
ase.Maybe
rammarType2.Animacy)
dRead2 :: GHC.Read.Read
ase.Maybe
rammarType2.Case)
dRead3 :: GHC.Read.Read
ase.Maybe
rammarType2.Number)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               $dRead4 :: GHC.Read.Read
ase.Maybe
rammarType2.Honorific)
dRead5 :: GHC.Read.Read
ase.Maybe
rammarType2.Definiteness)
dRead6 :: GHC.Read.Read
ase.Maybe
rammarType2.Specificity)
  GHC.Read.$fRead(,,,,,,)_$creadsPrec @ (GHC.Base.Maybe
                                           GrammarType2.Gender)
                                      @ (GHC.Base.Maybe GrammarType2.Animacy)
                                      @ (GHC.Base.Maybe GrammarType2.Case)
                                      @ (GHC.Base.Maybe GrammarType2.Number)
                                      @ (GHC.Base.Maybe GrammarType2.Honorific)
                                      @ (GHC.Base.Maybe GrammarType2.Definiteness)
                                      @ (GHC.Base.Maybe GrammarType2.Specificity)
                                      $dRead
                                      $dRead1
                                      $dRead2
                                      $dRead3
                                      $dRead4
                                      $dRead5
                                      $dRead6
  = GrammarType2.$fReadExponentSystem_$s$fRead(,,,,,,)_$creadsPrec
"SPEC/GrammarType2 $fReadMaybe @ Animacy" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                      GrammarType2.Animacy
  GHC.Read.$fReadMaybe @ GrammarType2.Animacy $dRead
  = GrammarType2.$fReadExponentSystem_$s$fReadMaybe5
"SPEC/GrammarType2 $fReadMaybe @ Case" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                   GrammarType2.Case
  GHC.Read.$fReadMaybe @ GrammarType2.Case $dRead
  = GrammarType2.$fReadExponentSystem_$s$fReadMaybe4
"SPEC/GrammarType2 $fReadMaybe @ Definiteness" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                           GrammarType2.Definiteness
  GHC.Read.$fReadMaybe @ GrammarType2.Definiteness $dRead
  = GrammarType2.$fReadExponentSystem_$s$fReadMaybe1
"SPEC/GrammarType2 $fReadMaybe @ Gender" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                     GrammarType2.Gender
  GHC.Read.$fReadMaybe @ GrammarType2.Gender $dRead
  = GrammarType2.$fReadExponentSystem_$s$fReadMaybe6
"SPEC/GrammarType2 $fReadMaybe @ Honorific" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                        GrammarType2.Honorific
  GHC.Read.$fReadMaybe @ GrammarType2.Honorific $dRead
  = GrammarType2.$fReadExponentSystem_$s$fReadMaybe2
"SPEC/GrammarType2 $fReadMaybe @ Number" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                     GrammarType2.Number
  GHC.Read.$fReadMaybe @ GrammarType2.Number $dRead
  = GrammarType2.$fReadExponentSystem_$s$fReadMaybe3
"SPEC/GrammarType2 $fReadMaybe @ Specificity" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                          GrammarType2.Specificity
  GHC.Read.$fReadMaybe @ GrammarType2.Specificity $dRead
  = GrammarType2.$fReadExponentSystem_$s$fReadMaybe
"SPEC/GrammarType2 $fReadMaybe_$creadList @ Animacy" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                                 GrammarType2.Animacy
  GHC.Read.$fReadMaybe_$creadList @ GrammarType2.Animacy $dRead
  = GrammarType2.$fReadExponentSystem_$s$fReadMaybe_$creadList5
"SPEC/GrammarType2 $fReadMaybe_$creadList @ Case" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                              GrammarType2.Case
  GHC.Read.$fReadMaybe_$creadList @ GrammarType2.Case $dRead
  = GrammarType2.$fReadExponentSystem_$s$fReadMaybe_$creadList4
"SPEC/GrammarType2 $fReadMaybe_$creadList @ Definiteness" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                                      GrammarType2.Definiteness
  GHC.Read.$fReadMaybe_$creadList @ GrammarType2.Definiteness $dRead
  = GrammarType2.$fReadExponentSystem_$s$fReadMaybe_$creadList1
"SPEC/GrammarType2 $fReadMaybe_$creadList @ Gender" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                                GrammarType2.Gender
  GHC.Read.$fReadMaybe_$creadList @ GrammarType2.Gender $dRead
  = GrammarType2.$fReadExponentSystem_$s$fReadMaybe_$creadList6
"SPEC/GrammarType2 $fReadMaybe_$creadList @ Honorific" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                                   GrammarType2.Honorific
  GHC.Read.$fReadMaybe_$creadList @ GrammarType2.Honorific $dRead
  = GrammarType2.$fReadExponentSystem_$s$fReadMaybe_$creadList2
"SPEC/GrammarType2 $fReadMaybe_$creadList @ Number" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                                GrammarType2.Number
  GHC.Read.$fReadMaybe_$creadList @ GrammarType2.Number $dRead
  = GrammarType2.$fReadExponentSystem_$s$fReadMaybe_$creadList3
"SPEC/GrammarType2 $fReadMaybe_$creadList @ Specificity" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                                     GrammarType2.Specificity
  GHC.Read.$fReadMaybe_$creadList @ GrammarType2.Specificity $dRead
  = GrammarType2.$fReadExponentSystem_$s$fReadMaybe_$creadList
"SPEC/GrammarType2 $fReadMaybe_$creadsPrec @ Animacy" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                                  GrammarType2.Animacy
  GHC.Read.$fReadMaybe_$creadsPrec @ GrammarType2.Animacy $dRead
  = GrammarType2.$fReadExponentSystem_$s$fReadMaybe_$creadsPrec5
"SPEC/GrammarType2 $fReadMaybe_$creadsPrec @ Case" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                               GrammarType2.Case
  GHC.Read.$fReadMaybe_$creadsPrec @ GrammarType2.Case $dRead
  = GrammarType2.$fReadExponentSystem_$s$fReadMaybe_$creadsPrec4
"SPEC/GrammarType2 $fReadMaybe_$creadsPrec @ Definiteness" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                                       GrammarType2.Definiteness
  GHC.Read.$fReadMaybe_$creadsPrec @ GrammarType2.Definiteness $dRead
  = GrammarType2.$fReadExponentSystem_$s$fReadMaybe_$creadsPrec1
"SPEC/GrammarType2 $fReadMaybe_$creadsPrec @ Gender" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                                 GrammarType2.Gender
  GHC.Read.$fReadMaybe_$creadsPrec @ GrammarType2.Gender $dRead
  = GrammarType2.$fReadExponentSystem_$s$fReadMaybe_$creadsPrec6
"SPEC/GrammarType2 $fReadMaybe_$creadsPrec @ Honorific" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                                    GrammarType2.Honorific
  GHC.Read.$fReadMaybe_$creadsPrec @ GrammarType2.Honorific $dRead
  = GrammarType2.$fReadExponentSystem_$s$fReadMaybe_$creadsPrec2
"SPEC/GrammarType2 $fReadMaybe_$creadsPrec @ Number" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                                 GrammarType2.Number
  GHC.Read.$fReadMaybe_$creadsPrec @ GrammarType2.Number $dRead
  = GrammarType2.$fReadExponentSystem_$s$fReadMaybe_$creadsPrec3
"SPEC/GrammarType2 $fReadMaybe_$creadsPrec @ Specificity" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                                      GrammarType2.Specificity
  GHC.Read.$fReadMaybe_$creadsPrec @ GrammarType2.Specificity $dRead
  = GrammarType2.$fReadExponentSystem_$s$fReadMaybe_$creadsPrec
"SPEC/GrammarType2 readListDefault @ Animacy" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                          GrammarType2.Animacy
  GHC.Read.readListDefault @ GrammarType2.Animacy $dRead
  = GrammarType2.$fReadAnimacy_$sreadListDefault
"SPEC/GrammarType2 readListDefault @ Aspect" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                         GrammarType2.Aspect
  GHC.Read.readListDefault @ GrammarType2.Aspect $dRead
  = GrammarType2.$fReadAspect_$sreadListDefault
"SPEC/GrammarType2 readListDefault @ Case" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                       GrammarType2.Case
  GHC.Read.readListDefault @ GrammarType2.Case $dRead
  = GrammarType2.$fReadCase_$sreadListDefault
"SPEC/GrammarType2 readListDefault @ Definiteness" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                               GrammarType2.Definiteness
  GHC.Read.readListDefault @ GrammarType2.Definiteness $dRead
  = GrammarType2.$fReadDefiniteness_$sreadListDefault
"SPEC/GrammarType2 readListDefault @ Evidentiality" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                                GrammarType2.Evidentiality
  GHC.Read.readListDefault @ GrammarType2.Evidentiality $dRead
  = GrammarType2.$fReadEvidentiality_$sreadListDefault
"SPEC/GrammarType2 readListDefault @ ExponentSystem" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                                 GrammarType2.ExponentSystem
  GHC.Read.readListDefault @ GrammarType2.ExponentSystem $dRead
  = GrammarType2.$fReadExponentSystem_$sreadListDefault
"SPEC/GrammarType2 readListDefault @ Gender" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                         GrammarType2.Gender
  GHC.Read.readListDefault @ GrammarType2.Gender $dRead
  = GrammarType2.$fReadGender_$sreadListDefault
"SPEC/GrammarType2 readListDefault @ Honorific" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                            GrammarType2.Honorific
  GHC.Read.readListDefault @ GrammarType2.Honorific $dRead
  = GrammarType2.$fReadHonorific_$sreadListDefault
"SPEC/GrammarType2 readListDefault @ Mood" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                       GrammarType2.Mood
  GHC.Read.readListDefault @ GrammarType2.Mood $dRead
  = GrammarType2.$fReadMood_$sreadListDefault
"SPEC/GrammarType2 readListDefault @ Number" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                         GrammarType2.Number
  GHC.Read.readListDefault @ GrammarType2.Number $dRead
  = GrammarType2.$fReadNumber_$sreadListDefault
"SPEC/GrammarType2 readListDefault @ ParticleSystem" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                                 GrammarType2.ParticleSystem
  GHC.Read.readListDefault @ GrammarType2.ParticleSystem $dRead
  = GrammarType2.$fReadParticleSystem_$sreadListDefault
"SPEC/GrammarType2 readListDefault @ Person" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                         GrammarType2.Person
  GHC.Read.readListDefault @ GrammarType2.Person $dRead
  = GrammarType2.$fReadPerson_$sreadListDefault
"SPEC/GrammarType2 readListDefault @ Polarity" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                           GrammarType2.Polarity
  GHC.Read.readListDefault @ GrammarType2.Polarity $dRead
  = GrammarType2.$fReadPolarity_$sreadListDefault
"SPEC/GrammarType2 readListDefault @ Specificity" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                              GrammarType2.Specificity
  GHC.Read.readListDefault @ GrammarType2.Specificity $dRead
  = GrammarType2.$fReadSpecificity_$sreadListDefault
"SPEC/GrammarType2 readListDefault @ Tense" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                        GrammarType2.Tense
  GHC.Read.readListDefault @ GrammarType2.Tense $dRead
  = GrammarType2.$fReadTense_$sreadListDefault
"SPEC/GrammarType2 readListDefault @ Transitivity" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                               GrammarType2.Transitivity
  GHC.Read.readListDefault @ GrammarType2.Transitivity $dRead
  = GrammarType2.$fReadTransitivity_$sreadListDefault
"SPEC/GrammarType2 readListDefault @ Voice" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                        GrammarType2.Voice
  GHC.Read.readListDefault @ GrammarType2.Voice $dRead
  = GrammarType2.$fReadVoice_$sreadListDefault
"SPEC/GrammarType2 readListDefault @ Volition" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                           GrammarType2.Volition
  GHC.Read.readListDefault @ GrammarType2.Volition $dRead
  = GrammarType2.$fReadVolition_$sreadListDefault
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

