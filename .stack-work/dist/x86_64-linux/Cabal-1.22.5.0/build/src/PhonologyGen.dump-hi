
==================== FINAL INTERFACE ====================
2016-09-05 02:25:26.756995 UTC

interface conla_4HxSYcynNloL3TkunNPLrN:PhonologyGen 7103
  interface hash: 0fa82b16ba31240d31989f36964a9b91
  ABI hash: 5532cc446c59a6600a7b28dca34a1685
  export-list hash: 1c69d68f22a90bdc6366cf0acbe3f009
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 962af636f8e927040c7daa9c21457292
  sig of: Nothing
  used TH splices: False
  where
exports:
  PhonologyGen.makeConsonantPhonemeInventory
module dependencies: ConsonantPhoneGen PhonemeType2
package dependencies: MonadPrompt-1.0.0.5@Monad_5vpMHuuRBzi4bKjpRN3A9L
                      MonadRandom-0.4.2.3@Monad_I7tEJH7vOtsKQS7CpG48fz
                      array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA base-4.8.2.0
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59
                      erf-2.0.0.0@erf_6l78BnvLL4b2mWYp3HJJxX
                      flexible-defaults-0.0.1.2@flexi_70LqvhG3vbS8bRvV8pHtMk
                      ghc-prim-0.4.0.0 integer-gmp-1.0.0.0
                      math-functions-0.1.7.0@mathf_BN6S7j0ar3LC4TsnYu0us5
                      mersenne-random-pure64-0.2.0.5@merse_42koSxEhmjwBS69WXi19xI
                      monad-loops-0.4.3@monad_LQiHRUYhFhYBU7nOOWDOrb
                      mtl-2.2.1@mtl_Aue4leSeVkpKLsfHIV51E8
                      mwc-random-0.13.4.0@mwcra_0lrQ1SkkNA85sa8eZ98xQk
                      old-locale-1.0.0.7@oldlo_7h2Gx6mVPJ5Gheca8j9Mpe
                      old-time-1.1.0.3@oldti_JVjJvknZJ0JKghfag2Jw2L
                      pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC
                      primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3
                      random-extras-0.19@rando_11jAc932BDRD7ydjCrRr4L
                      random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW
                      random-1.1@rando_9Kgekc9yEaLHLNUuw6paWL
                      random-shuffle-0.0.4@rando_9kOz9tEn1526ShtWz8x59X
                      random-fu-0.2.7.0@rando_HO0DW1nA2fDCxZJ62mvJHr
                      rvar-0.2.0.3@rvar_HDSuhGFxwNTDX4EfF6w8WG
                      stateref-0.3@state_KptOBHsY85L8YzpDAos2Hi
                      stm-2.4.4.1@stm_EyxFXFfnfY05IrjGaqCxeD
                      syb-0.6@syb_4kccWaTe3QZLxAMQYKgEyE template-haskell-2.10.0.0
                      th-extras-0.0.0.4@thext_LRY1RUMy7ShLl2tqhMyHdO
                      time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn
                      transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF
                      vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln
orphans: MonadRandom-0.4.2.3@Monad_I7tEJH7vOtsKQS7CpG48fz:Control.Monad.Random
         base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         mersenne-random-pure64-0.2.0.5@merse_42koSxEhmjwBS69WXi19xI:System.Random.Mersenne.Pure64
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source.IO
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source.MWC
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source.PureMT
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source.StdGen
         stateref-0.3@state_KptOBHsY85L8YzpDAos2Hi:Data.StateRef.Instances
         stateref-0.3@state_KptOBHsY85L8YzpDAos2Hi:Data.StateRef.Instances.STM
         stm-2.4.4.1@stm_EyxFXFfnfY05IrjGaqCxeD:Control.Monad.STM
         syb-0.6@syb_4kccWaTe3QZLxAMQYKgEyE:Data.Generics.Instances
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Calendar.Gregorian
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Format.Parse
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.LocalTime.LocalTime
         transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.Trans.Error
         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Fusion.Bundle
         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Sequence
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
                         mwc-random-0.13.4.0@mwcra_0lrQ1SkkNA85sa8eZ98xQk:System.Random.MWC
                         pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3:Control.Monad.Primitive
                         template-haskell-2.10.0.0:Language.Haskell.TH.Syntax
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Primitive
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed.Base
import  -/  base-4.8.2.0:Data.Functor 5c701b0af1708f0192a25dfe14ce6274
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  ConsonantPhoneGen 6b0d425be439724ce5f6761da4e00d1c
  exports: 240155e445fa50937ec6a50a88ff37c4
  generateConsonant 1c5ee6c2eeee6a37a698399939ba381a
import  -/  PhonemeType2 c07b384cc0a784e3fee4dcb9db67075c
  exports: 88062b193b82d38245a3a936792746cd
  Consonant f02dffbdbfa6cabc3435ae9fcf1702dc
  ConsonantPhonemeInventory 845581f500c2cdab753c6de29beaecf1
  ConsonantPhonemeInventory 498abb2d3230baf9073ff621a6aaa0e0
import  -/  rvar-0.2.0.3@rvar_HDSuhGFxwNTDX4EfF6w8WG:Data.RVar 9b7fbdb5f1778e76b8a65f45a17cccb1
d5c3965d17c98b4d1ac95eb1cb5d4fb2
  $wmakeConsonantList ::
    GHC.Prim.Int#
    -> Data.RVar.RVar [PhonemeType2.Consonant]
    -> Data.RVar.RVar [PhonemeType2.Consonant]
  {- Arity: 2, Strictness: <S,1*U><L,U>, Inline: [0] -}
fa02728143a45e7dfbb0948d8252040d
  makeConsonantPhonemeInventory ::
    GHC.Types.Int
    -> Data.RVar.RVar PhonemeType2.ConsonantPhonemeInventory
  {- Arity: 1, Strictness: <L,1*U(1*U)>,
     Unfolding: (\ num :: GHC.Types.Int ->
                 let {
                   m1 :: Data.RVar.RVarT
                           Data.Functor.Identity.Identity [PhonemeType2.Consonant]
                   = case num of ww { GHC.Types.I# ww1 ->
                     PhonologyGen.$wmakeConsonantList
                       ww1
                       PhonologyGen.makeConsonantPhonemeInventory1
                         `cast`
                       (Trans
                            (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                      <Control.Monad.Prompt.Lift
                                         Data.Random.Source.Internal.Prim.Prim
                                         Data.Functor.Identity.Identity>_R
                                      <[PhonemeType2.Consonant]>_R))
                            (Trans
                                 (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                           <Data.Random.Source.Internal.Prim.Prim>_R
                                           <Data.Functor.Identity.Identity>_R))
                                 (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[PhonemeType2.Consonant]>_N)) }
                 } in
                 (\ @ b1
                    eta :: PhonemeType2.ConsonantPhonemeInventory -> b1
                    eta1 :: forall a3.
                            Control.Monad.Prompt.Lift
                              Data.Random.Source.Internal.Prim.Prim
                              Data.Functor.Identity.Identity
                              a3
                            -> (a3 -> b1) -> b1 ->
                  m1
                    `cast`
                  (Trans
                       (Trans
                            (Data.RVar.NTCo:RVarT[0] <Data.Functor.Identity.Identity>_N)
                            (Control.Monad.Prompt.NTCo:PromptT[0]
                                 <Data.Random.Source.Internal.Prim.Prim>_R
                                 <Data.Functor.Identity.Identity>_R) <[PhonemeType2.Consonant]>_N)
                       (Control.Monad.Prompt.NTCo:Prompt[0]
                            <Control.Monad.Prompt.Lift
                               Data.Random.Source.Internal.Prim.Prim
                               Data.Functor.Identity.Identity>_R
                            <[PhonemeType2.Consonant]>_R))
                    @ b1
                    (\ x :: [PhonemeType2.Consonant] ->
                     case x of x1 { DEFAULT ->
                     eta (PhonemeType2.ConsonantPhonemeInventory x1) })
                    eta1)
                   `cast`
                 (Trans
                      (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                <Control.Monad.Prompt.Lift
                                   Data.Random.Source.Internal.Prim.Prim
                                   Data.Functor.Identity.Identity>_R
                                <PhonemeType2.ConsonantPhonemeInventory>_R))
                      (Trans
                           (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                     <Data.Random.Source.Internal.Prim.Prim>_R
                                     <Data.Functor.Identity.Identity>_R))
                           (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <PhonemeType2.ConsonantPhonemeInventory>_N))) -}
00b10b51f969c971b06bbc5206ed8be9
  makeConsonantPhonemeInventory1 ::
    ([PhonemeType2.Consonant] -> b)
    -> (forall a2.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a2
        -> (a2 -> b) -> b)
    -> b
  {- Arity: 2, HasNoCafRefs, Strictness: <C(S),1*C1(U)><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ b
                   eta1 :: [PhonemeType2.Consonant] -> b
                   eta2 :: forall a3.
                           Control.Monad.Prompt.Lift
                             Data.Random.Source.Internal.Prim.Prim
                             Data.Functor.Identity.Identity
                             a3
                           -> (a3 -> b) -> b ->
                 eta1 (GHC.Types.[] @ PhonemeType2.Consonant)) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

