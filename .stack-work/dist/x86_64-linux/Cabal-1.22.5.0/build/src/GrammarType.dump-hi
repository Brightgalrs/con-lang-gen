
==================== FINAL INTERFACE ====================
2016-09-28 03:36:47.494943 UTC

interface conla_1eA9qWUPH9nBowcXqqaV8r:GrammarType 7103
  interface hash: 3610550f0d7e6057d558fb899c1fd4f4
  ABI hash: d41c9ff1a4a196bc7fb7fc2109d827ba
  export-list hash: 2f1e30d8523478220718ffc652cbd1c0
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 962af636f8e927040c7daa9c21457292
  sig of: Nothing
  used TH splices: False
  where
exports:
  GHC.Base.Maybe{GHC.Base.Just GHC.Base.Nothing}
  GrammarType.Animacy{GrammarType.AN GrammarType.HUM GrammarType.INAN GrammarType.NHUM GrammarType.ZO}
  GrammarType.Case{GrammarType.ABL GrammarType.ACC GrammarType.DAT GrammarType.ERG GrammarType.GEN GrammarType.INS GrammarType.LOC GrammarType.NOM GrammarType.PREP GrammarType.VOC}
  GrammarType.Declension{GrammarType.Declension}
  GrammarType.Definiteness{GrammarType.DEF GrammarType.INDF}
  GrammarType.Gender{GrammarType.COM GrammarType.F GrammarType.M GrammarType.N}
  GrammarType.GrammarSystem{GrammarType.GrammarSystem GrammarType.aSys GrammarType.cSys GrammarType.dSys GrammarType.gSys GrammarType.hSys GrammarType.nSys GrammarType.sSys}
  GrammarType.Honorific{GrammarType.FAM GrammarType.FORM}
  GrammarType.Number{GrammarType.DU GrammarType.PA GrammarType.PL GrammarType.SG GrammarType.TRI}
  GrammarType.Specificity{GrammarType.NSPEC GrammarType.SPEC}
module dependencies: OtherData PhonemeType
package dependencies: base-4.8.2.0* ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Monoid
                         base-4.8.2.0:Data.Type.Equality base-4.8.2.0:GHC.Generics
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.Read b423b4506a014855edbd329b567629f3
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  OtherData f086edab5429a445c5a03de742c12a46
  exports: 9eafbe3cd8a957307681d0a6605eb9fd
  Syllable e49f00d6d0b10b3393e432ef706386f1
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
139c2ca991f21d8f2e5bf34c2a3359ca
  $fEqAnimacy :: GHC.Classes.Eq GrammarType.Animacy
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType.Animacy
                  GrammarType.$fEqAnimacy_$c==
                  GrammarType.$fEqAnimacy_$c/= -}
139c2ca991f21d8f2e5bf34c2a3359ca
  $fEqAnimacy_$c/= ::
    GrammarType.Animacy -> GrammarType.Animacy -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a7 :: GrammarType.Animacy b :: GrammarType.Animacy ->
                 case a7 of wild {
                   GrammarType.AN
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType.AN -> GHC.Types.False }
                   GrammarType.HUM
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType.HUM -> GHC.Types.False }
                   GrammarType.NHUM
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType.NHUM -> GHC.Types.False }
                   GrammarType.ZO
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType.ZO -> GHC.Types.False }
                   GrammarType.INAN
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        GrammarType.INAN -> GHC.Types.False } }) -}
139c2ca991f21d8f2e5bf34c2a3359ca
  $fEqAnimacy_$c== ::
    GrammarType.Animacy -> GrammarType.Animacy -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: GrammarType.Animacy
                   ds1 :: GrammarType.Animacy ->
                 case ds of wild {
                   GrammarType.AN
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType.AN -> GHC.Types.True }
                   GrammarType.HUM
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType.HUM -> GHC.Types.True }
                   GrammarType.NHUM
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType.NHUM -> GHC.Types.True }
                   GrammarType.ZO
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType.ZO -> GHC.Types.True }
                   GrammarType.INAN
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarType.INAN -> GHC.Types.True } }) -}
cf12fb2514df090f443d91dc740e2284
  $fEqCase :: GHC.Classes.Eq GrammarType.Case
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType.Case
                  GrammarType.$fEqCase_$c==
                  GrammarType.$fEqCase_$c/= -}
cf12fb2514df090f443d91dc740e2284
  $fEqCase_$c/= ::
    GrammarType.Case -> GrammarType.Case -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a7 :: GrammarType.Case b :: GrammarType.Case ->
                 case a7 of wild {
                   GrammarType.NOM
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType.NOM -> GHC.Types.False }
                   GrammarType.ACC
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType.ACC -> GHC.Types.False }
                   GrammarType.ERG
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType.ERG -> GHC.Types.False }
                   GrammarType.GEN
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType.GEN -> GHC.Types.False }
                   GrammarType.DAT
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType.DAT -> GHC.Types.False }
                   GrammarType.LOC
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType.LOC -> GHC.Types.False }
                   GrammarType.PREP
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType.PREP -> GHC.Types.False }
                   GrammarType.ABL
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType.ABL -> GHC.Types.False }
                   GrammarType.INS
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType.INS -> GHC.Types.False }
                   GrammarType.VOC
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        GrammarType.VOC -> GHC.Types.False } }) -}
cf12fb2514df090f443d91dc740e2284
  $fEqCase_$c== ::
    GrammarType.Case -> GrammarType.Case -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: GrammarType.Case ds1 :: GrammarType.Case ->
                 case ds of wild {
                   GrammarType.NOM
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType.NOM -> GHC.Types.True }
                   GrammarType.ACC
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType.ACC -> GHC.Types.True }
                   GrammarType.ERG
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType.ERG -> GHC.Types.True }
                   GrammarType.GEN
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType.GEN -> GHC.Types.True }
                   GrammarType.DAT
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType.DAT -> GHC.Types.True }
                   GrammarType.LOC
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType.LOC -> GHC.Types.True }
                   GrammarType.PREP
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType.PREP -> GHC.Types.True }
                   GrammarType.ABL
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType.ABL -> GHC.Types.True }
                   GrammarType.INS
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType.INS -> GHC.Types.True }
                   GrammarType.VOC
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GrammarType.VOC -> GHC.Types.True } }) -}
0beb087cff99593226a9b8c5fd83dd7e
  $fEqDefiniteness :: GHC.Classes.Eq GrammarType.Definiteness
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType.Definiteness
                  GrammarType.$fEqDefiniteness_$c==
                  GrammarType.$fEqDefiniteness_$c/= -}
0beb087cff99593226a9b8c5fd83dd7e
  $fEqDefiniteness_$c/= ::
    GrammarType.Definiteness
    -> GrammarType.Definiteness -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a7 :: GrammarType.Definiteness b :: GrammarType.Definiteness ->
                 case a7 of wild {
                   GrammarType.DEF
                   -> case b of wild1 {
                        GrammarType.DEF -> GHC.Types.False
                        GrammarType.INDF -> GHC.Types.True }
                   GrammarType.INDF
                   -> case b of wild1 {
                        GrammarType.DEF -> GHC.Types.True
                        GrammarType.INDF -> GHC.Types.False } }) -}
0beb087cff99593226a9b8c5fd83dd7e
  $fEqDefiniteness_$c== ::
    GrammarType.Definiteness
    -> GrammarType.Definiteness -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarType.Definiteness
                   ds1 :: GrammarType.Definiteness ->
                 case ds of wild {
                   GrammarType.DEF
                   -> case ds1 of wild1 {
                        GrammarType.DEF -> GHC.Types.True
                        GrammarType.INDF -> GHC.Types.False }
                   GrammarType.INDF
                   -> case ds1 of wild1 {
                        GrammarType.DEF -> GHC.Types.False
                        GrammarType.INDF -> GHC.Types.True } }) -}
313f54c997d1c2a7547cc74ee46f34a6
  $fEqGender :: GHC.Classes.Eq GrammarType.Gender
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType.Gender
                  GrammarType.$fEqGender_$c==
                  GrammarType.$fEqGender_$c/= -}
313f54c997d1c2a7547cc74ee46f34a6
  $fEqGender_$c/= ::
    GrammarType.Gender -> GrammarType.Gender -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a7 :: GrammarType.Gender b :: GrammarType.Gender ->
                 case a7 of wild {
                   GrammarType.M
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType.M -> GHC.Types.False }
                   GrammarType.F
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType.F -> GHC.Types.False }
                   GrammarType.COM
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType.COM -> GHC.Types.False }
                   GrammarType.N
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType.N -> GHC.Types.False } }) -}
313f54c997d1c2a7547cc74ee46f34a6
  $fEqGender_$c== ::
    GrammarType.Gender -> GrammarType.Gender -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: GrammarType.Gender ds1 :: GrammarType.Gender ->
                 case ds of wild {
                   GrammarType.M
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType.M -> GHC.Types.True }
                   GrammarType.F
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType.F -> GHC.Types.True }
                   GrammarType.COM
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType.COM -> GHC.Types.True }
                   GrammarType.N
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType.N -> GHC.Types.True } }) -}
33ab5b5c9687d44421ffb5723e773fed
  $fEqHonorific :: GHC.Classes.Eq GrammarType.Honorific
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType.Honorific
                  GrammarType.$fEqHonorific_$c==
                  GrammarType.$fEqHonorific_$c/= -}
33ab5b5c9687d44421ffb5723e773fed
  $fEqHonorific_$c/= ::
    GrammarType.Honorific -> GrammarType.Honorific -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a7 :: GrammarType.Honorific b :: GrammarType.Honorific ->
                 case a7 of wild {
                   GrammarType.FAM
                   -> case b of wild1 {
                        GrammarType.FAM -> GHC.Types.False
                        GrammarType.FORM -> GHC.Types.True }
                   GrammarType.FORM
                   -> case b of wild1 {
                        GrammarType.FAM -> GHC.Types.True
                        GrammarType.FORM -> GHC.Types.False } }) -}
33ab5b5c9687d44421ffb5723e773fed
  $fEqHonorific_$c== ::
    GrammarType.Honorific -> GrammarType.Honorific -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarType.Honorific ds1 :: GrammarType.Honorific ->
                 case ds of wild {
                   GrammarType.FAM
                   -> case ds1 of wild1 {
                        GrammarType.FAM -> GHC.Types.True
                        GrammarType.FORM -> GHC.Types.False }
                   GrammarType.FORM
                   -> case ds1 of wild1 {
                        GrammarType.FAM -> GHC.Types.False
                        GrammarType.FORM -> GHC.Types.True } }) -}
7c6bccd0de5888f1bb886fc04db2be0f
  $fEqNumber :: GHC.Classes.Eq GrammarType.Number
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType.Number
                  GrammarType.$fEqNumber_$c==
                  GrammarType.$fEqNumber_$c/= -}
7c6bccd0de5888f1bb886fc04db2be0f
  $fEqNumber_$c/= ::
    GrammarType.Number -> GrammarType.Number -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a7 :: GrammarType.Number b :: GrammarType.Number ->
                 case a7 of wild {
                   GrammarType.SG
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType.SG -> GHC.Types.False }
                   GrammarType.DU
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType.DU -> GHC.Types.False }
                   GrammarType.TRI
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType.TRI -> GHC.Types.False }
                   GrammarType.PA
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType.PA -> GHC.Types.False }
                   GrammarType.PL
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True GrammarType.PL -> GHC.Types.False } }) -}
7c6bccd0de5888f1bb886fc04db2be0f
  $fEqNumber_$c== ::
    GrammarType.Number -> GrammarType.Number -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: GrammarType.Number ds1 :: GrammarType.Number ->
                 case ds of wild {
                   GrammarType.SG
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType.SG -> GHC.Types.True }
                   GrammarType.DU
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType.DU -> GHC.Types.True }
                   GrammarType.TRI
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType.TRI -> GHC.Types.True }
                   GrammarType.PA
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType.PA -> GHC.Types.True }
                   GrammarType.PL
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GrammarType.PL -> GHC.Types.True } }) -}
e521f63828d45d62f01915f44b5b0dc6
  $fEqSpecificity :: GHC.Classes.Eq GrammarType.Specificity
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType.Specificity
                  GrammarType.$fEqSpecificity_$c==
                  GrammarType.$fEqSpecificity_$c/= -}
e521f63828d45d62f01915f44b5b0dc6
  $fEqSpecificity_$c/= ::
    GrammarType.Specificity
    -> GrammarType.Specificity -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a7 :: GrammarType.Specificity b :: GrammarType.Specificity ->
                 case a7 of wild {
                   GrammarType.SPEC
                   -> case b of wild1 {
                        GrammarType.SPEC -> GHC.Types.False
                        GrammarType.NSPEC -> GHC.Types.True }
                   GrammarType.NSPEC
                   -> case b of wild1 {
                        GrammarType.SPEC -> GHC.Types.True
                        GrammarType.NSPEC -> GHC.Types.False } }) -}
e521f63828d45d62f01915f44b5b0dc6
  $fEqSpecificity_$c== ::
    GrammarType.Specificity
    -> GrammarType.Specificity -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarType.Specificity ds1 :: GrammarType.Specificity ->
                 case ds of wild {
                   GrammarType.SPEC
                   -> case ds1 of wild1 {
                        GrammarType.SPEC -> GHC.Types.True
                        GrammarType.NSPEC -> GHC.Types.False }
                   GrammarType.NSPEC
                   -> case ds1 of wild1 {
                        GrammarType.SPEC -> GHC.Types.False
                        GrammarType.NSPEC -> GHC.Types.True } }) -}
139c2ca991f21d8f2e5bf34c2a3359ca
  $fReadAnimacy :: GHC.Read.Read GrammarType.Animacy
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType.Animacy
                  GrammarType.$fReadAnimacy_$s$dmreadsPrec
                  GrammarType.$fReadAnimacy_$sreadListDefault
                  GrammarType.$fReadAnimacy_$creadPrec
                  GrammarType.$fReadAnimacy_$creadListPrec -}
139c2ca991f21d8f2e5bf34c2a3359ca
  $fReadAnimacy1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarType.Animacy] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarType.Animacy]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarType.Animacy
                   GrammarType.$fReadAnimacy2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarType.Animacy>_R))
                   @ b
                   eta1) -}
139c2ca991f21d8f2e5bf34c2a3359ca
  $fReadAnimacy10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType.Animacy -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType.Animacy -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType.INAN) -}
45556e487223299805d23bbb1e364956
  $fReadAnimacy11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "INAN"#) -}
139c2ca991f21d8f2e5bf34c2a3359ca
  $fReadAnimacy12 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Animacy)
  {- Strictness: m,
     Unfolding: ((GrammarType.$fReadAnimacy14,
                  GrammarType.$fReadAnimacy13
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType.Animacy>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType.Animacy>_R))))) -}
139c2ca991f21d8f2e5bf34c2a3359ca
  $fReadAnimacy13 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType.Animacy -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType.Animacy -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType.ZO) -}
8c97dd1d0fa57b6964d9da29e7786bcd
  $fReadAnimacy14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ZO"#) -}
139c2ca991f21d8f2e5bf34c2a3359ca
  $fReadAnimacy15 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Animacy)
  {- Strictness: m,
     Unfolding: ((GrammarType.$fReadAnimacy17,
                  GrammarType.$fReadAnimacy16
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType.Animacy>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType.Animacy>_R))))) -}
139c2ca991f21d8f2e5bf34c2a3359ca
  $fReadAnimacy16 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType.Animacy -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType.Animacy -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType.NHUM) -}
18c4dcb08d369ef80af1d3bfeab68a4f
  $fReadAnimacy17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NHUM"#) -}
139c2ca991f21d8f2e5bf34c2a3359ca
  $fReadAnimacy18 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Animacy)
  {- Strictness: m,
     Unfolding: ((GrammarType.$fReadAnimacy20,
                  GrammarType.$fReadAnimacy19
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType.Animacy>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType.Animacy>_R))))) -}
139c2ca991f21d8f2e5bf34c2a3359ca
  $fReadAnimacy19 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType.Animacy -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType.Animacy -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType.HUM) -}
139c2ca991f21d8f2e5bf34c2a3359ca
  $fReadAnimacy2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarType.Animacy
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarType.Animacy
                   GrammarType.$fReadAnimacy3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarType.Animacy>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarType.Animacy>_R)))) -}
6008f76d33f11717ef894d7f166847fd
  $fReadAnimacy20 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "HUM"#) -}
139c2ca991f21d8f2e5bf34c2a3359ca
  $fReadAnimacy21 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Animacy)
  {- Strictness: m,
     Unfolding: ((GrammarType.$fReadAnimacy23,
                  GrammarType.$fReadAnimacy22
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType.Animacy>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType.Animacy>_R))))) -}
139c2ca991f21d8f2e5bf34c2a3359ca
  $fReadAnimacy22 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType.Animacy -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType.Animacy -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType.AN) -}
a705e959a87d7481d0be8036ea7d105b
  $fReadAnimacy23 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AN"#) -}
139c2ca991f21d8f2e5bf34c2a3359ca
  $fReadAnimacy3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType.Animacy -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarType.Animacy -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarType.Animacy
                   GrammarType.$fReadAnimacy4
                   eta
                   @ b
                   eta1) -}
139c2ca991f21d8f2e5bf34c2a3359ca
  $fReadAnimacy4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Animacy)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Animacy)
                   GrammarType.$fReadAnimacy21
                   GrammarType.$fReadAnimacy5) -}
139c2ca991f21d8f2e5bf34c2a3359ca
  $fReadAnimacy5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Animacy)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Animacy)
                   GrammarType.$fReadAnimacy18
                   GrammarType.$fReadAnimacy6) -}
139c2ca991f21d8f2e5bf34c2a3359ca
  $fReadAnimacy6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Animacy)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Animacy)
                   GrammarType.$fReadAnimacy15
                   GrammarType.$fReadAnimacy7) -}
139c2ca991f21d8f2e5bf34c2a3359ca
  $fReadAnimacy7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Animacy)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Animacy)
                   GrammarType.$fReadAnimacy12
                   GrammarType.$fReadAnimacy8) -}
139c2ca991f21d8f2e5bf34c2a3359ca
  $fReadAnimacy8 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Animacy)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Animacy)
                   GrammarType.$fReadAnimacy9
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Animacy))) -}
139c2ca991f21d8f2e5bf34c2a3359ca
  $fReadAnimacy9 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Animacy)
  {- Strictness: m,
     Unfolding: ((GrammarType.$fReadAnimacy11,
                  GrammarType.$fReadAnimacy10
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType.Animacy>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType.Animacy>_R))))) -}
139c2ca991f21d8f2e5bf34c2a3359ca
  $fReadAnimacy_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [GrammarType.Animacy]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarType.$fReadAnimacy1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarType.Animacy]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarType.Animacy]>_R))) -}
139c2ca991f21d8f2e5bf34c2a3359ca
  $fReadAnimacy_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Animacy
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarType.$fReadAnimacy2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarType.Animacy>_R)) -}
139c2ca991f21d8f2e5bf34c2a3359ca
  $fReadAnimacy_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarType.Animacy
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarType.Animacy
                   GrammarType.$fReadAnimacy_$creadPrec
                   eta) -}
139c2ca991f21d8f2e5bf34c2a3359ca
  $fReadAnimacy_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarType.Animacy]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarType.Animacy]
                   ((GrammarType.$fReadAnimacy_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarType.Animacy]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarType.Animacy]>_R)
                      @ [GrammarType.Animacy]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarType.Animacy]))) -}
cf12fb2514df090f443d91dc740e2284
  $fReadCase :: GHC.Read.Read GrammarType.Case
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType.Case
                  GrammarType.$fReadCase_$s$dmreadsPrec
                  GrammarType.$fReadCase_$sreadListDefault
                  GrammarType.$fReadCase_$creadPrec
                  GrammarType.$fReadCase_$creadListPrec -}
cf12fb2514df090f443d91dc740e2284
  $fReadCase1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarType.Case] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarType.Case] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarType.Case
                   GrammarType.$fReadCase2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarType.Case>_R))
                   @ b
                   eta1) -}
cf12fb2514df090f443d91dc740e2284
  $fReadCase10 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Case)
                   GrammarType.$fReadCase23
                   GrammarType.$fReadCase11) -}
cf12fb2514df090f443d91dc740e2284
  $fReadCase11 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Case)
                   GrammarType.$fReadCase20
                   GrammarType.$fReadCase12) -}
cf12fb2514df090f443d91dc740e2284
  $fReadCase12 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Case)
                   GrammarType.$fReadCase17
                   GrammarType.$fReadCase13) -}
cf12fb2514df090f443d91dc740e2284
  $fReadCase13 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Case)
                   GrammarType.$fReadCase14
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Case))) -}
cf12fb2514df090f443d91dc740e2284
  $fReadCase14 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Case)
  {- Strictness: m,
     Unfolding: ((GrammarType.$fReadCase16,
                  GrammarType.$fReadCase15
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType.Case>_R))))) -}
cf12fb2514df090f443d91dc740e2284
  $fReadCase15 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType.VOC) -}
ebf640fde0d3ce7f269f44a34fa98bbc
  $fReadCase16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "VOC"#) -}
cf12fb2514df090f443d91dc740e2284
  $fReadCase17 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Case)
  {- Strictness: m,
     Unfolding: ((GrammarType.$fReadCase19,
                  GrammarType.$fReadCase18
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType.Case>_R))))) -}
cf12fb2514df090f443d91dc740e2284
  $fReadCase18 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType.INS) -}
965923a779073c2bdf92c2728de37f0b
  $fReadCase19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "INS"#) -}
cf12fb2514df090f443d91dc740e2284
  $fReadCase2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarType.Case
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarType.Case
                   GrammarType.$fReadCase3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarType.Case>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarType.Case>_R)))) -}
cf12fb2514df090f443d91dc740e2284
  $fReadCase20 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Case)
  {- Strictness: m,
     Unfolding: ((GrammarType.$fReadCase22,
                  GrammarType.$fReadCase21
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType.Case>_R))))) -}
cf12fb2514df090f443d91dc740e2284
  $fReadCase21 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType.ABL) -}
bbbf96c148fe3460aea0812bd56cbde8
  $fReadCase22 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ABL"#) -}
cf12fb2514df090f443d91dc740e2284
  $fReadCase23 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Case)
  {- Strictness: m,
     Unfolding: ((GrammarType.$fReadCase25,
                  GrammarType.$fReadCase24
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType.Case>_R))))) -}
cf12fb2514df090f443d91dc740e2284
  $fReadCase24 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType.PREP) -}
3cac0d67ab18ead191e484154cf7b0b9
  $fReadCase25 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PREP"#) -}
cf12fb2514df090f443d91dc740e2284
  $fReadCase26 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Case)
  {- Strictness: m,
     Unfolding: ((GrammarType.$fReadCase28,
                  GrammarType.$fReadCase27
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType.Case>_R))))) -}
cf12fb2514df090f443d91dc740e2284
  $fReadCase27 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType.LOC) -}
744c12f21fa1f5051df09fbb66b7aa58
  $fReadCase28 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "LOC"#) -}
cf12fb2514df090f443d91dc740e2284
  $fReadCase29 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Case)
  {- Strictness: m,
     Unfolding: ((GrammarType.$fReadCase31,
                  GrammarType.$fReadCase30
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType.Case>_R))))) -}
cf12fb2514df090f443d91dc740e2284
  $fReadCase3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarType.Case -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarType.Case
                   GrammarType.$fReadCase4
                   eta
                   @ b
                   eta1) -}
cf12fb2514df090f443d91dc740e2284
  $fReadCase30 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType.DAT) -}
0ad42b2944a8da26751c0de1c37f4f0f
  $fReadCase31 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DAT"#) -}
cf12fb2514df090f443d91dc740e2284
  $fReadCase32 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Case)
  {- Strictness: m,
     Unfolding: ((GrammarType.$fReadCase34,
                  GrammarType.$fReadCase33
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType.Case>_R))))) -}
cf12fb2514df090f443d91dc740e2284
  $fReadCase33 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType.GEN) -}
66c64ff3c6bfaaea2b4b8cbcba985326
  $fReadCase34 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "GEN"#) -}
cf12fb2514df090f443d91dc740e2284
  $fReadCase35 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Case)
  {- Strictness: m,
     Unfolding: ((GrammarType.$fReadCase37,
                  GrammarType.$fReadCase36
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType.Case>_R))))) -}
cf12fb2514df090f443d91dc740e2284
  $fReadCase36 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType.ERG) -}
50921aba3555deee23682cff25fa392b
  $fReadCase37 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ERG"#) -}
cf12fb2514df090f443d91dc740e2284
  $fReadCase38 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Case)
  {- Strictness: m,
     Unfolding: ((GrammarType.$fReadCase40,
                  GrammarType.$fReadCase39
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType.Case>_R))))) -}
cf12fb2514df090f443d91dc740e2284
  $fReadCase39 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType.ACC) -}
cf12fb2514df090f443d91dc740e2284
  $fReadCase4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Case)
                   GrammarType.$fReadCase41
                   GrammarType.$fReadCase5) -}
b514d11e9d650a466e1a31de0a3b4588
  $fReadCase40 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ACC"#) -}
cf12fb2514df090f443d91dc740e2284
  $fReadCase41 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Case)
  {- Strictness: m,
     Unfolding: ((GrammarType.$fReadCase43,
                  GrammarType.$fReadCase42
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType.Case>_R))))) -}
cf12fb2514df090f443d91dc740e2284
  $fReadCase42 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType.Case -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType.NOM) -}
92d594ca72a3cc35a45e30301f17ca77
  $fReadCase43 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NOM"#) -}
cf12fb2514df090f443d91dc740e2284
  $fReadCase5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Case)
                   GrammarType.$fReadCase38
                   GrammarType.$fReadCase6) -}
cf12fb2514df090f443d91dc740e2284
  $fReadCase6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Case)
                   GrammarType.$fReadCase35
                   GrammarType.$fReadCase7) -}
cf12fb2514df090f443d91dc740e2284
  $fReadCase7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Case)
                   GrammarType.$fReadCase32
                   GrammarType.$fReadCase8) -}
cf12fb2514df090f443d91dc740e2284
  $fReadCase8 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Case)
                   GrammarType.$fReadCase29
                   GrammarType.$fReadCase9) -}
cf12fb2514df090f443d91dc740e2284
  $fReadCase9 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Case)
                   GrammarType.$fReadCase26
                   GrammarType.$fReadCase10) -}
cf12fb2514df090f443d91dc740e2284
  $fReadCase_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [GrammarType.Case]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarType.$fReadCase1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarType.Case]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarType.Case]>_R))) -}
cf12fb2514df090f443d91dc740e2284
  $fReadCase_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Case
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarType.$fReadCase2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarType.Case>_R)) -}
cf12fb2514df090f443d91dc740e2284
  $fReadCase_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarType.Case
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarType.Case
                   GrammarType.$fReadCase_$creadPrec
                   eta) -}
cf12fb2514df090f443d91dc740e2284
  $fReadCase_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarType.Case]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarType.Case]
                   ((GrammarType.$fReadCase_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarType.Case]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <[GrammarType.Case]>_R)
                      @ [GrammarType.Case]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarType.Case]))) -}
0beb087cff99593226a9b8c5fd83dd7e
  $fReadDefiniteness :: GHC.Read.Read GrammarType.Definiteness
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType.Definiteness
                  GrammarType.$fReadDefiniteness_$s$dmreadsPrec
                  GrammarType.$fReadDefiniteness_$sreadListDefault
                  GrammarType.$fReadDefiniteness_$creadPrec
                  GrammarType.$fReadDefiniteness_$creadListPrec -}
0beb087cff99593226a9b8c5fd83dd7e
  $fReadDefiniteness1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarType.Definiteness] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarType.Definiteness]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarType.Definiteness
                   GrammarType.$fReadDefiniteness2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarType.Definiteness>_R))
                   @ b
                   eta1) -}
0beb087cff99593226a9b8c5fd83dd7e
  $fReadDefiniteness10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType.Definiteness -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType.Definiteness
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType.DEF) -}
be133089acc051c4cb1b081c8f8c651f
  $fReadDefiniteness11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DEF"#) -}
0beb087cff99593226a9b8c5fd83dd7e
  $fReadDefiniteness2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarType.Definiteness
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarType.Definiteness
                   GrammarType.$fReadDefiniteness3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarType.Definiteness>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarType.Definiteness>_R)))) -}
0beb087cff99593226a9b8c5fd83dd7e
  $fReadDefiniteness3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType.Definiteness -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarType.Definiteness
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarType.Definiteness
                   GrammarType.$fReadDefiniteness4
                   eta
                   @ b
                   eta1) -}
0beb087cff99593226a9b8c5fd83dd7e
  $fReadDefiniteness4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Definiteness)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Definiteness)
                   GrammarType.$fReadDefiniteness9
                   GrammarType.$fReadDefiniteness5) -}
0beb087cff99593226a9b8c5fd83dd7e
  $fReadDefiniteness5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Definiteness)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Definiteness)
                   GrammarType.$fReadDefiniteness6
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           GrammarType.Definiteness))) -}
0beb087cff99593226a9b8c5fd83dd7e
  $fReadDefiniteness6 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Definiteness)
  {- Strictness: m,
     Unfolding: ((GrammarType.$fReadDefiniteness8,
                  GrammarType.$fReadDefiniteness7
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType.Definiteness>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType.Definiteness>_R))))) -}
0beb087cff99593226a9b8c5fd83dd7e
  $fReadDefiniteness7 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType.Definiteness -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType.Definiteness
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType.INDF) -}
98fcb978b5d9086b46ec038ff9a7a218
  $fReadDefiniteness8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "INDF"#) -}
0beb087cff99593226a9b8c5fd83dd7e
  $fReadDefiniteness9 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Definiteness)
  {- Strictness: m,
     Unfolding: ((GrammarType.$fReadDefiniteness11,
                  GrammarType.$fReadDefiniteness10
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType.Definiteness>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType.Definiteness>_R))))) -}
0beb087cff99593226a9b8c5fd83dd7e
  $fReadDefiniteness_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [GrammarType.Definiteness]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarType.$fReadDefiniteness1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarType.Definiteness]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarType.Definiteness]>_R))) -}
0beb087cff99593226a9b8c5fd83dd7e
  $fReadDefiniteness_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Definiteness
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarType.$fReadDefiniteness2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarType.Definiteness>_R)) -}
0beb087cff99593226a9b8c5fd83dd7e
  $fReadDefiniteness_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarType.Definiteness
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarType.Definiteness
                   GrammarType.$fReadDefiniteness_$creadPrec
                   eta) -}
0beb087cff99593226a9b8c5fd83dd7e
  $fReadDefiniteness_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarType.Definiteness]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarType.Definiteness]
                   ((GrammarType.$fReadDefiniteness_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarType.Definiteness]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarType.Definiteness]>_R)
                      @ [GrammarType.Definiteness]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarType.Definiteness]))) -}
313f54c997d1c2a7547cc74ee46f34a6
  $fReadGender :: GHC.Read.Read GrammarType.Gender
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType.Gender
                  GrammarType.$fReadGender_$s$dmreadsPrec
                  GrammarType.$fReadGender_$sreadListDefault
                  GrammarType.$fReadGender_$creadPrec
                  GrammarType.$fReadGender_$creadListPrec -}
313f54c997d1c2a7547cc74ee46f34a6
  $fReadGender1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarType.Gender] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarType.Gender] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarType.Gender
                   GrammarType.$fReadGender2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarType.Gender>_R))
                   @ b
                   eta1) -}
0b454bfe3a2f21ad584306e9d7267fc0
  $fReadGender10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "N"#) -}
313f54c997d1c2a7547cc74ee46f34a6
  $fReadGender11 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Gender)
  {- Strictness: m,
     Unfolding: ((GrammarType.$fReadGender13,
                  GrammarType.$fReadGender12
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType.Gender>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType.Gender>_R))))) -}
313f54c997d1c2a7547cc74ee46f34a6
  $fReadGender12 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType.Gender -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType.Gender -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType.COM) -}
19d645799982dc049bfddf5766f3be31
  $fReadGender13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "COM"#) -}
313f54c997d1c2a7547cc74ee46f34a6
  $fReadGender14 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Gender)
  {- Strictness: m,
     Unfolding: ((GrammarType.$fReadGender16,
                  GrammarType.$fReadGender15
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType.Gender>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType.Gender>_R))))) -}
313f54c997d1c2a7547cc74ee46f34a6
  $fReadGender15 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType.Gender -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType.Gender -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType.F) -}
56a1fa15a76f1243a7a8d82ac2abb5cb
  $fReadGender16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "F"#) -}
313f54c997d1c2a7547cc74ee46f34a6
  $fReadGender17 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Gender)
  {- Strictness: m,
     Unfolding: ((GrammarType.$fReadGender19,
                  GrammarType.$fReadGender18
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType.Gender>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType.Gender>_R))))) -}
313f54c997d1c2a7547cc74ee46f34a6
  $fReadGender18 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType.Gender -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType.Gender -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType.M) -}
1f972f90342e74ee5ffa30139101e811
  $fReadGender19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "M"#) -}
313f54c997d1c2a7547cc74ee46f34a6
  $fReadGender2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarType.Gender
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarType.Gender
                   GrammarType.$fReadGender3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarType.Gender>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarType.Gender>_R)))) -}
313f54c997d1c2a7547cc74ee46f34a6
  $fReadGender3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType.Gender -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarType.Gender -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarType.Gender
                   GrammarType.$fReadGender4
                   eta
                   @ b
                   eta1) -}
313f54c997d1c2a7547cc74ee46f34a6
  $fReadGender4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Gender)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Gender)
                   GrammarType.$fReadGender17
                   GrammarType.$fReadGender5) -}
313f54c997d1c2a7547cc74ee46f34a6
  $fReadGender5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Gender)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Gender)
                   GrammarType.$fReadGender14
                   GrammarType.$fReadGender6) -}
313f54c997d1c2a7547cc74ee46f34a6
  $fReadGender6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Gender)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Gender)
                   GrammarType.$fReadGender11
                   GrammarType.$fReadGender7) -}
313f54c997d1c2a7547cc74ee46f34a6
  $fReadGender7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Gender)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Gender)
                   GrammarType.$fReadGender8
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Gender))) -}
313f54c997d1c2a7547cc74ee46f34a6
  $fReadGender8 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Gender)
  {- Strictness: m,
     Unfolding: ((GrammarType.$fReadGender10,
                  GrammarType.$fReadGender9
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType.Gender>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType.Gender>_R))))) -}
313f54c997d1c2a7547cc74ee46f34a6
  $fReadGender9 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType.Gender -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType.Gender -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType.N) -}
313f54c997d1c2a7547cc74ee46f34a6
  $fReadGender_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [GrammarType.Gender]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarType.$fReadGender1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarType.Gender]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarType.Gender]>_R))) -}
313f54c997d1c2a7547cc74ee46f34a6
  $fReadGender_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Gender
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarType.$fReadGender2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarType.Gender>_R)) -}
313f54c997d1c2a7547cc74ee46f34a6
  $fReadGender_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarType.Gender
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarType.Gender
                   GrammarType.$fReadGender_$creadPrec
                   eta) -}
313f54c997d1c2a7547cc74ee46f34a6
  $fReadGender_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarType.Gender]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarType.Gender]
                   ((GrammarType.$fReadGender_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarType.Gender]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarType.Gender]>_R)
                      @ [GrammarType.Gender]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarType.Gender]))) -}
33ab5b5c9687d44421ffb5723e773fed
  $fReadHonorific :: GHC.Read.Read GrammarType.Honorific
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType.Honorific
                  GrammarType.$fReadHonorific_$s$dmreadsPrec
                  GrammarType.$fReadHonorific_$sreadListDefault
                  GrammarType.$fReadHonorific_$creadPrec
                  GrammarType.$fReadHonorific_$creadListPrec -}
33ab5b5c9687d44421ffb5723e773fed
  $fReadHonorific1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarType.Honorific] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarType.Honorific]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarType.Honorific
                   GrammarType.$fReadHonorific2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarType.Honorific>_R))
                   @ b
                   eta1) -}
33ab5b5c9687d44421ffb5723e773fed
  $fReadHonorific10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType.Honorific -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType.Honorific -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType.FAM) -}
66b826fe3f8e6150afc3d4c844395b95
  $fReadHonorific11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FAM"#) -}
33ab5b5c9687d44421ffb5723e773fed
  $fReadHonorific2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarType.Honorific
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarType.Honorific
                   GrammarType.$fReadHonorific3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarType.Honorific>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarType.Honorific>_R)))) -}
33ab5b5c9687d44421ffb5723e773fed
  $fReadHonorific3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType.Honorific -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarType.Honorific
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarType.Honorific
                   GrammarType.$fReadHonorific4
                   eta
                   @ b
                   eta1) -}
33ab5b5c9687d44421ffb5723e773fed
  $fReadHonorific4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Honorific)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Honorific)
                   GrammarType.$fReadHonorific9
                   GrammarType.$fReadHonorific5) -}
33ab5b5c9687d44421ffb5723e773fed
  $fReadHonorific5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Honorific)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Honorific)
                   GrammarType.$fReadHonorific6
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           GrammarType.Honorific))) -}
33ab5b5c9687d44421ffb5723e773fed
  $fReadHonorific6 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Honorific)
  {- Strictness: m,
     Unfolding: ((GrammarType.$fReadHonorific8,
                  GrammarType.$fReadHonorific7
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType.Honorific>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType.Honorific>_R))))) -}
33ab5b5c9687d44421ffb5723e773fed
  $fReadHonorific7 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType.Honorific -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType.Honorific -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType.FORM) -}
0f8db6bb8455bb17d7f0b13decbc767b
  $fReadHonorific8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FORM"#) -}
33ab5b5c9687d44421ffb5723e773fed
  $fReadHonorific9 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Honorific)
  {- Strictness: m,
     Unfolding: ((GrammarType.$fReadHonorific11,
                  GrammarType.$fReadHonorific10
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType.Honorific>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType.Honorific>_R))))) -}
33ab5b5c9687d44421ffb5723e773fed
  $fReadHonorific_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [GrammarType.Honorific]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarType.$fReadHonorific1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarType.Honorific]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarType.Honorific]>_R))) -}
33ab5b5c9687d44421ffb5723e773fed
  $fReadHonorific_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Honorific
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarType.$fReadHonorific2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarType.Honorific>_R)) -}
33ab5b5c9687d44421ffb5723e773fed
  $fReadHonorific_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarType.Honorific
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarType.Honorific
                   GrammarType.$fReadHonorific_$creadPrec
                   eta) -}
33ab5b5c9687d44421ffb5723e773fed
  $fReadHonorific_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarType.Honorific]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarType.Honorific]
                   ((GrammarType.$fReadHonorific_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarType.Honorific]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarType.Honorific]>_R)
                      @ [GrammarType.Honorific]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarType.Honorific]))) -}
7c6bccd0de5888f1bb886fc04db2be0f
  $fReadNumber :: GHC.Read.Read GrammarType.Number
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType.Number
                  GrammarType.$fReadNumber_$s$dmreadsPrec
                  GrammarType.$fReadNumber_$sreadListDefault
                  GrammarType.$fReadNumber_$creadPrec
                  GrammarType.$fReadNumber_$creadListPrec -}
7c6bccd0de5888f1bb886fc04db2be0f
  $fReadNumber1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarType.Number] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarType.Number] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarType.Number
                   GrammarType.$fReadNumber2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarType.Number>_R))
                   @ b
                   eta1) -}
7c6bccd0de5888f1bb886fc04db2be0f
  $fReadNumber10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType.Number -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType.Number -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType.PL) -}
33ec54a0ed518019fba2f151850f9cda
  $fReadNumber11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PL"#) -}
7c6bccd0de5888f1bb886fc04db2be0f
  $fReadNumber12 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Number)
  {- Strictness: m,
     Unfolding: ((GrammarType.$fReadNumber14,
                  GrammarType.$fReadNumber13
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType.Number>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType.Number>_R))))) -}
7c6bccd0de5888f1bb886fc04db2be0f
  $fReadNumber13 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType.Number -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType.Number -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType.PA) -}
6f3f61089c3b8e051d4793b7a7e18b7f
  $fReadNumber14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PA"#) -}
7c6bccd0de5888f1bb886fc04db2be0f
  $fReadNumber15 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Number)
  {- Strictness: m,
     Unfolding: ((GrammarType.$fReadNumber17,
                  GrammarType.$fReadNumber16
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType.Number>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType.Number>_R))))) -}
7c6bccd0de5888f1bb886fc04db2be0f
  $fReadNumber16 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType.Number -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType.Number -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType.TRI) -}
bfda3d7b43030978cde7fc45d1fc0161
  $fReadNumber17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TRI"#) -}
7c6bccd0de5888f1bb886fc04db2be0f
  $fReadNumber18 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Number)
  {- Strictness: m,
     Unfolding: ((GrammarType.$fReadNumber20,
                  GrammarType.$fReadNumber19
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType.Number>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType.Number>_R))))) -}
7c6bccd0de5888f1bb886fc04db2be0f
  $fReadNumber19 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType.Number -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType.Number -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType.DU) -}
7c6bccd0de5888f1bb886fc04db2be0f
  $fReadNumber2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarType.Number
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarType.Number
                   GrammarType.$fReadNumber3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarType.Number>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarType.Number>_R)))) -}
afbdde2c1096fc881cf40842c46816c6
  $fReadNumber20 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DU"#) -}
7c6bccd0de5888f1bb886fc04db2be0f
  $fReadNumber21 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Number)
  {- Strictness: m,
     Unfolding: ((GrammarType.$fReadNumber23,
                  GrammarType.$fReadNumber22
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType.Number>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType.Number>_R))))) -}
7c6bccd0de5888f1bb886fc04db2be0f
  $fReadNumber22 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType.Number -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType.Number -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType.SG) -}
d21f6c1fd2cf4e65520408dfea2d4967
  $fReadNumber23 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SG"#) -}
7c6bccd0de5888f1bb886fc04db2be0f
  $fReadNumber3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType.Number -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarType.Number -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarType.Number
                   GrammarType.$fReadNumber4
                   eta
                   @ b
                   eta1) -}
7c6bccd0de5888f1bb886fc04db2be0f
  $fReadNumber4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Number)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Number)
                   GrammarType.$fReadNumber21
                   GrammarType.$fReadNumber5) -}
7c6bccd0de5888f1bb886fc04db2be0f
  $fReadNumber5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Number)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Number)
                   GrammarType.$fReadNumber18
                   GrammarType.$fReadNumber6) -}
7c6bccd0de5888f1bb886fc04db2be0f
  $fReadNumber6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Number)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Number)
                   GrammarType.$fReadNumber15
                   GrammarType.$fReadNumber7) -}
7c6bccd0de5888f1bb886fc04db2be0f
  $fReadNumber7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Number)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Number)
                   GrammarType.$fReadNumber12
                   GrammarType.$fReadNumber8) -}
7c6bccd0de5888f1bb886fc04db2be0f
  $fReadNumber8 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Number)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Number)
                   GrammarType.$fReadNumber9
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Number))) -}
7c6bccd0de5888f1bb886fc04db2be0f
  $fReadNumber9 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Number)
  {- Strictness: m,
     Unfolding: ((GrammarType.$fReadNumber11,
                  GrammarType.$fReadNumber10
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType.Number>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType.Number>_R))))) -}
7c6bccd0de5888f1bb886fc04db2be0f
  $fReadNumber_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [GrammarType.Number]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarType.$fReadNumber1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarType.Number]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarType.Number]>_R))) -}
7c6bccd0de5888f1bb886fc04db2be0f
  $fReadNumber_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Number
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarType.$fReadNumber2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarType.Number>_R)) -}
7c6bccd0de5888f1bb886fc04db2be0f
  $fReadNumber_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarType.Number
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarType.Number
                   GrammarType.$fReadNumber_$creadPrec
                   eta) -}
7c6bccd0de5888f1bb886fc04db2be0f
  $fReadNumber_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarType.Number]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarType.Number]
                   ((GrammarType.$fReadNumber_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarType.Number]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarType.Number]>_R)
                      @ [GrammarType.Number]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarType.Number]))) -}
e521f63828d45d62f01915f44b5b0dc6
  $fReadSpecificity :: GHC.Read.Read GrammarType.Specificity
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType.Specificity
                  GrammarType.$fReadSpecificity_$s$dmreadsPrec
                  GrammarType.$fReadSpecificity_$sreadListDefault
                  GrammarType.$fReadSpecificity_$creadPrec
                  GrammarType.$fReadSpecificity_$creadListPrec -}
e521f63828d45d62f01915f44b5b0dc6
  $fReadSpecificity1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([GrammarType.Specificity] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [GrammarType.Specificity]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ GrammarType.Specificity
                   GrammarType.$fReadSpecificity2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <GrammarType.Specificity>_R))
                   @ b
                   eta1) -}
e521f63828d45d62f01915f44b5b0dc6
  $fReadSpecificity10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType.Specificity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType.Specificity
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType.SPEC) -}
2f97b0c64c5bd4d35b575b2b365b128a
  $fReadSpecificity11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SPEC"#) -}
e521f63828d45d62f01915f44b5b0dc6
  $fReadSpecificity2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP GrammarType.Specificity
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ GrammarType.Specificity
                   GrammarType.$fReadSpecificity3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <GrammarType.Specificity>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <GrammarType.Specificity>_R)))) -}
e521f63828d45d62f01915f44b5b0dc6
  $fReadSpecificity3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType.Specificity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: GrammarType.Specificity
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ GrammarType.Specificity
                   GrammarType.$fReadSpecificity4
                   eta
                   @ b
                   eta1) -}
e521f63828d45d62f01915f44b5b0dc6
  $fReadSpecificity4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Specificity)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Specificity)
                   GrammarType.$fReadSpecificity9
                   GrammarType.$fReadSpecificity5) -}
e521f63828d45d62f01915f44b5b0dc6
  $fReadSpecificity5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Specificity)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Specificity)
                   GrammarType.$fReadSpecificity6
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           GrammarType.Specificity))) -}
e521f63828d45d62f01915f44b5b0dc6
  $fReadSpecificity6 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Specificity)
  {- Strictness: m,
     Unfolding: ((GrammarType.$fReadSpecificity8,
                  GrammarType.$fReadSpecificity7
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType.Specificity>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType.Specificity>_R))))) -}
e521f63828d45d62f01915f44b5b0dc6
  $fReadSpecificity7 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (GrammarType.Specificity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: GrammarType.Specificity
                          -> Text.ParserCombinators.ReadP.P b ->
                 eta GrammarType.NSPEC) -}
c3283a53972de3614fcdbb7c9a397277
  $fReadSpecificity8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NSPEC"#) -}
e521f63828d45d62f01915f44b5b0dc6
  $fReadSpecificity9 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Specificity)
  {- Strictness: m,
     Unfolding: ((GrammarType.$fReadSpecificity11,
                  GrammarType.$fReadSpecificity10
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <GrammarType.Specificity>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <GrammarType.Specificity>_R))))) -}
e521f63828d45d62f01915f44b5b0dc6
  $fReadSpecificity_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [GrammarType.Specificity]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                GrammarType.$fReadSpecificity1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[GrammarType.Specificity]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[GrammarType.Specificity]>_R))) -}
e521f63828d45d62f01915f44b5b0dc6
  $fReadSpecificity_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec GrammarType.Specificity
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                GrammarType.$fReadSpecificity2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <GrammarType.Specificity>_R)) -}
e521f63828d45d62f01915f44b5b0dc6
  $fReadSpecificity_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS GrammarType.Specificity
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ GrammarType.Specificity
                   GrammarType.$fReadSpecificity_$creadPrec
                   eta) -}
e521f63828d45d62f01915f44b5b0dc6
  $fReadSpecificity_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [GrammarType.Specificity]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [GrammarType.Specificity]
                   ((GrammarType.$fReadSpecificity_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[GrammarType.Specificity]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[GrammarType.Specificity]>_R)
                      @ [GrammarType.Specificity]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [GrammarType.Specificity]))) -}
139c2ca991f21d8f2e5bf34c2a3359ca
  $fShowAnimacy :: GHC.Show.Show GrammarType.Animacy
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType.Animacy
                  GrammarType.$fShowAnimacy_$cshowsPrec
                  GrammarType.$fShowAnimacy_$cshow
                  GrammarType.$fShowAnimacy_$cshowList -}
139c2ca991f21d8f2e5bf34c2a3359ca
  $fShowAnimacy_$cshow :: GrammarType.Animacy -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarType.Animacy ->
                 GrammarType.$fShowAnimacy_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
139c2ca991f21d8f2e5bf34c2a3359ca
  $fShowAnimacy_$cshowList :: [GrammarType.Animacy] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarType.Animacy
                   GrammarType.$w$cshowsPrec) -}
139c2ca991f21d8f2e5bf34c2a3359ca
  $fShowAnimacy_$cshowsPrec ::
    GHC.Types.Int -> GrammarType.Animacy -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: GrammarType.Animacy
                   w2 :: GHC.Base.String ->
                 GrammarType.$w$cshowsPrec w1 w2) -}
cf12fb2514df090f443d91dc740e2284
  $fShowCase :: GHC.Show.Show GrammarType.Case
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType.Case
                  GrammarType.$fShowCase_$cshowsPrec
                  GrammarType.$fShowCase_$cshow
                  GrammarType.$fShowCase_$cshowList -}
cf12fb2514df090f443d91dc740e2284
  $fShowCase_$cshow :: GrammarType.Case -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarType.Case ->
                 GrammarType.$fShowCase_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
cf12fb2514df090f443d91dc740e2284
  $fShowCase_$cshowList :: [GrammarType.Case] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarType.Case
                   GrammarType.$w$cshowsPrec1) -}
cf12fb2514df090f443d91dc740e2284
  $fShowCase_$cshowsPrec ::
    GHC.Types.Int -> GrammarType.Case -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: GrammarType.Case
                   w2 :: GHC.Base.String ->
                 GrammarType.$w$cshowsPrec1 w1 w2) -}
63367633f56c545b9e4b2ee097a5fc2d
  $fShowDeclension :: GHC.Show.Show GrammarType.Declension
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType.Declension
                  GrammarType.$fShowDeclension_$cshowsPrec
                  GrammarType.$fShowDeclension_$cshow
                  GrammarType.$fShowDeclension_$cshowList -}
63367633f56c545b9e4b2ee097a5fc2d
  $fShowDeclension1 :: GrammarType.Declension -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: GrammarType.Declension w1 :: GHC.Base.String ->
                 case w of ww { GrammarType.Declension ww1 ->
                 GrammarType.$w$cshowsPrec2 0 ww1 w1 }) -}
1d645ba9332101c022218df95db0befa
  $fShowDeclension2 ::
    (OtherData.Syllable,
     (GHC.Base.Maybe GrammarType.Gender,
      GHC.Base.Maybe GrammarType.Animacy,
      GHC.Base.Maybe GrammarType.Case,
      GHC.Base.Maybe GrammarType.Number,
      GHC.Base.Maybe GrammarType.Honorific,
      GHC.Base.Maybe GrammarType.Definiteness,
      GHC.Base.Maybe GrammarType.Specificity))
    -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ w3 :: (OtherData.Syllable,
                          (GHC.Base.Maybe GrammarType.Gender,
                           GHC.Base.Maybe GrammarType.Animacy,
                           GHC.Base.Maybe GrammarType.Case,
                           GHC.Base.Maybe GrammarType.Number,
                           GHC.Base.Maybe GrammarType.Honorific,
                           GHC.Base.Maybe GrammarType.Definiteness,
                           GHC.Base.Maybe GrammarType.Specificity))
                   w4 :: GHC.Base.String[OneShot] ->
                 case w3 of ww { (,) ww1 ww2 ->
                 GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows9
                   (case ww1 of ww4 { OtherData.Syllable ww3 ww5 ww6 ->
                    OtherData.$w$cshowsPrec
                      0
                      ww3
                      ww5
                      ww6
                      (GHC.Types.:
                         @ GHC.Types.Char
                         GHC.Show.showList__1
                         (GHC.Show.$fShow(,)_$sgo
                            (\ w9 :: GHC.Base.String ->
                             case ww2 of ww7 { (,,,,,,) ww8 ww9 ww10 ww11 ww12 ww13 ww14 ->
                             GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.shows9
                               (let {
                                  a7 :: GHC.Base.String
                                  = GHC.Show.$fShow(,,,,,,)_$sgo
                                      (GHC.Show.$fShowMaybe_$cshowsPrec
                                         @ GrammarType.Animacy
                                         GrammarType.$fShowAnimacy
                                         GHC.Show.shows18
                                         ww9)
                                      (GHC.Types.:
                                         @ GHC.Show.ShowS
                                         (GHC.Show.$fShowMaybe_$cshowsPrec
                                            @ GrammarType.Case
                                            GrammarType.$fShowCase
                                            GHC.Show.shows18
                                            ww10)
                                         (GHC.Types.:
                                            @ GHC.Show.ShowS
                                            (GHC.Show.$fShowMaybe_$cshowsPrec
                                               @ GrammarType.Number
                                               GrammarType.$fShowNumber
                                               GHC.Show.shows18
                                               ww11)
                                            (GHC.Types.:
                                               @ GHC.Show.ShowS
                                               (GHC.Show.$fShowMaybe_$cshowsPrec
                                                  @ GrammarType.Honorific
                                                  GrammarType.$fShowHonorific
                                                  GHC.Show.shows18
                                                  ww12)
                                               (GHC.Types.:
                                                  @ GHC.Show.ShowS
                                                  (GHC.Show.$fShowMaybe_$cshowsPrec
                                                     @ GrammarType.Definiteness
                                                     GrammarType.$fShowDefiniteness
                                                     GHC.Show.shows18
                                                     ww13)
                                                  (GHC.Types.:
                                                     @ GHC.Show.ShowS
                                                     (GHC.Show.$fShowMaybe_$cshowsPrec
                                                        @ GrammarType.Specificity
                                                        GrammarType.$fShowSpecificity
                                                        GHC.Show.shows18
                                                        ww14)
                                                     (GHC.Types.[] @ GHC.Show.ShowS))))))
                                      (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w9)
                                } in
                                case ww8 of wild {
                                  GHC.Base.Nothing
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       GHC.Show.$fShowMaybe3
                                       (GHC.Types.: @ GHC.Types.Char GHC.Show.showList__1 a7)
                                  GHC.Base.Just b1
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       GHC.Show.$fShowMaybe1
                                       (GrammarType.$w$cshowsPrec3
                                          b1
                                          (GHC.Types.:
                                             @ GHC.Types.Char
                                             GHC.Show.showList__1
                                             a7)) }) })
                            (GHC.Types.[] @ GHC.Show.ShowS)
                            (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w4))) }) }) -}
b87ffa86f9c8bf558e69037478c71704
  $fShowDeclension3 ::
    (OtherData.Syllable,
     (GHC.Base.Maybe GrammarType.Gender,
      GHC.Base.Maybe GrammarType.Animacy,
      GHC.Base.Maybe GrammarType.Case,
      GHC.Base.Maybe GrammarType.Number,
      GHC.Base.Maybe GrammarType.Honorific,
      GHC.Base.Maybe GrammarType.Definiteness,
      GHC.Base.Maybe GrammarType.Specificity))
    -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ w3 :: (OtherData.Syllable,
                          (GHC.Base.Maybe GrammarType.Gender,
                           GHC.Base.Maybe GrammarType.Animacy,
                           GHC.Base.Maybe GrammarType.Case,
                           GHC.Base.Maybe GrammarType.Number,
                           GHC.Base.Maybe GrammarType.Honorific,
                           GHC.Base.Maybe GrammarType.Definiteness,
                           GHC.Base.Maybe GrammarType.Specificity))
                   w4 :: GHC.Base.String[OneShot] ->
                 case w3 of ww { (,) ww1 ww2 ->
                 GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows9
                   (case ww1 of ww4 { OtherData.Syllable ww3 ww5 ww6 ->
                    OtherData.$w$cshowsPrec
                      0
                      ww3
                      ww5
                      ww6
                      (GHC.Types.:
                         @ GHC.Types.Char
                         GHC.Show.showList__1
                         (GHC.Show.$fShow(,)_$sgo
                            (\ w9 :: GHC.Base.String ->
                             case ww2 of ww7 { (,,,,,,) ww8 ww9 ww10 ww11 ww12 ww13 ww14 ->
                             GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.shows9
                               (let {
                                  a7 :: GHC.Base.String
                                  = GHC.Show.$fShow(,,,,,,)_$sgo
                                      (GHC.Show.$fShowMaybe_$cshowsPrec
                                         @ GrammarType.Animacy
                                         GrammarType.$fShowAnimacy
                                         GHC.Show.shows18
                                         ww9)
                                      (GHC.Types.:
                                         @ GHC.Show.ShowS
                                         (GHC.Show.$fShowMaybe_$cshowsPrec
                                            @ GrammarType.Case
                                            GrammarType.$fShowCase
                                            GHC.Show.shows18
                                            ww10)
                                         (GHC.Types.:
                                            @ GHC.Show.ShowS
                                            (GHC.Show.$fShowMaybe_$cshowsPrec
                                               @ GrammarType.Number
                                               GrammarType.$fShowNumber
                                               GHC.Show.shows18
                                               ww11)
                                            (GHC.Types.:
                                               @ GHC.Show.ShowS
                                               (GHC.Show.$fShowMaybe_$cshowsPrec
                                                  @ GrammarType.Honorific
                                                  GrammarType.$fShowHonorific
                                                  GHC.Show.shows18
                                                  ww12)
                                               (GHC.Types.:
                                                  @ GHC.Show.ShowS
                                                  (GHC.Show.$fShowMaybe_$cshowsPrec
                                                     @ GrammarType.Definiteness
                                                     GrammarType.$fShowDefiniteness
                                                     GHC.Show.shows18
                                                     ww13)
                                                  (GHC.Types.:
                                                     @ GHC.Show.ShowS
                                                     (GHC.Show.$fShowMaybe_$cshowsPrec
                                                        @ GrammarType.Specificity
                                                        GrammarType.$fShowSpecificity
                                                        GHC.Show.shows18
                                                        ww14)
                                                     (GHC.Types.[] @ GHC.Show.ShowS))))))
                                      (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w9)
                                } in
                                case ww8 of wild {
                                  GHC.Base.Nothing
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       GHC.Show.$fShowMaybe3
                                       (GHC.Types.: @ GHC.Types.Char GHC.Show.showList__1 a7)
                                  GHC.Base.Just b1
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       GHC.Show.$fShowMaybe1
                                       (GrammarType.$w$cshowsPrec3
                                          b1
                                          (GHC.Types.:
                                             @ GHC.Types.Char
                                             GHC.Show.showList__1
                                             a7)) }) })
                            (GHC.Types.[] @ GHC.Show.ShowS)
                            (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w4))) }) }) -}
e82f2d9d9ae945267d2cfdb53cd8710a
  $fShowDeclension4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Declension "#) -}
c11ad694d3960e40e2483a5bbf16f839
  $fShowDeclension5 ::
    (OtherData.Syllable,
     (GHC.Base.Maybe GrammarType.Gender,
      GHC.Base.Maybe GrammarType.Animacy,
      GHC.Base.Maybe GrammarType.Case,
      GHC.Base.Maybe GrammarType.Number,
      GHC.Base.Maybe GrammarType.Honorific,
      GHC.Base.Maybe GrammarType.Definiteness,
      GHC.Base.Maybe GrammarType.Specificity))
    -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ w3 :: (OtherData.Syllable,
                          (GHC.Base.Maybe GrammarType.Gender,
                           GHC.Base.Maybe GrammarType.Animacy,
                           GHC.Base.Maybe GrammarType.Case,
                           GHC.Base.Maybe GrammarType.Number,
                           GHC.Base.Maybe GrammarType.Honorific,
                           GHC.Base.Maybe GrammarType.Definiteness,
                           GHC.Base.Maybe GrammarType.Specificity))
                   w4 :: GHC.Base.String[OneShot] ->
                 case w3 of ww { (,) ww1 ww2 ->
                 GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows9
                   (case ww1 of ww4 { OtherData.Syllable ww3 ww5 ww6 ->
                    OtherData.$w$cshowsPrec
                      0
                      ww3
                      ww5
                      ww6
                      (GHC.Types.:
                         @ GHC.Types.Char
                         GHC.Show.showList__1
                         (GHC.Show.$fShow(,)_$sgo
                            (\ w9 :: GHC.Base.String ->
                             case ww2 of ww7 { (,,,,,,) ww8 ww9 ww10 ww11 ww12 ww13 ww14 ->
                             GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.shows9
                               (let {
                                  a7 :: GHC.Base.String
                                  = GHC.Show.$fShow(,,,,,,)_$sgo
                                      (GHC.Show.$fShowMaybe_$cshowsPrec
                                         @ GrammarType.Animacy
                                         GrammarType.$fShowAnimacy
                                         GHC.Show.shows18
                                         ww9)
                                      (GHC.Types.:
                                         @ GHC.Show.ShowS
                                         (GHC.Show.$fShowMaybe_$cshowsPrec
                                            @ GrammarType.Case
                                            GrammarType.$fShowCase
                                            GHC.Show.shows18
                                            ww10)
                                         (GHC.Types.:
                                            @ GHC.Show.ShowS
                                            (GHC.Show.$fShowMaybe_$cshowsPrec
                                               @ GrammarType.Number
                                               GrammarType.$fShowNumber
                                               GHC.Show.shows18
                                               ww11)
                                            (GHC.Types.:
                                               @ GHC.Show.ShowS
                                               (GHC.Show.$fShowMaybe_$cshowsPrec
                                                  @ GrammarType.Honorific
                                                  GrammarType.$fShowHonorific
                                                  GHC.Show.shows18
                                                  ww12)
                                               (GHC.Types.:
                                                  @ GHC.Show.ShowS
                                                  (GHC.Show.$fShowMaybe_$cshowsPrec
                                                     @ GrammarType.Definiteness
                                                     GrammarType.$fShowDefiniteness
                                                     GHC.Show.shows18
                                                     ww13)
                                                  (GHC.Types.:
                                                     @ GHC.Show.ShowS
                                                     (GHC.Show.$fShowMaybe_$cshowsPrec
                                                        @ GrammarType.Specificity
                                                        GrammarType.$fShowSpecificity
                                                        GHC.Show.shows18
                                                        ww14)
                                                     (GHC.Types.[] @ GHC.Show.ShowS))))))
                                      (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w9)
                                } in
                                case ww8 of wild {
                                  GHC.Base.Nothing
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       GHC.Show.$fShowMaybe3
                                       (GHC.Types.: @ GHC.Types.Char GHC.Show.showList__1 a7)
                                  GHC.Base.Just b1
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       GHC.Show.$fShowMaybe1
                                       (GrammarType.$w$cshowsPrec3
                                          b1
                                          (GHC.Types.:
                                             @ GHC.Types.Char
                                             GHC.Show.showList__1
                                             a7)) }) })
                            (GHC.Types.[] @ GHC.Show.ShowS)
                            (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w4))) }) }) -}
63367633f56c545b9e4b2ee097a5fc2d
  $fShowDeclension_$cshow ::
    GrammarType.Declension -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: GrammarType.Declension ->
                 case w of ww { GrammarType.Declension ww1 ->
                 GrammarType.$w$cshow ww1 }) -}
63367633f56c545b9e4b2ee097a5fc2d
  $fShowDeclension_$cshowList ::
    [GrammarType.Declension] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarType.Declension
                   GrammarType.$fShowDeclension1) -}
63367633f56c545b9e4b2ee097a5fc2d
  $fShowDeclension_$cshowsPrec ::
    GHC.Types.Int -> GrammarType.Declension -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S,1*U(1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int
                   w1 :: GrammarType.Declension
                   w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { GrammarType.Declension ww3 ->
                 GrammarType.$w$cshowsPrec2 ww1 ww3 w2 } }) -}
0beb087cff99593226a9b8c5fd83dd7e
  $fShowDefiniteness :: GHC.Show.Show GrammarType.Definiteness
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType.Definiteness
                  GrammarType.$fShowDefiniteness_$cshowsPrec
                  GrammarType.$fShowDefiniteness_$cshow
                  GrammarType.$fShowDefiniteness_$cshowList -}
0beb087cff99593226a9b8c5fd83dd7e
  $fShowDefiniteness1 :: GrammarType.Definiteness -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarType.Definiteness eta :: GHC.Base.String ->
                 case ds of wild {
                   GrammarType.DEF
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           GrammarType.$fReadDefiniteness11)
                        eta
                   GrammarType.INDF
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           GrammarType.$fReadDefiniteness8)
                        eta }) -}
0beb087cff99593226a9b8c5fd83dd7e
  $fShowDefiniteness_$cshow ::
    GrammarType.Definiteness -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarType.Definiteness ->
                 case x of wild {
                   GrammarType.DEF -> GrammarType.$fReadDefiniteness11
                   GrammarType.INDF -> GrammarType.$fReadDefiniteness8 }) -}
0beb087cff99593226a9b8c5fd83dd7e
  $fShowDefiniteness_$cshowList ::
    [GrammarType.Definiteness] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarType.Definiteness
                   GrammarType.$fShowDefiniteness1) -}
0beb087cff99593226a9b8c5fd83dd7e
  $fShowDefiniteness_$cshowsPrec ::
    GHC.Types.Int -> GrammarType.Definiteness -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   ds1 :: GrammarType.Definiteness
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   GrammarType.DEF
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           GrammarType.$fReadDefiniteness11)
                        eta
                   GrammarType.INDF
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           GrammarType.$fReadDefiniteness8)
                        eta }) -}
313f54c997d1c2a7547cc74ee46f34a6
  $fShowGender :: GHC.Show.Show GrammarType.Gender
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType.Gender
                  GrammarType.$fShowGender_$cshowsPrec
                  GrammarType.$fShowGender_$cshow
                  GrammarType.$fShowGender_$cshowList -}
313f54c997d1c2a7547cc74ee46f34a6
  $fShowGender_$cshow :: GrammarType.Gender -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarType.Gender ->
                 GrammarType.$fShowGender_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
313f54c997d1c2a7547cc74ee46f34a6
  $fShowGender_$cshowList :: [GrammarType.Gender] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarType.Gender
                   GrammarType.$w$cshowsPrec3) -}
313f54c997d1c2a7547cc74ee46f34a6
  $fShowGender_$cshowsPrec ::
    GHC.Types.Int -> GrammarType.Gender -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: GrammarType.Gender
                   w2 :: GHC.Base.String ->
                 GrammarType.$w$cshowsPrec3 w1 w2) -}
3d4b6c2c5775c66a007d34fe0ec6258f
  $fShowGrammarSystem :: GHC.Show.Show GrammarType.GrammarSystem
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType.GrammarSystem
                  GrammarType.$fShowGrammarSystem_$cshowsPrec
                  GrammarType.$fShowGrammarSystem_$cshow
                  GrammarType.$fShowGrammarSystem_$cshowList -}
3d4b6c2c5775c66a007d34fe0ec6258f
  $fShowGrammarSystem1 :: GrammarType.GrammarSystem -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: GrammarType.GrammarSystem ->
                 case w of ww { GrammarType.GrammarSystem ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 GrammarType.$w$cshowsPrec5 0 ww1 ww2 ww3 ww4 ww5 ww6 ww7 }) -}
3d4b6c2c5775c66a007d34fe0ec6258f
  $fShowGrammarSystem_$cshow ::
    GrammarType.GrammarSystem -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarType.GrammarSystem ->
                 GrammarType.$fShowGrammarSystem_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
3d4b6c2c5775c66a007d34fe0ec6258f
  $fShowGrammarSystem_$cshowList ::
    [GrammarType.GrammarSystem] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarType.GrammarSystem
                   GrammarType.$fShowGrammarSystem1) -}
3d4b6c2c5775c66a007d34fe0ec6258f
  $fShowGrammarSystem_$cshowsPrec ::
    GHC.Types.Int -> GrammarType.GrammarSystem -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S,1*U(U)><S,1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: GrammarType.GrammarSystem ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { GrammarType.GrammarSystem ww3 ww4 ww5 ww6 ww7 ww8 ww9 ->
                 GrammarType.$w$cshowsPrec5 ww1 ww3 ww4 ww5 ww6 ww7 ww8 ww9 } }) -}
33ab5b5c9687d44421ffb5723e773fed
  $fShowHonorific :: GHC.Show.Show GrammarType.Honorific
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType.Honorific
                  GrammarType.$fShowHonorific_$cshowsPrec
                  GrammarType.$fShowHonorific_$cshow
                  GrammarType.$fShowHonorific_$cshowList -}
33ab5b5c9687d44421ffb5723e773fed
  $fShowHonorific1 :: GrammarType.Honorific -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarType.Honorific eta :: GHC.Base.String ->
                 case ds of wild {
                   GrammarType.FAM
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           GrammarType.$fReadHonorific11)
                        eta
                   GrammarType.FORM
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           GrammarType.$fReadHonorific8)
                        eta }) -}
33ab5b5c9687d44421ffb5723e773fed
  $fShowHonorific_$cshow :: GrammarType.Honorific -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarType.Honorific ->
                 case x of wild {
                   GrammarType.FAM -> GrammarType.$fReadHonorific11
                   GrammarType.FORM -> GrammarType.$fReadHonorific8 }) -}
33ab5b5c9687d44421ffb5723e773fed
  $fShowHonorific_$cshowList ::
    [GrammarType.Honorific] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarType.Honorific
                   GrammarType.$fShowHonorific1) -}
33ab5b5c9687d44421ffb5723e773fed
  $fShowHonorific_$cshowsPrec ::
    GHC.Types.Int -> GrammarType.Honorific -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   ds1 :: GrammarType.Honorific
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   GrammarType.FAM
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           GrammarType.$fReadHonorific11)
                        eta
                   GrammarType.FORM
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           GrammarType.$fReadHonorific8)
                        eta }) -}
7c6bccd0de5888f1bb886fc04db2be0f
  $fShowNumber :: GHC.Show.Show GrammarType.Number
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType.Number
                  GrammarType.$fShowNumber_$cshowsPrec
                  GrammarType.$fShowNumber_$cshow
                  GrammarType.$fShowNumber_$cshowList -}
7c6bccd0de5888f1bb886fc04db2be0f
  $fShowNumber_$cshow :: GrammarType.Number -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarType.Number ->
                 GrammarType.$fShowNumber_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
7c6bccd0de5888f1bb886fc04db2be0f
  $fShowNumber_$cshowList :: [GrammarType.Number] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarType.Number
                   GrammarType.$w$cshowsPrec4) -}
7c6bccd0de5888f1bb886fc04db2be0f
  $fShowNumber_$cshowsPrec ::
    GHC.Types.Int -> GrammarType.Number -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int
                   w1 :: GrammarType.Number
                   w2 :: GHC.Base.String ->
                 GrammarType.$w$cshowsPrec4 w1 w2) -}
e521f63828d45d62f01915f44b5b0dc6
  $fShowSpecificity :: GHC.Show.Show GrammarType.Specificity
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GrammarType.Specificity
                  GrammarType.$fShowSpecificity_$cshowsPrec
                  GrammarType.$fShowSpecificity_$cshow
                  GrammarType.$fShowSpecificity_$cshowList -}
e521f63828d45d62f01915f44b5b0dc6
  $fShowSpecificity1 :: GrammarType.Specificity -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: GrammarType.Specificity eta :: GHC.Base.String ->
                 case ds of wild {
                   GrammarType.SPEC
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           GrammarType.$fReadSpecificity11)
                        eta
                   GrammarType.NSPEC
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           GrammarType.$fReadSpecificity8)
                        eta }) -}
e521f63828d45d62f01915f44b5b0dc6
  $fShowSpecificity_$cshow ::
    GrammarType.Specificity -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GrammarType.Specificity ->
                 case x of wild {
                   GrammarType.SPEC -> GrammarType.$fReadSpecificity11
                   GrammarType.NSPEC -> GrammarType.$fReadSpecificity8 }) -}
e521f63828d45d62f01915f44b5b0dc6
  $fShowSpecificity_$cshowList ::
    [GrammarType.Specificity] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GrammarType.Specificity
                   GrammarType.$fShowSpecificity1) -}
e521f63828d45d62f01915f44b5b0dc6
  $fShowSpecificity_$cshowsPrec ::
    GHC.Types.Int -> GrammarType.Specificity -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   ds1 :: GrammarType.Specificity
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   GrammarType.SPEC
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           GrammarType.$fReadSpecificity11)
                        eta
                   GrammarType.NSPEC
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           GrammarType.$fReadSpecificity8)
                        eta }) -}
aa831caa58cca564bfb758bd79771b7f
  $s$fShow[] :: GHC.Show.Show [GrammarType.Specificity]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ [GrammarType.Specificity]
                  GrammarType.$s$fShow[]_$s$fShow[]_$cshowsPrec
                  GrammarType.$s$fShow[]1
                  GrammarType.$s$fShow[]_$s$fShow[]_$cshowList -}
1e8351f0533c1e965b86d8d65abbddad
  $s$fShow[]1 :: [GrammarType.Specificity] -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: [GrammarType.Specificity] ->
                 GHC.Show.showList__
                   @ GrammarType.Specificity
                   GrammarType.$fShowSpecificity1
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
399f6c3d0279ea6eccc8b4e8b8010106
  $s$fShow[]2 :: GHC.Show.Show [GrammarType.Number]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ [GrammarType.Number]
                  GrammarType.$s$fShow[]_$s$fShow[]_$cshowsPrec1
                  GrammarType.$s$fShow[]_$s$fShow[]_$cshow
                  GrammarType.$s$fShow[]_$s$fShow[]_$cshowList1 -}
a6dd283ffe20ddea90f79787f9545777
  $s$fShow[]3 :: GHC.Show.Show [GrammarType.Honorific]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ [GrammarType.Honorific]
                  GrammarType.$s$fShow[]_$s$fShow[]_$cshowsPrec2
                  GrammarType.$s$fShow[]4
                  GrammarType.$s$fShow[]_$s$fShow[]_$cshowList2 -}
9985602ddfb176170fcb8e1018b70bc1
  $s$fShow[]4 :: [GrammarType.Honorific] -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: [GrammarType.Honorific] ->
                 GHC.Show.showList__
                   @ GrammarType.Honorific
                   GrammarType.$fShowHonorific1
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
4305ff3eba2d1d86cb13a17e839170e3
  $s$fShow[]5 :: GHC.Show.Show [GrammarType.Gender]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ [GrammarType.Gender]
                  GrammarType.$s$fShow[]_$s$fShow[]_$cshowsPrec3
                  GrammarType.$s$fShow[]_$s$fShow[]_$cshow1
                  GrammarType.$s$fShow[]_$s$fShow[]_$cshowList3 -}
6cf403dc31ded1308ecb8207e825df3a
  $s$fShow[]6 :: GHC.Show.Show [GrammarType.Definiteness]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ [GrammarType.Definiteness]
                  GrammarType.$s$fShow[]_$s$fShow[]_$cshowsPrec4
                  GrammarType.$s$fShow[]7
                  GrammarType.$s$fShow[]_$s$fShow[]_$cshowList4 -}
de385740ef5607a3c5aeb0bcb65e187f
  $s$fShow[]7 :: [GrammarType.Definiteness] -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: [GrammarType.Definiteness] ->
                 GHC.Show.showList__
                   @ GrammarType.Definiteness
                   GrammarType.$fShowDefiniteness1
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
0a37c0f28cb4b9b74434f135c6b7f83b
  $s$fShow[]8 :: GHC.Show.Show [GrammarType.Case]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ [GrammarType.Case]
                  GrammarType.$s$fShow[]_$s$fShow[]_$cshowsPrec5
                  GrammarType.$s$fShow[]_$s$fShow[]_$cshow2
                  GrammarType.$s$fShow[]_$s$fShow[]_$cshowList5 -}
e8c60cae9457a146a8b40d1b166bc3e9
  $s$fShow[]9 :: GHC.Show.Show [GrammarType.Animacy]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ [GrammarType.Animacy]
                  GrammarType.$s$fShow[]_$s$fShow[]_$cshowsPrec6
                  GrammarType.$s$fShow[]_$s$fShow[]_$cshow3
                  GrammarType.$s$fShow[]_$s$fShow[]_$cshowList6 -}
bc433a3d336f66c62be36b757b955d35
  $s$fShow[]_$s$fShow[]_$cshow ::
    [GrammarType.Number] -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: [GrammarType.Number] ->
                 GrammarType.$fShowNumber_$cshowList
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
99caa6149ea8040fca0538230ae70b08
  $s$fShow[]_$s$fShow[]_$cshow1 ::
    [GrammarType.Gender] -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: [GrammarType.Gender] ->
                 GrammarType.$fShowGender_$cshowList
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
0561a79323b51538504092905b889e1c
  $s$fShow[]_$s$fShow[]_$cshow2 ::
    [GrammarType.Case] -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: [GrammarType.Case] ->
                 GrammarType.$fShowCase_$cshowList
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
368035d72805ba8f0b6ca3898f185650
  $s$fShow[]_$s$fShow[]_$cshow3 ::
    [GrammarType.Animacy] -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: [GrammarType.Animacy] ->
                 GrammarType.$fShowAnimacy_$cshowList
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
b76652f897d1e558f3f9da82163ae473
  $s$fShow[]_$s$fShow[]_$cshowList ::
    [[GrammarType.Specificity]] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: [[GrammarType.Specificity]] eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ [GrammarType.Specificity]
                   GrammarType.$fShowSpecificity_$cshowList
                   eta
                   eta1) -}
832a401cdeefbfef92adadb24ac675b6
  $s$fShow[]_$s$fShow[]_$cshowList1 ::
    [[GrammarType.Number]] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: [[GrammarType.Number]] eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ [GrammarType.Number]
                   GrammarType.$fShowNumber_$cshowList
                   eta
                   eta1) -}
f3c583b2df0d9e5b4b0875bcdf00947c
  $s$fShow[]_$s$fShow[]_$cshowList2 ::
    [[GrammarType.Honorific]] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: [[GrammarType.Honorific]] eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ [GrammarType.Honorific]
                   GrammarType.$fShowHonorific_$cshowList
                   eta
                   eta1) -}
665abc0e3d2c08b0fbf8dd9d89a5a4f0
  $s$fShow[]_$s$fShow[]_$cshowList3 ::
    [[GrammarType.Gender]] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: [[GrammarType.Gender]] eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ [GrammarType.Gender]
                   GrammarType.$fShowGender_$cshowList
                   eta
                   eta1) -}
927113ff28d524a9a3f13270aa44990e
  $s$fShow[]_$s$fShow[]_$cshowList4 ::
    [[GrammarType.Definiteness]] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: [[GrammarType.Definiteness]] eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ [GrammarType.Definiteness]
                   GrammarType.$fShowDefiniteness_$cshowList
                   eta
                   eta1) -}
c8342d7f9505af94d1514145fb9d5dc0
  $s$fShow[]_$s$fShow[]_$cshowList5 ::
    [[GrammarType.Case]] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: [[GrammarType.Case]] eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ [GrammarType.Case]
                   GrammarType.$fShowCase_$cshowList
                   eta
                   eta1) -}
ad0c457023ba38663782c48f5a3b1d07
  $s$fShow[]_$s$fShow[]_$cshowList6 ::
    [[GrammarType.Animacy]] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: [[GrammarType.Animacy]] eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ [GrammarType.Animacy]
                   GrammarType.$fShowAnimacy_$cshowList
                   eta
                   eta1) -}
3b1f8af3823fba3259984370fd3531e8
  $s$fShow[]_$s$fShow[]_$cshowsPrec ::
    GHC.Types.Int -> [GrammarType.Specificity] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ds :: GHC.Types.Int
                   eta :: [GrammarType.Specificity]
                   eta1 :: GHC.Base.String ->
                 GrammarType.$fShowSpecificity_$cshowList eta eta1) -}
11eb845f96e750cbb1ec93807cbb49a4
  $s$fShow[]_$s$fShow[]_$cshowsPrec1 ::
    GHC.Types.Int -> [GrammarType.Number] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ds :: GHC.Types.Int
                   eta :: [GrammarType.Number]
                   eta1 :: GHC.Base.String ->
                 GrammarType.$fShowNumber_$cshowList eta eta1) -}
6fcebd106389a2b5b206f4af41b4dccf
  $s$fShow[]_$s$fShow[]_$cshowsPrec2 ::
    GHC.Types.Int -> [GrammarType.Honorific] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ds :: GHC.Types.Int
                   eta :: [GrammarType.Honorific]
                   eta1 :: GHC.Base.String ->
                 GrammarType.$fShowHonorific_$cshowList eta eta1) -}
7e98708f119fbbaf60e1601783d84bfd
  $s$fShow[]_$s$fShow[]_$cshowsPrec3 ::
    GHC.Types.Int -> [GrammarType.Gender] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ds :: GHC.Types.Int
                   eta :: [GrammarType.Gender]
                   eta1 :: GHC.Base.String ->
                 GrammarType.$fShowGender_$cshowList eta eta1) -}
d51e639cc4046b8520fb8217967010a1
  $s$fShow[]_$s$fShow[]_$cshowsPrec4 ::
    GHC.Types.Int -> [GrammarType.Definiteness] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ds :: GHC.Types.Int
                   eta :: [GrammarType.Definiteness]
                   eta1 :: GHC.Base.String ->
                 GrammarType.$fShowDefiniteness_$cshowList eta eta1) -}
e9d6bf87318d482eeed21aa918253e65
  $s$fShow[]_$s$fShow[]_$cshowsPrec5 ::
    GHC.Types.Int -> [GrammarType.Case] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ds :: GHC.Types.Int
                   eta :: [GrammarType.Case]
                   eta1 :: GHC.Base.String ->
                 GrammarType.$fShowCase_$cshowList eta eta1) -}
ae5fe870e48201a3151e73a1a9533a13
  $s$fShow[]_$s$fShow[]_$cshowsPrec6 ::
    GHC.Types.Int -> [GrammarType.Animacy] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ds :: GHC.Types.Int
                   eta :: [GrammarType.Animacy]
                   eta1 :: GHC.Base.String ->
                 GrammarType.$fShowAnimacy_$cshowList eta eta1) -}
1fbfc52e3f268494f3aa93431c343810
  $w$cshow ::
    [(OtherData.Syllable,
      (GHC.Base.Maybe GrammarType.Gender,
       GHC.Base.Maybe GrammarType.Animacy,
       GHC.Base.Maybe GrammarType.Case,
       GHC.Base.Maybe GrammarType.Number,
       GHC.Base.Maybe GrammarType.Honorific,
       GHC.Base.Maybe GrammarType.Definiteness,
       GHC.Base.Maybe GrammarType.Specificity))]
    -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>, Inline: [0],
     Unfolding: (\ ww :: [(OtherData.Syllable,
                           (GHC.Base.Maybe GrammarType.Gender,
                            GHC.Base.Maybe GrammarType.Animacy,
                            GHC.Base.Maybe GrammarType.Case,
                            GHC.Base.Maybe GrammarType.Number,
                            GHC.Base.Maybe GrammarType.Honorific,
                            GHC.Base.Maybe GrammarType.Definiteness,
                            GHC.Base.Maybe GrammarType.Specificity))] ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   GrammarType.$fShowDeclension4
                   (GHC.Show.showList__
                      @ (OtherData.Syllable,
                         (GHC.Base.Maybe GrammarType.Gender,
                          GHC.Base.Maybe GrammarType.Animacy,
                          GHC.Base.Maybe GrammarType.Case,
                          GHC.Base.Maybe GrammarType.Number,
                          GHC.Base.Maybe GrammarType.Honorific,
                          GHC.Base.Maybe GrammarType.Definiteness,
                          GHC.Base.Maybe GrammarType.Specificity))
                      GrammarType.$fShowDeclension5
                      ww
                      (GHC.Types.[] @ GHC.Types.Char))) -}
139c2ca991f21d8f2e5bf34c2a3359ca
  $w$cshowsPrec ::
    GrammarType.Animacy -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: GrammarType.Animacy w1 :: GHC.Base.String ->
                 case w of wild {
                   GrammarType.AN
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType.$fReadAnimacy23 w1
                   GrammarType.HUM
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType.$fReadAnimacy20 w1
                   GrammarType.NHUM
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType.$fReadAnimacy17 w1
                   GrammarType.ZO
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType.$fReadAnimacy14 w1
                   GrammarType.INAN
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        GrammarType.$fReadAnimacy11
                        w1 }) -}
cf12fb2514df090f443d91dc740e2284
  $w$cshowsPrec1 ::
    GrammarType.Case -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: GrammarType.Case w1 :: GHC.Base.String ->
                 case w of wild {
                   GrammarType.NOM
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType.$fReadCase43 w1
                   GrammarType.ACC
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType.$fReadCase40 w1
                   GrammarType.ERG
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType.$fReadCase37 w1
                   GrammarType.GEN
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType.$fReadCase34 w1
                   GrammarType.DAT
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType.$fReadCase31 w1
                   GrammarType.LOC
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType.$fReadCase28 w1
                   GrammarType.PREP
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType.$fReadCase25 w1
                   GrammarType.ABL
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType.$fReadCase22 w1
                   GrammarType.INS
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType.$fReadCase19 w1
                   GrammarType.VOC
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType.$fReadCase16 w1 }) -}
903d451a3da98dde28226c2c21ca0cde
  $w$cshowsPrec2 ::
    GHC.Prim.Int#
    -> [(OtherData.Syllable,
         (GHC.Base.Maybe GrammarType.Gender,
          GHC.Base.Maybe GrammarType.Animacy,
          GHC.Base.Maybe GrammarType.Case,
          GHC.Base.Maybe GrammarType.Number,
          GHC.Base.Maybe GrammarType.Honorific,
          GHC.Base.Maybe GrammarType.Definiteness,
          GHC.Base.Maybe GrammarType.Specificity))]
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: [(OtherData.Syllable,
                            (GHC.Base.Maybe GrammarType.Gender,
                             GHC.Base.Maybe GrammarType.Animacy,
                             GHC.Base.Maybe GrammarType.Case,
                             GHC.Base.Maybe GrammarType.Number,
                             GHC.Base.Maybe GrammarType.Honorific,
                             GHC.Base.Maybe GrammarType.Definiteness,
                             GHC.Base.Maybe GrammarType.Specificity))]
                   w :: GHC.Base.String ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        GrammarType.$fShowDeclension4
                        (GHC.Show.showList__
                           @ (OtherData.Syllable,
                              (GHC.Base.Maybe GrammarType.Gender,
                               GHC.Base.Maybe GrammarType.Animacy,
                               GHC.Base.Maybe GrammarType.Case,
                               GHC.Base.Maybe GrammarType.Number,
                               GHC.Base.Maybe GrammarType.Honorific,
                               GHC.Base.Maybe GrammarType.Definiteness,
                               GHC.Base.Maybe GrammarType.Specificity))
                           GrammarType.$fShowDeclension3
                           ww1
                           w)
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           GrammarType.$fShowDeclension4
                           (GHC.Show.showList__
                              @ (OtherData.Syllable,
                                 (GHC.Base.Maybe GrammarType.Gender,
                                  GHC.Base.Maybe GrammarType.Animacy,
                                  GHC.Base.Maybe GrammarType.Case,
                                  GHC.Base.Maybe GrammarType.Number,
                                  GHC.Base.Maybe GrammarType.Honorific,
                                  GHC.Base.Maybe GrammarType.Definiteness,
                                  GHC.Base.Maybe GrammarType.Specificity))
                              GrammarType.$fShowDeclension2
                              ww1
                              (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 w))) }) -}
313f54c997d1c2a7547cc74ee46f34a6
  $w$cshowsPrec3 ::
    GrammarType.Gender -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: GrammarType.Gender w1 :: GHC.Base.String ->
                 case w of wild {
                   GrammarType.M
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType.$fReadGender19 w1
                   GrammarType.F
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType.$fReadGender16 w1
                   GrammarType.COM
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType.$fReadGender13 w1
                   GrammarType.N
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType.$fReadGender10 w1 }) -}
7c6bccd0de5888f1bb886fc04db2be0f
  $w$cshowsPrec4 ::
    GrammarType.Number -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: GrammarType.Number w1 :: GHC.Base.String ->
                 case w of wild {
                   GrammarType.SG
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType.$fReadNumber23 w1
                   GrammarType.DU
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType.$fReadNumber20 w1
                   GrammarType.TRI
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType.$fReadNumber17 w1
                   GrammarType.PA
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType.$fReadNumber14 w1
                   GrammarType.PL
                   -> GHC.Base.++ @ GHC.Types.Char GrammarType.$fReadNumber11 w1 }) -}
045721fcd32a8f0b7cf613f76ccafa7a
  $w$cshowsPrec5 ::
    GHC.Prim.Int#
    -> GHC.Base.Maybe [GrammarType.Gender]
    -> GHC.Base.Maybe [GrammarType.Animacy]
    -> GHC.Base.Maybe [GrammarType.Case]
    -> GHC.Base.Maybe [GrammarType.Number]
    -> GHC.Base.Maybe [GrammarType.Honorific]
    -> GHC.Base.Maybe [GrammarType.Definiteness]
    -> GHC.Base.Maybe [GrammarType.Specificity]
    -> GHC.Show.ShowS
  {- Arity: 8,
     Strictness: <L,U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0] -}
139c2ca991f21d8f2e5bf34c2a3359ca
  data Animacy = AN | HUM | NHUM | ZO | INAN
    Promotable
cf12fb2514df090f443d91dc740e2284
  data Case
    = NOM | ACC | ERG | GEN | DAT | LOC | PREP | ABL | INS | VOC
    Promotable
63367633f56c545b9e4b2ee097a5fc2d
  data Declension
    = Declension [(OtherData.Syllable,
                   (GHC.Base.Maybe GrammarType.Gender,
                    GHC.Base.Maybe GrammarType.Animacy,
                    GHC.Base.Maybe GrammarType.Case,
                    GHC.Base.Maybe GrammarType.Number,
                    GHC.Base.Maybe GrammarType.Honorific,
                    GHC.Base.Maybe GrammarType.Definiteness,
                    GHC.Base.Maybe GrammarType.Specificity))]
0beb087cff99593226a9b8c5fd83dd7e
  data Definiteness = DEF | INDF
    Promotable
313f54c997d1c2a7547cc74ee46f34a6
  data Gender = M | F | COM | N
    Promotable
3d4b6c2c5775c66a007d34fe0ec6258f
  data GrammarSystem
    = GrammarSystem {gSys :: GHC.Base.Maybe [GrammarType.Gender],
                     aSys :: GHC.Base.Maybe [GrammarType.Animacy],
                     cSys :: GHC.Base.Maybe [GrammarType.Case],
                     nSys :: GHC.Base.Maybe [GrammarType.Number],
                     hSys :: GHC.Base.Maybe [GrammarType.Honorific],
                     dSys :: GHC.Base.Maybe [GrammarType.Definiteness],
                     sSys :: GHC.Base.Maybe [GrammarType.Specificity]}
    Promotable
33ab5b5c9687d44421ffb5723e773fed
  data Honorific = FAM | FORM
    Promotable
7c6bccd0de5888f1bb886fc04db2be0f
  data Number = SG | DU | TRI | PA | PL
    Promotable
e521f63828d45d62f01915f44b5b0dc6
  data Specificity = SPEC | NSPEC
    Promotable
027bd6019e742dfab017ef24abcb3f32
  aSys ::
    GrammarType.GrammarSystem -> GHC.Base.Maybe [GrammarType.Animacy]
  RecSel GrammarType.GrammarSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLLL),1*U(A,1*U,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarType.GrammarSystem ->
                 case ds of wild { GrammarType.GrammarSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds2 }) -}
1b66ed5965caed7f29aa2330faf7c662
  cSys ::
    GrammarType.GrammarSystem -> GHC.Base.Maybe [GrammarType.Case]
  RecSel GrammarType.GrammarSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLLL),1*U(A,A,1*U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarType.GrammarSystem ->
                 case ds of wild { GrammarType.GrammarSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds3 }) -}
c73401b250eac2315f5da7e0b4d7cb38
  dSys ::
    GrammarType.GrammarSystem
    -> GHC.Base.Maybe [GrammarType.Definiteness]
  RecSel GrammarType.GrammarSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLSL),1*U(A,A,A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarType.GrammarSystem ->
                 case ds of wild { GrammarType.GrammarSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds6 }) -}
d936a8ecd2e8a694169029834cc7f8d8
  gSys ::
    GrammarType.GrammarSystem -> GHC.Base.Maybe [GrammarType.Gender]
  RecSel GrammarType.GrammarSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLLL),1*U(1*U,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarType.GrammarSystem ->
                 case ds of wild { GrammarType.GrammarSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds1 }) -}
e86dd9681d6d39b67e27cd0356a53b8b
  hSys ::
    GrammarType.GrammarSystem -> GHC.Base.Maybe [GrammarType.Honorific]
  RecSel GrammarType.GrammarSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSLL),1*U(A,A,A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarType.GrammarSystem ->
                 case ds of wild { GrammarType.GrammarSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds5 }) -}
e9f41558815b604aa0132816466ac16f
  nSys ::
    GrammarType.GrammarSystem -> GHC.Base.Maybe [GrammarType.Number]
  RecSel GrammarType.GrammarSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLLL),1*U(A,A,A,1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarType.GrammarSystem ->
                 case ds of wild { GrammarType.GrammarSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds4 }) -}
f8a44c314724313846e7d56a86486a80
  sSys ::
    GrammarType.GrammarSystem
    -> GHC.Base.Maybe [GrammarType.Specificity]
  RecSel GrammarType.GrammarSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLS),1*U(A,A,A,A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: GrammarType.GrammarSystem ->
                 case ds of wild { GrammarType.GrammarSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds7 }) -}
instance GHC.Classes.Eq [GrammarType.Animacy]
  = GrammarType.$fEqAnimacy
instance GHC.Classes.Eq [GrammarType.Case] = GrammarType.$fEqCase
instance GHC.Classes.Eq [GrammarType.Definiteness]
  = GrammarType.$fEqDefiniteness
instance GHC.Classes.Eq [GrammarType.Gender]
  = GrammarType.$fEqGender
instance GHC.Classes.Eq [GrammarType.Honorific]
  = GrammarType.$fEqHonorific
instance GHC.Classes.Eq [GrammarType.Number]
  = GrammarType.$fEqNumber
instance GHC.Classes.Eq [GrammarType.Specificity]
  = GrammarType.$fEqSpecificity
instance GHC.Read.Read [GrammarType.Animacy]
  = GrammarType.$fReadAnimacy
instance GHC.Read.Read [GrammarType.Case] = GrammarType.$fReadCase
instance GHC.Read.Read [GrammarType.Definiteness]
  = GrammarType.$fReadDefiniteness
instance GHC.Read.Read [GrammarType.Gender]
  = GrammarType.$fReadGender
instance GHC.Read.Read [GrammarType.Honorific]
  = GrammarType.$fReadHonorific
instance GHC.Read.Read [GrammarType.Number]
  = GrammarType.$fReadNumber
instance GHC.Read.Read [GrammarType.Specificity]
  = GrammarType.$fReadSpecificity
instance GHC.Show.Show [GrammarType.Animacy]
  = GrammarType.$fShowAnimacy
instance GHC.Show.Show [GrammarType.Case] = GrammarType.$fShowCase
instance GHC.Show.Show [GrammarType.Declension]
  = GrammarType.$fShowDeclension
instance GHC.Show.Show [GrammarType.Definiteness]
  = GrammarType.$fShowDefiniteness
instance GHC.Show.Show [GrammarType.Gender]
  = GrammarType.$fShowGender
instance GHC.Show.Show [GrammarType.GrammarSystem]
  = GrammarType.$fShowGrammarSystem
instance GHC.Show.Show [GrammarType.Honorific]
  = GrammarType.$fShowHonorific
instance GHC.Show.Show [GrammarType.Number]
  = GrammarType.$fShowNumber
instance GHC.Show.Show [GrammarType.Specificity]
  = GrammarType.$fShowSpecificity
"SPEC/GrammarType $dmreadsPrec @ Animacy" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                      GrammarType.Animacy
  GHC.Read.$dmreadsPrec @ GrammarType.Animacy $dRead
  = GrammarType.$fReadAnimacy_$s$dmreadsPrec
"SPEC/GrammarType $dmreadsPrec @ Case" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                   GrammarType.Case
  GHC.Read.$dmreadsPrec @ GrammarType.Case $dRead
  = GrammarType.$fReadCase_$s$dmreadsPrec
"SPEC/GrammarType $dmreadsPrec @ Definiteness" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                           GrammarType.Definiteness
  GHC.Read.$dmreadsPrec @ GrammarType.Definiteness $dRead
  = GrammarType.$fReadDefiniteness_$s$dmreadsPrec
"SPEC/GrammarType $dmreadsPrec @ Gender" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                     GrammarType.Gender
  GHC.Read.$dmreadsPrec @ GrammarType.Gender $dRead
  = GrammarType.$fReadGender_$s$dmreadsPrec
"SPEC/GrammarType $dmreadsPrec @ Honorific" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                        GrammarType.Honorific
  GHC.Read.$dmreadsPrec @ GrammarType.Honorific $dRead
  = GrammarType.$fReadHonorific_$s$dmreadsPrec
"SPEC/GrammarType $dmreadsPrec @ Number" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                     GrammarType.Number
  GHC.Read.$dmreadsPrec @ GrammarType.Number $dRead
  = GrammarType.$fReadNumber_$s$dmreadsPrec
"SPEC/GrammarType $dmreadsPrec @ Specificity" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                          GrammarType.Specificity
  GHC.Read.$dmreadsPrec @ GrammarType.Specificity $dRead
  = GrammarType.$fReadSpecificity_$s$dmreadsPrec
"SPEC/GrammarType $fShow[] @ Animacy" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                  GrammarType.Animacy
  GHC.Show.$fShow[] @ GrammarType.Animacy $dShow
  = GrammarType.$s$fShow[]9
"SPEC/GrammarType $fShow[] @ Case" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                               GrammarType.Case
  GHC.Show.$fShow[] @ GrammarType.Case $dShow
  = GrammarType.$s$fShow[]8
"SPEC/GrammarType $fShow[] @ Definiteness" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                       GrammarType.Definiteness
  GHC.Show.$fShow[] @ GrammarType.Definiteness $dShow
  = GrammarType.$s$fShow[]6
"SPEC/GrammarType $fShow[] @ Gender" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                 GrammarType.Gender
  GHC.Show.$fShow[] @ GrammarType.Gender $dShow
  = GrammarType.$s$fShow[]5
"SPEC/GrammarType $fShow[] @ Honorific" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                    GrammarType.Honorific
  GHC.Show.$fShow[] @ GrammarType.Honorific $dShow
  = GrammarType.$s$fShow[]3
"SPEC/GrammarType $fShow[] @ Number" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                 GrammarType.Number
  GHC.Show.$fShow[] @ GrammarType.Number $dShow
  = GrammarType.$s$fShow[]2
"SPEC/GrammarType $fShow[] @ Specificity" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                      GrammarType.Specificity
  GHC.Show.$fShow[] @ GrammarType.Specificity $dShow
  = GrammarType.$s$fShow[]
"SPEC/GrammarType $fShow[]_$cshow @ Animacy" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                         GrammarType.Animacy
  GHC.Show.$fShow[]_$cshow @ GrammarType.Animacy $dShow
  = GrammarType.$s$fShow[]_$s$fShow[]_$cshow3
"SPEC/GrammarType $fShow[]_$cshow @ Case" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                      GrammarType.Case
  GHC.Show.$fShow[]_$cshow @ GrammarType.Case $dShow
  = GrammarType.$s$fShow[]_$s$fShow[]_$cshow2
"SPEC/GrammarType $fShow[]_$cshow @ Gender" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                        GrammarType.Gender
  GHC.Show.$fShow[]_$cshow @ GrammarType.Gender $dShow
  = GrammarType.$s$fShow[]_$s$fShow[]_$cshow1
"SPEC/GrammarType $fShow[]_$cshow @ Number" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                        GrammarType.Number
  GHC.Show.$fShow[]_$cshow @ GrammarType.Number $dShow
  = GrammarType.$s$fShow[]_$s$fShow[]_$cshow
"SPEC/GrammarType $fShow[]_$cshowList @ Animacy" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                             GrammarType.Animacy
  GHC.Show.$fShow[]_$cshowList @ GrammarType.Animacy $dShow
  = GrammarType.$s$fShow[]_$s$fShow[]_$cshowList6
"SPEC/GrammarType $fShow[]_$cshowList @ Case" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                          GrammarType.Case
  GHC.Show.$fShow[]_$cshowList @ GrammarType.Case $dShow
  = GrammarType.$s$fShow[]_$s$fShow[]_$cshowList5
"SPEC/GrammarType $fShow[]_$cshowList @ Definiteness" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                                  GrammarType.Definiteness
  GHC.Show.$fShow[]_$cshowList @ GrammarType.Definiteness $dShow
  = GrammarType.$s$fShow[]_$s$fShow[]_$cshowList4
"SPEC/GrammarType $fShow[]_$cshowList @ Gender" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                            GrammarType.Gender
  GHC.Show.$fShow[]_$cshowList @ GrammarType.Gender $dShow
  = GrammarType.$s$fShow[]_$s$fShow[]_$cshowList3
"SPEC/GrammarType $fShow[]_$cshowList @ Honorific" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                               GrammarType.Honorific
  GHC.Show.$fShow[]_$cshowList @ GrammarType.Honorific $dShow
  = GrammarType.$s$fShow[]_$s$fShow[]_$cshowList2
"SPEC/GrammarType $fShow[]_$cshowList @ Number" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                            GrammarType.Number
  GHC.Show.$fShow[]_$cshowList @ GrammarType.Number $dShow
  = GrammarType.$s$fShow[]_$s$fShow[]_$cshowList1
"SPEC/GrammarType $fShow[]_$cshowList @ Specificity" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                                 GrammarType.Specificity
  GHC.Show.$fShow[]_$cshowList @ GrammarType.Specificity $dShow
  = GrammarType.$s$fShow[]_$s$fShow[]_$cshowList
"SPEC/GrammarType $fShow[]_$cshowsPrec @ Animacy" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                              GrammarType.Animacy
  GHC.Show.$fShow[]_$cshowsPrec @ GrammarType.Animacy $dShow
  = GrammarType.$s$fShow[]_$s$fShow[]_$cshowsPrec6
"SPEC/GrammarType $fShow[]_$cshowsPrec @ Case" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                           GrammarType.Case
  GHC.Show.$fShow[]_$cshowsPrec @ GrammarType.Case $dShow
  = GrammarType.$s$fShow[]_$s$fShow[]_$cshowsPrec5
"SPEC/GrammarType $fShow[]_$cshowsPrec @ Definiteness" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                                   GrammarType.Definiteness
  GHC.Show.$fShow[]_$cshowsPrec @ GrammarType.Definiteness $dShow
  = GrammarType.$s$fShow[]_$s$fShow[]_$cshowsPrec4
"SPEC/GrammarType $fShow[]_$cshowsPrec @ Gender" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                             GrammarType.Gender
  GHC.Show.$fShow[]_$cshowsPrec @ GrammarType.Gender $dShow
  = GrammarType.$s$fShow[]_$s$fShow[]_$cshowsPrec3
"SPEC/GrammarType $fShow[]_$cshowsPrec @ Honorific" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                                GrammarType.Honorific
  GHC.Show.$fShow[]_$cshowsPrec @ GrammarType.Honorific $dShow
  = GrammarType.$s$fShow[]_$s$fShow[]_$cshowsPrec2
"SPEC/GrammarType $fShow[]_$cshowsPrec @ Number" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                             GrammarType.Number
  GHC.Show.$fShow[]_$cshowsPrec @ GrammarType.Number $dShow
  = GrammarType.$s$fShow[]_$s$fShow[]_$cshowsPrec1
"SPEC/GrammarType $fShow[]_$cshowsPrec @ Specificity" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                                  GrammarType.Specificity
  GHC.Show.$fShow[]_$cshowsPrec @ GrammarType.Specificity $dShow
  = GrammarType.$s$fShow[]_$s$fShow[]_$cshowsPrec
"SPEC/GrammarType readListDefault @ Animacy" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                         GrammarType.Animacy
  GHC.Read.readListDefault @ GrammarType.Animacy $dRead
  = GrammarType.$fReadAnimacy_$sreadListDefault
"SPEC/GrammarType readListDefault @ Case" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                      GrammarType.Case
  GHC.Read.readListDefault @ GrammarType.Case $dRead
  = GrammarType.$fReadCase_$sreadListDefault
"SPEC/GrammarType readListDefault @ Definiteness" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                              GrammarType.Definiteness
  GHC.Read.readListDefault @ GrammarType.Definiteness $dRead
  = GrammarType.$fReadDefiniteness_$sreadListDefault
"SPEC/GrammarType readListDefault @ Gender" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                        GrammarType.Gender
  GHC.Read.readListDefault @ GrammarType.Gender $dRead
  = GrammarType.$fReadGender_$sreadListDefault
"SPEC/GrammarType readListDefault @ Honorific" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                           GrammarType.Honorific
  GHC.Read.readListDefault @ GrammarType.Honorific $dRead
  = GrammarType.$fReadHonorific_$sreadListDefault
"SPEC/GrammarType readListDefault @ Number" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                        GrammarType.Number
  GHC.Read.readListDefault @ GrammarType.Number $dRead
  = GrammarType.$fReadNumber_$sreadListDefault
"SPEC/GrammarType readListDefault @ Specificity" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                             GrammarType.Specificity
  GHC.Read.readListDefault @ GrammarType.Specificity $dRead
  = GrammarType.$fReadSpecificity_$sreadListDefault
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

