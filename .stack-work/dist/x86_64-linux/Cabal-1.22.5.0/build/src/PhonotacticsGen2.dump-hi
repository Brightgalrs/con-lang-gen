
==================== FINAL INTERFACE ====================
2016-10-17 20:49:37.834554 UTC

interface conla_1eA9qWUPH9nBowcXqqaV8r:PhonotacticsGen2 7103
  interface hash: 1e9d5e2558f8360e31c178497ee7b1ed
  ABI hash: d87784e8c6b16bb65eef600d5207f998
  export-list hash: eeb4fc49f527130e45ddd26216cfa05a
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 962af636f8e927040c7daa9c21457292
  sig of: Nothing
  used TH splices: False
  where
exports:
  PhonotacticsGen2.makeSonHier
  PhonotacticsGen2.retrieveSon
module dependencies: PhonemeType2
package dependencies: MonadPrompt-1.0.0.5@Monad_5vpMHuuRBzi4bKjpRN3A9L
                      MonadRandom-0.4.2.3@Monad_I7tEJH7vOtsKQS7CpG48fz
                      array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA base-4.8.2.0
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59
                      erf-2.0.0.0@erf_6l78BnvLL4b2mWYp3HJJxX
                      flexible-defaults-0.0.1.2@flexi_70LqvhG3vbS8bRvV8pHtMk
                      ghc-prim-0.4.0.0 integer-gmp-1.0.0.0
                      math-functions-0.1.7.0@mathf_BN6S7j0ar3LC4TsnYu0us5
                      mersenne-random-pure64-0.2.0.5@merse_42koSxEhmjwBS69WXi19xI
                      monad-loops-0.4.3@monad_LQiHRUYhFhYBU7nOOWDOrb
                      mtl-2.2.1@mtl_Aue4leSeVkpKLsfHIV51E8
                      mwc-random-0.13.4.0@mwcra_0lrQ1SkkNA85sa8eZ98xQk
                      old-locale-1.0.0.7@oldlo_7h2Gx6mVPJ5Gheca8j9Mpe
                      old-time-1.1.0.3@oldti_JVjJvknZJ0JKghfag2Jw2L
                      pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC
                      primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3
                      random-extras-0.19@rando_11jAc932BDRD7ydjCrRr4L
                      random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW
                      random-1.1@rando_9Kgekc9yEaLHLNUuw6paWL
                      random-shuffle-0.0.4@rando_9kOz9tEn1526ShtWz8x59X
                      random-fu-0.2.7.0@rando_HO0DW1nA2fDCxZJ62mvJHr
                      rvar-0.2.0.3@rvar_HDSuhGFxwNTDX4EfF6w8WG
                      stateref-0.3@state_KptOBHsY85L8YzpDAos2Hi
                      stm-2.4.4.1@stm_EyxFXFfnfY05IrjGaqCxeD
                      syb-0.6@syb_4kccWaTe3QZLxAMQYKgEyE template-haskell-2.10.0.0
                      th-extras-0.0.0.4@thext_LRY1RUMy7ShLl2tqhMyHdO
                      time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn
                      transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF
                      vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln
orphans: MonadRandom-0.4.2.3@Monad_I7tEJH7vOtsKQS7CpG48fz:Control.Monad.Random
         base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         mersenne-random-pure64-0.2.0.5@merse_42koSxEhmjwBS69WXi19xI:System.Random.Mersenne.Pure64
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source.IO
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source.MWC
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source.PureMT
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source.StdGen
         stateref-0.3@state_KptOBHsY85L8YzpDAos2Hi:Data.StateRef.Instances
         stateref-0.3@state_KptOBHsY85L8YzpDAos2Hi:Data.StateRef.Instances.STM
         stm-2.4.4.1@stm_EyxFXFfnfY05IrjGaqCxeD:Control.Monad.STM
         syb-0.6@syb_4kccWaTe3QZLxAMQYKgEyE:Data.Generics.Instances
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Calendar.Gregorian
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Format.Parse
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.LocalTime.LocalTime
         transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.Trans.Error
         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Fusion.Bundle
         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Sequence
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
                         mwc-random-0.13.4.0@mwcra_0lrQ1SkkNA85sa8eZ98xQk:System.Random.MWC
                         pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3:Control.Monad.Primitive
                         template-haskell-2.10.0.0:Language.Haskell.TH.Syntax
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Primitive
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed.Base
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:Data.Functor 5c701b0af1708f0192a25dfe14ce6274
import  -/  base-4.8.2.0:Data.List 3f0782c8d4bf50eecefcd5ea1798aac8
import  -/  base-4.8.2.0:Data.Maybe 1cb58de2b04ee3c0c0a7dc9201184aff
import  -/  base-4.8.2.0:Data.OldList d8fd80b0e14aa085ce6219cd89dad356
import  -/  base-4.8.2.0:Data.Traversable 7576318f4ef8587ad947f87012b65abf
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  PhonemeType2 a9247e25a5379dedeed4d4661db0033f
  exports: 65413a119a4e8e15b6921e348e21398d
  ALVEOLOPALATAL 6edc53d6a9633f5a2b2463bf152c94ef
  APPROXIMANT 8e992136fce538200d4070732d96c18f
  Diphthong 4ed3d8413861709394530a4ca3b3d760
  FLAP 8351454d2171c30eae2625c7246fe0d0
  LAPPROXIMANT 702a000ccd5b4bcbd01a299bbee30154
  LFLAP 26d90a6ea07d64cc29e8cfe8bcd1745f
  NASAL e239d4e0e5c92c1d3ed5a316e5c8db76
  Phoneme 3abb4073c17ef07e2eb6d2446d16852f
  TRILL 9825e2d4abe3ff0f199ac80ea298864e
  Vowel 423983cba00b3a4daecba49c9b6a2681
  manner 02f7ce6247e618afbd29f9dad29c7dd6
  place 8d658c2b83d84d3d6a3dfbf6f77f5a55
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  random-extras-0.19@rando_11jAc932BDRD7ydjCrRr4L:Data.Random.Extras 5dc1684f88e3f2655bfb5d7aca60bf5c
import  -/  random-fu-0.2.7.0@rando_HO0DW1nA2fDCxZJ62mvJHr:Data.Random 355d6844bb1b3189cb19ec0007f6f130
import  -/  random-fu-0.2.7.0@rando_HO0DW1nA2fDCxZJ62mvJHr:Data.Random.Distribution.Uniform ce34c1edd0e59e868fcf9e0bf914c4ef
import  -/  rvar-0.2.0.3@rvar_HDSuhGFxwNTDX4EfF6w8WG:Data.RVar 9b7fbdb5f1778e76b8a65f45a17cccb1
1cf8b6a345752763d0d474ac8e078861
  $wgo ::
    [PhonemeType2.Phoneme]
    -> (# [PhonemeType2.Phoneme], [PhonemeType2.Phoneme] #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
42bfe8529d782f3b91480029356c59d1
  $wgo1 ::
    [PhonemeType2.Phoneme]
    -> (# [PhonemeType2.Phoneme], [PhonemeType2.Phoneme] #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
8a97400f894bc59e2ff97a67523a0aa1
  $wgo2 ::
    [PhonemeType2.Phoneme]
    -> (# [PhonemeType2.Phoneme], [PhonemeType2.Phoneme] #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
05935e2085c61c94ca32ef5b90d970c4
  furtherDivide ::
    [PhonemeType2.Phoneme]
    -> [[PhonemeType2.Phoneme]]
    -> Data.RVar.RVar [[PhonemeType2.Phoneme]]
  {- Arity: 2, Strictness: <S,1*U><L,U> -}
01f2275a8ce2c50f32105699603d198c
  makeSonHier ::
    [PhonemeType2.Phoneme] -> Data.RVar.RVar [[PhonemeType2.Phoneme]]
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ cons :: [PhonemeType2.Phoneme] ->
                 let {
                   ds :: ([PhonemeType2.Phoneme], [PhonemeType2.Phoneme])
                   = case PhonotacticsGen2.$wgo2 cons of ww { (#,#) ww1 ww2 ->
                     (ww1, ww2) }
                 } in
                 let {
                   a5 :: Data.RVar.RVar [[PhonemeType2.Phoneme]]
                   = case ds of wild { (,) g cons2 ->
                     PhonotacticsGen2.furtherDivide
                       g
                       (GHC.Types.[] @ [PhonemeType2.Phoneme]) }
                 } in
                 let {
                   ds1 :: ([PhonemeType2.Phoneme], [PhonemeType2.Phoneme])
                   = case ds of wild { (,) g cons2 ->
                     case PhonotacticsGen2.$wgo1 cons2 of ww { (#,#) ww1 ww2 ->
                     (ww1, ww2) } }
                 } in
                 let {
                   a6 :: Data.RVar.RVar [[PhonemeType2.Phoneme]]
                   = case ds1 of wild { (,) l cons3 ->
                     PhonotacticsGen2.furtherDivide
                       l
                       (GHC.Types.[] @ [PhonemeType2.Phoneme]) }
                 } in
                 let {
                   ds2 :: ([PhonemeType2.Phoneme], [PhonemeType2.Phoneme])
                   = case ds1 of wild { (,) l cons3 ->
                     case PhonotacticsGen2.$wgo cons3 of ww { (#,#) ww1 ww2 ->
                     (ww1, ww2) } }
                 } in
                 let {
                   a7 :: Data.RVar.RVar [[PhonemeType2.Phoneme]]
                   = case ds2 of wild { (,) n o ->
                     PhonotacticsGen2.furtherDivide
                       n
                       (GHC.Types.[] @ [PhonemeType2.Phoneme]) }
                 } in
                 let {
                   a8 :: Data.RVar.RVar [[PhonemeType2.Phoneme]]
                   = case ds2 of wild { (,) n o ->
                     PhonotacticsGen2.furtherDivide
                       o
                       (GHC.Types.[] @ [PhonemeType2.Phoneme]) }
                 } in
                 let {
                   a9 :: [Data.RVar.RVarT
                            Data.Functor.Identity.Identity [[PhonemeType2.Phoneme]]]
                   = GHC.Types.:
                       @ (Data.RVar.RVarT
                            Data.Functor.Identity.Identity [[PhonemeType2.Phoneme]])
                       a8
                       (GHC.Types.[]
                          @ (Data.RVar.RVarT
                               Data.Functor.Identity.Identity [[PhonemeType2.Phoneme]]))
                 } in
                 let {
                   a10 :: [Data.RVar.RVarT
                             Data.Functor.Identity.Identity [[PhonemeType2.Phoneme]]]
                   = GHC.Types.:
                       @ (Data.RVar.RVarT
                            Data.Functor.Identity.Identity [[PhonemeType2.Phoneme]])
                       a7
                       a9
                 } in
                 let {
                   a11 :: [Data.RVar.RVarT
                             Data.Functor.Identity.Identity [[PhonemeType2.Phoneme]]]
                   = GHC.Types.:
                       @ (Data.RVar.RVarT
                            Data.Functor.Identity.Identity [[PhonemeType2.Phoneme]])
                       a6
                       a10
                 } in
                 let {
                   a12 :: [Data.RVar.RVarT
                             Data.Functor.Identity.Identity [[PhonemeType2.Phoneme]]]
                   = GHC.Types.:
                       @ (Data.RVar.RVarT
                            Data.Functor.Identity.Identity [[PhonemeType2.Phoneme]])
                       a5
                       a11
                 } in
                 (\ @ b1
                    eta :: [[PhonemeType2.Phoneme]] -> b1
                    eta1 :: forall a13.
                            Control.Monad.Prompt.Lift
                              Data.Random.Source.Internal.Prim.Prim
                              Data.Functor.Identity.Identity
                              a13
                            -> (a13 -> b1) -> b1 ->
                  PhonotacticsGen2.makeSonHier1
                    a12
                    @ b1
                    (\ x :: [[[PhonemeType2.Phoneme]]] ->
                     case PhonotacticsGen2.makeSonHier_go x of vx { DEFAULT -> eta vx })
                    eta1)
                   `cast`
                 (Trans
                      (Sym (Control.Monad.Prompt.NTCo:Prompt[0]
                                <Control.Monad.Prompt.Lift
                                   Data.Random.Source.Internal.Prim.Prim
                                   Data.Functor.Identity.Identity>_R
                                <[[PhonemeType2.Phoneme]]>_R))
                      (Trans
                           (Sym (Control.Monad.Prompt.NTCo:PromptT[0]
                                     <Data.Random.Source.Internal.Prim.Prim>_R
                                     <Data.Functor.Identity.Identity>_R))
                           (Sym (Data.RVar.NTCo:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[[PhonemeType2.Phoneme]]>_N))) -}
0b97e9ed4ad2dc7e5bfe5b2854706f24
  makeSonHier1 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [[PhonemeType2.Phoneme]]]
    -> forall b.
       ([[[PhonemeType2.Phoneme]]] -> b)
       -> (forall a.
           Control.Monad.Prompt.Lift
             Data.Random.Source.Internal.Prim.Prim
             Data.Functor.Identity.Identity
             a
           -> (a -> b) -> b)
       -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,C(U)><L,U> -}
c612dd05e568876f95834f66207a5b78
  makeSonHier_go ::
    [[[PhonemeType2.Phoneme]]] -> [[PhonemeType2.Phoneme]]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
9cb866c565054a0703ca4915f697401c
  retrieveSon ::
    [[PhonemeType2.Phoneme]] -> PhonemeType2.Phoneme -> GHC.Types.Int
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ sonHier :: [[PhonemeType2.Phoneme]]
                   ds :: PhonemeType2.Phoneme ->
                 case ds of wild {
                   DEFAULT
                   -> case PhonotacticsGen2.retrieveSon_go
                             (GHC.Base.map
                                @ [PhonemeType2.Phoneme]
                                @ GHC.Types.Bool
                                (GHC.List.elem
                                   @ PhonemeType2.Phoneme
                                   PhonemeType2.$fEqPhoneme
                                   wild)
                                (GHC.List.reverse1
                                   @ [PhonemeType2.Phoneme]
                                   sonHier
                                   (GHC.Types.[] @ [PhonemeType2.Phoneme])))
                             0 of wild1 {
                        [] -> Data.Maybe.fromJust1 @ GHC.Types.Int : a5 ds1 -> a5 }
                   PhonemeType2.Vowel ds1 ds2 ds3 ds4
                   -> case GHC.List.$wlenAcc
                             @ [PhonemeType2.Phoneme]
                             sonHier
                             0 of ww2 { DEFAULT ->
                      GHC.Types.I# (GHC.Prim.+# ww2 1) }
                   PhonemeType2.Diphthong ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8
                   -> case GHC.List.$wlenAcc
                             @ [PhonemeType2.Phoneme]
                             sonHier
                             0 of ww2 { DEFAULT ->
                      GHC.Types.I# (GHC.Prim.+# ww2 1) } }) -}
04e2ddca546d5d039ad411f70e200b36
  retrieveSon_go ::
    [GHC.Types.Bool] -> GHC.Prim.Int# -> [GHC.Types.Int]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U> -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

