
==================== FINAL INTERFACE ====================
2016-12-06 20:49:10.167546 UTC

interface conla_1eA9qWUPH9nBowcXqqaV8r:Translate 7103
  interface hash: 175a39a54cb580fc58d406f7f035853a
  ABI hash: 5c5a1011f449056418f763ef063e504e
  export-list hash: b56a6abf5ac51e67e1c954a0693b7f7c
  orphan hash: 987b803f3953942f391e3e2172151ed2
  flag hash: 5d774d2eb7a24578afae116cd337b129
  sig of: Nothing
  used TH splices: False
  where
exports:
  Translate.parseParseTree
  Translate.parsePhrase
module dependencies: EnglishStuff GrammarData InflectionData
                     InflectionGen MorphologyGen OtherData Parse PhonemeData PhonemeGen
                     PhonotacticsGen Romanization Syllabification WordGen
package dependencies: MonadPrompt-1.0.0.5@Monad_5vpMHuuRBzi4bKjpRN3A9L
                      MonadRandom-0.4.2.3@Monad_I7tEJH7vOtsKQS7CpG48fz
                      array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA base-4.8.2.0
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59
                      erf-2.0.0.0@erf_6l78BnvLL4b2mWYp3HJJxX
                      flexible-defaults-0.0.1.2@flexi_70LqvhG3vbS8bRvV8pHtMk
                      ghc-prim-0.4.0.0 integer-gmp-1.0.0.0
                      math-functions-0.1.7.0@mathf_BN6S7j0ar3LC4TsnYu0us5
                      mersenne-random-pure64-0.2.0.5@merse_42koSxEhmjwBS69WXi19xI
                      monad-loops-0.4.3@monad_LQiHRUYhFhYBU7nOOWDOrb
                      mtl-2.2.1@mtl_Aue4leSeVkpKLsfHIV51E8
                      mwc-random-0.13.4.0@mwcra_0lrQ1SkkNA85sa8eZ98xQk
                      old-locale-1.0.0.7@oldlo_7h2Gx6mVPJ5Gheca8j9Mpe
                      old-time-1.1.0.3@oldti_JVjJvknZJ0JKghfag2Jw2L
                      pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC
                      primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3
                      random-extras-0.19@rando_11jAc932BDRD7ydjCrRr4L
                      random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW
                      random-1.1@rando_9Kgekc9yEaLHLNUuw6paWL
                      random-shuffle-0.0.4@rando_9kOz9tEn1526ShtWz8x59X
                      random-fu-0.2.7.0@rando_HO0DW1nA2fDCxZJ62mvJHr
                      rvar-0.2.0.3@rvar_HDSuhGFxwNTDX4EfF6w8WG
                      stateref-0.3@state_KptOBHsY85L8YzpDAos2Hi
                      stm-2.4.4.1@stm_EyxFXFfnfY05IrjGaqCxeD
                      syb-0.6@syb_4kccWaTe3QZLxAMQYKgEyE template-haskell-2.10.0.0
                      th-extras-0.0.0.4@thext_LRY1RUMy7ShLl2tqhMyHdO
                      time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn
                      transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF
                      vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln
orphans: MonadRandom-0.4.2.3@Monad_I7tEJH7vOtsKQS7CpG48fz:Control.Monad.Random
         base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         conla_1eA9qWUPH9nBowcXqqaV8r:InflectionData
         mersenne-random-pure64-0.2.0.5@merse_42koSxEhmjwBS69WXi19xI:System.Random.Mersenne.Pure64
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source.IO
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source.MWC
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source.PureMT
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source.StdGen
         stateref-0.3@state_KptOBHsY85L8YzpDAos2Hi:Data.StateRef.Instances
         stateref-0.3@state_KptOBHsY85L8YzpDAos2Hi:Data.StateRef.Instances.STM
         stm-2.4.4.1@stm_EyxFXFfnfY05IrjGaqCxeD:Control.Monad.STM
         syb-0.6@syb_4kccWaTe3QZLxAMQYKgEyE:Data.Generics.Instances
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Calendar.Gregorian
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Format.Parse
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.LocalTime.LocalTime
         transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.Trans.Error
         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Fusion.Bundle
         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Sequence
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
                         mwc-random-0.13.4.0@mwcra_0lrQ1SkkNA85sa8eZ98xQk:System.Random.MWC
                         pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3:Control.Monad.Primitive
                         template-haskell-2.10.0.0:Language.Haskell.TH.Syntax
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Primitive
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed.Base
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:Data.Functor 5c701b0af1708f0192a25dfe14ce6274
import  -/  base-4.8.2.0:Data.List 3f0782c8d4bf50eecefcd5ea1798aac8
import  -/  base-4.8.2.0:Data.Maybe 1cb58de2b04ee3c0c0a7dc9201184aff
import  -/  base-4.8.2.0:Data.OldList d8fd80b0e14aa085ce6219cd89dad356
import  -/  base-4.8.2.0:Data.Tuple 012ad951a59a9d85fe1de36a2f012986
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  EnglishStuff 30352b0668338860bb3d1043975078bc
  exports: d870fefb6d32ab7767f4021269761af5
  englishGrammar dac08adaea85885d6d1a879305c73ec7
  englishManifest d7ce05aa6c43876a3cc3ab74f3ad2e2a
import  -/  GrammarData 3ac8f2b878a3acac75da28c3be99b3ac
  exports: fca5595c19286020653fdf4f375d962b
  Bar 04a49f52bfdb87c5c968d67f70ef7770
  CompFinal 4218b98d2cad94623d418f06c7daaf74
  CompInitial 8b5437a083d2f9791daaa4f92c16bab9
  Grammar 54b1b32e84410d13fc0ab1d24cef787f
  Leaf 854b88a1edb0bc7c2616829b2043abca
  Leaf 0c62203b93e11b844f77275212ff8c48
  LeafInfl 9e17ad607979bee5b617c85915f0d22b
  LeafNull 4e9ad3ec990a58beede0acb9204f1cc6
  NoAffixHop e58eeed187ea908b7fa653adc99b562e
  NoVtoIMove fa030db0cac4cf3934fe81872fe328d4
  Null 982ba6ad329ab6ca91933a50f43208f8
  ObjFinal 15b0449e6839227f4fa099fe50a91592
  OblAffixHop ec1f08cb309e90abdaf0c18a4682b13a
  OblItoCMove 471fba2b63cac8f316f9f6c9c4b0c2b7
  OblVtoIMove b9a4dfb51917976a57c9d70a3d84dac5
  OblWHMove 498581a1c6ddb483056a9b23410b61f5
  Phrase 04a49f52bfdb87c5c968d67f70ef7770
  Ques 970ff4399831bbf39b5b29c1f3c50cfd
  SubInitial a5ae71a2fa5a793a64a5571dccaaae89
  XBarA f4c6b09a94656da0b2de37249fc61186
  XBarC 896c497df4e3b343f4d7607367ba9354
  XP c8723937057217adbac9e39ed4d17e29
  XPNull b03b5e758af2a98e295b07d4be0c16b7
  getAH 8921262fa73de9c65a89f59c3b0fc8c3
  getCI a0a26fad587439b6dca88a28896fc1c5
  getItoC feb64d2f99e2b23075e3c6828c774513
  getOF 895a99bad4ed86ed24854c872aac16e2
  getSI 2d1a4ddf9089665b698dfbfb775a671c
  getVtoI c099dcaa803be48944776e61e142ad78
  getWHM dc8454ca703345b8e77193e6ca2e9ef6
  leafInfl 464f6a5249211005047c50b8063bcadc
  leafLC 45cba8eff52ea59f47ae232ba851460c
  phraseIl 3bbfae639db157f0fc356843d528f5d4
  phraseLC 3f23d0f80af86e20f7a6858d6c9da4f3
import  -/  InflectionData 3d10fd8ebdfb88f2d9b18403b3318120
  exports: bbf9a431e828cdbe291def24777d4f2e
  Adpo ae6c4eb1603ee2b9293013fe28704b38
  Animacy 3fb8f806ac431419336914d62e0692e1
  Aspect 3260581e2888098e95013c9746eb2927
  Case ed810d7ab6970052c9ee31d75d4a74f7
  Comp a3fa8e1efc9d38546131e089d8f7066d
  Definiteness f57cbd9dbed35919833216936d0e066e
  Det 33acabcfcb31b5ca0b3ffc1c226e1882
  Evidentiality 8c39249ddb7859f10b018a2526e04a45
  Express eb822898078c54f198699344a3fb2c63
  Express ce522c1d99b503cc50c6a04abbeb7ec2
  Gender 8b595aff125f95a2b35fe330b0ba7fad
  Honorific 38ff9a9c45f96d99123b457fda219bfb
  Infl 1f1ae73165bfad127b3752d581548f3c
  LexCat b0a24ad20939906e8d87ed3073f32603
  ManifestSystem e7fb9cb536022bc8f9fdd7f94d3c9e4a
  Mood 170a49091e965c69ca2b81c9942aa234
  NoExpress d6b74cdc58afb01056b09c31a809a97b
  Noun e589ece5d60db99d20ba6977cc50f48e
  Number c1e8fbfb7380effdacb7c7c192e40bf5
  Person 02346c3aafaeac9909a5db7a01e8ca09
  Polarity ad1fe4829d26ee371daeb2b0168138e4
  Specificity a4a6522da9f32c4a22fdcdb048233e77
  Tense b64289664290fdc9c5510c85a7afdd78
  Topic 91b970df1d2f65a770d84bd1b0e168b5
  Transitivity c432d94948e8418512e7b069e8d02e7a
  UANI 0f52e32d71289197f85ca66e7cf31d08
  UASP c9e55752e739be74cf569e8a1680b5a8
  UCAS d91ff9a7aafa8dc8ec0d8fe6daba4c0e
  UDEF d980b1338a696f17d0eb42a47de3f180
  UEVI eba40e6cf3a32c282c65ef55642af960
  UGEN 9442e976bcf803ebf60129e8ceb469a4
  UHON b1c2eefdbb0c5de6131126757921b33a
  UMOO df44882aeafa40109ff7666c992cb593
  UNUM 7df66c12348e1482d665394e08c74d04
  UPER 861bc63c211121db736140ea4f13a1b9
  UPOL 25cb7ac8f6234bd5dc9fa85a958047c6
  USPE 180327128dc811f484d47954f86ed279
  UTEN a3d370ee9e285eb621d131a02319d72a
  UTOP fe06e926ce923313384b18193d012f4a
  UTRA 8c0ca851f56438f969c21ce5b0990ae2
  UVOI a178ca8bc823ecac5648dde065c7bedf
  UVOL 29d9f9eeebb319660819148d4677e069
  Verb be92a9eca6a47f52d128c949ff565852
  Voice 1f59333afb1b3b92a8af1e5489e1e630
  Volition 91017ab7ea71228801f74c069cd5baf7
  getExp c4032392244123b24859852724b5f517
  manSysCombos 7b847354675f79c9ffb5926dc973e8b1
import  -/  Parse 21f02fd1f7656f1d7acaa140c89a2697
  exports: 7d5a300813558f11558e3844f3efe942
  parseWord a5e79c59071bc0faf05b870b949d95ac
import  -/  PhonemeData 408b6488aa28ce44ef05793241013f6f
  exports: c711b36c9b7415c6d00ea9681146dbcb
  Phoneme 78c280a9bf84c920fdcdc1bfa9515e2f
  Word 4e1579ce9a1ea812805b7e69ae8f8d98
  Word 82eaddf6262316ad93815378773a62ff
  getMorphemes fc2bbcdea07c559e95a4da4877c57866
import  -/  Romanization 804bca94f08cbe6d41992a68b525e575
  exports: 71e3484a4b1fb5c752fcd3291232e7ff
  romanizeWord 7f9c217ededf0559d0727e8e0fd891e3
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
b7f80f07e50c3deb5891a57e728bc282
  $s$fEq(,) ::
    GHC.Classes.Eq ([GHC.Types.Char], InflectionData.LexCat)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ ([GHC.Types.Char], InflectionData.LexCat)
                  (GHC.Classes.$fEq(,)_$c==
                     @ [GHC.Types.Char]
                     @ InflectionData.LexCat
                     GHC.Classes.$fEq[]_$s$fEq[]1
                     InflectionData.$fEqLexCat)
                  (GHC.Classes.$fEq(,)_$c/=
                     @ [GHC.Types.Char]
                     @ InflectionData.LexCat
                     GHC.Classes.$fEq[]_$s$fEq[]1
                     InflectionData.$fEqLexCat) -}
8bb0943afe6c751a265bf806bc71274f
  $s$fEqExpress ::
    GHC.Classes.Eq (InflectionData.Express InflectionData.Animacy)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Animacy)
                  Translate.$s$fEqExpress1
                  (InflectionData.$fEqExpress_$c/=
                     @ InflectionData.Animacy
                     InflectionData.$fEqAnimacy) -}
11112fd4ae14ac62f4f0fd848661e481
  $s$fEqExpress1 ::
    InflectionData.Express InflectionData.Animacy
    -> InflectionData.Express InflectionData.Animacy -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.Express InflectionData.Animacy
                   ds1 :: InflectionData.Express InflectionData.Animacy ->
                 case ds of wild {
                   InflectionData.NoExpress
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.True
                        InflectionData.Express ipv -> GHC.Types.False }
                   InflectionData.Express a41
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.False
                        InflectionData.Express b1
                        -> InflectionData.$fEqAnimacy_$c== a41 b1 } }) -}
2d402dcb087de5d3b0edd26639387023
  $s$fEqExpress10 ::
    InflectionData.Express InflectionData.Evidentiality
    -> InflectionData.Express InflectionData.Evidentiality
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.Express InflectionData.Evidentiality
                   ds1 :: InflectionData.Express InflectionData.Evidentiality ->
                 case ds of wild {
                   InflectionData.NoExpress
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.True
                        InflectionData.Express ipv -> GHC.Types.False }
                   InflectionData.Express a41
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.False
                        InflectionData.Express b1
                        -> InflectionData.$fEqEvidentiality_$c== a41 b1 } }) -}
1709f492f55dbb8f3c9e4abe5e920c50
  $s$fEqExpress11 ::
    GHC.Classes.Eq (InflectionData.Express InflectionData.Gender)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Gender)
                  Translate.$s$fEqExpress12
                  (InflectionData.$fEqExpress_$c/=
                     @ InflectionData.Gender
                     InflectionData.$fEqGender) -}
a62e6b24032a5bf6fde83b07ec25e093
  $s$fEqExpress12 ::
    InflectionData.Express InflectionData.Gender
    -> InflectionData.Express InflectionData.Gender -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.Express InflectionData.Gender
                   ds1 :: InflectionData.Express InflectionData.Gender ->
                 case ds of wild {
                   InflectionData.NoExpress
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.True
                        InflectionData.Express ipv -> GHC.Types.False }
                   InflectionData.Express a41
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.False
                        InflectionData.Express b1
                        -> InflectionData.$fEqExpress_$c== a41 b1 } }) -}
9ed040ae0c1ab4b74a460321005c5833
  $s$fEqExpress13 ::
    GHC.Classes.Eq (InflectionData.Express InflectionData.Honorific)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Honorific)
                  Translate.$s$fEqExpress14
                  (InflectionData.$fEqExpress_$c/=
                     @ InflectionData.Honorific
                     InflectionData.$fEqHonorific) -}
ec4666caf73dd8e05608c8f1f8dadc1e
  $s$fEqExpress14 ::
    InflectionData.Express InflectionData.Honorific
    -> InflectionData.Express InflectionData.Honorific
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.Express InflectionData.Honorific
                   ds1 :: InflectionData.Express InflectionData.Honorific ->
                 case ds of wild {
                   InflectionData.NoExpress
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.True
                        InflectionData.Express ipv -> GHC.Types.False }
                   InflectionData.Express a41
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.False
                        InflectionData.Express b1
                        -> InflectionData.$fEqExpress_$c==1 a41 b1 } }) -}
dec891e49a4d74f55aea862b64408a39
  $s$fEqExpress15 ::
    GHC.Classes.Eq (InflectionData.Express InflectionData.Mood)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Mood)
                  Translate.$s$fEqExpress16
                  (InflectionData.$fEqExpress_$c/=
                     @ InflectionData.Mood
                     InflectionData.$fEqMood) -}
5806606b9e8e081330562ce1b8869d26
  $s$fEqExpress16 ::
    InflectionData.Express InflectionData.Mood
    -> InflectionData.Express InflectionData.Mood -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.Express InflectionData.Mood
                   ds1 :: InflectionData.Express InflectionData.Mood ->
                 case ds of wild {
                   InflectionData.NoExpress
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.True
                        InflectionData.Express ipv -> GHC.Types.False }
                   InflectionData.Express a41
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.False
                        InflectionData.Express b1
                        -> InflectionData.$fEqMood_$c== a41 b1 } }) -}
06ad7d85415f517d588f4100ce0be968
  $s$fEqExpress17 ::
    GHC.Classes.Eq (InflectionData.Express InflectionData.Number)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Number)
                  Translate.$s$fEqExpress18
                  (InflectionData.$fEqExpress_$c/=
                     @ InflectionData.Number
                     InflectionData.$fEqNumber) -}
1296102ffdd2b059e8a7e8e3c1e4f807
  $s$fEqExpress18 ::
    InflectionData.Express InflectionData.Number
    -> InflectionData.Express InflectionData.Number -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.Express InflectionData.Number
                   ds1 :: InflectionData.Express InflectionData.Number ->
                 case ds of wild {
                   InflectionData.NoExpress
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.True
                        InflectionData.Express ipv -> GHC.Types.False }
                   InflectionData.Express a41
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.False
                        InflectionData.Express b1
                        -> InflectionData.$fEqExpress_$c==2 a41 b1 } }) -}
45b75cb5610e68e61d277cb3f54763d0
  $s$fEqExpress19 ::
    GHC.Classes.Eq (InflectionData.Express InflectionData.Person)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Person)
                  Translate.$s$fEqExpress20
                  (InflectionData.$fEqExpress_$c/=
                     @ InflectionData.Person
                     InflectionData.$fEqPerson) -}
1f838007f89553aaa2cdd6cc04838015
  $s$fEqExpress2 ::
    GHC.Classes.Eq (InflectionData.Express InflectionData.Volition)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Volition)
                  InflectionData.$fEqExpress_$s$c==9
                  (InflectionData.$fEqExpress_$c/=
                     @ InflectionData.Volition
                     InflectionData.$fEqVolition) -}
38937dae83ea6ce72b226fc141d7580a
  $s$fEqExpress20 ::
    InflectionData.Express InflectionData.Person
    -> InflectionData.Express InflectionData.Person -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.Express InflectionData.Person
                   ds1 :: InflectionData.Express InflectionData.Person ->
                 case ds of wild {
                   InflectionData.NoExpress
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.True
                        InflectionData.Express ipv -> GHC.Types.False }
                   InflectionData.Express a41
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.False
                        InflectionData.Express b1
                        -> InflectionData.$fEqExpress_$c==3 a41 b1 } }) -}
341b353cf1d280dc7ca058433dccd35c
  $s$fEqExpress21 ::
    GHC.Classes.Eq (InflectionData.Express InflectionData.Polarity)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Polarity)
                  Translate.$s$fEqExpress22
                  (InflectionData.$fEqExpress_$c/=
                     @ InflectionData.Polarity
                     InflectionData.$fEqPolarity) -}
3363f524290b6775f518ed1168dd4562
  $s$fEqExpress22 ::
    InflectionData.Express InflectionData.Polarity
    -> InflectionData.Express InflectionData.Polarity -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.Express InflectionData.Polarity
                   ds1 :: InflectionData.Express InflectionData.Polarity ->
                 case ds of wild {
                   InflectionData.NoExpress
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.True
                        InflectionData.Express ipv -> GHC.Types.False }
                   InflectionData.Express a41
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.False
                        InflectionData.Express b1
                        -> InflectionData.$fEqExpress_$c==4 a41 b1 } }) -}
7f8c1106fbef29384b3cc5947c469d01
  $s$fEqExpress23 ::
    GHC.Classes.Eq (InflectionData.Express InflectionData.Specificity)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Specificity)
                  Translate.$s$fEqExpress24
                  (InflectionData.$fEqExpress_$c/=
                     @ InflectionData.Specificity
                     InflectionData.$fEqSpecificity) -}
5f2b530a9578ea51f51860709e85c73d
  $s$fEqExpress24 ::
    InflectionData.Express InflectionData.Specificity
    -> InflectionData.Express InflectionData.Specificity
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.Express InflectionData.Specificity
                   ds1 :: InflectionData.Express InflectionData.Specificity ->
                 case ds of wild {
                   InflectionData.NoExpress
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.True
                        InflectionData.Express ipv -> GHC.Types.False }
                   InflectionData.Express a41
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.False
                        InflectionData.Express b1
                        -> InflectionData.$fEqExpress_$c==5 a41 b1 } }) -}
0d1d23e10d7d069d425ffb86874644a4
  $s$fEqExpress25 ::
    GHC.Classes.Eq (InflectionData.Express InflectionData.Tense)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Tense)
                  Translate.$s$fEqExpress26
                  (InflectionData.$fEqExpress_$c/=
                     @ InflectionData.Tense
                     InflectionData.$fEqTense) -}
b09cd60875ce142a13283b95996f8f58
  $s$fEqExpress26 ::
    InflectionData.Express InflectionData.Tense
    -> InflectionData.Express InflectionData.Tense -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.Express InflectionData.Tense
                   ds1 :: InflectionData.Express InflectionData.Tense ->
                 case ds of wild {
                   InflectionData.NoExpress
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.True
                        InflectionData.Express ipv -> GHC.Types.False }
                   InflectionData.Express a41
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.False
                        InflectionData.Express b1
                        -> InflectionData.$fEqTense_$c== a41 b1 } }) -}
831c0707f8e48695d39f2475b4954d06
  $s$fEqExpress27 ::
    GHC.Classes.Eq (InflectionData.Express InflectionData.Topic)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Topic)
                  Translate.$s$fEqExpress28
                  (InflectionData.$fEqExpress_$c/=
                     @ InflectionData.Topic
                     InflectionData.$fEqTopic) -}
d43b1bb2a3f1dd58acd18e6116997f76
  $s$fEqExpress28 ::
    InflectionData.Express InflectionData.Topic
    -> InflectionData.Express InflectionData.Topic -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.Express InflectionData.Topic
                   ds1 :: InflectionData.Express InflectionData.Topic ->
                 case ds of wild {
                   InflectionData.NoExpress
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.True
                        InflectionData.Express ipv -> GHC.Types.False }
                   InflectionData.Express a41
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.False
                        InflectionData.Express b1
                        -> InflectionData.$fEqExpress_$c==6 a41 b1 } }) -}
2aa7d7dd4639fb917080b98c0de5d77c
  $s$fEqExpress29 ::
    GHC.Classes.Eq (InflectionData.Express InflectionData.Transitivity)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Transitivity)
                  Translate.$s$fEqExpress30
                  (InflectionData.$fEqExpress_$c/=
                     @ InflectionData.Transitivity
                     InflectionData.$fEqTransitivity) -}
05c244aed822362709e0ef1002f69f0c
  $s$fEqExpress3 ::
    GHC.Classes.Eq (InflectionData.Express InflectionData.Aspect)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Aspect)
                  Translate.$s$fEqExpress4
                  (InflectionData.$fEqExpress_$c/=
                     @ InflectionData.Aspect
                     InflectionData.$fEqAspect) -}
1d0a64f91ba3f52926fa3b694453fe41
  $s$fEqExpress30 ::
    InflectionData.Express InflectionData.Transitivity
    -> InflectionData.Express InflectionData.Transitivity
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.Express InflectionData.Transitivity
                   ds1 :: InflectionData.Express InflectionData.Transitivity ->
                 case ds of wild {
                   InflectionData.NoExpress
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.True
                        InflectionData.Express ipv -> GHC.Types.False }
                   InflectionData.Express a41
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.False
                        InflectionData.Express b1
                        -> InflectionData.$fEqExpress_$c==7 a41 b1 } }) -}
1d1b054a5182729e1be8436c2c9e25c0
  $s$fEqExpress31 ::
    GHC.Classes.Eq (InflectionData.Express InflectionData.Voice)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Voice)
                  Translate.$s$fEqExpress32
                  (InflectionData.$fEqExpress_$c/=
                     @ InflectionData.Voice
                     InflectionData.$fEqVoice) -}
a36a43213eeac5c2719f544dbdf55f65
  $s$fEqExpress32 ::
    InflectionData.Express InflectionData.Voice
    -> InflectionData.Express InflectionData.Voice -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.Express InflectionData.Voice
                   ds1 :: InflectionData.Express InflectionData.Voice ->
                 case ds of wild {
                   InflectionData.NoExpress
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.True
                        InflectionData.Express ipv -> GHC.Types.False }
                   InflectionData.Express a41
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.False
                        InflectionData.Express b1
                        -> InflectionData.$fEqExpress_$c==8 a41 b1 } }) -}
6fd9f3e34f4fcc01626ebcae3ea41770
  $s$fEqExpress4 ::
    InflectionData.Express InflectionData.Aspect
    -> InflectionData.Express InflectionData.Aspect -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.Express InflectionData.Aspect
                   ds1 :: InflectionData.Express InflectionData.Aspect ->
                 case ds of wild {
                   InflectionData.NoExpress
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.True
                        InflectionData.Express ipv -> GHC.Types.False }
                   InflectionData.Express a41
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.False
                        InflectionData.Express b1
                        -> InflectionData.$fEqAspect_$c== a41 b1 } }) -}
aaee1e276a0d639450414def2ce28836
  $s$fEqExpress5 ::
    GHC.Classes.Eq (InflectionData.Express InflectionData.Case)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Case)
                  Translate.$s$fEqExpress6
                  (InflectionData.$fEqExpress_$c/=
                     @ InflectionData.Case
                     InflectionData.$fEqCase) -}
e9b5720a0d1bbb5c9df36722e14d45ba
  $s$fEqExpress6 ::
    InflectionData.Express InflectionData.Case
    -> InflectionData.Express InflectionData.Case -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.Express InflectionData.Case
                   ds1 :: InflectionData.Express InflectionData.Case ->
                 case ds of wild {
                   InflectionData.NoExpress
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.True
                        InflectionData.Express ipv -> GHC.Types.False }
                   InflectionData.Express a41
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.False
                        InflectionData.Express b1
                        -> InflectionData.$fEqCase_$c== a41 b1 } }) -}
402681e16b92dfeeb1079171cd0b2577
  $s$fEqExpress7 ::
    GHC.Classes.Eq (InflectionData.Express InflectionData.Definiteness)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Definiteness)
                  Translate.$s$fEqExpress8
                  (InflectionData.$fEqExpress_$c/=
                     @ InflectionData.Definiteness
                     InflectionData.$fEqDefiniteness) -}
246bf76e6b03ead875f366bf078c8133
  $s$fEqExpress8 ::
    InflectionData.Express InflectionData.Definiteness
    -> InflectionData.Express InflectionData.Definiteness
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.Express InflectionData.Definiteness
                   ds1 :: InflectionData.Express InflectionData.Definiteness ->
                 case ds of wild {
                   InflectionData.NoExpress
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.True
                        InflectionData.Express ipv -> GHC.Types.False }
                   InflectionData.Express a41
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.False
                        InflectionData.Express b1
                        -> InflectionData.$fEqDefiniteness_$c== a41 b1 } }) -}
d05f5e571ccd2cdfc59d7532b1f47fbc
  $s$fEqExpress9 ::
    GHC.Classes.Eq
      (InflectionData.Express InflectionData.Evidentiality)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Evidentiality)
                  Translate.$s$fEqExpress10
                  (InflectionData.$fEqExpress_$c/=
                     @ InflectionData.Evidentiality
                     InflectionData.$fEqEvidentiality) -}
8c90471441b09e1c99ef31587e27c3a3
  parseParseTree ::
    [[PhonemeData.Phoneme]]
    -> [((GHC.Base.String, InflectionData.LexCat), PhonemeData.Word)]
    -> [(InflectionData.LexCat,
         [InflectionData.ManifestSystem],
         [InflectionData.ManifestSystem],
         [InflectionData.ManifestSystem])]
    -> GrammarData.Grammar
    -> GrammarData.Phrase
    -> GHC.Base.String
  {- Arity: 5,
     Strictness: <L,U><L,U><L,U><L,1*U(U,U,U,U,U,A,A,A,A,U,U,A,A)><L,U> -}
1c36ce780ca836d58553d4e382eb4f53
  parsePhrase ::
    GrammarData.Grammar -> GrammarData.Phrase -> [[GrammarData.Leaf]]
  {- Arity: 2,
     Strictness: <L,1*U(U,U,U,U,U,A,A,A,A,U,U,A,A)><S,1*U> -}
"SPEC/Translate $fEq(,) @ [Char] @ LexCat" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                     [GHC.Types.Char]
                                                           $dEq1 :: GHC.Classes.Eq
                                                                      InflectionData.LexCat
  GHC.Classes.$fEq(,) @ [GHC.Types.Char]
                      @ InflectionData.LexCat
                      $dEq
                      $dEq1
  = Translate.$s$fEq(,)
"SPEC/Translate $fEqExpress @ Animacy" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                 InflectionData.Animacy
  InflectionData.$fEqExpress @ InflectionData.Animacy $dEq
  = Translate.$s$fEqExpress
"SPEC/Translate $fEqExpress @ Aspect" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                InflectionData.Aspect
  InflectionData.$fEqExpress @ InflectionData.Aspect $dEq
  = Translate.$s$fEqExpress3
"SPEC/Translate $fEqExpress @ Case" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                              InflectionData.Case
  InflectionData.$fEqExpress @ InflectionData.Case $dEq
  = Translate.$s$fEqExpress5
"SPEC/Translate $fEqExpress @ Definiteness" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                      InflectionData.Definiteness
  InflectionData.$fEqExpress @ InflectionData.Definiteness $dEq
  = Translate.$s$fEqExpress7
"SPEC/Translate $fEqExpress @ Evidentiality" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                       InflectionData.Evidentiality
  InflectionData.$fEqExpress @ InflectionData.Evidentiality $dEq
  = Translate.$s$fEqExpress9
"SPEC/Translate $fEqExpress @ Gender" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                InflectionData.Gender
  InflectionData.$fEqExpress @ InflectionData.Gender $dEq
  = Translate.$s$fEqExpress11
"SPEC/Translate $fEqExpress @ Honorific" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                   InflectionData.Honorific
  InflectionData.$fEqExpress @ InflectionData.Honorific $dEq
  = Translate.$s$fEqExpress13
"SPEC/Translate $fEqExpress @ Mood" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                              InflectionData.Mood
  InflectionData.$fEqExpress @ InflectionData.Mood $dEq
  = Translate.$s$fEqExpress15
"SPEC/Translate $fEqExpress @ Number" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                InflectionData.Number
  InflectionData.$fEqExpress @ InflectionData.Number $dEq
  = Translate.$s$fEqExpress17
"SPEC/Translate $fEqExpress @ Person" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                InflectionData.Person
  InflectionData.$fEqExpress @ InflectionData.Person $dEq
  = Translate.$s$fEqExpress19
"SPEC/Translate $fEqExpress @ Polarity" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                  InflectionData.Polarity
  InflectionData.$fEqExpress @ InflectionData.Polarity $dEq
  = Translate.$s$fEqExpress21
"SPEC/Translate $fEqExpress @ Specificity" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                     InflectionData.Specificity
  InflectionData.$fEqExpress @ InflectionData.Specificity $dEq
  = Translate.$s$fEqExpress23
"SPEC/Translate $fEqExpress @ Tense" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                               InflectionData.Tense
  InflectionData.$fEqExpress @ InflectionData.Tense $dEq
  = Translate.$s$fEqExpress25
"SPEC/Translate $fEqExpress @ Topic" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                               InflectionData.Topic
  InflectionData.$fEqExpress @ InflectionData.Topic $dEq
  = Translate.$s$fEqExpress27
"SPEC/Translate $fEqExpress @ Transitivity" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                      InflectionData.Transitivity
  InflectionData.$fEqExpress @ InflectionData.Transitivity $dEq
  = Translate.$s$fEqExpress29
"SPEC/Translate $fEqExpress @ Voice" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                               InflectionData.Voice
  InflectionData.$fEqExpress @ InflectionData.Voice $dEq
  = Translate.$s$fEqExpress31
"SPEC/Translate $fEqExpress @ Volition" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                  InflectionData.Volition
  InflectionData.$fEqExpress @ InflectionData.Volition $dEq
  = Translate.$s$fEqExpress2
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

