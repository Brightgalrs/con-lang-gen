
==================== FINAL INTERFACE ====================
2016-12-03 17:02:53.209404 UTC

interface conla_1eA9qWUPH9nBowcXqqaV8r:Translate 7103
  interface hash: 4411e93ee93fe76cbeaaf607188937a2
  ABI hash: 3e60e97091828d8c3b29e268a4f520de
  export-list hash: 6d6599ab3235034f57cb477d03e147c1
  orphan hash: 4b5b45ffcd86c10bb58a9f436cf6457d
  flag hash: 5d774d2eb7a24578afae116cd337b129
  sig of: Nothing
  used TH splices: False
  where
exports:
  Translate.parseParseTree
  Translate.parsePhrase
module dependencies: EnglishStuff GrammarData InflectionData
                     InflectionGen MorphologyGen OtherData Parse PhonemeData PhonemeGen
                     PhonotacticsGen Romanization Syllabification WordGen
package dependencies: MonadPrompt-1.0.0.5@Monad_5vpMHuuRBzi4bKjpRN3A9L
                      MonadRandom-0.4.2.3@Monad_I7tEJH7vOtsKQS7CpG48fz
                      array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA base-4.8.2.0
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59
                      erf-2.0.0.0@erf_6l78BnvLL4b2mWYp3HJJxX
                      flexible-defaults-0.0.1.2@flexi_70LqvhG3vbS8bRvV8pHtMk
                      ghc-prim-0.4.0.0 integer-gmp-1.0.0.0
                      math-functions-0.1.7.0@mathf_BN6S7j0ar3LC4TsnYu0us5
                      mersenne-random-pure64-0.2.0.5@merse_42koSxEhmjwBS69WXi19xI
                      monad-loops-0.4.3@monad_LQiHRUYhFhYBU7nOOWDOrb
                      mtl-2.2.1@mtl_Aue4leSeVkpKLsfHIV51E8
                      mwc-random-0.13.4.0@mwcra_0lrQ1SkkNA85sa8eZ98xQk
                      old-locale-1.0.0.7@oldlo_7h2Gx6mVPJ5Gheca8j9Mpe
                      old-time-1.1.0.3@oldti_JVjJvknZJ0JKghfag2Jw2L
                      pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC
                      primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3
                      random-extras-0.19@rando_11jAc932BDRD7ydjCrRr4L
                      random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW
                      random-1.1@rando_9Kgekc9yEaLHLNUuw6paWL
                      random-shuffle-0.0.4@rando_9kOz9tEn1526ShtWz8x59X
                      random-fu-0.2.7.0@rando_HO0DW1nA2fDCxZJ62mvJHr
                      rvar-0.2.0.3@rvar_HDSuhGFxwNTDX4EfF6w8WG
                      stateref-0.3@state_KptOBHsY85L8YzpDAos2Hi
                      stm-2.4.4.1@stm_EyxFXFfnfY05IrjGaqCxeD
                      syb-0.6@syb_4kccWaTe3QZLxAMQYKgEyE template-haskell-2.10.0.0
                      th-extras-0.0.0.4@thext_LRY1RUMy7ShLl2tqhMyHdO
                      time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn
                      transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF
                      vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln
orphans: MonadRandom-0.4.2.3@Monad_I7tEJH7vOtsKQS7CpG48fz:Control.Monad.Random
         base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         conla_1eA9qWUPH9nBowcXqqaV8r:InflectionData
         mersenne-random-pure64-0.2.0.5@merse_42koSxEhmjwBS69WXi19xI:System.Random.Mersenne.Pure64
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source.IO
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source.MWC
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source.PureMT
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source.StdGen
         stateref-0.3@state_KptOBHsY85L8YzpDAos2Hi:Data.StateRef.Instances
         stateref-0.3@state_KptOBHsY85L8YzpDAos2Hi:Data.StateRef.Instances.STM
         stm-2.4.4.1@stm_EyxFXFfnfY05IrjGaqCxeD:Control.Monad.STM
         syb-0.6@syb_4kccWaTe3QZLxAMQYKgEyE:Data.Generics.Instances
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Calendar.Gregorian
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Format.Parse
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.LocalTime.LocalTime
         transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.Trans.Error
         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Fusion.Bundle
         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Sequence
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
                         mwc-random-0.13.4.0@mwcra_0lrQ1SkkNA85sa8eZ98xQk:System.Random.MWC
                         pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3:Control.Monad.Primitive
                         template-haskell-2.10.0.0:Language.Haskell.TH.Syntax
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Primitive
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed.Base
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:Data.Functor 5c701b0af1708f0192a25dfe14ce6274
import  -/  base-4.8.2.0:Data.List 3f0782c8d4bf50eecefcd5ea1798aac8
import  -/  base-4.8.2.0:Data.Maybe 1cb58de2b04ee3c0c0a7dc9201184aff
import  -/  base-4.8.2.0:Data.OldList d8fd80b0e14aa085ce6219cd89dad356
import  -/  base-4.8.2.0:Data.Tuple 012ad951a59a9d85fe1de36a2f012986
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  EnglishStuff 5fece719cf63858fda1956aa00549ab7
  exports: ac5981334a8e49e87eafd7d2ab80605c
  englishGrammar dac08adaea85885d6d1a879305c73ec7
  englishManifest 9a47de3d7aa563b0f7fc8ad09d2ad458
import  -/  GrammarData 8ac8d86b6b864664f180483e73ce823b
  exports: 5138522a0c1403d2fee44ad2a2f3e5a1
  Bar 9659e0c80a113c431b9ceeaca174dd69
  CompFinal 4218b98d2cad94623d418f06c7daaf74
  CompInitial 8b5437a083d2f9791daaa4f92c16bab9
  Grammar 54b1b32e84410d13fc0ab1d24cef787f
  Leaf 31701f8c84782181aa0c8f6f7bfd67ba
  Leaf c45a9487dc1554c122459c27a0c0c7a2
  LeafInfl 0180160270fc8c3dd87799568271edb3
  LeafNull f670957f8ec8e2f634eb59e8bafc60be
  NoAffixHop e58eeed187ea908b7fa653adc99b562e
  NoVtoIMove fa030db0cac4cf3934fe81872fe328d4
  Null 982ba6ad329ab6ca91933a50f43208f8
  ObjFinal 15b0449e6839227f4fa099fe50a91592
  OblAffixHop ec1f08cb309e90abdaf0c18a4682b13a
  OblItoCMove 471fba2b63cac8f316f9f6c9c4b0c2b7
  OblVtoIMove b9a4dfb51917976a57c9d70a3d84dac5
  OblWHMove 498581a1c6ddb483056a9b23410b61f5
  Phrase 9659e0c80a113c431b9ceeaca174dd69
  Ques 970ff4399831bbf39b5b29c1f3c50cfd
  SubInitial a5ae71a2fa5a793a64a5571dccaaae89
  XBarA 20bdda52dcb73abc5c3faa3265ab74de
  XBarC 5954e8f74c2760627a7181a3ecfab202
  XP cb49dfeb07dc228963fa3ee033d8e319
  XPNull 9708383b4997761a04dbefcbfe9d6f6e
  getAH 8921262fa73de9c65a89f59c3b0fc8c3
  getCI a0a26fad587439b6dca88a28896fc1c5
  getItoC feb64d2f99e2b23075e3c6828c774513
  getOF 895a99bad4ed86ed24854c872aac16e2
  getSI 2d1a4ddf9089665b698dfbfb775a671c
  getVtoI c099dcaa803be48944776e61e142ad78
  getWHM dc8454ca703345b8e77193e6ca2e9ef6
  leafInfl 2c0e24de7dc9bbe6bb849935762a7609
  leafLC b1aa92a5e35ba084c7327ab431896724
  phraseIl 350e37a4ca742e7890e9c65709851df8
  phraseLC 0cd95a1bdde91cdbf3c44e8c4c7ad1bf
import  -/  InflectionData 1d3c9a42a800e5c12f0b2505845bd490
  exports: 14704a3a2d793893d80490c9a5c3fd3e
  Adpo f2851efffd9470f86f77b62dde491078
  Animacy 91fb0b41f9ef14c662c70b3629b6b5fe
  Aspect 8bbea98a3b619c1fafa2f31c2f747273
  Case 6c10cc277989f00ac96ff5f8d0b9d977
  Comp 100abab7d53e74b334ec4f744ad12241
  Definiteness 69e12afea565be2617200bf9671a6c0d
  Det ed9bb9a2c4d189eb76f053da5c479f4a
  Evidentiality 1261593b396b3f8b4367998b51bf6d8a
  Express 1ae0c46a8b58a514f38dd5171a3e67a3
  Express 7e958650c7791002a2540390e3aca90e
  Gender e443e52c146978100c75258afee70577
  Honorific 9f709bf4194f93c1f39907f3dcd0aede
  Infl 63123bd80d07e89b2f24b300b060fb8b
  LexCat 406c10c56e8fc899b6f590771b3372e0
  ManifestSystem d00ca9fc0955f2d18fcf424b683d5934
  Mood 987f478754e08db3236fd0a739247bf9
  NoExpress 749a51da58ebbc7f9683e59a2088dd1a
  Noun 03f9541569971afcd548f453c7b56f6a
  Number 111b9dd7881655400daece83d7690898
  Person cbc274f5b3d6239101cd9764b7773be5
  Polarity 961c5eb0bc4c139961b0a440a23b769f
  Specificity 6c3fc67424127bb4feb2d92b23a30da0
  Tense 5f476bea2da27cbe0ffe1e5cde3d9551
  Topic f2502f7485a2c7bc47bb080f20b26aeb
  Transitivity 8463dae3116062b076dc25e0f6b8c749
  UANI 08354aeb3969261d9de26a55068a0fa1
  UASP 773d25316e79c7fc891e3e97f3619913
  UCAS 88c3f4f685a030733b2cddc73f08cbe1
  UDEF d8a3849b48935e4c2b1863f2ba1c7969
  UEVI 4142f9d71a91d35fbc0cd3dce3c0d73a
  UGEN 4ac97fbe7cdb98f310f8608fd1922f91
  UHON a7496ba7fa435301182c3cd09f6bae7f
  UMOO 94ccf8d6868e980806bf9100284f8a55
  UNUM 7d54d631811525f9328cec4b4c15dc98
  UPER 7a65a7b1e677904e4d831a00f9ccc4b0
  UPOL 3d5ad83d727c6c6d8717a52a1cf18dd0
  USPE e0474a08c6a31f0091dd505d5cb08389
  UTEN 895fbb3b1f7a483f819e1a5148c2d9d3
  UTOP e5f0d5a7d0deb0b6b73b4cc3db430439
  UTRA 08d328105a5f2dbbe3146874023ff314
  UVOI fe7da799f695a7aa8a7beb98d2ced112
  UVOL c39ff1325f8d3ce1ed069e6837785a8b
  Verb 7a8d9ab245a1af778cdf2e6e44f34c3a
  Voice 66f849eb0df273279725c8472ced02cc
  Volition 3a73fa2d976f240c7ba768b809a25328
  getExp e8d8ee9a1de81f506aa3491726d1f060
  manSysCombos c4e6f673c4760d3721cbfe0ccf301060
import  -/  Parse a9b5d1bf50d8b53e8bf3e5b4a63267af
  exports: 5ea6cd786088df35daa0ad64e1cdd1d8
  parseWord a5e79c59071bc0faf05b870b949d95ac
import  -/  PhonemeData 408b6488aa28ce44ef05793241013f6f
  exports: c711b36c9b7415c6d00ea9681146dbcb
  Phoneme 78c280a9bf84c920fdcdc1bfa9515e2f
  Word 4e1579ce9a1ea812805b7e69ae8f8d98
  Word 82eaddf6262316ad93815378773a62ff
  getMorphemes fc2bbcdea07c559e95a4da4877c57866
import  -/  Romanization 804bca94f08cbe6d41992a68b525e575
  exports: 71e3484a4b1fb5c752fcd3291232e7ff
  romanizeWord 7f9c217ededf0559d0727e8e0fd891e3
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
c4786023f94679de879349c5d441e03d
  $s$fEq(,) ::
    GHC.Classes.Eq ([GHC.Types.Char], InflectionData.LexCat)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ ([GHC.Types.Char], InflectionData.LexCat)
                  (GHC.Classes.$fEq(,)_$c==
                     @ [GHC.Types.Char]
                     @ InflectionData.LexCat
                     GHC.Classes.$fEq[]_$s$fEq[]1
                     InflectionData.$fEqLexCat)
                  (GHC.Classes.$fEq(,)_$c/=
                     @ [GHC.Types.Char]
                     @ InflectionData.LexCat
                     GHC.Classes.$fEq[]_$s$fEq[]1
                     InflectionData.$fEqLexCat) -}
ddd6a98c95d2f4b12e4b569386a14c90
  $s$fEqExpress ::
    GHC.Classes.Eq (InflectionData.Express InflectionData.Animacy)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Animacy)
                  Translate.$s$fEqExpress1
                  (InflectionData.$fEqExpress_$c/=
                     @ InflectionData.Animacy
                     InflectionData.$fEqAnimacy) -}
4e73a982471f25f2def2359c704a66ce
  $s$fEqExpress1 ::
    InflectionData.Express InflectionData.Animacy
    -> InflectionData.Express InflectionData.Animacy -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.Express InflectionData.Animacy
                   ds1 :: InflectionData.Express InflectionData.Animacy ->
                 case ds of wild {
                   InflectionData.NoExpress
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.True
                        InflectionData.Express ipv -> GHC.Types.False }
                   InflectionData.Express a42
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.False
                        InflectionData.Express b1
                        -> InflectionData.$fEqAnimacy_$c== a42 b1 } }) -}
f7bd4a7b3685ab520a998d5ae6050191
  $s$fEqExpress10 ::
    InflectionData.Express InflectionData.Evidentiality
    -> InflectionData.Express InflectionData.Evidentiality
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.Express InflectionData.Evidentiality
                   ds1 :: InflectionData.Express InflectionData.Evidentiality ->
                 case ds of wild {
                   InflectionData.NoExpress
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.True
                        InflectionData.Express ipv -> GHC.Types.False }
                   InflectionData.Express a42
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.False
                        InflectionData.Express b1
                        -> InflectionData.$fEqEvidentiality_$c== a42 b1 } }) -}
3abc12e400a1a365ba49c1bd23a2c700
  $s$fEqExpress11 ::
    GHC.Classes.Eq (InflectionData.Express InflectionData.Gender)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Gender)
                  Translate.$s$fEqExpress12
                  (InflectionData.$fEqExpress_$c/=
                     @ InflectionData.Gender
                     InflectionData.$fEqGender) -}
60a9d6bedf71eb10e2cb075ee244d73c
  $s$fEqExpress12 ::
    InflectionData.Express InflectionData.Gender
    -> InflectionData.Express InflectionData.Gender -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.Express InflectionData.Gender
                   ds1 :: InflectionData.Express InflectionData.Gender ->
                 case ds of wild {
                   InflectionData.NoExpress
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.True
                        InflectionData.Express ipv -> GHC.Types.False }
                   InflectionData.Express a42
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.False
                        InflectionData.Express b1
                        -> InflectionData.$fEqExpress_$c== a42 b1 } }) -}
2e20333be665285590cc272eafacf8ba
  $s$fEqExpress13 ::
    GHC.Classes.Eq (InflectionData.Express InflectionData.Honorific)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Honorific)
                  Translate.$s$fEqExpress14
                  (InflectionData.$fEqExpress_$c/=
                     @ InflectionData.Honorific
                     InflectionData.$fEqHonorific) -}
1384db7286676681d8e3575ad1d7cfe6
  $s$fEqExpress14 ::
    InflectionData.Express InflectionData.Honorific
    -> InflectionData.Express InflectionData.Honorific
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.Express InflectionData.Honorific
                   ds1 :: InflectionData.Express InflectionData.Honorific ->
                 case ds of wild {
                   InflectionData.NoExpress
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.True
                        InflectionData.Express ipv -> GHC.Types.False }
                   InflectionData.Express a42
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.False
                        InflectionData.Express b1
                        -> InflectionData.$fEqExpress_$c==5 a42 b1 } }) -}
23adf9636b148b8a32c76a8391ee6cc3
  $s$fEqExpress15 ::
    GHC.Classes.Eq (InflectionData.Express InflectionData.Mood)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Mood)
                  Translate.$s$fEqExpress16
                  (InflectionData.$fEqExpress_$c/=
                     @ InflectionData.Mood
                     InflectionData.$fEqMood) -}
301ea71e2665ab79c46ff6925e702085
  $s$fEqExpress16 ::
    InflectionData.Express InflectionData.Mood
    -> InflectionData.Express InflectionData.Mood -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.Express InflectionData.Mood
                   ds1 :: InflectionData.Express InflectionData.Mood ->
                 case ds of wild {
                   InflectionData.NoExpress
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.True
                        InflectionData.Express ipv -> GHC.Types.False }
                   InflectionData.Express a42
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.False
                        InflectionData.Express b1
                        -> InflectionData.$fEqMood_$c== a42 b1 } }) -}
dca0a6b3a7da472ec79ec8ddadc2bac2
  $s$fEqExpress17 ::
    GHC.Classes.Eq (InflectionData.Express InflectionData.Number)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Number)
                  Translate.$s$fEqExpress18
                  (InflectionData.$fEqExpress_$c/=
                     @ InflectionData.Number
                     InflectionData.$fEqNumber) -}
504e42cb9cdba7d8b3efa1754f98a7fa
  $s$fEqExpress18 ::
    InflectionData.Express InflectionData.Number
    -> InflectionData.Express InflectionData.Number -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.Express InflectionData.Number
                   ds1 :: InflectionData.Express InflectionData.Number ->
                 case ds of wild {
                   InflectionData.NoExpress
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.True
                        InflectionData.Express ipv -> GHC.Types.False }
                   InflectionData.Express a42
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.False
                        InflectionData.Express b1
                        -> InflectionData.$fEqExpress_$c==1 a42 b1 } }) -}
174bfd6b4803c1a869a0744edfcb9b8c
  $s$fEqExpress19 ::
    GHC.Classes.Eq (InflectionData.Express InflectionData.Person)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Person)
                  Translate.$s$fEqExpress20
                  (InflectionData.$fEqExpress_$c/=
                     @ InflectionData.Person
                     InflectionData.$fEqPerson) -}
4004e3c9ab1341890f495c3615ec5f65
  $s$fEqExpress2 ::
    GHC.Classes.Eq (InflectionData.Express InflectionData.Volition)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Volition)
                  InflectionData.$fEqExpress_$s$c==13
                  (InflectionData.$fEqExpress_$c/=
                     @ InflectionData.Volition
                     InflectionData.$fEqVolition) -}
87778ea36a3535e6e7ce87670d2a4364
  $s$fEqExpress20 ::
    InflectionData.Express InflectionData.Person
    -> InflectionData.Express InflectionData.Person -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.Express InflectionData.Person
                   ds1 :: InflectionData.Express InflectionData.Person ->
                 case ds of wild {
                   InflectionData.NoExpress
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.True
                        InflectionData.Express ipv -> GHC.Types.False }
                   InflectionData.Express a42
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.False
                        InflectionData.Express b1
                        -> InflectionData.$fEqExpress_$c==4 a42 b1 } }) -}
0fd4d8f2b6aa5b9ee9a073dd468e7fe6
  $s$fEqExpress21 ::
    GHC.Classes.Eq (InflectionData.Express InflectionData.Polarity)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Polarity)
                  Translate.$s$fEqExpress22
                  (InflectionData.$fEqExpress_$c/=
                     @ InflectionData.Polarity
                     InflectionData.$fEqPolarity) -}
bce4824ca949e424300bb72d62f6e39c
  $s$fEqExpress22 ::
    InflectionData.Express InflectionData.Polarity
    -> InflectionData.Express InflectionData.Polarity -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.Express InflectionData.Polarity
                   ds1 :: InflectionData.Express InflectionData.Polarity ->
                 case ds of wild {
                   InflectionData.NoExpress
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.True
                        InflectionData.Express ipv -> GHC.Types.False }
                   InflectionData.Express a42
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.False
                        InflectionData.Express b1
                        -> InflectionData.$fEqExpress_$c==6 a42 b1 } }) -}
a59d290bf0378c5144e602c1aeae61c6
  $s$fEqExpress23 ::
    GHC.Classes.Eq (InflectionData.Express InflectionData.Specificity)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Specificity)
                  Translate.$s$fEqExpress24
                  (InflectionData.$fEqExpress_$c/=
                     @ InflectionData.Specificity
                     InflectionData.$fEqSpecificity) -}
8cb75eb9d0d2cd1f146d783baab18fb9
  $s$fEqExpress24 ::
    InflectionData.Express InflectionData.Specificity
    -> InflectionData.Express InflectionData.Specificity
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.Express InflectionData.Specificity
                   ds1 :: InflectionData.Express InflectionData.Specificity ->
                 case ds of wild {
                   InflectionData.NoExpress
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.True
                        InflectionData.Express ipv -> GHC.Types.False }
                   InflectionData.Express a42
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.False
                        InflectionData.Express b1
                        -> InflectionData.$fEqExpress_$c==2 a42 b1 } }) -}
bf26ce0ab7600dddfdf421c9996d5831
  $s$fEqExpress25 ::
    GHC.Classes.Eq (InflectionData.Express InflectionData.Tense)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Tense)
                  Translate.$s$fEqExpress26
                  (InflectionData.$fEqExpress_$c/=
                     @ InflectionData.Tense
                     InflectionData.$fEqTense) -}
7908653911ea53eb4fb8b9a761ba262e
  $s$fEqExpress26 ::
    InflectionData.Express InflectionData.Tense
    -> InflectionData.Express InflectionData.Tense -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.Express InflectionData.Tense
                   ds1 :: InflectionData.Express InflectionData.Tense ->
                 case ds of wild {
                   InflectionData.NoExpress
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.True
                        InflectionData.Express ipv -> GHC.Types.False }
                   InflectionData.Express a42
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.False
                        InflectionData.Express b1
                        -> InflectionData.$fEqTense_$c== a42 b1 } }) -}
2d24abaaa216ac4cba33506377d1e6c6
  $s$fEqExpress27 ::
    GHC.Classes.Eq (InflectionData.Express InflectionData.Topic)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Topic)
                  Translate.$s$fEqExpress28
                  (InflectionData.$fEqExpress_$c/=
                     @ InflectionData.Topic
                     InflectionData.$fEqTopic) -}
6d8b0322913e267573a98ac4ce83f852
  $s$fEqExpress28 ::
    InflectionData.Express InflectionData.Topic
    -> InflectionData.Express InflectionData.Topic -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.Express InflectionData.Topic
                   ds1 :: InflectionData.Express InflectionData.Topic ->
                 case ds of wild {
                   InflectionData.NoExpress
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.True
                        InflectionData.Express ipv -> GHC.Types.False }
                   InflectionData.Express a42
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.False
                        InflectionData.Express b1
                        -> InflectionData.$fEqExpress_$c==3 a42 b1 } }) -}
6b26e5773164066ae2d5ee147b913234
  $s$fEqExpress29 ::
    GHC.Classes.Eq (InflectionData.Express InflectionData.Transitivity)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Transitivity)
                  Translate.$s$fEqExpress30
                  (InflectionData.$fEqExpress_$c/=
                     @ InflectionData.Transitivity
                     InflectionData.$fEqTransitivity) -}
dccca67c607d9fa9178fd21547e5e484
  $s$fEqExpress3 ::
    GHC.Classes.Eq (InflectionData.Express InflectionData.Aspect)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Aspect)
                  Translate.$s$fEqExpress4
                  (InflectionData.$fEqExpress_$c/=
                     @ InflectionData.Aspect
                     InflectionData.$fEqAspect) -}
740f8550b4dbbae9f5680f1ac02269bb
  $s$fEqExpress30 ::
    InflectionData.Express InflectionData.Transitivity
    -> InflectionData.Express InflectionData.Transitivity
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.Express InflectionData.Transitivity
                   ds1 :: InflectionData.Express InflectionData.Transitivity ->
                 case ds of wild {
                   InflectionData.NoExpress
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.True
                        InflectionData.Express ipv -> GHC.Types.False }
                   InflectionData.Express a42
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.False
                        InflectionData.Express b1
                        -> InflectionData.$fEqExpress_$c==8 a42 b1 } }) -}
a6aa530e25f45579c1862c1d8576d478
  $s$fEqExpress31 ::
    GHC.Classes.Eq (InflectionData.Express InflectionData.Voice)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Voice)
                  Translate.$s$fEqExpress32
                  (InflectionData.$fEqExpress_$c/=
                     @ InflectionData.Voice
                     InflectionData.$fEqVoice) -}
1d4624b06c57bdaaecebf9f71e20104b
  $s$fEqExpress32 ::
    InflectionData.Express InflectionData.Voice
    -> InflectionData.Express InflectionData.Voice -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.Express InflectionData.Voice
                   ds1 :: InflectionData.Express InflectionData.Voice ->
                 case ds of wild {
                   InflectionData.NoExpress
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.True
                        InflectionData.Express ipv -> GHC.Types.False }
                   InflectionData.Express a42
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.False
                        InflectionData.Express b1
                        -> InflectionData.$fEqExpress_$c==7 a42 b1 } }) -}
65470904de595edb829971d0f60ecd2b
  $s$fEqExpress4 ::
    InflectionData.Express InflectionData.Aspect
    -> InflectionData.Express InflectionData.Aspect -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.Express InflectionData.Aspect
                   ds1 :: InflectionData.Express InflectionData.Aspect ->
                 case ds of wild {
                   InflectionData.NoExpress
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.True
                        InflectionData.Express ipv -> GHC.Types.False }
                   InflectionData.Express a42
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.False
                        InflectionData.Express b1
                        -> InflectionData.$fEqAspect_$c== a42 b1 } }) -}
875995a9bfa4bc52ba60463f52c9c88c
  $s$fEqExpress5 ::
    GHC.Classes.Eq (InflectionData.Express InflectionData.Case)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Case)
                  Translate.$s$fEqExpress6
                  (InflectionData.$fEqExpress_$c/=
                     @ InflectionData.Case
                     InflectionData.$fEqCase) -}
5ccd6fea658389bdf794953c885c1106
  $s$fEqExpress6 ::
    InflectionData.Express InflectionData.Case
    -> InflectionData.Express InflectionData.Case -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.Express InflectionData.Case
                   ds1 :: InflectionData.Express InflectionData.Case ->
                 case ds of wild {
                   InflectionData.NoExpress
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.True
                        InflectionData.Express ipv -> GHC.Types.False }
                   InflectionData.Express a42
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.False
                        InflectionData.Express b1
                        -> InflectionData.$fEqCase_$c== a42 b1 } }) -}
5e2e20ba6a26b0de0c44018cc013cb75
  $s$fEqExpress7 ::
    GHC.Classes.Eq (InflectionData.Express InflectionData.Definiteness)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Definiteness)
                  Translate.$s$fEqExpress8
                  (InflectionData.$fEqExpress_$c/=
                     @ InflectionData.Definiteness
                     InflectionData.$fEqDefiniteness) -}
226adc380cd1c4a6dfc4b352a81121e2
  $s$fEqExpress8 ::
    InflectionData.Express InflectionData.Definiteness
    -> InflectionData.Express InflectionData.Definiteness
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: InflectionData.Express InflectionData.Definiteness
                   ds1 :: InflectionData.Express InflectionData.Definiteness ->
                 case ds of wild {
                   InflectionData.NoExpress
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.True
                        InflectionData.Express ipv -> GHC.Types.False }
                   InflectionData.Express a42
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.False
                        InflectionData.Express b1
                        -> InflectionData.$fEqDefiniteness_$c== a42 b1 } }) -}
51ab7ac04f5bd5a56dc54d4fb1e891bb
  $s$fEqExpress9 ::
    GHC.Classes.Eq
      (InflectionData.Express InflectionData.Evidentiality)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Evidentiality)
                  Translate.$s$fEqExpress10
                  (InflectionData.$fEqExpress_$c/=
                     @ InflectionData.Evidentiality
                     InflectionData.$fEqEvidentiality) -}
76355108e53bf2b1ce63767b125a4326
  parseParseTree ::
    [[PhonemeData.Phoneme]]
    -> [((GHC.Base.String, InflectionData.LexCat), PhonemeData.Word)]
    -> [(InflectionData.LexCat,
         [InflectionData.ManifestSystem],
         [InflectionData.ManifestSystem],
         [InflectionData.ManifestSystem])]
    -> GrammarData.Grammar
    -> GrammarData.Phrase
    -> GHC.Base.String
  {- Arity: 5,
     Strictness: <L,U><L,U><L,U><L,1*U(U,U,U,U,U,A,A,A,A,U,U,A,A)><L,U> -}
6b7ff749bb2fc15535f160da8747ecd3
  parsePhrase ::
    GrammarData.Grammar -> GrammarData.Phrase -> [[GrammarData.Leaf]]
  {- Arity: 2,
     Strictness: <L,1*U(U,U,U,U,U,A,A,A,A,U,U,A,A)><S,1*U> -}
"SPEC/Translate $fEq(,) @ [Char] @ LexCat" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                     [GHC.Types.Char]
                                                           $dEq1 :: GHC.Classes.Eq
                                                                      InflectionData.LexCat
  GHC.Classes.$fEq(,) @ [GHC.Types.Char]
                      @ InflectionData.LexCat
                      $dEq
                      $dEq1
  = Translate.$s$fEq(,)
"SPEC/Translate $fEqExpress @ Animacy" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                 InflectionData.Animacy
  InflectionData.$fEqExpress @ InflectionData.Animacy $dEq
  = Translate.$s$fEqExpress
"SPEC/Translate $fEqExpress @ Aspect" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                InflectionData.Aspect
  InflectionData.$fEqExpress @ InflectionData.Aspect $dEq
  = Translate.$s$fEqExpress3
"SPEC/Translate $fEqExpress @ Case" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                              InflectionData.Case
  InflectionData.$fEqExpress @ InflectionData.Case $dEq
  = Translate.$s$fEqExpress5
"SPEC/Translate $fEqExpress @ Definiteness" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                      InflectionData.Definiteness
  InflectionData.$fEqExpress @ InflectionData.Definiteness $dEq
  = Translate.$s$fEqExpress7
"SPEC/Translate $fEqExpress @ Evidentiality" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                       InflectionData.Evidentiality
  InflectionData.$fEqExpress @ InflectionData.Evidentiality $dEq
  = Translate.$s$fEqExpress9
"SPEC/Translate $fEqExpress @ Gender" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                InflectionData.Gender
  InflectionData.$fEqExpress @ InflectionData.Gender $dEq
  = Translate.$s$fEqExpress11
"SPEC/Translate $fEqExpress @ Honorific" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                   InflectionData.Honorific
  InflectionData.$fEqExpress @ InflectionData.Honorific $dEq
  = Translate.$s$fEqExpress13
"SPEC/Translate $fEqExpress @ Mood" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                              InflectionData.Mood
  InflectionData.$fEqExpress @ InflectionData.Mood $dEq
  = Translate.$s$fEqExpress15
"SPEC/Translate $fEqExpress @ Number" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                InflectionData.Number
  InflectionData.$fEqExpress @ InflectionData.Number $dEq
  = Translate.$s$fEqExpress17
"SPEC/Translate $fEqExpress @ Person" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                InflectionData.Person
  InflectionData.$fEqExpress @ InflectionData.Person $dEq
  = Translate.$s$fEqExpress19
"SPEC/Translate $fEqExpress @ Polarity" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                  InflectionData.Polarity
  InflectionData.$fEqExpress @ InflectionData.Polarity $dEq
  = Translate.$s$fEqExpress21
"SPEC/Translate $fEqExpress @ Specificity" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                     InflectionData.Specificity
  InflectionData.$fEqExpress @ InflectionData.Specificity $dEq
  = Translate.$s$fEqExpress23
"SPEC/Translate $fEqExpress @ Tense" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                               InflectionData.Tense
  InflectionData.$fEqExpress @ InflectionData.Tense $dEq
  = Translate.$s$fEqExpress25
"SPEC/Translate $fEqExpress @ Topic" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                               InflectionData.Topic
  InflectionData.$fEqExpress @ InflectionData.Topic $dEq
  = Translate.$s$fEqExpress27
"SPEC/Translate $fEqExpress @ Transitivity" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                      InflectionData.Transitivity
  InflectionData.$fEqExpress @ InflectionData.Transitivity $dEq
  = Translate.$s$fEqExpress29
"SPEC/Translate $fEqExpress @ Voice" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                               InflectionData.Voice
  InflectionData.$fEqExpress @ InflectionData.Voice $dEq
  = Translate.$s$fEqExpress31
"SPEC/Translate $fEqExpress @ Volition" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                  InflectionData.Volition
  InflectionData.$fEqExpress @ InflectionData.Volition $dEq
  = Translate.$s$fEqExpress2
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

