
==================== FINAL INTERFACE ====================
2016-09-18 06:24:39.796099 UTC

interface main@main:Main 7103
  interface hash: b5b20d2ee7f33d19488c3c504d4a0919
  ABI hash: 751168d020c51c88b123f94a9f70d920
  export-list hash: 37f0b07408e5877be3d79bd26fcfb082
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 6052577fbb991595f3e20337ed81343b
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
module dependencies:
package dependencies: MonadPrompt-1.0.0.5@Monad_5vpMHuuRBzi4bKjpRN3A9L
                      MonadRandom-0.4.2.3@Monad_I7tEJH7vOtsKQS7CpG48fz
                      OneTuple-0.2.1@OneTu_7qUmBkRamgQ0H9fFgZmi5H
                      array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA base-4.8.2.0
                      con-lang-gen-0.0.0.1@conla_1eA9qWUPH9nBowcXqqaV8r
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59
                      erf-2.0.0.0@erf_6l78BnvLL4b2mWYp3HJJxX
                      flexible-defaults-0.0.1.2@flexi_70LqvhG3vbS8bRvV8pHtMk
                      ghc-prim-0.4.0.0 integer-gmp-1.0.0.0
                      math-functions-0.1.7.0@mathf_BN6S7j0ar3LC4TsnYu0us5
                      mersenne-random-pure64-0.2.0.5@merse_42koSxEhmjwBS69WXi19xI
                      monad-loops-0.4.3@monad_LQiHRUYhFhYBU7nOOWDOrb
                      mtl-2.2.1@mtl_Aue4leSeVkpKLsfHIV51E8
                      mwc-random-0.13.4.0@mwcra_0lrQ1SkkNA85sa8eZ98xQk
                      old-locale-1.0.0.7@oldlo_7h2Gx6mVPJ5Gheca8j9Mpe
                      old-time-1.1.0.3@oldti_JVjJvknZJ0JKghfag2Jw2L
                      pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC
                      primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3
                      random-extras-0.19@rando_11jAc932BDRD7ydjCrRr4L
                      random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW
                      random-1.1@rando_9Kgekc9yEaLHLNUuw6paWL
                      random-shuffle-0.0.4@rando_9kOz9tEn1526ShtWz8x59X
                      random-fu-0.2.7.0@rando_HO0DW1nA2fDCxZJ62mvJHr
                      rvar-0.2.0.3@rvar_HDSuhGFxwNTDX4EfF6w8WG
                      stateref-0.3@state_KptOBHsY85L8YzpDAos2Hi
                      stm-2.4.4.1@stm_EyxFXFfnfY05IrjGaqCxeD
                      syb-0.6@syb_4kccWaTe3QZLxAMQYKgEyE template-haskell-2.10.0.0
                      th-extras-0.0.0.4@thext_LRY1RUMy7ShLl2tqhMyHdO
                      time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn
                      transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF
                      tuple-0.3.0.2@tuple_0P5GlwXwirn97NAX2TWlIC
                      vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln
orphans: MonadRandom-0.4.2.3@Monad_I7tEJH7vOtsKQS7CpG48fz:Control.Monad.Random
         base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         mersenne-random-pure64-0.2.0.5@merse_42koSxEhmjwBS69WXi19xI:System.Random.Mersenne.Pure64
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source.IO
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source.MWC
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source.PureMT
         random-source-0.3.0.6@rando_2sxt9MoqACW6I0STyXc5JW:Data.Random.Source.StdGen
         stateref-0.3@state_KptOBHsY85L8YzpDAos2Hi:Data.StateRef.Instances
         stateref-0.3@state_KptOBHsY85L8YzpDAos2Hi:Data.StateRef.Instances.STM
         stm-2.4.4.1@stm_EyxFXFfnfY05IrjGaqCxeD:Control.Monad.STM
         syb-0.6@syb_4kccWaTe3QZLxAMQYKgEyE:Data.Generics.Instances
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Calendar.Gregorian
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Format.Parse
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.LocalTime.LocalTime
         transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.Trans.Error
         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Fusion.Bundle
         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Sequence
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
                         mwc-random-0.13.4.0@mwcra_0lrQ1SkkNA85sa8eZ98xQk:System.Random.MWC
                         pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3:Control.Monad.Primitive
                         template-haskell-2.10.0.0:Language.Haskell.TH.Syntax
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Primitive
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed.Base
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  base-4.8.2.0:System.IO 0248c1e850b7ea124cf7a2e1669ebf67
import  -/  con-lang-gen-0.0.0.1@conla_1eA9qWUPH9nBowcXqqaV8r:PhonemeInventoryGen 9859a5d0767fcc6e3262432420ae523a
import  -/  con-lang-gen-0.0.0.1@conla_1eA9qWUPH9nBowcXqqaV8r:PhonotacticsGen ca3502d42e4e16f2adb80162f84f8fa0
import  -/  ghc-prim-0.4.0.0:GHC.Types 6b27fb3fdbd0e3f0925a4496c66513bb
import  -/  random-fu-0.2.7.0@rando_HO0DW1nA2fDCxZJ62mvJHr:Data.Random 355d6844bb1b3189cb19ec0007f6f130
import  -/  rvar-0.2.0.3@rvar_HDSuhGFxwNTDX4EfF6w8WG:Data.RVar 9b7fbdb5f1778e76b8a65f45a17cccb1
8d4836cb9f3380d532aa5d88a296a9bc
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
b3f1e228e89eefa234ea51152d9aa117
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case ((Data.Random.Extras.sampleSeq
                          @ PhonemeType.MaybeConsonant
                          Main.main11
                          Main.main10
                            `cast`
                          (Sym (Data.Sequence.NTCo:Seq[0] <PhonemeType.MaybeConsonant>_R)))
                         `cast`
                       (Trans
                            (Trans
                                 (Data.RVar.NTCo:RVarT[0] <Data.Functor.Identity.Identity>_N)
                                 (Control.Monad.Prompt.NTCo:PromptT[0]
                                      <Data.Random.Source.Internal.Prim.Prim>_R
                                      <Data.Functor.Identity.Identity>_R) <[PhonemeType.MaybeConsonant]>_N)
                            (Control.Monad.Prompt.NTCo:Prompt[0]
                                 <Control.Monad.Prompt.Lift
                                    Data.Random.Source.Internal.Prim.Prim
                                    Data.Functor.Identity.Identity>_R
                                 <[PhonemeType.MaybeConsonant]>_R))
                         @ (GHC.Types.IO [PhonemeType.MaybeConsonant])
                         (GHC.Base.returnIO1 @ [PhonemeType.MaybeConsonant])
                           `cast`
                         (<[PhonemeType.MaybeConsonant]>_R
                          ->_R Sym (GHC.Types.NTCo:IO[0] <[PhonemeType.MaybeConsonant]>_R))
                         Main.main9
                           `cast`
                         (forall a2.
                          <Control.Monad.Prompt.Lift
                             Data.Random.Source.Internal.Prim.Prim
                             Data.Functor.Identity.Identity
                             a2>_R
                          ->_R <a2 -> GHC.Types.IO [PhonemeType.MaybeConsonant]>_R
                          ->_R Sym (GHC.Types.NTCo:IO[0] <[PhonemeType.MaybeConsonant]>_R)))
                        `cast`
                      (GHC.Types.NTCo:IO[0] <[PhonemeType.MaybeConsonant]>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ((Data.Random.Extras.sampleSeq
                          @ PhonemeType.Vowel
                          Main.main8
                          Main.main7
                            `cast`
                          (Sym (Data.Sequence.NTCo:Seq[0] <PhonemeType.Vowel>_R)))
                         `cast`
                       (Trans
                            (Trans
                                 (Data.RVar.NTCo:RVarT[0] <Data.Functor.Identity.Identity>_N)
                                 (Control.Monad.Prompt.NTCo:PromptT[0]
                                      <Data.Random.Source.Internal.Prim.Prim>_R
                                      <Data.Functor.Identity.Identity>_R) <[PhonemeType.Vowel]>_N)
                            (Control.Monad.Prompt.NTCo:Prompt[0]
                                 <Control.Monad.Prompt.Lift
                                    Data.Random.Source.Internal.Prim.Prim
                                    Data.Functor.Identity.Identity>_R
                                 <[PhonemeType.Vowel]>_R))
                         @ (GHC.Types.IO [PhonemeType.Vowel])
                         (GHC.Base.returnIO1 @ [PhonemeType.Vowel])
                           `cast`
                         (<[PhonemeType.Vowel]>_R
                          ->_R Sym (GHC.Types.NTCo:IO[0] <[PhonemeType.Vowel]>_R))
                         Main.main6
                           `cast`
                         (forall a2.
                          <Control.Monad.Prompt.Lift
                             Data.Random.Source.Internal.Prim.Prim
                             Data.Functor.Identity.Identity
                             a2>_R
                          ->_R <a2 -> GHC.Types.IO [PhonemeType.Vowel]>_R
                          ->_R Sym (GHC.Types.NTCo:IO[0] <[PhonemeType.Vowel]>_R)))
                        `cast`
                      (GHC.Types.NTCo:IO[0] <[PhonemeType.Vowel]>_R)
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case ((PhonotacticsGen.splitC ipv1)
                         `cast`
                       (Trans
                            (Trans
                                 (Data.RVar.NTCo:RVarT[0] <Data.Functor.Identity.Identity>_N)
                                 (Control.Monad.Prompt.NTCo:PromptT[0]
                                      <Data.Random.Source.Internal.Prim.Prim>_R
                                      <Data.Functor.Identity.Identity>_R) <([PhonemeType.MaybeConsonant],
                                                                            [PhonemeType.MaybeConsonant])>_N)
                            (Control.Monad.Prompt.NTCo:Prompt[0]
                                 <Control.Monad.Prompt.Lift
                                    Data.Random.Source.Internal.Prim.Prim
                                    Data.Functor.Identity.Identity>_R
                                 <([PhonemeType.MaybeConsonant], [PhonemeType.MaybeConsonant])>_R))
                         @ (GHC.Types.IO
                              ([PhonemeType.MaybeConsonant], [PhonemeType.MaybeConsonant]))
                         (GHC.Base.returnIO1
                            @ ([PhonemeType.MaybeConsonant], [PhonemeType.MaybeConsonant]))
                           `cast`
                         (<([PhonemeType.MaybeConsonant], [PhonemeType.MaybeConsonant])>_R
                          ->_R Sym (GHC.Types.NTCo:IO[0]
                                        <([PhonemeType.MaybeConsonant],
                                          [PhonemeType.MaybeConsonant])>_R))
                         Main.main5
                           `cast`
                         (forall a2.
                          <Control.Monad.Prompt.Lift
                             Data.Random.Source.Internal.Prim.Prim
                             Data.Functor.Identity.Identity
                             a2>_R
                          ->_R <a2
                                -> GHC.Types.IO
                                     ([PhonemeType.MaybeConsonant], [PhonemeType.MaybeConsonant])>_R
                          ->_R Sym (GHC.Types.NTCo:IO[0]
                                        <([PhonemeType.MaybeConsonant],
                                          [PhonemeType.MaybeConsonant])>_R)))
                        `cast`
                      (GHC.Types.NTCo:IO[0]
                           <([PhonemeType.MaybeConsonant], [PhonemeType.MaybeConsonant])>_R)
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case ipv5 of ww { (,) ww1 ww2 ->
                 case ((PhonotacticsGen.$wsplitV ww1 ww2 ipv3)
                         `cast`
                       (Trans
                            (Trans
                                 (Data.RVar.NTCo:RVarT[0] <Data.Functor.Identity.Identity>_N)
                                 (Control.Monad.Prompt.NTCo:PromptT[0]
                                      <Data.Random.Source.Internal.Prim.Prim>_R
                                      <Data.Functor.Identity.Identity>_R) <([PhonemeType.Vowel],
                                                                            [PhonemeType.Vowel],
                                                                            [PhonemeType.Vowel],
                                                                            [PhonemeType.Vowel])>_N)
                            (Control.Monad.Prompt.NTCo:Prompt[0]
                                 <Control.Monad.Prompt.Lift
                                    Data.Random.Source.Internal.Prim.Prim
                                    Data.Functor.Identity.Identity>_R
                                 <([PhonemeType.Vowel],
                                   [PhonemeType.Vowel],
                                   [PhonemeType.Vowel],
                                   [PhonemeType.Vowel])>_R))
                         @ (GHC.Types.IO
                              ([PhonemeType.Vowel],
                               [PhonemeType.Vowel],
                               [PhonemeType.Vowel],
                               [PhonemeType.Vowel]))
                         (GHC.Base.returnIO1
                            @ ([PhonemeType.Vowel],
                               [PhonemeType.Vowel],
                               [PhonemeType.Vowel],
                               [PhonemeType.Vowel]))
                           `cast`
                         (<([PhonemeType.Vowel],
                            [PhonemeType.Vowel],
                            [PhonemeType.Vowel],
                            [PhonemeType.Vowel])>_R
                          ->_R Sym (GHC.Types.NTCo:IO[0]
                                        <([PhonemeType.Vowel],
                                          [PhonemeType.Vowel],
                                          [PhonemeType.Vowel],
                                          [PhonemeType.Vowel])>_R))
                         Main.main4
                           `cast`
                         (forall a2.
                          <Control.Monad.Prompt.Lift
                             Data.Random.Source.Internal.Prim.Prim
                             Data.Functor.Identity.Identity
                             a2>_R
                          ->_R <a2
                                -> GHC.Types.IO
                                     ([PhonemeType.Vowel],
                                      [PhonemeType.Vowel],
                                      [PhonemeType.Vowel],
                                      [PhonemeType.Vowel])>_R
                          ->_R Sym (GHC.Types.NTCo:IO[0]
                                        <([PhonemeType.Vowel],
                                          [PhonemeType.Vowel],
                                          [PhonemeType.Vowel],
                                          [PhonemeType.Vowel])>_R)))
                        `cast`
                      (GHC.Types.NTCo:IO[0]
                           <([PhonemeType.Vowel],
                             [PhonemeType.Vowel],
                             [PhonemeType.Vowel],
                             [PhonemeType.Vowel])>_R)
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.shows9
                           (GHC.Show.showList__
                              @ PhonemeType.MaybeConsonant
                              PhonemeType.$fShowMaybeConsonant1
                              ww1
                              (GHC.Types.:
                                 @ GHC.Types.Char
                                 GHC.Show.showList__1
                                 (GHC.Show.$fShow(,)_$sgo
                                    (\ eta :: GHC.Base.String ->
                                     GHC.Show.showList__
                                       @ PhonemeType.MaybeConsonant
                                       PhonemeType.$fShowMaybeConsonant1
                                       ww2
                                       eta)
                                    (GHC.Types.[] @ GHC.Show.ShowS)
                                    Main.main3))))
                        GHC.Types.False
                        ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main2
                        GHC.Types.False
                        ipv8 of ds6 { (#,#) ipv10 ipv11 ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   (case ipv7 of ww4 { (,,,) ww5 ww6 ww3 ww7 ->
                    GHC.Types.:
                      @ GHC.Types.Char
                      GHC.Show.shows9
                      (GHC.Show.showList__
                         @ PhonemeType.Vowel
                         PhonemeType.$fShowPhonemeInventory3
                         ww5
                         (GHC.Types.:
                            @ GHC.Types.Char
                            GHC.Show.showList__1
                            (GHC.Show.$fShow(,,,)_$sgo
                               (\ eta :: GHC.Base.String ->
                                GHC.Show.showList__
                                  @ PhonemeType.Vowel
                                  PhonemeType.$fShowPhonemeInventory3
                                  ww6
                                  eta)
                               (GHC.Types.:
                                  @ GHC.Show.ShowS
                                  (\ eta :: GHC.Base.String ->
                                   GHC.Show.showList__
                                     @ PhonemeType.Vowel
                                     PhonemeType.$fShowPhonemeInventory3
                                     ww3
                                     eta)
                                  (GHC.Types.:
                                     @ GHC.Show.ShowS
                                     (\ eta :: GHC.Base.String ->
                                      GHC.Show.showList__
                                        @ PhonemeType.Vowel
                                        PhonemeType.$fShowPhonemeInventory3
                                        ww7
                                        eta)
                                     (GHC.Types.[] @ GHC.Show.ShowS)))
                               Main.main3))) })
                   GHC.Types.False
                   ipv10 } } } } } } }) -}
980d4c3370cc245941afa4808a8243e6
  main10 ::
    Data.Sequence.FingerTree
      (Data.Sequence.Elem PhonemeType.MaybeConsonant)
  {- Unfolding: (Data.Sequence.fromList1
                   @ PhonemeType.MaybeConsonant
                   PhonemeInventoryGen.makeNaiveConInventory1
                     `cast`
                   ([Sym (Data.Sequence.NTCo:Elem[0]
                              <PhonemeType.MaybeConsonant>_R)])_R) -}
919bbe2a0072fcedacf0d03ece299afd
  main11 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 10) -}
4b42aa55cd50391cc5816d6574c699ec
  main12 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
2d632b1dcee96ceeb86529445d455bcf
  main2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "\n"#) -}
db42ef56b9c31eff980e482f80d170b8
  main3 :: [GHC.Types.Char]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows8
                   (GHC.Types.[] @ GHC.Types.Char)) -}
3b73dc1154bbb0e8d54f1c8c79eb02d3
  main4 ::
    Control.Monad.Prompt.Lift
      Data.Random.Source.Internal.Prim.Prim
      Data.Functor.Identity.Identity
      a2
    -> (a2
        -> GHC.Types.IO
             ([PhonemeType.Vowel],
              [PhonemeType.Vowel],
              [PhonemeType.Vowel],
              [PhonemeType.Vowel]))
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ([PhonemeType.Vowel],
           [PhonemeType.Vowel],
           [PhonemeType.Vowel],
           [PhonemeType.Vowel]) #)
  {- Arity: 3,
     Unfolding: (\ @ a2
                   ds :: Control.Monad.Prompt.Lift
                           Data.Random.Source.Internal.Prim.Prim
                           Data.Functor.Identity.Identity
                           a2
                   eta2 :: a2
                           -> GHC.Types.IO
                                ([PhonemeType.Vowel],
                                 [PhonemeType.Vowel],
                                 [PhonemeType.Vowel],
                                 [PhonemeType.Vowel])
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case ds of wild {
                   Control.Monad.Prompt.Effect e
                   -> case Data.Random.Source.DevRandom.$fRandomSourceIODevRandom10
                             @ a2
                             Data.Random.Source.DevRandom.DevURandom
                             e
                             eta of ds1 { (#,#) ipv ipv1 ->
                      (eta2 ipv1)
                        `cast`
                      (GHC.Types.NTCo:IO[0]
                           <([PhonemeType.Vowel],
                             [PhonemeType.Vowel],
                             [PhonemeType.Vowel],
                             [PhonemeType.Vowel])>_R)
                        ipv }
                   Control.Monad.Prompt.Lift a3
                   -> (eta2 a3 `cast` (Data.Functor.Identity.NTCo:Identity[0] <a2>_R))
                        `cast`
                      (GHC.Types.NTCo:IO[0]
                           <([PhonemeType.Vowel],
                             [PhonemeType.Vowel],
                             [PhonemeType.Vowel],
                             [PhonemeType.Vowel])>_R)
                        eta }) -}
587e914fec6c6039ec104a55abd2baea
  main5 ::
    Control.Monad.Prompt.Lift
      Data.Random.Source.Internal.Prim.Prim
      Data.Functor.Identity.Identity
      a2
    -> (a2
        -> GHC.Types.IO
             ([PhonemeType.MaybeConsonant], [PhonemeType.MaybeConsonant]))
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ([PhonemeType.MaybeConsonant], [PhonemeType.MaybeConsonant]) #)
  {- Arity: 3,
     Unfolding: (\ @ a2
                   ds :: Control.Monad.Prompt.Lift
                           Data.Random.Source.Internal.Prim.Prim
                           Data.Functor.Identity.Identity
                           a2
                   eta2 :: a2
                           -> GHC.Types.IO
                                ([PhonemeType.MaybeConsonant], [PhonemeType.MaybeConsonant])
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case ds of wild {
                   Control.Monad.Prompt.Effect e
                   -> case Data.Random.Source.DevRandom.$fRandomSourceIODevRandom10
                             @ a2
                             Data.Random.Source.DevRandom.DevURandom
                             e
                             eta of ds1 { (#,#) ipv ipv1 ->
                      (eta2 ipv1)
                        `cast`
                      (GHC.Types.NTCo:IO[0]
                           <([PhonemeType.MaybeConsonant], [PhonemeType.MaybeConsonant])>_R)
                        ipv }
                   Control.Monad.Prompt.Lift a3
                   -> (eta2 a3 `cast` (Data.Functor.Identity.NTCo:Identity[0] <a2>_R))
                        `cast`
                      (GHC.Types.NTCo:IO[0]
                           <([PhonemeType.MaybeConsonant], [PhonemeType.MaybeConsonant])>_R)
                        eta }) -}
ab5e69f623e50f1bc244d31f270fb299
  main6 ::
    Control.Monad.Prompt.Lift
      Data.Random.Source.Internal.Prim.Prim
      Data.Functor.Identity.Identity
      a2
    -> (a2 -> GHC.Types.IO [PhonemeType.Vowel])
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [PhonemeType.Vowel] #)
  {- Arity: 3,
     Unfolding: (\ @ a2
                   ds :: Control.Monad.Prompt.Lift
                           Data.Random.Source.Internal.Prim.Prim
                           Data.Functor.Identity.Identity
                           a2
                   eta2 :: a2 -> GHC.Types.IO [PhonemeType.Vowel]
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case ds of wild {
                   Control.Monad.Prompt.Effect e
                   -> case Data.Random.Source.DevRandom.$fRandomSourceIODevRandom10
                             @ a2
                             Data.Random.Source.DevRandom.DevURandom
                             e
                             eta of ds1 { (#,#) ipv ipv1 ->
                      (eta2 ipv1) `cast` (GHC.Types.NTCo:IO[0] <[PhonemeType.Vowel]>_R)
                        ipv }
                   Control.Monad.Prompt.Lift a3
                   -> (eta2 a3 `cast` (Data.Functor.Identity.NTCo:Identity[0] <a2>_R))
                        `cast`
                      (GHC.Types.NTCo:IO[0] <[PhonemeType.Vowel]>_R)
                        eta }) -}
a3d3c7292b6b547a23224e769d0aea7e
  main7 ::
    Data.Sequence.FingerTree (Data.Sequence.Elem PhonemeType.Vowel)
  {- Unfolding: (Data.Sequence.fromList1
                   @ PhonemeType.Vowel
                   PhonemeInventoryGen.makeNaiveVowInventory1
                     `cast`
                   ([Sym (Data.Sequence.NTCo:Elem[0] <PhonemeType.Vowel>_R)])_R) -}
cd9aba01f2c50a54813394c85724ab94
  main8 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 5) -}
96cc574d5b3bec919afdef7e8677cb0b
  main9 ::
    Control.Monad.Prompt.Lift
      Data.Random.Source.Internal.Prim.Prim
      Data.Functor.Identity.Identity
      a2
    -> (a2 -> GHC.Types.IO [PhonemeType.MaybeConsonant])
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          [PhonemeType.MaybeConsonant] #)
  {- Arity: 3,
     Unfolding: (\ @ a2
                   ds :: Control.Monad.Prompt.Lift
                           Data.Random.Source.Internal.Prim.Prim
                           Data.Functor.Identity.Identity
                           a2
                   eta2 :: a2 -> GHC.Types.IO [PhonemeType.MaybeConsonant]
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case ds of wild {
                   Control.Monad.Prompt.Effect e
                   -> case Data.Random.Source.DevRandom.$fRandomSourceIODevRandom10
                             @ a2
                             Data.Random.Source.DevRandom.DevURandom
                             e
                             eta of ds1 { (#,#) ipv ipv1 ->
                      (eta2 ipv1)
                        `cast`
                      (GHC.Types.NTCo:IO[0] <[PhonemeType.MaybeConsonant]>_R)
                        ipv }
                   Control.Monad.Prompt.Lift a3
                   -> (eta2 a3 `cast` (Data.Functor.Identity.NTCo:Identity[0] <a2>_R))
                        `cast`
                      (GHC.Types.NTCo:IO[0] <[PhonemeType.MaybeConsonant]>_R)
                        eta }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

