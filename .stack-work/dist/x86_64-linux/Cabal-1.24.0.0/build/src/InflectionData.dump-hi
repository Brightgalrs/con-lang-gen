
==================== FINAL INTERFACE ====================
2016-12-09 19:39:27.755758 UTC

interface con-lang-gen-0.0.0.1-JpecSLrjfNmG1CUMEdSr39:InflectionData [orphan module] 8001
  interface hash: e7bac123cc1d26d9ad04a9e7fdd8aee2
  ABI hash: 8acf7dbedb4c8763319b881883494d75
  export-list hash: ab2a6241f04be9eb006c9d0f78ca26d5
  orphan hash: d822c638c997d41a838b8e2f1b655f92
  flag hash: 93132666c73f2f7d8f2b763803bf8a04
  sig of: Nothing
  used TH splices: False
  where
exports:
  InflectionData.Animacy{InflectionData.AN InflectionData.HUM InflectionData.INAN InflectionData.NHUM InflectionData.UANI InflectionData.ZO}
  InflectionData.Aspect{InflectionData.CONT InflectionData.HAB InflectionData.IPFV InflectionData.NNPROG InflectionData.NPROG InflectionData.PFV InflectionData.PROG InflectionData.UASP}
  InflectionData.Case{InflectionData.ABE InflectionData.ABL InflectionData.ABS InflectionData.ABS2 InflectionData.ABS3 InflectionData.ACC InflectionData.ADP InflectionData.BEN InflectionData.CAUS InflectionData.COMIT InflectionData.COMP InflectionData.DAT InflectionData.DIR InflectionData.DISTR InflectionData.DRT1 InflectionData.DRT2 InflectionData.DTR InflectionData.EQU InflectionData.ERG InflectionData.ERG2 InflectionData.GEN InflectionData.IDEN InflectionData.INDIR InflectionData.INS InflectionData.INSCOMIT InflectionData.INTR InflectionData.LAT InflectionData.LOC InflectionData.MTR InflectionData.NOM InflectionData.NOM2 InflectionData.OBJ InflectionData.OBL1 InflectionData.OBL2 InflectionData.OBL3 InflectionData.OBL4 InflectionData.OBL5 InflectionData.OBL6 InflectionData.ORN InflectionData.PART InflectionData.PEG InflectionData.POSS InflectionData.POST InflectionData.PREP InflectionData.PRIM InflectionData.SEC InflectionData.TR InflectionData.UCAS InflectionData.VOC}
  InflectionData.Definiteness{InflectionData.DEF InflectionData.INDF InflectionData.UDEF}
  InflectionData.Evidentiality{InflectionData.ASS InflectionData.AUD InflectionData.EXP InflectionData.HSY InflectionData.INFER InflectionData.NVIS InflectionData.QUO InflectionData.REP InflectionData.UEVI InflectionData.VIS}
  InflectionData.Express{InflectionData.Express InflectionData.NoExpress getExp}
  InflectionData.Gender{InflectionData.COM InflectionData.F InflectionData.M InflectionData.N InflectionData.UGEN}
  InflectionData.Honorific{InflectionData.FAM InflectionData.FORM InflectionData.NEU InflectionData.UHON}
  InflectionData.InflectionSystem{InflectionData.InflectionSystem aniSys aspSys casSys defSys eviSys genSys honSys mooSys numSys perSys polSys speSys tenSys topSys traSys voiSys volSys}
  InflectionData.LexCat{InflectionData.Adj InflectionData.Adpo InflectionData.Adv InflectionData.Comp InflectionData.Det InflectionData.Infl InflectionData.Noun InflectionData.Obj InflectionData.Pron InflectionData.Subj InflectionData.Verb}
  InflectionData.Manifest{InflectionData.Manifest InflectionData.NoManifest}
  InflectionData.ManifestSystem{InflectionData.ManifestSystem manSysCombos manSysLC manSysType}
  InflectionData.ManifestType{InflectionData.Particle InflectionData.Prefix InflectionData.Suffix}
  InflectionData.Mood{InflectionData.COND InflectionData.DEO InflectionData.EPIS InflectionData.IMP InflectionData.IND InflectionData.IRR InflectionData.JUS InflectionData.OPT InflectionData.POT InflectionData.SBJV InflectionData.UMOO}
  InflectionData.Number{InflectionData.DU InflectionData.PA InflectionData.PL InflectionData.SG InflectionData.TRI InflectionData.UNUM}
  InflectionData.Person{InflectionData.FIRST InflectionData.FSTEXCL InflectionData.FSTINCL InflectionData.SECOND InflectionData.THIRD InflectionData.THRDOBV InflectionData.THRDPROX InflectionData.UPER}
  InflectionData.Polarity{InflectionData.AFF InflectionData.NEG InflectionData.UPOL}
  InflectionData.Specificity{InflectionData.NSPEC InflectionData.SPEC InflectionData.USPE}
  InflectionData.Tense{InflectionData.AFUT InflectionData.AFUT1 InflectionData.AFUT2 InflectionData.AFUT3 InflectionData.APRS InflectionData.APST InflectionData.FUT InflectionData.FUTPER InflectionData.PFUT InflectionData.PPRS InflectionData.PPST InflectionData.PPST1 InflectionData.PPST2 InflectionData.PPST3 InflectionData.PRS InflectionData.PRSPER InflectionData.PST InflectionData.PSTPER InflectionData.UTEN}
  InflectionData.Topic{InflectionData.NTOP InflectionData.TOP InflectionData.UTOP}
  InflectionData.Transitivity{InflectionData.DITRANS InflectionData.MTRANS InflectionData.NTRANS InflectionData.TRANS InflectionData.UTRA}
  InflectionData.Voice{InflectionData.ACTIVE InflectionData.MIDDLE InflectionData.PASSIVE InflectionData.UVOI}
  InflectionData.Volition{InflectionData.NVOL InflectionData.UVOL InflectionData.VOL}
module dependencies: OtherData PhonemeData
package dependencies: base-4.9.0.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:Data.Foldable 8aeb682f6c74f97fcf0ace0d608a43ea
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.Enum fdf7ac3e1b0be0a4a37257601bddad14
import  -/  base-4.9.0.0:GHC.Err 3bba35a16538d33d424682ce66876cdd
import  -/  base-4.9.0.0:GHC.Num 48f506a8f4ecf06285d0a0706594dcc0
import  -/  base-4.9.0.0:GHC.Read 817c914615ac8e308afc0c675fb3f671
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  base-4.9.0.0:Text.ParserCombinators.ReadPrec 9512e2f4b227f507f87a150887202aed
import  -/  base-4.9.0.0:Text.Read.Lex fe3dd7b823826bf6870140c5363f9596
import  -/  OtherData df5604537cb8f3523635a22cc664b290
  exports: bf22fe2bed584fddd0df87b95eb5a320
import  -/  PhonemeData c5c8f3da2226ff98b75ea8cff0a9f4e3
  exports: c443d5b5be953d18447401b2674c832d
  Morpheme 8d3162e814627ae5597b1f6cf9209b2d
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
3578a365ab634279655cb91c03a19c28
  $fEnumLexCat :: GHC.Enum.Enum InflectionData.LexCat
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.LexCat
                  InflectionData.$fEnumLexCat_$csucc
                  InflectionData.$fEnumLexCat_$cpred
                  InflectionData.$fEnumLexCat_$ctoEnum
                  InflectionData.$fEnumLexCat_$cfromEnum
                  InflectionData.$fEnumLexCat_$cenumFrom
                  InflectionData.$fEnumLexCat_$cenumFromThen
                  InflectionData.$fEnumLexCat_$cenumFromTo
                  InflectionData.$fEnumLexCat_$cenumFromThenTo -}
3578a365ab634279655cb91c03a19c28
  $fEnumLexCat1 :: GHC.Prim.Int# -> InflectionData.LexCat
  {- Arity: 1, Strictness: <L,U>x -}
3578a365ab634279655cb91c03a19c28
  $fEnumLexCat2 :: InflectionData.LexCat
  {- Strictness: x -}
3578a365ab634279655cb91c03a19c28
  $fEnumLexCat3 :: InflectionData.LexCat
  {- Strictness: x -}
3578a365ab634279655cb91c03a19c28
  $fEnumLexCat_$cenumFrom ::
    InflectionData.LexCat -> [InflectionData.LexCat]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (a :: InflectionData.LexCat) ->
                 let {
                   x0 :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ InflectionData.LexCat a
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.># x0 10#) of wild {
                   GHC.Types.False -> InflectionData.$fEnumLexCat_go x0
                   GHC.Types.True -> GHC.Types.[] @ InflectionData.LexCat }) -}
3578a365ab634279655cb91c03a19c28
  $fEnumLexCat_$cenumFromThen ::
    InflectionData.LexCat
    -> InflectionData.LexCat -> [InflectionData.LexCat]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: InflectionData.LexCat)
                   (b :: InflectionData.LexCat) ->
                 let {
                   a# :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ InflectionData.LexCat a
                 } in
                 let {
                   b# :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ InflectionData.LexCat b
                 } in
                 let {
                   $j :: GHC.Prim.Int# -> [InflectionData.LexCat]
                     {- Arity: 1, Strictness: <S,U> -}
                   = \ (y :: GHC.Prim.Int#)[OneShot] ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# b# a#) of wild {
                       GHC.Types.False
                       -> GHC.Enum.efdtIntDnFB
                            @ [InflectionData.LexCat]
                            InflectionData.$fEnumLexCat_c1
                            (GHC.Types.[] @ InflectionData.LexCat)
                            a#
                            b#
                            y
                       GHC.Types.True
                       -> GHC.Enum.efdtIntUpFB
                            @ [InflectionData.LexCat]
                            InflectionData.$fEnumLexCat_c1
                            (GHC.Types.[] @ InflectionData.LexCat)
                            a#
                            b#
                            y }
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.># a# b#) of wild {
                   GHC.Types.False -> $j 10# GHC.Types.True -> $j 0# }) -}
3578a365ab634279655cb91c03a19c28
  $fEnumLexCat_$cenumFromThenTo ::
    InflectionData.LexCat
    -> InflectionData.LexCat
    -> InflectionData.LexCat
    -> [InflectionData.LexCat]
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U>,
     Unfolding: (\ (x1 :: InflectionData.LexCat)
                   (x2 :: InflectionData.LexCat)
                   (y :: InflectionData.LexCat) ->
                 let {
                   x4 :: GHC.Prim.Int#
                   = GHC.Prim.dataToTag# @ InflectionData.LexCat x1
                 } in
                 let {
                   x5 :: GHC.Prim.Int#
                   = GHC.Prim.dataToTag# @ InflectionData.LexCat x2
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# x5 x4) of wild {
                   GHC.Types.False
                   -> GHC.Enum.efdtIntDnFB
                        @ [InflectionData.LexCat]
                        InflectionData.$fEnumLexCat_c
                        (GHC.Types.[] @ InflectionData.LexCat)
                        x4
                        x5
                        (GHC.Prim.dataToTag# @ InflectionData.LexCat y)
                   GHC.Types.True
                   -> GHC.Enum.efdtIntUpFB
                        @ [InflectionData.LexCat]
                        InflectionData.$fEnumLexCat_c
                        (GHC.Types.[] @ InflectionData.LexCat)
                        x4
                        x5
                        (GHC.Prim.dataToTag# @ InflectionData.LexCat y) }) -}
3578a365ab634279655cb91c03a19c28
  $fEnumLexCat_$cenumFromTo ::
    InflectionData.LexCat
    -> InflectionData.LexCat -> [InflectionData.LexCat]
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x :: InflectionData.LexCat)
                   (y :: InflectionData.LexCat) ->
                 let {
                   x0 :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ InflectionData.LexCat x
                 } in
                 let {
                   y1 :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ InflectionData.LexCat y
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.># x0 y1) of wild {
                   GHC.Types.False
                   -> letrec {
                        go1 :: GHC.Prim.Int# -> [InflectionData.LexCat]
                          {- Arity: 1, Strictness: <L,U> -}
                        = \ (x1 :: GHC.Prim.Int#) ->
                          GHC.Types.:
                            @ InflectionData.LexCat
                            (case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# x1 0#) of wild1 {
                               GHC.Types.False -> InflectionData.$fEnumLexCat1 x1
                               GHC.Types.True
                               -> case GHC.Prim.tagToEnum#
                                         @ GHC.Types.Bool
                                         (GHC.Prim.<=# x1 10#) of wild2 {
                                    GHC.Types.False -> InflectionData.$fEnumLexCat1 x1
                                    GHC.Types.True
                                    -> GHC.Prim.tagToEnum# @ InflectionData.LexCat x1 } })
                            (case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.==# x1 y1) of wild1 {
                               GHC.Types.False -> go1 (GHC.Prim.+# x1 1#)
                               GHC.Types.True -> GHC.Types.[] @ InflectionData.LexCat })
                      } in
                      go1 x0
                   GHC.Types.True -> GHC.Types.[] @ InflectionData.LexCat }) -}
3578a365ab634279655cb91c03a19c28
  $fEnumLexCat_$cfromEnum :: InflectionData.LexCat -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: InflectionData.LexCat) ->
                 case a of x1 { DEFAULT ->
                 GHC.Types.I# (GHC.Prim.dataToTag# @ InflectionData.LexCat x1) }) -}
3578a365ab634279655cb91c03a19c28
  $fEnumLexCat_$cpred ::
    InflectionData.LexCat -> InflectionData.LexCat
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: InflectionData.LexCat) ->
                 case a of x1 { DEFAULT ->
                 case GHC.Prim.dataToTag# @ InflectionData.LexCat x1 of wild {
                   DEFAULT
                   -> GHC.Prim.tagToEnum#
                        @ InflectionData.LexCat
                        (GHC.Prim.+# wild -1#)
                   0# -> InflectionData.$fEnumLexCat2 } }) -}
3578a365ab634279655cb91c03a19c28
  $fEnumLexCat_$csucc ::
    InflectionData.LexCat -> InflectionData.LexCat
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: InflectionData.LexCat) ->
                 case a of x1 { DEFAULT ->
                 case GHC.Prim.dataToTag# @ InflectionData.LexCat x1 of wild {
                   DEFAULT
                   -> GHC.Prim.tagToEnum#
                        @ InflectionData.LexCat
                        (GHC.Prim.+# wild 1#)
                   10# -> InflectionData.$fEnumLexCat3 } }) -}
3578a365ab634279655cb91c03a19c28
  $fEnumLexCat_$ctoEnum :: GHC.Types.Int -> InflectionData.LexCat
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 InflectionData.$w$ctoEnum ww1 }) -}
3578a365ab634279655cb91c03a19c28
  $fEnumLexCat_c ::
    GHC.Types.Int -> [InflectionData.LexCat] -> [InflectionData.LexCat]
  {- Arity: 2, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: GHC.Types.Int) (ys :: [InflectionData.LexCat]) ->
                 GHC.Types.:
                   @ InflectionData.LexCat
                   (InflectionData.$fEnumLexCat_$ctoEnum x)
                   ys) -}
3578a365ab634279655cb91c03a19c28
  $fEnumLexCat_c1 ::
    GHC.Types.Int -> [InflectionData.LexCat] -> [InflectionData.LexCat]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: GHC.Types.Int) (ys :: [InflectionData.LexCat]) ->
                 GHC.Types.:
                   @ InflectionData.LexCat
                   (case x of wild { GHC.Types.I# a ->
                    GHC.Prim.tagToEnum# @ InflectionData.LexCat a })
                   ys) -}
3578a365ab634279655cb91c03a19c28
  $fEnumLexCat_go :: GHC.Prim.Int# -> [InflectionData.LexCat]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
549fd739a5caed0a2c7065adab08e20f
  $fEq(,,,,,,,,,,,,,,,,) ::
    (GHC.Classes.Eq a, GHC.Classes.Eq b, GHC.Classes.Eq c,
     GHC.Classes.Eq d, GHC.Classes.Eq e, GHC.Classes.Eq f,
     GHC.Classes.Eq g, GHC.Classes.Eq h, GHC.Classes.Eq i,
     GHC.Classes.Eq j, GHC.Classes.Eq k, GHC.Classes.Eq l,
     GHC.Classes.Eq m, GHC.Classes.Eq n, GHC.Classes.Eq o,
     GHC.Classes.Eq p, GHC.Classes.Eq q) =>
    GHC.Classes.Eq (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)
  DFunId
  {- Arity: 17, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      @ c
                      @ d
                      @ e
                      @ f
                      @ g
                      @ h
                      @ i
                      @ j
                      @ k
                      @ l
                      @ m
                      @ n
                      @ o
                      @ p
                      @ q
                      ($dEq :: GHC.Classes.Eq a)
                      ($dEq1 :: GHC.Classes.Eq b)
                      ($dEq2 :: GHC.Classes.Eq c)
                      ($dEq3 :: GHC.Classes.Eq d)
                      ($dEq4 :: GHC.Classes.Eq e)
                      ($dEq5 :: GHC.Classes.Eq f)
                      ($dEq6 :: GHC.Classes.Eq g)
                      ($dEq7 :: GHC.Classes.Eq h)
                      ($dEq8 :: GHC.Classes.Eq i)
                      ($dEq9 :: GHC.Classes.Eq j)
                      ($dEq10 :: GHC.Classes.Eq k)
                      ($dEq11 :: GHC.Classes.Eq l)
                      ($dEq12 :: GHC.Classes.Eq m)
                      ($dEq13 :: GHC.Classes.Eq n)
                      ($dEq14 :: GHC.Classes.Eq o)
                      ($dEq15 :: GHC.Classes.Eq p)
                      ($dEq16 :: GHC.Classes.Eq q).
                  @ (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)
                  (InflectionData.$fEq(,,,,,,,,,,,,,,,,)_$c==
                     @ a
                     @ b
                     @ c
                     @ d
                     @ e
                     @ f
                     @ g
                     @ h
                     @ i
                     @ j
                     @ k
                     @ l
                     @ m
                     @ n
                     @ o
                     @ p
                     @ q
                     $dEq
                     $dEq1
                     $dEq2
                     $dEq3
                     $dEq4
                     $dEq5
                     $dEq6
                     $dEq7
                     $dEq8
                     $dEq9
                     $dEq10
                     $dEq11
                     $dEq12
                     $dEq13
                     $dEq14
                     $dEq15
                     $dEq16)
                  (InflectionData.$fEq(,,,,,,,,,,,,,,,,)_$c/=
                     @ a
                     @ b
                     @ c
                     @ d
                     @ e
                     @ f
                     @ g
                     @ h
                     @ i
                     @ j
                     @ k
                     @ l
                     @ m
                     @ n
                     @ o
                     @ p
                     @ q
                     $dEq
                     $dEq1
                     $dEq2
                     $dEq3
                     $dEq4
                     $dEq5
                     $dEq6
                     $dEq7
                     $dEq8
                     $dEq9
                     $dEq10
                     $dEq11
                     $dEq12
                     $dEq13
                     $dEq14
                     $dEq15
                     $dEq16) -}
35399f4ec6ce46d99d66038e0e9349e7
  $fEq(,,,,,,,,,,,,,,,,)_$c/= ::
    (GHC.Classes.Eq a, GHC.Classes.Eq b, GHC.Classes.Eq c,
     GHC.Classes.Eq d, GHC.Classes.Eq e, GHC.Classes.Eq f,
     GHC.Classes.Eq g, GHC.Classes.Eq h, GHC.Classes.Eq i,
     GHC.Classes.Eq j, GHC.Classes.Eq k, GHC.Classes.Eq l,
     GHC.Classes.Eq m, GHC.Classes.Eq n, GHC.Classes.Eq o,
     GHC.Classes.Eq p, GHC.Classes.Eq q) =>
    (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)
    -> (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)
    -> GHC.Types.Bool
  {- Arity: 19, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Unfolding: InlineRule (19, True, False)
                (\ @ a
                   @ b
                   @ c
                   @ d
                   @ e
                   @ f
                   @ g
                   @ h
                   @ i
                   @ j
                   @ k
                   @ l
                   @ m
                   @ n
                   @ o
                   @ p
                   @ q
                   ($dEq :: GHC.Classes.Eq a)
                   ($dEq1 :: GHC.Classes.Eq b)
                   ($dEq2 :: GHC.Classes.Eq c)
                   ($dEq3 :: GHC.Classes.Eq d)
                   ($dEq4 :: GHC.Classes.Eq e)
                   ($dEq5 :: GHC.Classes.Eq f)
                   ($dEq6 :: GHC.Classes.Eq g)
                   ($dEq7 :: GHC.Classes.Eq h)
                   ($dEq8 :: GHC.Classes.Eq i)
                   ($dEq9 :: GHC.Classes.Eq j)
                   ($dEq10 :: GHC.Classes.Eq k)
                   ($dEq11 :: GHC.Classes.Eq l)
                   ($dEq12 :: GHC.Classes.Eq m)
                   ($dEq13 :: GHC.Classes.Eq n)
                   ($dEq14 :: GHC.Classes.Eq o)
                   ($dEq15 :: GHC.Classes.Eq p)
                   ($dEq16 :: GHC.Classes.Eq q)
                   (a1 :: (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q))
                   (b1 :: (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)) ->
                 case InflectionData.$fEq(,,,,,,,,,,,,,,,,)_$c==
                        @ a
                        @ b
                        @ c
                        @ d
                        @ e
                        @ f
                        @ g
                        @ h
                        @ i
                        @ j
                        @ k
                        @ l
                        @ m
                        @ n
                        @ o
                        @ p
                        @ q
                        $dEq
                        $dEq1
                        $dEq2
                        $dEq3
                        $dEq4
                        $dEq5
                        $dEq6
                        $dEq7
                        $dEq8
                        $dEq9
                        $dEq10
                        $dEq11
                        $dEq12
                        $dEq13
                        $dEq14
                        $dEq15
                        $dEq16
                        a1
                        b1 of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
186e58c263bc9f7d5084b9e6ea879f90
  $fEq(,,,,,,,,,,,,,,,,)_$c== ::
    (GHC.Classes.Eq a, GHC.Classes.Eq b, GHC.Classes.Eq c,
     GHC.Classes.Eq d, GHC.Classes.Eq e, GHC.Classes.Eq f,
     GHC.Classes.Eq g, GHC.Classes.Eq h, GHC.Classes.Eq i,
     GHC.Classes.Eq j, GHC.Classes.Eq k, GHC.Classes.Eq l,
     GHC.Classes.Eq m, GHC.Classes.Eq n, GHC.Classes.Eq o,
     GHC.Classes.Eq p, GHC.Classes.Eq q) =>
    (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)
    -> (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)
    -> GHC.Types.Bool
  {- Arity: 19, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (19, True, False)
                (\ @ a
                   @ b
                   @ c
                   @ d
                   @ e
                   @ f
                   @ g
                   @ h
                   @ i
                   @ j
                   @ k
                   @ l
                   @ m
                   @ n
                   @ o
                   @ p
                   @ q
                   (w :: GHC.Classes.Eq a)
                   (w1 :: GHC.Classes.Eq b)
                   (w2 :: GHC.Classes.Eq c)
                   (w3 :: GHC.Classes.Eq d)
                   (w4 :: GHC.Classes.Eq e)
                   (w5 :: GHC.Classes.Eq f)
                   (w6 :: GHC.Classes.Eq g)
                   (w7 :: GHC.Classes.Eq h)
                   (w8 :: GHC.Classes.Eq i)
                   (w9 :: GHC.Classes.Eq j)
                   (w10 :: GHC.Classes.Eq k)
                   (w11 :: GHC.Classes.Eq l)
                   (w12 :: GHC.Classes.Eq m)
                   (w13 :: GHC.Classes.Eq n)
                   (w14 :: GHC.Classes.Eq o)
                   (w15 :: GHC.Classes.Eq p)
                   (w16 :: GHC.Classes.Eq q)
                   (w17 :: (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q))
                   (w18 :: (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)) ->
                 case w17 of ww { (,,,,,,,,,,,,,,,,) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ->
                 case w18 of ww18 { (,,,,,,,,,,,,,,,,) ww19 ww20 ww21 ww22 ww23 ww24 ww25 ww26 ww27 ww28 ww29 ww30 ww31 ww32 ww33 ww34 ww35 ->
                 InflectionData.$w$c==
                   @ a
                   @ b
                   @ c
                   @ d
                   @ e
                   @ f
                   @ g
                   @ h
                   @ i
                   @ j
                   @ k
                   @ l
                   @ m
                   @ n
                   @ o
                   @ p
                   @ q
                   w
                   w1
                   w2
                   w3
                   w4
                   w5
                   w6
                   w7
                   w8
                   w9
                   w10
                   w11
                   w12
                   w13
                   w14
                   w15
                   w16
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww17
                   ww19
                   ww20
                   ww21
                   ww22
                   ww23
                   ww24
                   ww25
                   ww26
                   ww27
                   ww28
                   ww29
                   ww30
                   ww31
                   ww32
                   ww33
                   ww34
                   ww35 } }) -}
4e33e0bcf50cecb3bec919a410a917b8
  $fEqAnimacy :: GHC.Classes.Eq InflectionData.Animacy
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Animacy
                  InflectionData.$fEqAnimacy_$c==
                  InflectionData.$fEqAnimacy_$c/= -}
4e33e0bcf50cecb3bec919a410a917b8
  $fEqAnimacy_$c/= ::
    InflectionData.Animacy -> InflectionData.Animacy -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: InflectionData.Animacy)
                   (b :: InflectionData.Animacy) ->
                 case a of wild {
                   InflectionData.UANI
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.UANI -> GHC.Types.False }
                   InflectionData.AN
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.AN -> GHC.Types.False }
                   InflectionData.HUM
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.HUM -> GHC.Types.False }
                   InflectionData.NHUM
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.NHUM -> GHC.Types.False }
                   InflectionData.ZO
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.ZO -> GHC.Types.False }
                   InflectionData.INAN
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.INAN -> GHC.Types.False } }) -}
4e33e0bcf50cecb3bec919a410a917b8
  $fEqAnimacy_$c== ::
    InflectionData.Animacy -> InflectionData.Animacy -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: InflectionData.Animacy)
                   (ds1 :: InflectionData.Animacy) ->
                 case ds of wild {
                   InflectionData.UANI
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.UANI -> GHC.Types.True }
                   InflectionData.AN
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.AN -> GHC.Types.True }
                   InflectionData.HUM
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.HUM -> GHC.Types.True }
                   InflectionData.NHUM
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.NHUM -> GHC.Types.True }
                   InflectionData.ZO
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.ZO -> GHC.Types.True }
                   InflectionData.INAN
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.INAN -> GHC.Types.True } }) -}
cc1d01770048a1b059770fc511c26180
  $fEqAspect :: GHC.Classes.Eq InflectionData.Aspect
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Aspect
                  InflectionData.$fEqAspect_$c==
                  InflectionData.$fEqAspect_$c/= -}
cc1d01770048a1b059770fc511c26180
  $fEqAspect_$c/= ::
    InflectionData.Aspect -> InflectionData.Aspect -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: InflectionData.Aspect)
                   (b :: InflectionData.Aspect) ->
                 case a of wild {
                   InflectionData.UASP
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.UASP -> GHC.Types.False }
                   InflectionData.NNPROG
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.NNPROG -> GHC.Types.False }
                   InflectionData.PFV
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.PFV -> GHC.Types.False }
                   InflectionData.IPFV
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.IPFV -> GHC.Types.False }
                   InflectionData.HAB
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.HAB -> GHC.Types.False }
                   InflectionData.CONT
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.CONT -> GHC.Types.False }
                   InflectionData.NPROG
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.NPROG -> GHC.Types.False }
                   InflectionData.PROG
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.PROG -> GHC.Types.False } }) -}
cc1d01770048a1b059770fc511c26180
  $fEqAspect_$c== ::
    InflectionData.Aspect -> InflectionData.Aspect -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: InflectionData.Aspect)
                   (ds1 :: InflectionData.Aspect) ->
                 case ds of wild {
                   InflectionData.UASP
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.UASP -> GHC.Types.True }
                   InflectionData.NNPROG
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.NNPROG -> GHC.Types.True }
                   InflectionData.PFV
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.PFV -> GHC.Types.True }
                   InflectionData.IPFV
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.IPFV -> GHC.Types.True }
                   InflectionData.HAB
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.HAB -> GHC.Types.True }
                   InflectionData.CONT
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.CONT -> GHC.Types.True }
                   InflectionData.NPROG
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.NPROG -> GHC.Types.True }
                   InflectionData.PROG
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.PROG -> GHC.Types.True } }) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fEqCase :: GHC.Classes.Eq InflectionData.Case
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Case
                  InflectionData.$fEqCase_$c==
                  InflectionData.$fEqCase_$c/= -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fEqCase_$c/= ::
    InflectionData.Case -> InflectionData.Case -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: InflectionData.Case) (b :: InflectionData.Case) ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==#
                           (GHC.Prim.dataToTag# @ InflectionData.Case x1)
                           (GHC.Prim.dataToTag# @ InflectionData.Case x2)) of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fEqCase_$c== ::
    InflectionData.Case -> InflectionData.Case -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: InflectionData.Case) (b :: InflectionData.Case) ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.==#
                      (GHC.Prim.dataToTag# @ InflectionData.Case x1)
                      (GHC.Prim.dataToTag# @ InflectionData.Case x2)) } }) -}
13bfeba0cb3001719a9764357d888c67
  $fEqDefiniteness :: GHC.Classes.Eq InflectionData.Definiteness
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Definiteness
                  InflectionData.$fEqDefiniteness_$c==
                  InflectionData.$fEqDefiniteness_$c/= -}
13bfeba0cb3001719a9764357d888c67
  $fEqDefiniteness_$c/= ::
    InflectionData.Definiteness
    -> InflectionData.Definiteness -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: InflectionData.Definiteness)
                   (b :: InflectionData.Definiteness) ->
                 case a of wild {
                   InflectionData.UDEF
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.UDEF -> GHC.Types.False }
                   InflectionData.DEF
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.DEF -> GHC.Types.False }
                   InflectionData.INDF
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.INDF -> GHC.Types.False } }) -}
13bfeba0cb3001719a9764357d888c67
  $fEqDefiniteness_$c== ::
    InflectionData.Definiteness
    -> InflectionData.Definiteness -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: InflectionData.Definiteness)
                   (ds1 :: InflectionData.Definiteness) ->
                 case ds of wild {
                   InflectionData.UDEF
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.UDEF -> GHC.Types.True }
                   InflectionData.DEF
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.DEF -> GHC.Types.True }
                   InflectionData.INDF
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.INDF -> GHC.Types.True } }) -}
d496e50507466d81d95f22dd4857ca16
  $fEqEvidentiality :: GHC.Classes.Eq InflectionData.Evidentiality
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Evidentiality
                  InflectionData.$fEqEvidentiality_$c==
                  InflectionData.$fEqEvidentiality_$c/= -}
d496e50507466d81d95f22dd4857ca16
  $fEqEvidentiality_$c/= ::
    InflectionData.Evidentiality
    -> InflectionData.Evidentiality -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: InflectionData.Evidentiality)
                   (b :: InflectionData.Evidentiality) ->
                 case a of wild {
                   InflectionData.UEVI
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.UEVI -> GHC.Types.False }
                   InflectionData.EXP
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.EXP -> GHC.Types.False }
                   InflectionData.VIS
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.VIS -> GHC.Types.False }
                   InflectionData.NVIS
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.NVIS -> GHC.Types.False }
                   InflectionData.AUD
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.AUD -> GHC.Types.False }
                   InflectionData.INFER
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.INFER -> GHC.Types.False }
                   InflectionData.REP
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.REP -> GHC.Types.False }
                   InflectionData.HSY
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.HSY -> GHC.Types.False }
                   InflectionData.QUO
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.QUO -> GHC.Types.False }
                   InflectionData.ASS
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.ASS -> GHC.Types.False } }) -}
d496e50507466d81d95f22dd4857ca16
  $fEqEvidentiality_$c== ::
    InflectionData.Evidentiality
    -> InflectionData.Evidentiality -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: InflectionData.Evidentiality)
                   (ds1 :: InflectionData.Evidentiality) ->
                 case ds of wild {
                   InflectionData.UEVI
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.UEVI -> GHC.Types.True }
                   InflectionData.EXP
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.EXP -> GHC.Types.True }
                   InflectionData.VIS
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.VIS -> GHC.Types.True }
                   InflectionData.NVIS
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.NVIS -> GHC.Types.True }
                   InflectionData.AUD
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.AUD -> GHC.Types.True }
                   InflectionData.INFER
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.INFER -> GHC.Types.True }
                   InflectionData.REP
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.REP -> GHC.Types.True }
                   InflectionData.HSY
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.HSY -> GHC.Types.True }
                   InflectionData.QUO
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.QUO -> GHC.Types.True }
                   InflectionData.ASS
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.ASS -> GHC.Types.True } }) -}
63d70c4f2d77c644511c6d588663f39e
  $fEqExpress ::
    GHC.Classes.Eq a => GHC.Classes.Eq (InflectionData.Express a)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a ($dEq :: GHC.Classes.Eq a).
                  @ (InflectionData.Express a)
                  (InflectionData.$fEqExpress_$c==10 @ a $dEq)
                  (InflectionData.$fEqExpress_$c/= @ a $dEq) -}
63d70c4f2d77c644511c6d588663f39e
  $fEqExpress_$c/= ::
    GHC.Classes.Eq a =>
    InflectionData.Express a
    -> InflectionData.Express a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   (a1 :: InflectionData.Express a)
                   (b :: InflectionData.Express a) ->
                 case a1 of wild {
                   InflectionData.NoExpress
                   -> case b of wild1 {
                        InflectionData.NoExpress -> GHC.Types.False
                        InflectionData.Express ipv -> GHC.Types.True }
                   InflectionData.Express a2
                   -> case b of wild1 {
                        InflectionData.NoExpress -> GHC.Types.True
                        InflectionData.Express b1
                        -> case GHC.Classes.== @ a $dEq a2 b1 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } } }) -}
64c563e614d6b39e628a87a4b86c4bcb
  $fEqExpress_$c== ::
    InflectionData.Gender -> InflectionData.Gender -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: InflectionData.Gender)
                   (ds1 :: InflectionData.Gender) ->
                 case ds of wild {
                   InflectionData.UGEN
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.UGEN -> GHC.Types.True }
                   InflectionData.M
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.M -> GHC.Types.True }
                   InflectionData.F
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.F -> GHC.Types.True }
                   InflectionData.COM
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.COM -> GHC.Types.True }
                   InflectionData.N
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.N -> GHC.Types.True } }) -}
819df3b7803a0b6e1c638b12031d1054
  $fEqExpress_$c==1 ::
    InflectionData.Number -> InflectionData.Number -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: InflectionData.Number)
                   (ds1 :: InflectionData.Number) ->
                 case ds of wild {
                   InflectionData.UNUM
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.UNUM -> GHC.Types.True }
                   InflectionData.SG
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.SG -> GHC.Types.True }
                   InflectionData.DU
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.DU -> GHC.Types.True }
                   InflectionData.TRI
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.TRI -> GHC.Types.True }
                   InflectionData.PA
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.PA -> GHC.Types.True }
                   InflectionData.PL
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.PL -> GHC.Types.True } }) -}
63d70c4f2d77c644511c6d588663f39e
  $fEqExpress_$c==10 ::
    GHC.Classes.Eq a =>
    InflectionData.Express a
    -> InflectionData.Express a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   (ds :: InflectionData.Express a)
                   (ds1 :: InflectionData.Express a) ->
                 case ds of wild {
                   InflectionData.NoExpress
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.True
                        InflectionData.Express ipv -> GHC.Types.False }
                   InflectionData.Express a1
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.False
                        InflectionData.Express b1 -> GHC.Classes.== @ a $dEq a1 b1 } }) -}
6fb3d15dec5a1fd023a4704d57cac2a0
  $fEqExpress_$c==2 ::
    InflectionData.Specificity
    -> InflectionData.Specificity -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: InflectionData.Specificity)
                   (ds1 :: InflectionData.Specificity) ->
                 case ds of wild {
                   InflectionData.USPE
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.USPE -> GHC.Types.True }
                   InflectionData.SPEC
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.SPEC -> GHC.Types.True }
                   InflectionData.NSPEC
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.NSPEC -> GHC.Types.True } }) -}
d8981f1670fc020ebc5d708b5dd733da
  $fEqExpress_$c==3 ::
    InflectionData.Topic -> InflectionData.Topic -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: InflectionData.Topic) (ds1 :: InflectionData.Topic) ->
                 case ds of wild {
                   InflectionData.UTOP
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.UTOP -> GHC.Types.True }
                   InflectionData.TOP
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.TOP -> GHC.Types.True }
                   InflectionData.NTOP
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.NTOP -> GHC.Types.True } }) -}
9a6bbd54f38dfeb1bf3b7d7991f3da1c
  $fEqExpress_$c==4 ::
    InflectionData.Person -> InflectionData.Person -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: InflectionData.Person)
                   (ds1 :: InflectionData.Person) ->
                 case ds of wild {
                   InflectionData.UPER
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.UPER -> GHC.Types.True }
                   InflectionData.FIRST
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.FIRST -> GHC.Types.True }
                   InflectionData.FSTINCL
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.FSTINCL -> GHC.Types.True }
                   InflectionData.FSTEXCL
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.FSTEXCL -> GHC.Types.True }
                   InflectionData.SECOND
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.SECOND -> GHC.Types.True }
                   InflectionData.THIRD
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.THIRD -> GHC.Types.True }
                   InflectionData.THRDPROX
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.THRDPROX -> GHC.Types.True }
                   InflectionData.THRDOBV
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.THRDOBV -> GHC.Types.True } }) -}
87a0680d1783cb156a72782bde86c25f
  $fEqExpress_$c==5 ::
    InflectionData.Honorific
    -> InflectionData.Honorific -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: InflectionData.Honorific)
                   (ds1 :: InflectionData.Honorific) ->
                 case ds of wild {
                   InflectionData.UHON
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.UHON -> GHC.Types.True }
                   InflectionData.FAM
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.FAM -> GHC.Types.True }
                   InflectionData.NEU
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.NEU -> GHC.Types.True }
                   InflectionData.FORM
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.FORM -> GHC.Types.True } }) -}
969cd5a99a727ddd44430477f29dd629
  $fEqExpress_$c==6 ::
    InflectionData.Polarity
    -> InflectionData.Polarity -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: InflectionData.Polarity)
                   (ds1 :: InflectionData.Polarity) ->
                 case ds of wild {
                   InflectionData.UPOL
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.UPOL -> GHC.Types.True }
                   InflectionData.AFF
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.AFF -> GHC.Types.True }
                   InflectionData.NEG
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.NEG -> GHC.Types.True } }) -}
8a5a669af2386e102c8f50cb27f7b624
  $fEqExpress_$c==7 ::
    InflectionData.Voice -> InflectionData.Voice -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: InflectionData.Voice)
                   (ds1 :: InflectionData.Voice) ->
                 case ds of wild {
                   InflectionData.UVOI
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.UVOI -> GHC.Types.True }
                   InflectionData.ACTIVE
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.ACTIVE -> GHC.Types.True }
                   InflectionData.MIDDLE
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.MIDDLE -> GHC.Types.True }
                   InflectionData.PASSIVE
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.PASSIVE -> GHC.Types.True } }) -}
fbfbb10e2c2bf7855f3005c5f582ce67
  $fEqExpress_$c==8 ::
    InflectionData.Transitivity
    -> InflectionData.Transitivity -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: InflectionData.Transitivity)
                   (ds1 :: InflectionData.Transitivity) ->
                 case ds of wild {
                   InflectionData.UTRA
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.UTRA -> GHC.Types.True }
                   InflectionData.NTRANS
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.NTRANS -> GHC.Types.True }
                   InflectionData.TRANS
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.TRANS -> GHC.Types.True }
                   InflectionData.MTRANS
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.MTRANS -> GHC.Types.True }
                   InflectionData.DITRANS
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.DITRANS -> GHC.Types.True } }) -}
3559279b2cc9168c42f1489c451a8e43
  $fEqExpress_$c==9 ::
    InflectionData.Volition
    -> InflectionData.Volition -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: InflectionData.Volition)
                   (ds1 :: InflectionData.Volition) ->
                 case ds of wild {
                   InflectionData.UVOL
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.UVOL -> GHC.Types.True }
                   InflectionData.VOL
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False InflectionData.VOL -> GHC.Types.True }
                   InflectionData.NVOL
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.NVOL -> GHC.Types.True } }) -}
63d70c4f2d77c644511c6d588663f39e
  $fEqExpress_$s$c/= ::
    InflectionData.Express InflectionData.Gender
    -> InflectionData.Express InflectionData.Gender -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: InflectionData.Express InflectionData.Gender)
                   (b :: InflectionData.Express InflectionData.Gender) ->
                 case a of wild {
                   InflectionData.NoExpress
                   -> case b of wild1 {
                        InflectionData.NoExpress -> GHC.Types.False
                        InflectionData.Express ipv -> GHC.Types.True }
                   InflectionData.Express a1
                   -> case b of wild1 {
                        InflectionData.NoExpress -> GHC.Types.True
                        InflectionData.Express b1
                        -> case a1 of wild2 {
                             InflectionData.UGEN
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True InflectionData.UGEN -> GHC.Types.False }
                             InflectionData.M
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True InflectionData.M -> GHC.Types.False }
                             InflectionData.F
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True InflectionData.F -> GHC.Types.False }
                             InflectionData.COM
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True InflectionData.COM -> GHC.Types.False }
                             InflectionData.N
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True
                                  InflectionData.N -> GHC.Types.False } } } }) -}
63d70c4f2d77c644511c6d588663f39e
  $fEqExpress_$s$c/=1 ::
    InflectionData.Express InflectionData.Animacy
    -> InflectionData.Express InflectionData.Animacy -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: InflectionData.Express InflectionData.Animacy)
                   (b :: InflectionData.Express InflectionData.Animacy) ->
                 case a of wild {
                   InflectionData.NoExpress
                   -> case b of wild1 {
                        InflectionData.NoExpress -> GHC.Types.False
                        InflectionData.Express ipv -> GHC.Types.True }
                   InflectionData.Express a1
                   -> case b of wild1 {
                        InflectionData.NoExpress -> GHC.Types.True
                        InflectionData.Express b1
                        -> case a1 of wild2 {
                             InflectionData.UANI
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True InflectionData.UANI -> GHC.Types.False }
                             InflectionData.AN
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True InflectionData.AN -> GHC.Types.False }
                             InflectionData.HUM
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True InflectionData.HUM -> GHC.Types.False }
                             InflectionData.NHUM
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True InflectionData.NHUM -> GHC.Types.False }
                             InflectionData.ZO
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True InflectionData.ZO -> GHC.Types.False }
                             InflectionData.INAN
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True
                                  InflectionData.INAN -> GHC.Types.False } } } }) -}
63d70c4f2d77c644511c6d588663f39e
  $fEqExpress_$s$c/=10 ::
    InflectionData.Express InflectionData.Voice
    -> InflectionData.Express InflectionData.Voice -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: InflectionData.Express InflectionData.Voice)
                   (b :: InflectionData.Express InflectionData.Voice) ->
                 case a of wild {
                   InflectionData.NoExpress
                   -> case b of wild1 {
                        InflectionData.NoExpress -> GHC.Types.False
                        InflectionData.Express ipv -> GHC.Types.True }
                   InflectionData.Express a1
                   -> case b of wild1 {
                        InflectionData.NoExpress -> GHC.Types.True
                        InflectionData.Express b1
                        -> case a1 of wild2 {
                             InflectionData.UVOI
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True InflectionData.UVOI -> GHC.Types.False }
                             InflectionData.ACTIVE
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True
                                  InflectionData.ACTIVE -> GHC.Types.False }
                             InflectionData.MIDDLE
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True
                                  InflectionData.MIDDLE -> GHC.Types.False }
                             InflectionData.PASSIVE
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True
                                  InflectionData.PASSIVE -> GHC.Types.False } } } }) -}
63d70c4f2d77c644511c6d588663f39e
  $fEqExpress_$s$c/=11 ::
    InflectionData.Express InflectionData.Evidentiality
    -> InflectionData.Express InflectionData.Evidentiality
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: InflectionData.Express
                           InflectionData.Evidentiality)
                   (b :: InflectionData.Express InflectionData.Evidentiality) ->
                 case a of wild {
                   InflectionData.NoExpress
                   -> case b of wild1 {
                        InflectionData.NoExpress -> GHC.Types.False
                        InflectionData.Express ipv -> GHC.Types.True }
                   InflectionData.Express a1
                   -> case b of wild1 {
                        InflectionData.NoExpress -> GHC.Types.True
                        InflectionData.Express b1
                        -> case a1 of wild2 {
                             InflectionData.UEVI
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True InflectionData.UEVI -> GHC.Types.False }
                             InflectionData.EXP
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True InflectionData.EXP -> GHC.Types.False }
                             InflectionData.VIS
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True InflectionData.VIS -> GHC.Types.False }
                             InflectionData.NVIS
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True InflectionData.NVIS -> GHC.Types.False }
                             InflectionData.AUD
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True InflectionData.AUD -> GHC.Types.False }
                             InflectionData.INFER
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True
                                  InflectionData.INFER -> GHC.Types.False }
                             InflectionData.REP
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True InflectionData.REP -> GHC.Types.False }
                             InflectionData.HSY
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True InflectionData.HSY -> GHC.Types.False }
                             InflectionData.QUO
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True InflectionData.QUO -> GHC.Types.False }
                             InflectionData.ASS
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True
                                  InflectionData.ASS -> GHC.Types.False } } } }) -}
63d70c4f2d77c644511c6d588663f39e
  $fEqExpress_$s$c/=12 ::
    InflectionData.Express InflectionData.Transitivity
    -> InflectionData.Express InflectionData.Transitivity
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: InflectionData.Express
                           InflectionData.Transitivity)
                   (b :: InflectionData.Express InflectionData.Transitivity) ->
                 case a of wild {
                   InflectionData.NoExpress
                   -> case b of wild1 {
                        InflectionData.NoExpress -> GHC.Types.False
                        InflectionData.Express ipv -> GHC.Types.True }
                   InflectionData.Express a1
                   -> case b of wild1 {
                        InflectionData.NoExpress -> GHC.Types.True
                        InflectionData.Express b1
                        -> case a1 of wild2 {
                             InflectionData.UTRA
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True InflectionData.UTRA -> GHC.Types.False }
                             InflectionData.NTRANS
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True
                                  InflectionData.NTRANS -> GHC.Types.False }
                             InflectionData.TRANS
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True
                                  InflectionData.TRANS -> GHC.Types.False }
                             InflectionData.MTRANS
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True
                                  InflectionData.MTRANS -> GHC.Types.False }
                             InflectionData.DITRANS
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True
                                  InflectionData.DITRANS -> GHC.Types.False } } } }) -}
63d70c4f2d77c644511c6d588663f39e
  $fEqExpress_$s$c/=13 ::
    InflectionData.Express InflectionData.Volition
    -> InflectionData.Express InflectionData.Volition -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: InflectionData.Express InflectionData.Volition)
                   (b :: InflectionData.Express InflectionData.Volition) ->
                 case a of wild {
                   InflectionData.NoExpress
                   -> case b of wild1 {
                        InflectionData.NoExpress -> GHC.Types.False
                        InflectionData.Express ipv -> GHC.Types.True }
                   InflectionData.Express a1
                   -> case b of wild1 {
                        InflectionData.NoExpress -> GHC.Types.True
                        InflectionData.Express b1
                        -> case a1 of wild2 {
                             InflectionData.UVOL
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True InflectionData.UVOL -> GHC.Types.False }
                             InflectionData.VOL
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True InflectionData.VOL -> GHC.Types.False }
                             InflectionData.NVOL
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True
                                  InflectionData.NVOL -> GHC.Types.False } } } }) -}
63d70c4f2d77c644511c6d588663f39e
  $fEqExpress_$s$c/=2 ::
    InflectionData.Express InflectionData.Number
    -> InflectionData.Express InflectionData.Number -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: InflectionData.Express InflectionData.Number)
                   (b :: InflectionData.Express InflectionData.Number) ->
                 case a of wild {
                   InflectionData.NoExpress
                   -> case b of wild1 {
                        InflectionData.NoExpress -> GHC.Types.False
                        InflectionData.Express ipv -> GHC.Types.True }
                   InflectionData.Express a1
                   -> case b of wild1 {
                        InflectionData.NoExpress -> GHC.Types.True
                        InflectionData.Express b1
                        -> case a1 of wild2 {
                             InflectionData.UNUM
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True InflectionData.UNUM -> GHC.Types.False }
                             InflectionData.SG
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True InflectionData.SG -> GHC.Types.False }
                             InflectionData.DU
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True InflectionData.DU -> GHC.Types.False }
                             InflectionData.TRI
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True InflectionData.TRI -> GHC.Types.False }
                             InflectionData.PA
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True InflectionData.PA -> GHC.Types.False }
                             InflectionData.PL
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True
                                  InflectionData.PL -> GHC.Types.False } } } }) -}
63d70c4f2d77c644511c6d588663f39e
  $fEqExpress_$s$c/=3 ::
    InflectionData.Express InflectionData.Definiteness
    -> InflectionData.Express InflectionData.Definiteness
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: InflectionData.Express
                           InflectionData.Definiteness)
                   (b :: InflectionData.Express InflectionData.Definiteness) ->
                 case a of wild {
                   InflectionData.NoExpress
                   -> case b of wild1 {
                        InflectionData.NoExpress -> GHC.Types.False
                        InflectionData.Express ipv -> GHC.Types.True }
                   InflectionData.Express a1
                   -> case b of wild1 {
                        InflectionData.NoExpress -> GHC.Types.True
                        InflectionData.Express b1
                        -> case a1 of wild2 {
                             InflectionData.UDEF
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True InflectionData.UDEF -> GHC.Types.False }
                             InflectionData.DEF
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True InflectionData.DEF -> GHC.Types.False }
                             InflectionData.INDF
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True
                                  InflectionData.INDF -> GHC.Types.False } } } }) -}
63d70c4f2d77c644511c6d588663f39e
  $fEqExpress_$s$c/=4 ::
    InflectionData.Express InflectionData.Specificity
    -> InflectionData.Express InflectionData.Specificity
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: InflectionData.Express
                           InflectionData.Specificity)
                   (b :: InflectionData.Express InflectionData.Specificity) ->
                 case a of wild {
                   InflectionData.NoExpress
                   -> case b of wild1 {
                        InflectionData.NoExpress -> GHC.Types.False
                        InflectionData.Express ipv -> GHC.Types.True }
                   InflectionData.Express a1
                   -> case b of wild1 {
                        InflectionData.NoExpress -> GHC.Types.True
                        InflectionData.Express b1
                        -> case a1 of wild2 {
                             InflectionData.USPE
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True InflectionData.USPE -> GHC.Types.False }
                             InflectionData.SPEC
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True InflectionData.SPEC -> GHC.Types.False }
                             InflectionData.NSPEC
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True
                                  InflectionData.NSPEC -> GHC.Types.False } } } }) -}
63d70c4f2d77c644511c6d588663f39e
  $fEqExpress_$s$c/=5 ::
    InflectionData.Express InflectionData.Topic
    -> InflectionData.Express InflectionData.Topic -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: InflectionData.Express InflectionData.Topic)
                   (b :: InflectionData.Express InflectionData.Topic) ->
                 case a of wild {
                   InflectionData.NoExpress
                   -> case b of wild1 {
                        InflectionData.NoExpress -> GHC.Types.False
                        InflectionData.Express ipv -> GHC.Types.True }
                   InflectionData.Express a1
                   -> case b of wild1 {
                        InflectionData.NoExpress -> GHC.Types.True
                        InflectionData.Express b1
                        -> case a1 of wild2 {
                             InflectionData.UTOP
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True InflectionData.UTOP -> GHC.Types.False }
                             InflectionData.TOP
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True InflectionData.TOP -> GHC.Types.False }
                             InflectionData.NTOP
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True
                                  InflectionData.NTOP -> GHC.Types.False } } } }) -}
63d70c4f2d77c644511c6d588663f39e
  $fEqExpress_$s$c/=6 ::
    InflectionData.Express InflectionData.Person
    -> InflectionData.Express InflectionData.Person -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: InflectionData.Express InflectionData.Person)
                   (b :: InflectionData.Express InflectionData.Person) ->
                 case a of wild {
                   InflectionData.NoExpress
                   -> case b of wild1 {
                        InflectionData.NoExpress -> GHC.Types.False
                        InflectionData.Express ipv -> GHC.Types.True }
                   InflectionData.Express a1
                   -> case b of wild1 {
                        InflectionData.NoExpress -> GHC.Types.True
                        InflectionData.Express b1
                        -> case a1 of wild2 {
                             InflectionData.UPER
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True InflectionData.UPER -> GHC.Types.False }
                             InflectionData.FIRST
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True
                                  InflectionData.FIRST -> GHC.Types.False }
                             InflectionData.FSTINCL
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True
                                  InflectionData.FSTINCL -> GHC.Types.False }
                             InflectionData.FSTEXCL
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True
                                  InflectionData.FSTEXCL -> GHC.Types.False }
                             InflectionData.SECOND
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True
                                  InflectionData.SECOND -> GHC.Types.False }
                             InflectionData.THIRD
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True
                                  InflectionData.THIRD -> GHC.Types.False }
                             InflectionData.THRDPROX
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True
                                  InflectionData.THRDPROX -> GHC.Types.False }
                             InflectionData.THRDOBV
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True
                                  InflectionData.THRDOBV -> GHC.Types.False } } } }) -}
63d70c4f2d77c644511c6d588663f39e
  $fEqExpress_$s$c/=7 ::
    InflectionData.Express InflectionData.Honorific
    -> InflectionData.Express InflectionData.Honorific
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: InflectionData.Express
                           InflectionData.Honorific)
                   (b :: InflectionData.Express InflectionData.Honorific) ->
                 case a of wild {
                   InflectionData.NoExpress
                   -> case b of wild1 {
                        InflectionData.NoExpress -> GHC.Types.False
                        InflectionData.Express ipv -> GHC.Types.True }
                   InflectionData.Express a1
                   -> case b of wild1 {
                        InflectionData.NoExpress -> GHC.Types.True
                        InflectionData.Express b1
                        -> case a1 of wild2 {
                             InflectionData.UHON
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True InflectionData.UHON -> GHC.Types.False }
                             InflectionData.FAM
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True InflectionData.FAM -> GHC.Types.False }
                             InflectionData.NEU
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True InflectionData.NEU -> GHC.Types.False }
                             InflectionData.FORM
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True
                                  InflectionData.FORM -> GHC.Types.False } } } }) -}
63d70c4f2d77c644511c6d588663f39e
  $fEqExpress_$s$c/=8 ::
    InflectionData.Express InflectionData.Polarity
    -> InflectionData.Express InflectionData.Polarity -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: InflectionData.Express InflectionData.Polarity)
                   (b :: InflectionData.Express InflectionData.Polarity) ->
                 case a of wild {
                   InflectionData.NoExpress
                   -> case b of wild1 {
                        InflectionData.NoExpress -> GHC.Types.False
                        InflectionData.Express ipv -> GHC.Types.True }
                   InflectionData.Express a1
                   -> case b of wild1 {
                        InflectionData.NoExpress -> GHC.Types.True
                        InflectionData.Express b1
                        -> case a1 of wild2 {
                             InflectionData.UPOL
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True InflectionData.UPOL -> GHC.Types.False }
                             InflectionData.AFF
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True InflectionData.AFF -> GHC.Types.False }
                             InflectionData.NEG
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True
                                  InflectionData.NEG -> GHC.Types.False } } } }) -}
63d70c4f2d77c644511c6d588663f39e
  $fEqExpress_$s$c/=9 ::
    InflectionData.Express InflectionData.Aspect
    -> InflectionData.Express InflectionData.Aspect -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: InflectionData.Express InflectionData.Aspect)
                   (b :: InflectionData.Express InflectionData.Aspect) ->
                 case a of wild {
                   InflectionData.NoExpress
                   -> case b of wild1 {
                        InflectionData.NoExpress -> GHC.Types.False
                        InflectionData.Express ipv -> GHC.Types.True }
                   InflectionData.Express a1
                   -> case b of wild1 {
                        InflectionData.NoExpress -> GHC.Types.True
                        InflectionData.Express b1
                        -> case a1 of wild2 {
                             InflectionData.UASP
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True InflectionData.UASP -> GHC.Types.False }
                             InflectionData.NNPROG
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True
                                  InflectionData.NNPROG -> GHC.Types.False }
                             InflectionData.PFV
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True InflectionData.PFV -> GHC.Types.False }
                             InflectionData.IPFV
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True InflectionData.IPFV -> GHC.Types.False }
                             InflectionData.HAB
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True InflectionData.HAB -> GHC.Types.False }
                             InflectionData.CONT
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True InflectionData.CONT -> GHC.Types.False }
                             InflectionData.NPROG
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True
                                  InflectionData.NPROG -> GHC.Types.False }
                             InflectionData.PROG
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True
                                  InflectionData.PROG -> GHC.Types.False } } } }) -}
63d70c4f2d77c644511c6d588663f39e
  $fEqExpress_$s$c== ::
    InflectionData.Express InflectionData.Gender
    -> InflectionData.Express InflectionData.Gender -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: InflectionData.Express InflectionData.Gender)
                   (ds1 :: InflectionData.Express InflectionData.Gender) ->
                 case ds of wild {
                   InflectionData.NoExpress
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.True
                        InflectionData.Express ipv -> GHC.Types.False }
                   InflectionData.Express a1
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.False
                        InflectionData.Express b1
                        -> InflectionData.$fEqExpress_$c== a1 b1 } }) -}
63d70c4f2d77c644511c6d588663f39e
  $fEqExpress_$s$c==1 ::
    InflectionData.Express InflectionData.Animacy
    -> InflectionData.Express InflectionData.Animacy -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: InflectionData.Express InflectionData.Animacy)
                   (ds1 :: InflectionData.Express InflectionData.Animacy) ->
                 case ds of wild {
                   InflectionData.NoExpress
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.True
                        InflectionData.Express ipv -> GHC.Types.False }
                   InflectionData.Express a1
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.False
                        InflectionData.Express b1
                        -> InflectionData.$fEqAnimacy_$c== a1 b1 } }) -}
63d70c4f2d77c644511c6d588663f39e
  $fEqExpress_$s$c==10 ::
    InflectionData.Express InflectionData.Voice
    -> InflectionData.Express InflectionData.Voice -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: InflectionData.Express InflectionData.Voice)
                   (ds1 :: InflectionData.Express InflectionData.Voice) ->
                 case ds of wild {
                   InflectionData.NoExpress
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.True
                        InflectionData.Express ipv -> GHC.Types.False }
                   InflectionData.Express a1
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.False
                        InflectionData.Express b1
                        -> InflectionData.$fEqExpress_$c==7 a1 b1 } }) -}
63d70c4f2d77c644511c6d588663f39e
  $fEqExpress_$s$c==11 ::
    InflectionData.Express InflectionData.Evidentiality
    -> InflectionData.Express InflectionData.Evidentiality
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: InflectionData.Express InflectionData.Evidentiality)
                   (ds1 :: InflectionData.Express InflectionData.Evidentiality) ->
                 case ds of wild {
                   InflectionData.NoExpress
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.True
                        InflectionData.Express ipv -> GHC.Types.False }
                   InflectionData.Express a1
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.False
                        InflectionData.Express b1
                        -> InflectionData.$fEqEvidentiality_$c== a1 b1 } }) -}
63d70c4f2d77c644511c6d588663f39e
  $fEqExpress_$s$c==12 ::
    InflectionData.Express InflectionData.Transitivity
    -> InflectionData.Express InflectionData.Transitivity
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: InflectionData.Express InflectionData.Transitivity)
                   (ds1 :: InflectionData.Express InflectionData.Transitivity) ->
                 case ds of wild {
                   InflectionData.NoExpress
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.True
                        InflectionData.Express ipv -> GHC.Types.False }
                   InflectionData.Express a1
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.False
                        InflectionData.Express b1
                        -> InflectionData.$fEqExpress_$c==8 a1 b1 } }) -}
63d70c4f2d77c644511c6d588663f39e
  $fEqExpress_$s$c==13 ::
    InflectionData.Express InflectionData.Volition
    -> InflectionData.Express InflectionData.Volition -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: InflectionData.Express InflectionData.Volition)
                   (ds1 :: InflectionData.Express InflectionData.Volition) ->
                 case ds of wild {
                   InflectionData.NoExpress
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.True
                        InflectionData.Express ipv -> GHC.Types.False }
                   InflectionData.Express a1
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.False
                        InflectionData.Express b1
                        -> InflectionData.$fEqExpress_$c==9 a1 b1 } }) -}
63d70c4f2d77c644511c6d588663f39e
  $fEqExpress_$s$c==2 ::
    InflectionData.Express InflectionData.Number
    -> InflectionData.Express InflectionData.Number -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: InflectionData.Express InflectionData.Number)
                   (ds1 :: InflectionData.Express InflectionData.Number) ->
                 case ds of wild {
                   InflectionData.NoExpress
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.True
                        InflectionData.Express ipv -> GHC.Types.False }
                   InflectionData.Express a1
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.False
                        InflectionData.Express b1
                        -> InflectionData.$fEqExpress_$c==1 a1 b1 } }) -}
63d70c4f2d77c644511c6d588663f39e
  $fEqExpress_$s$c==3 ::
    InflectionData.Express InflectionData.Definiteness
    -> InflectionData.Express InflectionData.Definiteness
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: InflectionData.Express InflectionData.Definiteness)
                   (ds1 :: InflectionData.Express InflectionData.Definiteness) ->
                 case ds of wild {
                   InflectionData.NoExpress
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.True
                        InflectionData.Express ipv -> GHC.Types.False }
                   InflectionData.Express a1
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.False
                        InflectionData.Express b1
                        -> InflectionData.$fEqDefiniteness_$c== a1 b1 } }) -}
63d70c4f2d77c644511c6d588663f39e
  $fEqExpress_$s$c==4 ::
    InflectionData.Express InflectionData.Specificity
    -> InflectionData.Express InflectionData.Specificity
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: InflectionData.Express InflectionData.Specificity)
                   (ds1 :: InflectionData.Express InflectionData.Specificity) ->
                 case ds of wild {
                   InflectionData.NoExpress
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.True
                        InflectionData.Express ipv -> GHC.Types.False }
                   InflectionData.Express a1
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.False
                        InflectionData.Express b1
                        -> InflectionData.$fEqExpress_$c==2 a1 b1 } }) -}
63d70c4f2d77c644511c6d588663f39e
  $fEqExpress_$s$c==5 ::
    InflectionData.Express InflectionData.Topic
    -> InflectionData.Express InflectionData.Topic -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: InflectionData.Express InflectionData.Topic)
                   (ds1 :: InflectionData.Express InflectionData.Topic) ->
                 case ds of wild {
                   InflectionData.NoExpress
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.True
                        InflectionData.Express ipv -> GHC.Types.False }
                   InflectionData.Express a1
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.False
                        InflectionData.Express b1
                        -> InflectionData.$fEqExpress_$c==3 a1 b1 } }) -}
63d70c4f2d77c644511c6d588663f39e
  $fEqExpress_$s$c==6 ::
    InflectionData.Express InflectionData.Person
    -> InflectionData.Express InflectionData.Person -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: InflectionData.Express InflectionData.Person)
                   (ds1 :: InflectionData.Express InflectionData.Person) ->
                 case ds of wild {
                   InflectionData.NoExpress
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.True
                        InflectionData.Express ipv -> GHC.Types.False }
                   InflectionData.Express a1
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.False
                        InflectionData.Express b1
                        -> InflectionData.$fEqExpress_$c==4 a1 b1 } }) -}
63d70c4f2d77c644511c6d588663f39e
  $fEqExpress_$s$c==7 ::
    InflectionData.Express InflectionData.Honorific
    -> InflectionData.Express InflectionData.Honorific
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: InflectionData.Express InflectionData.Honorific)
                   (ds1 :: InflectionData.Express InflectionData.Honorific) ->
                 case ds of wild {
                   InflectionData.NoExpress
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.True
                        InflectionData.Express ipv -> GHC.Types.False }
                   InflectionData.Express a1
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.False
                        InflectionData.Express b1
                        -> InflectionData.$fEqExpress_$c==5 a1 b1 } }) -}
63d70c4f2d77c644511c6d588663f39e
  $fEqExpress_$s$c==8 ::
    InflectionData.Express InflectionData.Polarity
    -> InflectionData.Express InflectionData.Polarity -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: InflectionData.Express InflectionData.Polarity)
                   (ds1 :: InflectionData.Express InflectionData.Polarity) ->
                 case ds of wild {
                   InflectionData.NoExpress
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.True
                        InflectionData.Express ipv -> GHC.Types.False }
                   InflectionData.Express a1
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.False
                        InflectionData.Express b1
                        -> InflectionData.$fEqExpress_$c==6 a1 b1 } }) -}
63d70c4f2d77c644511c6d588663f39e
  $fEqExpress_$s$c==9 ::
    InflectionData.Express InflectionData.Aspect
    -> InflectionData.Express InflectionData.Aspect -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: InflectionData.Express InflectionData.Aspect)
                   (ds1 :: InflectionData.Express InflectionData.Aspect) ->
                 case ds of wild {
                   InflectionData.NoExpress
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.True
                        InflectionData.Express ipv -> GHC.Types.False }
                   InflectionData.Express a1
                   -> case ds1 of wild1 {
                        InflectionData.NoExpress -> GHC.Types.False
                        InflectionData.Express b1
                        -> InflectionData.$fEqAspect_$c== a1 b1 } }) -}
63d70c4f2d77c644511c6d588663f39e
  $fEqExpress_$s$fEqExpress ::
    GHC.Classes.Eq (InflectionData.Express InflectionData.Gender)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Gender)
                  InflectionData.$fEqExpress_$s$c==
                  InflectionData.$fEqExpress_$s$c/= -}
63d70c4f2d77c644511c6d588663f39e
  $fEqExpress_$s$fEqExpress1 ::
    GHC.Classes.Eq (InflectionData.Express InflectionData.Animacy)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Animacy)
                  InflectionData.$fEqExpress_$s$c==1
                  InflectionData.$fEqExpress_$s$c/=1 -}
63d70c4f2d77c644511c6d588663f39e
  $fEqExpress_$s$fEqExpress10 ::
    GHC.Classes.Eq (InflectionData.Express InflectionData.Voice)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Voice)
                  InflectionData.$fEqExpress_$s$c==10
                  InflectionData.$fEqExpress_$s$c/=10 -}
63d70c4f2d77c644511c6d588663f39e
  $fEqExpress_$s$fEqExpress11 ::
    GHC.Classes.Eq
      (InflectionData.Express InflectionData.Evidentiality)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Evidentiality)
                  InflectionData.$fEqExpress_$s$c==11
                  InflectionData.$fEqExpress_$s$c/=11 -}
63d70c4f2d77c644511c6d588663f39e
  $fEqExpress_$s$fEqExpress12 ::
    GHC.Classes.Eq (InflectionData.Express InflectionData.Transitivity)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Transitivity)
                  InflectionData.$fEqExpress_$s$c==12
                  InflectionData.$fEqExpress_$s$c/=12 -}
63d70c4f2d77c644511c6d588663f39e
  $fEqExpress_$s$fEqExpress13 ::
    GHC.Classes.Eq (InflectionData.Express InflectionData.Volition)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Volition)
                  InflectionData.$fEqExpress_$s$c==13
                  InflectionData.$fEqExpress_$s$c/=13 -}
63d70c4f2d77c644511c6d588663f39e
  $fEqExpress_$s$fEqExpress2 ::
    GHC.Classes.Eq (InflectionData.Express InflectionData.Number)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Number)
                  InflectionData.$fEqExpress_$s$c==2
                  InflectionData.$fEqExpress_$s$c/=2 -}
63d70c4f2d77c644511c6d588663f39e
  $fEqExpress_$s$fEqExpress3 ::
    GHC.Classes.Eq (InflectionData.Express InflectionData.Definiteness)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Definiteness)
                  InflectionData.$fEqExpress_$s$c==3
                  InflectionData.$fEqExpress_$s$c/=3 -}
63d70c4f2d77c644511c6d588663f39e
  $fEqExpress_$s$fEqExpress4 ::
    GHC.Classes.Eq (InflectionData.Express InflectionData.Specificity)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Specificity)
                  InflectionData.$fEqExpress_$s$c==4
                  InflectionData.$fEqExpress_$s$c/=4 -}
63d70c4f2d77c644511c6d588663f39e
  $fEqExpress_$s$fEqExpress5 ::
    GHC.Classes.Eq (InflectionData.Express InflectionData.Topic)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Topic)
                  InflectionData.$fEqExpress_$s$c==5
                  InflectionData.$fEqExpress_$s$c/=5 -}
63d70c4f2d77c644511c6d588663f39e
  $fEqExpress_$s$fEqExpress6 ::
    GHC.Classes.Eq (InflectionData.Express InflectionData.Person)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Person)
                  InflectionData.$fEqExpress_$s$c==6
                  InflectionData.$fEqExpress_$s$c/=6 -}
63d70c4f2d77c644511c6d588663f39e
  $fEqExpress_$s$fEqExpress7 ::
    GHC.Classes.Eq (InflectionData.Express InflectionData.Honorific)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Honorific)
                  InflectionData.$fEqExpress_$s$c==7
                  InflectionData.$fEqExpress_$s$c/=7 -}
63d70c4f2d77c644511c6d588663f39e
  $fEqExpress_$s$fEqExpress8 ::
    GHC.Classes.Eq (InflectionData.Express InflectionData.Polarity)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Polarity)
                  InflectionData.$fEqExpress_$s$c==8
                  InflectionData.$fEqExpress_$s$c/=8 -}
63d70c4f2d77c644511c6d588663f39e
  $fEqExpress_$s$fEqExpress9 ::
    GHC.Classes.Eq (InflectionData.Express InflectionData.Aspect)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Aspect)
                  InflectionData.$fEqExpress_$s$c==9
                  InflectionData.$fEqExpress_$s$c/=9 -}
64c563e614d6b39e628a87a4b86c4bcb
  $fEqGender :: GHC.Classes.Eq InflectionData.Gender
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Gender
                  InflectionData.$fEqExpress_$c==
                  InflectionData.$fEqGender_$c/= -}
64c563e614d6b39e628a87a4b86c4bcb
  $fEqGender_$c/= ::
    InflectionData.Gender -> InflectionData.Gender -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: InflectionData.Gender)
                   (b :: InflectionData.Gender) ->
                 case a of wild {
                   InflectionData.UGEN
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.UGEN -> GHC.Types.False }
                   InflectionData.M
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.M -> GHC.Types.False }
                   InflectionData.F
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.F -> GHC.Types.False }
                   InflectionData.COM
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.COM -> GHC.Types.False }
                   InflectionData.N
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.N -> GHC.Types.False } }) -}
87a0680d1783cb156a72782bde86c25f
  $fEqHonorific :: GHC.Classes.Eq InflectionData.Honorific
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Honorific
                  InflectionData.$fEqExpress_$c==5
                  InflectionData.$fEqHonorific_$c/= -}
87a0680d1783cb156a72782bde86c25f
  $fEqHonorific_$c/= ::
    InflectionData.Honorific
    -> InflectionData.Honorific -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: InflectionData.Honorific)
                   (b :: InflectionData.Honorific) ->
                 case a of wild {
                   InflectionData.UHON
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.UHON -> GHC.Types.False }
                   InflectionData.FAM
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.FAM -> GHC.Types.False }
                   InflectionData.NEU
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.NEU -> GHC.Types.False }
                   InflectionData.FORM
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.FORM -> GHC.Types.False } }) -}
6316452e39bc49500385d38be925e2a3
  $fEqInflectionSystem ::
    GHC.Classes.Eq InflectionData.InflectionSystem
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.InflectionSystem
                  InflectionData.$fEqInflectionSystem_$c==
                  InflectionData.$fEqInflectionSystem_$c/= -}
6316452e39bc49500385d38be925e2a3
  $fEqInflectionSystem_$c/= ::
    InflectionData.InflectionSystem
    -> InflectionData.InflectionSystem -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLLLLLLLLLLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)><S(SLLLLLLLLLLLLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: InflectionData.InflectionSystem)
                   (b :: InflectionData.InflectionSystem) ->
                 case InflectionData.$fEqInflectionSystem_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
6316452e39bc49500385d38be925e2a3
  $fEqInflectionSystem_$c== ::
    InflectionData.InflectionSystem
    -> InflectionData.InflectionSystem -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLLLLLLLLLLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)><S(SLLLLLLLLLLLLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: InflectionData.InflectionSystem)
                   (w1 :: InflectionData.InflectionSystem) ->
                 case w of ww { InflectionData.InflectionSystem ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ->
                 case w1 of ww18 { InflectionData.InflectionSystem ww19 ww20 ww21 ww22 ww23 ww24 ww25 ww26 ww27 ww28 ww29 ww30 ww31 ww32 ww33 ww34 ww35 ->
                 InflectionData.$w$c==1
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww17
                   ww19
                   ww20
                   ww21
                   ww22
                   ww23
                   ww24
                   ww25
                   ww26
                   ww27
                   ww28
                   ww29
                   ww30
                   ww31
                   ww32
                   ww33
                   ww34
                   ww35 } }) -}
3578a365ab634279655cb91c03a19c28
  $fEqLexCat :: GHC.Classes.Eq InflectionData.LexCat
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.LexCat
                  InflectionData.$fEqLexCat_$c==
                  InflectionData.$fEqLexCat_$c/= -}
3578a365ab634279655cb91c03a19c28
  $fEqLexCat_$c/= ::
    InflectionData.LexCat -> InflectionData.LexCat -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: InflectionData.LexCat) (b :: InflectionData.LexCat) ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==#
                           (GHC.Prim.dataToTag# @ InflectionData.LexCat x1)
                           (GHC.Prim.dataToTag# @ InflectionData.LexCat x2)) of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
3578a365ab634279655cb91c03a19c28
  $fEqLexCat_$c== ::
    InflectionData.LexCat -> InflectionData.LexCat -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: InflectionData.LexCat) (b :: InflectionData.LexCat) ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.==#
                      (GHC.Prim.dataToTag# @ InflectionData.LexCat x1)
                      (GHC.Prim.dataToTag# @ InflectionData.LexCat x2)) } }) -}
a1f6ea453f44aabd626528c4893e70e2
  $fEqManifest ::
    GHC.Classes.Eq a => GHC.Classes.Eq (InflectionData.Manifest a)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a ($dEq :: GHC.Classes.Eq a).
                  @ (InflectionData.Manifest a)
                  (InflectionData.$fEqManifest_$c== @ a $dEq)
                  (InflectionData.$fEqManifest_$c/= @ a $dEq) -}
e5b6dc9a3e9edcf983171cd7d8ba6306
  $fEqManifestSystem :: GHC.Classes.Eq InflectionData.ManifestSystem
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.ManifestSystem
                  InflectionData.$fEqManifestSystem_$c==
                  InflectionData.$fEqManifestSystem_$c/= -}
c4819d1ea3ff65782d37cef2c07e96c9
  $fEqManifestSystem1 ::
    GHC.Classes.Eq
      (InflectionData.Express InflectionData.Gender,
       InflectionData.Express InflectionData.Animacy,
       InflectionData.Express InflectionData.Case,
       InflectionData.Express InflectionData.Number,
       InflectionData.Express InflectionData.Definiteness,
       InflectionData.Express InflectionData.Specificity,
       InflectionData.Express InflectionData.Topic,
       InflectionData.Express InflectionData.Person,
       InflectionData.Express InflectionData.Honorific,
       InflectionData.Express InflectionData.Polarity,
       InflectionData.Express InflectionData.Tense,
       InflectionData.Express InflectionData.Aspect,
       InflectionData.Express InflectionData.Mood,
       InflectionData.Express InflectionData.Voice,
       InflectionData.Express InflectionData.Evidentiality,
       InflectionData.Express InflectionData.Transitivity,
       InflectionData.Express InflectionData.Volition)
  {- Unfolding: (InflectionData.$fEq(,,,,,,,,,,,,,,,,)
                   @ (InflectionData.Express InflectionData.Gender)
                   @ (InflectionData.Express InflectionData.Animacy)
                   @ (InflectionData.Express InflectionData.Case)
                   @ (InflectionData.Express InflectionData.Number)
                   @ (InflectionData.Express InflectionData.Definiteness)
                   @ (InflectionData.Express InflectionData.Specificity)
                   @ (InflectionData.Express InflectionData.Topic)
                   @ (InflectionData.Express InflectionData.Person)
                   @ (InflectionData.Express InflectionData.Honorific)
                   @ (InflectionData.Express InflectionData.Polarity)
                   @ (InflectionData.Express InflectionData.Tense)
                   @ (InflectionData.Express InflectionData.Aspect)
                   @ (InflectionData.Express InflectionData.Mood)
                   @ (InflectionData.Express InflectionData.Voice)
                   @ (InflectionData.Express InflectionData.Evidentiality)
                   @ (InflectionData.Express InflectionData.Transitivity)
                   @ (InflectionData.Express InflectionData.Volition)
                   InflectionData.$fEqExpress_$s$fEqExpress
                   InflectionData.$fEqExpress_$s$fEqExpress1
                   InflectionData.$fEqManifestSystem4
                   InflectionData.$fEqExpress_$s$fEqExpress2
                   InflectionData.$fEqExpress_$s$fEqExpress3
                   InflectionData.$fEqExpress_$s$fEqExpress4
                   InflectionData.$fEqExpress_$s$fEqExpress5
                   InflectionData.$fEqExpress_$s$fEqExpress6
                   InflectionData.$fEqExpress_$s$fEqExpress7
                   InflectionData.$fEqExpress_$s$fEqExpress8
                   InflectionData.$fEqManifestSystem3
                   InflectionData.$fEqExpress_$s$fEqExpress9
                   InflectionData.$fEqManifestSystem2
                   InflectionData.$fEqExpress_$s$fEqExpress10
                   InflectionData.$fEqExpress_$s$fEqExpress11
                   InflectionData.$fEqExpress_$s$fEqExpress12
                   InflectionData.$fEqExpress_$s$fEqExpress13) -}
da425849e7bbc6f1ce48bfc3195ca754
  $fEqManifestSystem2 ::
    GHC.Classes.Eq (InflectionData.Express InflectionData.Mood)
  {- Unfolding: (InflectionData.$fEqExpress
                   @ InflectionData.Mood
                   InflectionData.$fEqMood) -}
5773310fc98b0dcfe980c8f7c19c7cbb
  $fEqManifestSystem3 ::
    GHC.Classes.Eq (InflectionData.Express InflectionData.Tense)
  {- Unfolding: (InflectionData.$fEqExpress
                   @ InflectionData.Tense
                   InflectionData.$fEqTense) -}
cc3744e8719d4439ca165c03def10b7a
  $fEqManifestSystem4 ::
    GHC.Classes.Eq (InflectionData.Express InflectionData.Case)
  {- Unfolding: (InflectionData.$fEqExpress
                   @ InflectionData.Case
                   InflectionData.$fEqCase) -}
e5b6dc9a3e9edcf983171cd7d8ba6306
  $fEqManifestSystem_$c/= ::
    InflectionData.ManifestSystem
    -> InflectionData.ManifestSystem -> GHC.Types.Bool
  {- Arity: 2,
     Strictness: <S(SLL),1*U(1*U,1*U,1*U)><S(SLL),1*U(1*U,1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: InflectionData.ManifestSystem)
                   (b :: InflectionData.ManifestSystem) ->
                 case InflectionData.$fEqManifestSystem_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
e5b6dc9a3e9edcf983171cd7d8ba6306
  $fEqManifestSystem_$c== ::
    InflectionData.ManifestSystem
    -> InflectionData.ManifestSystem -> GHC.Types.Bool
  {- Arity: 2,
     Strictness: <S(SLL),1*U(1*U,1*U,1*U)><S(SLL),1*U(1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: InflectionData.ManifestSystem)
                   (w1 :: InflectionData.ManifestSystem) ->
                 case w of ww { InflectionData.ManifestSystem ww1 ww2 ww3 ->
                 case w1 of ww4 { InflectionData.ManifestSystem ww5 ww6 ww7 ->
                 InflectionData.$w$c==2 ww1 ww2 ww3 ww5 ww6 ww7 } }) -}
f923d7c8c004da3709206306abecb779
  $fEqManifestSystem_$s$fEq(,) ::
    GHC.Classes.Eq
      (PhonemeData.Morpheme,
       (InflectionData.Express InflectionData.Gender,
        InflectionData.Express InflectionData.Animacy,
        InflectionData.Express InflectionData.Case,
        InflectionData.Express InflectionData.Number,
        InflectionData.Express InflectionData.Definiteness,
        InflectionData.Express InflectionData.Specificity,
        InflectionData.Express InflectionData.Topic,
        InflectionData.Express InflectionData.Person,
        InflectionData.Express InflectionData.Honorific,
        InflectionData.Express InflectionData.Polarity,
        InflectionData.Express InflectionData.Tense,
        InflectionData.Express InflectionData.Aspect,
        InflectionData.Express InflectionData.Mood,
        InflectionData.Express InflectionData.Voice,
        InflectionData.Express InflectionData.Evidentiality,
        InflectionData.Express InflectionData.Transitivity,
        InflectionData.Express InflectionData.Volition))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (PhonemeData.Morpheme,
                     (InflectionData.Express InflectionData.Gender,
                      InflectionData.Express InflectionData.Animacy,
                      InflectionData.Express InflectionData.Case,
                      InflectionData.Express InflectionData.Number,
                      InflectionData.Express InflectionData.Definiteness,
                      InflectionData.Express InflectionData.Specificity,
                      InflectionData.Express InflectionData.Topic,
                      InflectionData.Express InflectionData.Person,
                      InflectionData.Express InflectionData.Honorific,
                      InflectionData.Express InflectionData.Polarity,
                      InflectionData.Express InflectionData.Tense,
                      InflectionData.Express InflectionData.Aspect,
                      InflectionData.Express InflectionData.Mood,
                      InflectionData.Express InflectionData.Voice,
                      InflectionData.Express InflectionData.Evidentiality,
                      InflectionData.Express InflectionData.Transitivity,
                      InflectionData.Express InflectionData.Volition))
                  (GHC.Classes.$fEq(,)_$c==
                     @ PhonemeData.Morpheme
                     @ (InflectionData.Express InflectionData.Gender,
                        InflectionData.Express InflectionData.Animacy,
                        InflectionData.Express InflectionData.Case,
                        InflectionData.Express InflectionData.Number,
                        InflectionData.Express InflectionData.Definiteness,
                        InflectionData.Express InflectionData.Specificity,
                        InflectionData.Express InflectionData.Topic,
                        InflectionData.Express InflectionData.Person,
                        InflectionData.Express InflectionData.Honorific,
                        InflectionData.Express InflectionData.Polarity,
                        InflectionData.Express InflectionData.Tense,
                        InflectionData.Express InflectionData.Aspect,
                        InflectionData.Express InflectionData.Mood,
                        InflectionData.Express InflectionData.Voice,
                        InflectionData.Express InflectionData.Evidentiality,
                        InflectionData.Express InflectionData.Transitivity,
                        InflectionData.Express InflectionData.Volition)
                     PhonemeData.$fEqMorpheme
                     InflectionData.$fEqManifestSystem1)
                  (GHC.Classes.$fEq(,)_$c/=
                     @ PhonemeData.Morpheme
                     @ (InflectionData.Express InflectionData.Gender,
                        InflectionData.Express InflectionData.Animacy,
                        InflectionData.Express InflectionData.Case,
                        InflectionData.Express InflectionData.Number,
                        InflectionData.Express InflectionData.Definiteness,
                        InflectionData.Express InflectionData.Specificity,
                        InflectionData.Express InflectionData.Topic,
                        InflectionData.Express InflectionData.Person,
                        InflectionData.Express InflectionData.Honorific,
                        InflectionData.Express InflectionData.Polarity,
                        InflectionData.Express InflectionData.Tense,
                        InflectionData.Express InflectionData.Aspect,
                        InflectionData.Express InflectionData.Mood,
                        InflectionData.Express InflectionData.Voice,
                        InflectionData.Express InflectionData.Evidentiality,
                        InflectionData.Express InflectionData.Transitivity,
                        InflectionData.Express InflectionData.Volition)
                     PhonemeData.$fEqMorpheme
                     InflectionData.$fEqManifestSystem1) -}
677e71acbe1d0c53534632b1806c94f3
  $fEqManifestType :: GHC.Classes.Eq InflectionData.ManifestType
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.ManifestType
                  InflectionData.$fEqManifestType_$c==
                  InflectionData.$fEqManifestType_$c/= -}
677e71acbe1d0c53534632b1806c94f3
  $fEqManifestType_$c/= ::
    InflectionData.ManifestType
    -> InflectionData.ManifestType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: InflectionData.ManifestType)
                   (b :: InflectionData.ManifestType) ->
                 case a of wild {
                   InflectionData.Particle
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.Particle -> GHC.Types.False }
                   InflectionData.Prefix
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.Prefix -> GHC.Types.False }
                   InflectionData.Suffix
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.Suffix -> GHC.Types.False } }) -}
677e71acbe1d0c53534632b1806c94f3
  $fEqManifestType_$c== ::
    InflectionData.ManifestType
    -> InflectionData.ManifestType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: InflectionData.ManifestType)
                   (ds1 :: InflectionData.ManifestType) ->
                 case ds of wild {
                   InflectionData.Particle
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.Particle -> GHC.Types.True }
                   InflectionData.Prefix
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.Prefix -> GHC.Types.True }
                   InflectionData.Suffix
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        InflectionData.Suffix -> GHC.Types.True } }) -}
a1f6ea453f44aabd626528c4893e70e2
  $fEqManifest_$c/= ::
    GHC.Classes.Eq a =>
    InflectionData.Manifest a
    -> InflectionData.Manifest a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   (a1 :: InflectionData.Manifest a)
                   (b :: InflectionData.Manifest a) ->
                 case a1 of wild {
                   InflectionData.NoManifest
                   -> case b of wild1 {
                        InflectionData.NoManifest -> GHC.Types.False
                        InflectionData.Manifest ipv ipv1 -> GHC.Types.True }
                   InflectionData.Manifest a2 a3
                   -> case b of wild1 {
                        InflectionData.NoManifest -> GHC.Types.True
                        InflectionData.Manifest b1 b2
                        -> case GHC.Classes.$fEq[]_$c==
                                  @ (InflectionData.LexCat, InflectionData.ManifestType,
                                     GHC.Types.Int)
                                  InflectionData.$fEqManifest_$s$fEq(,,)
                                  a2
                                  b1 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True
                             -> case GHC.Classes.== @ a $dEq a3 b2 of wild3 {
                                  GHC.Types.False -> GHC.Types.True
                                  GHC.Types.True -> GHC.Types.False } } } }) -}
a1f6ea453f44aabd626528c4893e70e2
  $fEqManifest_$c== ::
    GHC.Classes.Eq a =>
    InflectionData.Manifest a
    -> InflectionData.Manifest a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   (ds :: InflectionData.Manifest a)
                   (ds1 :: InflectionData.Manifest a) ->
                 case ds of wild {
                   InflectionData.NoManifest
                   -> case ds1 of wild1 {
                        InflectionData.NoManifest -> GHC.Types.True
                        InflectionData.Manifest ipv ipv1 -> GHC.Types.False }
                   InflectionData.Manifest a1 a2
                   -> case ds1 of wild1 {
                        InflectionData.NoManifest -> GHC.Types.False
                        InflectionData.Manifest b1 b2
                        -> case GHC.Classes.$fEq[]_$c==
                                  @ (InflectionData.LexCat, InflectionData.ManifestType,
                                     GHC.Types.Int)
                                  InflectionData.$fEqManifest_$s$fEq(,,)
                                  a1
                                  b1 of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True -> GHC.Classes.== @ a $dEq a2 b2 } } }) -}
59556a089b0ba324cc65ef016be9cdc5
  $fEqManifest_$s$c==16 ::
    InflectionData.Manifest [InflectionData.Volition]
    -> InflectionData.Manifest [InflectionData.Volition]
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: InflectionData.Manifest
                            [InflectionData.Volition])
                   (ds1 :: InflectionData.Manifest [InflectionData.Volition]) ->
                 case ds of wild {
                   InflectionData.NoManifest
                   -> case ds1 of wild1 {
                        InflectionData.NoManifest -> GHC.Types.True
                        InflectionData.Manifest ipv ipv1 -> GHC.Types.False }
                   InflectionData.Manifest a1 a2
                   -> case ds1 of wild1 {
                        InflectionData.NoManifest -> GHC.Types.False
                        InflectionData.Manifest b1 b2
                        -> case GHC.Classes.$fEq[]_$c==
                                  @ (InflectionData.LexCat, InflectionData.ManifestType,
                                     GHC.Types.Int)
                                  InflectionData.$fEqManifest_$s$fEq(,,)
                                  a1
                                  b1 of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> GHC.Classes.$fEq[]_$c==
                                  @ InflectionData.Volition
                                  InflectionData.$fEqVolition
                                  a2
                                  b2 } } }) -}
82db0c172c82d7330e1998938d95787c
  $fEqManifest_$s$fEq(,,) ::
    GHC.Classes.Eq
      (InflectionData.LexCat, InflectionData.ManifestType, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.LexCat, InflectionData.ManifestType,
                     GHC.Types.Int)
                  (GHC.Classes.$fEq(,,)_$c==
                     @ InflectionData.LexCat
                     @ InflectionData.ManifestType
                     @ GHC.Types.Int
                     InflectionData.$fEqLexCat
                     InflectionData.$fEqManifestType
                     GHC.Classes.$fEqInt)
                  InflectionData.$fEqManifest_$s$fEq(,,)_$c/= -}
3ca129c8d34e3c738e6786f213e53e15
  $fEqManifest_$s$fEq(,,)_$c/= ::
    (InflectionData.LexCat, InflectionData.ManifestType, GHC.Types.Int)
    -> (InflectionData.LexCat, InflectionData.ManifestType,
        GHC.Types.Int)
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U,1*U,1*U(U))><S(SLL),1*U(1*U,1*U,1*U(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (a1 :: (InflectionData.LexCat, InflectionData.ManifestType,
                           GHC.Types.Int))
                   (b1 :: (InflectionData.LexCat, InflectionData.ManifestType,
                           GHC.Types.Int)) ->
                 case GHC.Classes.$fEq(,,)_$c==
                        @ InflectionData.LexCat
                        @ InflectionData.ManifestType
                        @ GHC.Types.Int
                        InflectionData.$fEqLexCat
                        InflectionData.$fEqManifestType
                        GHC.Classes.$fEqInt
                        a1
                        b1 of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
a933e005d0b61de32dcb62fc71171e9c
  $fEqMood :: GHC.Classes.Eq InflectionData.Mood
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Mood
                  InflectionData.$fEqMood_$c==
                  InflectionData.$fEqMood_$c/= -}
a933e005d0b61de32dcb62fc71171e9c
  $fEqMood_$c/= ::
    InflectionData.Mood -> InflectionData.Mood -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: InflectionData.Mood) (b :: InflectionData.Mood) ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==#
                           (GHC.Prim.dataToTag# @ InflectionData.Mood x1)
                           (GHC.Prim.dataToTag# @ InflectionData.Mood x2)) of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
a933e005d0b61de32dcb62fc71171e9c
  $fEqMood_$c== ::
    InflectionData.Mood -> InflectionData.Mood -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: InflectionData.Mood) (b :: InflectionData.Mood) ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.==#
                      (GHC.Prim.dataToTag# @ InflectionData.Mood x1)
                      (GHC.Prim.dataToTag# @ InflectionData.Mood x2)) } }) -}
819df3b7803a0b6e1c638b12031d1054
  $fEqNumber :: GHC.Classes.Eq InflectionData.Number
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Number
                  InflectionData.$fEqExpress_$c==1
                  InflectionData.$fEqNumber_$c/= -}
819df3b7803a0b6e1c638b12031d1054
  $fEqNumber_$c/= ::
    InflectionData.Number -> InflectionData.Number -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: InflectionData.Number)
                   (b :: InflectionData.Number) ->
                 case a of wild {
                   InflectionData.UNUM
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.UNUM -> GHC.Types.False }
                   InflectionData.SG
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.SG -> GHC.Types.False }
                   InflectionData.DU
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.DU -> GHC.Types.False }
                   InflectionData.TRI
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.TRI -> GHC.Types.False }
                   InflectionData.PA
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.PA -> GHC.Types.False }
                   InflectionData.PL
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.PL -> GHC.Types.False } }) -}
9a6bbd54f38dfeb1bf3b7d7991f3da1c
  $fEqPerson :: GHC.Classes.Eq InflectionData.Person
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Person
                  InflectionData.$fEqExpress_$c==4
                  InflectionData.$fEqPerson_$c/= -}
9a6bbd54f38dfeb1bf3b7d7991f3da1c
  $fEqPerson_$c/= ::
    InflectionData.Person -> InflectionData.Person -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: InflectionData.Person)
                   (b :: InflectionData.Person) ->
                 case a of wild {
                   InflectionData.UPER
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.UPER -> GHC.Types.False }
                   InflectionData.FIRST
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.FIRST -> GHC.Types.False }
                   InflectionData.FSTINCL
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.FSTINCL -> GHC.Types.False }
                   InflectionData.FSTEXCL
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.FSTEXCL -> GHC.Types.False }
                   InflectionData.SECOND
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.SECOND -> GHC.Types.False }
                   InflectionData.THIRD
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.THIRD -> GHC.Types.False }
                   InflectionData.THRDPROX
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.THRDPROX -> GHC.Types.False }
                   InflectionData.THRDOBV
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.THRDOBV -> GHC.Types.False } }) -}
969cd5a99a727ddd44430477f29dd629
  $fEqPolarity :: GHC.Classes.Eq InflectionData.Polarity
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Polarity
                  InflectionData.$fEqExpress_$c==6
                  InflectionData.$fEqPolarity_$c/= -}
969cd5a99a727ddd44430477f29dd629
  $fEqPolarity_$c/= ::
    InflectionData.Polarity
    -> InflectionData.Polarity -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: InflectionData.Polarity) (b :: InflectionData.Polarity) ->
                 case a of wild {
                   InflectionData.UPOL
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.UPOL -> GHC.Types.False }
                   InflectionData.AFF
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.AFF -> GHC.Types.False }
                   InflectionData.NEG
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.NEG -> GHC.Types.False } }) -}
6fb3d15dec5a1fd023a4704d57cac2a0
  $fEqSpecificity :: GHC.Classes.Eq InflectionData.Specificity
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Specificity
                  InflectionData.$fEqExpress_$c==2
                  InflectionData.$fEqSpecificity_$c/= -}
6fb3d15dec5a1fd023a4704d57cac2a0
  $fEqSpecificity_$c/= ::
    InflectionData.Specificity
    -> InflectionData.Specificity -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: InflectionData.Specificity)
                   (b :: InflectionData.Specificity) ->
                 case a of wild {
                   InflectionData.USPE
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.USPE -> GHC.Types.False }
                   InflectionData.SPEC
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.SPEC -> GHC.Types.False }
                   InflectionData.NSPEC
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.NSPEC -> GHC.Types.False } }) -}
a794f63e2da02424ad65302f61d49d0d
  $fEqTense :: GHC.Classes.Eq InflectionData.Tense
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Tense
                  InflectionData.$fEqTense_$c==
                  InflectionData.$fEqTense_$c/= -}
a794f63e2da02424ad65302f61d49d0d
  $fEqTense_$c/= ::
    InflectionData.Tense -> InflectionData.Tense -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: InflectionData.Tense) (b :: InflectionData.Tense) ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==#
                           (GHC.Prim.dataToTag# @ InflectionData.Tense x1)
                           (GHC.Prim.dataToTag# @ InflectionData.Tense x2)) of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
a794f63e2da02424ad65302f61d49d0d
  $fEqTense_$c== ::
    InflectionData.Tense -> InflectionData.Tense -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: InflectionData.Tense) (b :: InflectionData.Tense) ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.==#
                      (GHC.Prim.dataToTag# @ InflectionData.Tense x1)
                      (GHC.Prim.dataToTag# @ InflectionData.Tense x2)) } }) -}
d8981f1670fc020ebc5d708b5dd733da
  $fEqTopic :: GHC.Classes.Eq InflectionData.Topic
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Topic
                  InflectionData.$fEqExpress_$c==3
                  InflectionData.$fEqTopic_$c/= -}
d8981f1670fc020ebc5d708b5dd733da
  $fEqTopic_$c/= ::
    InflectionData.Topic -> InflectionData.Topic -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: InflectionData.Topic) (b :: InflectionData.Topic) ->
                 case a of wild {
                   InflectionData.UTOP
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.UTOP -> GHC.Types.False }
                   InflectionData.TOP
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.TOP -> GHC.Types.False }
                   InflectionData.NTOP
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.NTOP -> GHC.Types.False } }) -}
fbfbb10e2c2bf7855f3005c5f582ce67
  $fEqTransitivity :: GHC.Classes.Eq InflectionData.Transitivity
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Transitivity
                  InflectionData.$fEqExpress_$c==8
                  InflectionData.$fEqTransitivity_$c/= -}
fbfbb10e2c2bf7855f3005c5f582ce67
  $fEqTransitivity_$c/= ::
    InflectionData.Transitivity
    -> InflectionData.Transitivity -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: InflectionData.Transitivity)
                   (b :: InflectionData.Transitivity) ->
                 case a of wild {
                   InflectionData.UTRA
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.UTRA -> GHC.Types.False }
                   InflectionData.NTRANS
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.NTRANS -> GHC.Types.False }
                   InflectionData.TRANS
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.TRANS -> GHC.Types.False }
                   InflectionData.MTRANS
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.MTRANS -> GHC.Types.False }
                   InflectionData.DITRANS
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.DITRANS -> GHC.Types.False } }) -}
8a5a669af2386e102c8f50cb27f7b624
  $fEqVoice :: GHC.Classes.Eq InflectionData.Voice
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Voice
                  InflectionData.$fEqExpress_$c==7
                  InflectionData.$fEqVoice_$c/= -}
8a5a669af2386e102c8f50cb27f7b624
  $fEqVoice_$c/= ::
    InflectionData.Voice -> InflectionData.Voice -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: InflectionData.Voice)
                   (b :: InflectionData.Voice) ->
                 case a of wild {
                   InflectionData.UVOI
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.UVOI -> GHC.Types.False }
                   InflectionData.ACTIVE
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.ACTIVE -> GHC.Types.False }
                   InflectionData.MIDDLE
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.MIDDLE -> GHC.Types.False }
                   InflectionData.PASSIVE
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.PASSIVE -> GHC.Types.False } }) -}
3559279b2cc9168c42f1489c451a8e43
  $fEqVolition :: GHC.Classes.Eq InflectionData.Volition
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Volition
                  InflectionData.$fEqExpress_$c==9
                  InflectionData.$fEqVolition_$c/= -}
3559279b2cc9168c42f1489c451a8e43
  $fEqVolition_$c/= ::
    InflectionData.Volition
    -> InflectionData.Volition -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: InflectionData.Volition) (b :: InflectionData.Volition) ->
                 case a of wild {
                   InflectionData.UVOL
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.UVOL -> GHC.Types.False }
                   InflectionData.VOL
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True InflectionData.VOL -> GHC.Types.False }
                   InflectionData.NVOL
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        InflectionData.NVOL -> GHC.Types.False } }) -}
4e33e0bcf50cecb3bec919a410a917b8
  $fReadAnimacy :: GHC.Read.Read InflectionData.Animacy
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Animacy
                  InflectionData.$fReadAnimacy_$creadsPrec
                  InflectionData.$fReadAnimacy_$creadList
                  InflectionData.$fReadAnimacy_$creadPrec
                  InflectionData.$fReadAnimacy_$creadListPrec -}
4e33e0bcf50cecb3bec919a410a917b8
  $fReadAnimacy1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Animacy] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [InflectionData.Animacy]
                            -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.$wlist
                   @ InflectionData.Animacy
                   InflectionData.$fReadAnimacy2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <InflectionData.Animacy>_R))
                   @ b
                   eta1) -}
4e33e0bcf50cecb3bec919a410a917b8
  $fReadAnimacy10 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadAnimacy12,
                  InflectionData.$fReadAnimacy11
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Animacy>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Animacy>_R))))) -}
4e33e0bcf50cecb3bec919a410a917b8
  $fReadAnimacy11 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Animacy -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Animacy
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.INAN) -}
0c6720333670b1b1301e450ed0388718
  $fReadAnimacy12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "INAN"#) -}
4e33e0bcf50cecb3bec919a410a917b8
  $fReadAnimacy13 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadAnimacy15,
                  InflectionData.$fReadAnimacy14
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Animacy>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Animacy>_R))))) -}
4e33e0bcf50cecb3bec919a410a917b8
  $fReadAnimacy14 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Animacy -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Animacy
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.ZO) -}
ac2bddd0b1da0552acc8ce534c94aa40
  $fReadAnimacy15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ZO"#) -}
4e33e0bcf50cecb3bec919a410a917b8
  $fReadAnimacy16 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadAnimacy18,
                  InflectionData.$fReadAnimacy17
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Animacy>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Animacy>_R))))) -}
4e33e0bcf50cecb3bec919a410a917b8
  $fReadAnimacy17 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Animacy -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Animacy
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.NHUM) -}
a4c374dc336bbfc50f7d221910c06ded
  $fReadAnimacy18 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NHUM"#) -}
4e33e0bcf50cecb3bec919a410a917b8
  $fReadAnimacy19 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadAnimacy21,
                  InflectionData.$fReadAnimacy20
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Animacy>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Animacy>_R))))) -}
4e33e0bcf50cecb3bec919a410a917b8
  $fReadAnimacy2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Animacy
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Animacy
                   InflectionData.$fReadAnimacy3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <InflectionData.Animacy>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <InflectionData.Animacy>_R)))) -}
4e33e0bcf50cecb3bec919a410a917b8
  $fReadAnimacy20 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Animacy -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Animacy
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.HUM) -}
a92266c421d75fd96ccca56888df84ee
  $fReadAnimacy21 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "HUM"#) -}
4e33e0bcf50cecb3bec919a410a917b8
  $fReadAnimacy22 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadAnimacy24,
                  InflectionData.$fReadAnimacy23
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Animacy>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Animacy>_R))))) -}
4e33e0bcf50cecb3bec919a410a917b8
  $fReadAnimacy23 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Animacy -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Animacy
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.AN) -}
964aa21baf46879f5a33b4f17aa5b944
  $fReadAnimacy24 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AN"#) -}
4e33e0bcf50cecb3bec919a410a917b8
  $fReadAnimacy25 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadAnimacy27,
                  InflectionData.$fReadAnimacy26
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Animacy>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Animacy>_R))))) -}
4e33e0bcf50cecb3bec919a410a917b8
  $fReadAnimacy26 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Animacy -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Animacy
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.UANI) -}
0df5ca7db475f3a070e7bb5ddde47994
  $fReadAnimacy27 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "UANI"#) -}
4e33e0bcf50cecb3bec919a410a917b8
  $fReadAnimacy28 ::
    Text.ParserCombinators.ReadP.P [InflectionData.Animacy]
  {- Unfolding: (GHC.Read.$wlist
                   @ InflectionData.Animacy
                   InflectionData.$fReadAnimacy2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <InflectionData.Animacy>_R))
                   @ [InflectionData.Animacy]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [InflectionData.Animacy])) -}
4e33e0bcf50cecb3bec919a410a917b8
  $fReadAnimacy3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Animacy -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: InflectionData.Animacy
                            -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.choose2
                   @ InflectionData.Animacy
                   InflectionData.$fReadAnimacy4
                   eta
                   @ b
                   eta1) -}
4e33e0bcf50cecb3bec919a410a917b8
  $fReadAnimacy4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)
                   InflectionData.$fReadAnimacy25
                   InflectionData.$fReadAnimacy5) -}
4e33e0bcf50cecb3bec919a410a917b8
  $fReadAnimacy5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)
                   InflectionData.$fReadAnimacy22
                   InflectionData.$fReadAnimacy6) -}
4e33e0bcf50cecb3bec919a410a917b8
  $fReadAnimacy6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)
                   InflectionData.$fReadAnimacy19
                   InflectionData.$fReadAnimacy7) -}
4e33e0bcf50cecb3bec919a410a917b8
  $fReadAnimacy7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)
                   InflectionData.$fReadAnimacy16
                   InflectionData.$fReadAnimacy8) -}
4e33e0bcf50cecb3bec919a410a917b8
  $fReadAnimacy8 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)
                   InflectionData.$fReadAnimacy13
                   InflectionData.$fReadAnimacy9) -}
4e33e0bcf50cecb3bec919a410a917b8
  $fReadAnimacy9 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy)
                   InflectionData.$fReadAnimacy10
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           InflectionData.Animacy))) -}
4e33e0bcf50cecb3bec919a410a917b8
  $fReadAnimacy_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Animacy]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Animacy]
                   InflectionData.$fReadAnimacy28) -}
4e33e0bcf50cecb3bec919a410a917b8
  $fReadAnimacy_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [InflectionData.Animacy]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadAnimacy1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[InflectionData.Animacy]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[InflectionData.Animacy]>_R))) -}
4e33e0bcf50cecb3bec919a410a917b8
  $fReadAnimacy_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Animacy
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadAnimacy2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <InflectionData.Animacy>_R)) -}
4e33e0bcf50cecb3bec919a410a917b8
  $fReadAnimacy_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Animacy
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ InflectionData.Animacy
                   ((GHC.Read.$fReadDouble10
                       @ InflectionData.Animacy
                       InflectionData.$fReadAnimacy3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <InflectionData.Animacy>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <InflectionData.Animacy>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0]
                         <InflectionData.Animacy>_R)
                      @ InflectionData.Animacy
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ InflectionData.Animacy))) -}
cc1d01770048a1b059770fc511c26180
  $fReadAspect :: GHC.Read.Read InflectionData.Aspect
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Aspect
                  InflectionData.$fReadAspect_$creadsPrec
                  InflectionData.$fReadAspect_$creadList
                  InflectionData.$fReadAspect_$creadPrec
                  InflectionData.$fReadAspect_$creadListPrec -}
cc1d01770048a1b059770fc511c26180
  $fReadAspect1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Aspect] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [InflectionData.Aspect]
                            -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.$wlist
                   @ InflectionData.Aspect
                   InflectionData.$fReadAspect2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <InflectionData.Aspect>_R))
                   @ b
                   eta1) -}
cc1d01770048a1b059770fc511c26180
  $fReadAspect10 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)
                   InflectionData.$fReadAspect15
                   InflectionData.$fReadAspect11) -}
cc1d01770048a1b059770fc511c26180
  $fReadAspect11 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)
                   InflectionData.$fReadAspect12
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           InflectionData.Aspect))) -}
cc1d01770048a1b059770fc511c26180
  $fReadAspect12 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadAspect14,
                  InflectionData.$fReadAspect13
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Aspect>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Aspect>_R))))) -}
cc1d01770048a1b059770fc511c26180
  $fReadAspect13 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Aspect -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Aspect
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.PROG) -}
78abb60461eadaf03be7787983d953aa
  $fReadAspect14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PROG"#) -}
cc1d01770048a1b059770fc511c26180
  $fReadAspect15 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadAspect17,
                  InflectionData.$fReadAspect16
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Aspect>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Aspect>_R))))) -}
cc1d01770048a1b059770fc511c26180
  $fReadAspect16 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Aspect -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Aspect
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.NPROG) -}
358c7c753b2873fb323b7d0b6a13ea4d
  $fReadAspect17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NPROG"#) -}
cc1d01770048a1b059770fc511c26180
  $fReadAspect18 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadAspect20,
                  InflectionData.$fReadAspect19
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Aspect>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Aspect>_R))))) -}
cc1d01770048a1b059770fc511c26180
  $fReadAspect19 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Aspect -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Aspect
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.CONT) -}
cc1d01770048a1b059770fc511c26180
  $fReadAspect2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Aspect
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Aspect
                   InflectionData.$fReadAspect3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <InflectionData.Aspect>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <InflectionData.Aspect>_R)))) -}
89e426fd0bd711311d3c76386dbc11e2
  $fReadAspect20 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "CONT"#) -}
cc1d01770048a1b059770fc511c26180
  $fReadAspect21 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadAspect23,
                  InflectionData.$fReadAspect22
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Aspect>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Aspect>_R))))) -}
cc1d01770048a1b059770fc511c26180
  $fReadAspect22 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Aspect -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Aspect
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.HAB) -}
25c41e5d7e1afec65429c269fc9b7df0
  $fReadAspect23 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "HAB"#) -}
cc1d01770048a1b059770fc511c26180
  $fReadAspect24 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadAspect26,
                  InflectionData.$fReadAspect25
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Aspect>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Aspect>_R))))) -}
cc1d01770048a1b059770fc511c26180
  $fReadAspect25 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Aspect -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Aspect
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.IPFV) -}
83e116b91fc6848e7149cb123dded177
  $fReadAspect26 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "IPFV"#) -}
cc1d01770048a1b059770fc511c26180
  $fReadAspect27 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadAspect29,
                  InflectionData.$fReadAspect28
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Aspect>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Aspect>_R))))) -}
cc1d01770048a1b059770fc511c26180
  $fReadAspect28 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Aspect -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Aspect
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.PFV) -}
f8e8e79a3cd271ede12409b6db6ee9bf
  $fReadAspect29 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PFV"#) -}
cc1d01770048a1b059770fc511c26180
  $fReadAspect3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Aspect -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: InflectionData.Aspect
                            -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.choose2
                   @ InflectionData.Aspect
                   InflectionData.$fReadAspect4
                   eta
                   @ b
                   eta1) -}
cc1d01770048a1b059770fc511c26180
  $fReadAspect30 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadAspect32,
                  InflectionData.$fReadAspect31
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Aspect>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Aspect>_R))))) -}
cc1d01770048a1b059770fc511c26180
  $fReadAspect31 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Aspect -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Aspect
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.NNPROG) -}
e122d4f583fcf16da2a049c19593f047
  $fReadAspect32 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NNPROG"#) -}
cc1d01770048a1b059770fc511c26180
  $fReadAspect33 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadAspect35,
                  InflectionData.$fReadAspect34
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Aspect>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Aspect>_R))))) -}
cc1d01770048a1b059770fc511c26180
  $fReadAspect34 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Aspect -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Aspect
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.UASP) -}
a7c8ac6707d08d35b372517ebbb0ff0e
  $fReadAspect35 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "UASP"#) -}
cc1d01770048a1b059770fc511c26180
  $fReadAspect36 ::
    Text.ParserCombinators.ReadP.P [InflectionData.Aspect]
  {- Unfolding: (GHC.Read.$wlist
                   @ InflectionData.Aspect
                   InflectionData.$fReadAspect2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <InflectionData.Aspect>_R))
                   @ [InflectionData.Aspect]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [InflectionData.Aspect])) -}
cc1d01770048a1b059770fc511c26180
  $fReadAspect4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)
                   InflectionData.$fReadAspect33
                   InflectionData.$fReadAspect5) -}
cc1d01770048a1b059770fc511c26180
  $fReadAspect5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)
                   InflectionData.$fReadAspect30
                   InflectionData.$fReadAspect6) -}
cc1d01770048a1b059770fc511c26180
  $fReadAspect6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)
                   InflectionData.$fReadAspect27
                   InflectionData.$fReadAspect7) -}
cc1d01770048a1b059770fc511c26180
  $fReadAspect7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)
                   InflectionData.$fReadAspect24
                   InflectionData.$fReadAspect8) -}
cc1d01770048a1b059770fc511c26180
  $fReadAspect8 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)
                   InflectionData.$fReadAspect21
                   InflectionData.$fReadAspect9) -}
cc1d01770048a1b059770fc511c26180
  $fReadAspect9 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect)
                   InflectionData.$fReadAspect18
                   InflectionData.$fReadAspect10) -}
cc1d01770048a1b059770fc511c26180
  $fReadAspect_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Aspect]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Aspect]
                   InflectionData.$fReadAspect36) -}
cc1d01770048a1b059770fc511c26180
  $fReadAspect_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [InflectionData.Aspect]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadAspect1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[InflectionData.Aspect]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[InflectionData.Aspect]>_R))) -}
cc1d01770048a1b059770fc511c26180
  $fReadAspect_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Aspect
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadAspect2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <InflectionData.Aspect>_R)) -}
cc1d01770048a1b059770fc511c26180
  $fReadAspect_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Aspect
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ InflectionData.Aspect
                   ((GHC.Read.$fReadDouble10
                       @ InflectionData.Aspect
                       InflectionData.$fReadAspect3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <InflectionData.Aspect>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <InflectionData.Aspect>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <InflectionData.Aspect>_R)
                      @ InflectionData.Aspect
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ InflectionData.Aspect))) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase :: GHC.Read.Read InflectionData.Case
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Case
                  InflectionData.$fReadCase_$creadsPrec
                  InflectionData.$fReadCase_$creadList
                  InflectionData.$fReadCase_$creadPrec
                  InflectionData.$fReadCase_$creadListPrec -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Case] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [InflectionData.Case]
                            -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.$wlist
                   @ InflectionData.Case
                   InflectionData.$fReadCase2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <InflectionData.Case>_R))
                   @ b
                   eta1) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase10 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase179
                   InflectionData.$fReadCase11) -}
e6afc951de6036ada7c8af8e6b4986e7
  $fReadCase100 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "COMP"#) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase101 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase103,
                  InflectionData.$fReadCase102
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase102 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.ABL) -}
6c5b502990b6f0edc910ec8a64859e66
  $fReadCase103 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ABL"#) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase104 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase106,
                  InflectionData.$fReadCase105
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase105 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.LOC) -}
299674106fda6d65226b3bd115ec1e66
  $fReadCase106 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "LOC"#) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase107 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase109,
                  InflectionData.$fReadCase108
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase108 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.LAT) -}
0fa51dd503cd32073e03d2810e4631ba
  $fReadCase109 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "LAT"#) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase11 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase176
                   InflectionData.$fReadCase12) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase110 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase112,
                  InflectionData.$fReadCase111
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase111 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.POST) -}
93e4c26c5d9f1390713475c08ece463f
  $fReadCase112 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "POST"#) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase113 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase115,
                  InflectionData.$fReadCase114
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase114 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.PREP) -}
ff374ed0cfb66c5c29cf15b0935da08d
  $fReadCase115 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PREP"#) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase116 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase118,
                  InflectionData.$fReadCase117
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase117 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.ADP) -}
2f7949bc68862378bf1558b389e38291
  $fReadCase118 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ADP"#) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase119 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase121,
                  InflectionData.$fReadCase120
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase12 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase173
                   InflectionData.$fReadCase13) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase120 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.OBL6) -}
df46980b3505f0060c3386f266d8c504
  $fReadCase121 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OBL6"#) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase122 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase124,
                  InflectionData.$fReadCase123
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase123 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.OBL5) -}
d230091127e2091ffb8b2e46b197f988
  $fReadCase124 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OBL5"#) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase125 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase127,
                  InflectionData.$fReadCase126
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase126 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.OBL4) -}
c8ab7f635769e68f83749798421ad65f
  $fReadCase127 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OBL4"#) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase128 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase130,
                  InflectionData.$fReadCase129
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase129 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.OBL3) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase13 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase170
                   InflectionData.$fReadCase14) -}
d9a9d9cd85165ae8918531c658cd63a6
  $fReadCase130 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OBL3"#) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase131 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase133,
                  InflectionData.$fReadCase132
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase132 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.OBL2) -}
ab576e688ad3ad42f2820dd2f57ef125
  $fReadCase133 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OBL2"#) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase134 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase136,
                  InflectionData.$fReadCase135
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase135 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.OBL1) -}
5e1186de43d88516d7a2d3dfad995004
  $fReadCase136 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OBL1"#) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase137 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase139,
                  InflectionData.$fReadCase138
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase138 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.DRT2) -}
5d8683589c4e23dc4a330e4f89dbc0ad
  $fReadCase139 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DRT2"#) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase14 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase167
                   InflectionData.$fReadCase15) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase140 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase142,
                  InflectionData.$fReadCase141
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase141 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.TR) -}
060ec2e986dea19dec3c9c26ae2de66b
  $fReadCase142 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TR"#) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase143 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase145,
                  InflectionData.$fReadCase144
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase144 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.DRT1) -}
570b478d48948f11f584ca98bd7889d5
  $fReadCase145 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DRT1"#) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase146 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase148,
                  InflectionData.$fReadCase147
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase147 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.OBJ) -}
83c789e7e7d512f130fdcd6e6ad7b433
  $fReadCase148 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OBJ"#) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase149 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase151,
                  InflectionData.$fReadCase150
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase15 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase164
                   InflectionData.$fReadCase16) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase150 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.DTR) -}
2edbafbe2069d30e4e44e25bd18c2b8e
  $fReadCase151 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DTR"#) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase152 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase154,
                  InflectionData.$fReadCase153
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase153 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.ABS3) -}
39196d0aef0f0f482f880e6f22481b7d
  $fReadCase154 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ABS3"#) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase155 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase157,
                  InflectionData.$fReadCase156
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase156 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.ABS2) -}
e9e589afbc9bc805a0b11b6067c8cbf5
  $fReadCase157 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ABS2"#) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase158 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase160,
                  InflectionData.$fReadCase159
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase159 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.NOM2) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase16 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase161
                   InflectionData.$fReadCase17) -}
7ded077f712fbe0886ee14d77b5585ea
  $fReadCase160 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NOM2"#) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase161 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase163,
                  InflectionData.$fReadCase162
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase162 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.ERG2) -}
00f75401a0633a5c7d5f7b51ef734c68
  $fReadCase163 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ERG2"#) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase164 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase166,
                  InflectionData.$fReadCase165
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase165 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.PRIM) -}
92ad1c13966353cb89a24368b77ca129
  $fReadCase166 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PRIM"#) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase167 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase169,
                  InflectionData.$fReadCase168
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase168 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.DIR) -}
5b63540c64f2d4c5cbc6dac8507e6da6
  $fReadCase169 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DIR"#) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase17 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase158
                   InflectionData.$fReadCase18) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase170 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase172,
                  InflectionData.$fReadCase171
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase171 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.MTR) -}
f4bce43df4e978c7b6e4b3fe29f0e912
  $fReadCase172 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "MTR"#) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase173 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase175,
                  InflectionData.$fReadCase174
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase174 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.ABS) -}
444b4f78f186f289e8b0da8b378559e6
  $fReadCase175 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ABS"#) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase176 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase178,
                  InflectionData.$fReadCase177
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase177 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.NOM) -}
20f582fd5d707330bfca5010cbece884
  $fReadCase178 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NOM"#) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase179 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase181,
                  InflectionData.$fReadCase180
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase18 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase155
                   InflectionData.$fReadCase19) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase180 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.SEC) -}
6867053850a5766c5dd5d09b07936e96
  $fReadCase181 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SEC"#) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase182 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase184,
                  InflectionData.$fReadCase183
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase183 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.INDIR) -}
2fe410a1e52a8895cf8da79e336d1302
  $fReadCase184 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "INDIR"#) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase185 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase187,
                  InflectionData.$fReadCase186
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase186 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.PEG) -}
e3a340823b94bbef9b44eef11673e9fb
  $fReadCase187 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PEG"#) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase188 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase190,
                  InflectionData.$fReadCase189
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase189 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.ERG) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase19 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase152
                   InflectionData.$fReadCase20) -}
fbbf54bcefc21a1223ffa8f9348fbe67
  $fReadCase190 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ERG"#) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase191 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase193,
                  InflectionData.$fReadCase192
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase192 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.ACC) -}
44e360dfac98e70b1c383fc28b5fc1a0
  $fReadCase193 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ACC"#) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase194 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase196,
                  InflectionData.$fReadCase195
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase195 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.INTR) -}
933f1320d8b2426487ab996ec2d47ba3
  $fReadCase196 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "INTR"#) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase197 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase199,
                  InflectionData.$fReadCase198
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase198 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.UCAS) -}
4233b46e0e2553db8521f41120c36a30
  $fReadCase199 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "UCAS"#) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Case
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Case
                   InflectionData.$fReadCase3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <InflectionData.Case>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <InflectionData.Case>_R)))) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase20 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase149
                   InflectionData.$fReadCase21) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase200 ::
    Text.ParserCombinators.ReadP.P [InflectionData.Case]
  {- Unfolding: (GHC.Read.$wlist
                   @ InflectionData.Case
                   InflectionData.$fReadCase2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <InflectionData.Case>_R))
                   @ [InflectionData.Case]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [InflectionData.Case])) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase21 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase146
                   InflectionData.$fReadCase22) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase22 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase143
                   InflectionData.$fReadCase23) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase23 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase140
                   InflectionData.$fReadCase24) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase24 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase137
                   InflectionData.$fReadCase25) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase25 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase134
                   InflectionData.$fReadCase26) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase26 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase131
                   InflectionData.$fReadCase27) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase27 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase128
                   InflectionData.$fReadCase28) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase28 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase125
                   InflectionData.$fReadCase29) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase29 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase122
                   InflectionData.$fReadCase30) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: InflectionData.Case
                            -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.choose2
                   @ InflectionData.Case
                   InflectionData.$fReadCase4
                   eta
                   @ b
                   eta1) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase30 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase119
                   InflectionData.$fReadCase31) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase31 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase116
                   InflectionData.$fReadCase32) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase32 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase113
                   InflectionData.$fReadCase33) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase33 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase110
                   InflectionData.$fReadCase34) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase34 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase107
                   InflectionData.$fReadCase35) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase35 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase104
                   InflectionData.$fReadCase36) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase36 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase101
                   InflectionData.$fReadCase37) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase37 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase98
                   InflectionData.$fReadCase38) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase38 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase95
                   InflectionData.$fReadCase39) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase39 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase92
                   InflectionData.$fReadCase40) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase197
                   InflectionData.$fReadCase5) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase40 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase89
                   InflectionData.$fReadCase41) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase41 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase86
                   InflectionData.$fReadCase42) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase42 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase83
                   InflectionData.$fReadCase43) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase43 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase80
                   InflectionData.$fReadCase44) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase44 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase77
                   InflectionData.$fReadCase45) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase45 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase74
                   InflectionData.$fReadCase46) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase46 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase71
                   InflectionData.$fReadCase47) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase47 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase68
                   InflectionData.$fReadCase48) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase48 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase65
                   InflectionData.$fReadCase49) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase49 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase62
                   InflectionData.$fReadCase50) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase194
                   InflectionData.$fReadCase6) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase50 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase59
                   InflectionData.$fReadCase51) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase51 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase56
                   InflectionData.$fReadCase52) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase52 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase53
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case))) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase53 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase55,
                  InflectionData.$fReadCase54
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase54 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.VOC) -}
d5a9e668545cdf5042daa1c118bc9049
  $fReadCase55 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "VOC"#) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase56 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase58,
                  InflectionData.$fReadCase57
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase57 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.PART) -}
1f4f2a589c21b17dd7889c51e3fa2fba
  $fReadCase58 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PART"#) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase59 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase61,
                  InflectionData.$fReadCase60
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase191
                   InflectionData.$fReadCase7) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase60 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.POSS) -}
bce6a8dfa48ac8d31a4c482be5644202
  $fReadCase61 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "POSS"#) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase62 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase64,
                  InflectionData.$fReadCase63
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase63 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.GEN) -}
2d82e9096088a0fdeebfb9daaa0d0306
  $fReadCase64 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "GEN"#) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase65 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase67,
                  InflectionData.$fReadCase66
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase66 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.DISTR) -}
ab45948c27567021d53549975412d17e
  $fReadCase67 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DISTR"#) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase68 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase70,
                  InflectionData.$fReadCase69
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase69 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.CAUS) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase188
                   InflectionData.$fReadCase8) -}
acda81246f9d4731c0c9b96305fa0d01
  $fReadCase70 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "CAUS"#) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase71 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase73,
                  InflectionData.$fReadCase72
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase72 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.BEN) -}
82b7598ae945efe063a8f7be4e0fd59f
  $fReadCase73 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "BEN"#) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase74 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase76,
                  InflectionData.$fReadCase75
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase75 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.ORN) -}
7bed18e533dbe42f88d1b096dfac300d
  $fReadCase76 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ORN"#) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase77 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase79,
                  InflectionData.$fReadCase78
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase78 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.INSCOMIT) -}
9ddff17e897074b950397e41ab5912d0
  $fReadCase79 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "INSCOMIT"#) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase8 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase185
                   InflectionData.$fReadCase9) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase80 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase82,
                  InflectionData.$fReadCase81
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase81 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.COMIT) -}
e7c6c26fff374edb4fa4467eeddaf090
  $fReadCase82 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "COMIT"#) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase83 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase85,
                  InflectionData.$fReadCase84
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase84 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.INS) -}
4b46047ba39acaeca40d97a009eea527
  $fReadCase85 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "INS"#) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase86 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase88,
                  InflectionData.$fReadCase87
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase87 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.DAT) -}
da320ed6ac2dcd649d07499c767056fa
  $fReadCase88 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DAT"#) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase89 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase91,
                  InflectionData.$fReadCase90
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase9 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
                   InflectionData.$fReadCase182
                   InflectionData.$fReadCase10) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase90 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.ABE) -}
a81b5c6f11f42d9ea2d66e79741327b6
  $fReadCase91 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ABE"#) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase92 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase94,
                  InflectionData.$fReadCase93
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase93 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.IDEN) -}
5c43c0ef3f7ef888cb68cd2b21b9a471
  $fReadCase94 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "IDEN"#) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase95 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase97,
                  InflectionData.$fReadCase96
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase96 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.EQU) -}
6b8e271a1d60d17699b92b63f7ed2a5b
  $fReadCase97 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "EQU"#) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase98 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadCase100,
                  InflectionData.$fReadCase99
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Case>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Case>_R))))) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase99 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Case -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Case -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.COMP) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Case]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Case]
                   InflectionData.$fReadCase200) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [InflectionData.Case]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadCase1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[InflectionData.Case]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[InflectionData.Case]>_R))) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Case
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadCase2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <InflectionData.Case>_R)) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fReadCase_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Case
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ InflectionData.Case
                   ((GHC.Read.$fReadDouble10
                       @ InflectionData.Case
                       InflectionData.$fReadCase3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <InflectionData.Case>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <InflectionData.Case>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <InflectionData.Case>_R)
                      @ InflectionData.Case
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ InflectionData.Case))) -}
13bfeba0cb3001719a9764357d888c67
  $fReadDefiniteness :: GHC.Read.Read InflectionData.Definiteness
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Definiteness
                  InflectionData.$fReadDefiniteness_$creadsPrec
                  InflectionData.$fReadDefiniteness_$creadList
                  InflectionData.$fReadDefiniteness_$creadPrec
                  InflectionData.$fReadDefiniteness_$creadListPrec -}
13bfeba0cb3001719a9764357d888c67
  $fReadDefiniteness1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Definiteness] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [InflectionData.Definiteness]
                            -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.$wlist
                   @ InflectionData.Definiteness
                   InflectionData.$fReadDefiniteness2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <InflectionData.Definiteness>_R))
                   @ b
                   eta1) -}
13bfeba0cb3001719a9764357d888c67
  $fReadDefiniteness10 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Definiteness)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadDefiniteness12,
                  InflectionData.$fReadDefiniteness11
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Definiteness>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Definiteness>_R))))) -}
13bfeba0cb3001719a9764357d888c67
  $fReadDefiniteness11 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Definiteness -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Definiteness
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.DEF) -}
5d6e9ed8310875ce0d6cf3cbc3abc237
  $fReadDefiniteness12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DEF"#) -}
13bfeba0cb3001719a9764357d888c67
  $fReadDefiniteness13 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Definiteness)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadDefiniteness15,
                  InflectionData.$fReadDefiniteness14
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Definiteness>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Definiteness>_R))))) -}
13bfeba0cb3001719a9764357d888c67
  $fReadDefiniteness14 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Definiteness -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Definiteness
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.UDEF) -}
54dae8be4a0d2c06e3db23e7fa401309
  $fReadDefiniteness15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "UDEF"#) -}
13bfeba0cb3001719a9764357d888c67
  $fReadDefiniteness16 ::
    Text.ParserCombinators.ReadP.P [InflectionData.Definiteness]
  {- Unfolding: (GHC.Read.$wlist
                   @ InflectionData.Definiteness
                   InflectionData.$fReadDefiniteness2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <InflectionData.Definiteness>_R))
                   @ [InflectionData.Definiteness]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [InflectionData.Definiteness])) -}
13bfeba0cb3001719a9764357d888c67
  $fReadDefiniteness2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Definiteness
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Definiteness
                   InflectionData.$fReadDefiniteness3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <InflectionData.Definiteness>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <InflectionData.Definiteness>_R)))) -}
13bfeba0cb3001719a9764357d888c67
  $fReadDefiniteness3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Definiteness -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: InflectionData.Definiteness
                            -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.choose2
                   @ InflectionData.Definiteness
                   InflectionData.$fReadDefiniteness4
                   eta
                   @ b
                   eta1) -}
13bfeba0cb3001719a9764357d888c67
  $fReadDefiniteness4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Definiteness)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Definiteness)
                   InflectionData.$fReadDefiniteness13
                   InflectionData.$fReadDefiniteness5) -}
13bfeba0cb3001719a9764357d888c67
  $fReadDefiniteness5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Definiteness)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Definiteness)
                   InflectionData.$fReadDefiniteness10
                   InflectionData.$fReadDefiniteness6) -}
13bfeba0cb3001719a9764357d888c67
  $fReadDefiniteness6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Definiteness)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Definiteness)
                   InflectionData.$fReadDefiniteness7
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           InflectionData.Definiteness))) -}
13bfeba0cb3001719a9764357d888c67
  $fReadDefiniteness7 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Definiteness)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadDefiniteness9,
                  InflectionData.$fReadDefiniteness8
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Definiteness>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Definiteness>_R))))) -}
13bfeba0cb3001719a9764357d888c67
  $fReadDefiniteness8 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Definiteness -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Definiteness
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.INDF) -}
f688e61d4e19ce8548ec3b88fdbf3da9
  $fReadDefiniteness9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "INDF"#) -}
13bfeba0cb3001719a9764357d888c67
  $fReadDefiniteness_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Definiteness]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Definiteness]
                   InflectionData.$fReadDefiniteness16) -}
13bfeba0cb3001719a9764357d888c67
  $fReadDefiniteness_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [InflectionData.Definiteness]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadDefiniteness1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[InflectionData.Definiteness]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[InflectionData.Definiteness]>_R))) -}
13bfeba0cb3001719a9764357d888c67
  $fReadDefiniteness_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      InflectionData.Definiteness
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadDefiniteness2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <InflectionData.Definiteness>_R)) -}
13bfeba0cb3001719a9764357d888c67
  $fReadDefiniteness_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Definiteness
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ InflectionData.Definiteness
                   ((GHC.Read.$fReadDouble10
                       @ InflectionData.Definiteness
                       InflectionData.$fReadDefiniteness3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <InflectionData.Definiteness>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <InflectionData.Definiteness>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0]
                         <InflectionData.Definiteness>_R)
                      @ InflectionData.Definiteness
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ InflectionData.Definiteness))) -}
d496e50507466d81d95f22dd4857ca16
  $fReadEvidentiality :: GHC.Read.Read InflectionData.Evidentiality
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Evidentiality
                  InflectionData.$fReadEvidentiality_$creadsPrec
                  InflectionData.$fReadEvidentiality_$creadList
                  InflectionData.$fReadEvidentiality_$creadPrec
                  InflectionData.$fReadEvidentiality_$creadListPrec -}
d496e50507466d81d95f22dd4857ca16
  $fReadEvidentiality1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Evidentiality]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [InflectionData.Evidentiality]
                            -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.$wlist
                   @ InflectionData.Evidentiality
                   InflectionData.$fReadEvidentiality2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <InflectionData.Evidentiality>_R))
                   @ b
                   eta1) -}
d496e50507466d81d95f22dd4857ca16
  $fReadEvidentiality10 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Evidentiality)
                   InflectionData.$fReadEvidentiality23
                   InflectionData.$fReadEvidentiality11) -}
d496e50507466d81d95f22dd4857ca16
  $fReadEvidentiality11 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Evidentiality)
                   InflectionData.$fReadEvidentiality20
                   InflectionData.$fReadEvidentiality12) -}
d496e50507466d81d95f22dd4857ca16
  $fReadEvidentiality12 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Evidentiality)
                   InflectionData.$fReadEvidentiality17
                   InflectionData.$fReadEvidentiality13) -}
d496e50507466d81d95f22dd4857ca16
  $fReadEvidentiality13 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Evidentiality)
                   InflectionData.$fReadEvidentiality14
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           InflectionData.Evidentiality))) -}
d496e50507466d81d95f22dd4857ca16
  $fReadEvidentiality14 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Evidentiality)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadEvidentiality16,
                  InflectionData.$fReadEvidentiality15
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Evidentiality>_R))))) -}
d496e50507466d81d95f22dd4857ca16
  $fReadEvidentiality15 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Evidentiality
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.ASS) -}
00eefc950cebfe0745f5781a71328c9e
  $fReadEvidentiality16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ASS"#) -}
d496e50507466d81d95f22dd4857ca16
  $fReadEvidentiality17 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Evidentiality)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadEvidentiality19,
                  InflectionData.$fReadEvidentiality18
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Evidentiality>_R))))) -}
d496e50507466d81d95f22dd4857ca16
  $fReadEvidentiality18 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Evidentiality
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.QUO) -}
7611c2db13746b57ef799f55b79acded
  $fReadEvidentiality19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "QUO"#) -}
d496e50507466d81d95f22dd4857ca16
  $fReadEvidentiality2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Evidentiality
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Evidentiality
                   InflectionData.$fReadEvidentiality3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <InflectionData.Evidentiality>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <InflectionData.Evidentiality>_R)))) -}
d496e50507466d81d95f22dd4857ca16
  $fReadEvidentiality20 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Evidentiality)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadEvidentiality22,
                  InflectionData.$fReadEvidentiality21
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Evidentiality>_R))))) -}
d496e50507466d81d95f22dd4857ca16
  $fReadEvidentiality21 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Evidentiality
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.HSY) -}
d286e64c400188abcf57f3f2e31cdb57
  $fReadEvidentiality22 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "HSY"#) -}
d496e50507466d81d95f22dd4857ca16
  $fReadEvidentiality23 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Evidentiality)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadEvidentiality25,
                  InflectionData.$fReadEvidentiality24
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Evidentiality>_R))))) -}
d496e50507466d81d95f22dd4857ca16
  $fReadEvidentiality24 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Evidentiality
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.REP) -}
d3da61089afc91a209d21fab403311e5
  $fReadEvidentiality25 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "REP"#) -}
d496e50507466d81d95f22dd4857ca16
  $fReadEvidentiality26 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Evidentiality)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadEvidentiality28,
                  InflectionData.$fReadEvidentiality27
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Evidentiality>_R))))) -}
d496e50507466d81d95f22dd4857ca16
  $fReadEvidentiality27 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Evidentiality
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.INFER) -}
b8cabc0f38a45d7b4f89a0c8daddde5d
  $fReadEvidentiality28 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "INFER"#) -}
d496e50507466d81d95f22dd4857ca16
  $fReadEvidentiality29 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Evidentiality)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadEvidentiality31,
                  InflectionData.$fReadEvidentiality30
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Evidentiality>_R))))) -}
d496e50507466d81d95f22dd4857ca16
  $fReadEvidentiality3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: InflectionData.Evidentiality
                            -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.choose2
                   @ InflectionData.Evidentiality
                   InflectionData.$fReadEvidentiality4
                   eta
                   @ b
                   eta1) -}
d496e50507466d81d95f22dd4857ca16
  $fReadEvidentiality30 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Evidentiality
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.AUD) -}
ff07909b24687cfbacb12b076be37ea3
  $fReadEvidentiality31 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AUD"#) -}
d496e50507466d81d95f22dd4857ca16
  $fReadEvidentiality32 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Evidentiality)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadEvidentiality34,
                  InflectionData.$fReadEvidentiality33
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Evidentiality>_R))))) -}
d496e50507466d81d95f22dd4857ca16
  $fReadEvidentiality33 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Evidentiality
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.NVIS) -}
5e1be98e121583aaef5acb9f4282668a
  $fReadEvidentiality34 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NVIS"#) -}
d496e50507466d81d95f22dd4857ca16
  $fReadEvidentiality35 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Evidentiality)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadEvidentiality37,
                  InflectionData.$fReadEvidentiality36
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Evidentiality>_R))))) -}
d496e50507466d81d95f22dd4857ca16
  $fReadEvidentiality36 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Evidentiality
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.VIS) -}
e2dd8bba271b560a9d84bec0dd258f98
  $fReadEvidentiality37 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "VIS"#) -}
d496e50507466d81d95f22dd4857ca16
  $fReadEvidentiality38 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Evidentiality)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadEvidentiality40,
                  InflectionData.$fReadEvidentiality39
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Evidentiality>_R))))) -}
d496e50507466d81d95f22dd4857ca16
  $fReadEvidentiality39 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Evidentiality
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.EXP) -}
d496e50507466d81d95f22dd4857ca16
  $fReadEvidentiality4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Evidentiality)
                   InflectionData.$fReadEvidentiality41
                   InflectionData.$fReadEvidentiality5) -}
d2987052c728842152f7620e74e5dec2
  $fReadEvidentiality40 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "EXP"#) -}
d496e50507466d81d95f22dd4857ca16
  $fReadEvidentiality41 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Evidentiality)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadEvidentiality43,
                  InflectionData.$fReadEvidentiality42
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Evidentiality>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Evidentiality>_R))))) -}
d496e50507466d81d95f22dd4857ca16
  $fReadEvidentiality42 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Evidentiality -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Evidentiality
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.UEVI) -}
6a5baf875495f9e24da6f6e7a8731fc7
  $fReadEvidentiality43 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "UEVI"#) -}
d496e50507466d81d95f22dd4857ca16
  $fReadEvidentiality44 ::
    Text.ParserCombinators.ReadP.P [InflectionData.Evidentiality]
  {- Unfolding: (GHC.Read.$wlist
                   @ InflectionData.Evidentiality
                   InflectionData.$fReadEvidentiality2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <InflectionData.Evidentiality>_R))
                   @ [InflectionData.Evidentiality]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [InflectionData.Evidentiality])) -}
d496e50507466d81d95f22dd4857ca16
  $fReadEvidentiality5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Evidentiality)
                   InflectionData.$fReadEvidentiality38
                   InflectionData.$fReadEvidentiality6) -}
d496e50507466d81d95f22dd4857ca16
  $fReadEvidentiality6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Evidentiality)
                   InflectionData.$fReadEvidentiality35
                   InflectionData.$fReadEvidentiality7) -}
d496e50507466d81d95f22dd4857ca16
  $fReadEvidentiality7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Evidentiality)
                   InflectionData.$fReadEvidentiality32
                   InflectionData.$fReadEvidentiality8) -}
d496e50507466d81d95f22dd4857ca16
  $fReadEvidentiality8 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Evidentiality)
                   InflectionData.$fReadEvidentiality29
                   InflectionData.$fReadEvidentiality9) -}
d496e50507466d81d95f22dd4857ca16
  $fReadEvidentiality9 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Evidentiality)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Evidentiality)
                   InflectionData.$fReadEvidentiality26
                   InflectionData.$fReadEvidentiality10) -}
d496e50507466d81d95f22dd4857ca16
  $fReadEvidentiality_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Evidentiality]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Evidentiality]
                   InflectionData.$fReadEvidentiality44) -}
d496e50507466d81d95f22dd4857ca16
  $fReadEvidentiality_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [InflectionData.Evidentiality]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadEvidentiality1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[InflectionData.Evidentiality]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[InflectionData.Evidentiality]>_R))) -}
d496e50507466d81d95f22dd4857ca16
  $fReadEvidentiality_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      InflectionData.Evidentiality
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadEvidentiality2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <InflectionData.Evidentiality>_R)) -}
d496e50507466d81d95f22dd4857ca16
  $fReadEvidentiality_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Evidentiality
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ InflectionData.Evidentiality
                   ((GHC.Read.$fReadDouble10
                       @ InflectionData.Evidentiality
                       InflectionData.$fReadEvidentiality3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <InflectionData.Evidentiality>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <InflectionData.Evidentiality>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0]
                         <InflectionData.Evidentiality>_R)
                      @ InflectionData.Evidentiality
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ InflectionData.Evidentiality))) -}
63d70c4f2d77c644511c6d588663f39e
  $fReadExpress ::
    GHC.Read.Read a => GHC.Read.Read (InflectionData.Express a)
  DFunId
  {- Arity: 1, Strictness: <L,U(A,A,U,A)>m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a ($dRead :: GHC.Read.Read a).
                  @ (InflectionData.Express a)
                  (InflectionData.$fReadExpress_$creadsPrec @ a $dRead)
                  (InflectionData.$fReadExpress_$creadList @ a $dRead)
                  (InflectionData.$fReadExpress_$creadPrec @ a $dRead)
                  (InflectionData.$fReadExpress_$creadListPrec @ a $dRead) -}
63d70c4f2d77c644511c6d588663f39e
  $fReadExpress1 ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Express a] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 3, Strictness: <L,U(A,A,U,A)><L,A><L,C(U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dRead :: GHC.Read.Read a)
                   (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [InflectionData.Express a]
                            -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.$wlist
                   @ (InflectionData.Express a)
                   (InflectionData.$fReadExpress2 @ a $dRead)
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <InflectionData.Express a>_R))
                   @ b
                   eta1) -}
63d70c4f2d77c644511c6d588663f39e
  $fReadExpress2 ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP (InflectionData.Express a)
  {- Arity: 2, Strictness: <L,1*U(A,A,1*U,A)><L,U> -}
63d70c4f2d77c644511c6d588663f39e
  $fReadExpress_$creadList ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Express a]
  {- Arity: 1, Strictness: <L,U(A,A,U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a ($dRead :: GHC.Read.Read a) ->
                 Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Express a]
                   (GHC.Read.$wlist
                      @ (InflectionData.Express a)
                      (InflectionData.$fReadExpress2 @ a $dRead)
                        `cast`
                      (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                <InflectionData.Express a>_R))
                      @ [InflectionData.Express a]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ [InflectionData.Express a]))) -}
63d70c4f2d77c644511c6d588663f39e
  $fReadExpress_$creadListPrec ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadPrec.ReadPrec [InflectionData.Express a]
  {- Arity: 3, Strictness: <L,U(A,A,U,A)><L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadExpress1
                  `cast`
                (forall (a :: <*>_N).
                 <GHC.Read.Read a>_R
                 ->_R Trans
                          (<Text.ParserCombinators.ReadPrec.Prec>_R
                           ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                         <[InflectionData.Express a]>_R))
                          (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                    <[InflectionData.Express a]>_R))) -}
63d70c4f2d77c644511c6d588663f39e
  $fReadExpress_$creadPrec ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadPrec.ReadPrec (InflectionData.Express a)
  {- Arity: 2, Strictness: <L,1*U(A,A,1*U,A)><L,U>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadExpress2
                  `cast`
                (forall (a :: <*>_N).
                 <GHC.Read.Read a>_R
                 ->_R Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <InflectionData.Express a>_R)) -}
63d70c4f2d77c644511c6d588663f39e
  $fReadExpress_$creadsPrec ::
    GHC.Read.Read a =>
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS (InflectionData.Express a)
  {- Arity: 2, Strictness: <L,1*U(A,A,1*U,A)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a ($dRead :: GHC.Read.Read a) (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ (InflectionData.Express a)
                   ((InflectionData.$fReadExpress2 @ a $dRead eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0]
                         <InflectionData.Express a>_R)
                      @ (InflectionData.Express a)
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ (InflectionData.Express a)))) -}
64c563e614d6b39e628a87a4b86c4bcb
  $fReadGender :: GHC.Read.Read InflectionData.Gender
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Gender
                  InflectionData.$fReadGender_$creadsPrec
                  InflectionData.$fReadGender_$creadList
                  InflectionData.$fReadGender_$creadPrec
                  InflectionData.$fReadGender_$creadListPrec -}
64c563e614d6b39e628a87a4b86c4bcb
  $fReadGender1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Gender] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [InflectionData.Gender]
                            -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.$wlist
                   @ InflectionData.Gender
                   InflectionData.$fReadGender2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <InflectionData.Gender>_R))
                   @ b
                   eta1) -}
64c563e614d6b39e628a87a4b86c4bcb
  $fReadGender10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Gender -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Gender
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.N) -}
a863eb8dc57898c6f14fc18f42bd052a
  $fReadGender11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "N"#) -}
64c563e614d6b39e628a87a4b86c4bcb
  $fReadGender12 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Gender)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadGender14,
                  InflectionData.$fReadGender13
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Gender>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Gender>_R))))) -}
64c563e614d6b39e628a87a4b86c4bcb
  $fReadGender13 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Gender -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Gender
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.COM) -}
d9946ae7b01ce6dcd3568b72a92ac876
  $fReadGender14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "COM"#) -}
64c563e614d6b39e628a87a4b86c4bcb
  $fReadGender15 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Gender)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadGender17,
                  InflectionData.$fReadGender16
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Gender>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Gender>_R))))) -}
64c563e614d6b39e628a87a4b86c4bcb
  $fReadGender16 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Gender -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Gender
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.F) -}
43a0500cac908eecbb3e1690aad0dd98
  $fReadGender17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "F"#) -}
64c563e614d6b39e628a87a4b86c4bcb
  $fReadGender18 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Gender)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadGender20,
                  InflectionData.$fReadGender19
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Gender>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Gender>_R))))) -}
64c563e614d6b39e628a87a4b86c4bcb
  $fReadGender19 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Gender -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Gender
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.M) -}
64c563e614d6b39e628a87a4b86c4bcb
  $fReadGender2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Gender
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Gender
                   InflectionData.$fReadGender3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <InflectionData.Gender>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <InflectionData.Gender>_R)))) -}
66e31c5c2f0d74ccd6ab4945b4df7801
  $fReadGender20 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "M"#) -}
64c563e614d6b39e628a87a4b86c4bcb
  $fReadGender21 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Gender)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadGender23,
                  InflectionData.$fReadGender22
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Gender>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Gender>_R))))) -}
64c563e614d6b39e628a87a4b86c4bcb
  $fReadGender22 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Gender -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Gender
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.UGEN) -}
437b1901dbc0f526946c18eefd80f169
  $fReadGender23 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "UGEN"#) -}
64c563e614d6b39e628a87a4b86c4bcb
  $fReadGender24 ::
    Text.ParserCombinators.ReadP.P [InflectionData.Gender]
  {- Unfolding: (GHC.Read.$wlist
                   @ InflectionData.Gender
                   InflectionData.$fReadGender2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <InflectionData.Gender>_R))
                   @ [InflectionData.Gender]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [InflectionData.Gender])) -}
64c563e614d6b39e628a87a4b86c4bcb
  $fReadGender3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Gender -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: InflectionData.Gender
                            -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.choose2
                   @ InflectionData.Gender
                   InflectionData.$fReadGender4
                   eta
                   @ b
                   eta1) -}
64c563e614d6b39e628a87a4b86c4bcb
  $fReadGender4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Gender)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Gender)
                   InflectionData.$fReadGender21
                   InflectionData.$fReadGender5) -}
64c563e614d6b39e628a87a4b86c4bcb
  $fReadGender5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Gender)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Gender)
                   InflectionData.$fReadGender18
                   InflectionData.$fReadGender6) -}
64c563e614d6b39e628a87a4b86c4bcb
  $fReadGender6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Gender)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Gender)
                   InflectionData.$fReadGender15
                   InflectionData.$fReadGender7) -}
64c563e614d6b39e628a87a4b86c4bcb
  $fReadGender7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Gender)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Gender)
                   InflectionData.$fReadGender12
                   InflectionData.$fReadGender8) -}
64c563e614d6b39e628a87a4b86c4bcb
  $fReadGender8 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Gender)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Gender)
                   InflectionData.$fReadGender9
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           InflectionData.Gender))) -}
64c563e614d6b39e628a87a4b86c4bcb
  $fReadGender9 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Gender)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadGender11,
                  InflectionData.$fReadGender10
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Gender>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Gender>_R))))) -}
64c563e614d6b39e628a87a4b86c4bcb
  $fReadGender_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Gender]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Gender]
                   InflectionData.$fReadGender24) -}
64c563e614d6b39e628a87a4b86c4bcb
  $fReadGender_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [InflectionData.Gender]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadGender1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[InflectionData.Gender]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[InflectionData.Gender]>_R))) -}
64c563e614d6b39e628a87a4b86c4bcb
  $fReadGender_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Gender
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadGender2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <InflectionData.Gender>_R)) -}
64c563e614d6b39e628a87a4b86c4bcb
  $fReadGender_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Gender
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ InflectionData.Gender
                   ((GHC.Read.$fReadDouble10
                       @ InflectionData.Gender
                       InflectionData.$fReadGender3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <InflectionData.Gender>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <InflectionData.Gender>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <InflectionData.Gender>_R)
                      @ InflectionData.Gender
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ InflectionData.Gender))) -}
87a0680d1783cb156a72782bde86c25f
  $fReadHonorific :: GHC.Read.Read InflectionData.Honorific
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Honorific
                  InflectionData.$fReadHonorific_$creadsPrec
                  InflectionData.$fReadHonorific_$creadList
                  InflectionData.$fReadHonorific_$creadPrec
                  InflectionData.$fReadHonorific_$creadListPrec -}
87a0680d1783cb156a72782bde86c25f
  $fReadHonorific1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Honorific] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [InflectionData.Honorific]
                            -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.$wlist
                   @ InflectionData.Honorific
                   InflectionData.$fReadHonorific2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <InflectionData.Honorific>_R))
                   @ b
                   eta1) -}
50191103c789eb626344885fe07138d4
  $fReadHonorific10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FORM"#) -}
87a0680d1783cb156a72782bde86c25f
  $fReadHonorific11 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Honorific)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadHonorific13,
                  InflectionData.$fReadHonorific12
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Honorific>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Honorific>_R))))) -}
87a0680d1783cb156a72782bde86c25f
  $fReadHonorific12 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Honorific -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Honorific
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.NEU) -}
53002cbf8f042891b7905443b210f6c7
  $fReadHonorific13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NEU"#) -}
87a0680d1783cb156a72782bde86c25f
  $fReadHonorific14 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Honorific)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadHonorific16,
                  InflectionData.$fReadHonorific15
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Honorific>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Honorific>_R))))) -}
87a0680d1783cb156a72782bde86c25f
  $fReadHonorific15 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Honorific -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Honorific
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.FAM) -}
9fad684853672da7922424efadfcd303
  $fReadHonorific16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FAM"#) -}
87a0680d1783cb156a72782bde86c25f
  $fReadHonorific17 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Honorific)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadHonorific19,
                  InflectionData.$fReadHonorific18
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Honorific>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Honorific>_R))))) -}
87a0680d1783cb156a72782bde86c25f
  $fReadHonorific18 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Honorific -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Honorific
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.UHON) -}
799168ca567cbf31501b539c7db0402f
  $fReadHonorific19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "UHON"#) -}
87a0680d1783cb156a72782bde86c25f
  $fReadHonorific2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Honorific
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Honorific
                   InflectionData.$fReadHonorific3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <InflectionData.Honorific>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <InflectionData.Honorific>_R)))) -}
87a0680d1783cb156a72782bde86c25f
  $fReadHonorific20 ::
    Text.ParserCombinators.ReadP.P [InflectionData.Honorific]
  {- Unfolding: (GHC.Read.$wlist
                   @ InflectionData.Honorific
                   InflectionData.$fReadHonorific2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <InflectionData.Honorific>_R))
                   @ [InflectionData.Honorific]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [InflectionData.Honorific])) -}
87a0680d1783cb156a72782bde86c25f
  $fReadHonorific3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Honorific -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: InflectionData.Honorific
                            -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.choose2
                   @ InflectionData.Honorific
                   InflectionData.$fReadHonorific4
                   eta
                   @ b
                   eta1) -}
87a0680d1783cb156a72782bde86c25f
  $fReadHonorific4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Honorific)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Honorific)
                   InflectionData.$fReadHonorific17
                   InflectionData.$fReadHonorific5) -}
87a0680d1783cb156a72782bde86c25f
  $fReadHonorific5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Honorific)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Honorific)
                   InflectionData.$fReadHonorific14
                   InflectionData.$fReadHonorific6) -}
87a0680d1783cb156a72782bde86c25f
  $fReadHonorific6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Honorific)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Honorific)
                   InflectionData.$fReadHonorific11
                   InflectionData.$fReadHonorific7) -}
87a0680d1783cb156a72782bde86c25f
  $fReadHonorific7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Honorific)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Honorific)
                   InflectionData.$fReadHonorific8
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           InflectionData.Honorific))) -}
87a0680d1783cb156a72782bde86c25f
  $fReadHonorific8 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Honorific)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadHonorific10,
                  InflectionData.$fReadHonorific9
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Honorific>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Honorific>_R))))) -}
87a0680d1783cb156a72782bde86c25f
  $fReadHonorific9 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Honorific -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Honorific
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.FORM) -}
87a0680d1783cb156a72782bde86c25f
  $fReadHonorific_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Honorific]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Honorific]
                   InflectionData.$fReadHonorific20) -}
87a0680d1783cb156a72782bde86c25f
  $fReadHonorific_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [InflectionData.Honorific]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadHonorific1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[InflectionData.Honorific]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[InflectionData.Honorific]>_R))) -}
87a0680d1783cb156a72782bde86c25f
  $fReadHonorific_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Honorific
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadHonorific2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <InflectionData.Honorific>_R)) -}
87a0680d1783cb156a72782bde86c25f
  $fReadHonorific_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Honorific
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ InflectionData.Honorific
                   ((GHC.Read.$fReadDouble10
                       @ InflectionData.Honorific
                       InflectionData.$fReadHonorific3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <InflectionData.Honorific>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <InflectionData.Honorific>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0]
                         <InflectionData.Honorific>_R)
                      @ InflectionData.Honorific
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ InflectionData.Honorific))) -}
6316452e39bc49500385d38be925e2a3
  $fReadInflectionSystem ::
    GHC.Read.Read InflectionData.InflectionSystem
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.InflectionSystem
                  InflectionData.$fReadInflectionSystem_$creadsPrec
                  InflectionData.$fReadInflectionSystem_$creadList
                  InflectionData.$fReadInflectionSystem_$creadPrec
                  InflectionData.$fReadInflectionSystem_$creadListPrec -}
6316452e39bc49500385d38be925e2a3
  $fReadInflectionSystem1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.InflectionSystem]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [InflectionData.InflectionSystem]
                            -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.$wlist
                   @ InflectionData.InflectionSystem
                   InflectionData.$fReadInflectionSystem2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <InflectionData.InflectionSystem>_R))
                   @ b
                   eta1) -}
6316452e39bc49500385d38be925e2a3
  $fReadInflectionSystem2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP
         InflectionData.InflectionSystem
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.InflectionSystem
                   InflectionData.$fReadInflectionSystem3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <InflectionData.InflectionSystem>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <InflectionData.InflectionSystem>_R)))) -}
6316452e39bc49500385d38be925e2a3
  $fReadInflectionSystem3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.InflectionSystem
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (w1 :: InflectionData.InflectionSystem
                          -> Text.ParserCombinators.ReadP.P b) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 InflectionData.$w$creadPrec ww1 @ b w1 }) -}
6316452e39bc49500385d38be925e2a3
  $fReadInflectionSystem4 ::
    Text.ParserCombinators.ReadP.P [InflectionData.InflectionSystem]
  {- Unfolding: (GHC.Read.$wlist
                   @ InflectionData.InflectionSystem
                   InflectionData.$fReadInflectionSystem2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <InflectionData.InflectionSystem>_R))
                   @ [InflectionData.InflectionSystem]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [InflectionData.InflectionSystem])) -}
6316452e39bc49500385d38be925e2a3
  $fReadInflectionSystem_$creadList ::
    Text.ParserCombinators.ReadP.ReadS
      [InflectionData.InflectionSystem]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.InflectionSystem]
                   InflectionData.$fReadInflectionSystem4) -}
6316452e39bc49500385d38be925e2a3
  $fReadInflectionSystem_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [InflectionData.InflectionSystem]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadInflectionSystem1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[InflectionData.InflectionSystem]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[InflectionData.InflectionSystem]>_R))) -}
6316452e39bc49500385d38be925e2a3
  $fReadInflectionSystem_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      InflectionData.InflectionSystem
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadInflectionSystem2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <InflectionData.InflectionSystem>_R)) -}
6316452e39bc49500385d38be925e2a3
  $fReadInflectionSystem_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS
         InflectionData.InflectionSystem
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ InflectionData.InflectionSystem
                   ((GHC.Read.$fReadDouble10
                       @ InflectionData.InflectionSystem
                       InflectionData.$fReadInflectionSystem3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <InflectionData.InflectionSystem>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <InflectionData.InflectionSystem>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0]
                         <InflectionData.InflectionSystem>_R)
                      @ InflectionData.InflectionSystem
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ InflectionData.InflectionSystem))) -}
3578a365ab634279655cb91c03a19c28
  $fReadLexCat :: GHC.Read.Read InflectionData.LexCat
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.LexCat
                  InflectionData.$fReadLexCat_$creadsPrec
                  InflectionData.$fReadLexCat_$creadList
                  InflectionData.$fReadLexCat_$creadPrec
                  InflectionData.$fReadLexCat_$creadListPrec -}
3578a365ab634279655cb91c03a19c28
  $fReadLexCat1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.LexCat] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [InflectionData.LexCat]
                            -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.$wlist
                   @ InflectionData.LexCat
                   InflectionData.$fReadLexCat2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <InflectionData.LexCat>_R))
                   @ b
                   eta1) -}
3578a365ab634279655cb91c03a19c28
  $fReadLexCat10 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
                   InflectionData.$fReadLexCat27
                   InflectionData.$fReadLexCat11) -}
3578a365ab634279655cb91c03a19c28
  $fReadLexCat11 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
                   InflectionData.$fReadLexCat24
                   InflectionData.$fReadLexCat12) -}
3578a365ab634279655cb91c03a19c28
  $fReadLexCat12 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
                   InflectionData.$fReadLexCat21
                   InflectionData.$fReadLexCat13) -}
3578a365ab634279655cb91c03a19c28
  $fReadLexCat13 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
                   InflectionData.$fReadLexCat18
                   InflectionData.$fReadLexCat14) -}
3578a365ab634279655cb91c03a19c28
  $fReadLexCat14 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
                   InflectionData.$fReadLexCat15
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           InflectionData.LexCat))) -}
3578a365ab634279655cb91c03a19c28
  $fReadLexCat15 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadLexCat17,
                  InflectionData.$fReadLexCat16
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.LexCat>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.LexCat>_R))))) -}
3578a365ab634279655cb91c03a19c28
  $fReadLexCat16 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.LexCat
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.Pron) -}
8606fff767d5fb273808546cf012fd22
  $fReadLexCat17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Pron"#) -}
3578a365ab634279655cb91c03a19c28
  $fReadLexCat18 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadLexCat20,
                  InflectionData.$fReadLexCat19
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.LexCat>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.LexCat>_R))))) -}
3578a365ab634279655cb91c03a19c28
  $fReadLexCat19 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.LexCat
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.Subj) -}
3578a365ab634279655cb91c03a19c28
  $fReadLexCat2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.LexCat
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.LexCat
                   InflectionData.$fReadLexCat3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <InflectionData.LexCat>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <InflectionData.LexCat>_R)))) -}
51b99f5bbee64b3ccc2d5178c0cd5523
  $fReadLexCat20 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Subj"#) -}
3578a365ab634279655cb91c03a19c28
  $fReadLexCat21 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadLexCat23,
                  InflectionData.$fReadLexCat22
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.LexCat>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.LexCat>_R))))) -}
3578a365ab634279655cb91c03a19c28
  $fReadLexCat22 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.LexCat
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.Obj) -}
8919949c4de6c2cac15ed93d33dabe9a
  $fReadLexCat23 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Obj"#) -}
3578a365ab634279655cb91c03a19c28
  $fReadLexCat24 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadLexCat26,
                  InflectionData.$fReadLexCat25
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.LexCat>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.LexCat>_R))))) -}
3578a365ab634279655cb91c03a19c28
  $fReadLexCat25 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.LexCat
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.Adv) -}
6d8b47060297d69bcaf9766b0df8b8e0
  $fReadLexCat26 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Adv"#) -}
3578a365ab634279655cb91c03a19c28
  $fReadLexCat27 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadLexCat29,
                  InflectionData.$fReadLexCat28
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.LexCat>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.LexCat>_R))))) -}
3578a365ab634279655cb91c03a19c28
  $fReadLexCat28 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.LexCat
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.Adj) -}
b4ab0793c909223f3c49050b8d7f0683
  $fReadLexCat29 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Adj"#) -}
3578a365ab634279655cb91c03a19c28
  $fReadLexCat3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: InflectionData.LexCat
                            -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.choose2
                   @ InflectionData.LexCat
                   InflectionData.$fReadLexCat4
                   eta
                   @ b
                   eta1) -}
3578a365ab634279655cb91c03a19c28
  $fReadLexCat30 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadLexCat32,
                  InflectionData.$fReadLexCat31
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.LexCat>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.LexCat>_R))))) -}
3578a365ab634279655cb91c03a19c28
  $fReadLexCat31 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.LexCat
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.Adpo) -}
71f3dfcf3adba8fcfd7f21b5762a6feb
  $fReadLexCat32 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Adpo"#) -}
3578a365ab634279655cb91c03a19c28
  $fReadLexCat33 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadLexCat35,
                  InflectionData.$fReadLexCat34
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.LexCat>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.LexCat>_R))))) -}
3578a365ab634279655cb91c03a19c28
  $fReadLexCat34 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.LexCat
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.Noun) -}
bebfa7c9df60b024f7347b3a52007b29
  $fReadLexCat35 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Noun"#) -}
3578a365ab634279655cb91c03a19c28
  $fReadLexCat36 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadLexCat38,
                  InflectionData.$fReadLexCat37
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.LexCat>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.LexCat>_R))))) -}
3578a365ab634279655cb91c03a19c28
  $fReadLexCat37 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.LexCat
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.Det) -}
ade8e7cca31216d0ad87c2484fe0029e
  $fReadLexCat38 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Det"#) -}
3578a365ab634279655cb91c03a19c28
  $fReadLexCat39 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadLexCat41,
                  InflectionData.$fReadLexCat40
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.LexCat>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.LexCat>_R))))) -}
3578a365ab634279655cb91c03a19c28
  $fReadLexCat4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
                   InflectionData.$fReadLexCat45
                   InflectionData.$fReadLexCat5) -}
3578a365ab634279655cb91c03a19c28
  $fReadLexCat40 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.LexCat
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.Verb) -}
9b19db11880daf357fc7c3d82a1d2c6a
  $fReadLexCat41 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Verb"#) -}
3578a365ab634279655cb91c03a19c28
  $fReadLexCat42 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadLexCat44,
                  InflectionData.$fReadLexCat43
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.LexCat>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.LexCat>_R))))) -}
3578a365ab634279655cb91c03a19c28
  $fReadLexCat43 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.LexCat
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.Infl) -}
7695ebe2844ede3a9ea2758e111ca268
  $fReadLexCat44 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Infl"#) -}
3578a365ab634279655cb91c03a19c28
  $fReadLexCat45 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadLexCat47,
                  InflectionData.$fReadLexCat46
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.LexCat>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.LexCat>_R))))) -}
3578a365ab634279655cb91c03a19c28
  $fReadLexCat46 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.LexCat -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.LexCat
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.Comp) -}
74248ed7bcbd14aad7cc6597f1e5aff2
  $fReadLexCat47 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Comp"#) -}
3578a365ab634279655cb91c03a19c28
  $fReadLexCat48 ::
    Text.ParserCombinators.ReadP.P [InflectionData.LexCat]
  {- Unfolding: (GHC.Read.$wlist
                   @ InflectionData.LexCat
                   InflectionData.$fReadLexCat2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <InflectionData.LexCat>_R))
                   @ [InflectionData.LexCat]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [InflectionData.LexCat])) -}
3578a365ab634279655cb91c03a19c28
  $fReadLexCat5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
                   InflectionData.$fReadLexCat42
                   InflectionData.$fReadLexCat6) -}
3578a365ab634279655cb91c03a19c28
  $fReadLexCat6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
                   InflectionData.$fReadLexCat39
                   InflectionData.$fReadLexCat7) -}
3578a365ab634279655cb91c03a19c28
  $fReadLexCat7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
                   InflectionData.$fReadLexCat36
                   InflectionData.$fReadLexCat8) -}
3578a365ab634279655cb91c03a19c28
  $fReadLexCat8 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
                   InflectionData.$fReadLexCat33
                   InflectionData.$fReadLexCat9) -}
3578a365ab634279655cb91c03a19c28
  $fReadLexCat9 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat)
                   InflectionData.$fReadLexCat30
                   InflectionData.$fReadLexCat10) -}
3578a365ab634279655cb91c03a19c28
  $fReadLexCat_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.LexCat]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.LexCat]
                   InflectionData.$fReadLexCat48) -}
3578a365ab634279655cb91c03a19c28
  $fReadLexCat_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [InflectionData.LexCat]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadLexCat1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[InflectionData.LexCat]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[InflectionData.LexCat]>_R))) -}
3578a365ab634279655cb91c03a19c28
  $fReadLexCat_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.LexCat
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadLexCat2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <InflectionData.LexCat>_R)) -}
3578a365ab634279655cb91c03a19c28
  $fReadLexCat_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.LexCat
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ InflectionData.LexCat
                   ((GHC.Read.$fReadDouble10
                       @ InflectionData.LexCat
                       InflectionData.$fReadLexCat3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <InflectionData.LexCat>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <InflectionData.LexCat>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <InflectionData.LexCat>_R)
                      @ InflectionData.LexCat
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ InflectionData.LexCat))) -}
a1f6ea453f44aabd626528c4893e70e2
  $fReadManifest ::
    GHC.Read.Read a => GHC.Read.Read (InflectionData.Manifest a)
  DFunId
  {- Arity: 1, Strictness: <L,U(A,A,U,A)>m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a ($dRead :: GHC.Read.Read a).
                  @ (InflectionData.Manifest a)
                  (InflectionData.$fReadManifest_$creadsPrec @ a $dRead)
                  (InflectionData.$fReadManifest_$creadList @ a $dRead)
                  (InflectionData.$fReadManifest_$creadPrec @ a $dRead)
                  (InflectionData.$fReadManifest_$creadListPrec @ a $dRead) -}
a1f6ea453f44aabd626528c4893e70e2
  $fReadManifest1 ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Manifest a] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 3, Strictness: <L,U(A,A,U,A)><L,A><L,C(U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dRead :: GHC.Read.Read a)
                   (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [InflectionData.Manifest a]
                            -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.$wlist
                   @ (InflectionData.Manifest a)
                   (InflectionData.$fReadManifest2 @ a $dRead)
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <InflectionData.Manifest a>_R))
                   @ b
                   eta1) -}
85ccc74e1ff5c6f02e98c1d7c55eb095
  $fReadManifest10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Manifest [InflectionData.Animacy]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)>,
     Unfolding: (\ (n :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Manifest [InflectionData.Animacy]
                           -> Text.ParserCombinators.ReadP.P b) ->
                 let {
                   lvl129 :: Text.ParserCombinators.ReadP.P b
                   = let {
                       lvl130 :: Text.ParserCombinators.ReadP.P b
                       = eta (InflectionData.NoManifest @ [InflectionData.Animacy])
                     } in
                     Text.Read.Lex.expect2
                       @ b
                       (\ (a1 :: Text.Read.Lex.Lexeme) ->
                        case a1 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                          Text.Read.Lex.Ident a2
                          -> case GHC.Base.eqString
                                    a2
                                    InflectionData.$fReadManifest6 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                               GHC.Types.True -> lvl130 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ (w4 :: ()) -> lvl129) -}
                   = \ (w4 :: ()) -> lvl129
                 } in
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b
                   (Text.ParserCombinators.ReadP.Look
                      @ b
                      (\ (a :: GHC.Base.String) ->
                       (Text.ParserCombinators.ReadP.skipSpaces_skip a)
                         `cast`
                       (Text.ParserCombinators.ReadP.N:ReadP[0] <()>_R)
                         @ b
                         k))
                   (case n of wild { GHC.Types.I# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x 10#) of wild2 {
                      GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                      GHC.Types.True
                      -> let {
                           lvl130 :: Text.ParserCombinators.ReadP.P b
                           = let {
                               lvl131 :: Text.ParserCombinators.ReadP.P b
                               = GHC.Read.$wlist
                                   @ (InflectionData.LexCat, InflectionData.ManifestType,
                                      GHC.Types.Int)
                                   InflectionData.$fReadManifest5
                                     `cast`
                                   (Trans
                                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                       <(InflectionData.LexCat,
                                                         InflectionData.ManifestType,
                                                         GHC.Types.Int)>_R))
                                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                  <(InflectionData.LexCat,
                                                    InflectionData.ManifestType,
                                                    GHC.Types.Int)>_R)))
                                   @ b
                                   (\ (a1 :: [(InflectionData.LexCat, InflectionData.ManifestType,
                                               GHC.Types.Int)]) ->
                                    GHC.Read.$wlist
                                      @ InflectionData.Animacy
                                      InflectionData.$fReadAnimacy2
                                        `cast`
                                      (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                <InflectionData.Animacy>_R))
                                      @ b
                                      (\ (a2 :: [InflectionData.Animacy]) ->
                                       eta
                                         (InflectionData.Manifest
                                            @ [InflectionData.Animacy]
                                            a1
                                            a2)))
                             } in
                             Text.Read.Lex.expect2
                               @ b
                               (\ (a1 :: Text.Read.Lex.Lexeme) ->
                                case a1 of wild1 {
                                  DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                  Text.Read.Lex.Ident a2
                                  -> case GHC.Base.eqString
                                            a2
                                            InflectionData.$fReadManifest3 of wild3 {
                                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                       GHC.Types.True -> lvl131 } })
                         } in
                         let {
                           k1 :: () -> Text.ParserCombinators.ReadP.P b
                             {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                Unfolding: InlineRule (1, True, True) (\ (w4 :: ()) -> lvl130) -}
                           = \ (w4 :: ()) -> lvl130
                         } in
                         Text.ParserCombinators.ReadP.Look
                           @ b
                           (\ (a :: GHC.Base.String) ->
                            (Text.ParserCombinators.ReadP.skipSpaces_skip a)
                              `cast`
                            (Text.ParserCombinators.ReadP.N:ReadP[0] <()>_R)
                              @ b
                              k1) } })) -}
9a6bbd54f38dfeb1bf3b7d7991f3da1c
  $fReadManifest100 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Person -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Person
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.FSTEXCL) -}
1626e60454e3c7be7efd33f9e7382434
  $fReadManifest101 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FSTEXCL"#) -}
9a6bbd54f38dfeb1bf3b7d7991f3da1c
  $fReadManifest102 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest104,
                  InflectionData.$fReadManifest103
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Person>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Person>_R))))) -}
9a6bbd54f38dfeb1bf3b7d7991f3da1c
  $fReadManifest103 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Person -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Person
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.FSTINCL) -}
bc25e82f5e9f0c0307fb18c8357ab1a6
  $fReadManifest104 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FSTINCL"#) -}
9a6bbd54f38dfeb1bf3b7d7991f3da1c
  $fReadManifest105 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest107,
                  InflectionData.$fReadManifest106
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Person>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Person>_R))))) -}
9a6bbd54f38dfeb1bf3b7d7991f3da1c
  $fReadManifest106 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Person -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Person
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.FIRST) -}
f8d335ff0c472fa558c53cce8ceae4de
  $fReadManifest107 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FIRST"#) -}
9a6bbd54f38dfeb1bf3b7d7991f3da1c
  $fReadManifest108 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest110,
                  InflectionData.$fReadManifest109
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Person>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Person>_R))))) -}
9a6bbd54f38dfeb1bf3b7d7991f3da1c
  $fReadManifest109 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Person -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Person
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.UPER) -}
dd3d5fb2c182a628e031f14d14b3a216
  $fReadManifest110 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "UPER"#) -}
34f63b08cc03cc4a134a26fda321d9ea
  $fReadManifest112 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Manifest [InflectionData.Honorific]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)>,
     Unfolding: (\ (n :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Manifest [InflectionData.Honorific]
                           -> Text.ParserCombinators.ReadP.P b) ->
                 let {
                   lvl129 :: Text.ParserCombinators.ReadP.P b
                   = let {
                       lvl130 :: Text.ParserCombinators.ReadP.P b
                       = eta (InflectionData.NoManifest @ [InflectionData.Honorific])
                     } in
                     Text.Read.Lex.expect2
                       @ b
                       (\ (a1 :: Text.Read.Lex.Lexeme) ->
                        case a1 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                          Text.Read.Lex.Ident a2
                          -> case GHC.Base.eqString
                                    a2
                                    InflectionData.$fReadManifest6 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                               GHC.Types.True -> lvl130 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ (w4 :: ()) -> lvl129) -}
                   = \ (w4 :: ()) -> lvl129
                 } in
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b
                   (Text.ParserCombinators.ReadP.Look
                      @ b
                      (\ (a :: GHC.Base.String) ->
                       (Text.ParserCombinators.ReadP.skipSpaces_skip a)
                         `cast`
                       (Text.ParserCombinators.ReadP.N:ReadP[0] <()>_R)
                         @ b
                         k))
                   (case n of wild { GHC.Types.I# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x 10#) of wild2 {
                      GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                      GHC.Types.True
                      -> let {
                           lvl130 :: Text.ParserCombinators.ReadP.P b
                           = let {
                               lvl131 :: Text.ParserCombinators.ReadP.P b
                               = GHC.Read.$wlist
                                   @ (InflectionData.LexCat, InflectionData.ManifestType,
                                      GHC.Types.Int)
                                   InflectionData.$fReadManifest5
                                     `cast`
                                   (Trans
                                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                       <(InflectionData.LexCat,
                                                         InflectionData.ManifestType,
                                                         GHC.Types.Int)>_R))
                                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                  <(InflectionData.LexCat,
                                                    InflectionData.ManifestType,
                                                    GHC.Types.Int)>_R)))
                                   @ b
                                   (\ (a1 :: [(InflectionData.LexCat, InflectionData.ManifestType,
                                               GHC.Types.Int)]) ->
                                    GHC.Read.$wlist
                                      @ InflectionData.Honorific
                                      InflectionData.$fReadHonorific2
                                        `cast`
                                      (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                <InflectionData.Honorific>_R))
                                      @ b
                                      (\ (a2 :: [InflectionData.Honorific]) ->
                                       eta
                                         (InflectionData.Manifest
                                            @ [InflectionData.Honorific]
                                            a1
                                            a2)))
                             } in
                             Text.Read.Lex.expect2
                               @ b
                               (\ (a1 :: Text.Read.Lex.Lexeme) ->
                                case a1 of wild1 {
                                  DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                  Text.Read.Lex.Ident a2
                                  -> case GHC.Base.eqString
                                            a2
                                            InflectionData.$fReadManifest3 of wild3 {
                                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                       GHC.Types.True -> lvl131 } })
                         } in
                         let {
                           k1 :: () -> Text.ParserCombinators.ReadP.P b
                             {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                Unfolding: InlineRule (1, True, True) (\ (w4 :: ()) -> lvl130) -}
                           = \ (w4 :: ()) -> lvl130
                         } in
                         Text.ParserCombinators.ReadP.Look
                           @ b
                           (\ (a :: GHC.Base.String) ->
                            (Text.ParserCombinators.ReadP.skipSpaces_skip a)
                              `cast`
                            (Text.ParserCombinators.ReadP.N:ReadP[0] <()>_R)
                              @ b
                              k1) } })) -}
278b448026a269d6d7d4ad361ebc34c4
  $fReadManifest114 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Manifest [InflectionData.Polarity]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)>,
     Unfolding: (\ (n :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Manifest [InflectionData.Polarity]
                           -> Text.ParserCombinators.ReadP.P b) ->
                 let {
                   lvl129 :: Text.ParserCombinators.ReadP.P b
                   = let {
                       lvl130 :: Text.ParserCombinators.ReadP.P b
                       = eta (InflectionData.NoManifest @ [InflectionData.Polarity])
                     } in
                     Text.Read.Lex.expect2
                       @ b
                       (\ (a1 :: Text.Read.Lex.Lexeme) ->
                        case a1 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                          Text.Read.Lex.Ident a2
                          -> case GHC.Base.eqString
                                    a2
                                    InflectionData.$fReadManifest6 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                               GHC.Types.True -> lvl130 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ (w4 :: ()) -> lvl129) -}
                   = \ (w4 :: ()) -> lvl129
                 } in
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b
                   (Text.ParserCombinators.ReadP.Look
                      @ b
                      (\ (a :: GHC.Base.String) ->
                       (Text.ParserCombinators.ReadP.skipSpaces_skip a)
                         `cast`
                       (Text.ParserCombinators.ReadP.N:ReadP[0] <()>_R)
                         @ b
                         k))
                   (case n of wild { GHC.Types.I# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x 10#) of wild2 {
                      GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                      GHC.Types.True
                      -> let {
                           lvl130 :: Text.ParserCombinators.ReadP.P b
                           = let {
                               lvl131 :: Text.ParserCombinators.ReadP.P b
                               = GHC.Read.$wlist
                                   @ (InflectionData.LexCat, InflectionData.ManifestType,
                                      GHC.Types.Int)
                                   InflectionData.$fReadManifest5
                                     `cast`
                                   (Trans
                                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                       <(InflectionData.LexCat,
                                                         InflectionData.ManifestType,
                                                         GHC.Types.Int)>_R))
                                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                  <(InflectionData.LexCat,
                                                    InflectionData.ManifestType,
                                                    GHC.Types.Int)>_R)))
                                   @ b
                                   (\ (a1 :: [(InflectionData.LexCat, InflectionData.ManifestType,
                                               GHC.Types.Int)]) ->
                                    GHC.Read.$wlist
                                      @ InflectionData.Polarity
                                      InflectionData.$fReadManifest115
                                        `cast`
                                      (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                <InflectionData.Polarity>_R))
                                      @ b
                                      (\ (a2 :: [InflectionData.Polarity]) ->
                                       eta
                                         (InflectionData.Manifest
                                            @ [InflectionData.Polarity]
                                            a1
                                            a2)))
                             } in
                             Text.Read.Lex.expect2
                               @ b
                               (\ (a1 :: Text.Read.Lex.Lexeme) ->
                                case a1 of wild1 {
                                  DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                  Text.Read.Lex.Ident a2
                                  -> case GHC.Base.eqString
                                            a2
                                            InflectionData.$fReadManifest3 of wild3 {
                                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                       GHC.Types.True -> lvl131 } })
                         } in
                         let {
                           k1 :: () -> Text.ParserCombinators.ReadP.P b
                             {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                Unfolding: InlineRule (1, True, True) (\ (w4 :: ()) -> lvl130) -}
                           = \ (w4 :: ()) -> lvl130
                         } in
                         Text.ParserCombinators.ReadP.Look
                           @ b
                           (\ (a :: GHC.Base.String) ->
                            (Text.ParserCombinators.ReadP.skipSpaces_skip a)
                              `cast`
                            (Text.ParserCombinators.ReadP.N:ReadP[0] <()>_R)
                              @ b
                              k1) } })) -}
969cd5a99a727ddd44430477f29dd629
  $fReadManifest115 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Polarity
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Polarity
                   InflectionData.$fReadManifest116
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <InflectionData.Polarity>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <InflectionData.Polarity>_R)))) -}
969cd5a99a727ddd44430477f29dd629
  $fReadManifest116 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Polarity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: InflectionData.Polarity
                            -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.choose2
                   @ InflectionData.Polarity
                   InflectionData.$fReadManifest117
                   eta
                   @ b
                   eta1) -}
969cd5a99a727ddd44430477f29dd629
  $fReadManifest117 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Polarity)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Polarity)
                   InflectionData.$fReadManifest126
                   InflectionData.$fReadManifest118) -}
969cd5a99a727ddd44430477f29dd629
  $fReadManifest118 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Polarity)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Polarity)
                   InflectionData.$fReadManifest123
                   InflectionData.$fReadManifest119) -}
969cd5a99a727ddd44430477f29dd629
  $fReadManifest119 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Polarity)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Polarity)
                   InflectionData.$fReadManifest120
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           InflectionData.Polarity))) -}
02ac6bafdeff05bf4b6cb1fb4bd8466f
  $fReadManifest12 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Manifest [InflectionData.Case]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)>,
     Unfolding: (\ (n :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Manifest [InflectionData.Case]
                           -> Text.ParserCombinators.ReadP.P b) ->
                 let {
                   lvl129 :: Text.ParserCombinators.ReadP.P b
                   = let {
                       lvl130 :: Text.ParserCombinators.ReadP.P b
                       = eta (InflectionData.NoManifest @ [InflectionData.Case])
                     } in
                     Text.Read.Lex.expect2
                       @ b
                       (\ (a1 :: Text.Read.Lex.Lexeme) ->
                        case a1 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                          Text.Read.Lex.Ident a2
                          -> case GHC.Base.eqString
                                    a2
                                    InflectionData.$fReadManifest6 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                               GHC.Types.True -> lvl130 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ (w4 :: ()) -> lvl129) -}
                   = \ (w4 :: ()) -> lvl129
                 } in
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b
                   (Text.ParserCombinators.ReadP.Look
                      @ b
                      (\ (a :: GHC.Base.String) ->
                       (Text.ParserCombinators.ReadP.skipSpaces_skip a)
                         `cast`
                       (Text.ParserCombinators.ReadP.N:ReadP[0] <()>_R)
                         @ b
                         k))
                   (case n of wild { GHC.Types.I# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x 10#) of wild2 {
                      GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                      GHC.Types.True
                      -> let {
                           lvl130 :: Text.ParserCombinators.ReadP.P b
                           = let {
                               lvl131 :: Text.ParserCombinators.ReadP.P b
                               = GHC.Read.$wlist
                                   @ (InflectionData.LexCat, InflectionData.ManifestType,
                                      GHC.Types.Int)
                                   InflectionData.$fReadManifest5
                                     `cast`
                                   (Trans
                                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                       <(InflectionData.LexCat,
                                                         InflectionData.ManifestType,
                                                         GHC.Types.Int)>_R))
                                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                  <(InflectionData.LexCat,
                                                    InflectionData.ManifestType,
                                                    GHC.Types.Int)>_R)))
                                   @ b
                                   (\ (a1 :: [(InflectionData.LexCat, InflectionData.ManifestType,
                                               GHC.Types.Int)]) ->
                                    GHC.Read.$wlist
                                      @ InflectionData.Case
                                      InflectionData.$fReadCase2
                                        `cast`
                                      (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                <InflectionData.Case>_R))
                                      @ b
                                      (\ (a2 :: [InflectionData.Case]) ->
                                       eta (InflectionData.Manifest @ [InflectionData.Case] a1 a2)))
                             } in
                             Text.Read.Lex.expect2
                               @ b
                               (\ (a1 :: Text.Read.Lex.Lexeme) ->
                                case a1 of wild1 {
                                  DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                  Text.Read.Lex.Ident a2
                                  -> case GHC.Base.eqString
                                            a2
                                            InflectionData.$fReadManifest3 of wild3 {
                                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                       GHC.Types.True -> lvl131 } })
                         } in
                         let {
                           k1 :: () -> Text.ParserCombinators.ReadP.P b
                             {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                Unfolding: InlineRule (1, True, True) (\ (w4 :: ()) -> lvl130) -}
                           = \ (w4 :: ()) -> lvl130
                         } in
                         Text.ParserCombinators.ReadP.Look
                           @ b
                           (\ (a :: GHC.Base.String) ->
                            (Text.ParserCombinators.ReadP.skipSpaces_skip a)
                              `cast`
                            (Text.ParserCombinators.ReadP.N:ReadP[0] <()>_R)
                              @ b
                              k1) } })) -}
969cd5a99a727ddd44430477f29dd629
  $fReadManifest120 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Polarity)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest122,
                  InflectionData.$fReadManifest121
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Polarity>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Polarity>_R))))) -}
969cd5a99a727ddd44430477f29dd629
  $fReadManifest121 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Polarity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Polarity
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.NEG) -}
e18c3f676d410bca1413c81f8217a146
  $fReadManifest122 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NEG"#) -}
969cd5a99a727ddd44430477f29dd629
  $fReadManifest123 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Polarity)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest125,
                  InflectionData.$fReadManifest124
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Polarity>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Polarity>_R))))) -}
969cd5a99a727ddd44430477f29dd629
  $fReadManifest124 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Polarity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Polarity
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.AFF) -}
6054fab18711af0320d7ad7dad4d1dc3
  $fReadManifest125 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AFF"#) -}
969cd5a99a727ddd44430477f29dd629
  $fReadManifest126 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Polarity)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest128,
                  InflectionData.$fReadManifest127
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Polarity>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Polarity>_R))))) -}
969cd5a99a727ddd44430477f29dd629
  $fReadManifest127 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Polarity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Polarity
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.UPOL) -}
6a358f01b5926c6023e3c8f8f30898e7
  $fReadManifest128 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "UPOL"#) -}
8d1e3d7f315183001b35566e057b6299
  $fReadManifest130 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Manifest [InflectionData.Tense]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)>,
     Unfolding: (\ (n :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Manifest [InflectionData.Tense]
                           -> Text.ParserCombinators.ReadP.P b) ->
                 let {
                   lvl129 :: Text.ParserCombinators.ReadP.P b
                   = let {
                       lvl130 :: Text.ParserCombinators.ReadP.P b
                       = eta (InflectionData.NoManifest @ [InflectionData.Tense])
                     } in
                     Text.Read.Lex.expect2
                       @ b
                       (\ (a1 :: Text.Read.Lex.Lexeme) ->
                        case a1 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                          Text.Read.Lex.Ident a2
                          -> case GHC.Base.eqString
                                    a2
                                    InflectionData.$fReadManifest6 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                               GHC.Types.True -> lvl130 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ (w4 :: ()) -> lvl129) -}
                   = \ (w4 :: ()) -> lvl129
                 } in
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b
                   (Text.ParserCombinators.ReadP.Look
                      @ b
                      (\ (a :: GHC.Base.String) ->
                       (Text.ParserCombinators.ReadP.skipSpaces_skip a)
                         `cast`
                       (Text.ParserCombinators.ReadP.N:ReadP[0] <()>_R)
                         @ b
                         k))
                   (case n of wild { GHC.Types.I# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x 10#) of wild2 {
                      GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                      GHC.Types.True
                      -> let {
                           lvl130 :: Text.ParserCombinators.ReadP.P b
                           = let {
                               lvl131 :: Text.ParserCombinators.ReadP.P b
                               = GHC.Read.$wlist
                                   @ (InflectionData.LexCat, InflectionData.ManifestType,
                                      GHC.Types.Int)
                                   InflectionData.$fReadManifest5
                                     `cast`
                                   (Trans
                                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                       <(InflectionData.LexCat,
                                                         InflectionData.ManifestType,
                                                         GHC.Types.Int)>_R))
                                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                  <(InflectionData.LexCat,
                                                    InflectionData.ManifestType,
                                                    GHC.Types.Int)>_R)))
                                   @ b
                                   (\ (a1 :: [(InflectionData.LexCat, InflectionData.ManifestType,
                                               GHC.Types.Int)]) ->
                                    GHC.Read.$wlist
                                      @ InflectionData.Tense
                                      InflectionData.$fReadManifest131
                                        `cast`
                                      (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                <InflectionData.Tense>_R))
                                      @ b
                                      (\ (a2 :: [InflectionData.Tense]) ->
                                       eta
                                         (InflectionData.Manifest @ [InflectionData.Tense] a1 a2)))
                             } in
                             Text.Read.Lex.expect2
                               @ b
                               (\ (a1 :: Text.Read.Lex.Lexeme) ->
                                case a1 of wild1 {
                                  DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                  Text.Read.Lex.Ident a2
                                  -> case GHC.Base.eqString
                                            a2
                                            InflectionData.$fReadManifest3 of wild3 {
                                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                       GHC.Types.True -> lvl131 } })
                         } in
                         let {
                           k1 :: () -> Text.ParserCombinators.ReadP.P b
                             {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                Unfolding: InlineRule (1, True, True) (\ (w4 :: ()) -> lvl130) -}
                           = \ (w4 :: ()) -> lvl130
                         } in
                         Text.ParserCombinators.ReadP.Look
                           @ b
                           (\ (a :: GHC.Base.String) ->
                            (Text.ParserCombinators.ReadP.skipSpaces_skip a)
                              `cast`
                            (Text.ParserCombinators.ReadP.N:ReadP[0] <()>_R)
                              @ b
                              k1) } })) -}
a794f63e2da02424ad65302f61d49d0d
  $fReadManifest131 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Tense
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Tense
                   InflectionData.$fReadManifest132
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <InflectionData.Tense>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <InflectionData.Tense>_R)))) -}
a794f63e2da02424ad65302f61d49d0d
  $fReadManifest132 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: InflectionData.Tense
                            -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.choose2
                   @ InflectionData.Tense
                   InflectionData.$fReadManifest133
                   eta
                   @ b
                   eta1) -}
a794f63e2da02424ad65302f61d49d0d
  $fReadManifest133 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadManifest206
                   InflectionData.$fReadManifest134) -}
a794f63e2da02424ad65302f61d49d0d
  $fReadManifest134 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadManifest203
                   InflectionData.$fReadManifest135) -}
a794f63e2da02424ad65302f61d49d0d
  $fReadManifest135 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadManifest200
                   InflectionData.$fReadManifest136) -}
a794f63e2da02424ad65302f61d49d0d
  $fReadManifest136 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadManifest197
                   InflectionData.$fReadManifest137) -}
a794f63e2da02424ad65302f61d49d0d
  $fReadManifest137 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadManifest194
                   InflectionData.$fReadManifest138) -}
a794f63e2da02424ad65302f61d49d0d
  $fReadManifest138 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadManifest191
                   InflectionData.$fReadManifest139) -}
a794f63e2da02424ad65302f61d49d0d
  $fReadManifest139 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadManifest188
                   InflectionData.$fReadManifest140) -}
ffcdda26092b456564d3c6eeb75b6220
  $fReadManifest14 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Manifest [InflectionData.Number]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)>,
     Unfolding: (\ (n :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Manifest [InflectionData.Number]
                           -> Text.ParserCombinators.ReadP.P b) ->
                 let {
                   lvl129 :: Text.ParserCombinators.ReadP.P b
                   = let {
                       lvl130 :: Text.ParserCombinators.ReadP.P b
                       = eta (InflectionData.NoManifest @ [InflectionData.Number])
                     } in
                     Text.Read.Lex.expect2
                       @ b
                       (\ (a1 :: Text.Read.Lex.Lexeme) ->
                        case a1 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                          Text.Read.Lex.Ident a2
                          -> case GHC.Base.eqString
                                    a2
                                    InflectionData.$fReadManifest6 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                               GHC.Types.True -> lvl130 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ (w4 :: ()) -> lvl129) -}
                   = \ (w4 :: ()) -> lvl129
                 } in
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b
                   (Text.ParserCombinators.ReadP.Look
                      @ b
                      (\ (a :: GHC.Base.String) ->
                       (Text.ParserCombinators.ReadP.skipSpaces_skip a)
                         `cast`
                       (Text.ParserCombinators.ReadP.N:ReadP[0] <()>_R)
                         @ b
                         k))
                   (case n of wild { GHC.Types.I# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x 10#) of wild2 {
                      GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                      GHC.Types.True
                      -> let {
                           lvl130 :: Text.ParserCombinators.ReadP.P b
                           = let {
                               lvl131 :: Text.ParserCombinators.ReadP.P b
                               = GHC.Read.$wlist
                                   @ (InflectionData.LexCat, InflectionData.ManifestType,
                                      GHC.Types.Int)
                                   InflectionData.$fReadManifest5
                                     `cast`
                                   (Trans
                                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                       <(InflectionData.LexCat,
                                                         InflectionData.ManifestType,
                                                         GHC.Types.Int)>_R))
                                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                  <(InflectionData.LexCat,
                                                    InflectionData.ManifestType,
                                                    GHC.Types.Int)>_R)))
                                   @ b
                                   (\ (a1 :: [(InflectionData.LexCat, InflectionData.ManifestType,
                                               GHC.Types.Int)]) ->
                                    GHC.Read.$wlist
                                      @ InflectionData.Number
                                      InflectionData.$fReadManifest15
                                        `cast`
                                      (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                <InflectionData.Number>_R))
                                      @ b
                                      (\ (a2 :: [InflectionData.Number]) ->
                                       eta
                                         (InflectionData.Manifest @ [InflectionData.Number] a1 a2)))
                             } in
                             Text.Read.Lex.expect2
                               @ b
                               (\ (a1 :: Text.Read.Lex.Lexeme) ->
                                case a1 of wild1 {
                                  DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                  Text.Read.Lex.Ident a2
                                  -> case GHC.Base.eqString
                                            a2
                                            InflectionData.$fReadManifest3 of wild3 {
                                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                       GHC.Types.True -> lvl131 } })
                         } in
                         let {
                           k1 :: () -> Text.ParserCombinators.ReadP.P b
                             {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                Unfolding: InlineRule (1, True, True) (\ (w4 :: ()) -> lvl130) -}
                           = \ (w4 :: ()) -> lvl130
                         } in
                         Text.ParserCombinators.ReadP.Look
                           @ b
                           (\ (a :: GHC.Base.String) ->
                            (Text.ParserCombinators.ReadP.skipSpaces_skip a)
                              `cast`
                            (Text.ParserCombinators.ReadP.N:ReadP[0] <()>_R)
                              @ b
                              k1) } })) -}
a794f63e2da02424ad65302f61d49d0d
  $fReadManifest140 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadManifest185
                   InflectionData.$fReadManifest141) -}
a794f63e2da02424ad65302f61d49d0d
  $fReadManifest141 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadManifest182
                   InflectionData.$fReadManifest142) -}
a794f63e2da02424ad65302f61d49d0d
  $fReadManifest142 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadManifest179
                   InflectionData.$fReadManifest143) -}
a794f63e2da02424ad65302f61d49d0d
  $fReadManifest143 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadManifest176
                   InflectionData.$fReadManifest144) -}
a794f63e2da02424ad65302f61d49d0d
  $fReadManifest144 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadManifest173
                   InflectionData.$fReadManifest145) -}
a794f63e2da02424ad65302f61d49d0d
  $fReadManifest145 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadManifest170
                   InflectionData.$fReadManifest146) -}
a794f63e2da02424ad65302f61d49d0d
  $fReadManifest146 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadManifest167
                   InflectionData.$fReadManifest147) -}
a794f63e2da02424ad65302f61d49d0d
  $fReadManifest147 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadManifest164
                   InflectionData.$fReadManifest148) -}
a794f63e2da02424ad65302f61d49d0d
  $fReadManifest148 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadManifest161
                   InflectionData.$fReadManifest149) -}
a794f63e2da02424ad65302f61d49d0d
  $fReadManifest149 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadManifest158
                   InflectionData.$fReadManifest150) -}
819df3b7803a0b6e1c638b12031d1054
  $fReadManifest15 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Number
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Number
                   InflectionData.$fReadManifest16
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <InflectionData.Number>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <InflectionData.Number>_R)))) -}
a794f63e2da02424ad65302f61d49d0d
  $fReadManifest150 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadManifest155
                   InflectionData.$fReadManifest151) -}
a794f63e2da02424ad65302f61d49d0d
  $fReadManifest151 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
                   InflectionData.$fReadManifest152
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense))) -}
a794f63e2da02424ad65302f61d49d0d
  $fReadManifest152 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest154,
                  InflectionData.$fReadManifest153
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
a794f63e2da02424ad65302f61d49d0d
  $fReadManifest153 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Tense
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.FUTPER) -}
206077da4bf087cadbdbc4cda214f24e
  $fReadManifest154 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FUTPER"#) -}
a794f63e2da02424ad65302f61d49d0d
  $fReadManifest155 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest157,
                  InflectionData.$fReadManifest156
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
a794f63e2da02424ad65302f61d49d0d
  $fReadManifest156 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Tense
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.PRSPER) -}
233a768ca402dd7ba4099d253ce7e50d
  $fReadManifest157 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PRSPER"#) -}
a794f63e2da02424ad65302f61d49d0d
  $fReadManifest158 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest160,
                  InflectionData.$fReadManifest159
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
a794f63e2da02424ad65302f61d49d0d
  $fReadManifest159 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Tense
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.PSTPER) -}
819df3b7803a0b6e1c638b12031d1054
  $fReadManifest16 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Number -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: InflectionData.Number
                            -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.choose2
                   @ InflectionData.Number
                   InflectionData.$fReadManifest17
                   eta
                   @ b
                   eta1) -}
f36d9621e5dae384e3d0611ca2a3edf8
  $fReadManifest160 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PSTPER"#) -}
a794f63e2da02424ad65302f61d49d0d
  $fReadManifest161 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest163,
                  InflectionData.$fReadManifest162
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
a794f63e2da02424ad65302f61d49d0d
  $fReadManifest162 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Tense
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.PPST3) -}
f9dcf1a6cb422f93bf37fe932fa6161b
  $fReadManifest163 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PPST3"#) -}
a794f63e2da02424ad65302f61d49d0d
  $fReadManifest164 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest166,
                  InflectionData.$fReadManifest165
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
a794f63e2da02424ad65302f61d49d0d
  $fReadManifest165 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Tense
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.PPST2) -}
75973907ac813a0c1385543cfff5715a
  $fReadManifest166 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PPST2"#) -}
a794f63e2da02424ad65302f61d49d0d
  $fReadManifest167 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest169,
                  InflectionData.$fReadManifest168
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
a794f63e2da02424ad65302f61d49d0d
  $fReadManifest168 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Tense
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.PPST1) -}
ede4cacd82fe4190fbf2e5333345f48c
  $fReadManifest169 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PPST1"#) -}
819df3b7803a0b6e1c638b12031d1054
  $fReadManifest17 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)
                   InflectionData.$fReadManifest38
                   InflectionData.$fReadManifest18) -}
a794f63e2da02424ad65302f61d49d0d
  $fReadManifest170 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest172,
                  InflectionData.$fReadManifest171
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
a794f63e2da02424ad65302f61d49d0d
  $fReadManifest171 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Tense
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.PPST) -}
8679e59e4eb44f218c62ce90b65dec4e
  $fReadManifest172 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PPST"#) -}
a794f63e2da02424ad65302f61d49d0d
  $fReadManifest173 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest175,
                  InflectionData.$fReadManifest174
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
a794f63e2da02424ad65302f61d49d0d
  $fReadManifest174 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Tense
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.PFUT) -}
4fe5e997550a8fd1470914f187266c14
  $fReadManifest175 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PFUT"#) -}
a794f63e2da02424ad65302f61d49d0d
  $fReadManifest176 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest178,
                  InflectionData.$fReadManifest177
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
a794f63e2da02424ad65302f61d49d0d
  $fReadManifest177 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Tense
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.PPRS) -}
ee971b0ffff7b246b5c120eaef53da2f
  $fReadManifest178 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PPRS"#) -}
a794f63e2da02424ad65302f61d49d0d
  $fReadManifest179 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest181,
                  InflectionData.$fReadManifest180
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
819df3b7803a0b6e1c638b12031d1054
  $fReadManifest18 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)
                   InflectionData.$fReadManifest35
                   InflectionData.$fReadManifest19) -}
a794f63e2da02424ad65302f61d49d0d
  $fReadManifest180 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Tense
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.AFUT3) -}
eba5ce5fa4cc8fa3f1b7a73115cabcf2
  $fReadManifest181 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AFUT3"#) -}
a794f63e2da02424ad65302f61d49d0d
  $fReadManifest182 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest184,
                  InflectionData.$fReadManifest183
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
a794f63e2da02424ad65302f61d49d0d
  $fReadManifest183 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Tense
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.AFUT2) -}
6be87db0ef5e3356ceab6efd2ba2b287
  $fReadManifest184 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AFUT2"#) -}
a794f63e2da02424ad65302f61d49d0d
  $fReadManifest185 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest187,
                  InflectionData.$fReadManifest186
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
a794f63e2da02424ad65302f61d49d0d
  $fReadManifest186 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Tense
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.AFUT1) -}
3ad561ad6311aab83142462858f1fb65
  $fReadManifest187 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AFUT1"#) -}
a794f63e2da02424ad65302f61d49d0d
  $fReadManifest188 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest190,
                  InflectionData.$fReadManifest189
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
a794f63e2da02424ad65302f61d49d0d
  $fReadManifest189 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Tense
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.AFUT) -}
819df3b7803a0b6e1c638b12031d1054
  $fReadManifest19 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)
                   InflectionData.$fReadManifest32
                   InflectionData.$fReadManifest20) -}
c7b80d11bbd0c68ebd9547c8e08be320
  $fReadManifest190 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AFUT"#) -}
a794f63e2da02424ad65302f61d49d0d
  $fReadManifest191 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest193,
                  InflectionData.$fReadManifest192
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
a794f63e2da02424ad65302f61d49d0d
  $fReadManifest192 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Tense
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.APST) -}
c95f0f70a0f6ef13e707665f8fe89277
  $fReadManifest193 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "APST"#) -}
a794f63e2da02424ad65302f61d49d0d
  $fReadManifest194 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest196,
                  InflectionData.$fReadManifest195
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
a794f63e2da02424ad65302f61d49d0d
  $fReadManifest195 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Tense
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.APRS) -}
aa78c16184a2df507aba3a9aab9111ab
  $fReadManifest196 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "APRS"#) -}
a794f63e2da02424ad65302f61d49d0d
  $fReadManifest197 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest199,
                  InflectionData.$fReadManifest198
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
a794f63e2da02424ad65302f61d49d0d
  $fReadManifest198 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Tense
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.FUT) -}
0da99c11638f3c4bef1e63f7f26d3df7
  $fReadManifest199 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FUT"#) -}
a1f6ea453f44aabd626528c4893e70e2
  $fReadManifest2 ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP (InflectionData.Manifest a)
  {- Arity: 2, Strictness: <L,1*U(A,A,1*U,A)><L,U>,
     Unfolding: (\ @ a
                   ($dRead :: GHC.Read.Read a)
                   (eta :: Text.ParserCombinators.ReadPrec.Prec) ->
                 let {
                   ds :: Text.ParserCombinators.ReadPrec.ReadPrec a
                   = GHC.Read.readPrec @ a $dRead
                 } in
                 GHC.Read.$fReadDouble10
                   @ (InflectionData.Manifest a)
                   (\ (n :: Text.ParserCombinators.ReadPrec.Prec)
                      @ b
                      (eta1 :: InflectionData.Manifest a
                               -> Text.ParserCombinators.ReadP.P b) ->
                    let {
                      lvl129 :: Text.ParserCombinators.ReadP.P b
                      = let {
                          lvl130 :: Text.ParserCombinators.ReadP.P b
                          = eta1 (InflectionData.NoManifest @ a)
                        } in
                        Text.Read.Lex.expect2
                          @ b
                          (\ (a1 :: Text.Read.Lex.Lexeme) ->
                           case a1 of wild {
                             DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                             Text.Read.Lex.Ident a2
                             -> case GHC.Base.eqString
                                       a2
                                       InflectionData.$fReadManifest6 of wild1 {
                                  GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                  GHC.Types.True -> lvl130 } })
                    } in
                    let {
                      k :: () -> Text.ParserCombinators.ReadP.P b
                        {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                           Unfolding: InlineRule (1, True, True) (\ (w4 :: ()) -> lvl129) -}
                      = \ (w4 :: ()) -> lvl129
                    } in
                    Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                      @ b
                      (Text.ParserCombinators.ReadP.Look
                         @ b
                         (\ (a1 :: GHC.Base.String) ->
                          (Text.ParserCombinators.ReadP.skipSpaces_skip a1)
                            `cast`
                          (Text.ParserCombinators.ReadP.N:ReadP[0] <()>_R)
                            @ b
                            k))
                      (case n of wild { GHC.Types.I# x ->
                       case GHC.Prim.tagToEnum#
                              @ GHC.Types.Bool
                              (GHC.Prim.<=# x 10#) of wild2 {
                         GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                         GHC.Types.True
                         -> let {
                              lvl130 :: Text.ParserCombinators.ReadP.P b
                              = let {
                                  lvl131 :: Text.ParserCombinators.ReadP.P b
                                  = GHC.Read.$wlist
                                      @ (InflectionData.LexCat, InflectionData.ManifestType,
                                         GHC.Types.Int)
                                      InflectionData.$fReadManifest5
                                        `cast`
                                      (Trans
                                           (<Text.ParserCombinators.ReadPrec.Prec>_R
                                            ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                          <(InflectionData.LexCat,
                                                            InflectionData.ManifestType,
                                                            GHC.Types.Int)>_R))
                                           (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                     <(InflectionData.LexCat,
                                                       InflectionData.ManifestType,
                                                       GHC.Types.Int)>_R)))
                                      @ b
                                      (\ (a1 :: [(InflectionData.LexCat,
                                                  InflectionData.ManifestType, GHC.Types.Int)]) ->
                                       (ds
                                          `cast`
                                        (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a>_R)
                                          InflectionData.$fReadManifest4)
                                         `cast`
                                       (Text.ParserCombinators.ReadP.N:ReadP[0] <a>_R)
                                         @ b
                                         (\ (a2 :: a) -> eta1 (InflectionData.Manifest @ a a1 a2)))
                                } in
                                Text.Read.Lex.expect2
                                  @ b
                                  (\ (a1 :: Text.Read.Lex.Lexeme) ->
                                   case a1 of wild1 {
                                     DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                     Text.Read.Lex.Ident a2
                                     -> case GHC.Base.eqString
                                               a2
                                               InflectionData.$fReadManifest3 of wild3 {
                                          GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                          GHC.Types.True -> lvl131 } })
                            } in
                            let {
                              k1 :: () -> Text.ParserCombinators.ReadP.P b
                                {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                   Unfolding: InlineRule (1, True, True) (\ (w4 :: ()) -> lvl130) -}
                              = \ (w4 :: ()) -> lvl130
                            } in
                            Text.ParserCombinators.ReadP.Look
                              @ b
                              (\ (a1 :: GHC.Base.String) ->
                               (Text.ParserCombinators.ReadP.skipSpaces_skip a1)
                                 `cast`
                               (Text.ParserCombinators.ReadP.N:ReadP[0] <()>_R)
                                 @ b
                                 k1) } }))
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <InflectionData.Manifest a>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <InflectionData.Manifest a>_R)))
                   eta) -}
819df3b7803a0b6e1c638b12031d1054
  $fReadManifest20 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)
                   InflectionData.$fReadManifest29
                   InflectionData.$fReadManifest21) -}
a794f63e2da02424ad65302f61d49d0d
  $fReadManifest200 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest202,
                  InflectionData.$fReadManifest201
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
a794f63e2da02424ad65302f61d49d0d
  $fReadManifest201 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Tense
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.PRS) -}
e5562bf63f6a4c20d436ebdac36949f4
  $fReadManifest202 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PRS"#) -}
a794f63e2da02424ad65302f61d49d0d
  $fReadManifest203 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest205,
                  InflectionData.$fReadManifest204
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
a794f63e2da02424ad65302f61d49d0d
  $fReadManifest204 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Tense
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.PST) -}
33eaadc17f2f99c2761e9217e81979ea
  $fReadManifest205 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PST"#) -}
a794f63e2da02424ad65302f61d49d0d
  $fReadManifest206 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest208,
                  InflectionData.$fReadManifest207
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Tense>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Tense>_R))))) -}
a794f63e2da02424ad65302f61d49d0d
  $fReadManifest207 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Tense -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Tense
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.UTEN) -}
ee71c2fcee1bdef3b77b8bd89c31b24f
  $fReadManifest208 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "UTEN"#) -}
819df3b7803a0b6e1c638b12031d1054
  $fReadManifest21 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)
                   InflectionData.$fReadManifest26
                   InflectionData.$fReadManifest22) -}
c3191f2d8696d0f2d1a8062ece5b17e9
  $fReadManifest210 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Manifest [InflectionData.Aspect]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)>,
     Unfolding: (\ (n :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Manifest [InflectionData.Aspect]
                           -> Text.ParserCombinators.ReadP.P b) ->
                 let {
                   lvl129 :: Text.ParserCombinators.ReadP.P b
                   = let {
                       lvl130 :: Text.ParserCombinators.ReadP.P b
                       = eta (InflectionData.NoManifest @ [InflectionData.Aspect])
                     } in
                     Text.Read.Lex.expect2
                       @ b
                       (\ (a1 :: Text.Read.Lex.Lexeme) ->
                        case a1 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                          Text.Read.Lex.Ident a2
                          -> case GHC.Base.eqString
                                    a2
                                    InflectionData.$fReadManifest6 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                               GHC.Types.True -> lvl130 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ (w4 :: ()) -> lvl129) -}
                   = \ (w4 :: ()) -> lvl129
                 } in
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b
                   (Text.ParserCombinators.ReadP.Look
                      @ b
                      (\ (a :: GHC.Base.String) ->
                       (Text.ParserCombinators.ReadP.skipSpaces_skip a)
                         `cast`
                       (Text.ParserCombinators.ReadP.N:ReadP[0] <()>_R)
                         @ b
                         k))
                   (case n of wild { GHC.Types.I# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x 10#) of wild2 {
                      GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                      GHC.Types.True
                      -> let {
                           lvl130 :: Text.ParserCombinators.ReadP.P b
                           = let {
                               lvl131 :: Text.ParserCombinators.ReadP.P b
                               = GHC.Read.$wlist
                                   @ (InflectionData.LexCat, InflectionData.ManifestType,
                                      GHC.Types.Int)
                                   InflectionData.$fReadManifest5
                                     `cast`
                                   (Trans
                                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                       <(InflectionData.LexCat,
                                                         InflectionData.ManifestType,
                                                         GHC.Types.Int)>_R))
                                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                  <(InflectionData.LexCat,
                                                    InflectionData.ManifestType,
                                                    GHC.Types.Int)>_R)))
                                   @ b
                                   (\ (a1 :: [(InflectionData.LexCat, InflectionData.ManifestType,
                                               GHC.Types.Int)]) ->
                                    GHC.Read.$wlist
                                      @ InflectionData.Aspect
                                      InflectionData.$fReadAspect2
                                        `cast`
                                      (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                <InflectionData.Aspect>_R))
                                      @ b
                                      (\ (a2 :: [InflectionData.Aspect]) ->
                                       eta
                                         (InflectionData.Manifest @ [InflectionData.Aspect] a1 a2)))
                             } in
                             Text.Read.Lex.expect2
                               @ b
                               (\ (a1 :: Text.Read.Lex.Lexeme) ->
                                case a1 of wild1 {
                                  DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                  Text.Read.Lex.Ident a2
                                  -> case GHC.Base.eqString
                                            a2
                                            InflectionData.$fReadManifest3 of wild3 {
                                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                       GHC.Types.True -> lvl131 } })
                         } in
                         let {
                           k1 :: () -> Text.ParserCombinators.ReadP.P b
                             {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                Unfolding: InlineRule (1, True, True) (\ (w4 :: ()) -> lvl130) -}
                           = \ (w4 :: ()) -> lvl130
                         } in
                         Text.ParserCombinators.ReadP.Look
                           @ b
                           (\ (a :: GHC.Base.String) ->
                            (Text.ParserCombinators.ReadP.skipSpaces_skip a)
                              `cast`
                            (Text.ParserCombinators.ReadP.N:ReadP[0] <()>_R)
                              @ b
                              k1) } })) -}
20bde32c7b528526075050d685268fed
  $fReadManifest212 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Manifest [InflectionData.Mood]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)>,
     Unfolding: (\ (n :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Manifest [InflectionData.Mood]
                           -> Text.ParserCombinators.ReadP.P b) ->
                 let {
                   lvl129 :: Text.ParserCombinators.ReadP.P b
                   = let {
                       lvl130 :: Text.ParserCombinators.ReadP.P b
                       = eta (InflectionData.NoManifest @ [InflectionData.Mood])
                     } in
                     Text.Read.Lex.expect2
                       @ b
                       (\ (a1 :: Text.Read.Lex.Lexeme) ->
                        case a1 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                          Text.Read.Lex.Ident a2
                          -> case GHC.Base.eqString
                                    a2
                                    InflectionData.$fReadManifest6 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                               GHC.Types.True -> lvl130 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ (w4 :: ()) -> lvl129) -}
                   = \ (w4 :: ()) -> lvl129
                 } in
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b
                   (Text.ParserCombinators.ReadP.Look
                      @ b
                      (\ (a :: GHC.Base.String) ->
                       (Text.ParserCombinators.ReadP.skipSpaces_skip a)
                         `cast`
                       (Text.ParserCombinators.ReadP.N:ReadP[0] <()>_R)
                         @ b
                         k))
                   (case n of wild { GHC.Types.I# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x 10#) of wild2 {
                      GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                      GHC.Types.True
                      -> let {
                           lvl130 :: Text.ParserCombinators.ReadP.P b
                           = let {
                               lvl131 :: Text.ParserCombinators.ReadP.P b
                               = GHC.Read.$wlist
                                   @ (InflectionData.LexCat, InflectionData.ManifestType,
                                      GHC.Types.Int)
                                   InflectionData.$fReadManifest5
                                     `cast`
                                   (Trans
                                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                       <(InflectionData.LexCat,
                                                         InflectionData.ManifestType,
                                                         GHC.Types.Int)>_R))
                                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                  <(InflectionData.LexCat,
                                                    InflectionData.ManifestType,
                                                    GHC.Types.Int)>_R)))
                                   @ b
                                   (\ (a1 :: [(InflectionData.LexCat, InflectionData.ManifestType,
                                               GHC.Types.Int)]) ->
                                    GHC.Read.$wlist
                                      @ InflectionData.Mood
                                      InflectionData.$fReadManifest213
                                        `cast`
                                      (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                <InflectionData.Mood>_R))
                                      @ b
                                      (\ (a2 :: [InflectionData.Mood]) ->
                                       eta (InflectionData.Manifest @ [InflectionData.Mood] a1 a2)))
                             } in
                             Text.Read.Lex.expect2
                               @ b
                               (\ (a1 :: Text.Read.Lex.Lexeme) ->
                                case a1 of wild1 {
                                  DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                  Text.Read.Lex.Ident a2
                                  -> case GHC.Base.eqString
                                            a2
                                            InflectionData.$fReadManifest3 of wild3 {
                                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                       GHC.Types.True -> lvl131 } })
                         } in
                         let {
                           k1 :: () -> Text.ParserCombinators.ReadP.P b
                             {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                Unfolding: InlineRule (1, True, True) (\ (w4 :: ()) -> lvl130) -}
                           = \ (w4 :: ()) -> lvl130
                         } in
                         Text.ParserCombinators.ReadP.Look
                           @ b
                           (\ (a :: GHC.Base.String) ->
                            (Text.ParserCombinators.ReadP.skipSpaces_skip a)
                              `cast`
                            (Text.ParserCombinators.ReadP.N:ReadP[0] <()>_R)
                              @ b
                              k1) } })) -}
a933e005d0b61de32dcb62fc71171e9c
  $fReadManifest213 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Mood
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Mood
                   InflectionData.$fReadManifest214
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <InflectionData.Mood>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <InflectionData.Mood>_R)))) -}
a933e005d0b61de32dcb62fc71171e9c
  $fReadManifest214 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: InflectionData.Mood
                            -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.choose2
                   @ InflectionData.Mood
                   InflectionData.$fReadManifest215
                   eta
                   @ b
                   eta1) -}
a933e005d0b61de32dcb62fc71171e9c
  $fReadManifest215 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
                   InflectionData.$fReadManifest256
                   InflectionData.$fReadManifest216) -}
a933e005d0b61de32dcb62fc71171e9c
  $fReadManifest216 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
                   InflectionData.$fReadManifest253
                   InflectionData.$fReadManifest217) -}
a933e005d0b61de32dcb62fc71171e9c
  $fReadManifest217 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
                   InflectionData.$fReadManifest250
                   InflectionData.$fReadManifest218) -}
a933e005d0b61de32dcb62fc71171e9c
  $fReadManifest218 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
                   InflectionData.$fReadManifest247
                   InflectionData.$fReadManifest219) -}
a933e005d0b61de32dcb62fc71171e9c
  $fReadManifest219 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
                   InflectionData.$fReadManifest244
                   InflectionData.$fReadManifest220) -}
819df3b7803a0b6e1c638b12031d1054
  $fReadManifest22 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)
                   InflectionData.$fReadManifest23
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           InflectionData.Number))) -}
a933e005d0b61de32dcb62fc71171e9c
  $fReadManifest220 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
                   InflectionData.$fReadManifest241
                   InflectionData.$fReadManifest221) -}
a933e005d0b61de32dcb62fc71171e9c
  $fReadManifest221 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
                   InflectionData.$fReadManifest238
                   InflectionData.$fReadManifest222) -}
a933e005d0b61de32dcb62fc71171e9c
  $fReadManifest222 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
                   InflectionData.$fReadManifest235
                   InflectionData.$fReadManifest223) -}
a933e005d0b61de32dcb62fc71171e9c
  $fReadManifest223 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
                   InflectionData.$fReadManifest232
                   InflectionData.$fReadManifest224) -}
a933e005d0b61de32dcb62fc71171e9c
  $fReadManifest224 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
                   InflectionData.$fReadManifest229
                   InflectionData.$fReadManifest225) -}
a933e005d0b61de32dcb62fc71171e9c
  $fReadManifest225 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
                   InflectionData.$fReadManifest226
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood))) -}
a933e005d0b61de32dcb62fc71171e9c
  $fReadManifest226 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest228,
                  InflectionData.$fReadManifest227
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Mood>_R))))) -}
a933e005d0b61de32dcb62fc71171e9c
  $fReadManifest227 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Mood -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.COND) -}
a7554e1bb926b6eecbbd2c1212d688c6
  $fReadManifest228 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "COND"#) -}
a933e005d0b61de32dcb62fc71171e9c
  $fReadManifest229 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest231,
                  InflectionData.$fReadManifest230
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Mood>_R))))) -}
819df3b7803a0b6e1c638b12031d1054
  $fReadManifest23 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest25,
                  InflectionData.$fReadManifest24
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Number>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Number>_R))))) -}
a933e005d0b61de32dcb62fc71171e9c
  $fReadManifest230 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Mood -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.POT) -}
416700a45c1427c75ad875c4fcb786ad
  $fReadManifest231 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "POT"#) -}
a933e005d0b61de32dcb62fc71171e9c
  $fReadManifest232 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest234,
                  InflectionData.$fReadManifest233
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Mood>_R))))) -}
a933e005d0b61de32dcb62fc71171e9c
  $fReadManifest233 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Mood -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.SBJV) -}
226389e2ff5cf1ee89b841995dec6f84
  $fReadManifest234 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SBJV"#) -}
a933e005d0b61de32dcb62fc71171e9c
  $fReadManifest235 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest237,
                  InflectionData.$fReadManifest236
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Mood>_R))))) -}
a933e005d0b61de32dcb62fc71171e9c
  $fReadManifest236 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Mood -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.EPIS) -}
684e8e0bfc3fae5a4f32faa2efc0ace0
  $fReadManifest237 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "EPIS"#) -}
a933e005d0b61de32dcb62fc71171e9c
  $fReadManifest238 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest240,
                  InflectionData.$fReadManifest239
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Mood>_R))))) -}
a933e005d0b61de32dcb62fc71171e9c
  $fReadManifest239 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Mood -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.OPT) -}
819df3b7803a0b6e1c638b12031d1054
  $fReadManifest24 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Number -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Number
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.PL) -}
54ac8fb4efe8a34456bd6cbbf27891f1
  $fReadManifest240 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OPT"#) -}
a933e005d0b61de32dcb62fc71171e9c
  $fReadManifest241 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest243,
                  InflectionData.$fReadManifest242
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Mood>_R))))) -}
a933e005d0b61de32dcb62fc71171e9c
  $fReadManifest242 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Mood -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.JUS) -}
88f881bcde412ae2ad68a2b808b636f3
  $fReadManifest243 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "JUS"#) -}
a933e005d0b61de32dcb62fc71171e9c
  $fReadManifest244 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest246,
                  InflectionData.$fReadManifest245
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Mood>_R))))) -}
a933e005d0b61de32dcb62fc71171e9c
  $fReadManifest245 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Mood -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.IMP) -}
a688427705cd1683710b53de874a5792
  $fReadManifest246 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "IMP"#) -}
a933e005d0b61de32dcb62fc71171e9c
  $fReadManifest247 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest249,
                  InflectionData.$fReadManifest248
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Mood>_R))))) -}
a933e005d0b61de32dcb62fc71171e9c
  $fReadManifest248 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Mood -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.DEO) -}
f8b5e12d62e07ff858d8c0fa2c0acc05
  $fReadManifest249 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DEO"#) -}
5652f33179ce380d5f58c3cb448510d9
  $fReadManifest25 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PL"#) -}
a933e005d0b61de32dcb62fc71171e9c
  $fReadManifest250 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest252,
                  InflectionData.$fReadManifest251
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Mood>_R))))) -}
a933e005d0b61de32dcb62fc71171e9c
  $fReadManifest251 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Mood -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.IRR) -}
dc8f56efc82ade8a1a71051de13b3eae
  $fReadManifest252 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "IRR"#) -}
a933e005d0b61de32dcb62fc71171e9c
  $fReadManifest253 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest255,
                  InflectionData.$fReadManifest254
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Mood>_R))))) -}
a933e005d0b61de32dcb62fc71171e9c
  $fReadManifest254 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Mood -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.IND) -}
fc5b2822bbc3abd87f3403e905c49e3a
  $fReadManifest255 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "IND"#) -}
a933e005d0b61de32dcb62fc71171e9c
  $fReadManifest256 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest258,
                  InflectionData.$fReadManifest257
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Mood>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Mood>_R))))) -}
a933e005d0b61de32dcb62fc71171e9c
  $fReadManifest257 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Mood -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Mood -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.UMOO) -}
db9da35b9c3e8f89fe55a40bfeee0e7e
  $fReadManifest258 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "UMOO"#) -}
819df3b7803a0b6e1c638b12031d1054
  $fReadManifest26 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest28,
                  InflectionData.$fReadManifest27
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Number>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Number>_R))))) -}
ac3af0602be7857669d434f068236562
  $fReadManifest260 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Manifest [InflectionData.Voice]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)>,
     Unfolding: (\ (n :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Manifest [InflectionData.Voice]
                           -> Text.ParserCombinators.ReadP.P b) ->
                 let {
                   lvl129 :: Text.ParserCombinators.ReadP.P b
                   = let {
                       lvl130 :: Text.ParserCombinators.ReadP.P b
                       = eta (InflectionData.NoManifest @ [InflectionData.Voice])
                     } in
                     Text.Read.Lex.expect2
                       @ b
                       (\ (a1 :: Text.Read.Lex.Lexeme) ->
                        case a1 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                          Text.Read.Lex.Ident a2
                          -> case GHC.Base.eqString
                                    a2
                                    InflectionData.$fReadManifest6 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                               GHC.Types.True -> lvl130 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ (w4 :: ()) -> lvl129) -}
                   = \ (w4 :: ()) -> lvl129
                 } in
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b
                   (Text.ParserCombinators.ReadP.Look
                      @ b
                      (\ (a :: GHC.Base.String) ->
                       (Text.ParserCombinators.ReadP.skipSpaces_skip a)
                         `cast`
                       (Text.ParserCombinators.ReadP.N:ReadP[0] <()>_R)
                         @ b
                         k))
                   (case n of wild { GHC.Types.I# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x 10#) of wild2 {
                      GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                      GHC.Types.True
                      -> let {
                           lvl130 :: Text.ParserCombinators.ReadP.P b
                           = let {
                               lvl131 :: Text.ParserCombinators.ReadP.P b
                               = GHC.Read.$wlist
                                   @ (InflectionData.LexCat, InflectionData.ManifestType,
                                      GHC.Types.Int)
                                   InflectionData.$fReadManifest5
                                     `cast`
                                   (Trans
                                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                       <(InflectionData.LexCat,
                                                         InflectionData.ManifestType,
                                                         GHC.Types.Int)>_R))
                                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                  <(InflectionData.LexCat,
                                                    InflectionData.ManifestType,
                                                    GHC.Types.Int)>_R)))
                                   @ b
                                   (\ (a1 :: [(InflectionData.LexCat, InflectionData.ManifestType,
                                               GHC.Types.Int)]) ->
                                    GHC.Read.$wlist
                                      @ InflectionData.Voice
                                      InflectionData.$fReadManifest261
                                        `cast`
                                      (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                <InflectionData.Voice>_R))
                                      @ b
                                      (\ (a2 :: [InflectionData.Voice]) ->
                                       eta
                                         (InflectionData.Manifest @ [InflectionData.Voice] a1 a2)))
                             } in
                             Text.Read.Lex.expect2
                               @ b
                               (\ (a1 :: Text.Read.Lex.Lexeme) ->
                                case a1 of wild1 {
                                  DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                  Text.Read.Lex.Ident a2
                                  -> case GHC.Base.eqString
                                            a2
                                            InflectionData.$fReadManifest3 of wild3 {
                                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                       GHC.Types.True -> lvl131 } })
                         } in
                         let {
                           k1 :: () -> Text.ParserCombinators.ReadP.P b
                             {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                Unfolding: InlineRule (1, True, True) (\ (w4 :: ()) -> lvl130) -}
                           = \ (w4 :: ()) -> lvl130
                         } in
                         Text.ParserCombinators.ReadP.Look
                           @ b
                           (\ (a :: GHC.Base.String) ->
                            (Text.ParserCombinators.ReadP.skipSpaces_skip a)
                              `cast`
                            (Text.ParserCombinators.ReadP.N:ReadP[0] <()>_R)
                              @ b
                              k1) } })) -}
8a5a669af2386e102c8f50cb27f7b624
  $fReadManifest261 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Voice
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Voice
                   InflectionData.$fReadManifest262
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <InflectionData.Voice>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <InflectionData.Voice>_R)))) -}
8a5a669af2386e102c8f50cb27f7b624
  $fReadManifest262 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Voice -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: InflectionData.Voice
                            -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.choose2
                   @ InflectionData.Voice
                   InflectionData.$fReadManifest263
                   eta
                   @ b
                   eta1) -}
8a5a669af2386e102c8f50cb27f7b624
  $fReadManifest263 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Voice)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Voice)
                   InflectionData.$fReadManifest276
                   InflectionData.$fReadManifest264) -}
8a5a669af2386e102c8f50cb27f7b624
  $fReadManifest264 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Voice)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Voice)
                   InflectionData.$fReadManifest273
                   InflectionData.$fReadManifest265) -}
8a5a669af2386e102c8f50cb27f7b624
  $fReadManifest265 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Voice)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Voice)
                   InflectionData.$fReadManifest270
                   InflectionData.$fReadManifest266) -}
8a5a669af2386e102c8f50cb27f7b624
  $fReadManifest266 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Voice)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Voice)
                   InflectionData.$fReadManifest267
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Voice))) -}
8a5a669af2386e102c8f50cb27f7b624
  $fReadManifest267 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Voice)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest269,
                  InflectionData.$fReadManifest268
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Voice>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Voice>_R))))) -}
8a5a669af2386e102c8f50cb27f7b624
  $fReadManifest268 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Voice -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Voice
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.PASSIVE) -}
23be6d8b1586230ebf0886c095c59e3e
  $fReadManifest269 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PASSIVE"#) -}
819df3b7803a0b6e1c638b12031d1054
  $fReadManifest27 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Number -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Number
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.PA) -}
8a5a669af2386e102c8f50cb27f7b624
  $fReadManifest270 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Voice)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest272,
                  InflectionData.$fReadManifest271
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Voice>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Voice>_R))))) -}
8a5a669af2386e102c8f50cb27f7b624
  $fReadManifest271 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Voice -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Voice
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.MIDDLE) -}
e56701c5c2bdf58ab947cdaf705bae0b
  $fReadManifest272 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "MIDDLE"#) -}
8a5a669af2386e102c8f50cb27f7b624
  $fReadManifest273 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Voice)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest275,
                  InflectionData.$fReadManifest274
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Voice>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Voice>_R))))) -}
8a5a669af2386e102c8f50cb27f7b624
  $fReadManifest274 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Voice -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Voice
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.ACTIVE) -}
85b330fbe84086bae8b134cf8ca60d2a
  $fReadManifest275 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ACTIVE"#) -}
8a5a669af2386e102c8f50cb27f7b624
  $fReadManifest276 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Voice)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest278,
                  InflectionData.$fReadManifest277
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Voice>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Voice>_R))))) -}
8a5a669af2386e102c8f50cb27f7b624
  $fReadManifest277 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Voice -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Voice
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.UVOI) -}
6e6d2474215284aa21f0943be42f1b80
  $fReadManifest278 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "UVOI"#) -}
93cd82c102580fd43663b34e6add9349
  $fReadManifest28 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PA"#) -}
e0fae4d8856142bf70a9f434f618141e
  $fReadManifest280 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Manifest [InflectionData.Evidentiality]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)>,
     Unfolding: (\ (n :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Manifest [InflectionData.Evidentiality]
                           -> Text.ParserCombinators.ReadP.P b) ->
                 let {
                   lvl129 :: Text.ParserCombinators.ReadP.P b
                   = let {
                       lvl130 :: Text.ParserCombinators.ReadP.P b
                       = eta (InflectionData.NoManifest @ [InflectionData.Evidentiality])
                     } in
                     Text.Read.Lex.expect2
                       @ b
                       (\ (a1 :: Text.Read.Lex.Lexeme) ->
                        case a1 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                          Text.Read.Lex.Ident a2
                          -> case GHC.Base.eqString
                                    a2
                                    InflectionData.$fReadManifest6 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                               GHC.Types.True -> lvl130 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ (w4 :: ()) -> lvl129) -}
                   = \ (w4 :: ()) -> lvl129
                 } in
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b
                   (Text.ParserCombinators.ReadP.Look
                      @ b
                      (\ (a :: GHC.Base.String) ->
                       (Text.ParserCombinators.ReadP.skipSpaces_skip a)
                         `cast`
                       (Text.ParserCombinators.ReadP.N:ReadP[0] <()>_R)
                         @ b
                         k))
                   (case n of wild { GHC.Types.I# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x 10#) of wild2 {
                      GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                      GHC.Types.True
                      -> let {
                           lvl130 :: Text.ParserCombinators.ReadP.P b
                           = let {
                               lvl131 :: Text.ParserCombinators.ReadP.P b
                               = GHC.Read.$wlist
                                   @ (InflectionData.LexCat, InflectionData.ManifestType,
                                      GHC.Types.Int)
                                   InflectionData.$fReadManifest5
                                     `cast`
                                   (Trans
                                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                       <(InflectionData.LexCat,
                                                         InflectionData.ManifestType,
                                                         GHC.Types.Int)>_R))
                                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                  <(InflectionData.LexCat,
                                                    InflectionData.ManifestType,
                                                    GHC.Types.Int)>_R)))
                                   @ b
                                   (\ (a1 :: [(InflectionData.LexCat, InflectionData.ManifestType,
                                               GHC.Types.Int)]) ->
                                    GHC.Read.$wlist
                                      @ InflectionData.Evidentiality
                                      InflectionData.$fReadEvidentiality2
                                        `cast`
                                      (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                <InflectionData.Evidentiality>_R))
                                      @ b
                                      (\ (a2 :: [InflectionData.Evidentiality]) ->
                                       eta
                                         (InflectionData.Manifest
                                            @ [InflectionData.Evidentiality]
                                            a1
                                            a2)))
                             } in
                             Text.Read.Lex.expect2
                               @ b
                               (\ (a1 :: Text.Read.Lex.Lexeme) ->
                                case a1 of wild1 {
                                  DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                  Text.Read.Lex.Ident a2
                                  -> case GHC.Base.eqString
                                            a2
                                            InflectionData.$fReadManifest3 of wild3 {
                                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                       GHC.Types.True -> lvl131 } })
                         } in
                         let {
                           k1 :: () -> Text.ParserCombinators.ReadP.P b
                             {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                Unfolding: InlineRule (1, True, True) (\ (w4 :: ()) -> lvl130) -}
                           = \ (w4 :: ()) -> lvl130
                         } in
                         Text.ParserCombinators.ReadP.Look
                           @ b
                           (\ (a :: GHC.Base.String) ->
                            (Text.ParserCombinators.ReadP.skipSpaces_skip a)
                              `cast`
                            (Text.ParserCombinators.ReadP.N:ReadP[0] <()>_R)
                              @ b
                              k1) } })) -}
5c107049bbb41940178ce20d4818de5c
  $fReadManifest282 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Manifest [InflectionData.Transitivity]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)>,
     Unfolding: (\ (n :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Manifest [InflectionData.Transitivity]
                           -> Text.ParserCombinators.ReadP.P b) ->
                 let {
                   lvl129 :: Text.ParserCombinators.ReadP.P b
                   = let {
                       lvl130 :: Text.ParserCombinators.ReadP.P b
                       = eta (InflectionData.NoManifest @ [InflectionData.Transitivity])
                     } in
                     Text.Read.Lex.expect2
                       @ b
                       (\ (a1 :: Text.Read.Lex.Lexeme) ->
                        case a1 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                          Text.Read.Lex.Ident a2
                          -> case GHC.Base.eqString
                                    a2
                                    InflectionData.$fReadManifest6 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                               GHC.Types.True -> lvl130 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ (w4 :: ()) -> lvl129) -}
                   = \ (w4 :: ()) -> lvl129
                 } in
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b
                   (Text.ParserCombinators.ReadP.Look
                      @ b
                      (\ (a :: GHC.Base.String) ->
                       (Text.ParserCombinators.ReadP.skipSpaces_skip a)
                         `cast`
                       (Text.ParserCombinators.ReadP.N:ReadP[0] <()>_R)
                         @ b
                         k))
                   (case n of wild { GHC.Types.I# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x 10#) of wild2 {
                      GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                      GHC.Types.True
                      -> let {
                           lvl130 :: Text.ParserCombinators.ReadP.P b
                           = let {
                               lvl131 :: Text.ParserCombinators.ReadP.P b
                               = GHC.Read.$wlist
                                   @ (InflectionData.LexCat, InflectionData.ManifestType,
                                      GHC.Types.Int)
                                   InflectionData.$fReadManifest5
                                     `cast`
                                   (Trans
                                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                       <(InflectionData.LexCat,
                                                         InflectionData.ManifestType,
                                                         GHC.Types.Int)>_R))
                                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                  <(InflectionData.LexCat,
                                                    InflectionData.ManifestType,
                                                    GHC.Types.Int)>_R)))
                                   @ b
                                   (\ (a1 :: [(InflectionData.LexCat, InflectionData.ManifestType,
                                               GHC.Types.Int)]) ->
                                    GHC.Read.$wlist
                                      @ InflectionData.Transitivity
                                      InflectionData.$fReadManifest283
                                        `cast`
                                      (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                <InflectionData.Transitivity>_R))
                                      @ b
                                      (\ (a2 :: [InflectionData.Transitivity]) ->
                                       eta
                                         (InflectionData.Manifest
                                            @ [InflectionData.Transitivity]
                                            a1
                                            a2)))
                             } in
                             Text.Read.Lex.expect2
                               @ b
                               (\ (a1 :: Text.Read.Lex.Lexeme) ->
                                case a1 of wild1 {
                                  DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                  Text.Read.Lex.Ident a2
                                  -> case GHC.Base.eqString
                                            a2
                                            InflectionData.$fReadManifest3 of wild3 {
                                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                       GHC.Types.True -> lvl131 } })
                         } in
                         let {
                           k1 :: () -> Text.ParserCombinators.ReadP.P b
                             {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                Unfolding: InlineRule (1, True, True) (\ (w4 :: ()) -> lvl130) -}
                           = \ (w4 :: ()) -> lvl130
                         } in
                         Text.ParserCombinators.ReadP.Look
                           @ b
                           (\ (a :: GHC.Base.String) ->
                            (Text.ParserCombinators.ReadP.skipSpaces_skip a)
                              `cast`
                            (Text.ParserCombinators.ReadP.N:ReadP[0] <()>_R)
                              @ b
                              k1) } })) -}
fbfbb10e2c2bf7855f3005c5f582ce67
  $fReadManifest283 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Transitivity
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Transitivity
                   InflectionData.$fReadManifest284
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <InflectionData.Transitivity>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <InflectionData.Transitivity>_R)))) -}
fbfbb10e2c2bf7855f3005c5f582ce67
  $fReadManifest284 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Transitivity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: InflectionData.Transitivity
                            -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.choose2
                   @ InflectionData.Transitivity
                   InflectionData.$fReadManifest285
                   eta
                   @ b
                   eta1) -}
fbfbb10e2c2bf7855f3005c5f582ce67
  $fReadManifest285 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Transitivity)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Transitivity)
                   InflectionData.$fReadManifest302
                   InflectionData.$fReadManifest286) -}
fbfbb10e2c2bf7855f3005c5f582ce67
  $fReadManifest286 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Transitivity)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Transitivity)
                   InflectionData.$fReadManifest299
                   InflectionData.$fReadManifest287) -}
fbfbb10e2c2bf7855f3005c5f582ce67
  $fReadManifest287 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Transitivity)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Transitivity)
                   InflectionData.$fReadManifest296
                   InflectionData.$fReadManifest288) -}
fbfbb10e2c2bf7855f3005c5f582ce67
  $fReadManifest288 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Transitivity)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Transitivity)
                   InflectionData.$fReadManifest293
                   InflectionData.$fReadManifest289) -}
fbfbb10e2c2bf7855f3005c5f582ce67
  $fReadManifest289 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Transitivity)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Transitivity)
                   InflectionData.$fReadManifest290
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           InflectionData.Transitivity))) -}
819df3b7803a0b6e1c638b12031d1054
  $fReadManifest29 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest31,
                  InflectionData.$fReadManifest30
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Number>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Number>_R))))) -}
fbfbb10e2c2bf7855f3005c5f582ce67
  $fReadManifest290 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Transitivity)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest292,
                  InflectionData.$fReadManifest291
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Transitivity>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Transitivity>_R))))) -}
fbfbb10e2c2bf7855f3005c5f582ce67
  $fReadManifest291 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Transitivity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Transitivity
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.DITRANS) -}
93c873bb8051e437ba21d87b15f2fd2a
  $fReadManifest292 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DITRANS"#) -}
fbfbb10e2c2bf7855f3005c5f582ce67
  $fReadManifest293 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Transitivity)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest295,
                  InflectionData.$fReadManifest294
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Transitivity>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Transitivity>_R))))) -}
fbfbb10e2c2bf7855f3005c5f582ce67
  $fReadManifest294 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Transitivity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Transitivity
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.MTRANS) -}
caec4c91e67221a332d51954e51c76dc
  $fReadManifest295 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "MTRANS"#) -}
fbfbb10e2c2bf7855f3005c5f582ce67
  $fReadManifest296 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Transitivity)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest298,
                  InflectionData.$fReadManifest297
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Transitivity>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Transitivity>_R))))) -}
fbfbb10e2c2bf7855f3005c5f582ce67
  $fReadManifest297 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Transitivity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Transitivity
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.TRANS) -}
f805fdff2f60e0eccb23ceac49a9f6e0
  $fReadManifest298 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TRANS"#) -}
fbfbb10e2c2bf7855f3005c5f582ce67
  $fReadManifest299 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Transitivity)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest301,
                  InflectionData.$fReadManifest300
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Transitivity>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Transitivity>_R))))) -}
49be5cfa3412a10797a7629dfb469403
  $fReadManifest3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Manifest"#) -}
819df3b7803a0b6e1c638b12031d1054
  $fReadManifest30 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Number -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Number
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.TRI) -}
fbfbb10e2c2bf7855f3005c5f582ce67
  $fReadManifest300 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Transitivity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Transitivity
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.NTRANS) -}
8b2f842b7b27f7ef7a6a2442f671694a
  $fReadManifest301 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NTRANS"#) -}
fbfbb10e2c2bf7855f3005c5f582ce67
  $fReadManifest302 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Transitivity)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest304,
                  InflectionData.$fReadManifest303
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Transitivity>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Transitivity>_R))))) -}
fbfbb10e2c2bf7855f3005c5f582ce67
  $fReadManifest303 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Transitivity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Transitivity
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.UTRA) -}
84ce449346f8fbf6ff6f07465eb15904
  $fReadManifest304 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "UTRA"#) -}
4e83a85e3fd10f8a17b70ca71a492b9c
  $fReadManifest306 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Manifest [InflectionData.Volition]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)>,
     Unfolding: (\ (n :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Manifest [InflectionData.Volition]
                           -> Text.ParserCombinators.ReadP.P b) ->
                 let {
                   lvl129 :: Text.ParserCombinators.ReadP.P b
                   = let {
                       lvl130 :: Text.ParserCombinators.ReadP.P b
                       = eta (InflectionData.NoManifest @ [InflectionData.Volition])
                     } in
                     Text.Read.Lex.expect2
                       @ b
                       (\ (a1 :: Text.Read.Lex.Lexeme) ->
                        case a1 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                          Text.Read.Lex.Ident a2
                          -> case GHC.Base.eqString
                                    a2
                                    InflectionData.$fReadManifest6 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                               GHC.Types.True -> lvl130 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ (w4 :: ()) -> lvl129) -}
                   = \ (w4 :: ()) -> lvl129
                 } in
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b
                   (Text.ParserCombinators.ReadP.Look
                      @ b
                      (\ (a :: GHC.Base.String) ->
                       (Text.ParserCombinators.ReadP.skipSpaces_skip a)
                         `cast`
                       (Text.ParserCombinators.ReadP.N:ReadP[0] <()>_R)
                         @ b
                         k))
                   (case n of wild { GHC.Types.I# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x 10#) of wild2 {
                      GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                      GHC.Types.True
                      -> let {
                           lvl130 :: Text.ParserCombinators.ReadP.P b
                           = let {
                               lvl131 :: Text.ParserCombinators.ReadP.P b
                               = GHC.Read.$wlist
                                   @ (InflectionData.LexCat, InflectionData.ManifestType,
                                      GHC.Types.Int)
                                   InflectionData.$fReadManifest5
                                     `cast`
                                   (Trans
                                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                       <(InflectionData.LexCat,
                                                         InflectionData.ManifestType,
                                                         GHC.Types.Int)>_R))
                                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                  <(InflectionData.LexCat,
                                                    InflectionData.ManifestType,
                                                    GHC.Types.Int)>_R)))
                                   @ b
                                   (\ (a1 :: [(InflectionData.LexCat, InflectionData.ManifestType,
                                               GHC.Types.Int)]) ->
                                    GHC.Read.$wlist
                                      @ InflectionData.Volition
                                      InflectionData.$fReadManifest307
                                        `cast`
                                      (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                <InflectionData.Volition>_R))
                                      @ b
                                      (\ (a2 :: [InflectionData.Volition]) ->
                                       eta
                                         (InflectionData.Manifest
                                            @ [InflectionData.Volition]
                                            a1
                                            a2)))
                             } in
                             Text.Read.Lex.expect2
                               @ b
                               (\ (a1 :: Text.Read.Lex.Lexeme) ->
                                case a1 of wild1 {
                                  DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                  Text.Read.Lex.Ident a2
                                  -> case GHC.Base.eqString
                                            a2
                                            InflectionData.$fReadManifest3 of wild3 {
                                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                       GHC.Types.True -> lvl131 } })
                         } in
                         let {
                           k1 :: () -> Text.ParserCombinators.ReadP.P b
                             {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                Unfolding: InlineRule (1, True, True) (\ (w4 :: ()) -> lvl130) -}
                           = \ (w4 :: ()) -> lvl130
                         } in
                         Text.ParserCombinators.ReadP.Look
                           @ b
                           (\ (a :: GHC.Base.String) ->
                            (Text.ParserCombinators.ReadP.skipSpaces_skip a)
                              `cast`
                            (Text.ParserCombinators.ReadP.N:ReadP[0] <()>_R)
                              @ b
                              k1) } })) -}
3559279b2cc9168c42f1489c451a8e43
  $fReadManifest307 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Volition
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Volition
                   InflectionData.$fReadManifest308
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <InflectionData.Volition>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <InflectionData.Volition>_R)))) -}
3559279b2cc9168c42f1489c451a8e43
  $fReadManifest308 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Volition -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: InflectionData.Volition
                            -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.choose2
                   @ InflectionData.Volition
                   InflectionData.$fReadManifest309
                   eta
                   @ b
                   eta1) -}
3559279b2cc9168c42f1489c451a8e43
  $fReadManifest309 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Volition)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Volition)
                   InflectionData.$fReadManifest318
                   InflectionData.$fReadManifest310) -}
04d5967b6b5038d95bb5ff5c62e043f1
  $fReadManifest31 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TRI"#) -}
3559279b2cc9168c42f1489c451a8e43
  $fReadManifest310 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Volition)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Volition)
                   InflectionData.$fReadManifest315
                   InflectionData.$fReadManifest311) -}
3559279b2cc9168c42f1489c451a8e43
  $fReadManifest311 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Volition)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Volition)
                   InflectionData.$fReadManifest312
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           InflectionData.Volition))) -}
3559279b2cc9168c42f1489c451a8e43
  $fReadManifest312 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Volition)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest314,
                  InflectionData.$fReadManifest313
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Volition>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Volition>_R))))) -}
3559279b2cc9168c42f1489c451a8e43
  $fReadManifest313 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Volition -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Volition
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.NVOL) -}
7cb7fd92e4d3e8c53b5d2c9be6fc5727
  $fReadManifest314 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NVOL"#) -}
3559279b2cc9168c42f1489c451a8e43
  $fReadManifest315 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Volition)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest317,
                  InflectionData.$fReadManifest316
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Volition>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Volition>_R))))) -}
3559279b2cc9168c42f1489c451a8e43
  $fReadManifest316 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Volition -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Volition
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.VOL) -}
6f6d47f4abcb103e1e0151d2424853d1
  $fReadManifest317 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "VOL"#) -}
3559279b2cc9168c42f1489c451a8e43
  $fReadManifest318 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Volition)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest320,
                  InflectionData.$fReadManifest319
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Volition>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Volition>_R))))) -}
3559279b2cc9168c42f1489c451a8e43
  $fReadManifest319 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Volition -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Volition
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.UVOL) -}
819df3b7803a0b6e1c638b12031d1054
  $fReadManifest32 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest34,
                  InflectionData.$fReadManifest33
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Number>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Number>_R))))) -}
08c90dc1e6de91805ce59b463add6910
  $fReadManifest320 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "UVOL"#) -}
819df3b7803a0b6e1c638b12031d1054
  $fReadManifest33 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Number -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Number
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.DU) -}
6385cb6e6bd6dafcc034361ca3ec7d0a
  $fReadManifest34 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DU"#) -}
819df3b7803a0b6e1c638b12031d1054
  $fReadManifest35 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest37,
                  InflectionData.$fReadManifest36
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Number>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Number>_R))))) -}
819df3b7803a0b6e1c638b12031d1054
  $fReadManifest36 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Number -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Number
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.SG) -}
d27c04fe7305b54c098e2c2b7f726334
  $fReadManifest37 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SG"#) -}
819df3b7803a0b6e1c638b12031d1054
  $fReadManifest38 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest40,
                  InflectionData.$fReadManifest39
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Number>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Number>_R))))) -}
819df3b7803a0b6e1c638b12031d1054
  $fReadManifest39 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Number -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Number
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.UNUM) -}
bc6da22a3107917be06673d7042530e9
  $fReadManifest4 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 11#) -}
042ed7d193badcdb5689a081692438cc
  $fReadManifest40 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "UNUM"#) -}
8c5869c1bc29f769b028d42bdf7aaf17
  $fReadManifest42 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Manifest [InflectionData.Definiteness]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)>,
     Unfolding: (\ (n :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Manifest [InflectionData.Definiteness]
                           -> Text.ParserCombinators.ReadP.P b) ->
                 let {
                   lvl129 :: Text.ParserCombinators.ReadP.P b
                   = let {
                       lvl130 :: Text.ParserCombinators.ReadP.P b
                       = eta (InflectionData.NoManifest @ [InflectionData.Definiteness])
                     } in
                     Text.Read.Lex.expect2
                       @ b
                       (\ (a1 :: Text.Read.Lex.Lexeme) ->
                        case a1 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                          Text.Read.Lex.Ident a2
                          -> case GHC.Base.eqString
                                    a2
                                    InflectionData.$fReadManifest6 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                               GHC.Types.True -> lvl130 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ (w4 :: ()) -> lvl129) -}
                   = \ (w4 :: ()) -> lvl129
                 } in
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b
                   (Text.ParserCombinators.ReadP.Look
                      @ b
                      (\ (a :: GHC.Base.String) ->
                       (Text.ParserCombinators.ReadP.skipSpaces_skip a)
                         `cast`
                       (Text.ParserCombinators.ReadP.N:ReadP[0] <()>_R)
                         @ b
                         k))
                   (case n of wild { GHC.Types.I# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x 10#) of wild2 {
                      GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                      GHC.Types.True
                      -> let {
                           lvl130 :: Text.ParserCombinators.ReadP.P b
                           = let {
                               lvl131 :: Text.ParserCombinators.ReadP.P b
                               = GHC.Read.$wlist
                                   @ (InflectionData.LexCat, InflectionData.ManifestType,
                                      GHC.Types.Int)
                                   InflectionData.$fReadManifest5
                                     `cast`
                                   (Trans
                                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                       <(InflectionData.LexCat,
                                                         InflectionData.ManifestType,
                                                         GHC.Types.Int)>_R))
                                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                  <(InflectionData.LexCat,
                                                    InflectionData.ManifestType,
                                                    GHC.Types.Int)>_R)))
                                   @ b
                                   (\ (a1 :: [(InflectionData.LexCat, InflectionData.ManifestType,
                                               GHC.Types.Int)]) ->
                                    GHC.Read.$wlist
                                      @ InflectionData.Definiteness
                                      InflectionData.$fReadDefiniteness2
                                        `cast`
                                      (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                <InflectionData.Definiteness>_R))
                                      @ b
                                      (\ (a2 :: [InflectionData.Definiteness]) ->
                                       eta
                                         (InflectionData.Manifest
                                            @ [InflectionData.Definiteness]
                                            a1
                                            a2)))
                             } in
                             Text.Read.Lex.expect2
                               @ b
                               (\ (a1 :: Text.Read.Lex.Lexeme) ->
                                case a1 of wild1 {
                                  DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                  Text.Read.Lex.Ident a2
                                  -> case GHC.Base.eqString
                                            a2
                                            InflectionData.$fReadManifest3 of wild3 {
                                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                       GHC.Types.True -> lvl131 } })
                         } in
                         let {
                           k1 :: () -> Text.ParserCombinators.ReadP.P b
                             {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                Unfolding: InlineRule (1, True, True) (\ (w4 :: ()) -> lvl130) -}
                           = \ (w4 :: ()) -> lvl130
                         } in
                         Text.ParserCombinators.ReadP.Look
                           @ b
                           (\ (a :: GHC.Base.String) ->
                            (Text.ParserCombinators.ReadP.skipSpaces_skip a)
                              `cast`
                            (Text.ParserCombinators.ReadP.N:ReadP[0] <()>_R)
                              @ b
                              k1) } })) -}
2355be9882039243418edc9533562df8
  $fReadManifest44 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Manifest [InflectionData.Specificity]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)>,
     Unfolding: (\ (n :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Manifest [InflectionData.Specificity]
                           -> Text.ParserCombinators.ReadP.P b) ->
                 let {
                   lvl129 :: Text.ParserCombinators.ReadP.P b
                   = let {
                       lvl130 :: Text.ParserCombinators.ReadP.P b
                       = eta (InflectionData.NoManifest @ [InflectionData.Specificity])
                     } in
                     Text.Read.Lex.expect2
                       @ b
                       (\ (a1 :: Text.Read.Lex.Lexeme) ->
                        case a1 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                          Text.Read.Lex.Ident a2
                          -> case GHC.Base.eqString
                                    a2
                                    InflectionData.$fReadManifest6 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                               GHC.Types.True -> lvl130 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ (w4 :: ()) -> lvl129) -}
                   = \ (w4 :: ()) -> lvl129
                 } in
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b
                   (Text.ParserCombinators.ReadP.Look
                      @ b
                      (\ (a :: GHC.Base.String) ->
                       (Text.ParserCombinators.ReadP.skipSpaces_skip a)
                         `cast`
                       (Text.ParserCombinators.ReadP.N:ReadP[0] <()>_R)
                         @ b
                         k))
                   (case n of wild { GHC.Types.I# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x 10#) of wild2 {
                      GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                      GHC.Types.True
                      -> let {
                           lvl130 :: Text.ParserCombinators.ReadP.P b
                           = let {
                               lvl131 :: Text.ParserCombinators.ReadP.P b
                               = GHC.Read.$wlist
                                   @ (InflectionData.LexCat, InflectionData.ManifestType,
                                      GHC.Types.Int)
                                   InflectionData.$fReadManifest5
                                     `cast`
                                   (Trans
                                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                       <(InflectionData.LexCat,
                                                         InflectionData.ManifestType,
                                                         GHC.Types.Int)>_R))
                                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                  <(InflectionData.LexCat,
                                                    InflectionData.ManifestType,
                                                    GHC.Types.Int)>_R)))
                                   @ b
                                   (\ (a1 :: [(InflectionData.LexCat, InflectionData.ManifestType,
                                               GHC.Types.Int)]) ->
                                    GHC.Read.$wlist
                                      @ InflectionData.Specificity
                                      InflectionData.$fReadManifest45
                                        `cast`
                                      (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                <InflectionData.Specificity>_R))
                                      @ b
                                      (\ (a2 :: [InflectionData.Specificity]) ->
                                       eta
                                         (InflectionData.Manifest
                                            @ [InflectionData.Specificity]
                                            a1
                                            a2)))
                             } in
                             Text.Read.Lex.expect2
                               @ b
                               (\ (a1 :: Text.Read.Lex.Lexeme) ->
                                case a1 of wild1 {
                                  DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                  Text.Read.Lex.Ident a2
                                  -> case GHC.Base.eqString
                                            a2
                                            InflectionData.$fReadManifest3 of wild3 {
                                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                       GHC.Types.True -> lvl131 } })
                         } in
                         let {
                           k1 :: () -> Text.ParserCombinators.ReadP.P b
                             {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                Unfolding: InlineRule (1, True, True) (\ (w4 :: ()) -> lvl130) -}
                           = \ (w4 :: ()) -> lvl130
                         } in
                         Text.ParserCombinators.ReadP.Look
                           @ b
                           (\ (a :: GHC.Base.String) ->
                            (Text.ParserCombinators.ReadP.skipSpaces_skip a)
                              `cast`
                            (Text.ParserCombinators.ReadP.N:ReadP[0] <()>_R)
                              @ b
                              k1) } })) -}
6fb3d15dec5a1fd023a4704d57cac2a0
  $fReadManifest45 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Specificity
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Specificity
                   InflectionData.$fReadManifest46
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <InflectionData.Specificity>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <InflectionData.Specificity>_R)))) -}
6fb3d15dec5a1fd023a4704d57cac2a0
  $fReadManifest46 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Specificity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: InflectionData.Specificity
                            -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.choose2
                   @ InflectionData.Specificity
                   InflectionData.$fReadManifest47
                   eta
                   @ b
                   eta1) -}
6fb3d15dec5a1fd023a4704d57cac2a0
  $fReadManifest47 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Specificity)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Specificity)
                   InflectionData.$fReadManifest56
                   InflectionData.$fReadManifest48) -}
6fb3d15dec5a1fd023a4704d57cac2a0
  $fReadManifest48 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Specificity)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Specificity)
                   InflectionData.$fReadManifest53
                   InflectionData.$fReadManifest49) -}
6fb3d15dec5a1fd023a4704d57cac2a0
  $fReadManifest49 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.Specificity)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.Specificity)
                   InflectionData.$fReadManifest50
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           InflectionData.Specificity))) -}
1614b146d0b9ba2428fb179509889a1f
  $fReadManifest5 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b1.
       ((InflectionData.LexCat, InflectionData.ManifestType,
         GHC.Types.Int)
        -> Text.ParserCombinators.ReadP.P b1)
       -> Text.ParserCombinators.ReadP.P b1
  {- Arity: 2,
     Unfolding: (\ (w3 :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b1
                   (w4 :: (InflectionData.LexCat, InflectionData.ManifestType,
                           GHC.Types.Int)
                          -> Text.ParserCombinators.ReadP.P b1)[OneShot] ->
                 GHC.Read.$w$creadPrec1
                   @ InflectionData.LexCat
                   @ InflectionData.ManifestType
                   @ GHC.Types.Int
                   InflectionData.$fReadLexCat
                   InflectionData.$fReadManifestType
                   GHC.Read.$fReadInt
                   @ b1
                   w4) -}
6fb3d15dec5a1fd023a4704d57cac2a0
  $fReadManifest50 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Specificity)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest52,
                  InflectionData.$fReadManifest51
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Specificity>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Specificity>_R))))) -}
6fb3d15dec5a1fd023a4704d57cac2a0
  $fReadManifest51 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Specificity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Specificity
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.NSPEC) -}
dab1f3c8f894d28e6fecd3447935828f
  $fReadManifest52 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NSPEC"#) -}
6fb3d15dec5a1fd023a4704d57cac2a0
  $fReadManifest53 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Specificity)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest55,
                  InflectionData.$fReadManifest54
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Specificity>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Specificity>_R))))) -}
6fb3d15dec5a1fd023a4704d57cac2a0
  $fReadManifest54 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Specificity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Specificity
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.SPEC) -}
7f31b9caf1e06ff10bd44fe46a93df30
  $fReadManifest55 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SPEC"#) -}
6fb3d15dec5a1fd023a4704d57cac2a0
  $fReadManifest56 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.Specificity)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest58,
                  InflectionData.$fReadManifest57
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Specificity>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Specificity>_R))))) -}
6fb3d15dec5a1fd023a4704d57cac2a0
  $fReadManifest57 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Specificity -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Specificity
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.USPE) -}
cec0ac580c81d702cb241847be0ae9ac
  $fReadManifest58 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "USPE"#) -}
47e9478767465d22e85f6881f2351622
  $fReadManifest6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NoManifest"#) -}
4e42538c8e8fc1e536fc7c48f5db41c9
  $fReadManifest60 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Manifest [InflectionData.Topic]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)>,
     Unfolding: (\ (n :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Manifest [InflectionData.Topic]
                           -> Text.ParserCombinators.ReadP.P b) ->
                 let {
                   lvl129 :: Text.ParserCombinators.ReadP.P b
                   = let {
                       lvl130 :: Text.ParserCombinators.ReadP.P b
                       = eta (InflectionData.NoManifest @ [InflectionData.Topic])
                     } in
                     Text.Read.Lex.expect2
                       @ b
                       (\ (a1 :: Text.Read.Lex.Lexeme) ->
                        case a1 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                          Text.Read.Lex.Ident a2
                          -> case GHC.Base.eqString
                                    a2
                                    InflectionData.$fReadManifest6 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                               GHC.Types.True -> lvl130 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ (w4 :: ()) -> lvl129) -}
                   = \ (w4 :: ()) -> lvl129
                 } in
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b
                   (Text.ParserCombinators.ReadP.Look
                      @ b
                      (\ (a :: GHC.Base.String) ->
                       (Text.ParserCombinators.ReadP.skipSpaces_skip a)
                         `cast`
                       (Text.ParserCombinators.ReadP.N:ReadP[0] <()>_R)
                         @ b
                         k))
                   (case n of wild { GHC.Types.I# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x 10#) of wild2 {
                      GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                      GHC.Types.True
                      -> let {
                           lvl130 :: Text.ParserCombinators.ReadP.P b
                           = let {
                               lvl131 :: Text.ParserCombinators.ReadP.P b
                               = GHC.Read.$wlist
                                   @ (InflectionData.LexCat, InflectionData.ManifestType,
                                      GHC.Types.Int)
                                   InflectionData.$fReadManifest5
                                     `cast`
                                   (Trans
                                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                       <(InflectionData.LexCat,
                                                         InflectionData.ManifestType,
                                                         GHC.Types.Int)>_R))
                                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                  <(InflectionData.LexCat,
                                                    InflectionData.ManifestType,
                                                    GHC.Types.Int)>_R)))
                                   @ b
                                   (\ (a1 :: [(InflectionData.LexCat, InflectionData.ManifestType,
                                               GHC.Types.Int)]) ->
                                    GHC.Read.$wlist
                                      @ InflectionData.Topic
                                      InflectionData.$fReadManifest61
                                        `cast`
                                      (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                <InflectionData.Topic>_R))
                                      @ b
                                      (\ (a2 :: [InflectionData.Topic]) ->
                                       eta
                                         (InflectionData.Manifest @ [InflectionData.Topic] a1 a2)))
                             } in
                             Text.Read.Lex.expect2
                               @ b
                               (\ (a1 :: Text.Read.Lex.Lexeme) ->
                                case a1 of wild1 {
                                  DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                  Text.Read.Lex.Ident a2
                                  -> case GHC.Base.eqString
                                            a2
                                            InflectionData.$fReadManifest3 of wild3 {
                                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                       GHC.Types.True -> lvl131 } })
                         } in
                         let {
                           k1 :: () -> Text.ParserCombinators.ReadP.P b
                             {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                Unfolding: InlineRule (1, True, True) (\ (w4 :: ()) -> lvl130) -}
                           = \ (w4 :: ()) -> lvl130
                         } in
                         Text.ParserCombinators.ReadP.Look
                           @ b
                           (\ (a :: GHC.Base.String) ->
                            (Text.ParserCombinators.ReadP.skipSpaces_skip a)
                              `cast`
                            (Text.ParserCombinators.ReadP.N:ReadP[0] <()>_R)
                              @ b
                              k1) } })) -}
d8981f1670fc020ebc5d708b5dd733da
  $fReadManifest61 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Topic
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Topic
                   InflectionData.$fReadManifest62
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <InflectionData.Topic>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <InflectionData.Topic>_R)))) -}
d8981f1670fc020ebc5d708b5dd733da
  $fReadManifest62 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Topic -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: InflectionData.Topic
                            -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.choose2
                   @ InflectionData.Topic
                   InflectionData.$fReadManifest63
                   eta
                   @ b
                   eta1) -}
d8981f1670fc020ebc5d708b5dd733da
  $fReadManifest63 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Topic)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Topic)
                   InflectionData.$fReadManifest72
                   InflectionData.$fReadManifest64) -}
d8981f1670fc020ebc5d708b5dd733da
  $fReadManifest64 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Topic)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Topic)
                   InflectionData.$fReadManifest69
                   InflectionData.$fReadManifest65) -}
d8981f1670fc020ebc5d708b5dd733da
  $fReadManifest65 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Topic)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Topic)
                   InflectionData.$fReadManifest66
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Topic))) -}
d8981f1670fc020ebc5d708b5dd733da
  $fReadManifest66 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Topic)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest68,
                  InflectionData.$fReadManifest67
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Topic>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Topic>_R))))) -}
d8981f1670fc020ebc5d708b5dd733da
  $fReadManifest67 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Topic -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Topic
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.NTOP) -}
eb5b32efabefff0902b76f43670c226b
  $fReadManifest68 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NTOP"#) -}
d8981f1670fc020ebc5d708b5dd733da
  $fReadManifest69 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Topic)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest71,
                  InflectionData.$fReadManifest70
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Topic>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Topic>_R))))) -}
d8981f1670fc020ebc5d708b5dd733da
  $fReadManifest70 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Topic -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Topic
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.TOP) -}
fd32df344fe5f099c2a3f92f72babbd0
  $fReadManifest71 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TOP"#) -}
d8981f1670fc020ebc5d708b5dd733da
  $fReadManifest72 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Topic)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest74,
                  InflectionData.$fReadManifest73
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Topic>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Topic>_R))))) -}
d8981f1670fc020ebc5d708b5dd733da
  $fReadManifest73 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Topic -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Topic
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.UTOP) -}
4504535e1ede2cf5b4b712c8b659147b
  $fReadManifest74 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "UTOP"#) -}
2c7030d0a13af15508bdb865119fbc8a
  $fReadManifest76 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Manifest [InflectionData.Person]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)>,
     Unfolding: (\ (n :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Manifest [InflectionData.Person]
                           -> Text.ParserCombinators.ReadP.P b) ->
                 let {
                   lvl129 :: Text.ParserCombinators.ReadP.P b
                   = let {
                       lvl130 :: Text.ParserCombinators.ReadP.P b
                       = eta (InflectionData.NoManifest @ [InflectionData.Person])
                     } in
                     Text.Read.Lex.expect2
                       @ b
                       (\ (a1 :: Text.Read.Lex.Lexeme) ->
                        case a1 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                          Text.Read.Lex.Ident a2
                          -> case GHC.Base.eqString
                                    a2
                                    InflectionData.$fReadManifest6 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                               GHC.Types.True -> lvl130 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ (w4 :: ()) -> lvl129) -}
                   = \ (w4 :: ()) -> lvl129
                 } in
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b
                   (Text.ParserCombinators.ReadP.Look
                      @ b
                      (\ (a :: GHC.Base.String) ->
                       (Text.ParserCombinators.ReadP.skipSpaces_skip a)
                         `cast`
                       (Text.ParserCombinators.ReadP.N:ReadP[0] <()>_R)
                         @ b
                         k))
                   (case n of wild { GHC.Types.I# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x 10#) of wild2 {
                      GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                      GHC.Types.True
                      -> let {
                           lvl130 :: Text.ParserCombinators.ReadP.P b
                           = let {
                               lvl131 :: Text.ParserCombinators.ReadP.P b
                               = GHC.Read.$wlist
                                   @ (InflectionData.LexCat, InflectionData.ManifestType,
                                      GHC.Types.Int)
                                   InflectionData.$fReadManifest5
                                     `cast`
                                   (Trans
                                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                       <(InflectionData.LexCat,
                                                         InflectionData.ManifestType,
                                                         GHC.Types.Int)>_R))
                                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                  <(InflectionData.LexCat,
                                                    InflectionData.ManifestType,
                                                    GHC.Types.Int)>_R)))
                                   @ b
                                   (\ (a1 :: [(InflectionData.LexCat, InflectionData.ManifestType,
                                               GHC.Types.Int)]) ->
                                    GHC.Read.$wlist
                                      @ InflectionData.Person
                                      InflectionData.$fReadManifest77
                                        `cast`
                                      (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                <InflectionData.Person>_R))
                                      @ b
                                      (\ (a2 :: [InflectionData.Person]) ->
                                       eta
                                         (InflectionData.Manifest @ [InflectionData.Person] a1 a2)))
                             } in
                             Text.Read.Lex.expect2
                               @ b
                               (\ (a1 :: Text.Read.Lex.Lexeme) ->
                                case a1 of wild1 {
                                  DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                  Text.Read.Lex.Ident a2
                                  -> case GHC.Base.eqString
                                            a2
                                            InflectionData.$fReadManifest3 of wild3 {
                                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                       GHC.Types.True -> lvl131 } })
                         } in
                         let {
                           k1 :: () -> Text.ParserCombinators.ReadP.P b
                             {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                Unfolding: InlineRule (1, True, True) (\ (w4 :: ()) -> lvl130) -}
                           = \ (w4 :: ()) -> lvl130
                         } in
                         Text.ParserCombinators.ReadP.Look
                           @ b
                           (\ (a :: GHC.Base.String) ->
                            (Text.ParserCombinators.ReadP.skipSpaces_skip a)
                              `cast`
                            (Text.ParserCombinators.ReadP.N:ReadP[0] <()>_R)
                              @ b
                              k1) } })) -}
9a6bbd54f38dfeb1bf3b7d7991f3da1c
  $fReadManifest77 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.Person
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.Person
                   InflectionData.$fReadManifest78
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <InflectionData.Person>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <InflectionData.Person>_R)))) -}
9a6bbd54f38dfeb1bf3b7d7991f3da1c
  $fReadManifest78 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Person -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: InflectionData.Person
                            -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.choose2
                   @ InflectionData.Person
                   InflectionData.$fReadManifest79
                   eta
                   @ b
                   eta1) -}
9a6bbd54f38dfeb1bf3b7d7991f3da1c
  $fReadManifest79 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)
                   InflectionData.$fReadManifest108
                   InflectionData.$fReadManifest80) -}
5c0ad5a989d90c64d87f1cc034e7126b
  $fReadManifest8 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Manifest [InflectionData.Gender]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)>,
     Unfolding: (\ (n :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Manifest [InflectionData.Gender]
                           -> Text.ParserCombinators.ReadP.P b) ->
                 let {
                   lvl129 :: Text.ParserCombinators.ReadP.P b
                   = let {
                       lvl130 :: Text.ParserCombinators.ReadP.P b
                       = eta (InflectionData.NoManifest @ [InflectionData.Gender])
                     } in
                     Text.Read.Lex.expect2
                       @ b
                       (\ (a1 :: Text.Read.Lex.Lexeme) ->
                        case a1 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                          Text.Read.Lex.Ident a2
                          -> case GHC.Base.eqString
                                    a2
                                    InflectionData.$fReadManifest6 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                               GHC.Types.True -> lvl130 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ (w4 :: ()) -> lvl129) -}
                   = \ (w4 :: ()) -> lvl129
                 } in
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b
                   (Text.ParserCombinators.ReadP.Look
                      @ b
                      (\ (a :: GHC.Base.String) ->
                       (Text.ParserCombinators.ReadP.skipSpaces_skip a)
                         `cast`
                       (Text.ParserCombinators.ReadP.N:ReadP[0] <()>_R)
                         @ b
                         k))
                   (case n of wild { GHC.Types.I# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x 10#) of wild2 {
                      GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                      GHC.Types.True
                      -> let {
                           lvl130 :: Text.ParserCombinators.ReadP.P b
                           = let {
                               lvl131 :: Text.ParserCombinators.ReadP.P b
                               = GHC.Read.$wlist
                                   @ (InflectionData.LexCat, InflectionData.ManifestType,
                                      GHC.Types.Int)
                                   InflectionData.$fReadManifest5
                                     `cast`
                                   (Trans
                                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                       <(InflectionData.LexCat,
                                                         InflectionData.ManifestType,
                                                         GHC.Types.Int)>_R))
                                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                  <(InflectionData.LexCat,
                                                    InflectionData.ManifestType,
                                                    GHC.Types.Int)>_R)))
                                   @ b
                                   (\ (a1 :: [(InflectionData.LexCat, InflectionData.ManifestType,
                                               GHC.Types.Int)]) ->
                                    GHC.Read.$wlist
                                      @ InflectionData.Gender
                                      InflectionData.$fReadGender2
                                        `cast`
                                      (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                                <InflectionData.Gender>_R))
                                      @ b
                                      (\ (a2 :: [InflectionData.Gender]) ->
                                       eta
                                         (InflectionData.Manifest @ [InflectionData.Gender] a1 a2)))
                             } in
                             Text.Read.Lex.expect2
                               @ b
                               (\ (a1 :: Text.Read.Lex.Lexeme) ->
                                case a1 of wild1 {
                                  DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                  Text.Read.Lex.Ident a2
                                  -> case GHC.Base.eqString
                                            a2
                                            InflectionData.$fReadManifest3 of wild3 {
                                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                       GHC.Types.True -> lvl131 } })
                         } in
                         let {
                           k1 :: () -> Text.ParserCombinators.ReadP.P b
                             {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                Unfolding: InlineRule (1, True, True) (\ (w4 :: ()) -> lvl130) -}
                           = \ (w4 :: ()) -> lvl130
                         } in
                         Text.ParserCombinators.ReadP.Look
                           @ b
                           (\ (a :: GHC.Base.String) ->
                            (Text.ParserCombinators.ReadP.skipSpaces_skip a)
                              `cast`
                            (Text.ParserCombinators.ReadP.N:ReadP[0] <()>_R)
                              @ b
                              k1) } })) -}
9a6bbd54f38dfeb1bf3b7d7991f3da1c
  $fReadManifest80 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)
                   InflectionData.$fReadManifest105
                   InflectionData.$fReadManifest81) -}
9a6bbd54f38dfeb1bf3b7d7991f3da1c
  $fReadManifest81 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)
                   InflectionData.$fReadManifest102
                   InflectionData.$fReadManifest82) -}
9a6bbd54f38dfeb1bf3b7d7991f3da1c
  $fReadManifest82 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)
                   InflectionData.$fReadManifest99
                   InflectionData.$fReadManifest83) -}
9a6bbd54f38dfeb1bf3b7d7991f3da1c
  $fReadManifest83 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)
                   InflectionData.$fReadManifest96
                   InflectionData.$fReadManifest84) -}
9a6bbd54f38dfeb1bf3b7d7991f3da1c
  $fReadManifest84 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)
                   InflectionData.$fReadManifest93
                   InflectionData.$fReadManifest85) -}
9a6bbd54f38dfeb1bf3b7d7991f3da1c
  $fReadManifest85 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)
                   InflectionData.$fReadManifest90
                   InflectionData.$fReadManifest86) -}
9a6bbd54f38dfeb1bf3b7d7991f3da1c
  $fReadManifest86 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)
                   InflectionData.$fReadManifest87
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           InflectionData.Person))) -}
9a6bbd54f38dfeb1bf3b7d7991f3da1c
  $fReadManifest87 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest89,
                  InflectionData.$fReadManifest88
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Person>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Person>_R))))) -}
9a6bbd54f38dfeb1bf3b7d7991f3da1c
  $fReadManifest88 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Person -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Person
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.THRDOBV) -}
ef175203505e0852f457d21ebfd219d8
  $fReadManifest89 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "THRDOBV"#) -}
9a6bbd54f38dfeb1bf3b7d7991f3da1c
  $fReadManifest90 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest92,
                  InflectionData.$fReadManifest91
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Person>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Person>_R))))) -}
9a6bbd54f38dfeb1bf3b7d7991f3da1c
  $fReadManifest91 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Person -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Person
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.THRDPROX) -}
4ee4984d807edfc5c5c3a191226c79d6
  $fReadManifest92 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "THRDPROX"#) -}
9a6bbd54f38dfeb1bf3b7d7991f3da1c
  $fReadManifest93 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest95,
                  InflectionData.$fReadManifest94
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Person>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Person>_R))))) -}
9a6bbd54f38dfeb1bf3b7d7991f3da1c
  $fReadManifest94 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Person -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Person
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.THIRD) -}
b7ac77791e54a19cb1da73a823b12c15
  $fReadManifest95 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "THIRD"#) -}
9a6bbd54f38dfeb1bf3b7d7991f3da1c
  $fReadManifest96 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest98,
                  InflectionData.$fReadManifest97
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Person>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Person>_R))))) -}
9a6bbd54f38dfeb1bf3b7d7991f3da1c
  $fReadManifest97 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.Person -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.Person
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.SECOND) -}
d30a30cbe9a332b6f065dfb587524ea2
  $fReadManifest98 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SECOND"#) -}
9a6bbd54f38dfeb1bf3b7d7991f3da1c
  $fReadManifest99 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifest101,
                  InflectionData.$fReadManifest100
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.Person>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.Person>_R))))) -}
677e71acbe1d0c53534632b1806c94f3
  $fReadManifestType :: GHC.Read.Read InflectionData.ManifestType
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.ManifestType
                  InflectionData.$fReadManifestType_$creadsPrec
                  InflectionData.$fReadManifestType_$creadList
                  InflectionData.$fReadManifestType_$creadPrec
                  InflectionData.$fReadManifestType_$creadListPrec -}
677e71acbe1d0c53534632b1806c94f3
  $fReadManifestType1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.ManifestType] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [InflectionData.ManifestType]
                            -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.$wlist
                   @ InflectionData.ManifestType
                   InflectionData.$fReadManifestType2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <InflectionData.ManifestType>_R))
                   @ b
                   eta1) -}
677e71acbe1d0c53534632b1806c94f3
  $fReadManifestType10 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.ManifestType)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifestType12,
                  InflectionData.$fReadManifestType11
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.ManifestType>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.ManifestType>_R))))) -}
677e71acbe1d0c53534632b1806c94f3
  $fReadManifestType11 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.ManifestType -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.ManifestType
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.Prefix) -}
f49af470e1ab4c861c63e86684c86fcb
  $fReadManifestType12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Prefix"#) -}
677e71acbe1d0c53534632b1806c94f3
  $fReadManifestType13 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.ManifestType)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifestType15,
                  InflectionData.$fReadManifestType14
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.ManifestType>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.ManifestType>_R))))) -}
677e71acbe1d0c53534632b1806c94f3
  $fReadManifestType14 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.ManifestType -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.ManifestType
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.Particle) -}
287cf593590b5415ed9f43ad51778fca
  $fReadManifestType15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Particle"#) -}
677e71acbe1d0c53534632b1806c94f3
  $fReadManifestType16 ::
    Text.ParserCombinators.ReadP.P [InflectionData.ManifestType]
  {- Unfolding: (GHC.Read.$wlist
                   @ InflectionData.ManifestType
                   InflectionData.$fReadManifestType2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <InflectionData.ManifestType>_R))
                   @ [InflectionData.ManifestType]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [InflectionData.ManifestType])) -}
677e71acbe1d0c53534632b1806c94f3
  $fReadManifestType2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP InflectionData.ManifestType
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ InflectionData.ManifestType
                   InflectionData.$fReadManifestType3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <InflectionData.ManifestType>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <InflectionData.ManifestType>_R)))) -}
677e71acbe1d0c53534632b1806c94f3
  $fReadManifestType3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.ManifestType -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: InflectionData.ManifestType
                            -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.choose2
                   @ InflectionData.ManifestType
                   InflectionData.$fReadManifestType4
                   eta
                   @ b
                   eta1) -}
677e71acbe1d0c53534632b1806c94f3
  $fReadManifestType4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.ManifestType)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.ManifestType)
                   InflectionData.$fReadManifestType13
                   InflectionData.$fReadManifestType5) -}
677e71acbe1d0c53534632b1806c94f3
  $fReadManifestType5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.ManifestType)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.ManifestType)
                   InflectionData.$fReadManifestType10
                   InflectionData.$fReadManifestType6) -}
677e71acbe1d0c53534632b1806c94f3
  $fReadManifestType6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        InflectionData.ManifestType)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        InflectionData.ManifestType)
                   InflectionData.$fReadManifestType7
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           InflectionData.ManifestType))) -}
677e71acbe1d0c53534632b1806c94f3
  $fReadManifestType7 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       InflectionData.ManifestType)
  {- Strictness: m,
     Unfolding: ((InflectionData.$fReadManifestType9,
                  InflectionData.$fReadManifestType8
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <InflectionData.ManifestType>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <InflectionData.ManifestType>_R))))) -}
677e71acbe1d0c53534632b1806c94f3
  $fReadManifestType8 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (InflectionData.ManifestType -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: InflectionData.ManifestType
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta InflectionData.Suffix) -}
90f86b86d5f65eaf3af4dbcf8cbcb2df
  $fReadManifestType9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Suffix"#) -}
677e71acbe1d0c53534632b1806c94f3
  $fReadManifestType_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.ManifestType]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.ManifestType]
                   InflectionData.$fReadManifestType16) -}
677e71acbe1d0c53534632b1806c94f3
  $fReadManifestType_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [InflectionData.ManifestType]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadManifestType1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[InflectionData.ManifestType]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[InflectionData.ManifestType]>_R))) -}
677e71acbe1d0c53534632b1806c94f3
  $fReadManifestType_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      InflectionData.ManifestType
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadManifestType2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <InflectionData.ManifestType>_R)) -}
677e71acbe1d0c53534632b1806c94f3
  $fReadManifestType_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.ManifestType
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ InflectionData.ManifestType
                   ((GHC.Read.$fReadDouble10
                       @ InflectionData.ManifestType
                       InflectionData.$fReadManifestType3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <InflectionData.ManifestType>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <InflectionData.ManifestType>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0]
                         <InflectionData.ManifestType>_R)
                      @ InflectionData.ManifestType
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ InflectionData.ManifestType))) -}
a1f6ea453f44aabd626528c4893e70e2
  $fReadManifest_$creadList ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Manifest a]
  {- Arity: 1, Strictness: <L,U(A,A,U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a ($dRead :: GHC.Read.Read a) ->
                 Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Manifest a]
                   (GHC.Read.$wlist
                      @ (InflectionData.Manifest a)
                      (InflectionData.$fReadManifest2 @ a $dRead)
                        `cast`
                      (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                <InflectionData.Manifest a>_R))
                      @ [InflectionData.Manifest a]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ [InflectionData.Manifest a]))) -}
a1f6ea453f44aabd626528c4893e70e2
  $fReadManifest_$creadListPrec ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadPrec.ReadPrec
      [InflectionData.Manifest a]
  {- Arity: 3, Strictness: <L,U(A,A,U,A)><L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadManifest1
                  `cast`
                (forall (a :: <*>_N).
                 <GHC.Read.Read a>_R
                 ->_R Trans
                          (<Text.ParserCombinators.ReadPrec.Prec>_R
                           ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                         <[InflectionData.Manifest a]>_R))
                          (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                    <[InflectionData.Manifest a]>_R))) -}
a1f6ea453f44aabd626528c4893e70e2
  $fReadManifest_$creadPrec ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadPrec.ReadPrec
      (InflectionData.Manifest a)
  {- Arity: 2, Strictness: <L,1*U(A,A,1*U,A)><L,U>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadManifest2
                  `cast`
                (forall (a :: <*>_N).
                 <GHC.Read.Read a>_R
                 ->_R Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <InflectionData.Manifest a>_R)) -}
a1f6ea453f44aabd626528c4893e70e2
  $fReadManifest_$creadsPrec ::
    GHC.Read.Read a =>
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS (InflectionData.Manifest a)
  {- Arity: 2, Strictness: <L,1*U(A,A,1*U,A)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a ($dRead :: GHC.Read.Read a) (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ (InflectionData.Manifest a)
                   ((InflectionData.$fReadManifest2 @ a $dRead eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0]
                         <InflectionData.Manifest a>_R)
                      @ (InflectionData.Manifest a)
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ (InflectionData.Manifest a)))) -}
a933e005d0b61de32dcb62fc71171e9c
  $fReadMood :: GHC.Read.Read InflectionData.Mood
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Mood
                  InflectionData.$fReadMood_$creadsPrec
                  InflectionData.$fReadMood_$creadList
                  InflectionData.$fReadMood_$creadPrec
                  InflectionData.$fReadMood_$creadListPrec -}
a933e005d0b61de32dcb62fc71171e9c
  $fReadMood1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Mood] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [InflectionData.Mood]
                            -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.$wlist
                   @ InflectionData.Mood
                   InflectionData.$fReadManifest213
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <InflectionData.Mood>_R))
                   @ b
                   eta1) -}
a933e005d0b61de32dcb62fc71171e9c
  $fReadMood2 :: Text.ParserCombinators.ReadP.P [InflectionData.Mood]
  {- Unfolding: (GHC.Read.$wlist
                   @ InflectionData.Mood
                   InflectionData.$fReadManifest213
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <InflectionData.Mood>_R))
                   @ [InflectionData.Mood]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [InflectionData.Mood])) -}
a933e005d0b61de32dcb62fc71171e9c
  $fReadMood_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Mood]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Mood]
                   InflectionData.$fReadMood2) -}
a933e005d0b61de32dcb62fc71171e9c
  $fReadMood_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [InflectionData.Mood]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadMood1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[InflectionData.Mood]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[InflectionData.Mood]>_R))) -}
a933e005d0b61de32dcb62fc71171e9c
  $fReadMood_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Mood
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadManifest213
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <InflectionData.Mood>_R)) -}
a933e005d0b61de32dcb62fc71171e9c
  $fReadMood_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Mood
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ InflectionData.Mood
                   ((GHC.Read.$fReadDouble10
                       @ InflectionData.Mood
                       InflectionData.$fReadManifest214
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <InflectionData.Mood>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <InflectionData.Mood>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <InflectionData.Mood>_R)
                      @ InflectionData.Mood
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ InflectionData.Mood))) -}
819df3b7803a0b6e1c638b12031d1054
  $fReadNumber :: GHC.Read.Read InflectionData.Number
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Number
                  InflectionData.$fReadNumber_$creadsPrec
                  InflectionData.$fReadNumber_$creadList
                  InflectionData.$fReadNumber_$creadPrec
                  InflectionData.$fReadNumber_$creadListPrec -}
819df3b7803a0b6e1c638b12031d1054
  $fReadNumber1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Number] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [InflectionData.Number]
                            -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.$wlist
                   @ InflectionData.Number
                   InflectionData.$fReadManifest15
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <InflectionData.Number>_R))
                   @ b
                   eta1) -}
819df3b7803a0b6e1c638b12031d1054
  $fReadNumber2 ::
    Text.ParserCombinators.ReadP.P [InflectionData.Number]
  {- Unfolding: (GHC.Read.$wlist
                   @ InflectionData.Number
                   InflectionData.$fReadManifest15
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <InflectionData.Number>_R))
                   @ [InflectionData.Number]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [InflectionData.Number])) -}
819df3b7803a0b6e1c638b12031d1054
  $fReadNumber_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Number]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Number]
                   InflectionData.$fReadNumber2) -}
819df3b7803a0b6e1c638b12031d1054
  $fReadNumber_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [InflectionData.Number]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadNumber1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[InflectionData.Number]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[InflectionData.Number]>_R))) -}
819df3b7803a0b6e1c638b12031d1054
  $fReadNumber_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Number
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadManifest15
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <InflectionData.Number>_R)) -}
819df3b7803a0b6e1c638b12031d1054
  $fReadNumber_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Number
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ InflectionData.Number
                   ((GHC.Read.$fReadDouble10
                       @ InflectionData.Number
                       InflectionData.$fReadManifest16
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <InflectionData.Number>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <InflectionData.Number>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <InflectionData.Number>_R)
                      @ InflectionData.Number
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ InflectionData.Number))) -}
9a6bbd54f38dfeb1bf3b7d7991f3da1c
  $fReadPerson :: GHC.Read.Read InflectionData.Person
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Person
                  InflectionData.$fReadPerson_$creadsPrec
                  InflectionData.$fReadPerson_$creadList
                  InflectionData.$fReadPerson_$creadPrec
                  InflectionData.$fReadPerson_$creadListPrec -}
9a6bbd54f38dfeb1bf3b7d7991f3da1c
  $fReadPerson1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Person] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [InflectionData.Person]
                            -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.$wlist
                   @ InflectionData.Person
                   InflectionData.$fReadManifest77
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <InflectionData.Person>_R))
                   @ b
                   eta1) -}
9a6bbd54f38dfeb1bf3b7d7991f3da1c
  $fReadPerson2 ::
    Text.ParserCombinators.ReadP.P [InflectionData.Person]
  {- Unfolding: (GHC.Read.$wlist
                   @ InflectionData.Person
                   InflectionData.$fReadManifest77
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <InflectionData.Person>_R))
                   @ [InflectionData.Person]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [InflectionData.Person])) -}
9a6bbd54f38dfeb1bf3b7d7991f3da1c
  $fReadPerson_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Person]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Person]
                   InflectionData.$fReadPerson2) -}
9a6bbd54f38dfeb1bf3b7d7991f3da1c
  $fReadPerson_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [InflectionData.Person]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadPerson1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[InflectionData.Person]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[InflectionData.Person]>_R))) -}
9a6bbd54f38dfeb1bf3b7d7991f3da1c
  $fReadPerson_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Person
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadManifest77
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <InflectionData.Person>_R)) -}
9a6bbd54f38dfeb1bf3b7d7991f3da1c
  $fReadPerson_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Person
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ InflectionData.Person
                   ((GHC.Read.$fReadDouble10
                       @ InflectionData.Person
                       InflectionData.$fReadManifest78
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <InflectionData.Person>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <InflectionData.Person>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <InflectionData.Person>_R)
                      @ InflectionData.Person
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ InflectionData.Person))) -}
969cd5a99a727ddd44430477f29dd629
  $fReadPolarity :: GHC.Read.Read InflectionData.Polarity
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Polarity
                  InflectionData.$fReadPolarity_$creadsPrec
                  InflectionData.$fReadPolarity_$creadList
                  InflectionData.$fReadPolarity_$creadPrec
                  InflectionData.$fReadPolarity_$creadListPrec -}
969cd5a99a727ddd44430477f29dd629
  $fReadPolarity1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Polarity] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [InflectionData.Polarity]
                            -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.$wlist
                   @ InflectionData.Polarity
                   InflectionData.$fReadManifest115
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <InflectionData.Polarity>_R))
                   @ b
                   eta1) -}
969cd5a99a727ddd44430477f29dd629
  $fReadPolarity2 ::
    Text.ParserCombinators.ReadP.P [InflectionData.Polarity]
  {- Unfolding: (GHC.Read.$wlist
                   @ InflectionData.Polarity
                   InflectionData.$fReadManifest115
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <InflectionData.Polarity>_R))
                   @ [InflectionData.Polarity]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [InflectionData.Polarity])) -}
969cd5a99a727ddd44430477f29dd629
  $fReadPolarity_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Polarity]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Polarity]
                   InflectionData.$fReadPolarity2) -}
969cd5a99a727ddd44430477f29dd629
  $fReadPolarity_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [InflectionData.Polarity]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadPolarity1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[InflectionData.Polarity]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[InflectionData.Polarity]>_R))) -}
969cd5a99a727ddd44430477f29dd629
  $fReadPolarity_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Polarity
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadManifest115
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <InflectionData.Polarity>_R)) -}
969cd5a99a727ddd44430477f29dd629
  $fReadPolarity_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Polarity
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ InflectionData.Polarity
                   ((GHC.Read.$fReadDouble10
                       @ InflectionData.Polarity
                       InflectionData.$fReadManifest116
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <InflectionData.Polarity>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <InflectionData.Polarity>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0]
                         <InflectionData.Polarity>_R)
                      @ InflectionData.Polarity
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ InflectionData.Polarity))) -}
6fb3d15dec5a1fd023a4704d57cac2a0
  $fReadSpecificity :: GHC.Read.Read InflectionData.Specificity
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Specificity
                  InflectionData.$fReadSpecificity_$creadsPrec
                  InflectionData.$fReadSpecificity_$creadList
                  InflectionData.$fReadSpecificity_$creadPrec
                  InflectionData.$fReadSpecificity_$creadListPrec -}
6fb3d15dec5a1fd023a4704d57cac2a0
  $fReadSpecificity1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Specificity] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [InflectionData.Specificity]
                            -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.$wlist
                   @ InflectionData.Specificity
                   InflectionData.$fReadManifest45
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <InflectionData.Specificity>_R))
                   @ b
                   eta1) -}
6fb3d15dec5a1fd023a4704d57cac2a0
  $fReadSpecificity2 ::
    Text.ParserCombinators.ReadP.P [InflectionData.Specificity]
  {- Unfolding: (GHC.Read.$wlist
                   @ InflectionData.Specificity
                   InflectionData.$fReadManifest45
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <InflectionData.Specificity>_R))
                   @ [InflectionData.Specificity]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [InflectionData.Specificity])) -}
6fb3d15dec5a1fd023a4704d57cac2a0
  $fReadSpecificity_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Specificity]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Specificity]
                   InflectionData.$fReadSpecificity2) -}
6fb3d15dec5a1fd023a4704d57cac2a0
  $fReadSpecificity_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [InflectionData.Specificity]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadSpecificity1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[InflectionData.Specificity]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[InflectionData.Specificity]>_R))) -}
6fb3d15dec5a1fd023a4704d57cac2a0
  $fReadSpecificity_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Specificity
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadManifest45
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <InflectionData.Specificity>_R)) -}
6fb3d15dec5a1fd023a4704d57cac2a0
  $fReadSpecificity_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Specificity
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ InflectionData.Specificity
                   ((GHC.Read.$fReadDouble10
                       @ InflectionData.Specificity
                       InflectionData.$fReadManifest46
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <InflectionData.Specificity>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <InflectionData.Specificity>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0]
                         <InflectionData.Specificity>_R)
                      @ InflectionData.Specificity
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ InflectionData.Specificity))) -}
a794f63e2da02424ad65302f61d49d0d
  $fReadTense :: GHC.Read.Read InflectionData.Tense
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Tense
                  InflectionData.$fReadTense_$creadsPrec
                  InflectionData.$fReadTense_$creadList
                  InflectionData.$fReadTense_$creadPrec
                  InflectionData.$fReadTense_$creadListPrec -}
a794f63e2da02424ad65302f61d49d0d
  $fReadTense1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Tense] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [InflectionData.Tense]
                            -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.$wlist
                   @ InflectionData.Tense
                   InflectionData.$fReadManifest131
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <InflectionData.Tense>_R))
                   @ b
                   eta1) -}
a794f63e2da02424ad65302f61d49d0d
  $fReadTense2 ::
    Text.ParserCombinators.ReadP.P [InflectionData.Tense]
  {- Unfolding: (GHC.Read.$wlist
                   @ InflectionData.Tense
                   InflectionData.$fReadManifest131
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <InflectionData.Tense>_R))
                   @ [InflectionData.Tense]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [InflectionData.Tense])) -}
a794f63e2da02424ad65302f61d49d0d
  $fReadTense_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Tense]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Tense]
                   InflectionData.$fReadTense2) -}
a794f63e2da02424ad65302f61d49d0d
  $fReadTense_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [InflectionData.Tense]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadTense1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[InflectionData.Tense]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[InflectionData.Tense]>_R))) -}
a794f63e2da02424ad65302f61d49d0d
  $fReadTense_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Tense
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadManifest131
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <InflectionData.Tense>_R)) -}
a794f63e2da02424ad65302f61d49d0d
  $fReadTense_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Tense
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ InflectionData.Tense
                   ((GHC.Read.$fReadDouble10
                       @ InflectionData.Tense
                       InflectionData.$fReadManifest132
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <InflectionData.Tense>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <InflectionData.Tense>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <InflectionData.Tense>_R)
                      @ InflectionData.Tense
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ InflectionData.Tense))) -}
d8981f1670fc020ebc5d708b5dd733da
  $fReadTopic :: GHC.Read.Read InflectionData.Topic
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Topic
                  InflectionData.$fReadTopic_$creadsPrec
                  InflectionData.$fReadTopic_$creadList
                  InflectionData.$fReadTopic_$creadPrec
                  InflectionData.$fReadTopic_$creadListPrec -}
d8981f1670fc020ebc5d708b5dd733da
  $fReadTopic1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Topic] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [InflectionData.Topic]
                            -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.$wlist
                   @ InflectionData.Topic
                   InflectionData.$fReadManifest61
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <InflectionData.Topic>_R))
                   @ b
                   eta1) -}
d8981f1670fc020ebc5d708b5dd733da
  $fReadTopic2 ::
    Text.ParserCombinators.ReadP.P [InflectionData.Topic]
  {- Unfolding: (GHC.Read.$wlist
                   @ InflectionData.Topic
                   InflectionData.$fReadManifest61
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <InflectionData.Topic>_R))
                   @ [InflectionData.Topic]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [InflectionData.Topic])) -}
d8981f1670fc020ebc5d708b5dd733da
  $fReadTopic_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Topic]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Topic]
                   InflectionData.$fReadTopic2) -}
d8981f1670fc020ebc5d708b5dd733da
  $fReadTopic_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [InflectionData.Topic]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadTopic1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[InflectionData.Topic]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[InflectionData.Topic]>_R))) -}
d8981f1670fc020ebc5d708b5dd733da
  $fReadTopic_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Topic
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadManifest61
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <InflectionData.Topic>_R)) -}
d8981f1670fc020ebc5d708b5dd733da
  $fReadTopic_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Topic
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ InflectionData.Topic
                   ((GHC.Read.$fReadDouble10
                       @ InflectionData.Topic
                       InflectionData.$fReadManifest62
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <InflectionData.Topic>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <InflectionData.Topic>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <InflectionData.Topic>_R)
                      @ InflectionData.Topic
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ InflectionData.Topic))) -}
fbfbb10e2c2bf7855f3005c5f582ce67
  $fReadTransitivity :: GHC.Read.Read InflectionData.Transitivity
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Transitivity
                  InflectionData.$fReadTransitivity_$creadsPrec
                  InflectionData.$fReadTransitivity_$creadList
                  InflectionData.$fReadTransitivity_$creadPrec
                  InflectionData.$fReadTransitivity_$creadListPrec -}
fbfbb10e2c2bf7855f3005c5f582ce67
  $fReadTransitivity1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Transitivity] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [InflectionData.Transitivity]
                            -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.$wlist
                   @ InflectionData.Transitivity
                   InflectionData.$fReadManifest283
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <InflectionData.Transitivity>_R))
                   @ b
                   eta1) -}
fbfbb10e2c2bf7855f3005c5f582ce67
  $fReadTransitivity2 ::
    Text.ParserCombinators.ReadP.P [InflectionData.Transitivity]
  {- Unfolding: (GHC.Read.$wlist
                   @ InflectionData.Transitivity
                   InflectionData.$fReadManifest283
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <InflectionData.Transitivity>_R))
                   @ [InflectionData.Transitivity]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [InflectionData.Transitivity])) -}
fbfbb10e2c2bf7855f3005c5f582ce67
  $fReadTransitivity_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Transitivity]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Transitivity]
                   InflectionData.$fReadTransitivity2) -}
fbfbb10e2c2bf7855f3005c5f582ce67
  $fReadTransitivity_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [InflectionData.Transitivity]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadTransitivity1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[InflectionData.Transitivity]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[InflectionData.Transitivity]>_R))) -}
fbfbb10e2c2bf7855f3005c5f582ce67
  $fReadTransitivity_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      InflectionData.Transitivity
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadManifest283
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <InflectionData.Transitivity>_R)) -}
fbfbb10e2c2bf7855f3005c5f582ce67
  $fReadTransitivity_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Transitivity
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ InflectionData.Transitivity
                   ((GHC.Read.$fReadDouble10
                       @ InflectionData.Transitivity
                       InflectionData.$fReadManifest284
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <InflectionData.Transitivity>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <InflectionData.Transitivity>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0]
                         <InflectionData.Transitivity>_R)
                      @ InflectionData.Transitivity
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ InflectionData.Transitivity))) -}
8a5a669af2386e102c8f50cb27f7b624
  $fReadVoice :: GHC.Read.Read InflectionData.Voice
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Voice
                  InflectionData.$fReadVoice_$creadsPrec
                  InflectionData.$fReadVoice_$creadList
                  InflectionData.$fReadVoice_$creadPrec
                  InflectionData.$fReadVoice_$creadListPrec -}
8a5a669af2386e102c8f50cb27f7b624
  $fReadVoice1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Voice] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [InflectionData.Voice]
                            -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.$wlist
                   @ InflectionData.Voice
                   InflectionData.$fReadManifest261
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <InflectionData.Voice>_R))
                   @ b
                   eta1) -}
8a5a669af2386e102c8f50cb27f7b624
  $fReadVoice2 ::
    Text.ParserCombinators.ReadP.P [InflectionData.Voice]
  {- Unfolding: (GHC.Read.$wlist
                   @ InflectionData.Voice
                   InflectionData.$fReadManifest261
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <InflectionData.Voice>_R))
                   @ [InflectionData.Voice]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [InflectionData.Voice])) -}
8a5a669af2386e102c8f50cb27f7b624
  $fReadVoice_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Voice]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Voice]
                   InflectionData.$fReadVoice2) -}
8a5a669af2386e102c8f50cb27f7b624
  $fReadVoice_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [InflectionData.Voice]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadVoice1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[InflectionData.Voice]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[InflectionData.Voice]>_R))) -}
8a5a669af2386e102c8f50cb27f7b624
  $fReadVoice_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Voice
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadManifest261
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <InflectionData.Voice>_R)) -}
8a5a669af2386e102c8f50cb27f7b624
  $fReadVoice_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Voice
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ InflectionData.Voice
                   ((GHC.Read.$fReadDouble10
                       @ InflectionData.Voice
                       InflectionData.$fReadManifest262
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <InflectionData.Voice>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <InflectionData.Voice>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <InflectionData.Voice>_R)
                      @ InflectionData.Voice
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ InflectionData.Voice))) -}
3559279b2cc9168c42f1489c451a8e43
  $fReadVolition :: GHC.Read.Read InflectionData.Volition
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Volition
                  InflectionData.$fReadVolition_$creadsPrec
                  InflectionData.$fReadVolition_$creadList
                  InflectionData.$fReadVolition_$creadPrec
                  InflectionData.$fReadVolition_$creadListPrec -}
3559279b2cc9168c42f1489c451a8e43
  $fReadVolition1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([InflectionData.Volition] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [InflectionData.Volition]
                            -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.$wlist
                   @ InflectionData.Volition
                   InflectionData.$fReadManifest307
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <InflectionData.Volition>_R))
                   @ b
                   eta1) -}
3559279b2cc9168c42f1489c451a8e43
  $fReadVolition2 ::
    Text.ParserCombinators.ReadP.P [InflectionData.Volition]
  {- Unfolding: (GHC.Read.$wlist
                   @ InflectionData.Volition
                   InflectionData.$fReadManifest307
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <InflectionData.Volition>_R))
                   @ [InflectionData.Volition]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [InflectionData.Volition])) -}
3559279b2cc9168c42f1489c451a8e43
  $fReadVolition_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [InflectionData.Volition]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [InflectionData.Volition]
                   InflectionData.$fReadVolition2) -}
3559279b2cc9168c42f1489c451a8e43
  $fReadVolition_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [InflectionData.Volition]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadVolition1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[InflectionData.Volition]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[InflectionData.Volition]>_R))) -}
3559279b2cc9168c42f1489c451a8e43
  $fReadVolition_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec InflectionData.Volition
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                InflectionData.$fReadManifest307
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <InflectionData.Volition>_R)) -}
3559279b2cc9168c42f1489c451a8e43
  $fReadVolition_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS InflectionData.Volition
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ InflectionData.Volition
                   ((GHC.Read.$fReadDouble10
                       @ InflectionData.Volition
                       InflectionData.$fReadManifest308
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <InflectionData.Volition>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <InflectionData.Volition>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0]
                         <InflectionData.Volition>_R)
                      @ InflectionData.Volition
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ InflectionData.Volition))) -}
ad5a45ce48b851fa62f133f8b8318721
  $fShow(,,,,,,,,,,,,,,,,) ::
    (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
     GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
     GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
     GHC.Show.Show l, GHC.Show.Show m, GHC.Show.Show n, GHC.Show.Show o,
     GHC.Show.Show p, GHC.Show.Show q) =>
    GHC.Show.Show (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)
  DFunId
  {- Arity: 17,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      @ c
                      @ d
                      @ e
                      @ f
                      @ g
                      @ h
                      @ i
                      @ j
                      @ k
                      @ l
                      @ m
                      @ n
                      @ o
                      @ p
                      @ q
                      ($dShow :: GHC.Show.Show a)
                      ($dShow1 :: GHC.Show.Show b)
                      ($dShow2 :: GHC.Show.Show c)
                      ($dShow3 :: GHC.Show.Show d)
                      ($dShow4 :: GHC.Show.Show e)
                      ($dShow5 :: GHC.Show.Show f)
                      ($dShow6 :: GHC.Show.Show g)
                      ($dShow7 :: GHC.Show.Show h)
                      ($dShow8 :: GHC.Show.Show i)
                      ($dShow9 :: GHC.Show.Show j)
                      ($dShow10 :: GHC.Show.Show k)
                      ($dShow11 :: GHC.Show.Show l)
                      ($dShow12 :: GHC.Show.Show m)
                      ($dShow13 :: GHC.Show.Show n)
                      ($dShow14 :: GHC.Show.Show o)
                      ($dShow15 :: GHC.Show.Show p)
                      ($dShow16 :: GHC.Show.Show q).
                  @ (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)
                  (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec
                     @ a
                     @ b
                     @ c
                     @ d
                     @ e
                     @ f
                     @ g
                     @ h
                     @ i
                     @ j
                     @ k
                     @ l
                     @ m
                     @ n
                     @ o
                     @ p
                     @ q
                     $dShow
                     $dShow1
                     $dShow2
                     $dShow3
                     $dShow4
                     $dShow5
                     $dShow6
                     $dShow7
                     $dShow8
                     $dShow9
                     $dShow10
                     $dShow11
                     $dShow12
                     $dShow13
                     $dShow14
                     $dShow15
                     $dShow16)
                  (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$cshow
                     @ a
                     @ b
                     @ c
                     @ d
                     @ e
                     @ f
                     @ g
                     @ h
                     @ i
                     @ j
                     @ k
                     @ l
                     @ m
                     @ n
                     @ o
                     @ p
                     @ q
                     $dShow
                     $dShow1
                     $dShow2
                     $dShow3
                     $dShow4
                     $dShow5
                     $dShow6
                     $dShow7
                     $dShow8
                     $dShow9
                     $dShow10
                     $dShow11
                     $dShow12
                     $dShow13
                     $dShow14
                     $dShow15
                     $dShow16)
                  (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$cshowList
                     @ a
                     @ b
                     @ c
                     @ d
                     @ e
                     @ f
                     @ g
                     @ h
                     @ i
                     @ j
                     @ k
                     @ l
                     @ m
                     @ n
                     @ o
                     @ p
                     @ q
                     $dShow
                     $dShow1
                     $dShow2
                     $dShow3
                     $dShow4
                     $dShow5
                     $dShow6
                     $dShow7
                     $dShow8
                     $dShow9
                     $dShow10
                     $dShow11
                     $dShow12
                     $dShow13
                     $dShow14
                     $dShow15
                     $dShow16) -}
9587354ccfe7e30e9939cc62bf179a89
  $fShow(,,,,,,,,,,,,,,,,)_$cshow ::
    (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
     GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
     GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
     GHC.Show.Show l, GHC.Show.Show m, GHC.Show.Show n, GHC.Show.Show o,
     GHC.Show.Show p, GHC.Show.Show q) =>
    (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)
    -> GHC.Base.String
  {- Arity: 18,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Unfolding: InlineRule (18, True, False)
                (\ @ a
                   @ b
                   @ c
                   @ d
                   @ e
                   @ f
                   @ g
                   @ h
                   @ i
                   @ j
                   @ k
                   @ l
                   @ m
                   @ n
                   @ o
                   @ p
                   @ q
                   ($dShow :: GHC.Show.Show a)
                   ($dShow1 :: GHC.Show.Show b)
                   ($dShow2 :: GHC.Show.Show c)
                   ($dShow3 :: GHC.Show.Show d)
                   ($dShow4 :: GHC.Show.Show e)
                   ($dShow5 :: GHC.Show.Show f)
                   ($dShow6 :: GHC.Show.Show g)
                   ($dShow7 :: GHC.Show.Show h)
                   ($dShow8 :: GHC.Show.Show i)
                   ($dShow9 :: GHC.Show.Show j)
                   ($dShow10 :: GHC.Show.Show k)
                   ($dShow11 :: GHC.Show.Show l)
                   ($dShow12 :: GHC.Show.Show m)
                   ($dShow13 :: GHC.Show.Show n)
                   ($dShow14 :: GHC.Show.Show o)
                   ($dShow15 :: GHC.Show.Show p)
                   ($dShow16 :: GHC.Show.Show q)
                   (x :: (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)) ->
                 InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec
                   @ a
                   @ b
                   @ c
                   @ d
                   @ e
                   @ f
                   @ g
                   @ h
                   @ i
                   @ j
                   @ k
                   @ l
                   @ m
                   @ n
                   @ o
                   @ p
                   @ q
                   $dShow
                   $dShow1
                   $dShow2
                   $dShow3
                   $dShow4
                   $dShow5
                   $dShow6
                   $dShow7
                   $dShow8
                   $dShow9
                   $dShow10
                   $dShow11
                   $dShow12
                   $dShow13
                   $dShow14
                   $dShow15
                   $dShow16
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
6022e5f42253a5ad35eafded4a6b09f0
  $fShow(,,,,,,,,,,,,,,,,)_$cshowList ::
    (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
     GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
     GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
     GHC.Show.Show l, GHC.Show.Show m, GHC.Show.Show n, GHC.Show.Show o,
     GHC.Show.Show p, GHC.Show.Show q) =>
    [(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)]
    -> GHC.Show.ShowS
  {- Arity: 19,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (19, True, False)
                (\ @ a
                   @ b
                   @ c
                   @ d
                   @ e
                   @ f
                   @ g
                   @ h
                   @ i
                   @ j
                   @ k
                   @ l
                   @ m
                   @ n
                   @ o
                   @ p
                   @ q
                   ($dShow :: GHC.Show.Show a)
                   ($dShow1 :: GHC.Show.Show b)
                   ($dShow2 :: GHC.Show.Show c)
                   ($dShow3 :: GHC.Show.Show d)
                   ($dShow4 :: GHC.Show.Show e)
                   ($dShow5 :: GHC.Show.Show f)
                   ($dShow6 :: GHC.Show.Show g)
                   ($dShow7 :: GHC.Show.Show h)
                   ($dShow8 :: GHC.Show.Show i)
                   ($dShow9 :: GHC.Show.Show j)
                   ($dShow10 :: GHC.Show.Show k)
                   ($dShow11 :: GHC.Show.Show l)
                   ($dShow12 :: GHC.Show.Show m)
                   ($dShow13 :: GHC.Show.Show n)
                   ($dShow14 :: GHC.Show.Show o)
                   ($dShow15 :: GHC.Show.Show p)
                   ($dShow16 :: GHC.Show.Show q)
                   (ls :: [(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)
                   (InflectionData.$fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec
                      @ a
                      @ b
                      @ c
                      @ d
                      @ e
                      @ f
                      @ g
                      @ h
                      @ i
                      @ j
                      @ k
                      @ l
                      @ m
                      @ n
                      @ o
                      @ p
                      @ q
                      $dShow
                      $dShow1
                      $dShow2
                      $dShow3
                      $dShow4
                      $dShow5
                      $dShow6
                      $dShow7
                      $dShow8
                      $dShow9
                      $dShow10
                      $dShow11
                      $dShow12
                      $dShow13
                      $dShow14
                      $dShow15
                      $dShow16
                      GHC.Show.shows22)
                   ls
                   s) -}
862f88ab489d87a3f9e4906da2b695ca
  $fShow(,,,,,,,,,,,,,,,,)_$cshowsPrec ::
    (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
     GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
     GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
     GHC.Show.Show l, GHC.Show.Show m, GHC.Show.Show n, GHC.Show.Show o,
     GHC.Show.Show p, GHC.Show.Show q) =>
    GHC.Types.Int
    -> (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)
    -> GHC.Show.ShowS
  {- Arity: 19,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,A><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (19, True, False)
                (\ @ a
                   @ b
                   @ c
                   @ d
                   @ e
                   @ f
                   @ g
                   @ h
                   @ i
                   @ j
                   @ k
                   @ l
                   @ m
                   @ n
                   @ o
                   @ p
                   @ q
                   (w :: GHC.Show.Show a)
                   (w1 :: GHC.Show.Show b)
                   (w2 :: GHC.Show.Show c)
                   (w3 :: GHC.Show.Show d)
                   (w4 :: GHC.Show.Show e)
                   (w5 :: GHC.Show.Show f)
                   (w6 :: GHC.Show.Show g)
                   (w7 :: GHC.Show.Show h)
                   (w8 :: GHC.Show.Show i)
                   (w9 :: GHC.Show.Show j)
                   (w10 :: GHC.Show.Show k)
                   (w11 :: GHC.Show.Show l)
                   (w12 :: GHC.Show.Show m)
                   (w13 :: GHC.Show.Show n)
                   (w14 :: GHC.Show.Show o)
                   (w15 :: GHC.Show.Show p)
                   (w16 :: GHC.Show.Show q)
                   (w17 :: GHC.Types.Int)
                   (w18 :: (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)) ->
                 case w18 of ww { (,,,,,,,,,,,,,,,,) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ->
                 InflectionData.$w$cshowsPrec
                   @ a
                   @ b
                   @ c
                   @ d
                   @ e
                   @ f
                   @ g
                   @ h
                   @ i
                   @ j
                   @ k
                   @ l
                   @ m
                   @ n
                   @ o
                   @ p
                   @ q
                   w
                   w1
                   w2
                   w3
                   w4
                   w5
                   w6
                   w7
                   w8
                   w9
                   w10
                   w11
                   w12
                   w13
                   w14
                   w15
                   w16
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww17 }) -}
4e33e0bcf50cecb3bec919a410a917b8
  $fShowAnimacy :: GHC.Show.Show InflectionData.Animacy
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Animacy
                  InflectionData.$fShowAnimacy_$cshowsPrec
                  InflectionData.$fShowAnimacy_$cshow
                  InflectionData.$fShowAnimacy_$cshowList -}
4e33e0bcf50cecb3bec919a410a917b8
  $fShowAnimacy_$cshow :: InflectionData.Animacy -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: InflectionData.Animacy) ->
                 InflectionData.$fShowAnimacy_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
4e33e0bcf50cecb3bec919a410a917b8
  $fShowAnimacy_$cshowList ::
    [InflectionData.Animacy] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Animacy
                   InflectionData.$w$cshowsPrec1) -}
4e33e0bcf50cecb3bec919a410a917b8
  $fShowAnimacy_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Animacy -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: InflectionData.Animacy)
                   (w2 :: GHC.Base.String) ->
                 InflectionData.$w$cshowsPrec1 w1 w2) -}
cc1d01770048a1b059770fc511c26180
  $fShowAspect :: GHC.Show.Show InflectionData.Aspect
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Aspect
                  InflectionData.$fShowAspect_$cshowsPrec
                  InflectionData.$fShowAspect_$cshow
                  InflectionData.$fShowAspect_$cshowList -}
cc1d01770048a1b059770fc511c26180
  $fShowAspect_$cshow :: InflectionData.Aspect -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: InflectionData.Aspect) ->
                 InflectionData.$fShowAspect_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
cc1d01770048a1b059770fc511c26180
  $fShowAspect_$cshowList ::
    [InflectionData.Aspect] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Aspect
                   InflectionData.$w$cshowsPrec2) -}
cc1d01770048a1b059770fc511c26180
  $fShowAspect_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Aspect -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: InflectionData.Aspect)
                   (w2 :: GHC.Base.String) ->
                 InflectionData.$w$cshowsPrec2 w1 w2) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fShowCase :: GHC.Show.Show InflectionData.Case
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Case
                  InflectionData.$fShowCase_$cshowsPrec
                  InflectionData.$fShowCase_$cshow
                  InflectionData.$fShowCase_$cshowList -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fShowCase_$cshow :: InflectionData.Case -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: InflectionData.Case) ->
                 InflectionData.$fShowCase_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fShowCase_$cshowList :: [InflectionData.Case] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Case
                   InflectionData.$w$cshowsPrec3) -}
c7ab55970bdd5f1f3c2a1893488ee946
  $fShowCase_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Case -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: InflectionData.Case)
                   (w2 :: GHC.Base.String) ->
                 InflectionData.$w$cshowsPrec3 w1 w2) -}
13bfeba0cb3001719a9764357d888c67
  $fShowDefiniteness :: GHC.Show.Show InflectionData.Definiteness
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Definiteness
                  InflectionData.$fShowDefiniteness_$cshowsPrec
                  InflectionData.$fShowDefiniteness_$cshow
                  InflectionData.$fShowDefiniteness_$cshowList -}
13bfeba0cb3001719a9764357d888c67
  $fShowDefiniteness_$cshow ::
    InflectionData.Definiteness -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: InflectionData.Definiteness) ->
                 case x of wild {
                   InflectionData.UDEF -> InflectionData.$fReadDefiniteness15
                   InflectionData.DEF -> InflectionData.$fReadDefiniteness12
                   InflectionData.INDF -> InflectionData.$fReadDefiniteness9 }) -}
13bfeba0cb3001719a9764357d888c67
  $fShowDefiniteness_$cshowList ::
    [InflectionData.Definiteness] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Definiteness
                   InflectionData.$w$cshowsPrec4) -}
13bfeba0cb3001719a9764357d888c67
  $fShowDefiniteness_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Definiteness -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: InflectionData.Definiteness)
                   (w2 :: GHC.Base.String) ->
                 InflectionData.$w$cshowsPrec4 w1 w2) -}
d496e50507466d81d95f22dd4857ca16
  $fShowEvidentiality :: GHC.Show.Show InflectionData.Evidentiality
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Evidentiality
                  InflectionData.$fShowEvidentiality_$cshowsPrec
                  InflectionData.$fShowEvidentiality_$cshow
                  InflectionData.$fShowEvidentiality_$cshowList -}
d496e50507466d81d95f22dd4857ca16
  $fShowEvidentiality_$cshow ::
    InflectionData.Evidentiality -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: InflectionData.Evidentiality) ->
                 InflectionData.$fShowEvidentiality_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
d496e50507466d81d95f22dd4857ca16
  $fShowEvidentiality_$cshowList ::
    [InflectionData.Evidentiality] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Evidentiality
                   InflectionData.$w$cshowsPrec5) -}
d496e50507466d81d95f22dd4857ca16
  $fShowEvidentiality_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Evidentiality -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: InflectionData.Evidentiality)
                   (w2 :: GHC.Base.String) ->
                 InflectionData.$w$cshowsPrec5 w1 w2) -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress ::
    GHC.Show.Show a => GHC.Show.Show (InflectionData.Express a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a ($dShow :: GHC.Show.Show a).
                  @ (InflectionData.Express a)
                  (InflectionData.$fShowExpress_$cshowsPrec @ a $dShow)
                  (InflectionData.$fShowExpress_$cshow @ a $dShow)
                  (InflectionData.$fShowExpress_$cshowList @ a $dShow) -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress1 ::
    InflectionData.Express InflectionData.Gender -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (InflectionData.$fShowExpress_$s$cshowsPrec
                   InflectionData.$fShowExpress2) -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress10 ::
    InflectionData.Express InflectionData.Number -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (InflectionData.$fShowExpress_$s$cshowsPrec3
                   InflectionData.$fShowExpress2) -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress11 ::
    InflectionData.Express InflectionData.Definiteness
    -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (InflectionData.$fShowExpress_$s$cshowsPrec4
                   InflectionData.$fShowExpress2) -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress12 ::
    InflectionData.Express InflectionData.Specificity -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (InflectionData.$fShowExpress_$s$cshowsPrec5
                   InflectionData.$fShowExpress2) -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress13 ::
    InflectionData.Express InflectionData.Topic -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (InflectionData.$fShowExpress_$s$cshowsPrec6
                   InflectionData.$fShowExpress2) -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress14 ::
    InflectionData.Express InflectionData.Person -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (InflectionData.$fShowExpress_$s$cshowsPrec7
                   InflectionData.$fShowExpress2) -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress15 ::
    InflectionData.Express InflectionData.Honorific -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (InflectionData.$fShowExpress_$s$cshowsPrec8
                   InflectionData.$fShowExpress2) -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress16 ::
    InflectionData.Express InflectionData.Polarity -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (InflectionData.$fShowExpress_$s$cshowsPrec9
                   InflectionData.$fShowExpress2) -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress17 ::
    InflectionData.Express InflectionData.Tense -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (InflectionData.$fShowExpress_$s$cshowsPrec10
                   InflectionData.$fShowExpress2) -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress18 ::
    InflectionData.Express InflectionData.Aspect -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (InflectionData.$fShowExpress_$s$cshowsPrec11
                   InflectionData.$fShowExpress2) -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress19 ::
    InflectionData.Express InflectionData.Mood -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (InflectionData.$fShowExpress_$s$cshowsPrec12
                   InflectionData.$fShowExpress2) -}
cfa1a5b79ee2c034ca9a7fd6cbe12e80
  $fShowExpress2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress20 ::
    InflectionData.Express InflectionData.Voice -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (InflectionData.$fShowExpress_$s$cshowsPrec13
                   InflectionData.$fShowExpress2) -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress21 ::
    InflectionData.Express InflectionData.Evidentiality
    -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (InflectionData.$fShowExpress_$s$cshowsPrec14
                   InflectionData.$fShowExpress2) -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress22 ::
    InflectionData.Express InflectionData.Transitivity
    -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (InflectionData.$fShowExpress_$s$cshowsPrec15
                   InflectionData.$fShowExpress2) -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress23 ::
    InflectionData.Express InflectionData.Volition -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (InflectionData.$fShowExpress_$s$cshowsPrec16
                   InflectionData.$fShowExpress2) -}
5f8357a40ebc742e348444b1f50ec8f7
  $fShowExpress24 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   InflectionData.$fShowExpress6) -}
ddf2dc3ee6e4f1e2d3f1a195fcddf058
  $fShowExpress25 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   InflectionData.$fShowExpress6
                   (GHC.Types.[] @ GHC.Types.Char)) -}
63043234d3adc7ab1b533fbdb48a694f
  $fShowExpress3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "}"#) -}
7426b4144feaa90ca5033c48cec3cc4e
  $fShowExpress4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "getExp = "#) -}
c5abe03560c0a59d008b8af3035e5921
  $fShowExpress5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Express {"#) -}
76d05fe48836d6aba4ecbcb0bef5d11c
  $fShowExpress6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NoExpress"#) -}
94ce8ad70ae969900b5d0ba068c82bc6
  $fShowExpress7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   InflectionData.$fShowExpress3
                   (GHC.Types.[] @ GHC.Types.Char)) -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress8 ::
    InflectionData.Express InflectionData.Animacy -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (InflectionData.$fShowExpress_$s$cshowsPrec1
                   InflectionData.$fShowExpress2) -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress9 ::
    InflectionData.Express InflectionData.Case -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (InflectionData.$fShowExpress_$s$cshowsPrec2
                   InflectionData.$fShowExpress2) -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress_$cshow ::
    GHC.Show.Show a => InflectionData.Express a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(1*C1(C1(C1(U))),A,A)><S,1*U>,
     Unfolding: (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (x :: InflectionData.Express a) ->
                 case x of wild {
                   InflectionData.NoExpress -> InflectionData.$fShowExpress25
                   InflectionData.Express b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fShowExpress5
                        (GHC.Base.++
                           @ GHC.Types.Char
                           InflectionData.$fShowExpress4
                           (GHC.Show.showsPrec
                              @ a
                              $dShow
                              InflectionData.$fShowExpress2
                              b1
                              InflectionData.$fShowExpress7)) }) -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress_$cshowList ::
    GHC.Show.Show a => [InflectionData.Express a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (eta :: [InflectionData.Express a])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (InflectionData.Express a)
                   (InflectionData.$fShowExpress_$cshowsPrec
                      @ a
                      $dShow
                      InflectionData.$fShowExpress2)
                   eta
                   eta1) -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int -> InflectionData.Express a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(U)><S,1*U>,
     Unfolding: (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (ds :: GHC.Types.Int)
                   (ds1 :: InflectionData.Express a) ->
                 case ds1 of wild {
                   InflectionData.NoExpress -> InflectionData.$fShowExpress24
                   InflectionData.Express b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        f :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.showsPrec @ a $dShow InflectionData.$fShowExpress2 b1
                      } in
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ (x1 :: GHC.Base.String) ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShowExpress5
                            (GHC.Base.++
                               @ GHC.Types.Char
                               InflectionData.$fShowExpress4
                               (f (GHC.Base.++
                                     @ GHC.Types.Char
                                     InflectionData.$fShowExpress3
                                     x1)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False -> p
                        GHC.Types.True
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 x1)) } } }) -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress_$s$cshow ::
    InflectionData.Express InflectionData.Gender -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: InflectionData.Express
                           InflectionData.Gender) ->
                 case x of wild {
                   InflectionData.NoExpress -> InflectionData.$fShowExpress6
                   InflectionData.Express b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fShowExpress5
                        (GHC.Base.++
                           @ GHC.Types.Char
                           InflectionData.$fShowExpress4
                           (InflectionData.$w$cshowsPrec6
                              b1
                              InflectionData.$fShowExpress7)) }) -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress_$s$cshow1 ::
    InflectionData.Express InflectionData.Animacy -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: InflectionData.Express
                           InflectionData.Animacy) ->
                 case x of wild {
                   InflectionData.NoExpress -> InflectionData.$fShowExpress6
                   InflectionData.Express b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fShowExpress5
                        (GHC.Base.++
                           @ GHC.Types.Char
                           InflectionData.$fShowExpress4
                           (InflectionData.$w$cshowsPrec1
                              b1
                              InflectionData.$fShowExpress7)) }) -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress_$s$cshow10 ::
    InflectionData.Express InflectionData.Tense -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: InflectionData.Express InflectionData.Tense) ->
                 case x of wild {
                   InflectionData.NoExpress -> InflectionData.$fShowExpress6
                   InflectionData.Express b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fShowExpress5
                        (GHC.Base.++
                           @ GHC.Types.Char
                           InflectionData.$fShowExpress4
                           (InflectionData.$w$cshowsPrec10
                              b1
                              InflectionData.$fShowExpress7)) }) -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress_$s$cshow11 ::
    InflectionData.Express InflectionData.Aspect -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: InflectionData.Express
                           InflectionData.Aspect) ->
                 case x of wild {
                   InflectionData.NoExpress -> InflectionData.$fShowExpress6
                   InflectionData.Express b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fShowExpress5
                        (GHC.Base.++
                           @ GHC.Types.Char
                           InflectionData.$fShowExpress4
                           (InflectionData.$w$cshowsPrec2
                              b1
                              InflectionData.$fShowExpress7)) }) -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress_$s$cshow12 ::
    InflectionData.Express InflectionData.Mood -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: InflectionData.Express InflectionData.Mood) ->
                 case x of wild {
                   InflectionData.NoExpress -> InflectionData.$fShowExpress6
                   InflectionData.Express b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fShowExpress5
                        (GHC.Base.++
                           @ GHC.Types.Char
                           InflectionData.$fShowExpress4
                           (InflectionData.$w$cshowsPrec11
                              b1
                              InflectionData.$fShowExpress7)) }) -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress_$s$cshow13 ::
    InflectionData.Express InflectionData.Voice -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: InflectionData.Express InflectionData.Voice) ->
                 case x of wild {
                   InflectionData.NoExpress -> InflectionData.$fShowExpress6
                   InflectionData.Express b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fShowExpress5
                        (GHC.Base.++
                           @ GHC.Types.Char
                           InflectionData.$fShowExpress4
                           (InflectionData.$w$cshowsPrec12
                              b1
                              InflectionData.$fShowExpress7)) }) -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress_$s$cshow14 ::
    InflectionData.Express InflectionData.Evidentiality
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: InflectionData.Express
                           InflectionData.Evidentiality) ->
                 case x of wild {
                   InflectionData.NoExpress -> InflectionData.$fShowExpress6
                   InflectionData.Express b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fShowExpress5
                        (GHC.Base.++
                           @ GHC.Types.Char
                           InflectionData.$fShowExpress4
                           (InflectionData.$w$cshowsPrec5
                              b1
                              InflectionData.$fShowExpress7)) }) -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress_$s$cshow15 ::
    InflectionData.Express InflectionData.Transitivity
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: InflectionData.Express
                           InflectionData.Transitivity) ->
                 case x of wild {
                   InflectionData.NoExpress -> InflectionData.$fShowExpress6
                   InflectionData.Express b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fShowExpress5
                        (GHC.Base.++
                           @ GHC.Types.Char
                           InflectionData.$fShowExpress4
                           (InflectionData.$w$cshowsPrec13
                              b1
                              InflectionData.$fShowExpress7)) }) -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress_$s$cshow16 ::
    InflectionData.Express InflectionData.Volition -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: InflectionData.Express InflectionData.Volition) ->
                 InflectionData.$fShowExpress_$s$cshowsPrec16
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress_$s$cshow2 ::
    InflectionData.Express InflectionData.Case -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: InflectionData.Express InflectionData.Case) ->
                 case x of wild {
                   InflectionData.NoExpress -> InflectionData.$fShowExpress6
                   InflectionData.Express b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fShowExpress5
                        (GHC.Base.++
                           @ GHC.Types.Char
                           InflectionData.$fShowExpress4
                           (InflectionData.$w$cshowsPrec3
                              b1
                              InflectionData.$fShowExpress7)) }) -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress_$s$cshow3 ::
    InflectionData.Express InflectionData.Number -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: InflectionData.Express
                           InflectionData.Number) ->
                 case x of wild {
                   InflectionData.NoExpress -> InflectionData.$fShowExpress6
                   InflectionData.Express b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fShowExpress5
                        (GHC.Base.++
                           @ GHC.Types.Char
                           InflectionData.$fShowExpress4
                           (InflectionData.$w$cshowsPrec7
                              b1
                              InflectionData.$fShowExpress7)) }) -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress_$s$cshow4 ::
    InflectionData.Express InflectionData.Definiteness
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: InflectionData.Express InflectionData.Definiteness) ->
                 InflectionData.$fShowExpress_$s$cshowsPrec4
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress_$s$cshow5 ::
    InflectionData.Express InflectionData.Specificity
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: InflectionData.Express InflectionData.Specificity) ->
                 InflectionData.$fShowExpress_$s$cshowsPrec5
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress_$s$cshow6 ::
    InflectionData.Express InflectionData.Topic -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: InflectionData.Express InflectionData.Topic) ->
                 InflectionData.$fShowExpress_$s$cshowsPrec6
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress_$s$cshow7 ::
    InflectionData.Express InflectionData.Person -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: InflectionData.Express
                           InflectionData.Person) ->
                 case x of wild {
                   InflectionData.NoExpress -> InflectionData.$fShowExpress6
                   InflectionData.Express b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fShowExpress5
                        (GHC.Base.++
                           @ GHC.Types.Char
                           InflectionData.$fShowExpress4
                           (InflectionData.$w$cshowsPrec8
                              b1
                              InflectionData.$fShowExpress7)) }) -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress_$s$cshow8 ::
    InflectionData.Express InflectionData.Honorific -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: InflectionData.Express
                           InflectionData.Honorific) ->
                 case x of wild {
                   InflectionData.NoExpress -> InflectionData.$fShowExpress6
                   InflectionData.Express b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fShowExpress5
                        (GHC.Base.++
                           @ GHC.Types.Char
                           InflectionData.$fShowExpress4
                           (InflectionData.$w$cshowsPrec9
                              b1
                              InflectionData.$fShowExpress7)) }) -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress_$s$cshow9 ::
    InflectionData.Express InflectionData.Polarity -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: InflectionData.Express InflectionData.Polarity) ->
                 InflectionData.$fShowExpress_$s$cshowsPrec9
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress_$s$cshowList ::
    [InflectionData.Express InflectionData.Gender] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [InflectionData.Express InflectionData.Gender])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (InflectionData.Express InflectionData.Gender)
                   InflectionData.$fShowExpress1
                   eta
                   eta1) -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress_$s$cshowList1 ::
    [InflectionData.Express InflectionData.Animacy] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [InflectionData.Express InflectionData.Animacy])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (InflectionData.Express InflectionData.Animacy)
                   InflectionData.$fShowExpress8
                   eta
                   eta1) -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress_$s$cshowList10 ::
    [InflectionData.Express InflectionData.Tense] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [InflectionData.Express InflectionData.Tense])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (InflectionData.Express InflectionData.Tense)
                   InflectionData.$fShowExpress17
                   eta
                   eta1) -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress_$s$cshowList11 ::
    [InflectionData.Express InflectionData.Aspect] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [InflectionData.Express InflectionData.Aspect])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (InflectionData.Express InflectionData.Aspect)
                   InflectionData.$fShowExpress18
                   eta
                   eta1) -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress_$s$cshowList12 ::
    [InflectionData.Express InflectionData.Mood] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [InflectionData.Express InflectionData.Mood])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (InflectionData.Express InflectionData.Mood)
                   InflectionData.$fShowExpress19
                   eta
                   eta1) -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress_$s$cshowList13 ::
    [InflectionData.Express InflectionData.Voice] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [InflectionData.Express InflectionData.Voice])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (InflectionData.Express InflectionData.Voice)
                   InflectionData.$fShowExpress20
                   eta
                   eta1) -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress_$s$cshowList14 ::
    [InflectionData.Express InflectionData.Evidentiality]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [InflectionData.Express InflectionData.Evidentiality])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (InflectionData.Express InflectionData.Evidentiality)
                   InflectionData.$fShowExpress21
                   eta
                   eta1) -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress_$s$cshowList15 ::
    [InflectionData.Express InflectionData.Transitivity]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [InflectionData.Express InflectionData.Transitivity])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (InflectionData.Express InflectionData.Transitivity)
                   InflectionData.$fShowExpress22
                   eta
                   eta1) -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress_$s$cshowList16 ::
    [InflectionData.Express InflectionData.Volition] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [InflectionData.Express InflectionData.Volition])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (InflectionData.Express InflectionData.Volition)
                   InflectionData.$fShowExpress23
                   eta
                   eta1) -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress_$s$cshowList2 ::
    [InflectionData.Express InflectionData.Case] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [InflectionData.Express InflectionData.Case])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (InflectionData.Express InflectionData.Case)
                   InflectionData.$fShowExpress9
                   eta
                   eta1) -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress_$s$cshowList3 ::
    [InflectionData.Express InflectionData.Number] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [InflectionData.Express InflectionData.Number])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (InflectionData.Express InflectionData.Number)
                   InflectionData.$fShowExpress10
                   eta
                   eta1) -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress_$s$cshowList4 ::
    [InflectionData.Express InflectionData.Definiteness]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [InflectionData.Express InflectionData.Definiteness])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (InflectionData.Express InflectionData.Definiteness)
                   InflectionData.$fShowExpress11
                   eta
                   eta1) -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress_$s$cshowList5 ::
    [InflectionData.Express InflectionData.Specificity]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [InflectionData.Express InflectionData.Specificity])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (InflectionData.Express InflectionData.Specificity)
                   InflectionData.$fShowExpress12
                   eta
                   eta1) -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress_$s$cshowList6 ::
    [InflectionData.Express InflectionData.Topic] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [InflectionData.Express InflectionData.Topic])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (InflectionData.Express InflectionData.Topic)
                   InflectionData.$fShowExpress13
                   eta
                   eta1) -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress_$s$cshowList7 ::
    [InflectionData.Express InflectionData.Person] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [InflectionData.Express InflectionData.Person])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (InflectionData.Express InflectionData.Person)
                   InflectionData.$fShowExpress14
                   eta
                   eta1) -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress_$s$cshowList8 ::
    [InflectionData.Express InflectionData.Honorific] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [InflectionData.Express InflectionData.Honorific])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (InflectionData.Express InflectionData.Honorific)
                   InflectionData.$fShowExpress15
                   eta
                   eta1) -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress_$s$cshowList9 ::
    [InflectionData.Express InflectionData.Polarity] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [InflectionData.Express InflectionData.Polarity])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (InflectionData.Express InflectionData.Polarity)
                   InflectionData.$fShowExpress16
                   eta
                   eta1) -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress_$s$cshowsPrec ::
    GHC.Types.Int
    -> InflectionData.Express InflectionData.Gender -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ (ds :: GHC.Types.Int)
                   (ds1 :: InflectionData.Express InflectionData.Gender)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   InflectionData.NoExpress
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fShowExpress6 eta
                   InflectionData.Express b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ (x1 :: GHC.Base.String)[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShowExpress5
                            (GHC.Base.++
                               @ GHC.Types.Char
                               InflectionData.$fShowExpress4
                               (InflectionData.$w$cshowsPrec6
                                  b1
                                  (GHC.Base.++ @ GHC.Types.Char InflectionData.$fShowExpress3 x1)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 eta)) } } }) -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress_$s$cshowsPrec1 ::
    GHC.Types.Int
    -> InflectionData.Express InflectionData.Animacy -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ (ds :: GHC.Types.Int)
                   (ds1 :: InflectionData.Express InflectionData.Animacy)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   InflectionData.NoExpress
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fShowExpress6 eta
                   InflectionData.Express b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ (x1 :: GHC.Base.String)[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShowExpress5
                            (GHC.Base.++
                               @ GHC.Types.Char
                               InflectionData.$fShowExpress4
                               (InflectionData.$w$cshowsPrec1
                                  b1
                                  (GHC.Base.++ @ GHC.Types.Char InflectionData.$fShowExpress3 x1)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 eta)) } } }) -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress_$s$cshowsPrec10 ::
    GHC.Types.Int
    -> InflectionData.Express InflectionData.Tense -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ (ds :: GHC.Types.Int)
                   (ds1 :: InflectionData.Express InflectionData.Tense)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   InflectionData.NoExpress
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fShowExpress6 eta
                   InflectionData.Express b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ (x1 :: GHC.Base.String)[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShowExpress5
                            (GHC.Base.++
                               @ GHC.Types.Char
                               InflectionData.$fShowExpress4
                               (InflectionData.$w$cshowsPrec10
                                  b1
                                  (GHC.Base.++ @ GHC.Types.Char InflectionData.$fShowExpress3 x1)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 eta)) } } }) -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress_$s$cshowsPrec11 ::
    GHC.Types.Int
    -> InflectionData.Express InflectionData.Aspect -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ (ds :: GHC.Types.Int)
                   (ds1 :: InflectionData.Express InflectionData.Aspect)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   InflectionData.NoExpress
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fShowExpress6 eta
                   InflectionData.Express b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ (x1 :: GHC.Base.String)[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShowExpress5
                            (GHC.Base.++
                               @ GHC.Types.Char
                               InflectionData.$fShowExpress4
                               (InflectionData.$w$cshowsPrec2
                                  b1
                                  (GHC.Base.++ @ GHC.Types.Char InflectionData.$fShowExpress3 x1)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 eta)) } } }) -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress_$s$cshowsPrec12 ::
    GHC.Types.Int
    -> InflectionData.Express InflectionData.Mood -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ (ds :: GHC.Types.Int)
                   (ds1 :: InflectionData.Express InflectionData.Mood)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   InflectionData.NoExpress
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fShowExpress6 eta
                   InflectionData.Express b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ (x1 :: GHC.Base.String)[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShowExpress5
                            (GHC.Base.++
                               @ GHC.Types.Char
                               InflectionData.$fShowExpress4
                               (InflectionData.$w$cshowsPrec11
                                  b1
                                  (GHC.Base.++ @ GHC.Types.Char InflectionData.$fShowExpress3 x1)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 eta)) } } }) -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress_$s$cshowsPrec13 ::
    GHC.Types.Int
    -> InflectionData.Express InflectionData.Voice -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ (ds :: GHC.Types.Int)
                   (ds1 :: InflectionData.Express InflectionData.Voice)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   InflectionData.NoExpress
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fShowExpress6 eta
                   InflectionData.Express b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ (x1 :: GHC.Base.String)[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShowExpress5
                            (GHC.Base.++
                               @ GHC.Types.Char
                               InflectionData.$fShowExpress4
                               (InflectionData.$w$cshowsPrec12
                                  b1
                                  (GHC.Base.++ @ GHC.Types.Char InflectionData.$fShowExpress3 x1)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 eta)) } } }) -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress_$s$cshowsPrec14 ::
    GHC.Types.Int
    -> InflectionData.Express InflectionData.Evidentiality
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ (ds :: GHC.Types.Int)
                   (ds1 :: InflectionData.Express InflectionData.Evidentiality)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   InflectionData.NoExpress
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fShowExpress6 eta
                   InflectionData.Express b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ (x1 :: GHC.Base.String)[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShowExpress5
                            (GHC.Base.++
                               @ GHC.Types.Char
                               InflectionData.$fShowExpress4
                               (InflectionData.$w$cshowsPrec5
                                  b1
                                  (GHC.Base.++ @ GHC.Types.Char InflectionData.$fShowExpress3 x1)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 eta)) } } }) -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress_$s$cshowsPrec15 ::
    GHC.Types.Int
    -> InflectionData.Express InflectionData.Transitivity
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ (ds :: GHC.Types.Int)
                   (ds1 :: InflectionData.Express InflectionData.Transitivity)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   InflectionData.NoExpress
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fShowExpress6 eta
                   InflectionData.Express b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ (x1 :: GHC.Base.String)[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShowExpress5
                            (GHC.Base.++
                               @ GHC.Types.Char
                               InflectionData.$fShowExpress4
                               (InflectionData.$w$cshowsPrec13
                                  b1
                                  (GHC.Base.++ @ GHC.Types.Char InflectionData.$fShowExpress3 x1)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 eta)) } } }) -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress_$s$cshowsPrec16 ::
    GHC.Types.Int
    -> InflectionData.Express InflectionData.Volition -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ (ds :: GHC.Types.Int)
                   (ds1 :: InflectionData.Express InflectionData.Volition)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   InflectionData.NoExpress
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fShowExpress6 eta
                   InflectionData.Express b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ (x1 :: GHC.Base.String)[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShowExpress5
                            (GHC.Base.++
                               @ GHC.Types.Char
                               InflectionData.$fShowExpress4
                               (case b1 of wild2 {
                                  InflectionData.UVOL
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       InflectionData.$fReadManifest320
                                       (GHC.Base.++
                                          @ GHC.Types.Char
                                          InflectionData.$fShowExpress3
                                          x1)
                                  InflectionData.VOL
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       InflectionData.$fReadManifest317
                                       (GHC.Base.++
                                          @ GHC.Types.Char
                                          InflectionData.$fShowExpress3
                                          x1)
                                  InflectionData.NVOL
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       InflectionData.$fReadManifest314
                                       (GHC.Base.++
                                          @ GHC.Types.Char
                                          InflectionData.$fShowExpress3
                                          x1) }))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 eta)) } } }) -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress_$s$cshowsPrec2 ::
    GHC.Types.Int
    -> InflectionData.Express InflectionData.Case -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ (ds :: GHC.Types.Int)
                   (ds1 :: InflectionData.Express InflectionData.Case)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   InflectionData.NoExpress
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fShowExpress6 eta
                   InflectionData.Express b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ (x1 :: GHC.Base.String)[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShowExpress5
                            (GHC.Base.++
                               @ GHC.Types.Char
                               InflectionData.$fShowExpress4
                               (InflectionData.$w$cshowsPrec3
                                  b1
                                  (GHC.Base.++ @ GHC.Types.Char InflectionData.$fShowExpress3 x1)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 eta)) } } }) -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress_$s$cshowsPrec3 ::
    GHC.Types.Int
    -> InflectionData.Express InflectionData.Number -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ (ds :: GHC.Types.Int)
                   (ds1 :: InflectionData.Express InflectionData.Number)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   InflectionData.NoExpress
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fShowExpress6 eta
                   InflectionData.Express b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ (x1 :: GHC.Base.String)[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShowExpress5
                            (GHC.Base.++
                               @ GHC.Types.Char
                               InflectionData.$fShowExpress4
                               (InflectionData.$w$cshowsPrec7
                                  b1
                                  (GHC.Base.++ @ GHC.Types.Char InflectionData.$fShowExpress3 x1)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 eta)) } } }) -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress_$s$cshowsPrec4 ::
    GHC.Types.Int
    -> InflectionData.Express InflectionData.Definiteness
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ (ds :: GHC.Types.Int)
                   (ds1 :: InflectionData.Express InflectionData.Definiteness)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   InflectionData.NoExpress
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fShowExpress6 eta
                   InflectionData.Express b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ (x1 :: GHC.Base.String)[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShowExpress5
                            (GHC.Base.++
                               @ GHC.Types.Char
                               InflectionData.$fShowExpress4
                               (case b1 of wild2 {
                                  InflectionData.UDEF
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       InflectionData.$fReadDefiniteness15
                                       (GHC.Base.++
                                          @ GHC.Types.Char
                                          InflectionData.$fShowExpress3
                                          x1)
                                  InflectionData.DEF
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       InflectionData.$fReadDefiniteness12
                                       (GHC.Base.++
                                          @ GHC.Types.Char
                                          InflectionData.$fShowExpress3
                                          x1)
                                  InflectionData.INDF
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       InflectionData.$fReadDefiniteness9
                                       (GHC.Base.++
                                          @ GHC.Types.Char
                                          InflectionData.$fShowExpress3
                                          x1) }))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 eta)) } } }) -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress_$s$cshowsPrec5 ::
    GHC.Types.Int
    -> InflectionData.Express InflectionData.Specificity
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ (ds :: GHC.Types.Int)
                   (ds1 :: InflectionData.Express InflectionData.Specificity)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   InflectionData.NoExpress
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fShowExpress6 eta
                   InflectionData.Express b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ (x1 :: GHC.Base.String)[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShowExpress5
                            (GHC.Base.++
                               @ GHC.Types.Char
                               InflectionData.$fShowExpress4
                               (case b1 of wild2 {
                                  InflectionData.USPE
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       InflectionData.$fReadManifest58
                                       (GHC.Base.++
                                          @ GHC.Types.Char
                                          InflectionData.$fShowExpress3
                                          x1)
                                  InflectionData.SPEC
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       InflectionData.$fReadManifest55
                                       (GHC.Base.++
                                          @ GHC.Types.Char
                                          InflectionData.$fShowExpress3
                                          x1)
                                  InflectionData.NSPEC
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       InflectionData.$fReadManifest52
                                       (GHC.Base.++
                                          @ GHC.Types.Char
                                          InflectionData.$fShowExpress3
                                          x1) }))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 eta)) } } }) -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress_$s$cshowsPrec6 ::
    GHC.Types.Int
    -> InflectionData.Express InflectionData.Topic -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ (ds :: GHC.Types.Int)
                   (ds1 :: InflectionData.Express InflectionData.Topic)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   InflectionData.NoExpress
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fShowExpress6 eta
                   InflectionData.Express b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ (x1 :: GHC.Base.String)[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShowExpress5
                            (GHC.Base.++
                               @ GHC.Types.Char
                               InflectionData.$fShowExpress4
                               (case b1 of wild2 {
                                  InflectionData.UTOP
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       InflectionData.$fReadManifest74
                                       (GHC.Base.++
                                          @ GHC.Types.Char
                                          InflectionData.$fShowExpress3
                                          x1)
                                  InflectionData.TOP
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       InflectionData.$fReadManifest71
                                       (GHC.Base.++
                                          @ GHC.Types.Char
                                          InflectionData.$fShowExpress3
                                          x1)
                                  InflectionData.NTOP
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       InflectionData.$fReadManifest68
                                       (GHC.Base.++
                                          @ GHC.Types.Char
                                          InflectionData.$fShowExpress3
                                          x1) }))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 eta)) } } }) -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress_$s$cshowsPrec7 ::
    GHC.Types.Int
    -> InflectionData.Express InflectionData.Person -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ (ds :: GHC.Types.Int)
                   (ds1 :: InflectionData.Express InflectionData.Person)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   InflectionData.NoExpress
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fShowExpress6 eta
                   InflectionData.Express b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ (x1 :: GHC.Base.String)[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShowExpress5
                            (GHC.Base.++
                               @ GHC.Types.Char
                               InflectionData.$fShowExpress4
                               (InflectionData.$w$cshowsPrec8
                                  b1
                                  (GHC.Base.++ @ GHC.Types.Char InflectionData.$fShowExpress3 x1)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 eta)) } } }) -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress_$s$cshowsPrec8 ::
    GHC.Types.Int
    -> InflectionData.Express InflectionData.Honorific
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ (ds :: GHC.Types.Int)
                   (ds1 :: InflectionData.Express InflectionData.Honorific)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   InflectionData.NoExpress
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fShowExpress6 eta
                   InflectionData.Express b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ (x1 :: GHC.Base.String)[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShowExpress5
                            (GHC.Base.++
                               @ GHC.Types.Char
                               InflectionData.$fShowExpress4
                               (InflectionData.$w$cshowsPrec9
                                  b1
                                  (GHC.Base.++ @ GHC.Types.Char InflectionData.$fShowExpress3 x1)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 eta)) } } }) -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress_$s$cshowsPrec9 ::
    GHC.Types.Int
    -> InflectionData.Express InflectionData.Polarity -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ (ds :: GHC.Types.Int)
                   (ds1 :: InflectionData.Express InflectionData.Polarity)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   InflectionData.NoExpress
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fShowExpress6 eta
                   InflectionData.Express b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ (x1 :: GHC.Base.String)[OneShot] ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            InflectionData.$fShowExpress5
                            (GHC.Base.++
                               @ GHC.Types.Char
                               InflectionData.$fShowExpress4
                               (case b1 of wild2 {
                                  InflectionData.UPOL
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       InflectionData.$fReadManifest128
                                       (GHC.Base.++
                                          @ GHC.Types.Char
                                          InflectionData.$fShowExpress3
                                          x1)
                                  InflectionData.AFF
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       InflectionData.$fReadManifest125
                                       (GHC.Base.++
                                          @ GHC.Types.Char
                                          InflectionData.$fShowExpress3
                                          x1)
                                  InflectionData.NEG
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       InflectionData.$fReadManifest122
                                       (GHC.Base.++
                                          @ GHC.Types.Char
                                          InflectionData.$fShowExpress3
                                          x1) }))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False -> p eta
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 eta)) } } }) -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress_$s$fShowExpress ::
    GHC.Show.Show (InflectionData.Express InflectionData.Gender)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Gender)
                  InflectionData.$fShowExpress_$s$cshowsPrec
                  InflectionData.$fShowExpress_$s$cshow
                  InflectionData.$fShowExpress_$s$cshowList -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress_$s$fShowExpress1 ::
    GHC.Show.Show (InflectionData.Express InflectionData.Animacy)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Animacy)
                  InflectionData.$fShowExpress_$s$cshowsPrec1
                  InflectionData.$fShowExpress_$s$cshow1
                  InflectionData.$fShowExpress_$s$cshowList1 -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress_$s$fShowExpress10 ::
    GHC.Show.Show (InflectionData.Express InflectionData.Tense)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Tense)
                  InflectionData.$fShowExpress_$s$cshowsPrec10
                  InflectionData.$fShowExpress_$s$cshow10
                  InflectionData.$fShowExpress_$s$cshowList10 -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress_$s$fShowExpress11 ::
    GHC.Show.Show (InflectionData.Express InflectionData.Aspect)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Aspect)
                  InflectionData.$fShowExpress_$s$cshowsPrec11
                  InflectionData.$fShowExpress_$s$cshow11
                  InflectionData.$fShowExpress_$s$cshowList11 -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress_$s$fShowExpress12 ::
    GHC.Show.Show (InflectionData.Express InflectionData.Mood)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Mood)
                  InflectionData.$fShowExpress_$s$cshowsPrec12
                  InflectionData.$fShowExpress_$s$cshow12
                  InflectionData.$fShowExpress_$s$cshowList12 -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress_$s$fShowExpress13 ::
    GHC.Show.Show (InflectionData.Express InflectionData.Voice)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Voice)
                  InflectionData.$fShowExpress_$s$cshowsPrec13
                  InflectionData.$fShowExpress_$s$cshow13
                  InflectionData.$fShowExpress_$s$cshowList13 -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress_$s$fShowExpress14 ::
    GHC.Show.Show (InflectionData.Express InflectionData.Evidentiality)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Evidentiality)
                  InflectionData.$fShowExpress_$s$cshowsPrec14
                  InflectionData.$fShowExpress_$s$cshow14
                  InflectionData.$fShowExpress_$s$cshowList14 -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress_$s$fShowExpress15 ::
    GHC.Show.Show (InflectionData.Express InflectionData.Transitivity)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Transitivity)
                  InflectionData.$fShowExpress_$s$cshowsPrec15
                  InflectionData.$fShowExpress_$s$cshow15
                  InflectionData.$fShowExpress_$s$cshowList15 -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress_$s$fShowExpress16 ::
    GHC.Show.Show (InflectionData.Express InflectionData.Volition)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Volition)
                  InflectionData.$fShowExpress_$s$cshowsPrec16
                  InflectionData.$fShowExpress_$s$cshow16
                  InflectionData.$fShowExpress_$s$cshowList16 -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress_$s$fShowExpress2 ::
    GHC.Show.Show (InflectionData.Express InflectionData.Case)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Case)
                  InflectionData.$fShowExpress_$s$cshowsPrec2
                  InflectionData.$fShowExpress_$s$cshow2
                  InflectionData.$fShowExpress_$s$cshowList2 -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress_$s$fShowExpress3 ::
    GHC.Show.Show (InflectionData.Express InflectionData.Number)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Number)
                  InflectionData.$fShowExpress_$s$cshowsPrec3
                  InflectionData.$fShowExpress_$s$cshow3
                  InflectionData.$fShowExpress_$s$cshowList3 -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress_$s$fShowExpress4 ::
    GHC.Show.Show (InflectionData.Express InflectionData.Definiteness)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Definiteness)
                  InflectionData.$fShowExpress_$s$cshowsPrec4
                  InflectionData.$fShowExpress_$s$cshow4
                  InflectionData.$fShowExpress_$s$cshowList4 -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress_$s$fShowExpress5 ::
    GHC.Show.Show (InflectionData.Express InflectionData.Specificity)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Specificity)
                  InflectionData.$fShowExpress_$s$cshowsPrec5
                  InflectionData.$fShowExpress_$s$cshow5
                  InflectionData.$fShowExpress_$s$cshowList5 -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress_$s$fShowExpress6 ::
    GHC.Show.Show (InflectionData.Express InflectionData.Topic)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Topic)
                  InflectionData.$fShowExpress_$s$cshowsPrec6
                  InflectionData.$fShowExpress_$s$cshow6
                  InflectionData.$fShowExpress_$s$cshowList6 -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress_$s$fShowExpress7 ::
    GHC.Show.Show (InflectionData.Express InflectionData.Person)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Person)
                  InflectionData.$fShowExpress_$s$cshowsPrec7
                  InflectionData.$fShowExpress_$s$cshow7
                  InflectionData.$fShowExpress_$s$cshowList7 -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress_$s$fShowExpress8 ::
    GHC.Show.Show (InflectionData.Express InflectionData.Honorific)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Honorific)
                  InflectionData.$fShowExpress_$s$cshowsPrec8
                  InflectionData.$fShowExpress_$s$cshow8
                  InflectionData.$fShowExpress_$s$cshowList8 -}
63d70c4f2d77c644511c6d588663f39e
  $fShowExpress_$s$fShowExpress9 ::
    GHC.Show.Show (InflectionData.Express InflectionData.Polarity)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (InflectionData.Express InflectionData.Polarity)
                  InflectionData.$fShowExpress_$s$cshowsPrec9
                  InflectionData.$fShowExpress_$s$cshow9
                  InflectionData.$fShowExpress_$s$cshowList9 -}
64c563e614d6b39e628a87a4b86c4bcb
  $fShowGender :: GHC.Show.Show InflectionData.Gender
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Gender
                  InflectionData.$fShowGender_$cshowsPrec
                  InflectionData.$fShowGender_$cshow
                  InflectionData.$fShowGender_$cshowList -}
64c563e614d6b39e628a87a4b86c4bcb
  $fShowGender_$cshow :: InflectionData.Gender -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: InflectionData.Gender) ->
                 InflectionData.$fShowGender_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
64c563e614d6b39e628a87a4b86c4bcb
  $fShowGender_$cshowList ::
    [InflectionData.Gender] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Gender
                   InflectionData.$w$cshowsPrec6) -}
64c563e614d6b39e628a87a4b86c4bcb
  $fShowGender_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Gender -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: InflectionData.Gender)
                   (w2 :: GHC.Base.String) ->
                 InflectionData.$w$cshowsPrec6 w1 w2) -}
87a0680d1783cb156a72782bde86c25f
  $fShowHonorific :: GHC.Show.Show InflectionData.Honorific
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Honorific
                  InflectionData.$fShowHonorific_$cshowsPrec
                  InflectionData.$fShowHonorific_$cshow
                  InflectionData.$fShowHonorific_$cshowList -}
87a0680d1783cb156a72782bde86c25f
  $fShowHonorific_$cshow ::
    InflectionData.Honorific -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: InflectionData.Honorific) ->
                 InflectionData.$fShowHonorific_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
87a0680d1783cb156a72782bde86c25f
  $fShowHonorific_$cshowList ::
    [InflectionData.Honorific] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Honorific
                   InflectionData.$w$cshowsPrec9) -}
87a0680d1783cb156a72782bde86c25f
  $fShowHonorific_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Honorific -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: InflectionData.Honorific)
                   (w2 :: GHC.Base.String) ->
                 InflectionData.$w$cshowsPrec9 w1 w2) -}
6316452e39bc49500385d38be925e2a3
  $fShowInflectionSystem ::
    GHC.Show.Show InflectionData.InflectionSystem
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.InflectionSystem
                  InflectionData.$fShowInflectionSystem_$cshowsPrec
                  InflectionData.$fShowInflectionSystem_$cshow
                  InflectionData.$fShowInflectionSystem_$cshowList -}
6316452e39bc49500385d38be925e2a3
  $fShowInflectionSystem1 ::
    InflectionData.InflectionSystem -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: InflectionData.InflectionSystem)
                   (w1 :: GHC.Base.String) ->
                 case w of ww { InflectionData.InflectionSystem ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ->
                 InflectionData.$w$cshowsPrec14
                   0#
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww17
                   w1 }) -}
6316452e39bc49500385d38be925e2a3
  $fShowInflectionSystem_$cshow ::
    InflectionData.InflectionSystem -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: InflectionData.InflectionSystem) ->
                 InflectionData.$fShowInflectionSystem_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
6316452e39bc49500385d38be925e2a3
  $fShowInflectionSystem_$cshowList ::
    [InflectionData.InflectionSystem] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.InflectionSystem
                   InflectionData.$fShowInflectionSystem1) -}
6316452e39bc49500385d38be925e2a3
  $fShowInflectionSystem_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.InflectionSystem -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: InflectionData.InflectionSystem)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { InflectionData.InflectionSystem ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ->
                 InflectionData.$w$cshowsPrec14
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww17
                   ww18
                   ww19
                   w2 } }) -}
3578a365ab634279655cb91c03a19c28
  $fShowLexCat :: GHC.Show.Show InflectionData.LexCat
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.LexCat
                  InflectionData.$fShowLexCat_$cshowsPrec
                  InflectionData.$fShowLexCat_$cshow
                  InflectionData.$fShowLexCat_$cshowList -}
3578a365ab634279655cb91c03a19c28
  $fShowLexCat_$cshow :: InflectionData.LexCat -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: InflectionData.LexCat) ->
                 InflectionData.$fShowLexCat_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
3578a365ab634279655cb91c03a19c28
  $fShowLexCat_$cshowList ::
    [InflectionData.LexCat] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.LexCat
                   InflectionData.$w$cshowsPrec15) -}
3578a365ab634279655cb91c03a19c28
  $fShowLexCat_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.LexCat -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: InflectionData.LexCat)
                   (w2 :: GHC.Base.String) ->
                 InflectionData.$w$cshowsPrec15 w1 w2) -}
a1f6ea453f44aabd626528c4893e70e2
  $fShowManifest ::
    GHC.Show.Show a => GHC.Show.Show (InflectionData.Manifest a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a ($dShow :: GHC.Show.Show a).
                  @ (InflectionData.Manifest a)
                  (InflectionData.$fShowManifest_$cshowsPrec @ a $dShow)
                  (InflectionData.$fShowManifest_$cshow @ a $dShow)
                  (InflectionData.$fShowManifest_$cshowList @ a $dShow) -}
07590b8683680a300e3fe4e14633547d
  $fShowManifest1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Manifest "#) -}
8eb1eccbfbf399b426d499d0102c9dae
  $fShowManifest2 ::
    (InflectionData.LexCat, InflectionData.ManifestType, GHC.Types.Int)
    -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ (w4 :: (InflectionData.LexCat,
                           InflectionData.ManifestType, GHC.Types.Int))
                   (w5 :: GHC.Base.String)[OneShot] ->
                 case w4 of ww { (,,) ww1 ww2 ww3 ->
                 GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows9
                   (InflectionData.$w$cshowsPrec15
                      ww1
                      (GHC.Types.:
                         @ GHC.Types.Char
                         GHC.Show.shows7
                         (GHC.Show.$fShow(,,)_$sgo
                            (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 w5)
                            (\ (w :: GHC.Base.String) -> InflectionData.$w$cshowsPrec16 ww2 w)
                            (GHC.Types.:
                               @ GHC.Show.ShowS
                               (\ (w2 :: GHC.Base.String) ->
                                case ww3 of ww4 { GHC.Types.I# ww5 ->
                                case GHC.Show.$wshowSignedInt 0# ww5 w2 of ww6 { (#,#) ww7 ww8 ->
                                GHC.Types.: @ GHC.Types.Char ww7 ww8 } })
                               (GHC.Types.[] @ GHC.Show.ShowS))))) }) -}
23b0cf88c562679d913a0892be53ca5d
  $fShowManifest3 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   InflectionData.$fReadManifest6) -}
e6cd78e869989e8c38306ec3d8ee020d
  $fShowManifest4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   InflectionData.$fReadManifest6
                   (GHC.Types.[] @ GHC.Types.Char)) -}
e5b6dc9a3e9edcf983171cd7d8ba6306
  $fShowManifestSystem :: GHC.Show.Show InflectionData.ManifestSystem
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.ManifestSystem
                  InflectionData.$fShowManifestSystem_$cshowsPrec
                  InflectionData.$fShowManifestSystem_$cshow
                  InflectionData.$fShowManifestSystem_$cshowList -}
e5b6dc9a3e9edcf983171cd7d8ba6306
  $fShowManifestSystem1 ::
    InflectionData.ManifestSystem -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: InflectionData.ManifestSystem)
                   (w1 :: GHC.Base.String) ->
                 case w of ww { InflectionData.ManifestSystem ww1 ww2 ww3 ->
                 InflectionData.$w$cshowsPrec21 0# ww1 ww2 ww3 w1 }) -}
e5b6dc9a3e9edcf983171cd7d8ba6306
  $fShowManifestSystem_$cshow ::
    InflectionData.ManifestSystem -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: InflectionData.ManifestSystem) ->
                 InflectionData.$fShowManifestSystem_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
e5b6dc9a3e9edcf983171cd7d8ba6306
  $fShowManifestSystem_$cshowList ::
    [InflectionData.ManifestSystem] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.ManifestSystem
                   InflectionData.$fShowManifestSystem1) -}
e5b6dc9a3e9edcf983171cd7d8ba6306
  $fShowManifestSystem_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.ManifestSystem -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U,1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: InflectionData.ManifestSystem)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { InflectionData.ManifestSystem ww3 ww4 ww5 ->
                 InflectionData.$w$cshowsPrec21 ww1 ww3 ww4 ww5 w2 } }) -}
677e71acbe1d0c53534632b1806c94f3
  $fShowManifestType :: GHC.Show.Show InflectionData.ManifestType
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.ManifestType
                  InflectionData.$fShowManifestType_$cshowsPrec
                  InflectionData.$fShowManifestType_$cshow
                  InflectionData.$fShowManifestType_$cshowList -}
677e71acbe1d0c53534632b1806c94f3
  $fShowManifestType_$cshow ::
    InflectionData.ManifestType -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: InflectionData.ManifestType) ->
                 case x of wild {
                   InflectionData.Particle -> InflectionData.$fReadManifestType15
                   InflectionData.Prefix -> InflectionData.$fReadManifestType12
                   InflectionData.Suffix -> InflectionData.$fReadManifestType9 }) -}
677e71acbe1d0c53534632b1806c94f3
  $fShowManifestType_$cshowList ::
    [InflectionData.ManifestType] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.ManifestType
                   InflectionData.$w$cshowsPrec16) -}
677e71acbe1d0c53534632b1806c94f3
  $fShowManifestType_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.ManifestType -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: InflectionData.ManifestType)
                   (w2 :: GHC.Base.String) ->
                 InflectionData.$w$cshowsPrec16 w1 w2) -}
a1f6ea453f44aabd626528c4893e70e2
  $fShowManifest_$cshow ::
    GHC.Show.Show a => InflectionData.Manifest a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(1*C1(C1(C1(U))),A,A)><S,1*U>,
     Unfolding: (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (x :: InflectionData.Manifest a) ->
                 case x of wild {
                   InflectionData.NoManifest -> InflectionData.$fShowManifest4
                   InflectionData.Manifest b1 b2
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fShowManifest1
                        (GHC.Show.showList__
                           @ (InflectionData.LexCat, InflectionData.ManifestType,
                              GHC.Types.Int)
                           InflectionData.$fShowManifest2
                           b1
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.showSpace1
                              (GHC.Show.showsPrec
                                 @ a
                                 $dShow
                                 InflectionData.$fReadManifest4
                                 b2
                                 (GHC.Types.[] @ GHC.Types.Char)))) }) -}
a1f6ea453f44aabd626528c4893e70e2
  $fShowManifest_$cshowList ::
    GHC.Show.Show a => [InflectionData.Manifest a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (eta :: [InflectionData.Manifest a])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (InflectionData.Manifest a)
                   (InflectionData.$fShowManifest_$cshowsPrec
                      @ a
                      $dShow
                      InflectionData.$fShowExpress2)
                   eta
                   eta1) -}
a1f6ea453f44aabd626528c4893e70e2
  $fShowManifest_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int -> InflectionData.Manifest a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(U)><S,1*U>,
     Unfolding: (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (ds :: GHC.Types.Int)
                   (ds1 :: InflectionData.Manifest a) ->
                 case ds1 of wild {
                   InflectionData.NoManifest -> InflectionData.$fShowManifest3
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.showsPrec @ a $dShow InflectionData.$fReadManifest4 b2
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             InflectionData.$fShowManifest1
                             (GHC.Show.showList__
                                @ (InflectionData.LexCat, InflectionData.ManifestType,
                                   GHC.Types.Int)
                                InflectionData.$fShowManifest2
                                b1
                                (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x1)))
                        GHC.Types.True
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                InflectionData.$fShowManifest1
                                (GHC.Show.showList__
                                   @ (InflectionData.LexCat, InflectionData.ManifestType,
                                      GHC.Types.Int)
                                   InflectionData.$fShowManifest2
                                   b1
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.showSpace1
                                      (g (GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.shows6
                                            x1))))) } } }) -}
70b4d6c20ac5723d16de51552ac7e031
  $fShowManifest_$s$cshowsPrec ::
    GHC.Types.Int
    -> InflectionData.Manifest [InflectionData.Gender]
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ (ds :: GHC.Types.Int)
                   (ds1 :: InflectionData.Manifest [InflectionData.Gender])
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest6 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                          {- Arity: 1, Strictness: <L,U> -}
                        = \ (x1 :: GHC.Base.String)[OneShot] ->
                          GHC.Show.showList__
                            @ (InflectionData.LexCat, InflectionData.ManifestType,
                               GHC.Types.Int)
                            InflectionData.$fShowManifest2
                            b1
                            (GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showSpace1
                               (GHC.Show.showList__
                                  @ InflectionData.Gender
                                  InflectionData.$w$cshowsPrec6
                                  b2
                                  x1))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             InflectionData.$fShowManifest1
                             (g eta)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                InflectionData.$fShowManifest1
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 eta))) } } }) -}
55bbe2ab4a45c555e20bcad692dbb8f0
  $fShowManifest_$s$cshowsPrec1 ::
    GHC.Types.Int
    -> InflectionData.Manifest [InflectionData.Animacy]
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ (ds :: GHC.Types.Int)
                   (ds1 :: InflectionData.Manifest [InflectionData.Animacy])
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest6 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                          {- Arity: 1, Strictness: <L,U> -}
                        = \ (x1 :: GHC.Base.String)[OneShot] ->
                          GHC.Show.showList__
                            @ (InflectionData.LexCat, InflectionData.ManifestType,
                               GHC.Types.Int)
                            InflectionData.$fShowManifest2
                            b1
                            (GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showSpace1
                               (GHC.Show.showList__
                                  @ InflectionData.Animacy
                                  InflectionData.$w$cshowsPrec1
                                  b2
                                  x1))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             InflectionData.$fShowManifest1
                             (g eta)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                InflectionData.$fShowManifest1
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 eta))) } } }) -}
dbe8612360086bc290c017120c3d8bd3
  $fShowManifest_$s$cshowsPrec10 ::
    GHC.Types.Int
    -> InflectionData.Manifest [InflectionData.Tense] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ (ds :: GHC.Types.Int)
                   (ds1 :: InflectionData.Manifest [InflectionData.Tense])
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest6 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                          {- Arity: 1, Strictness: <L,U> -}
                        = \ (x1 :: GHC.Base.String)[OneShot] ->
                          GHC.Show.showList__
                            @ (InflectionData.LexCat, InflectionData.ManifestType,
                               GHC.Types.Int)
                            InflectionData.$fShowManifest2
                            b1
                            (GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showSpace1
                               (GHC.Show.showList__
                                  @ InflectionData.Tense
                                  InflectionData.$w$cshowsPrec10
                                  b2
                                  x1))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             InflectionData.$fShowManifest1
                             (g eta)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                InflectionData.$fShowManifest1
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 eta))) } } }) -}
ed5c448c1ed0039e18e0ac6c37fd0ee5
  $fShowManifest_$s$cshowsPrec11 ::
    GHC.Types.Int
    -> InflectionData.Manifest [InflectionData.Aspect]
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ (ds :: GHC.Types.Int)
                   (ds1 :: InflectionData.Manifest [InflectionData.Aspect])
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest6 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                          {- Arity: 1, Strictness: <L,U> -}
                        = \ (x1 :: GHC.Base.String)[OneShot] ->
                          GHC.Show.showList__
                            @ (InflectionData.LexCat, InflectionData.ManifestType,
                               GHC.Types.Int)
                            InflectionData.$fShowManifest2
                            b1
                            (GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showSpace1
                               (GHC.Show.showList__
                                  @ InflectionData.Aspect
                                  InflectionData.$w$cshowsPrec2
                                  b2
                                  x1))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             InflectionData.$fShowManifest1
                             (g eta)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                InflectionData.$fShowManifest1
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 eta))) } } }) -}
208f40ad0071223c52c59ad5d69935dd
  $fShowManifest_$s$cshowsPrec12 ::
    GHC.Types.Int
    -> InflectionData.Manifest [InflectionData.Mood] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ (ds :: GHC.Types.Int)
                   (ds1 :: InflectionData.Manifest [InflectionData.Mood])
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest6 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                          {- Arity: 1, Strictness: <L,U> -}
                        = \ (x1 :: GHC.Base.String)[OneShot] ->
                          GHC.Show.showList__
                            @ (InflectionData.LexCat, InflectionData.ManifestType,
                               GHC.Types.Int)
                            InflectionData.$fShowManifest2
                            b1
                            (GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showSpace1
                               (GHC.Show.showList__
                                  @ InflectionData.Mood
                                  InflectionData.$w$cshowsPrec11
                                  b2
                                  x1))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             InflectionData.$fShowManifest1
                             (g eta)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                InflectionData.$fShowManifest1
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 eta))) } } }) -}
d750e434507dcd285256dd206439484e
  $fShowManifest_$s$cshowsPrec13 ::
    GHC.Types.Int
    -> InflectionData.Manifest [InflectionData.Voice] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ (ds :: GHC.Types.Int)
                   (ds1 :: InflectionData.Manifest [InflectionData.Voice])
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest6 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                          {- Arity: 1, Strictness: <L,U> -}
                        = \ (x1 :: GHC.Base.String)[OneShot] ->
                          GHC.Show.showList__
                            @ (InflectionData.LexCat, InflectionData.ManifestType,
                               GHC.Types.Int)
                            InflectionData.$fShowManifest2
                            b1
                            (GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showSpace1
                               (GHC.Show.showList__
                                  @ InflectionData.Voice
                                  InflectionData.$w$cshowsPrec12
                                  b2
                                  x1))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             InflectionData.$fShowManifest1
                             (g eta)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                InflectionData.$fShowManifest1
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 eta))) } } }) -}
a5eb63b3786d4601a10ef5c9db46710a
  $fShowManifest_$s$cshowsPrec14 ::
    GHC.Types.Int
    -> InflectionData.Manifest [InflectionData.Evidentiality]
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ (ds :: GHC.Types.Int)
                   (ds1 :: InflectionData.Manifest [InflectionData.Evidentiality])
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest6 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                          {- Arity: 1, Strictness: <L,U> -}
                        = \ (x1 :: GHC.Base.String)[OneShot] ->
                          GHC.Show.showList__
                            @ (InflectionData.LexCat, InflectionData.ManifestType,
                               GHC.Types.Int)
                            InflectionData.$fShowManifest2
                            b1
                            (GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showSpace1
                               (GHC.Show.showList__
                                  @ InflectionData.Evidentiality
                                  InflectionData.$w$cshowsPrec5
                                  b2
                                  x1))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             InflectionData.$fShowManifest1
                             (g eta)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                InflectionData.$fShowManifest1
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 eta))) } } }) -}
7db65b202967b94b8bd257030f382ff5
  $fShowManifest_$s$cshowsPrec15 ::
    GHC.Types.Int
    -> InflectionData.Manifest [InflectionData.Transitivity]
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ (ds :: GHC.Types.Int)
                   (ds1 :: InflectionData.Manifest [InflectionData.Transitivity])
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest6 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                          {- Arity: 1, Strictness: <L,U> -}
                        = \ (x1 :: GHC.Base.String)[OneShot] ->
                          GHC.Show.showList__
                            @ (InflectionData.LexCat, InflectionData.ManifestType,
                               GHC.Types.Int)
                            InflectionData.$fShowManifest2
                            b1
                            (GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showSpace1
                               (GHC.Show.showList__
                                  @ InflectionData.Transitivity
                                  InflectionData.$w$cshowsPrec13
                                  b2
                                  x1))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             InflectionData.$fShowManifest1
                             (g eta)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                InflectionData.$fShowManifest1
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 eta))) } } }) -}
84a2777ba3223bd936329bbd8ad8594d
  $fShowManifest_$s$cshowsPrec16 ::
    GHC.Types.Int
    -> InflectionData.Manifest [InflectionData.Volition]
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ (ds :: GHC.Types.Int)
                   (ds1 :: InflectionData.Manifest [InflectionData.Volition])
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest6 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                          {- Arity: 1, Strictness: <L,U> -}
                        = \ (x1 :: GHC.Base.String)[OneShot] ->
                          GHC.Show.showList__
                            @ (InflectionData.LexCat, InflectionData.ManifestType,
                               GHC.Types.Int)
                            InflectionData.$fShowManifest2
                            b1
                            (GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showSpace1
                               (GHC.Show.showList__
                                  @ InflectionData.Volition
                                  InflectionData.$w$cshowsPrec20
                                  b2
                                  x1))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             InflectionData.$fShowManifest1
                             (g eta)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                InflectionData.$fShowManifest1
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 eta))) } } }) -}
ba5cb69962f6048fce00fd26b51738d0
  $fShowManifest_$s$cshowsPrec2 ::
    GHC.Types.Int
    -> InflectionData.Manifest [InflectionData.Case] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ (ds :: GHC.Types.Int)
                   (ds1 :: InflectionData.Manifest [InflectionData.Case])
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest6 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                          {- Arity: 1, Strictness: <L,U> -}
                        = \ (x1 :: GHC.Base.String)[OneShot] ->
                          GHC.Show.showList__
                            @ (InflectionData.LexCat, InflectionData.ManifestType,
                               GHC.Types.Int)
                            InflectionData.$fShowManifest2
                            b1
                            (GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showSpace1
                               (GHC.Show.showList__
                                  @ InflectionData.Case
                                  InflectionData.$w$cshowsPrec3
                                  b2
                                  x1))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             InflectionData.$fShowManifest1
                             (g eta)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                InflectionData.$fShowManifest1
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 eta))) } } }) -}
ef4d811db0f082fd286d97a34f30b279
  $fShowManifest_$s$cshowsPrec3 ::
    GHC.Types.Int
    -> InflectionData.Manifest [InflectionData.Number]
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ (ds :: GHC.Types.Int)
                   (ds1 :: InflectionData.Manifest [InflectionData.Number])
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest6 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                          {- Arity: 1, Strictness: <L,U> -}
                        = \ (x1 :: GHC.Base.String)[OneShot] ->
                          GHC.Show.showList__
                            @ (InflectionData.LexCat, InflectionData.ManifestType,
                               GHC.Types.Int)
                            InflectionData.$fShowManifest2
                            b1
                            (GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showSpace1
                               (GHC.Show.showList__
                                  @ InflectionData.Number
                                  InflectionData.$w$cshowsPrec7
                                  b2
                                  x1))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             InflectionData.$fShowManifest1
                             (g eta)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                InflectionData.$fShowManifest1
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 eta))) } } }) -}
5b46b4f49430e73c4b86b5184237aad1
  $fShowManifest_$s$cshowsPrec4 ::
    GHC.Types.Int
    -> InflectionData.Manifest [InflectionData.Definiteness]
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ (ds :: GHC.Types.Int)
                   (ds1 :: InflectionData.Manifest [InflectionData.Definiteness])
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest6 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                          {- Arity: 1, Strictness: <L,U> -}
                        = \ (x1 :: GHC.Base.String)[OneShot] ->
                          GHC.Show.showList__
                            @ (InflectionData.LexCat, InflectionData.ManifestType,
                               GHC.Types.Int)
                            InflectionData.$fShowManifest2
                            b1
                            (GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showSpace1
                               (GHC.Show.showList__
                                  @ InflectionData.Definiteness
                                  InflectionData.$w$cshowsPrec4
                                  b2
                                  x1))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             InflectionData.$fShowManifest1
                             (g eta)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                InflectionData.$fShowManifest1
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 eta))) } } }) -}
bfad0c7c66b3758b18230282e7000a06
  $fShowManifest_$s$cshowsPrec5 ::
    GHC.Types.Int
    -> InflectionData.Manifest [InflectionData.Specificity]
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ (ds :: GHC.Types.Int)
                   (ds1 :: InflectionData.Manifest [InflectionData.Specificity])
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest6 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                          {- Arity: 1, Strictness: <L,U> -}
                        = \ (x1 :: GHC.Base.String)[OneShot] ->
                          GHC.Show.showList__
                            @ (InflectionData.LexCat, InflectionData.ManifestType,
                               GHC.Types.Int)
                            InflectionData.$fShowManifest2
                            b1
                            (GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showSpace1
                               (GHC.Show.showList__
                                  @ InflectionData.Specificity
                                  InflectionData.$w$cshowsPrec17
                                  b2
                                  x1))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             InflectionData.$fShowManifest1
                             (g eta)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                InflectionData.$fShowManifest1
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 eta))) } } }) -}
22440e987ece0b198024a244309ede7c
  $fShowManifest_$s$cshowsPrec6 ::
    GHC.Types.Int
    -> InflectionData.Manifest [InflectionData.Topic] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ (ds :: GHC.Types.Int)
                   (ds1 :: InflectionData.Manifest [InflectionData.Topic])
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest6 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                          {- Arity: 1, Strictness: <L,U> -}
                        = \ (x1 :: GHC.Base.String)[OneShot] ->
                          GHC.Show.showList__
                            @ (InflectionData.LexCat, InflectionData.ManifestType,
                               GHC.Types.Int)
                            InflectionData.$fShowManifest2
                            b1
                            (GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showSpace1
                               (GHC.Show.showList__
                                  @ InflectionData.Topic
                                  InflectionData.$w$cshowsPrec18
                                  b2
                                  x1))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             InflectionData.$fShowManifest1
                             (g eta)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                InflectionData.$fShowManifest1
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 eta))) } } }) -}
34695d542bc3336012f69d3f066f9535
  $fShowManifest_$s$cshowsPrec7 ::
    GHC.Types.Int
    -> InflectionData.Manifest [InflectionData.Person]
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ (ds :: GHC.Types.Int)
                   (ds1 :: InflectionData.Manifest [InflectionData.Person])
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest6 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                          {- Arity: 1, Strictness: <L,U> -}
                        = \ (x1 :: GHC.Base.String)[OneShot] ->
                          GHC.Show.showList__
                            @ (InflectionData.LexCat, InflectionData.ManifestType,
                               GHC.Types.Int)
                            InflectionData.$fShowManifest2
                            b1
                            (GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showSpace1
                               (GHC.Show.showList__
                                  @ InflectionData.Person
                                  InflectionData.$w$cshowsPrec8
                                  b2
                                  x1))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             InflectionData.$fShowManifest1
                             (g eta)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                InflectionData.$fShowManifest1
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 eta))) } } }) -}
cccdfe53c68bc8029707568f0f85ee36
  $fShowManifest_$s$cshowsPrec8 ::
    GHC.Types.Int
    -> InflectionData.Manifest [InflectionData.Honorific]
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ (ds :: GHC.Types.Int)
                   (ds1 :: InflectionData.Manifest [InflectionData.Honorific])
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest6 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                          {- Arity: 1, Strictness: <L,U> -}
                        = \ (x1 :: GHC.Base.String)[OneShot] ->
                          GHC.Show.showList__
                            @ (InflectionData.LexCat, InflectionData.ManifestType,
                               GHC.Types.Int)
                            InflectionData.$fShowManifest2
                            b1
                            (GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showSpace1
                               (GHC.Show.showList__
                                  @ InflectionData.Honorific
                                  InflectionData.$w$cshowsPrec9
                                  b2
                                  x1))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             InflectionData.$fShowManifest1
                             (g eta)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                InflectionData.$fShowManifest1
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 eta))) } } }) -}
4ff8f4f77c08951cfedda265a274e46f
  $fShowManifest_$s$cshowsPrec9 ::
    GHC.Types.Int
    -> InflectionData.Manifest [InflectionData.Polarity]
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ (ds :: GHC.Types.Int)
                   (ds1 :: InflectionData.Manifest [InflectionData.Polarity])
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   InflectionData.NoManifest
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest6 eta
                   InflectionData.Manifest b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                          {- Arity: 1, Strictness: <L,U> -}
                        = \ (x1 :: GHC.Base.String)[OneShot] ->
                          GHC.Show.showList__
                            @ (InflectionData.LexCat, InflectionData.ManifestType,
                               GHC.Types.Int)
                            InflectionData.$fShowManifest2
                            b1
                            (GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showSpace1
                               (GHC.Show.showList__
                                  @ InflectionData.Polarity
                                  InflectionData.$w$cshowsPrec19
                                  b2
                                  x1))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             InflectionData.$fShowManifest1
                             (g eta)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (GHC.Base.++
                                @ GHC.Types.Char
                                InflectionData.$fShowManifest1
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 eta))) } } }) -}
a933e005d0b61de32dcb62fc71171e9c
  $fShowMood :: GHC.Show.Show InflectionData.Mood
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Mood
                  InflectionData.$fShowMood_$cshowsPrec
                  InflectionData.$fShowMood_$cshow
                  InflectionData.$fShowMood_$cshowList -}
a933e005d0b61de32dcb62fc71171e9c
  $fShowMood_$cshow :: InflectionData.Mood -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: InflectionData.Mood) ->
                 InflectionData.$fShowMood_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
a933e005d0b61de32dcb62fc71171e9c
  $fShowMood_$cshowList :: [InflectionData.Mood] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Mood
                   InflectionData.$w$cshowsPrec11) -}
a933e005d0b61de32dcb62fc71171e9c
  $fShowMood_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Mood -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: InflectionData.Mood)
                   (w2 :: GHC.Base.String) ->
                 InflectionData.$w$cshowsPrec11 w1 w2) -}
819df3b7803a0b6e1c638b12031d1054
  $fShowNumber :: GHC.Show.Show InflectionData.Number
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Number
                  InflectionData.$fShowNumber_$cshowsPrec
                  InflectionData.$fShowNumber_$cshow
                  InflectionData.$fShowNumber_$cshowList -}
819df3b7803a0b6e1c638b12031d1054
  $fShowNumber_$cshow :: InflectionData.Number -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: InflectionData.Number) ->
                 InflectionData.$fShowNumber_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
819df3b7803a0b6e1c638b12031d1054
  $fShowNumber_$cshowList ::
    [InflectionData.Number] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Number
                   InflectionData.$w$cshowsPrec7) -}
819df3b7803a0b6e1c638b12031d1054
  $fShowNumber_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Number -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: InflectionData.Number)
                   (w2 :: GHC.Base.String) ->
                 InflectionData.$w$cshowsPrec7 w1 w2) -}
9a6bbd54f38dfeb1bf3b7d7991f3da1c
  $fShowPerson :: GHC.Show.Show InflectionData.Person
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Person
                  InflectionData.$fShowPerson_$cshowsPrec
                  InflectionData.$fShowPerson_$cshow
                  InflectionData.$fShowPerson_$cshowList -}
9a6bbd54f38dfeb1bf3b7d7991f3da1c
  $fShowPerson_$cshow :: InflectionData.Person -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: InflectionData.Person) ->
                 InflectionData.$fShowPerson_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
9a6bbd54f38dfeb1bf3b7d7991f3da1c
  $fShowPerson_$cshowList ::
    [InflectionData.Person] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Person
                   InflectionData.$w$cshowsPrec8) -}
9a6bbd54f38dfeb1bf3b7d7991f3da1c
  $fShowPerson_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Person -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: InflectionData.Person)
                   (w2 :: GHC.Base.String) ->
                 InflectionData.$w$cshowsPrec8 w1 w2) -}
969cd5a99a727ddd44430477f29dd629
  $fShowPolarity :: GHC.Show.Show InflectionData.Polarity
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Polarity
                  InflectionData.$fShowPolarity_$cshowsPrec
                  InflectionData.$fShowPolarity_$cshow
                  InflectionData.$fShowPolarity_$cshowList -}
969cd5a99a727ddd44430477f29dd629
  $fShowPolarity_$cshow :: InflectionData.Polarity -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: InflectionData.Polarity) ->
                 case x of wild {
                   InflectionData.UPOL -> InflectionData.$fReadManifest128
                   InflectionData.AFF -> InflectionData.$fReadManifest125
                   InflectionData.NEG -> InflectionData.$fReadManifest122 }) -}
969cd5a99a727ddd44430477f29dd629
  $fShowPolarity_$cshowList ::
    [InflectionData.Polarity] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Polarity
                   InflectionData.$w$cshowsPrec19) -}
969cd5a99a727ddd44430477f29dd629
  $fShowPolarity_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Polarity -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: InflectionData.Polarity)
                   (w2 :: GHC.Base.String) ->
                 InflectionData.$w$cshowsPrec19 w1 w2) -}
6fb3d15dec5a1fd023a4704d57cac2a0
  $fShowSpecificity :: GHC.Show.Show InflectionData.Specificity
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Specificity
                  InflectionData.$fShowSpecificity_$cshowsPrec
                  InflectionData.$fShowSpecificity_$cshow
                  InflectionData.$fShowSpecificity_$cshowList -}
6fb3d15dec5a1fd023a4704d57cac2a0
  $fShowSpecificity_$cshow ::
    InflectionData.Specificity -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: InflectionData.Specificity) ->
                 case x of wild {
                   InflectionData.USPE -> InflectionData.$fReadManifest58
                   InflectionData.SPEC -> InflectionData.$fReadManifest55
                   InflectionData.NSPEC -> InflectionData.$fReadManifest52 }) -}
6fb3d15dec5a1fd023a4704d57cac2a0
  $fShowSpecificity_$cshowList ::
    [InflectionData.Specificity] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Specificity
                   InflectionData.$w$cshowsPrec17) -}
6fb3d15dec5a1fd023a4704d57cac2a0
  $fShowSpecificity_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Specificity -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: InflectionData.Specificity)
                   (w2 :: GHC.Base.String) ->
                 InflectionData.$w$cshowsPrec17 w1 w2) -}
a794f63e2da02424ad65302f61d49d0d
  $fShowTense :: GHC.Show.Show InflectionData.Tense
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Tense
                  InflectionData.$fShowTense_$cshowsPrec
                  InflectionData.$fShowTense_$cshow
                  InflectionData.$fShowTense_$cshowList -}
a794f63e2da02424ad65302f61d49d0d
  $fShowTense_$cshow :: InflectionData.Tense -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: InflectionData.Tense) ->
                 InflectionData.$fShowTense_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
a794f63e2da02424ad65302f61d49d0d
  $fShowTense_$cshowList :: [InflectionData.Tense] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Tense
                   InflectionData.$w$cshowsPrec10) -}
a794f63e2da02424ad65302f61d49d0d
  $fShowTense_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Tense -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: InflectionData.Tense)
                   (w2 :: GHC.Base.String) ->
                 InflectionData.$w$cshowsPrec10 w1 w2) -}
d8981f1670fc020ebc5d708b5dd733da
  $fShowTopic :: GHC.Show.Show InflectionData.Topic
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Topic
                  InflectionData.$fShowTopic_$cshowsPrec
                  InflectionData.$fShowTopic_$cshow
                  InflectionData.$fShowTopic_$cshowList -}
d8981f1670fc020ebc5d708b5dd733da
  $fShowTopic_$cshow :: InflectionData.Topic -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: InflectionData.Topic) ->
                 case x of wild {
                   InflectionData.UTOP -> InflectionData.$fReadManifest74
                   InflectionData.TOP -> InflectionData.$fReadManifest71
                   InflectionData.NTOP -> InflectionData.$fReadManifest68 }) -}
d8981f1670fc020ebc5d708b5dd733da
  $fShowTopic_$cshowList :: [InflectionData.Topic] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Topic
                   InflectionData.$w$cshowsPrec18) -}
d8981f1670fc020ebc5d708b5dd733da
  $fShowTopic_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Topic -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: InflectionData.Topic)
                   (w2 :: GHC.Base.String) ->
                 InflectionData.$w$cshowsPrec18 w1 w2) -}
fbfbb10e2c2bf7855f3005c5f582ce67
  $fShowTransitivity :: GHC.Show.Show InflectionData.Transitivity
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Transitivity
                  InflectionData.$fShowTransitivity_$cshowsPrec
                  InflectionData.$fShowTransitivity_$cshow
                  InflectionData.$fShowTransitivity_$cshowList -}
fbfbb10e2c2bf7855f3005c5f582ce67
  $fShowTransitivity_$cshow ::
    InflectionData.Transitivity -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: InflectionData.Transitivity) ->
                 InflectionData.$fShowTransitivity_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
fbfbb10e2c2bf7855f3005c5f582ce67
  $fShowTransitivity_$cshowList ::
    [InflectionData.Transitivity] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Transitivity
                   InflectionData.$w$cshowsPrec13) -}
fbfbb10e2c2bf7855f3005c5f582ce67
  $fShowTransitivity_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Transitivity -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: InflectionData.Transitivity)
                   (w2 :: GHC.Base.String) ->
                 InflectionData.$w$cshowsPrec13 w1 w2) -}
8a5a669af2386e102c8f50cb27f7b624
  $fShowVoice :: GHC.Show.Show InflectionData.Voice
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Voice
                  InflectionData.$fShowVoice_$cshowsPrec
                  InflectionData.$fShowVoice_$cshow
                  InflectionData.$fShowVoice_$cshowList -}
8a5a669af2386e102c8f50cb27f7b624
  $fShowVoice_$cshow :: InflectionData.Voice -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: InflectionData.Voice) ->
                 InflectionData.$fShowVoice_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
8a5a669af2386e102c8f50cb27f7b624
  $fShowVoice_$cshowList :: [InflectionData.Voice] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Voice
                   InflectionData.$w$cshowsPrec12) -}
8a5a669af2386e102c8f50cb27f7b624
  $fShowVoice_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Voice -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: InflectionData.Voice)
                   (w2 :: GHC.Base.String) ->
                 InflectionData.$w$cshowsPrec12 w1 w2) -}
3559279b2cc9168c42f1489c451a8e43
  $fShowVolition :: GHC.Show.Show InflectionData.Volition
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ InflectionData.Volition
                  InflectionData.$fShowVolition_$cshowsPrec
                  InflectionData.$fShowVolition_$cshow
                  InflectionData.$fShowVolition_$cshowList -}
3559279b2cc9168c42f1489c451a8e43
  $fShowVolition_$cshow :: InflectionData.Volition -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: InflectionData.Volition) ->
                 case x of wild {
                   InflectionData.UVOL -> InflectionData.$fReadManifest320
                   InflectionData.VOL -> InflectionData.$fReadManifest317
                   InflectionData.NVOL -> InflectionData.$fReadManifest314 }) -}
3559279b2cc9168c42f1489c451a8e43
  $fShowVolition_$cshowList ::
    [InflectionData.Volition] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ InflectionData.Volition
                   InflectionData.$w$cshowsPrec20) -}
3559279b2cc9168c42f1489c451a8e43
  $fShowVolition_$cshowsPrec ::
    GHC.Types.Int -> InflectionData.Volition -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: InflectionData.Volition)
                   (w2 :: GHC.Base.String) ->
                 InflectionData.$w$cshowsPrec20 w1 w2) -}
7653b72ad24c7c9bf18e336cad3bc7ce
  $tc'ABE :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12601421371709861867##
                   5039648129896186786##
                   InflectionData.$trModule
                   InflectionData.$tc'ABE1) -}
ccbcde63aaf54ac516fbd09c407976ae
  $tc'ABE1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ABE"#) -}
4fda9ee0f6ceb274931c12326d96aa8a
  $tc'ABL :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10519756432162977421##
                   12973190245920358078##
                   InflectionData.$trModule
                   InflectionData.$tc'ABL1) -}
06f0b0f3305c36072190becf70065a27
  $tc'ABL1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ABL"#) -}
c550a72720900c3c1fca814716fcf2df
  $tc'ABS :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16267505883777558952##
                   13783114128482601955##
                   InflectionData.$trModule
                   InflectionData.$tc'ABS1) -}
76e50f8516e0652d8c018d5bf570706a
  $tc'ABS1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ABS"#) -}
e2ce59c573cd79353416fcd75975a077
  $tc'ABS2 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   473579668376980071##
                   5515739487064826958##
                   InflectionData.$trModule
                   InflectionData.$tc'ABS5) -}
2e7331162259743e584c45d98bdccb64
  $tc'ABS3 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15648644635510733523##
                   16021881989715329964##
                   InflectionData.$trModule
                   InflectionData.$tc'ABS6) -}
f4f6b0cee66458b0fa65910e7e4a7dad
  $tc'ABS5 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ABS2"#) -}
a1beacd1ca20576f93c094a9ebf1217c
  $tc'ABS6 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ABS3"#) -}
72075bcc57a9cdee8ce3c854801c4035
  $tc'ACC :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15766145501692130542##
                   6738121396904860272##
                   InflectionData.$trModule
                   InflectionData.$tc'ACC1) -}
2b3d05a12544493989107234aa530022
  $tc'ACC1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ACC"#) -}
a414ea9fa16a1c715c8154611db9bc70
  $tc'ACTIVE :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10855686130681150107##
                   2405260371886291038##
                   InflectionData.$trModule
                   InflectionData.$tc'ACTIVE1) -}
0115db1fcca2ef21b749ca9b198378da
  $tc'ACTIVE1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ACTIVE"#) -}
c8a54ecf273f81de2cea8d9e1f022ab5
  $tc'ADP :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16401946357164887036##
                   7087149120960149181##
                   InflectionData.$trModule
                   InflectionData.$tc'ADP1) -}
8ffb88cdf1636513cd71c74335aa242d
  $tc'ADP1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ADP"#) -}
40360e8d5bd90625cec94bad1efdf168
  $tc'AFF :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15825739665118380614##
                   9212965668554940252##
                   InflectionData.$trModule
                   InflectionData.$tc'AFF1) -}
e3930ec0e664431293c47f04fcc6bfe1
  $tc'AFF1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'AFF"#) -}
0bc8206bf2fe48bb6164bd8d1e91ec15
  $tc'AFUT :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17854236717232866838##
                   4984354815365448074##
                   InflectionData.$trModule
                   InflectionData.$tc'AFUT4) -}
efaa9f213ef90b0992ddf81a9c1af6d0
  $tc'AFUT1 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   709044780125937373##
                   11084264320995389242##
                   InflectionData.$trModule
                   InflectionData.$tc'AFUT5) -}
926e20cee90a68e99af31f903094a1c5
  $tc'AFUT2 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7525507873061651217##
                   7909368095062088770##
                   InflectionData.$trModule
                   InflectionData.$tc'AFUT6) -}
15d1e297eecbe7297d2e674242dfd98d
  $tc'AFUT3 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2586628392590683984##
                   340944810158670085##
                   InflectionData.$trModule
                   InflectionData.$tc'AFUT7) -}
ba4e3168ddb9ba22f718f80801a0a45c
  $tc'AFUT4 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'AFUT"#) -}
66af30cf829d685e0c994ead7c5c7f3d
  $tc'AFUT5 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'AFUT1"#) -}
c4984ad74f24d0afd836da97306d5993
  $tc'AFUT6 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'AFUT2"#) -}
7c5a9573411ffcac2a1e2866178728e8
  $tc'AFUT7 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'AFUT3"#) -}
7ee2d46fe93ecf74fc95a0188119e792
  $tc'AN :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6305091575080075926##
                   10171897226933983096##
                   InflectionData.$trModule
                   InflectionData.$tc'AN1) -}
3658e49f26d5037c468f4bb66139c807
  $tc'AN1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'AN"#) -}
c756122d29317e0c4fd478ac9534dd61
  $tc'APRS :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1934499557206446892##
                   684528825409047426##
                   InflectionData.$trModule
                   InflectionData.$tc'APRS1) -}
ff3c9f269b98b02db177f22d70ea6174
  $tc'APRS1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'APRS"#) -}
268c4cb8c039b8613e02d6daecaab985
  $tc'APST :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   819798752662731911##
                   6641527414932143769##
                   InflectionData.$trModule
                   InflectionData.$tc'APST1) -}
4095380a72077d0160c0bc5d6810285c
  $tc'APST1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'APST"#) -}
f3da111e6a19a91ea17cefe6086bc9f8
  $tc'ASS :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11059451824920760767##
                   10398356141579537611##
                   InflectionData.$trModule
                   InflectionData.$tc'ASS1) -}
c5831a4fbff8c6043185e397bc869d33
  $tc'ASS1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ASS"#) -}
6d7c7d825d9a822ad175004b0f7eba48
  $tc'AUD :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17077927766099909141##
                   10126441894525291882##
                   InflectionData.$trModule
                   InflectionData.$tc'AUD1) -}
718e174000da2411c141d3dbeab29ddd
  $tc'AUD1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'AUD"#) -}
d6d1a79c0e3f36dc70591d493eb68c64
  $tc'Adj :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13682933497923224381##
                   3880664256525402891##
                   InflectionData.$trModule
                   InflectionData.$tc'Adj1) -}
05813d4be2c598cdd319a50c0e116aae
  $tc'Adj1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Adj"#) -}
b43f3e8a10f3231340a30f3fddc74b4e
  $tc'Adpo :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8273306947102405499##
                   14483620410069749276##
                   InflectionData.$trModule
                   InflectionData.$tc'Adpo1) -}
cfb5dfc9f71917c1ed31e625da42bf19
  $tc'Adpo1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Adpo"#) -}
09d68aa9674c443a42066e601b064300
  $tc'Adv :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16413437710916564430##
                   5131352118731114389##
                   InflectionData.$trModule
                   InflectionData.$tc'Adv1) -}
9ec26da82d0b23578563099abe9ba4dc
  $tc'Adv1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Adv"#) -}
14bbbcf24729335a848426e320184d27
  $tc'BEN :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8841123145351932937##
                   501547446023223548##
                   InflectionData.$trModule
                   InflectionData.$tc'BEN1) -}
7fe83d92560b51120d54ecaf6def4960
  $tc'BEN1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'BEN"#) -}
ad4e44979187876d995f145e857df7ac
  $tc'CAUS :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13104039291885685280##
                   10295872356127516104##
                   InflectionData.$trModule
                   InflectionData.$tc'CAUS1) -}
6916695650c6b25eb2b0e43f04b1ccc0
  $tc'CAUS1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'CAUS"#) -}
53a43d2a765896ce7dee1109aadc91a7
  $tc'COM :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   324706127198163060##
                   13162577681583386749##
                   InflectionData.$trModule
                   InflectionData.$tc'COM1) -}
02ba80a46fd20fd83b6d20cfafe3e695
  $tc'COM1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'COM"#) -}
84ba7661b6dbc015ee8fb8fe60e7e974
  $tc'COMIT :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17260330322597675515##
                   6194573217305953969##
                   InflectionData.$trModule
                   InflectionData.$tc'COMIT1) -}
be65fa2660681fd7c36d9120ca5fd8a4
  $tc'COMIT1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'COMIT"#) -}
287e0604688d1154be565213cd137e3b
  $tc'COMP :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8869751902632006143##
                   11621532258517975893##
                   InflectionData.$trModule
                   InflectionData.$tc'COMP1) -}
ac1bb06f6be62c29ba8edde0dc0ad7f9
  $tc'COMP1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'COMP"#) -}
88b69737ecd097b735e738dc4a97777c
  $tc'COND :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16853358102962562213##
                   5625611490524349813##
                   InflectionData.$trModule
                   InflectionData.$tc'COND1) -}
1d3fdde28ceedfcfdff299f9399175a3
  $tc'COND1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'COND"#) -}
8c5d793295cae7342040a7b7b4b5abde
  $tc'CONT :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12149034849083675570##
                   2354266743869434494##
                   InflectionData.$trModule
                   InflectionData.$tc'CONT1) -}
b243e92a9d6f20b794381491a96d2fea
  $tc'CONT1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'CONT"#) -}
8bc818448977e565f592745dc3a3fb79
  $tc'Comp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8217289812670058678##
                   5447817287570810872##
                   InflectionData.$trModule
                   InflectionData.$tc'Comp1) -}
4d6ebce4029cdd66a801b3535f2a6a5c
  $tc'Comp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Comp"#) -}
b9e8ef98dcc1e8875011cf82ade2597b
  $tc'DAT :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9947462573863318699##
                   11388749430298348033##
                   InflectionData.$trModule
                   InflectionData.$tc'DAT1) -}
0a5691843a7db02ad6e6d14f4c1fb85f
  $tc'DAT1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'DAT"#) -}
afe674441a6c5791f03293be44d2cc0f
  $tc'DEF :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3043032547454160998##
                   7276366843765072896##
                   InflectionData.$trModule
                   InflectionData.$tc'DEF1) -}
b7c6c9a39804d5cb6626d8e96590c957
  $tc'DEF1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'DEF"#) -}
37507de157a0f8120da52e47c24731d3
  $tc'DEO :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2158375416477514096##
                   16101426264579108518##
                   InflectionData.$trModule
                   InflectionData.$tc'DEO1) -}
5f0fcfc910ad5ddfcf239edf96fe01df
  $tc'DEO1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'DEO"#) -}
ad2ef967baea954f533083eaebc4e973
  $tc'DIR :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12549932741833750467##
                   3884029935778630880##
                   InflectionData.$trModule
                   InflectionData.$tc'DIR1) -}
b89d0fc65b3d7ccb421730ead994eab0
  $tc'DIR1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'DIR"#) -}
d8e253f80d029c138bd22ee4c457ba43
  $tc'DISTR :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2802087731135269399##
                   14667755289656704761##
                   InflectionData.$trModule
                   InflectionData.$tc'DISTR1) -}
9921610bc24d14a643c5011967c9cd32
  $tc'DISTR1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'DISTR"#) -}
d2bccac5604b3d811422a266c6b04d52
  $tc'DITRANS :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4765329650014370355##
                   219277098963658087##
                   InflectionData.$trModule
                   InflectionData.$tc'DITRANS1) -}
fb85d5941097a3cd0b2eae4fa8013275
  $tc'DITRANS1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'DITRANS"#) -}
c1a2ea54b92ab52c56c68fe8a9ff7447
  $tc'DRT1 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15863435341226950863##
                   2074308384282084897##
                   InflectionData.$trModule
                   InflectionData.$tc'DRT4) -}
447edd892f40c49a4633b2d0b1636e12
  $tc'DRT2 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17285878301874864367##
                   5607506334799887179##
                   InflectionData.$trModule
                   InflectionData.$tc'DRT5) -}
55646cc368b7cced1c103f4208e1f494
  $tc'DRT4 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'DRT1"#) -}
9fb0a2887c4208bacbe9e008fee5417c
  $tc'DRT5 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'DRT2"#) -}
400444fe33ccf767269d190359289db5
  $tc'DTR :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3914455244974479227##
                   11195847869769894737##
                   InflectionData.$trModule
                   InflectionData.$tc'DTR1) -}
3c51e80d1298d750e4137e4a8928300a
  $tc'DTR1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'DTR"#) -}
36326a8b12c420bdcb5f2a0d07b350a8
  $tc'DU :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3033817682326730842##
                   5303014638506587314##
                   InflectionData.$trModule
                   InflectionData.$tc'DU1) -}
b6839fd6f60455d58c9136e18e98d3f7
  $tc'DU1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'DU"#) -}
9fa30c514134f92e9d08dfd3846b02c3
  $tc'Det :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13877265161506489644##
                   7317688735735667020##
                   InflectionData.$trModule
                   InflectionData.$tc'Det1) -}
2f9020fb7df3a15017f484bec46e603c
  $tc'Det1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Det"#) -}
fe1ef3b56a495ce3a7f1bbfa0b71466f
  $tc'EPIS :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11125489137413124042##
                   3205106272058381726##
                   InflectionData.$trModule
                   InflectionData.$tc'EPIS1) -}
b1d5fe8154987269055908a21e1cd5bf
  $tc'EPIS1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'EPIS"#) -}
8bc54398287b0b220277e0c733961615
  $tc'EQU :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15175310133668305208##
                   12000585559783551672##
                   InflectionData.$trModule
                   InflectionData.$tc'EQU1) -}
705e33049a0d4ef2e1ec991ecf97a110
  $tc'EQU1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'EQU"#) -}
6024c4991e573793c063086995ce1647
  $tc'ERG :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16851154966589080492##
                   5996128729409890266##
                   InflectionData.$trModule
                   InflectionData.$tc'ERG1) -}
c8944cb269693730ff956278a189f72f
  $tc'ERG1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ERG"#) -}
87d876f2c4cc63e6f0ef64004ce3ae69
  $tc'ERG2 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15802200074323054747##
                   9279129645510321640##
                   InflectionData.$trModule
                   InflectionData.$tc'ERG3) -}
0d769ef4c4ec49ef711c3d0f72bdd787
  $tc'ERG3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ERG2"#) -}
b0d54ff587378829af0625c2789ed559
  $tc'EXP :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7989348901861384777##
                   11445960738221027975##
                   InflectionData.$trModule
                   InflectionData.$tc'EXP1) -}
ad636fd9f172340b8ccafce55a30ddc8
  $tc'EXP1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'EXP"#) -}
4a7d472d0f368f20c4424c6f4e7d1790
  $tc'Express :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1042443534352644211##
                   12625338100214230832##
                   InflectionData.$trModule
                   InflectionData.$tc'Express1) -}
8455226d885bcf4611c382499ed50aea
  $tc'Express1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Express"#) -}
5b8d67d8c9794f3878aaefad6790e6d1
  $tc'F :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18144821718934318641##
                   15682855023504856527##
                   InflectionData.$trModule
                   InflectionData.$tc'F1) -}
8d7d2fcb951d37b963d269368bb5c9dd
  $tc'F1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'F"#) -}
63cc56e8ec2dbd969a2fc63f74c4c4eb
  $tc'FAM :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16553410911215336747##
                   13874574424495989455##
                   InflectionData.$trModule
                   InflectionData.$tc'FAM1) -}
846d657b1fbfef65a527a586b535cac3
  $tc'FAM1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'FAM"#) -}
84e89e0a2230816f5728cf19d2907fc4
  $tc'FIRST :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15209938522068478989##
                   9277601911997744526##
                   InflectionData.$trModule
                   InflectionData.$tc'FIRST1) -}
d53ae7e339f77fa27b01cd12223d096f
  $tc'FIRST1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'FIRST"#) -}
68a43218016338ce3de20db77a28c080
  $tc'FORM :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   449861056882780890##
                   3104289745996495987##
                   InflectionData.$trModule
                   InflectionData.$tc'FORM1) -}
d2ce69bcc6ce68e6a6088624997ee40c
  $tc'FORM1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'FORM"#) -}
7ef9cd7f6b643088abb35dbb3c4edab3
  $tc'FSTEXCL :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16816700419950184896##
                   15673790877226716716##
                   InflectionData.$trModule
                   InflectionData.$tc'FSTEXCL1) -}
5256b616db545ddd9262dc0140b746f4
  $tc'FSTEXCL1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'FSTEXCL"#) -}
fc43f441e81903fa2e004faa865c54e5
  $tc'FSTINCL :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17453772625914962977##
                   16554293279757166348##
                   InflectionData.$trModule
                   InflectionData.$tc'FSTINCL1) -}
9b2a6d73a12d8dcb4e4a15fcc423684b
  $tc'FSTINCL1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'FSTINCL"#) -}
36a216e660edcecb5e57faf1afb4106a
  $tc'FUT :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5443272674281007783##
                   6798677373298792885##
                   InflectionData.$trModule
                   InflectionData.$tc'FUT1) -}
d32f1ff3cef26b8fce65b24e2e26e113
  $tc'FUT1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'FUT"#) -}
79f39b2536941f102b0ce6d6a2ce0378
  $tc'FUTPER :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11318938883472176926##
                   11341192985178093239##
                   InflectionData.$trModule
                   InflectionData.$tc'FUTPER1) -}
3526544443fef448a3b5eb316bb1498e
  $tc'FUTPER1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'FUTPER"#) -}
aad2173dd521c177770be7a821925349
  $tc'GEN :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12144759604548308182##
                   5463605655064172155##
                   InflectionData.$trModule
                   InflectionData.$tc'GEN1) -}
7e15541ac266c956640505c97064e75d
  $tc'GEN1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'GEN"#) -}
5087a49995b658ce9accfe2bb847cdda
  $tc'HAB :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15495570066955268446##
                   17917554024963953028##
                   InflectionData.$trModule
                   InflectionData.$tc'HAB1) -}
11f626523f31fb1ae2640e1dd7533dc0
  $tc'HAB1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'HAB"#) -}
9d91d9d6f6b5fac2c5cc1ed67c185179
  $tc'HSY :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16408903921212679113##
                   5585589129460057233##
                   InflectionData.$trModule
                   InflectionData.$tc'HSY1) -}
56d7d1f44f4290dc6da200bb01a0b48b
  $tc'HSY1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'HSY"#) -}
f0c985d0160282d39aa39c0f38d284e3
  $tc'HUM :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   675861831948491133##
                   8702039206924995776##
                   InflectionData.$trModule
                   InflectionData.$tc'HUM1) -}
945c9ad8f4430abac04b358f1adb443c
  $tc'HUM1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'HUM"#) -}
4615fc0206e088885524eec7320dc252
  $tc'IDEN :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9580146533506144877##
                   4411267784534852774##
                   InflectionData.$trModule
                   InflectionData.$tc'IDEN1) -}
e1c4df31d2dccb4553f3d05e5cb11563
  $tc'IDEN1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'IDEN"#) -}
27685850d4364144c194745493823f77
  $tc'IMP :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6262047143703337036##
                   5053044982560494495##
                   InflectionData.$trModule
                   InflectionData.$tc'IMP1) -}
42bc60c2243e6de0b5a68955c0c576f4
  $tc'IMP1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'IMP"#) -}
936f3a8438cdc59facce72c9550d58e6
  $tc'INAN :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2587240298717132082##
                   1600138561830328149##
                   InflectionData.$trModule
                   InflectionData.$tc'INAN1) -}
7aadb6b4c593a474d20344d3209a4e8e
  $tc'INAN1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'INAN"#) -}
ead057ff467f393b3c597bdc9b5ad39f
  $tc'IND :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6378682040287893083##
                   15343352900026851799##
                   InflectionData.$trModule
                   InflectionData.$tc'IND1) -}
b2d7134f4b60faa266a3090480bd6acb
  $tc'IND1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'IND"#) -}
69df9ba7a7e6eda6171cde17a46e38b5
  $tc'INDF :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5916507627187015414##
                   324416007808656137##
                   InflectionData.$trModule
                   InflectionData.$tc'INDF1) -}
096b7dd63bc01cde23d2c4361cb4bd3e
  $tc'INDF1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'INDF"#) -}
44c00700d055cefa786a4b8b36c1aa92
  $tc'INDIR :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4410256163330353079##
                   17194475130280061930##
                   InflectionData.$trModule
                   InflectionData.$tc'INDIR1) -}
0a09f7b2bff39a3191560b13492973f0
  $tc'INDIR1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'INDIR"#) -}
5acb3761f73bf06046c2157de3891221
  $tc'INFER :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12449283796383403526##
                   15881942677819691701##
                   InflectionData.$trModule
                   InflectionData.$tc'INFER1) -}
b0b3a706b53027c0959b6b46a8ffb940
  $tc'INFER1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'INFER"#) -}
efa8c6096060346ce1feb08a96490344
  $tc'INS :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11389722513451272027##
                   2382904109355326196##
                   InflectionData.$trModule
                   InflectionData.$tc'INS1) -}
3583fbeab7a76e79eb706a01c6599ea7
  $tc'INS1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'INS"#) -}
9cc1540c32ba3b501859f4d0e69e22a0
  $tc'INSCOMIT :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11408594768925139471##
                   14813199365841418824##
                   InflectionData.$trModule
                   InflectionData.$tc'INSCOMIT1) -}
fd3ab2fde91bbb6efd06672574092087
  $tc'INSCOMIT1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'INSCOMIT"#) -}
8531fb2813d87f9b9b93c132d82bf23f
  $tc'INTR :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15129561123857189873##
                   10136682479110992225##
                   InflectionData.$trModule
                   InflectionData.$tc'INTR1) -}
739076865e6cf3f002b2149491c8eeca
  $tc'INTR1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'INTR"#) -}
72e112aa1f4830dce2a1ea2e5e86384b
  $tc'IPFV :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6380285814960606168##
                   16463923149245326960##
                   InflectionData.$trModule
                   InflectionData.$tc'IPFV1) -}
90e265973051028906138fa2653d3f56
  $tc'IPFV1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'IPFV"#) -}
8001077d1da2ecefef6043097c2e1da1
  $tc'IRR :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17229848049013280611##
                   17932537078480599529##
                   InflectionData.$trModule
                   InflectionData.$tc'IRR1) -}
f0d0e1b8f3b994bb70bf2900fa04767f
  $tc'IRR1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'IRR"#) -}
0e90d2fad118227cd231351db338503d
  $tc'Infl :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5109669305561006687##
                   13627634793629839521##
                   InflectionData.$trModule
                   InflectionData.$tc'Infl1) -}
ad48b8529034e0e54903a7a4f6b5e701
  $tc'Infl1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Infl"#) -}
cadea52fd833d0b395688501be8dd07d
  $tc'InflectionSystem :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8957667735288325139##
                   15269954660085668826##
                   InflectionData.$trModule
                   InflectionData.$tc'InflectionSystem1) -}
7f62049ed8c1139b0e441d7f6c70cf2a
  $tc'InflectionSystem1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'InflectionSystem"#) -}
edf0e6431e28511e6b49f2bfbcf6616e
  $tc'JUS :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14322192076754406091##
                   5385734828503431609##
                   InflectionData.$trModule
                   InflectionData.$tc'JUS1) -}
414f929f3907385601d7ad8452ae2511
  $tc'JUS1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'JUS"#) -}
84ddfbe00810184311f7a8ce3aa0f67e
  $tc'LAT :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16244804845762626044##
                   13395918409086261771##
                   InflectionData.$trModule
                   InflectionData.$tc'LAT1) -}
14c9e0f3cd523ac305deeb38bbec39fe
  $tc'LAT1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'LAT"#) -}
4c892329a5dcbdc0bd28dc2f6fc7a075
  $tc'LOC :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8686555288694436622##
                   10888942168859797448##
                   InflectionData.$trModule
                   InflectionData.$tc'LOC1) -}
e1ff4a601246fa7fac99673616893cc9
  $tc'LOC1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'LOC"#) -}
9543a14d8fbe86f552a7ba3e390f75c1
  $tc'M :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16077681074669525126##
                   6292269566309659332##
                   InflectionData.$trModule
                   InflectionData.$tc'M1) -}
bdcf68cd056157fe0e5f78b7e5d34312
  $tc'M1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'M"#) -}
084a230caac20418c83597c5d9fb0342
  $tc'MIDDLE :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10815675935588280960##
                   16125309411093537233##
                   InflectionData.$trModule
                   InflectionData.$tc'MIDDLE1) -}
c1680a517959b0ada75db7116a1c6d58
  $tc'MIDDLE1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'MIDDLE"#) -}
666aa27a816e23f114f7c12f84958aae
  $tc'MTR :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15793936884046742540##
                   11003884374212472709##
                   InflectionData.$trModule
                   InflectionData.$tc'MTR1) -}
10074feb4115e1e7e99627859fae47c3
  $tc'MTR1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'MTR"#) -}
83192ef595da38fef7477336c5312e61
  $tc'MTRANS :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16544506125400761388##
                   14130062881997855677##
                   InflectionData.$trModule
                   InflectionData.$tc'MTRANS1) -}
c1f449d32dccb66e21ddc82c90a00c68
  $tc'MTRANS1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'MTRANS"#) -}
0b7e04ac04ecaac5ed16a1a6e2273c31
  $tc'Manifest :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1709475861229500434##
                   2055272158961195206##
                   InflectionData.$trModule
                   InflectionData.$tc'Manifest1) -}
8cd0bba0e13bac5e914f9598595f6d25
  $tc'Manifest1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Manifest"#) -}
f658562efa328088be032906c3008dce
  $tc'ManifestSystem :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9602239341966825330##
                   9878263337325692542##
                   InflectionData.$trModule
                   InflectionData.$tc'ManifestSystem1) -}
f0cdd5f167a1ae7f7950228c61e0804d
  $tc'ManifestSystem1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ManifestSystem"#) -}
3e995f22012704d60947770aa6263b54
  $tc'N :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1073316670576024462##
                   9939947867780458140##
                   InflectionData.$trModule
                   InflectionData.$tc'N1) -}
c65b584d2bf27f4061e8ae9396a9f92d
  $tc'N1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'N"#) -}
c09d4e58a4ab1e4a61e23c5b4cb9acab
  $tc'NEG :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11923154522982653254##
                   14464371017289122706##
                   InflectionData.$trModule
                   InflectionData.$tc'NEG1) -}
f65333f8a0df335d443d4ac5fd751ee3
  $tc'NEG1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'NEG"#) -}
547aff3868bf4419facb98e0121e9f17
  $tc'NEU :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9689250809965278845##
                   9076363019251215983##
                   InflectionData.$trModule
                   InflectionData.$tc'NEU1) -}
4f79a4d7f6a406b3ca724859d84aecf8
  $tc'NEU1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'NEU"#) -}
4a80ec157e63fbc1664c36923c8fe124
  $tc'NHUM :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   336185076031878255##
                   7161976024803983132##
                   InflectionData.$trModule
                   InflectionData.$tc'NHUM1) -}
cc07d78e66eb7efa66d8de1a5270a749
  $tc'NHUM1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'NHUM"#) -}
742dda84c58648eff1e14f160fb408bb
  $tc'NNPROG :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8789196159856117639##
                   10729289582185526430##
                   InflectionData.$trModule
                   InflectionData.$tc'NNPROG1) -}
965b4c66a40777b4fd55bf40e0dc99f1
  $tc'NNPROG1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'NNPROG"#) -}
f8cf2b43b3ea0560dc23d75f9c981f2e
  $tc'NOM :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15742774630388001710##
                   4351266503521016209##
                   InflectionData.$trModule
                   InflectionData.$tc'NOM1) -}
eb85c18f3b4aa3e883693937ebb28097
  $tc'NOM1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'NOM"#) -}
675af9b66901617de02335672206d740
  $tc'NOM2 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5847105739157510501##
                   7646029343540066521##
                   InflectionData.$trModule
                   InflectionData.$tc'NOM3) -}
c3eb49928d65cfc88059ac441e824e7f
  $tc'NOM3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'NOM2"#) -}
52e299dee71240bb5417feb8ebd34133
  $tc'NPROG :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4950266037744433560##
                   7320740960757691754##
                   InflectionData.$trModule
                   InflectionData.$tc'NPROG1) -}
528bd077e9fcfef43460e7ab9308e3a0
  $tc'NPROG1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'NPROG"#) -}
5bca73fcf0202a8be7ee4800610a0461
  $tc'NSPEC :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14720871553959442397##
                   4646367461737801688##
                   InflectionData.$trModule
                   InflectionData.$tc'NSPEC1) -}
233f382babc64c1b403a3147eca2f2fb
  $tc'NSPEC1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'NSPEC"#) -}
e139077a0439112444dc5ee6b450cdfe
  $tc'NTOP :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8506118454250290892##
                   9141570271382873871##
                   InflectionData.$trModule
                   InflectionData.$tc'NTOP1) -}
714f73ea7266efe115e2bbe61a4eb591
  $tc'NTOP1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'NTOP"#) -}
4d690f4cc6daa05840e18f4afd27ce1a
  $tc'NTRANS :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7833483229097649598##
                   10852532900257986145##
                   InflectionData.$trModule
                   InflectionData.$tc'NTRANS1) -}
b9a7c794c117a988bab9faca876f56b0
  $tc'NTRANS1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'NTRANS"#) -}
e95952dd234362d129b28b038452a9b5
  $tc'NVIS :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15069205798673461737##
                   14105932535999591983##
                   InflectionData.$trModule
                   InflectionData.$tc'NVIS1) -}
f5e4e4408b1ddfd3296bbed581142a4d
  $tc'NVIS1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'NVIS"#) -}
c572aa9521ea50b1c0f5a531061a2885
  $tc'NVOL :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16656159739843361915##
                   806319555278390433##
                   InflectionData.$trModule
                   InflectionData.$tc'NVOL1) -}
5e9c08d328b85b120a7f6bb3e9393575
  $tc'NVOL1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'NVOL"#) -}
756ba3ab70671ec6a07b5f9d18acd4ad
  $tc'NoExpress :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14502251892735732549##
                   8152586105640895827##
                   InflectionData.$trModule
                   InflectionData.$tc'NoExpress1) -}
c3cb1f2f6d83dbcddc8e8d21469e09c5
  $tc'NoExpress1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'NoExpress"#) -}
e6852f1f8d65de9b2e0f98418597b1b0
  $tc'NoManifest :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11969378008139020773##
                   8402117101337373133##
                   InflectionData.$trModule
                   InflectionData.$tc'NoManifest1) -}
beb37fc43686c306d787019d50c0f703
  $tc'NoManifest1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'NoManifest"#) -}
17824461d571de043fd57fb8a0b65208
  $tc'Noun :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1381320422284759561##
                   4062950742839927702##
                   InflectionData.$trModule
                   InflectionData.$tc'Noun1) -}
42edbc8f94f4726a23f7e73c4508626c
  $tc'Noun1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Noun"#) -}
c3cf04bcd76ce74ab8908da4fe6c1bb7
  $tc'OBJ :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15196183466340051394##
                   7711465426108764444##
                   InflectionData.$trModule
                   InflectionData.$tc'OBJ1) -}
ab2d377034d2af8e2dc2cd2c1e1ff44f
  $tc'OBJ1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'OBJ"#) -}
7a2683f2077ac4d6266a7cc08432863d
  $tc'OBL1 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10388167871727341185##
                   6764955215938749119##
                   InflectionData.$trModule
                   InflectionData.$tc'OBL7) -}
5f0800c04c0592932053768faba8ada0
  $tc'OBL10 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'OBL4"#) -}
b0bc2c4a373dcee85e21fe47bcbbf718
  $tc'OBL11 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'OBL5"#) -}
391853e72d8eba341c131d18defcca6e
  $tc'OBL12 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'OBL6"#) -}
ebe95e2830681951bfeda4f591624a72
  $tc'OBL2 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18168131402293498933##
                   9323736816137988578##
                   InflectionData.$trModule
                   InflectionData.$tc'OBL8) -}
38c8f686c3d40d8189c0c941a5189c41
  $tc'OBL3 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17561766989164288559##
                   5555054926158983266##
                   InflectionData.$trModule
                   InflectionData.$tc'OBL9) -}
e4d7fef68a21e37f4c265c2a856e5d1c
  $tc'OBL4 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9691292370076511740##
                   3757847867113474966##
                   InflectionData.$trModule
                   InflectionData.$tc'OBL10) -}
ba0b49d42f032eeb9a925107ff380898
  $tc'OBL5 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2478934493144294527##
                   7779152262377656684##
                   InflectionData.$trModule
                   InflectionData.$tc'OBL11) -}
6f50aeafb66e72ca92b7f6b6ee941788
  $tc'OBL6 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   194236754522041145##
                   9780581495421172511##
                   InflectionData.$trModule
                   InflectionData.$tc'OBL12) -}
9953e997f01e0be1d2d6e930b710cb9d
  $tc'OBL7 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'OBL1"#) -}
d79a4e82cafd2352f3cf9e4ce13761f3
  $tc'OBL8 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'OBL2"#) -}
6e754598c2c11ec525322dc2ebb74abf
  $tc'OBL9 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'OBL3"#) -}
7ba98157ee9079dd86ee922a9471e289
  $tc'OPT :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17787950352536835806##
                   15022328676647664182##
                   InflectionData.$trModule
                   InflectionData.$tc'OPT1) -}
9f367f3b295aa4feac4b486bf38527c3
  $tc'OPT1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'OPT"#) -}
3a02a1756facd1d982d571ccc003b33c
  $tc'ORN :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3251229121634959348##
                   10507389075601373643##
                   InflectionData.$trModule
                   InflectionData.$tc'ORN1) -}
4af1c986dbb48599aceaea8821ee12db
  $tc'ORN1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ORN"#) -}
ce0837217dbededb3e0d138e742a7b7e
  $tc'Obj :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14462327189399257215##
                   7875141774140811479##
                   InflectionData.$trModule
                   InflectionData.$tc'Obj1) -}
0a0cb31d957c5e0af476af3aa03ac259
  $tc'Obj1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Obj"#) -}
3e595b52c7f107b20dc8805d62368b25
  $tc'PA :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13552980183166335898##
                   15341894117557849571##
                   InflectionData.$trModule
                   InflectionData.$tc'PA1) -}
78c5d2020a413741d99c60ecebfbbcdd
  $tc'PA1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PA"#) -}
26a41cdd8745921c3025fd90e46a599c
  $tc'PART :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10057380326608697721##
                   1010409511460506392##
                   InflectionData.$trModule
                   InflectionData.$tc'PART1) -}
ccbb59158e6efa7ad6a89bbbc66ee474
  $tc'PART1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PART"#) -}
75ae4b076cfe60c3e0b254ae38f4f0c6
  $tc'PASSIVE :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4612324016981998264##
                   9828102881789028195##
                   InflectionData.$trModule
                   InflectionData.$tc'PASSIVE1) -}
597fdf952c19b5bcc45653e023d48274
  $tc'PASSIVE1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PASSIVE"#) -}
7411b91c49c1eb9456aa98f1c73e25e0
  $tc'PEG :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15964480308052121797##
                   13678680112498783961##
                   InflectionData.$trModule
                   InflectionData.$tc'PEG1) -}
a9f4baf7ac9678ac4880e3c05c0713a5
  $tc'PEG1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PEG"#) -}
53ad28894f17eb2102cdfb15305e7925
  $tc'PFUT :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3471889574024144000##
                   11532879487758822124##
                   InflectionData.$trModule
                   InflectionData.$tc'PFUT1) -}
cc662c97c29fa8954271ee8e2dcec8f1
  $tc'PFUT1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PFUT"#) -}
35734b517b7bf5edf722d95ad51cde51
  $tc'PFV :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4664535814035018451##
                   3828374073027336192##
                   InflectionData.$trModule
                   InflectionData.$tc'PFV1) -}
bc4ccdfe53b337856831149ed9489a84
  $tc'PFV1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PFV"#) -}
e164076994c1c4516b9631728d1e2af4
  $tc'PL :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2756979255893856040##
                   8513438376036049922##
                   InflectionData.$trModule
                   InflectionData.$tc'PL1) -}
d333d551a9ea32baa3557808d8d391aa
  $tc'PL1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PL"#) -}
f113febbf872db6f69d40cd807d9554c
  $tc'POSS :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2799669874020505623##
                   174855742284678644##
                   InflectionData.$trModule
                   InflectionData.$tc'POSS1) -}
01a114016f1648b2d14f5d057bc16fde
  $tc'POSS1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'POSS"#) -}
97852776733b8ecac25ee8c5889070de
  $tc'POST :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1560840424670165123##
                   5248035504885763081##
                   InflectionData.$trModule
                   InflectionData.$tc'POST1) -}
dac2fffe04ea2f422c561d256a862330
  $tc'POST1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'POST"#) -}
f2378a91c0b2438cbe142304963aa367
  $tc'POT :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13371937813568558633##
                   9761660488667806150##
                   InflectionData.$trModule
                   InflectionData.$tc'POT1) -}
a59832d8ce67a10fe76ce1f20aa8a546
  $tc'POT1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'POT"#) -}
1472d0a3d24c370777d2fa8d85da2b44
  $tc'PPRS :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6562052089503585364##
                   9593695084486410419##
                   InflectionData.$trModule
                   InflectionData.$tc'PPRS1) -}
1b4b11bab4348c40ccd4a7e817a18ef4
  $tc'PPRS1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PPRS"#) -}
1a95697fd07df837c15e2648dd5eff8a
  $tc'PPST :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5268645558756942676##
                   10897407120502705357##
                   InflectionData.$trModule
                   InflectionData.$tc'PPST4) -}
8e83574ba50f2b8be85db72a79ed5096
  $tc'PPST1 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9144230360678765300##
                   18135559235569641126##
                   InflectionData.$trModule
                   InflectionData.$tc'PPST5) -}
01d4aaaeedb63035359ed61e59f44522
  $tc'PPST2 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6862144168743159169##
                   8888121587977022148##
                   InflectionData.$trModule
                   InflectionData.$tc'PPST6) -}
2a18a055af4080d7dddeb59e8633ba6f
  $tc'PPST3 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3018604964189151662##
                   16960101518583895091##
                   InflectionData.$trModule
                   InflectionData.$tc'PPST7) -}
c256da98f8bdb98c1234454926c69cf3
  $tc'PPST4 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PPST"#) -}
a618a153a4ad49297d59d6dcda875178
  $tc'PPST5 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PPST1"#) -}
0a144bb5c80f23015dda682b1869bf85
  $tc'PPST6 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PPST2"#) -}
a440f11e844ada438483e12cbcd1bf5c
  $tc'PPST7 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PPST3"#) -}
c3e48e26446bbbe4e9ffb3ec66b48025
  $tc'PREP :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9282261683798471870##
                   15740424075403786523##
                   InflectionData.$trModule
                   InflectionData.$tc'PREP1) -}
dd05daac4cd3bc31908d741ce3c864c1
  $tc'PREP1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PREP"#) -}
2a5c675f650ea151f13eda139198a43c
  $tc'PRIM :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9172643059240792428##
                   18341075424295307844##
                   InflectionData.$trModule
                   InflectionData.$tc'PRIM1) -}
383f3c988cbf4b0d8e8d95492c32e0fe
  $tc'PRIM1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PRIM"#) -}
ea610067e0f2b5a48abc5cd658f7e100
  $tc'PROG :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1384037939761505457##
                   6577674684276847870##
                   InflectionData.$trModule
                   InflectionData.$tc'PROG1) -}
3c4009447ab80cec87f2205dbdd3d7b9
  $tc'PROG1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PROG"#) -}
307e6315b088b1e3a3082589cf5dd1b7
  $tc'PRS :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15604059364618229106##
                   16049175178238016072##
                   InflectionData.$trModule
                   InflectionData.$tc'PRS1) -}
37416bbaae2c819c38682d84e79168b4
  $tc'PRS1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PRS"#) -}
95af73c041b381376abe1c32f736568c
  $tc'PRSPER :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13229667977071559127##
                   9667569876044692074##
                   InflectionData.$trModule
                   InflectionData.$tc'PRSPER1) -}
580350db00bd5a2dd5b93b1a4530a33c
  $tc'PRSPER1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PRSPER"#) -}
c22aadc0d82df429008c56a11aa07f98
  $tc'PST :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4431825432045375517##
                   13412324947137961059##
                   InflectionData.$trModule
                   InflectionData.$tc'PST1) -}
f2fdf0b8a703464f329fd425bdbd37fe
  $tc'PST1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PST"#) -}
540ee9a0ca424e3602a22ca38fade644
  $tc'PSTPER :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4738698615278478581##
                   13724096489354612272##
                   InflectionData.$trModule
                   InflectionData.$tc'PSTPER1) -}
e0a6e291635318726e2cf8f2853ee6dc
  $tc'PSTPER1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PSTPER"#) -}
ef70af838e64ac1e837973e3b6e322f7
  $tc'Particle :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1304329684182120210##
                   17052531671828876775##
                   InflectionData.$trModule
                   InflectionData.$tc'Particle1) -}
06e611a0d84d88c30de3b3e6ec67fc36
  $tc'Particle1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Particle"#) -}
59fa74088df397ff7f09e72f094278fc
  $tc'Prefix :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2919871838342238087##
                   11321949904865559348##
                   InflectionData.$trModule
                   InflectionData.$tc'Prefix1) -}
8226b6fee132097d3b7362f69be4bfd7
  $tc'Prefix1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Prefix"#) -}
55574c09439a47942e87f53a04bdcc43
  $tc'Pron :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16954570009263330103##
                   5295223761174971958##
                   InflectionData.$trModule
                   InflectionData.$tc'Pron1) -}
c3a6bcc32a5d5d6e48d047f87a01ebce
  $tc'Pron1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Pron"#) -}
d9aceeae3d1e462f84bf63ea7900e61d
  $tc'QUO :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16480882098628293791##
                   15390597482072978366##
                   InflectionData.$trModule
                   InflectionData.$tc'QUO1) -}
7e14e24df1fda001df25b45da2ef8e46
  $tc'QUO1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'QUO"#) -}
f95195dfddd00ee195ebe1c5b8679240
  $tc'REP :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10919585177304031373##
                   419980082043672975##
                   InflectionData.$trModule
                   InflectionData.$tc'REP1) -}
bace509219a8134b4660e10f7d4d2595
  $tc'REP1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'REP"#) -}
d247ab62afb9f47fe7afc9609286dfeb
  $tc'SBJV :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1054440761623641359##
                   4365676521476750337##
                   InflectionData.$trModule
                   InflectionData.$tc'SBJV1) -}
82b6bd0b24ff1337636b98b4ecefd16c
  $tc'SBJV1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'SBJV"#) -}
7978af41cb8491d77f20d7df9f2d81dd
  $tc'SEC :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9639415451850103984##
                   1617513736764167258##
                   InflectionData.$trModule
                   InflectionData.$tc'SEC1) -}
700330ad34cbf2e6cba654d4e50f2743
  $tc'SEC1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'SEC"#) -}
21c5c693e4548054b291b8df86994f1b
  $tc'SECOND :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9320917164152452399##
                   8505089298498190219##
                   InflectionData.$trModule
                   InflectionData.$tc'SECOND1) -}
89c62c69b444eecf75d8b492e56d32d6
  $tc'SECOND1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'SECOND"#) -}
0a7eef0fb45e0a24eb559e27cee87546
  $tc'SG :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4161708193371587734##
                   11765185246107658103##
                   InflectionData.$trModule
                   InflectionData.$tc'SG1) -}
ebf136d3179854180e32e51e12c1397c
  $tc'SG1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'SG"#) -}
6c838b8bf4346bb71de21ac27c769f42
  $tc'SPEC :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1162291697556026573##
                   7562906022178475655##
                   InflectionData.$trModule
                   InflectionData.$tc'SPEC1) -}
fc63be8e2163f5fe6983493b80781af6
  $tc'SPEC1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'SPEC"#) -}
a7dde5f4802fcc28a1703309b7d20c65
  $tc'Subj :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4984153937310878120##
                   11114058009853868323##
                   InflectionData.$trModule
                   InflectionData.$tc'Subj1) -}
3dec61730e1c2dcd831a1c7e7fcbef51
  $tc'Subj1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Subj"#) -}
c14c72187ef3ddd3853b45dc36c741c4
  $tc'Suffix :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15575732824024954085##
                   13517871232682376963##
                   InflectionData.$trModule
                   InflectionData.$tc'Suffix1) -}
7f368250a76bd936f25d387cc678dfc4
  $tc'Suffix1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Suffix"#) -}
aa16b4ac39ceba6f7e792b5efcbadb75
  $tc'THIRD :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6120431817798275004##
                   16421222699993579764##
                   InflectionData.$trModule
                   InflectionData.$tc'THIRD1) -}
b41dfcf84153013dc8c32c5e8a83c74a
  $tc'THIRD1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'THIRD"#) -}
7b220f3e8e920770df9b579619b26de7
  $tc'THRDOBV :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8442049062209789756##
                   17668504541332252384##
                   InflectionData.$trModule
                   InflectionData.$tc'THRDOBV1) -}
97e6e1f1fc170a3039ab49d29c4b2ad6
  $tc'THRDOBV1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'THRDOBV"#) -}
7560b29c067cd01c58d3a421999dc131
  $tc'THRDPROX :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15370429822607029408##
                   8726707677019444790##
                   InflectionData.$trModule
                   InflectionData.$tc'THRDPROX1) -}
97e00404eb37bd52fda42a544ebf5620
  $tc'THRDPROX1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'THRDPROX"#) -}
5f407e2032c2544019e482e9ed86d0a4
  $tc'TOP :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1957098073273159355##
                   4729004847172755004##
                   InflectionData.$trModule
                   InflectionData.$tc'TOP1) -}
971816cfca4f03ff6d38aaeb49982e76
  $tc'TOP1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'TOP"#) -}
42911d9058f8d69f701f059263ba2374
  $tc'TR :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8177938388336178150##
                   8691652287954502625##
                   InflectionData.$trModule
                   InflectionData.$tc'TR1) -}
18d7fdc98194c4ec1228e1b15a1c58a9
  $tc'TR1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'TR"#) -}
3d587b6d160be634f73d4639d1709b56
  $tc'TRANS :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16156375520227316245##
                   6134688330519799934##
                   InflectionData.$trModule
                   InflectionData.$tc'TRANS1) -}
2c0e1002661b1a244c8b07892dc04238
  $tc'TRANS1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'TRANS"#) -}
eb776ab153546b445ba7fa6c7d0c83f2
  $tc'TRI :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16779101952767849265##
                   13673893571345887918##
                   InflectionData.$trModule
                   InflectionData.$tc'TRI1) -}
83ef0e8edf88ebd478c618dc602a6b92
  $tc'TRI1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'TRI"#) -}
0dda430f22702abe2e19908f60cde4f1
  $tc'UANI :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12725098176039026809##
                   4596095872140304411##
                   InflectionData.$trModule
                   InflectionData.$tc'UANI1) -}
4a1412178fb35b5417e43ae7c35214f2
  $tc'UANI1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'UANI"#) -}
8201aad13013a9385f819a609e285ed7
  $tc'UASP :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18188090247306286312##
                   10504473838944891761##
                   InflectionData.$trModule
                   InflectionData.$tc'UASP1) -}
2ea813d4edad4e327fca513973b37678
  $tc'UASP1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'UASP"#) -}
f7ecc64bbe049d6040d5bdc47e9973ec
  $tc'UCAS :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4459983419303029671##
                   11265819968048463840##
                   InflectionData.$trModule
                   InflectionData.$tc'UCAS1) -}
f216362a9411e9979f5e2fb993216586
  $tc'UCAS1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'UCAS"#) -}
a643f6d514992421d621f00f9ae62ae1
  $tc'UDEF :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7019066320832351383##
                   1363186820263068105##
                   InflectionData.$trModule
                   InflectionData.$tc'UDEF1) -}
65dacb1910dae0c8b4771557214b95a8
  $tc'UDEF1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'UDEF"#) -}
603f84e0135a4ab9ce4775ca6bfa20cb
  $tc'UEVI :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7710999492691751458##
                   11086462194258434451##
                   InflectionData.$trModule
                   InflectionData.$tc'UEVI1) -}
26a88c0e89bff32c54b65393e81e8300
  $tc'UEVI1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'UEVI"#) -}
55af716fc827afa3298de6f18bdb8d22
  $tc'UGEN :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17919680997649315090##
                   15974015079332766561##
                   InflectionData.$trModule
                   InflectionData.$tc'UGEN1) -}
ba9b48954e38ec3226f834c9b8180556
  $tc'UGEN1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'UGEN"#) -}
53a2f4fdcb2067b169c166080f1e9c3a
  $tc'UHON :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5187682877737695295##
                   11580518522087661574##
                   InflectionData.$trModule
                   InflectionData.$tc'UHON1) -}
b772f650b4fcab4a913516951371eb76
  $tc'UHON1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'UHON"#) -}
768aa07d41b2cb6fec1d7ca7dc44cf61
  $tc'UMOO :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12088052799216265356##
                   17464806248288190980##
                   InflectionData.$trModule
                   InflectionData.$tc'UMOO1) -}
4a61f598244c83c0447f614051400124
  $tc'UMOO1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'UMOO"#) -}
ca6b5e33dee821ab8cd971762ad29f0d
  $tc'UNUM :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11283612054376946704##
                   11418719564522181527##
                   InflectionData.$trModule
                   InflectionData.$tc'UNUM1) -}
24be16c83513e79216f977928f13ef16
  $tc'UNUM1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'UNUM"#) -}
94e97c499b83e63a69397a6aec3e6787
  $tc'UPER :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11756312677050704065##
                   13463549893695590189##
                   InflectionData.$trModule
                   InflectionData.$tc'UPER1) -}
e2b08aba209446d2689814c9dfe9cc67
  $tc'UPER1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'UPER"#) -}
6f4dcb239c6f95aebda4c3bc492d94b4
  $tc'UPOL :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10228561070737006755##
                   8236145438049074008##
                   InflectionData.$trModule
                   InflectionData.$tc'UPOL1) -}
84d354d87cff62b4391ce234786e9e82
  $tc'UPOL1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'UPOL"#) -}
04dd6bea6853e5b17a087879b01f3acf
  $tc'USPE :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12814295956350088364##
                   7961893023568418944##
                   InflectionData.$trModule
                   InflectionData.$tc'USPE1) -}
bd89eb0264070fdc1a736957435b71eb
  $tc'USPE1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'USPE"#) -}
fccc4173bfb878e8e97c1abb9d6cbf16
  $tc'UTEN :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   721128712091556290##
                   12121060525894520551##
                   InflectionData.$trModule
                   InflectionData.$tc'UTEN1) -}
570b70475687d7f0cda35f1e922caa51
  $tc'UTEN1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'UTEN"#) -}
e2b5627b1b2838d45a83bbeeaf616216
  $tc'UTOP :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12320247201627392127##
                   525263320645735610##
                   InflectionData.$trModule
                   InflectionData.$tc'UTOP1) -}
f1c654af0512ba07dc622a39f3e12a37
  $tc'UTOP1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'UTOP"#) -}
e1f83c457b0b289de22a53808068eedc
  $tc'UTRA :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13604494422382513536##
                   14937188979361387523##
                   InflectionData.$trModule
                   InflectionData.$tc'UTRA1) -}
6532ed79f71ac29c41234e9e09274523
  $tc'UTRA1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'UTRA"#) -}
3a61dda293046367d81eba3c36fe46fd
  $tc'UVOI :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5238955769843977190##
                   8614280211324415142##
                   InflectionData.$trModule
                   InflectionData.$tc'UVOI1) -}
4e3300bd2d661bb9a47ad8ae19b6683a
  $tc'UVOI1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'UVOI"#) -}
4a2688e989ab2ba30c8261b4f56ee14c
  $tc'UVOL :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15472469089338271947##
                   16287792494336539050##
                   InflectionData.$trModule
                   InflectionData.$tc'UVOL1) -}
23574a178bd90e0b4a5c17b0905aaadb
  $tc'UVOL1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'UVOL"#) -}
aacf36308308349037f1e123ebd5d81a
  $tc'VIS :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9700399979837895602##
                   4529518014269135612##
                   InflectionData.$trModule
                   InflectionData.$tc'VIS1) -}
3eab1a977de18e37960dc9db4d0c00d7
  $tc'VIS1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'VIS"#) -}
161a8b2403dea962ae63a781867bd42e
  $tc'VOC :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16814419785195625160##
                   15493671155480994607##
                   InflectionData.$trModule
                   InflectionData.$tc'VOC1) -}
0452a715ab6d5aedc17e47ec7d2a83ba
  $tc'VOC1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'VOC"#) -}
549af27f759afefde6f1fd92b035717b
  $tc'VOL :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13050282881354161039##
                   7240938255005333877##
                   InflectionData.$trModule
                   InflectionData.$tc'VOL1) -}
38d3091e1d7f46707302153f09c49bf7
  $tc'VOL1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'VOL"#) -}
1a1977245e9b04cc08a49b055df1de02
  $tc'Verb :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   439391711542346180##
                   12902998279555155061##
                   InflectionData.$trModule
                   InflectionData.$tc'Verb1) -}
2437d1fb435b280abea14044a103fa94
  $tc'Verb1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Verb"#) -}
f2a7581a1ac072057ba35022e47c532f
  $tc'ZO :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   77190472766734170##
                   714589457947056046##
                   InflectionData.$trModule
                   InflectionData.$tc'ZO1) -}
fabfbff7df14793bb9b43128156c0960
  $tc'ZO1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ZO"#) -}
5d3121af5f193a18f539b7715d042237
  $tcAnimacy :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14195276739369348414##
                   2514674251415779315##
                   InflectionData.$trModule
                   InflectionData.$tcAnimacy1) -}
20aa2e164d0a3676821e45fecb349b19
  $tcAnimacy1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Animacy"#) -}
e1f68c1cb05ad0dbf427b3be709bca8e
  $tcAspect :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11977810746297690512##
                   3335271102317659752##
                   InflectionData.$trModule
                   InflectionData.$tcAspect1) -}
eac9f3ad3bff7dd66cba04724a214e5e
  $tcAspect1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Aspect"#) -}
8bb76c824294755be1616c8356d714dd
  $tcCase :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1158571988911737047##
                   16290509165800093287##
                   InflectionData.$trModule
                   InflectionData.$tcCase1) -}
e665c83f1976620def241eacd2d4e3b6
  $tcCase1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Case"#) -}
89b5c8cec56d958f63c6260d24e75971
  $tcDefiniteness :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10487322112481370164##
                   2494084142796846725##
                   InflectionData.$trModule
                   InflectionData.$tcDefiniteness1) -}
3d40fd0cab7bc89b15df0f141bfa4dd5
  $tcDefiniteness1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Definiteness"#) -}
709863e1a5e469fe5eaa64e6fbde8403
  $tcEvidentiality :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10973997860994299098##
                   17669699887793597371##
                   InflectionData.$trModule
                   InflectionData.$tcEvidentiality1) -}
1362a4a22dc0877c5d3502579cfc77e8
  $tcEvidentiality1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Evidentiality"#) -}
40633435ef2a503b997be58e7a1e9f6b
  $tcExpress :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12830995534117715307##
                   8705052267420780282##
                   InflectionData.$trModule
                   InflectionData.$tcExpress1) -}
9888077c11dd8b104af1d877c9ace0d1
  $tcExpress1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Express"#) -}
c63c95143b8171c6f16782d2b9147664
  $tcGender :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18040401641203978709##
                   13353263434909407665##
                   InflectionData.$trModule
                   InflectionData.$tcGender1) -}
c937f4583f58e139632368203f447abe
  $tcGender1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Gender"#) -}
79aebda4eb13f944078a82eed562f9a5
  $tcHonorific :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5430206295360243695##
                   10885034846342539941##
                   InflectionData.$trModule
                   InflectionData.$tcHonorific1) -}
3cd0325a9336b2d027254b93cb5b962f
  $tcHonorific1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Honorific"#) -}
01df5fda198818ea0b77bf235c383112
  $tcInflectionSystem :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15077437138029316052##
                   13396152849813919855##
                   InflectionData.$trModule
                   InflectionData.$tcInflectionSystem1) -}
ec04ffd1e461c2b06e23adfa3f207bae
  $tcInflectionSystem1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "InflectionSystem"#) -}
81a0588d61d6aa48db8f3e36c67549c5
  $tcLexCat :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13245575257103807946##
                   1599366695008991563##
                   InflectionData.$trModule
                   InflectionData.$tcLexCat1) -}
02f6e909d8aeb6345120602eed825bb4
  $tcLexCat1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "LexCat"#) -}
17e49134a340188f7062d0e734bd1e1a
  $tcManifest :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18097461260582415449##
                   14999184702057208970##
                   InflectionData.$trModule
                   InflectionData.$tcManifest1) -}
3dd1ed81edcbce249be7eeb199caecd2
  $tcManifest1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Manifest"#) -}
bd2518dd8fb565cf14b5231dc25ef824
  $tcManifestSystem :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7693015789883706852##
                   9072515734605601780##
                   InflectionData.$trModule
                   InflectionData.$tcManifestSystem1) -}
62c683bc3349b5c884bdd4ffbe8062d9
  $tcManifestSystem1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "ManifestSystem"#) -}
13de2b189d7d4d9580c5004abfe5a899
  $tcManifestType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5752996074647343514##
                   13331512730069270578##
                   InflectionData.$trModule
                   InflectionData.$tcManifestType1) -}
4175bed4674f7ffff11f3409864632bd
  $tcManifestType1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "ManifestType"#) -}
6ee406ca96baee4f216715945892a302
  $tcMood :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18422629895651568353##
                   377242630139659713##
                   InflectionData.$trModule
                   InflectionData.$tcMood1) -}
afdfe85169c8e1857791a158ea6ad576
  $tcMood1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Mood"#) -}
13a8abe6586cbc80e3ce5f4ebab07c82
  $tcNumber :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17371234110491091645##
                   1550118581819631054##
                   InflectionData.$trModule
                   InflectionData.$tcNumber1) -}
3eb07fb423d55f0dce5fdbab6e083677
  $tcNumber1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Number"#) -}
bf5d0292718ac99a6630076fc895c413
  $tcPerson :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3463536738103832921##
                   2394783294506028745##
                   InflectionData.$trModule
                   InflectionData.$tcPerson1) -}
e6eccef8cb74d6b571f1256c768d620b
  $tcPerson1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Person"#) -}
834177571b13a50c0669a742522cbbc2
  $tcPolarity :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2226120675924608317##
                   18124083489938765956##
                   InflectionData.$trModule
                   InflectionData.$tcPolarity1) -}
bceecde4a2cdae41e7154fe9daf50646
  $tcPolarity1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Polarity"#) -}
07a41af34a40da414fdcb48605683471
  $tcSpecificity :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8282558816138086075##
                   15252992425010464501##
                   InflectionData.$trModule
                   InflectionData.$tcSpecificity1) -}
76543082b0a596d837131762f86a82ff
  $tcSpecificity1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Specificity"#) -}
4e968d3d850d55a32370b6d27acb2e08
  $tcTense :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15257321626758792659##
                   16458190437228791692##
                   InflectionData.$trModule
                   InflectionData.$tcTense1) -}
0dc616e2640a545a4a974067362028b9
  $tcTense1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Tense"#) -}
a69aadcb6a110762a1bb38706a3e5f63
  $tcTopic :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11066380949480162248##
                   18263784879637709476##
                   InflectionData.$trModule
                   InflectionData.$tcTopic1) -}
40c802146b3b283eb339da71fe26c2de
  $tcTopic1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Topic"#) -}
1b4ee8a5458db853e5a9a3cf1b0ad46a
  $tcTransitivity :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18358838189562246034##
                   4608286075112446850##
                   InflectionData.$trModule
                   InflectionData.$tcTransitivity1) -}
7cb1f3d4e09b9ed8429cd2e2de35537a
  $tcTransitivity1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Transitivity"#) -}
f7600800df3af9ac90908d7de80b12fc
  $tcVoice :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9870691900018711719##
                   6760849880763292413##
                   InflectionData.$trModule
                   InflectionData.$tcVoice1) -}
75f4a1e9fea311669851df0dfdaab32b
  $tcVoice1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Voice"#) -}
759b1fb482487ceaaf680cfdddcc1976
  $tcVolition :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3106500327960196784##
                   16553702220364364410##
                   InflectionData.$trModule
                   InflectionData.$tcVolition1) -}
2cf48a9d3785e75bfd72c4a0bf243688
  $tcVolition1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Volition"#) -}
450054df83c5cde1558f09d687e92313
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   InflectionData.$trModule2
                   InflectionData.$trModule1) -}
2bc10f66db99d6b6a269cf794d80b2ef
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "InflectionData"#) -}
a1da5d74d7aa9acf66a61c8ea007eb23
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "con-lang-gen-0.0.0.1-JpecSLrjfNmG1CUMEdSr39"#) -}
b53631eed1bb4f75bcc9a5699d81cbd0
  $w$c== ::
    (GHC.Classes.Eq a, GHC.Classes.Eq b, GHC.Classes.Eq c,
     GHC.Classes.Eq d, GHC.Classes.Eq e, GHC.Classes.Eq f,
     GHC.Classes.Eq g, GHC.Classes.Eq h, GHC.Classes.Eq i,
     GHC.Classes.Eq j, GHC.Classes.Eq k, GHC.Classes.Eq l,
     GHC.Classes.Eq m, GHC.Classes.Eq n, GHC.Classes.Eq o,
     GHC.Classes.Eq p, GHC.Classes.Eq q) =>
    a
    -> b
    -> c
    -> d
    -> e
    -> f
    -> g
    -> h
    -> i
    -> j
    -> k
    -> l
    -> m
    -> n
    -> o
    -> p
    -> q
    -> a
    -> b
    -> c
    -> d
    -> e
    -> f
    -> g
    -> h
    -> i
    -> j
    -> k
    -> l
    -> m
    -> n
    -> o
    -> p
    -> q
    -> GHC.Types.Bool
  {- Arity: 51, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
d68ca54ad1578af6a7184bc48163bc56
  $w$c==1 ::
    InflectionData.Manifest [InflectionData.Gender]
    -> InflectionData.Manifest [InflectionData.Animacy]
    -> InflectionData.Manifest [InflectionData.Case]
    -> InflectionData.Manifest [InflectionData.Number]
    -> InflectionData.Manifest [InflectionData.Definiteness]
    -> InflectionData.Manifest [InflectionData.Specificity]
    -> InflectionData.Manifest [InflectionData.Topic]
    -> InflectionData.Manifest [InflectionData.Person]
    -> InflectionData.Manifest [InflectionData.Honorific]
    -> InflectionData.Manifest [InflectionData.Polarity]
    -> InflectionData.Manifest [InflectionData.Tense]
    -> InflectionData.Manifest [InflectionData.Aspect]
    -> InflectionData.Manifest [InflectionData.Mood]
    -> InflectionData.Manifest [InflectionData.Voice]
    -> InflectionData.Manifest [InflectionData.Evidentiality]
    -> InflectionData.Manifest [InflectionData.Transitivity]
    -> InflectionData.Manifest [InflectionData.Volition]
    -> InflectionData.Manifest [InflectionData.Gender]
    -> InflectionData.Manifest [InflectionData.Animacy]
    -> InflectionData.Manifest [InflectionData.Case]
    -> InflectionData.Manifest [InflectionData.Number]
    -> InflectionData.Manifest [InflectionData.Definiteness]
    -> InflectionData.Manifest [InflectionData.Specificity]
    -> InflectionData.Manifest [InflectionData.Topic]
    -> InflectionData.Manifest [InflectionData.Person]
    -> InflectionData.Manifest [InflectionData.Honorific]
    -> InflectionData.Manifest [InflectionData.Polarity]
    -> InflectionData.Manifest [InflectionData.Tense]
    -> InflectionData.Manifest [InflectionData.Aspect]
    -> InflectionData.Manifest [InflectionData.Mood]
    -> InflectionData.Manifest [InflectionData.Voice]
    -> InflectionData.Manifest [InflectionData.Evidentiality]
    -> InflectionData.Manifest [InflectionData.Transitivity]
    -> InflectionData.Manifest [InflectionData.Volition]
    -> GHC.Types.Bool
  {- Arity: 34, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0] -}
9ed7145d50e8ac38536e68ec25367898
  $w$c==2 ::
    InflectionData.LexCat
    -> InflectionData.ManifestType
    -> [(PhonemeData.Morpheme,
         (InflectionData.Express InflectionData.Gender,
          InflectionData.Express InflectionData.Animacy,
          InflectionData.Express InflectionData.Case,
          InflectionData.Express InflectionData.Number,
          InflectionData.Express InflectionData.Definiteness,
          InflectionData.Express InflectionData.Specificity,
          InflectionData.Express InflectionData.Topic,
          InflectionData.Express InflectionData.Person,
          InflectionData.Express InflectionData.Honorific,
          InflectionData.Express InflectionData.Polarity,
          InflectionData.Express InflectionData.Tense,
          InflectionData.Express InflectionData.Aspect,
          InflectionData.Express InflectionData.Mood,
          InflectionData.Express InflectionData.Voice,
          InflectionData.Express InflectionData.Evidentiality,
          InflectionData.Express InflectionData.Transitivity,
          InflectionData.Express InflectionData.Volition))]
    -> InflectionData.LexCat
    -> InflectionData.ManifestType
    -> [(PhonemeData.Morpheme,
         (InflectionData.Express InflectionData.Gender,
          InflectionData.Express InflectionData.Animacy,
          InflectionData.Express InflectionData.Case,
          InflectionData.Express InflectionData.Number,
          InflectionData.Express InflectionData.Definiteness,
          InflectionData.Express InflectionData.Specificity,
          InflectionData.Express InflectionData.Topic,
          InflectionData.Express InflectionData.Person,
          InflectionData.Express InflectionData.Honorific,
          InflectionData.Express InflectionData.Polarity,
          InflectionData.Express InflectionData.Tense,
          InflectionData.Express InflectionData.Aspect,
          InflectionData.Express InflectionData.Mood,
          InflectionData.Express InflectionData.Voice,
          InflectionData.Express InflectionData.Evidentiality,
          InflectionData.Express InflectionData.Transitivity,
          InflectionData.Express InflectionData.Volition))]
    -> GHC.Types.Bool
  {- Arity: 6,
     Strictness: <S,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: InflectionData.LexCat)
                   (ww1 :: InflectionData.ManifestType)
                   (ww2 :: [(PhonemeData.Morpheme,
                             (InflectionData.Express InflectionData.Gender,
                              InflectionData.Express InflectionData.Animacy,
                              InflectionData.Express InflectionData.Case,
                              InflectionData.Express InflectionData.Number,
                              InflectionData.Express InflectionData.Definiteness,
                              InflectionData.Express InflectionData.Specificity,
                              InflectionData.Express InflectionData.Topic,
                              InflectionData.Express InflectionData.Person,
                              InflectionData.Express InflectionData.Honorific,
                              InflectionData.Express InflectionData.Polarity,
                              InflectionData.Express InflectionData.Tense,
                              InflectionData.Express InflectionData.Aspect,
                              InflectionData.Express InflectionData.Mood,
                              InflectionData.Express InflectionData.Voice,
                              InflectionData.Express InflectionData.Evidentiality,
                              InflectionData.Express InflectionData.Transitivity,
                              InflectionData.Express InflectionData.Volition))])
                   (ww3 :: InflectionData.LexCat)
                   (ww4 :: InflectionData.ManifestType)
                   (ww5 :: [(PhonemeData.Morpheme,
                             (InflectionData.Express InflectionData.Gender,
                              InflectionData.Express InflectionData.Animacy,
                              InflectionData.Express InflectionData.Case,
                              InflectionData.Express InflectionData.Number,
                              InflectionData.Express InflectionData.Definiteness,
                              InflectionData.Express InflectionData.Specificity,
                              InflectionData.Express InflectionData.Topic,
                              InflectionData.Express InflectionData.Person,
                              InflectionData.Express InflectionData.Honorific,
                              InflectionData.Express InflectionData.Polarity,
                              InflectionData.Express InflectionData.Tense,
                              InflectionData.Express InflectionData.Aspect,
                              InflectionData.Express InflectionData.Mood,
                              InflectionData.Express InflectionData.Voice,
                              InflectionData.Express InflectionData.Evidentiality,
                              InflectionData.Express InflectionData.Transitivity,
                              InflectionData.Express InflectionData.Volition))]) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==#
                           (GHC.Prim.dataToTag# @ InflectionData.LexCat ww)
                           (GHC.Prim.dataToTag# @ InflectionData.LexCat ww3)) of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case ww1 of wild1 {
                        InflectionData.Particle
                        -> case ww4 of wild2 {
                             DEFAULT -> GHC.Types.False
                             InflectionData.Particle
                             -> GHC.Classes.$fEq[]_$c==
                                  @ (PhonemeData.Morpheme,
                                     (InflectionData.Express InflectionData.Gender,
                                      InflectionData.Express InflectionData.Animacy,
                                      InflectionData.Express InflectionData.Case,
                                      InflectionData.Express InflectionData.Number,
                                      InflectionData.Express InflectionData.Definiteness,
                                      InflectionData.Express InflectionData.Specificity,
                                      InflectionData.Express InflectionData.Topic,
                                      InflectionData.Express InflectionData.Person,
                                      InflectionData.Express InflectionData.Honorific,
                                      InflectionData.Express InflectionData.Polarity,
                                      InflectionData.Express InflectionData.Tense,
                                      InflectionData.Express InflectionData.Aspect,
                                      InflectionData.Express InflectionData.Mood,
                                      InflectionData.Express InflectionData.Voice,
                                      InflectionData.Express InflectionData.Evidentiality,
                                      InflectionData.Express InflectionData.Transitivity,
                                      InflectionData.Express InflectionData.Volition))
                                  InflectionData.$fEqManifestSystem_$s$fEq(,)
                                  ww2
                                  ww5 }
                        InflectionData.Prefix
                        -> case ww4 of wild2 {
                             DEFAULT -> GHC.Types.False
                             InflectionData.Prefix
                             -> GHC.Classes.$fEq[]_$c==
                                  @ (PhonemeData.Morpheme,
                                     (InflectionData.Express InflectionData.Gender,
                                      InflectionData.Express InflectionData.Animacy,
                                      InflectionData.Express InflectionData.Case,
                                      InflectionData.Express InflectionData.Number,
                                      InflectionData.Express InflectionData.Definiteness,
                                      InflectionData.Express InflectionData.Specificity,
                                      InflectionData.Express InflectionData.Topic,
                                      InflectionData.Express InflectionData.Person,
                                      InflectionData.Express InflectionData.Honorific,
                                      InflectionData.Express InflectionData.Polarity,
                                      InflectionData.Express InflectionData.Tense,
                                      InflectionData.Express InflectionData.Aspect,
                                      InflectionData.Express InflectionData.Mood,
                                      InflectionData.Express InflectionData.Voice,
                                      InflectionData.Express InflectionData.Evidentiality,
                                      InflectionData.Express InflectionData.Transitivity,
                                      InflectionData.Express InflectionData.Volition))
                                  InflectionData.$fEqManifestSystem_$s$fEq(,)
                                  ww2
                                  ww5 }
                        InflectionData.Suffix
                        -> case ww4 of wild2 {
                             DEFAULT -> GHC.Types.False
                             InflectionData.Suffix
                             -> GHC.Classes.$fEq[]_$c==
                                  @ (PhonemeData.Morpheme,
                                     (InflectionData.Express InflectionData.Gender,
                                      InflectionData.Express InflectionData.Animacy,
                                      InflectionData.Express InflectionData.Case,
                                      InflectionData.Express InflectionData.Number,
                                      InflectionData.Express InflectionData.Definiteness,
                                      InflectionData.Express InflectionData.Specificity,
                                      InflectionData.Express InflectionData.Topic,
                                      InflectionData.Express InflectionData.Person,
                                      InflectionData.Express InflectionData.Honorific,
                                      InflectionData.Express InflectionData.Polarity,
                                      InflectionData.Express InflectionData.Tense,
                                      InflectionData.Express InflectionData.Aspect,
                                      InflectionData.Express InflectionData.Mood,
                                      InflectionData.Express InflectionData.Voice,
                                      InflectionData.Express InflectionData.Evidentiality,
                                      InflectionData.Express InflectionData.Transitivity,
                                      InflectionData.Express InflectionData.Volition))
                                  InflectionData.$fEqManifestSystem_$s$fEq(,)
                                  ww2
                                  ww5 } } }) -}
6316452e39bc49500385d38be925e2a3
  $w$creadPrec ::
    GHC.Prim.Int#
    -> forall b.
       (InflectionData.InflectionSystem
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,U><L,C(U)>, Inline: [0] -}
0f44b0e4596fef899e22d05cef221b1d
  $w$cshowsPrec ::
    (GHC.Show.Show a, GHC.Show.Show b, GHC.Show.Show c,
     GHC.Show.Show d, GHC.Show.Show e, GHC.Show.Show f, GHC.Show.Show g,
     GHC.Show.Show h, GHC.Show.Show i, GHC.Show.Show j, GHC.Show.Show k,
     GHC.Show.Show l, GHC.Show.Show m, GHC.Show.Show n, GHC.Show.Show o,
     GHC.Show.Show p, GHC.Show.Show q) =>
    a
    -> b
    -> c
    -> d
    -> e
    -> f
    -> g
    -> h
    -> i
    -> j
    -> k
    -> l
    -> m
    -> n
    -> o
    -> p
    -> q
    -> GHC.Show.ShowS
  {- Arity: 34,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
4e33e0bcf50cecb3bec919a410a917b8
  $w$cshowsPrec1 ::
    InflectionData.Animacy -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: InflectionData.Animacy)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   InflectionData.UANI
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadAnimacy27 w1
                   InflectionData.AN
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadAnimacy24 w1
                   InflectionData.HUM
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadAnimacy21 w1
                   InflectionData.NHUM
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadAnimacy18 w1
                   InflectionData.ZO
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadAnimacy15 w1
                   InflectionData.INAN
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadAnimacy12
                        w1 }) -}
a794f63e2da02424ad65302f61d49d0d
  $w$cshowsPrec10 ::
    InflectionData.Tense -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0] -}
a933e005d0b61de32dcb62fc71171e9c
  $w$cshowsPrec11 ::
    InflectionData.Mood -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: InflectionData.Mood) (w1 :: GHC.Base.String) ->
                 case w of wild {
                   InflectionData.UMOO
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest258 w1
                   InflectionData.IND
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest255 w1
                   InflectionData.IRR
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest252 w1
                   InflectionData.DEO
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest249 w1
                   InflectionData.IMP
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest246 w1
                   InflectionData.JUS
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest243 w1
                   InflectionData.OPT
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest240 w1
                   InflectionData.EPIS
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest237 w1
                   InflectionData.SBJV
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest234 w1
                   InflectionData.POT
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest231 w1
                   InflectionData.COND
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadManifest228
                        w1 }) -}
8a5a669af2386e102c8f50cb27f7b624
  $w$cshowsPrec12 ::
    InflectionData.Voice -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: InflectionData.Voice)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   InflectionData.UVOI
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest278 w1
                   InflectionData.ACTIVE
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest275 w1
                   InflectionData.MIDDLE
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest272 w1
                   InflectionData.PASSIVE
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadManifest269
                        w1 }) -}
fbfbb10e2c2bf7855f3005c5f582ce67
  $w$cshowsPrec13 ::
    InflectionData.Transitivity -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: InflectionData.Transitivity)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   InflectionData.UTRA
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest304 w1
                   InflectionData.NTRANS
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest301 w1
                   InflectionData.TRANS
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest298 w1
                   InflectionData.MTRANS
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest295 w1
                   InflectionData.DITRANS
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadManifest292
                        w1 }) -}
38000e94b56cd6522df92f65fe6350c8
  $w$cshowsPrec14 ::
    GHC.Prim.Int#
    -> InflectionData.Manifest [InflectionData.Gender]
    -> InflectionData.Manifest [InflectionData.Animacy]
    -> InflectionData.Manifest [InflectionData.Case]
    -> InflectionData.Manifest [InflectionData.Number]
    -> InflectionData.Manifest [InflectionData.Definiteness]
    -> InflectionData.Manifest [InflectionData.Specificity]
    -> InflectionData.Manifest [InflectionData.Topic]
    -> InflectionData.Manifest [InflectionData.Person]
    -> InflectionData.Manifest [InflectionData.Honorific]
    -> InflectionData.Manifest [InflectionData.Polarity]
    -> InflectionData.Manifest [InflectionData.Tense]
    -> InflectionData.Manifest [InflectionData.Aspect]
    -> InflectionData.Manifest [InflectionData.Mood]
    -> InflectionData.Manifest [InflectionData.Voice]
    -> InflectionData.Manifest [InflectionData.Evidentiality]
    -> InflectionData.Manifest [InflectionData.Transitivity]
    -> InflectionData.Manifest [InflectionData.Volition]
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 19,
     Strictness: <S,U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,U>,
     Inline: [0] -}
3578a365ab634279655cb91c03a19c28
  $w$cshowsPrec15 ::
    InflectionData.LexCat -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: InflectionData.LexCat)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   InflectionData.Comp
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadLexCat47 w1
                   InflectionData.Infl
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadLexCat44 w1
                   InflectionData.Verb
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadLexCat41 w1
                   InflectionData.Det
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadLexCat38 w1
                   InflectionData.Noun
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadLexCat35 w1
                   InflectionData.Adpo
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadLexCat32 w1
                   InflectionData.Adj
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadLexCat29 w1
                   InflectionData.Adv
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadLexCat26 w1
                   InflectionData.Obj
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadLexCat23 w1
                   InflectionData.Subj
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadLexCat20 w1
                   InflectionData.Pron
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadLexCat17
                        w1 }) -}
677e71acbe1d0c53534632b1806c94f3
  $w$cshowsPrec16 ::
    InflectionData.ManifestType -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: InflectionData.ManifestType)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   InflectionData.Particle
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadManifestType15
                        w1
                   InflectionData.Prefix
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadManifestType12
                        w1
                   InflectionData.Suffix
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadManifestType9
                        w1 }) -}
6fb3d15dec5a1fd023a4704d57cac2a0
  $w$cshowsPrec17 ::
    InflectionData.Specificity -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: InflectionData.Specificity)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   InflectionData.USPE
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest58 w1
                   InflectionData.SPEC
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest55 w1
                   InflectionData.NSPEC
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadManifest52
                        w1 }) -}
d8981f1670fc020ebc5d708b5dd733da
  $w$cshowsPrec18 ::
    InflectionData.Topic -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: InflectionData.Topic)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   InflectionData.UTOP
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest74 w1
                   InflectionData.TOP
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest71 w1
                   InflectionData.NTOP
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadManifest68
                        w1 }) -}
969cd5a99a727ddd44430477f29dd629
  $w$cshowsPrec19 ::
    InflectionData.Polarity -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: InflectionData.Polarity)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   InflectionData.UPOL
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest128 w1
                   InflectionData.AFF
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest125 w1
                   InflectionData.NEG
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadManifest122
                        w1 }) -}
cc1d01770048a1b059770fc511c26180
  $w$cshowsPrec2 ::
    InflectionData.Aspect -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: InflectionData.Aspect)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   InflectionData.UASP
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadAspect35 w1
                   InflectionData.NNPROG
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadAspect32 w1
                   InflectionData.PFV
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadAspect29 w1
                   InflectionData.IPFV
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadAspect26 w1
                   InflectionData.HAB
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadAspect23 w1
                   InflectionData.CONT
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadAspect20 w1
                   InflectionData.NPROG
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadAspect17 w1
                   InflectionData.PROG
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadAspect14
                        w1 }) -}
3559279b2cc9168c42f1489c451a8e43
  $w$cshowsPrec20 ::
    InflectionData.Volition -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: InflectionData.Volition)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   InflectionData.UVOL
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest320 w1
                   InflectionData.VOL
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest317 w1
                   InflectionData.NVOL
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadManifest314
                        w1 }) -}
1393fb5adf6de1a00c0fa529e4067a8c
  $w$cshowsPrec21 ::
    GHC.Prim.Int#
    -> InflectionData.LexCat
    -> InflectionData.ManifestType
    -> [(PhonemeData.Morpheme,
         (InflectionData.Express InflectionData.Gender,
          InflectionData.Express InflectionData.Animacy,
          InflectionData.Express InflectionData.Case,
          InflectionData.Express InflectionData.Number,
          InflectionData.Express InflectionData.Definiteness,
          InflectionData.Express InflectionData.Specificity,
          InflectionData.Express InflectionData.Topic,
          InflectionData.Express InflectionData.Person,
          InflectionData.Express InflectionData.Honorific,
          InflectionData.Express InflectionData.Polarity,
          InflectionData.Express InflectionData.Tense,
          InflectionData.Express InflectionData.Aspect,
          InflectionData.Express InflectionData.Mood,
          InflectionData.Express InflectionData.Voice,
          InflectionData.Express InflectionData.Evidentiality,
          InflectionData.Express InflectionData.Transitivity,
          InflectionData.Express InflectionData.Volition))]
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 5, Strictness: <S,U><L,1*U><L,1*U><L,1*U><L,U>,
     Inline: [0] -}
c7ab55970bdd5f1f3c2a1893488ee946
  $w$cshowsPrec3 ::
    InflectionData.Case -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0] -}
13bfeba0cb3001719a9764357d888c67
  $w$cshowsPrec4 ::
    InflectionData.Definiteness -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: InflectionData.Definiteness)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   InflectionData.UDEF
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadDefiniteness15
                        w1
                   InflectionData.DEF
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadDefiniteness12
                        w1
                   InflectionData.INDF
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadDefiniteness9
                        w1 }) -}
d496e50507466d81d95f22dd4857ca16
  $w$cshowsPrec5 ::
    InflectionData.Evidentiality -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: InflectionData.Evidentiality)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   InflectionData.UEVI
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadEvidentiality43
                        w1
                   InflectionData.EXP
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadEvidentiality40
                        w1
                   InflectionData.VIS
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadEvidentiality37
                        w1
                   InflectionData.NVIS
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadEvidentiality34
                        w1
                   InflectionData.AUD
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadEvidentiality31
                        w1
                   InflectionData.INFER
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadEvidentiality28
                        w1
                   InflectionData.REP
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadEvidentiality25
                        w1
                   InflectionData.HSY
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadEvidentiality22
                        w1
                   InflectionData.QUO
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadEvidentiality19
                        w1
                   InflectionData.ASS
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadEvidentiality16
                        w1 }) -}
64c563e614d6b39e628a87a4b86c4bcb
  $w$cshowsPrec6 ::
    InflectionData.Gender -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: InflectionData.Gender)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   InflectionData.UGEN
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadGender23 w1
                   InflectionData.M
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadGender20 w1
                   InflectionData.F
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadGender17 w1
                   InflectionData.COM
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadGender14 w1
                   InflectionData.N
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadGender11
                        w1 }) -}
819df3b7803a0b6e1c638b12031d1054
  $w$cshowsPrec7 ::
    InflectionData.Number -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: InflectionData.Number)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   InflectionData.UNUM
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest40 w1
                   InflectionData.SG
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest37 w1
                   InflectionData.DU
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest34 w1
                   InflectionData.TRI
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest31 w1
                   InflectionData.PA
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest28 w1
                   InflectionData.PL
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadManifest25
                        w1 }) -}
9a6bbd54f38dfeb1bf3b7d7991f3da1c
  $w$cshowsPrec8 ::
    InflectionData.Person -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: InflectionData.Person)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   InflectionData.UPER
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest110 w1
                   InflectionData.FIRST
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest107 w1
                   InflectionData.FSTINCL
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest104 w1
                   InflectionData.FSTEXCL
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest101 w1
                   InflectionData.SECOND
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest98 w1
                   InflectionData.THIRD
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest95 w1
                   InflectionData.THRDPROX
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadManifest92 w1
                   InflectionData.THRDOBV
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadManifest89
                        w1 }) -}
87a0680d1783cb156a72782bde86c25f
  $w$cshowsPrec9 ::
    InflectionData.Honorific -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: InflectionData.Honorific)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   InflectionData.UHON
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadHonorific19 w1
                   InflectionData.FAM
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadHonorific16 w1
                   InflectionData.NEU
                   -> GHC.Base.++ @ GHC.Types.Char InflectionData.$fReadHonorific13 w1
                   InflectionData.FORM
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        InflectionData.$fReadHonorific10
                        w1 }) -}
3578a365ab634279655cb91c03a19c28
  $w$ctoEnum :: GHC.Prim.Int# -> InflectionData.LexCat
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 0#) of wild {
                   GHC.Types.False -> InflectionData.$fEnumLexCat1 ww
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ww 10#) of wild1 {
                        GHC.Types.False -> InflectionData.$fEnumLexCat1 ww
                        GHC.Types.True
                        -> GHC.Prim.tagToEnum# @ InflectionData.LexCat ww } }) -}
4e33e0bcf50cecb3bec919a410a917b8
  data Animacy = UANI | AN | HUM | NHUM | ZO | INAN
cc1d01770048a1b059770fc511c26180
  data Aspect
    = UASP | NNPROG | PFV | IPFV | HAB | CONT | NPROG | PROG
c7ab55970bdd5f1f3c2a1893488ee946
  data Case
    = UCAS
    | INTR
    | ACC
    | ERG
    | PEG
    | INDIR
    | SEC
    | NOM
    | ABS
    | MTR
    | DIR
    | PRIM
    | ERG2
    | NOM2
    | ABS2
    | ABS3
    | DTR
    | OBJ
    | DRT1
    | TR
    | DRT2
    | OBL1
    | OBL2
    | OBL3
    | OBL4
    | OBL5
    | OBL6
    | ADP
    | PREP
    | POST
    | LAT
    | LOC
    | ABL
    | COMP
    | EQU
    | IDEN
    | ABE
    | DAT
    | INS
    | COMIT
    | INSCOMIT
    | ORN
    | BEN
    | CAUS
    | DISTR
    | GEN
    | POSS
    | PART
    | VOC
13bfeba0cb3001719a9764357d888c67
  data Definiteness = UDEF | DEF | INDF
d496e50507466d81d95f22dd4857ca16
  data Evidentiality
    = UEVI | EXP | VIS | NVIS | AUD | INFER | REP | HSY | QUO | ASS
63d70c4f2d77c644511c6d588663f39e
  data Express a = NoExpress | Express {getExp :: a}
64c563e614d6b39e628a87a4b86c4bcb
  data Gender = UGEN | M | F | COM | N
87a0680d1783cb156a72782bde86c25f
  data Honorific = UHON | FAM | NEU | FORM
6316452e39bc49500385d38be925e2a3
  data InflectionSystem
    = InflectionSystem {genSys :: InflectionData.Manifest
                                    [InflectionData.Gender],
                        aniSys :: InflectionData.Manifest [InflectionData.Animacy],
                        casSys :: InflectionData.Manifest [InflectionData.Case],
                        numSys :: InflectionData.Manifest [InflectionData.Number],
                        defSys :: InflectionData.Manifest [InflectionData.Definiteness],
                        speSys :: InflectionData.Manifest [InflectionData.Specificity],
                        topSys :: InflectionData.Manifest [InflectionData.Topic],
                        perSys :: InflectionData.Manifest [InflectionData.Person],
                        honSys :: InflectionData.Manifest [InflectionData.Honorific],
                        polSys :: InflectionData.Manifest [InflectionData.Polarity],
                        tenSys :: InflectionData.Manifest [InflectionData.Tense],
                        aspSys :: InflectionData.Manifest [InflectionData.Aspect],
                        mooSys :: InflectionData.Manifest [InflectionData.Mood],
                        voiSys :: InflectionData.Manifest [InflectionData.Voice],
                        eviSys :: InflectionData.Manifest [InflectionData.Evidentiality],
                        traSys :: InflectionData.Manifest [InflectionData.Transitivity],
                        volSys :: InflectionData.Manifest [InflectionData.Volition]}
3578a365ab634279655cb91c03a19c28
  data LexCat
    = Comp
    | Infl
    | Verb
    | Det
    | Noun
    | Adpo
    | Adj
    | Adv
    | Obj
    | Subj
    | Pron
a1f6ea453f44aabd626528c4893e70e2
  data Manifest a
    = NoManifest
    | Manifest [(InflectionData.LexCat, InflectionData.ManifestType,
                 GHC.Types.Int)]
               a
e5b6dc9a3e9edcf983171cd7d8ba6306
  data ManifestSystem
    = ManifestSystem {manSysLC :: InflectionData.LexCat,
                      manSysType :: InflectionData.ManifestType,
                      manSysCombos :: [(PhonemeData.Morpheme,
                                        (InflectionData.Express InflectionData.Gender,
                                         InflectionData.Express InflectionData.Animacy,
                                         InflectionData.Express InflectionData.Case,
                                         InflectionData.Express InflectionData.Number,
                                         InflectionData.Express InflectionData.Definiteness,
                                         InflectionData.Express InflectionData.Specificity,
                                         InflectionData.Express InflectionData.Topic,
                                         InflectionData.Express InflectionData.Person,
                                         InflectionData.Express InflectionData.Honorific,
                                         InflectionData.Express InflectionData.Polarity,
                                         InflectionData.Express InflectionData.Tense,
                                         InflectionData.Express InflectionData.Aspect,
                                         InflectionData.Express InflectionData.Mood,
                                         InflectionData.Express InflectionData.Voice,
                                         InflectionData.Express InflectionData.Evidentiality,
                                         InflectionData.Express InflectionData.Transitivity,
                                         InflectionData.Express InflectionData.Volition))]}
677e71acbe1d0c53534632b1806c94f3
  data ManifestType = Particle | Prefix | Suffix
a933e005d0b61de32dcb62fc71171e9c
  data Mood
    = UMOO
    | IND
    | IRR
    | DEO
    | IMP
    | JUS
    | OPT
    | EPIS
    | SBJV
    | POT
    | COND
819df3b7803a0b6e1c638b12031d1054
  data Number = UNUM | SG | DU | TRI | PA | PL
9a6bbd54f38dfeb1bf3b7d7991f3da1c
  data Person
    = UPER
    | FIRST
    | FSTINCL
    | FSTEXCL
    | SECOND
    | THIRD
    | THRDPROX
    | THRDOBV
969cd5a99a727ddd44430477f29dd629
  data Polarity = UPOL | AFF | NEG
6fb3d15dec5a1fd023a4704d57cac2a0
  data Specificity = USPE | SPEC | NSPEC
a794f63e2da02424ad65302f61d49d0d
  data Tense
    = UTEN
    | PST
    | PRS
    | FUT
    | APRS
    | APST
    | AFUT
    | AFUT1
    | AFUT2
    | AFUT3
    | PPRS
    | PFUT
    | PPST
    | PPST1
    | PPST2
    | PPST3
    | PSTPER
    | PRSPER
    | FUTPER
d8981f1670fc020ebc5d708b5dd733da
  data Topic = UTOP | TOP | NTOP
fbfbb10e2c2bf7855f3005c5f582ce67
  data Transitivity = UTRA | NTRANS | TRANS | MTRANS | DITRANS
8a5a669af2386e102c8f50cb27f7b624
  data Voice = UVOI | ACTIVE | MIDDLE | PASSIVE
3559279b2cc9168c42f1489c451a8e43
  data Volition = UVOL | VOL | NVOL
54c757caf6df5b43beb9e25534aa884f
  aniSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest [InflectionData.Animacy]
  RecSel Left InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLLLLLLLLLLLLL),1*U(A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: InflectionData.InflectionSystem) ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ->
                 ds2 }) -}
e08ee438eb6f59d49c711f68f337cb0c
  aspSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest [InflectionData.Aspect]
  RecSel Left InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLSLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,1*U,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: InflectionData.InflectionSystem) ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ->
                 ds12 }) -}
b828d3ab5869f967e6490a44bae850c9
  casSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest [InflectionData.Case]
  RecSel Left InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLLLLLLLLLLLLL),1*U(A,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: InflectionData.InflectionSystem) ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ->
                 ds3 }) -}
3397aeb82ba18976429cbf728c947a30
  defSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest [InflectionData.Definiteness]
  RecSel Left InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSLLLLLLLLLLLL),1*U(A,A,A,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: InflectionData.InflectionSystem) ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ->
                 ds5 }) -}
168f523a3a01bcf7fb22900702cb7e4c
  eviSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest [InflectionData.Evidentiality]
  RecSel Left InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLSLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: InflectionData.InflectionSystem) ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ->
                 ds15 }) -}
318c9a0732a9580752bd7127aaf8a5f0
  genSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest [InflectionData.Gender]
  RecSel Left InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLLLLLLLLLLLLL),1*U(1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: InflectionData.InflectionSystem) ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ->
                 ds1 }) -}
1c91edaa9702644d4c15415d81c45849
  getExp :: InflectionData.Express a -> a
  RecSel Left InflectionData.Express
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: InflectionData.Express a) ->
                 case ds of wild {
                   InflectionData.NoExpress -> InflectionData.getExp1 @ a
                   InflectionData.Express ds1 -> ds1 }) -}
7cf2a202ce3d4301e61d42e85a7faaed
  getExp1 :: a
  {- Strictness: x -}
5cd9def220db579e733772134b63d6fd
  honSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest [InflectionData.Honorific]
  RecSel Left InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLSLLLLLLLL),1*U(A,A,A,A,A,A,A,A,1*U,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: InflectionData.InflectionSystem) ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ->
                 ds9 }) -}
e9c598f907ba26eaa52dabe8ea5b333c
  manSysCombos ::
    InflectionData.ManifestSystem
    -> [(PhonemeData.Morpheme,
         (InflectionData.Express InflectionData.Gender,
          InflectionData.Express InflectionData.Animacy,
          InflectionData.Express InflectionData.Case,
          InflectionData.Express InflectionData.Number,
          InflectionData.Express InflectionData.Definiteness,
          InflectionData.Express InflectionData.Specificity,
          InflectionData.Express InflectionData.Topic,
          InflectionData.Express InflectionData.Person,
          InflectionData.Express InflectionData.Honorific,
          InflectionData.Express InflectionData.Polarity,
          InflectionData.Express InflectionData.Tense,
          InflectionData.Express InflectionData.Aspect,
          InflectionData.Express InflectionData.Mood,
          InflectionData.Express InflectionData.Voice,
          InflectionData.Express InflectionData.Evidentiality,
          InflectionData.Express InflectionData.Transitivity,
          InflectionData.Express InflectionData.Volition))]
  RecSel Left InflectionData.ManifestSystem
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: InflectionData.ManifestSystem) ->
                 case ds of wild { InflectionData.ManifestSystem ds1 ds2 ds3 ->
                 ds3 }) -}
98649df2423aa497651e70a91ab5e292
  manSysLC :: InflectionData.ManifestSystem -> InflectionData.LexCat
  RecSel Left InflectionData.ManifestSystem
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: InflectionData.ManifestSystem) ->
                 case ds of wild { InflectionData.ManifestSystem ds1 ds2 ds3 ->
                 ds1 }) -}
843cf396a28a4b33e16e375959441e44
  manSysType ::
    InflectionData.ManifestSystem -> InflectionData.ManifestType
  RecSel Left InflectionData.ManifestSystem
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: InflectionData.ManifestSystem) ->
                 case ds of wild { InflectionData.ManifestSystem ds1 ds2 ds3 ->
                 ds2 }) -}
157616105aa19e6649633c8313d7d6ec
  mooSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest [InflectionData.Mood]
  RecSel Left InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLSLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,1*U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: InflectionData.InflectionSystem) ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ->
                 ds13 }) -}
e83f2fe42687da5422aaf3b493ee8c77
  numSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest [InflectionData.Number]
  RecSel Left InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLLLLLLLLLLLLL),1*U(A,A,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: InflectionData.InflectionSystem) ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ->
                 ds4 }) -}
105c1deb153093d2254afa2aba450908
  perSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest [InflectionData.Person]
  RecSel Left InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLSLLLLLLLLL),1*U(A,A,A,A,A,A,A,1*U,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: InflectionData.InflectionSystem) ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ->
                 ds8 }) -}
994e2324a22103a3911bc52e4e6ac359
  polSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest [InflectionData.Polarity]
  RecSel Left InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLSLLLLLLL),1*U(A,A,A,A,A,A,A,A,A,1*U,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: InflectionData.InflectionSystem) ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ->
                 ds10 }) -}
f87a1009a1838c9ef1244a98d601bbbc
  speSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest [InflectionData.Specificity]
  RecSel Left InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLSLLLLLLLLLLL),1*U(A,A,A,A,A,1*U,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: InflectionData.InflectionSystem) ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ->
                 ds6 }) -}
1b6a144580cda0a43c6c3181bc4fab82
  tenSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest [InflectionData.Tense]
  RecSel Left InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLSLLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,1*U,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: InflectionData.InflectionSystem) ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ->
                 ds11 }) -}
676fb55f6d328d3554e6b91f98da59d9
  topSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest [InflectionData.Topic]
  RecSel Left InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLSLLLLLLLLLL),1*U(A,A,A,A,A,A,1*U,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: InflectionData.InflectionSystem) ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ->
                 ds7 }) -}
5bc89fcfed80c0ce0223c818627d29e1
  traSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest [InflectionData.Transitivity]
  RecSel Left InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLLSL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: InflectionData.InflectionSystem) ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ->
                 ds16 }) -}
f704f82fd9f3ca5a605cd25e89e3dd01
  voiSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest [InflectionData.Voice]
  RecSel Left InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLSLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: InflectionData.InflectionSystem) ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ->
                 ds14 }) -}
8cca46643aaa93795b2eea40e62718f1
  volSys ::
    InflectionData.InflectionSystem
    -> InflectionData.Manifest [InflectionData.Volition]
  RecSel Left InflectionData.InflectionSystem
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLLLS),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: InflectionData.InflectionSystem) ->
                 case ds of wild { InflectionData.InflectionSystem ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ->
                 ds17 }) -}
instance [safe] GHC.Enum.Enum [InflectionData.LexCat]
  = InflectionData.$fEnumLexCat
instance [safe] GHC.Classes.Eq [(,,,,,,,,,,,,,,,,)]
  = InflectionData.$fEq(,,,,,,,,,,,,,,,,)
instance [safe] GHC.Classes.Eq [InflectionData.Animacy]
  = InflectionData.$fEqAnimacy
instance [safe] GHC.Classes.Eq [InflectionData.Aspect]
  = InflectionData.$fEqAspect
instance [safe] GHC.Classes.Eq [InflectionData.Case]
  = InflectionData.$fEqCase
instance [safe] GHC.Classes.Eq [InflectionData.Definiteness]
  = InflectionData.$fEqDefiniteness
instance [safe] GHC.Classes.Eq [InflectionData.Evidentiality]
  = InflectionData.$fEqEvidentiality
instance [safe] GHC.Classes.Eq [InflectionData.Express]
  = InflectionData.$fEqExpress
instance [safe] GHC.Classes.Eq [InflectionData.Gender]
  = InflectionData.$fEqGender
instance [safe] GHC.Classes.Eq [InflectionData.Honorific]
  = InflectionData.$fEqHonorific
instance [safe] GHC.Classes.Eq [InflectionData.InflectionSystem]
  = InflectionData.$fEqInflectionSystem
instance [safe] GHC.Classes.Eq [InflectionData.LexCat]
  = InflectionData.$fEqLexCat
instance [safe] GHC.Classes.Eq [InflectionData.Manifest]
  = InflectionData.$fEqManifest
instance [safe] GHC.Classes.Eq [InflectionData.ManifestSystem]
  = InflectionData.$fEqManifestSystem
instance [safe] GHC.Classes.Eq [InflectionData.ManifestType]
  = InflectionData.$fEqManifestType
instance [safe] GHC.Classes.Eq [InflectionData.Mood]
  = InflectionData.$fEqMood
instance [safe] GHC.Classes.Eq [InflectionData.Number]
  = InflectionData.$fEqNumber
instance [safe] GHC.Classes.Eq [InflectionData.Person]
  = InflectionData.$fEqPerson
instance [safe] GHC.Classes.Eq [InflectionData.Polarity]
  = InflectionData.$fEqPolarity
instance [safe] GHC.Classes.Eq [InflectionData.Specificity]
  = InflectionData.$fEqSpecificity
instance [safe] GHC.Classes.Eq [InflectionData.Tense]
  = InflectionData.$fEqTense
instance [safe] GHC.Classes.Eq [InflectionData.Topic]
  = InflectionData.$fEqTopic
instance [safe] GHC.Classes.Eq [InflectionData.Transitivity]
  = InflectionData.$fEqTransitivity
instance [safe] GHC.Classes.Eq [InflectionData.Voice]
  = InflectionData.$fEqVoice
instance [safe] GHC.Classes.Eq [InflectionData.Volition]
  = InflectionData.$fEqVolition
instance [safe] GHC.Read.Read [InflectionData.Animacy]
  = InflectionData.$fReadAnimacy
instance [safe] GHC.Read.Read [InflectionData.Aspect]
  = InflectionData.$fReadAspect
instance [safe] GHC.Read.Read [InflectionData.Case]
  = InflectionData.$fReadCase
instance [safe] GHC.Read.Read [InflectionData.Definiteness]
  = InflectionData.$fReadDefiniteness
instance [safe] GHC.Read.Read [InflectionData.Evidentiality]
  = InflectionData.$fReadEvidentiality
instance [safe] GHC.Read.Read [InflectionData.Express]
  = InflectionData.$fReadExpress
instance [safe] GHC.Read.Read [InflectionData.Gender]
  = InflectionData.$fReadGender
instance [safe] GHC.Read.Read [InflectionData.Honorific]
  = InflectionData.$fReadHonorific
instance [safe] GHC.Read.Read [InflectionData.InflectionSystem]
  = InflectionData.$fReadInflectionSystem
instance [safe] GHC.Read.Read [InflectionData.LexCat]
  = InflectionData.$fReadLexCat
instance [safe] GHC.Read.Read [InflectionData.Manifest]
  = InflectionData.$fReadManifest
instance [safe] GHC.Read.Read [InflectionData.ManifestType]
  = InflectionData.$fReadManifestType
instance [safe] GHC.Read.Read [InflectionData.Mood]
  = InflectionData.$fReadMood
instance [safe] GHC.Read.Read [InflectionData.Number]
  = InflectionData.$fReadNumber
instance [safe] GHC.Read.Read [InflectionData.Person]
  = InflectionData.$fReadPerson
instance [safe] GHC.Read.Read [InflectionData.Polarity]
  = InflectionData.$fReadPolarity
instance [safe] GHC.Read.Read [InflectionData.Specificity]
  = InflectionData.$fReadSpecificity
instance [safe] GHC.Read.Read [InflectionData.Tense]
  = InflectionData.$fReadTense
instance [safe] GHC.Read.Read [InflectionData.Topic]
  = InflectionData.$fReadTopic
instance [safe] GHC.Read.Read [InflectionData.Transitivity]
  = InflectionData.$fReadTransitivity
instance [safe] GHC.Read.Read [InflectionData.Voice]
  = InflectionData.$fReadVoice
instance [safe] GHC.Read.Read [InflectionData.Volition]
  = InflectionData.$fReadVolition
instance [safe] GHC.Show.Show [(,,,,,,,,,,,,,,,,)]
  = InflectionData.$fShow(,,,,,,,,,,,,,,,,)
instance [safe] GHC.Show.Show [InflectionData.Animacy]
  = InflectionData.$fShowAnimacy
instance [safe] GHC.Show.Show [InflectionData.Aspect]
  = InflectionData.$fShowAspect
instance [safe] GHC.Show.Show [InflectionData.Case]
  = InflectionData.$fShowCase
instance [safe] GHC.Show.Show [InflectionData.Definiteness]
  = InflectionData.$fShowDefiniteness
instance [safe] GHC.Show.Show [InflectionData.Evidentiality]
  = InflectionData.$fShowEvidentiality
instance [safe] GHC.Show.Show [InflectionData.Express]
  = InflectionData.$fShowExpress
instance [safe] GHC.Show.Show [InflectionData.Gender]
  = InflectionData.$fShowGender
instance [safe] GHC.Show.Show [InflectionData.Honorific]
  = InflectionData.$fShowHonorific
instance [safe] GHC.Show.Show [InflectionData.InflectionSystem]
  = InflectionData.$fShowInflectionSystem
instance [safe] GHC.Show.Show [InflectionData.LexCat]
  = InflectionData.$fShowLexCat
instance [safe] GHC.Show.Show [InflectionData.Manifest]
  = InflectionData.$fShowManifest
instance [safe] GHC.Show.Show [InflectionData.ManifestSystem]
  = InflectionData.$fShowManifestSystem
instance [safe] GHC.Show.Show [InflectionData.ManifestType]
  = InflectionData.$fShowManifestType
instance [safe] GHC.Show.Show [InflectionData.Mood]
  = InflectionData.$fShowMood
instance [safe] GHC.Show.Show [InflectionData.Number]
  = InflectionData.$fShowNumber
instance [safe] GHC.Show.Show [InflectionData.Person]
  = InflectionData.$fShowPerson
instance [safe] GHC.Show.Show [InflectionData.Polarity]
  = InflectionData.$fShowPolarity
instance [safe] GHC.Show.Show [InflectionData.Specificity]
  = InflectionData.$fShowSpecificity
instance [safe] GHC.Show.Show [InflectionData.Tense]
  = InflectionData.$fShowTense
instance [safe] GHC.Show.Show [InflectionData.Topic]
  = InflectionData.$fShowTopic
instance [safe] GHC.Show.Show [InflectionData.Transitivity]
  = InflectionData.$fShowTransitivity
instance [safe] GHC.Show.Show [InflectionData.Voice]
  = InflectionData.$fShowVoice
instance [safe] GHC.Show.Show [InflectionData.Volition]
  = InflectionData.$fShowVolition
"SPEC $c/= @ Animacy" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                 InflectionData.Animacy)
  InflectionData.$fEqExpress_$c/= @ InflectionData.Animacy $dEq
  = InflectionData.$fEqExpress_$s$c/=1
"SPEC $c/= @ Aspect" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                InflectionData.Aspect)
  InflectionData.$fEqExpress_$c/= @ InflectionData.Aspect $dEq
  = InflectionData.$fEqExpress_$s$c/=9
"SPEC $c/= @ Definiteness" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                      InflectionData.Definiteness)
  InflectionData.$fEqExpress_$c/= @ InflectionData.Definiteness $dEq
  = InflectionData.$fEqExpress_$s$c/=3
"SPEC $c/= @ Evidentiality" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                       InflectionData.Evidentiality)
  InflectionData.$fEqExpress_$c/= @ InflectionData.Evidentiality $dEq
  = InflectionData.$fEqExpress_$s$c/=11
"SPEC $c/= @ Gender" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                InflectionData.Gender)
  InflectionData.$fEqExpress_$c/= @ InflectionData.Gender $dEq
  = InflectionData.$fEqExpress_$s$c/=
"SPEC $c/= @ Honorific" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                   InflectionData.Honorific)
  InflectionData.$fEqExpress_$c/= @ InflectionData.Honorific $dEq
  = InflectionData.$fEqExpress_$s$c/=7
"SPEC $c/= @ Number" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                InflectionData.Number)
  InflectionData.$fEqExpress_$c/= @ InflectionData.Number $dEq
  = InflectionData.$fEqExpress_$s$c/=2
"SPEC $c/= @ Person" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                InflectionData.Person)
  InflectionData.$fEqExpress_$c/= @ InflectionData.Person $dEq
  = InflectionData.$fEqExpress_$s$c/=6
"SPEC $c/= @ Polarity" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                  InflectionData.Polarity)
  InflectionData.$fEqExpress_$c/= @ InflectionData.Polarity $dEq
  = InflectionData.$fEqExpress_$s$c/=8
"SPEC $c/= @ Specificity" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                     InflectionData.Specificity)
  InflectionData.$fEqExpress_$c/= @ InflectionData.Specificity $dEq
  = InflectionData.$fEqExpress_$s$c/=4
"SPEC $c/= @ Topic" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                               InflectionData.Topic)
  InflectionData.$fEqExpress_$c/= @ InflectionData.Topic $dEq
  = InflectionData.$fEqExpress_$s$c/=5
"SPEC $c/= @ Transitivity" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                      InflectionData.Transitivity)
  InflectionData.$fEqExpress_$c/= @ InflectionData.Transitivity $dEq
  = InflectionData.$fEqExpress_$s$c/=12
"SPEC $c/= @ Voice" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                               InflectionData.Voice)
  InflectionData.$fEqExpress_$c/= @ InflectionData.Voice $dEq
  = InflectionData.$fEqExpress_$s$c/=10
"SPEC $c/= @ Volition" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                  InflectionData.Volition)
  InflectionData.$fEqExpress_$c/= @ InflectionData.Volition $dEq
  = InflectionData.$fEqExpress_$s$c/=13
"SPEC $c== @ Animacy" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                 InflectionData.Animacy)
  InflectionData.$fEqExpress_$c==10 @ InflectionData.Animacy $dEq
  = InflectionData.$fEqExpress_$s$c==1
"SPEC $c== @ Aspect" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                InflectionData.Aspect)
  InflectionData.$fEqExpress_$c==10 @ InflectionData.Aspect $dEq
  = InflectionData.$fEqExpress_$s$c==9
"SPEC $c== @ Definiteness" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                      InflectionData.Definiteness)
  InflectionData.$fEqExpress_$c==10 @ InflectionData.Definiteness
                                    $dEq
  = InflectionData.$fEqExpress_$s$c==3
"SPEC $c== @ Evidentiality" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                       InflectionData.Evidentiality)
  InflectionData.$fEqExpress_$c==10 @ InflectionData.Evidentiality
                                    $dEq
  = InflectionData.$fEqExpress_$s$c==11
"SPEC $c== @ Gender" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                InflectionData.Gender)
  InflectionData.$fEqExpress_$c==10 @ InflectionData.Gender $dEq
  = InflectionData.$fEqExpress_$s$c==
"SPEC $c== @ Honorific" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                   InflectionData.Honorific)
  InflectionData.$fEqExpress_$c==10 @ InflectionData.Honorific $dEq
  = InflectionData.$fEqExpress_$s$c==7
"SPEC $c== @ Number" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                InflectionData.Number)
  InflectionData.$fEqExpress_$c==10 @ InflectionData.Number $dEq
  = InflectionData.$fEqExpress_$s$c==2
"SPEC $c== @ Person" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                InflectionData.Person)
  InflectionData.$fEqExpress_$c==10 @ InflectionData.Person $dEq
  = InflectionData.$fEqExpress_$s$c==6
"SPEC $c== @ Polarity" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                  InflectionData.Polarity)
  InflectionData.$fEqExpress_$c==10 @ InflectionData.Polarity $dEq
  = InflectionData.$fEqExpress_$s$c==8
"SPEC $c== @ Specificity" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                     InflectionData.Specificity)
  InflectionData.$fEqExpress_$c==10 @ InflectionData.Specificity $dEq
  = InflectionData.$fEqExpress_$s$c==4
"SPEC $c== @ Topic" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                               InflectionData.Topic)
  InflectionData.$fEqExpress_$c==10 @ InflectionData.Topic $dEq
  = InflectionData.$fEqExpress_$s$c==5
"SPEC $c== @ Transitivity" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                      InflectionData.Transitivity)
  InflectionData.$fEqExpress_$c==10 @ InflectionData.Transitivity
                                    $dEq
  = InflectionData.$fEqExpress_$s$c==12
"SPEC $c== @ Voice" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                               InflectionData.Voice)
  InflectionData.$fEqExpress_$c==10 @ InflectionData.Voice $dEq
  = InflectionData.$fEqExpress_$s$c==10
"SPEC $c== @ Volition" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                  InflectionData.Volition)
  InflectionData.$fEqExpress_$c==10 @ InflectionData.Volition $dEq
  = InflectionData.$fEqExpress_$s$c==13
"SPEC $c== @ [Volition]" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                    [InflectionData.Volition])
  InflectionData.$fEqManifest_$c== @ [InflectionData.Volition] $dEq
  = InflectionData.$fEqManifest_$s$c==16
"SPEC $cshow @ Animacy" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                     InflectionData.Animacy)
  InflectionData.$fShowExpress_$cshow @ InflectionData.Animacy $dShow
  = InflectionData.$fShowExpress_$s$cshow1
"SPEC $cshow @ Aspect" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                    InflectionData.Aspect)
  InflectionData.$fShowExpress_$cshow @ InflectionData.Aspect $dShow
  = InflectionData.$fShowExpress_$s$cshow11
"SPEC $cshow @ Case" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                  InflectionData.Case)
  InflectionData.$fShowExpress_$cshow @ InflectionData.Case $dShow
  = InflectionData.$fShowExpress_$s$cshow2
"SPEC $cshow @ Definiteness" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                          InflectionData.Definiteness)
  InflectionData.$fShowExpress_$cshow @ InflectionData.Definiteness
                                      $dShow
  = InflectionData.$fShowExpress_$s$cshow4
"SPEC $cshow @ Evidentiality" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                           InflectionData.Evidentiality)
  InflectionData.$fShowExpress_$cshow @ InflectionData.Evidentiality
                                      $dShow
  = InflectionData.$fShowExpress_$s$cshow14
"SPEC $cshow @ Gender" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                    InflectionData.Gender)
  InflectionData.$fShowExpress_$cshow @ InflectionData.Gender $dShow
  = InflectionData.$fShowExpress_$s$cshow
"SPEC $cshow @ Honorific" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                       InflectionData.Honorific)
  InflectionData.$fShowExpress_$cshow @ InflectionData.Honorific
                                      $dShow
  = InflectionData.$fShowExpress_$s$cshow8
"SPEC $cshow @ Mood" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                  InflectionData.Mood)
  InflectionData.$fShowExpress_$cshow @ InflectionData.Mood $dShow
  = InflectionData.$fShowExpress_$s$cshow12
"SPEC $cshow @ Number" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                    InflectionData.Number)
  InflectionData.$fShowExpress_$cshow @ InflectionData.Number $dShow
  = InflectionData.$fShowExpress_$s$cshow3
"SPEC $cshow @ Person" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                    InflectionData.Person)
  InflectionData.$fShowExpress_$cshow @ InflectionData.Person $dShow
  = InflectionData.$fShowExpress_$s$cshow7
"SPEC $cshow @ Polarity" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                      InflectionData.Polarity)
  InflectionData.$fShowExpress_$cshow @ InflectionData.Polarity
                                      $dShow
  = InflectionData.$fShowExpress_$s$cshow9
"SPEC $cshow @ Specificity" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                         InflectionData.Specificity)
  InflectionData.$fShowExpress_$cshow @ InflectionData.Specificity
                                      $dShow
  = InflectionData.$fShowExpress_$s$cshow5
"SPEC $cshow @ Tense" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                   InflectionData.Tense)
  InflectionData.$fShowExpress_$cshow @ InflectionData.Tense $dShow
  = InflectionData.$fShowExpress_$s$cshow10
"SPEC $cshow @ Topic" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                   InflectionData.Topic)
  InflectionData.$fShowExpress_$cshow @ InflectionData.Topic $dShow
  = InflectionData.$fShowExpress_$s$cshow6
"SPEC $cshow @ Transitivity" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                          InflectionData.Transitivity)
  InflectionData.$fShowExpress_$cshow @ InflectionData.Transitivity
                                      $dShow
  = InflectionData.$fShowExpress_$s$cshow15
"SPEC $cshow @ Voice" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                   InflectionData.Voice)
  InflectionData.$fShowExpress_$cshow @ InflectionData.Voice $dShow
  = InflectionData.$fShowExpress_$s$cshow13
"SPEC $cshow @ Volition" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                      InflectionData.Volition)
  InflectionData.$fShowExpress_$cshow @ InflectionData.Volition
                                      $dShow
  = InflectionData.$fShowExpress_$s$cshow16
"SPEC $cshowList @ Animacy" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                         InflectionData.Animacy)
  InflectionData.$fShowExpress_$cshowList @ InflectionData.Animacy
                                          $dShow
  = InflectionData.$fShowExpress_$s$cshowList1
"SPEC $cshowList @ Aspect" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                        InflectionData.Aspect)
  InflectionData.$fShowExpress_$cshowList @ InflectionData.Aspect
                                          $dShow
  = InflectionData.$fShowExpress_$s$cshowList11
"SPEC $cshowList @ Case" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                      InflectionData.Case)
  InflectionData.$fShowExpress_$cshowList @ InflectionData.Case
                                          $dShow
  = InflectionData.$fShowExpress_$s$cshowList2
"SPEC $cshowList @ Definiteness" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                              InflectionData.Definiteness)
  InflectionData.$fShowExpress_$cshowList @ InflectionData.Definiteness
                                          $dShow
  = InflectionData.$fShowExpress_$s$cshowList4
"SPEC $cshowList @ Evidentiality" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                               InflectionData.Evidentiality)
  InflectionData.$fShowExpress_$cshowList @ InflectionData.Evidentiality
                                          $dShow
  = InflectionData.$fShowExpress_$s$cshowList14
"SPEC $cshowList @ Gender" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                        InflectionData.Gender)
  InflectionData.$fShowExpress_$cshowList @ InflectionData.Gender
                                          $dShow
  = InflectionData.$fShowExpress_$s$cshowList
"SPEC $cshowList @ Honorific" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                           InflectionData.Honorific)
  InflectionData.$fShowExpress_$cshowList @ InflectionData.Honorific
                                          $dShow
  = InflectionData.$fShowExpress_$s$cshowList8
"SPEC $cshowList @ Mood" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                      InflectionData.Mood)
  InflectionData.$fShowExpress_$cshowList @ InflectionData.Mood
                                          $dShow
  = InflectionData.$fShowExpress_$s$cshowList12
"SPEC $cshowList @ Number" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                        InflectionData.Number)
  InflectionData.$fShowExpress_$cshowList @ InflectionData.Number
                                          $dShow
  = InflectionData.$fShowExpress_$s$cshowList3
"SPEC $cshowList @ Person" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                        InflectionData.Person)
  InflectionData.$fShowExpress_$cshowList @ InflectionData.Person
                                          $dShow
  = InflectionData.$fShowExpress_$s$cshowList7
"SPEC $cshowList @ Polarity" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                          InflectionData.Polarity)
  InflectionData.$fShowExpress_$cshowList @ InflectionData.Polarity
                                          $dShow
  = InflectionData.$fShowExpress_$s$cshowList9
"SPEC $cshowList @ Specificity" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                             InflectionData.Specificity)
  InflectionData.$fShowExpress_$cshowList @ InflectionData.Specificity
                                          $dShow
  = InflectionData.$fShowExpress_$s$cshowList5
"SPEC $cshowList @ Tense" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                       InflectionData.Tense)
  InflectionData.$fShowExpress_$cshowList @ InflectionData.Tense
                                          $dShow
  = InflectionData.$fShowExpress_$s$cshowList10
"SPEC $cshowList @ Topic" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                       InflectionData.Topic)
  InflectionData.$fShowExpress_$cshowList @ InflectionData.Topic
                                          $dShow
  = InflectionData.$fShowExpress_$s$cshowList6
"SPEC $cshowList @ Transitivity" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                              InflectionData.Transitivity)
  InflectionData.$fShowExpress_$cshowList @ InflectionData.Transitivity
                                          $dShow
  = InflectionData.$fShowExpress_$s$cshowList15
"SPEC $cshowList @ Voice" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                       InflectionData.Voice)
  InflectionData.$fShowExpress_$cshowList @ InflectionData.Voice
                                          $dShow
  = InflectionData.$fShowExpress_$s$cshowList13
"SPEC $cshowList @ Volition" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                          InflectionData.Volition)
  InflectionData.$fShowExpress_$cshowList @ InflectionData.Volition
                                          $dShow
  = InflectionData.$fShowExpress_$s$cshowList16
"SPEC $cshowsPrec @ Animacy" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                          InflectionData.Animacy)
  InflectionData.$fShowExpress_$cshowsPrec @ InflectionData.Animacy
                                           $dShow
  = InflectionData.$fShowExpress_$s$cshowsPrec1
"SPEC $cshowsPrec @ Aspect" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                         InflectionData.Aspect)
  InflectionData.$fShowExpress_$cshowsPrec @ InflectionData.Aspect
                                           $dShow
  = InflectionData.$fShowExpress_$s$cshowsPrec11
"SPEC $cshowsPrec @ Case" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                       InflectionData.Case)
  InflectionData.$fShowExpress_$cshowsPrec @ InflectionData.Case
                                           $dShow
  = InflectionData.$fShowExpress_$s$cshowsPrec2
"SPEC $cshowsPrec @ Definiteness" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                               InflectionData.Definiteness)
  InflectionData.$fShowExpress_$cshowsPrec @ InflectionData.Definiteness
                                           $dShow
  = InflectionData.$fShowExpress_$s$cshowsPrec4
"SPEC $cshowsPrec @ Evidentiality" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                InflectionData.Evidentiality)
  InflectionData.$fShowExpress_$cshowsPrec @ InflectionData.Evidentiality
                                           $dShow
  = InflectionData.$fShowExpress_$s$cshowsPrec14
"SPEC $cshowsPrec @ Gender" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                         InflectionData.Gender)
  InflectionData.$fShowExpress_$cshowsPrec @ InflectionData.Gender
                                           $dShow
  = InflectionData.$fShowExpress_$s$cshowsPrec
"SPEC $cshowsPrec @ Honorific" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                            InflectionData.Honorific)
  InflectionData.$fShowExpress_$cshowsPrec @ InflectionData.Honorific
                                           $dShow
  = InflectionData.$fShowExpress_$s$cshowsPrec8
"SPEC $cshowsPrec @ Mood" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                       InflectionData.Mood)
  InflectionData.$fShowExpress_$cshowsPrec @ InflectionData.Mood
                                           $dShow
  = InflectionData.$fShowExpress_$s$cshowsPrec12
"SPEC $cshowsPrec @ Number" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                         InflectionData.Number)
  InflectionData.$fShowExpress_$cshowsPrec @ InflectionData.Number
                                           $dShow
  = InflectionData.$fShowExpress_$s$cshowsPrec3
"SPEC $cshowsPrec @ Person" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                         InflectionData.Person)
  InflectionData.$fShowExpress_$cshowsPrec @ InflectionData.Person
                                           $dShow
  = InflectionData.$fShowExpress_$s$cshowsPrec7
"SPEC $cshowsPrec @ Polarity" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                           InflectionData.Polarity)
  InflectionData.$fShowExpress_$cshowsPrec @ InflectionData.Polarity
                                           $dShow
  = InflectionData.$fShowExpress_$s$cshowsPrec9
"SPEC $cshowsPrec @ Specificity" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                              InflectionData.Specificity)
  InflectionData.$fShowExpress_$cshowsPrec @ InflectionData.Specificity
                                           $dShow
  = InflectionData.$fShowExpress_$s$cshowsPrec5
"SPEC $cshowsPrec @ Tense" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                        InflectionData.Tense)
  InflectionData.$fShowExpress_$cshowsPrec @ InflectionData.Tense
                                           $dShow
  = InflectionData.$fShowExpress_$s$cshowsPrec10
"SPEC $cshowsPrec @ Topic" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                        InflectionData.Topic)
  InflectionData.$fShowExpress_$cshowsPrec @ InflectionData.Topic
                                           $dShow
  = InflectionData.$fShowExpress_$s$cshowsPrec6
"SPEC $cshowsPrec @ Transitivity" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                               InflectionData.Transitivity)
  InflectionData.$fShowExpress_$cshowsPrec @ InflectionData.Transitivity
                                           $dShow
  = InflectionData.$fShowExpress_$s$cshowsPrec15
"SPEC $cshowsPrec @ Voice" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                        InflectionData.Voice)
  InflectionData.$fShowExpress_$cshowsPrec @ InflectionData.Voice
                                           $dShow
  = InflectionData.$fShowExpress_$s$cshowsPrec13
"SPEC $cshowsPrec @ Volition" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                           InflectionData.Volition)
  InflectionData.$fShowExpress_$cshowsPrec @ InflectionData.Volition
                                           $dShow
  = InflectionData.$fShowExpress_$s$cshowsPrec16
"SPEC $cshowsPrec @ [Animacy]" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                            [InflectionData.Animacy])
  InflectionData.$fShowManifest_$cshowsPrec @ [InflectionData.Animacy]
                                            $dShow
  = InflectionData.$fShowManifest_$s$cshowsPrec1
"SPEC $cshowsPrec @ [Aspect]" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                           [InflectionData.Aspect])
  InflectionData.$fShowManifest_$cshowsPrec @ [InflectionData.Aspect]
                                            $dShow
  = InflectionData.$fShowManifest_$s$cshowsPrec11
"SPEC $cshowsPrec @ [Case]" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                         [InflectionData.Case])
  InflectionData.$fShowManifest_$cshowsPrec @ [InflectionData.Case]
                                            $dShow
  = InflectionData.$fShowManifest_$s$cshowsPrec2
"SPEC $cshowsPrec @ [Definiteness]" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                 [InflectionData.Definiteness])
  InflectionData.$fShowManifest_$cshowsPrec @ [InflectionData.Definiteness]
                                            $dShow
  = InflectionData.$fShowManifest_$s$cshowsPrec4
"SPEC $cshowsPrec @ [Evidentiality]" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                  [InflectionData.Evidentiality])
  InflectionData.$fShowManifest_$cshowsPrec @ [InflectionData.Evidentiality]
                                            $dShow
  = InflectionData.$fShowManifest_$s$cshowsPrec14
"SPEC $cshowsPrec @ [Gender]" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                           [InflectionData.Gender])
  InflectionData.$fShowManifest_$cshowsPrec @ [InflectionData.Gender]
                                            $dShow
  = InflectionData.$fShowManifest_$s$cshowsPrec
"SPEC $cshowsPrec @ [Honorific]" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                              [InflectionData.Honorific])
  InflectionData.$fShowManifest_$cshowsPrec @ [InflectionData.Honorific]
                                            $dShow
  = InflectionData.$fShowManifest_$s$cshowsPrec8
"SPEC $cshowsPrec @ [Mood]" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                         [InflectionData.Mood])
  InflectionData.$fShowManifest_$cshowsPrec @ [InflectionData.Mood]
                                            $dShow
  = InflectionData.$fShowManifest_$s$cshowsPrec12
"SPEC $cshowsPrec @ [Number]" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                           [InflectionData.Number])
  InflectionData.$fShowManifest_$cshowsPrec @ [InflectionData.Number]
                                            $dShow
  = InflectionData.$fShowManifest_$s$cshowsPrec3
"SPEC $cshowsPrec @ [Person]" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                           [InflectionData.Person])
  InflectionData.$fShowManifest_$cshowsPrec @ [InflectionData.Person]
                                            $dShow
  = InflectionData.$fShowManifest_$s$cshowsPrec7
"SPEC $cshowsPrec @ [Polarity]" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                             [InflectionData.Polarity])
  InflectionData.$fShowManifest_$cshowsPrec @ [InflectionData.Polarity]
                                            $dShow
  = InflectionData.$fShowManifest_$s$cshowsPrec9
"SPEC $cshowsPrec @ [Specificity]" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                [InflectionData.Specificity])
  InflectionData.$fShowManifest_$cshowsPrec @ [InflectionData.Specificity]
                                            $dShow
  = InflectionData.$fShowManifest_$s$cshowsPrec5
"SPEC $cshowsPrec @ [Tense]" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                          [InflectionData.Tense])
  InflectionData.$fShowManifest_$cshowsPrec @ [InflectionData.Tense]
                                            $dShow
  = InflectionData.$fShowManifest_$s$cshowsPrec10
"SPEC $cshowsPrec @ [Topic]" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                          [InflectionData.Topic])
  InflectionData.$fShowManifest_$cshowsPrec @ [InflectionData.Topic]
                                            $dShow
  = InflectionData.$fShowManifest_$s$cshowsPrec6
"SPEC $cshowsPrec @ [Transitivity]" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                 [InflectionData.Transitivity])
  InflectionData.$fShowManifest_$cshowsPrec @ [InflectionData.Transitivity]
                                            $dShow
  = InflectionData.$fShowManifest_$s$cshowsPrec15
"SPEC $cshowsPrec @ [Voice]" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                          [InflectionData.Voice])
  InflectionData.$fShowManifest_$cshowsPrec @ [InflectionData.Voice]
                                            $dShow
  = InflectionData.$fShowManifest_$s$cshowsPrec13
"SPEC $cshowsPrec @ [Volition]" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                             [InflectionData.Volition])
  InflectionData.$fShowManifest_$cshowsPrec @ [InflectionData.Volition]
                                            $dShow
  = InflectionData.$fShowManifest_$s$cshowsPrec16
"SPEC $fEqExpress @ Animacy" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                        InflectionData.Animacy)
  InflectionData.$fEqExpress @ InflectionData.Animacy $dEq
  = InflectionData.$fEqExpress_$s$fEqExpress1
"SPEC $fEqExpress @ Aspect" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                       InflectionData.Aspect)
  InflectionData.$fEqExpress @ InflectionData.Aspect $dEq
  = InflectionData.$fEqExpress_$s$fEqExpress9
"SPEC $fEqExpress @ Definiteness" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                             InflectionData.Definiteness)
  InflectionData.$fEqExpress @ InflectionData.Definiteness $dEq
  = InflectionData.$fEqExpress_$s$fEqExpress3
"SPEC $fEqExpress @ Evidentiality" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                              InflectionData.Evidentiality)
  InflectionData.$fEqExpress @ InflectionData.Evidentiality $dEq
  = InflectionData.$fEqExpress_$s$fEqExpress11
"SPEC $fEqExpress @ Gender" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                       InflectionData.Gender)
  InflectionData.$fEqExpress @ InflectionData.Gender $dEq
  = InflectionData.$fEqExpress_$s$fEqExpress
"SPEC $fEqExpress @ Honorific" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                          InflectionData.Honorific)
  InflectionData.$fEqExpress @ InflectionData.Honorific $dEq
  = InflectionData.$fEqExpress_$s$fEqExpress7
"SPEC $fEqExpress @ Number" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                       InflectionData.Number)
  InflectionData.$fEqExpress @ InflectionData.Number $dEq
  = InflectionData.$fEqExpress_$s$fEqExpress2
"SPEC $fEqExpress @ Person" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                       InflectionData.Person)
  InflectionData.$fEqExpress @ InflectionData.Person $dEq
  = InflectionData.$fEqExpress_$s$fEqExpress6
"SPEC $fEqExpress @ Polarity" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                         InflectionData.Polarity)
  InflectionData.$fEqExpress @ InflectionData.Polarity $dEq
  = InflectionData.$fEqExpress_$s$fEqExpress8
"SPEC $fEqExpress @ Specificity" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                            InflectionData.Specificity)
  InflectionData.$fEqExpress @ InflectionData.Specificity $dEq
  = InflectionData.$fEqExpress_$s$fEqExpress4
"SPEC $fEqExpress @ Topic" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                      InflectionData.Topic)
  InflectionData.$fEqExpress @ InflectionData.Topic $dEq
  = InflectionData.$fEqExpress_$s$fEqExpress5
"SPEC $fEqExpress @ Transitivity" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                             InflectionData.Transitivity)
  InflectionData.$fEqExpress @ InflectionData.Transitivity $dEq
  = InflectionData.$fEqExpress_$s$fEqExpress12
"SPEC $fEqExpress @ Voice" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                      InflectionData.Voice)
  InflectionData.$fEqExpress @ InflectionData.Voice $dEq
  = InflectionData.$fEqExpress_$s$fEqExpress10
"SPEC $fEqExpress @ Volition" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                         InflectionData.Volition)
  InflectionData.$fEqExpress @ InflectionData.Volition $dEq
  = InflectionData.$fEqExpress_$s$fEqExpress13
"SPEC $fShowExpress @ Animacy" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                            InflectionData.Animacy)
  InflectionData.$fShowExpress @ InflectionData.Animacy $dShow
  = InflectionData.$fShowExpress_$s$fShowExpress1
"SPEC $fShowExpress @ Aspect" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                           InflectionData.Aspect)
  InflectionData.$fShowExpress @ InflectionData.Aspect $dShow
  = InflectionData.$fShowExpress_$s$fShowExpress11
"SPEC $fShowExpress @ Case" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                         InflectionData.Case)
  InflectionData.$fShowExpress @ InflectionData.Case $dShow
  = InflectionData.$fShowExpress_$s$fShowExpress2
"SPEC $fShowExpress @ Definiteness" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                 InflectionData.Definiteness)
  InflectionData.$fShowExpress @ InflectionData.Definiteness $dShow
  = InflectionData.$fShowExpress_$s$fShowExpress4
"SPEC $fShowExpress @ Evidentiality" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                  InflectionData.Evidentiality)
  InflectionData.$fShowExpress @ InflectionData.Evidentiality $dShow
  = InflectionData.$fShowExpress_$s$fShowExpress14
"SPEC $fShowExpress @ Gender" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                           InflectionData.Gender)
  InflectionData.$fShowExpress @ InflectionData.Gender $dShow
  = InflectionData.$fShowExpress_$s$fShowExpress
"SPEC $fShowExpress @ Honorific" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                              InflectionData.Honorific)
  InflectionData.$fShowExpress @ InflectionData.Honorific $dShow
  = InflectionData.$fShowExpress_$s$fShowExpress8
"SPEC $fShowExpress @ Mood" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                         InflectionData.Mood)
  InflectionData.$fShowExpress @ InflectionData.Mood $dShow
  = InflectionData.$fShowExpress_$s$fShowExpress12
"SPEC $fShowExpress @ Number" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                           InflectionData.Number)
  InflectionData.$fShowExpress @ InflectionData.Number $dShow
  = InflectionData.$fShowExpress_$s$fShowExpress3
"SPEC $fShowExpress @ Person" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                           InflectionData.Person)
  InflectionData.$fShowExpress @ InflectionData.Person $dShow
  = InflectionData.$fShowExpress_$s$fShowExpress7
"SPEC $fShowExpress @ Polarity" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                             InflectionData.Polarity)
  InflectionData.$fShowExpress @ InflectionData.Polarity $dShow
  = InflectionData.$fShowExpress_$s$fShowExpress9
"SPEC $fShowExpress @ Specificity" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                InflectionData.Specificity)
  InflectionData.$fShowExpress @ InflectionData.Specificity $dShow
  = InflectionData.$fShowExpress_$s$fShowExpress5
"SPEC $fShowExpress @ Tense" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                          InflectionData.Tense)
  InflectionData.$fShowExpress @ InflectionData.Tense $dShow
  = InflectionData.$fShowExpress_$s$fShowExpress10
"SPEC $fShowExpress @ Topic" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                          InflectionData.Topic)
  InflectionData.$fShowExpress @ InflectionData.Topic $dShow
  = InflectionData.$fShowExpress_$s$fShowExpress6
"SPEC $fShowExpress @ Transitivity" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                 InflectionData.Transitivity)
  InflectionData.$fShowExpress @ InflectionData.Transitivity $dShow
  = InflectionData.$fShowExpress_$s$fShowExpress15
"SPEC $fShowExpress @ Voice" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                          InflectionData.Voice)
  InflectionData.$fShowExpress @ InflectionData.Voice $dShow
  = InflectionData.$fShowExpress_$s$fShowExpress13
"SPEC $fShowExpress @ Volition" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                             InflectionData.Volition)
  InflectionData.$fShowExpress @ InflectionData.Volition $dShow
  = InflectionData.$fShowExpress_$s$fShowExpress16
"SPEC/InflectionData $fEq(,) @ Morpheme @ (Express Gender,
                                          Express Animacy, Express Case, Express Number,
                                          Express Definiteness, Express Specificity, Express Topic,
                                          Express Person, Express Honorific, Express Polarity,
                                          Express Tense, Express Aspect, Express Mood,
                                          Express Voice, Express Evidentiality,
                                          Express Transitivity, Express Volition)" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
honemeData.Morpheme)
dEq1 :: GHC.Classes.Eq
nflectionData.Express
nflectionData.Gender,
nflectionData.Express
nflectionData.Animacy,
nflectionData.Express
nflectionData.Case,
nflectionData.Express
nflectionData.Number,
nflectionData.Express
nflectionData.Definiteness,
nflectionData.Express
nflectionData.Specificity,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              InflectionData.Express
nflectionData.Topic,
nflectionData.Express
nflectionData.Person,
nflectionData.Express
nflectionData.Honorific,
nflectionData.Express
nflectionData.Polarity,
nflectionData.Express
nflectionData.Tense,
nflectionData.Express
nflectionData.Aspect,
nflectionData.Express
nflectionData.Mood,
nflectionData.Express
nflectionData.Voice,
nflectionData.Express
nflectionData.Evidentiality,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              InflectionData.Express
nflectionData.Transitivity,
nflectionData.Express
nflectionData.Volition))
  GHC.Classes.$fEq(,) @ PhonemeData.Morpheme
                      @ (InflectionData.Express InflectionData.Gender,
                         InflectionData.Express InflectionData.Animacy,
                         InflectionData.Express InflectionData.Case,
                         InflectionData.Express InflectionData.Number,
                         InflectionData.Express InflectionData.Definiteness,
                         InflectionData.Express InflectionData.Specificity,
                         InflectionData.Express InflectionData.Topic,
                         InflectionData.Express InflectionData.Person,
                         InflectionData.Express InflectionData.Honorific,
                         InflectionData.Express InflectionData.Polarity,
                         InflectionData.Express InflectionData.Tense,
                         InflectionData.Express InflectionData.Aspect,
                         InflectionData.Express InflectionData.Mood,
                         InflectionData.Express InflectionData.Voice,
                         InflectionData.Express InflectionData.Evidentiality,
                         InflectionData.Express InflectionData.Transitivity,
                         InflectionData.Express InflectionData.Volition)
                      $dEq
                      $dEq1
  = InflectionData.$fEqManifestSystem_$s$fEq(,)
"SPEC/InflectionData $fEq(,,) @ LexCat @ ManifestType @ Int" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                                                        InflectionData.LexCat)
                                                                             ($dEq1 :: GHC.Classes.Eq
                                                                                         InflectionData.ManifestType)
                                                                             ($dEq2 :: GHC.Classes.Eq
                                                                                         GHC.Types.Int)
  GHC.Classes.$fEq(,,) @ InflectionData.LexCat
                       @ InflectionData.ManifestType
                       @ GHC.Types.Int
                       $dEq
                       $dEq1
                       $dEq2
  = InflectionData.$fEqManifest_$s$fEq(,,)
"SPEC/InflectionData $fEq(,,)_$c/= @ LexCat @ ManifestType @ Int" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                                                             InflectionData.LexCat)
                                                                                  ($dEq1 :: GHC.Classes.Eq
                                                                                              InflectionData.ManifestType)
                                                                                  ($dEq2 :: GHC.Classes.Eq
                                                                                              GHC.Types.Int)
  GHC.Classes.$fEq(,,)_$c/= @ InflectionData.LexCat
                            @ InflectionData.ManifestType
                            @ GHC.Types.Int
                            $dEq
                            $dEq1
                            $dEq2
  = InflectionData.$fEqManifest_$s$fEq(,,)_$c/=
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

