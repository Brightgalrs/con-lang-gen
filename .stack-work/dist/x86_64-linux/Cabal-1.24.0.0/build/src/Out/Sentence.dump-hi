
==================== FINAL INTERFACE ====================
2016-12-21 17:41:39.269669 UTC

interface con-lang-gen-0.0.0.1-JpecSLrjfNmG1CUMEdSr39:Out.Sentence 8001
  interface hash: b207d7f7cb4155992bdacbf3c3eccb27
  ABI hash: 536be950a0d5ad5f8135468b5e102763
  export-list hash: 0dfc10fbe11b91f89425902d71b7ab0c
  orphan hash: 4f3328d63f60dcb420e0c6675dcc1062
  flag hash: 84bff927ae7f9c3d6810535365a34fe4
  sig of: Nothing
  used TH splices: False
  where
exports:
  Out.Sentence.parseParseTree
  Out.Sentence.parsePhrase
module dependencies: Data.Grammar Data.Inflection Data.Other
                     Data.Phoneme EnglishStuff Gen.Phonotactics Out.Lexicon Out.Roman
                     Out.Syllable
package dependencies: MonadPrompt-1.0.0.5@MonadPrompt-1.0.0.5-DSJ4febv4ITH7w1gOjdDZE
                      MonadRandom-0.4.2.3@MonadRandom-0.4.2.3-8TfCm6PGvGYB7omozORhov
                      array-0.5.1.1@array-0.5.1.1 base-4.9.0.0
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      erf-2.0.0.0@erf-2.0.0.0-9HTdBV7htNjASgIJAT55AC
                      flexible-defaults-0.0.1.2@flexible-defaults-0.0.1.2-1H2pkAjuTF1KghZBVsL2zl
                      ghc-boot-th-8.0.1@ghc-boot-th-8.0.1 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
                      math-functions-0.2.1.0@math-functions-0.2.1.0-JE0wcV77zWeIiF13ulGtAh
                      mersenne-random-pure64-0.2.0.5@mersenne-random-pure64-0.2.0.5-F5a2mcFFCTQJXAM4TYDSBs
                      monad-loops-0.4.3@monad-loops-0.4.3-1xZFtRVMQPC4X8bjTBWqNi
                      mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM
                      mwc-random-0.13.5.0@mwc-random-0.13.5.0-LMmPnBqFcyXKNTZwO31mEb
                      old-locale-1.0.0.7@old-locale-1.0.0.7-6glXNhHF891B41ZfuI8hU8
                      old-time-1.1.0.3@old-time-1.1.0.3-IcvdkJUsE9M8t3io8peAEp
                      pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa
                      random-1.1@random-1.1-54KmMHXjttlERYcr1mvsAe
                      random-extras-0.19@random-extras-0.19-CVrKkFX7Wr28Gjqnh35lrd
                      random-fu-0.2.7.0@random-fu-0.2.7.0-CQ0Lr6a3wRjKfR0NneZKnx
                      random-shuffle-0.0.4@random-shuffle-0.0.4-LfeDYNPfwrQ2o9p6tw2M9l
                      random-source-0.3.0.6@random-source-0.3.0.6-9Kd6KhtNNMs92HTzA5obc8
                      rvar-0.2.0.3@rvar-0.2.0.3-830TjBaI3UX5PWiddvPaWF
                      stateref-0.3@stateref-0.3-3PlselgQchu2fixnOT7uWq
                      stm-2.4.4.1@stm-2.4.4.1-4z2NRWnB0NIIUvSJsHW0kF
                      syb-0.6@syb-0.6-C65vWCsht6A8uLstpQIXyj template-haskell-2.11.0.0
                      th-extras-0.0.0.4@th-extras-0.0.0.4-65k7Dg54W2KxpzDoCAUbA
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
                      vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6
orphans: MonadRandom-0.4.2.3@MonadRandom-0.4.2.3-8TfCm6PGvGYB7omozORhov:Control.Monad.Random
         base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         con-lang-gen-0.0.0.1-JpecSLrjfNmG1CUMEdSr39:Data.Inflection
         mersenne-random-pure64-0.2.0.5@mersenne-random-pure64-0.2.0.5-F5a2mcFFCTQJXAM4TYDSBs:System.Random.Mersenne.Pure64
         random-source-0.3.0.6@random-source-0.3.0.6-9Kd6KhtNNMs92HTzA5obc8:Data.Random.Source
         random-source-0.3.0.6@random-source-0.3.0.6-9Kd6KhtNNMs92HTzA5obc8:Data.Random.Source.IO
         random-source-0.3.0.6@random-source-0.3.0.6-9Kd6KhtNNMs92HTzA5obc8:Data.Random.Source.MWC
         random-source-0.3.0.6@random-source-0.3.0.6-9Kd6KhtNNMs92HTzA5obc8:Data.Random.Source.PureMT
         random-source-0.3.0.6@random-source-0.3.0.6-9Kd6KhtNNMs92HTzA5obc8:Data.Random.Source.StdGen
         stateref-0.3@stateref-0.3-3PlselgQchu2fixnOT7uWq:Data.StateRef.Instances
         stateref-0.3@stateref-0.3-3PlselgQchu2fixnOT7uWq:Data.StateRef.Instances.STM
         stm-2.4.4.1@stm-2.4.4.1-4z2NRWnB0NIIUvSJsHW0kF:Control.Monad.STM
         syb-0.6@syb-0.6-C65vWCsht6A8uLstpQIXyj:Data.Generics.Instances
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Fusion.Bundle
         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Unboxed
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.1@ghc-boot-th-8.0.1:GHC.LanguageExtensions.Type
                         math-functions-0.2.1.0@math-functions-0.2.1.0-JE0wcV77zWeIiF13ulGtAh:Numeric.RootFinding
                         mwc-random-0.13.5.0@mwc-random-0.13.5.0-LMmPnBqFcyXKNTZwO31mEb:System.Random.MWC
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa:Control.Monad.Primitive
                         template-haskell-2.11.0.0:Language.Haskell.TH.Syntax
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Primitive
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Unboxed
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Unboxed.Base
import  -/  base-4.9.0.0:Data.Foldable 8aeb682f6c74f97fcf0ace0d608a43ea
import  -/  base-4.9.0.0:Data.Functor 6fc476505db88d678632a4a838125f13
import  -/  base-4.9.0.0:Data.List 49b86831b79b49ce5d4d9416ecba61df
import  -/  base-4.9.0.0:Data.Maybe 5f2ba364cbe65c060bc5436bc0b9d049
import  -/  base-4.9.0.0:Data.OldList 0058409f994fb13ae0616e3f1e5b4dae
import  -/  base-4.9.0.0:Data.Tuple acb0ed10307ed88df6c81b8589f4de16
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  Data.Grammar e3bdf85eebd04aee9ead3a06df4aad28
  exports: 0062e624f7e52b2eec78ca7e68e0f617
  Bar d6598f8664fde92fcfbb5ae52ff0b346
  CompFinal 4cf50c45067614dbe810800371910c54
  CompInitial dbf7eff80c59ffa9d6f8f0ad61fed4b4
  Grammar 68da53a8367c3a884597fdcc112c08c3
  Leaf 90af80bcca5066d836ccd20b1a58d79c
  Leaf 6a5bee7bd58c76567dc95d127514df54
  LeafInfl 06deec79466c0ff02146adbc799f9f85
  LeafNull e3654e40d66c0e11a14453d0175311ad
  NoAffixHop d680fdd3178a55d293a785870d7d9e97
  NoVtoIMove ef956689d9bedff617bedd69e0128778
  Null d627117265e1b02da18b8871504f6a6a
  ObjFinal e8e697626807d5e14b20e9c3d0c8dbe2
  OblAffixHop ce4831a583c5c129ca2d71b63fc0f00e
  OblItoCMove 595bf5ad375055ba6dd13be3f664cbee
  OblVtoIMove ff2c6bb9a8168626da69f63a662ccd9a
  OblWHMove 4fd96600e50bde0d0aa8fd90a9b0f7e0
  Phrase d6598f8664fde92fcfbb5ae52ff0b346
  Ques ff4c1bd9a9a8cb649b689babe531b602
  SubInitial 65abc5a07f19660bb7ac6866c4d77497
  XBarA c7cb615764fb49af653c235477272390
  XBarC 13daed8b816476290a57f69a3d501b9a
  XP 9ebf8c936ad6f5d895a8a1bae884e23b
  XPNull ded09e99c3801a748ba334859ac8592d
  getAH 2d0135b87ac47337b6ed880d3b48fbb6
  getCI 3885c78a3b07666759f3643fcf6d685a
  getItoC fbfbf8898e9a0b005046a981ef32665b
  getOF 3fe3e3cdb1a0b39813789fa5505a82d4
  getSI dc7b4eea0cd953b314198897bcb551cb
  getVtoI 2364008b1f2376105701f22a725e6c68
  getWHM 6b32cb2a663fd02b2295e14eea0808b4
  leafInfl 809cbf26c63c3b98667c5853572791e1
  leafLC b20e0d2110c3fdccd584fd59278b3c03
  phraseIl 56f352acccb9b6d22a88a33021eb05d6
  phraseLC 5f30b9a899c826703669fc9822dd3f24
import  -/  Data.Inflection f266f0dbc95b0bc603741fea34af6d4b
  exports: 3959414e78500c5c160744df7b5d22d7
  Adpo 9829130ab1bec46aff1f967edf49b31f
  Animacy 1f555085a72acd0be7c2a6de830d5d03
  Aspect 73f9fcce4a2a405b233176b51f525cb2
  Case 476440af125c1822cd0b767cc8ac9f95
  Comp 5e1ef90d0994529034c673dbbbbd8bb0
  Definiteness 1de448f2aa68251f2e0f9da9901aa214
  Det e1ad05a43ed400271b476ffb24cf8785
  Evidentiality 18aae8850f4e0825a5c83b6a39cdd02c
  Express 5b9a30e57907153c9d73916e653e1523
  Express 215fe38755b3229d5abb86dd2bfcfba2
  Gender 8099e7e810494d6db288b5ee6338a850
  Honorific fb068a739b47969783c008d0c5ccdfb8
  Infl dcd250bfbf4af02ea13702bdc1fb3ae4
  LexCat ae7b63f8f02a08f901ccdfd454a411ac
  ManifestSystem bbcb171ae6dead0cd5095e2d02b10d22
  Mood 72dcb6eb4442b59226b0ba8f6714f13e
  NoExpress 676d50f85f9d9eb78082cdcfaafad173
  Noun 53147e303af8b8d9270e2843acb727ca
  Number 7465cc747c74e065f91b84b3f135a27f
  Person 45fed2402e7ed2b24c1d66ccdfd878c7
  Polarity 1c2c61816b840e25aed576544ed551f7
  Specificity 160b967a8965f1dbfdfeda3e8d2f734a
  Tense 66acf52fe96ad50a10594fa2d12d699d
  Topic f6776b7675319519d06c9aea2dc03bf9
  Transitivity 7302fbe55b71c04bf146a8a39e883cde
  UANI 2a1d6b3fe23fbfa4332f9111f63f37b5
  UASP f7c34a2559e46398066b9c4e6cb69d53
  UCAS 861674aa99fd4296bda0f2becaec7db6
  UDEF a4cbb6a1ce90d981215aa7119b033443
  UEVI 769271c70354d37d60eb749b02014bbc
  UGEN 2784702236ae9a52db51a2433699a0f0
  UHON a3d7b027ed36eadc575c5eb8fc832d64
  UMOO 28d5ab3b584ea8bfae03b745398c6a23
  UNUM caa5f9bd7bcf515b22d07dc0d4684400
  UPER 3655af026b4c4b817c3f541687765812
  UPOL 2946e710f885e224dc0c8fc27f376961
  USPE c5b5dd1eb3c4f8c6fb786dfc2dc0687a
  UTEN 81486981d3a1607c7e3522089f8d9787
  UTOP b859ba834a167d88626b14c01ba15610
  UTRA ff3ef7833dc85ff4c94c6213e8f12ad8
  UVOI 96bd1a5db5e4a6c82c6a8ce07d33517b
  UVOL a906708de3baafe6407565e363c082cc
  Verb 7c78db69105adfc8ac6e2f45ad086918
  Voice 82e4499831c335865b73c47901c341b5
  Volition 637cf4191464029f30da46ab81b77985
  getExp 5dffaadcaa8e28aa1f1f53f2bc4ab044
  manSysCombos 3ceb0c52394cecda4a3f30b5608284fd
import  -/  Data.Phoneme 8d8abfca47f36976b4a493acc97ddf5b
  exports: cf7e229a8d1eca731bf27cf39a54d5d4
  Phoneme 83c67fc806e8317ebba4d84ed8aa040f
  Word 94b2295a81362cccfd6d7143a2d43ca8
  Word 7b936d811d140964313d74386435dc67
  getMorphemes 51600f61a88293384584c88e1d26f051
import  -/  EnglishStuff 36acc521af320a27f7e2a55056449256
  exports: 27cd14a74678c673d9e1a1772cab66b8
  englishGrammar 6e4f72fb50b27a46048cc5e949cfc47e
  englishManifest 6c590238d5f3bd135e9208e1b276ad74
import  -/  Out.Lexicon 09b5066c222fbebe39f5d44bc6bcb394
  exports: fbca99da44ffb1b9ed5638fc5f8ebf06
  parseWordIPA afb48de498fa54c42bf8a78b72f586cc
import  -/  Out.Roman 5530982b9cccab9a544cb97a7d0f688e
  exports: d95adf043e51cba456fe8aeb7f3f96a4
  romanizeWord da3b71e5cb79611e046a9c6fe7cc0981
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
81f9852544c5f5bad6b5e9d898ee2aae
  $s$fEq(,) ::
    GHC.Classes.Eq ([GHC.Types.Char], Data.Inflection.LexCat)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ ([GHC.Types.Char], Data.Inflection.LexCat)
                  (GHC.Classes.$fEq(,)_$c==
                     @ [GHC.Types.Char]
                     @ Data.Inflection.LexCat
                     GHC.Classes.$fEq[]_$s$fEq[]1
                     Data.Inflection.$fEqLexCat)
                  (GHC.Classes.$fEq(,)_$c/=
                     @ [GHC.Types.Char]
                     @ Data.Inflection.LexCat
                     GHC.Classes.$fEq[]_$s$fEq[]1
                     Data.Inflection.$fEqLexCat) -}
057b68a3bc674837b308736dcc6b1051
  $s$fEqExpress ::
    GHC.Classes.Eq (Data.Inflection.Express Data.Inflection.Mood)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Inflection.Express Data.Inflection.Mood)
                  Out.Sentence.$s$fEqExpress_$s$fEqExpress_$c==10
                  (Data.Inflection.$fEqExpress_$c/=
                     @ Data.Inflection.Mood
                     Data.Inflection.$fEqMood) -}
312840bc6db61c364654a9c0e2dfa3bb
  $s$fEqExpress1 ::
    GHC.Classes.Eq (Data.Inflection.Express Data.Inflection.Tense)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Inflection.Express Data.Inflection.Tense)
                  Out.Sentence.$s$fEqExpress_$s$fEqExpress_$c==1
                  (Data.Inflection.$fEqExpress_$c/=
                     @ Data.Inflection.Tense
                     Data.Inflection.$fEqTense) -}
34e3cbd8129ff73ac9b277be53cc2c57
  $s$fEqExpress2 ::
    GHC.Classes.Eq (Data.Inflection.Express Data.Inflection.Case)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Inflection.Express Data.Inflection.Case)
                  Out.Sentence.$s$fEqExpress_$s$fEqExpress_$c==2
                  (Data.Inflection.$fEqExpress_$c/=
                     @ Data.Inflection.Case
                     Data.Inflection.$fEqCase) -}
deca00ae1ecc495ae4111a0ce6767ad2
  $s$fEqExpress_$s$fEqExpress_$c==1 ::
    Data.Inflection.Express Data.Inflection.Tense
    -> Data.Inflection.Express Data.Inflection.Tense -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Data.Inflection.Express Data.Inflection.Tense)
                   (ds1 :: Data.Inflection.Express Data.Inflection.Tense) ->
                 case ds of wild {
                   Data.Inflection.NoExpress
                   -> case ds1 of wild1 {
                        Data.Inflection.NoExpress -> GHC.Types.True
                        Data.Inflection.Express ipv -> GHC.Types.False }
                   Data.Inflection.Express a1
                   -> case ds1 of wild1 {
                        Data.Inflection.NoExpress -> GHC.Types.False
                        Data.Inflection.Express b1
                        -> Data.Inflection.$fEqTense_$c== a1 b1 } }) -}
15246cf618c34db0c33292daf3289fe0
  $s$fEqExpress_$s$fEqExpress_$c==10 ::
    Data.Inflection.Express Data.Inflection.Mood
    -> Data.Inflection.Express Data.Inflection.Mood -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Data.Inflection.Express Data.Inflection.Mood)
                   (ds1 :: Data.Inflection.Express Data.Inflection.Mood) ->
                 case ds of wild {
                   Data.Inflection.NoExpress
                   -> case ds1 of wild1 {
                        Data.Inflection.NoExpress -> GHC.Types.True
                        Data.Inflection.Express ipv -> GHC.Types.False }
                   Data.Inflection.Express a1
                   -> case ds1 of wild1 {
                        Data.Inflection.NoExpress -> GHC.Types.False
                        Data.Inflection.Express b1
                        -> Data.Inflection.$fEqMood_$c== a1 b1 } }) -}
d4f195015a66ea20bd409e3f0a3cd8aa
  $s$fEqExpress_$s$fEqExpress_$c==2 ::
    Data.Inflection.Express Data.Inflection.Case
    -> Data.Inflection.Express Data.Inflection.Case -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Data.Inflection.Express Data.Inflection.Case)
                   (ds1 :: Data.Inflection.Express Data.Inflection.Case) ->
                 case ds of wild {
                   Data.Inflection.NoExpress
                   -> case ds1 of wild1 {
                        Data.Inflection.NoExpress -> GHC.Types.True
                        Data.Inflection.Express ipv -> GHC.Types.False }
                   Data.Inflection.Express a1
                   -> case ds1 of wild1 {
                        Data.Inflection.NoExpress -> GHC.Types.False
                        Data.Inflection.Express b1
                        -> Data.Inflection.$fEqCase_$c== a1 b1 } }) -}
31296b92a343f2e0655572fb3b8920dd
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Out.Sentence.$trModule2
                   Out.Sentence.$trModule1) -}
f610c9bd474e601f2d6ebe8546138b00
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Out.Sentence"#) -}
306dd3113797a6215b9a4b7fb01fbd49
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "con-lang-gen-0.0.0.1-JpecSLrjfNmG1CUMEdSr39"#) -}
cc14bb69118481e3af48f497fb8a79c7
  parseParseTree ::
    [[Data.Phoneme.Phoneme]]
    -> [((GHC.Base.String, Data.Inflection.LexCat), Data.Phoneme.Word)]
    -> [(Data.Inflection.LexCat, [Data.Inflection.ManifestSystem],
         [Data.Inflection.ManifestSystem],
         [Data.Inflection.ManifestSystem])]
    -> Data.Grammar.Grammar
    -> Data.Grammar.Phrase
    -> GHC.Base.String
  {- Arity: 5,
     Strictness: <L,U><L,U><L,U><L,1*U(U,U,U,U,U,A,A,A,A,U,U,A,A)><L,U> -}
cfe9998ebca865f16057a99a9cd5deca
  parsePhrase ::
    Data.Grammar.Grammar
    -> Data.Grammar.Phrase -> [[Data.Grammar.Leaf]]
  {- Arity: 2,
     Strictness: <L,1*U(U,U,U,U,U,A,A,A,A,U,U,A,A)><S,1*U> -}
"SPEC/Out.Sentence $fEq(,) @ [Char] @ LexCat" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                                         [GHC.Types.Char])
                                                              ($dEq1 :: GHC.Classes.Eq
                                                                          Data.Inflection.LexCat)
  GHC.Classes.$fEq(,) @ [GHC.Types.Char]
                      @ Data.Inflection.LexCat
                      $dEq
                      $dEq1
  = Out.Sentence.$s$fEq(,)
"SPEC/Out.Sentence $fEqExpress @ Case" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                                  Data.Inflection.Case)
  Data.Inflection.$fEqExpress @ Data.Inflection.Case $dEq
  = Out.Sentence.$s$fEqExpress2
"SPEC/Out.Sentence $fEqExpress @ Mood" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                                  Data.Inflection.Mood)
  Data.Inflection.$fEqExpress @ Data.Inflection.Mood $dEq
  = Out.Sentence.$s$fEqExpress
"SPEC/Out.Sentence $fEqExpress @ Tense" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                                   Data.Inflection.Tense)
  Data.Inflection.$fEqExpress @ Data.Inflection.Tense $dEq
  = Out.Sentence.$s$fEqExpress1
"SPEC/Out.Sentence $fEqExpress_$c==10 @ Case" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                                         Data.Inflection.Case)
  Data.Inflection.$fEqExpress_$c==10 @ Data.Inflection.Case $dEq
  = Out.Sentence.$s$fEqExpress_$s$fEqExpress_$c==2
"SPEC/Out.Sentence $fEqExpress_$c==10 @ Mood" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                                         Data.Inflection.Mood)
  Data.Inflection.$fEqExpress_$c==10 @ Data.Inflection.Mood $dEq
  = Out.Sentence.$s$fEqExpress_$s$fEqExpress_$c==10
"SPEC/Out.Sentence $fEqExpress_$c==10 @ Tense" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                                          Data.Inflection.Tense)
  Data.Inflection.$fEqExpress_$c==10 @ Data.Inflection.Tense $dEq
  = Out.Sentence.$s$fEqExpress_$s$fEqExpress_$c==1
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

