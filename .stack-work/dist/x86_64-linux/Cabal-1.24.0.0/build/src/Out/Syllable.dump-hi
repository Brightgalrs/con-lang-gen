
==================== FINAL INTERFACE ====================
2016-12-21 17:41:37.747228 UTC

interface con-lang-gen-0.0.0.1-JpecSLrjfNmG1CUMEdSr39:Out.Syllable 8001
  interface hash: 0e2b77a65dd4ff73aa58b47f96868d51
  ABI hash: 29e0811bc1a0675557f58bc58e61537d
  export-list hash: 2c5c029a33d5567a3da6220bf81f69cb
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: ec5283bfe8e9c622a846a29979b370ac
  sig of: Nothing
  used TH splices: False
  where
exports:
  Out.Syllable.syllabifyMorpheme
  Out.Syllable.syllabifyWord
module dependencies: Data.Other Data.Phoneme Gen.Phonotactics
package dependencies: MonadPrompt-1.0.0.5@MonadPrompt-1.0.0.5-DSJ4febv4ITH7w1gOjdDZE
                      MonadRandom-0.4.2.3@MonadRandom-0.4.2.3-8TfCm6PGvGYB7omozORhov
                      array-0.5.1.1@array-0.5.1.1 base-4.9.0.0
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      erf-2.0.0.0@erf-2.0.0.0-9HTdBV7htNjASgIJAT55AC
                      flexible-defaults-0.0.1.2@flexible-defaults-0.0.1.2-1H2pkAjuTF1KghZBVsL2zl
                      ghc-boot-th-8.0.1@ghc-boot-th-8.0.1 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
                      math-functions-0.2.1.0@math-functions-0.2.1.0-JE0wcV77zWeIiF13ulGtAh
                      mersenne-random-pure64-0.2.0.5@mersenne-random-pure64-0.2.0.5-F5a2mcFFCTQJXAM4TYDSBs
                      monad-loops-0.4.3@monad-loops-0.4.3-1xZFtRVMQPC4X8bjTBWqNi
                      mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM
                      mwc-random-0.13.5.0@mwc-random-0.13.5.0-LMmPnBqFcyXKNTZwO31mEb
                      old-locale-1.0.0.7@old-locale-1.0.0.7-6glXNhHF891B41ZfuI8hU8
                      old-time-1.1.0.3@old-time-1.1.0.3-IcvdkJUsE9M8t3io8peAEp
                      pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa
                      random-1.1@random-1.1-54KmMHXjttlERYcr1mvsAe
                      random-extras-0.19@random-extras-0.19-CVrKkFX7Wr28Gjqnh35lrd
                      random-fu-0.2.7.0@random-fu-0.2.7.0-CQ0Lr6a3wRjKfR0NneZKnx
                      random-shuffle-0.0.4@random-shuffle-0.0.4-LfeDYNPfwrQ2o9p6tw2M9l
                      random-source-0.3.0.6@random-source-0.3.0.6-9Kd6KhtNNMs92HTzA5obc8
                      rvar-0.2.0.3@rvar-0.2.0.3-830TjBaI3UX5PWiddvPaWF
                      stateref-0.3@stateref-0.3-3PlselgQchu2fixnOT7uWq
                      stm-2.4.4.1@stm-2.4.4.1-4z2NRWnB0NIIUvSJsHW0kF
                      syb-0.6@syb-0.6-C65vWCsht6A8uLstpQIXyj template-haskell-2.11.0.0
                      th-extras-0.0.0.4@th-extras-0.0.0.4-65k7Dg54W2KxpzDoCAUbA
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
                      vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6
orphans: MonadRandom-0.4.2.3@MonadRandom-0.4.2.3-8TfCm6PGvGYB7omozORhov:Control.Monad.Random
         base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         mersenne-random-pure64-0.2.0.5@mersenne-random-pure64-0.2.0.5-F5a2mcFFCTQJXAM4TYDSBs:System.Random.Mersenne.Pure64
         random-source-0.3.0.6@random-source-0.3.0.6-9Kd6KhtNNMs92HTzA5obc8:Data.Random.Source
         random-source-0.3.0.6@random-source-0.3.0.6-9Kd6KhtNNMs92HTzA5obc8:Data.Random.Source.IO
         random-source-0.3.0.6@random-source-0.3.0.6-9Kd6KhtNNMs92HTzA5obc8:Data.Random.Source.MWC
         random-source-0.3.0.6@random-source-0.3.0.6-9Kd6KhtNNMs92HTzA5obc8:Data.Random.Source.PureMT
         random-source-0.3.0.6@random-source-0.3.0.6-9Kd6KhtNNMs92HTzA5obc8:Data.Random.Source.StdGen
         stateref-0.3@stateref-0.3-3PlselgQchu2fixnOT7uWq:Data.StateRef.Instances
         stateref-0.3@stateref-0.3-3PlselgQchu2fixnOT7uWq:Data.StateRef.Instances.STM
         stm-2.4.4.1@stm-2.4.4.1-4z2NRWnB0NIIUvSJsHW0kF:Control.Monad.STM
         syb-0.6@syb-0.6-C65vWCsht6A8uLstpQIXyj:Data.Generics.Instances
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Fusion.Bundle
         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Unboxed
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.1@ghc-boot-th-8.0.1:GHC.LanguageExtensions.Type
                         math-functions-0.2.1.0@math-functions-0.2.1.0-JE0wcV77zWeIiF13ulGtAh:Numeric.RootFinding
                         mwc-random-0.13.5.0@mwc-random-0.13.5.0-LMmPnBqFcyXKNTZwO31mEb:System.Random.MWC
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa:Control.Monad.Primitive
                         template-haskell-2.11.0.0:Language.Haskell.TH.Syntax
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Primitive
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Unboxed
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Unboxed.Base
import  -/  base-4.9.0.0:Data.Foldable 8aeb682f6c74f97fcf0ace0d608a43ea
import  -/  base-4.9.0.0:Data.List 49b86831b79b49ce5d4d9416ecba61df
import  -/  base-4.9.0.0:Data.OldList 0058409f994fb13ae0616e3f1e5b4dae
import  -/  base-4.9.0.0:Data.Ord 2c7efd62ddb4235a58939544f667cc29
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:GHC.Num 48f506a8f4ecf06285d0a0706594dcc0
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  Data.Other ca3d75b7f17df1a823d9bed122472296
  exports: a3d527128309076dcf1ad037267b56af
  SyllWord b5c32794646e1fa4f93c723edca4cab2
  SyllWord dde7d8f003864d169d7d8c03a632306b
  Syllable 5754f71ff55b7c8a646254b701bc288c
  Syllable 1040feab8e4745824f62065870bfd393
import  -/  Data.Phoneme 8d8abfca47f36976b4a493acc97ddf5b
  exports: cf7e229a8d1eca731bf27cf39a54d5d4
  Morpheme b30fcf8c1909ae0b282e12f97a52fc6c
  Phoneme 83c67fc806e8317ebba4d84ed8aa040f
  Word 94b2295a81362cccfd6d7143a2d43ca8
  Word 7b936d811d140964313d74386435dc67
  getPhonemes 2b3a49114618fbf0b50dd81fc2203f21
import  -/  Gen.Phonotactics 64947df302293ab7496d6582d0e870f2
  exports: 81285c12768478261952ac9b82364ee9
  retrieveSon 33a9e5a7799e149abaafac2d2d90fde1
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
9d4d3bc4ff610fcce2a2217c89a50ec4
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Out.Syllable.$trModule2
                   Out.Syllable.$trModule1) -}
d7d62042a8fe019804a54db7fe0d2362
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Out.Syllable"#) -}
583dc6b75c9b755d2be6dbc7eddb8ada
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "con-lang-gen-0.0.0.1-JpecSLrjfNmG1CUMEdSr39"#) -}
4c58b4651fadb3e238926bef8b1a98b5
  $wmakeSyllable ::
    [[Data.Phoneme.Phoneme]]
    -> [Data.Phoneme.Phoneme]
    -> (# [Data.Phoneme.Phoneme], Data.Phoneme.Phoneme,
          [Data.Phoneme.Phoneme] #)
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: [[Data.Phoneme.Phoneme]])
                   (w1 :: [Data.Phoneme.Phoneme]) ->
                 let {
                   nucleus :: Data.Phoneme.Phoneme
                   = letrec {
                       go6 :: [Data.Phoneme.Phoneme] -> Data.Phoneme.Phoneme
                         {- Arity: 1, Strictness: <S,1*U> -}
                       = \ (ds :: [Data.Phoneme.Phoneme]) ->
                         case ds of wild {
                           [] -> Out.Syllable.syllabifyMorpheme1
                           : x ds1
                           -> case ds1 of wild1 {
                                [] -> x
                                : ipv ipv1
                                -> case Gen.Phonotactics.retrieveSon
                                          w
                                          x of wild2 { GHC.Types.I# x# ->
                                   let {
                                     y :: Data.Phoneme.Phoneme = go6 wild1
                                   } in
                                   case Gen.Phonotactics.retrieveSon
                                          w
                                          y of wild3 { GHC.Types.I# y# ->
                                   case GHC.Prim.tagToEnum#
                                          @ GHC.Types.Bool
                                          (GHC.Prim.<# x# y#) of wild4 {
                                     GHC.Types.False
                                     -> case GHC.Prim.tagToEnum#
                                               @ GHC.Types.Bool
                                               (GHC.Prim.==# x# y#) of wild5 {
                                          GHC.Types.False -> x GHC.Types.True -> y }
                                     GHC.Types.True -> y } } } } }
                     } in
                     go6 w1
                 } in
                 let {
                   i :: GHC.Types.Int
                   = letrec {
                       go6 :: [Data.Phoneme.Phoneme]
                              -> GHC.Prim.Int# -> GHC.Types.Int -> GHC.Types.Int
                         {- Arity: 3, Strictness: <S,1*U><L,U><L,1*U(U)> -}
                       = \ (ds :: [Data.Phoneme.Phoneme])
                           (eta :: GHC.Prim.Int#)
                           (eta1 :: GHC.Types.Int) ->
                         case ds of wild {
                           [] -> eta1
                           : y ys
                           -> case Data.Phoneme.$fEqPhoneme_$c== nucleus y of wild1 {
                                GHC.Types.False -> go6 ys (GHC.Prim.+# eta 1#) eta1
                                GHC.Types.True
                                -> go6 ys (GHC.Prim.+# eta 1#) (GHC.Types.I# eta) } }
                     } in
                     go6 w1 0# (GHC.List.lastError @ GHC.Types.Int)
                 } in
                 (# case i of wild { GHC.Types.I# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x 0#) of wild1 {
                      GHC.Types.False
                      -> case w1 of wild2 {
                           [] -> GHC.Types.[] @ Data.Phoneme.Phoneme
                           : ipv ipv1
                           -> case x of ds1 {
                                DEFAULT
                                -> GHC.Types.:
                                     @ Data.Phoneme.Phoneme
                                     ipv
                                     (case GHC.List.splitAt_$s$wsplitAt'
                                             @ Data.Phoneme.Phoneme
                                             ipv1
                                             (GHC.Prim.-# ds1 1#) of ww { (#,#) ww1 ww2 ->
                                      ww1 })
                                1#
                                -> GHC.Types.:
                                     @ Data.Phoneme.Phoneme
                                     ipv
                                     (GHC.Types.[] @ Data.Phoneme.Phoneme) } }
                      GHC.Types.True -> GHC.Types.[] @ Data.Phoneme.Phoneme } },
                    nucleus,
                    case i of wild { GHC.Types.I# x ->
                    let {
                      x1 :: GHC.Prim.Int# = GHC.Prim.+# x 1#
                    } in
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x1 0#) of wild1 {
                      GHC.Types.False
                      -> case w1 of wild2 {
                           [] -> GHC.Types.[] @ Data.Phoneme.Phoneme
                           : ipv ipv1
                           -> case x1 of ds1 {
                                DEFAULT
                                -> case GHC.List.splitAt_$s$wsplitAt'
                                          @ Data.Phoneme.Phoneme
                                          ipv1
                                          (GHC.Prim.-# ds1 1#) of ww { (#,#) ww1 ww2 ->
                                   ww2 }
                                1# -> ipv1 } }
                      GHC.Types.True -> w1 } } #)) -}
bbb3ac2ba226f85a85843c4cd0c50b7d
  breakWord ::
    [Data.Phoneme.Phoneme]
    -> [Data.Phoneme.Phoneme]
    -> [[Data.Phoneme.Phoneme]]
    -> [[Data.Phoneme.Phoneme]]
  {- Arity: 3, Strictness: <S,1*U><L,U><L,U> -}
69620aef1cfa8f430a4a3965c40f164b
  makeSyllable ::
    [[Data.Phoneme.Phoneme]]
    -> [Data.Phoneme.Phoneme] -> Data.Other.Syllable
  {- Arity: 2, Strictness: <L,U><L,U>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: [[Data.Phoneme.Phoneme]])
                   (w1 :: [Data.Phoneme.Phoneme]) ->
                 case Out.Syllable.$wmakeSyllable w w1 of ww { (#,,#) ww1 ww2 ww3 ->
                 Data.Other.Syllable ww1 ww2 ww3 }) -}
edd1be0c4c724abcddd13eec1afce1e6
  syllabifyMorpheme ::
    [[Data.Phoneme.Phoneme]]
    -> Data.Phoneme.Morpheme -> Data.Other.SyllWord
  {- Arity: 2, Strictness: <L,U><L,1*U(1*U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: [[Data.Phoneme.Phoneme]]) (w1 :: Data.Phoneme.Morpheme) ->
                 Data.Other.SyllWord
                   (case w1 of wild { Data.Phoneme.Morpheme ds1 ->
                    GHC.Base.map
                      @ [Data.Phoneme.Phoneme]
                      @ Data.Other.Syllable
                      (Out.Syllable.makeSyllable w)
                      (Out.Syllable.breakWord
                         ds1
                         (GHC.Types.[] @ Data.Phoneme.Phoneme)
                         w) })) -}
10c75bf5e4b550b759e233c99296479e
  syllabifyMorpheme1 :: Data.Phoneme.Phoneme
  {- Strictness: x -}
1d758914b21fa813f4576ba144fb20f9
  syllabifyWord ::
    [[Data.Phoneme.Phoneme]]
    -> Data.Phoneme.Word -> Data.Other.SyllWord
  {- Arity: 2, Strictness: <L,U><S,1*U(1*U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: [[Data.Phoneme.Phoneme]]) (w1 :: Data.Phoneme.Word) ->
                 case w1 of ww { Data.Phoneme.Word ww1 ->
                 Data.Other.SyllWord
                   (GHC.Base.map
                      @ [Data.Phoneme.Phoneme]
                      @ Data.Other.Syllable
                      (Out.Syllable.makeSyllable w)
                      (Out.Syllable.breakWord
                         (Out.Syllable.syllabifyWord_go ww1)
                         (GHC.Types.[] @ Data.Phoneme.Phoneme)
                         w)) }) -}
e3fc3bec0ec2c656c8a599b9da3fe527
  syllabifyWord_go ::
    [Data.Phoneme.Morpheme] -> [Data.Phoneme.Phoneme]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

