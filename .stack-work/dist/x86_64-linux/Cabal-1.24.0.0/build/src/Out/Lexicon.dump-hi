
==================== FINAL INTERFACE ====================
2017-01-03 22:54:40.45571 UTC

interface con-lang-gen-0.0.0.1-JpecSLrjfNmG1CUMEdSr39:Out.Lexicon 8001
  interface hash: e649ba44b83117d9c47485189a0b73d9
  ABI hash: 09b5066c222fbebe39f5d44bc6bcb394
  export-list hash: fbca99da44ffb1b9ed5638fc5f8ebf06
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: ec5283bfe8e9c622a846a29979b370ac
  sig of: Nothing
  used TH splices: False
  where
exports:
  Out.Lexicon.parseDictionary
  Out.Lexicon.parseMorphemeIPA
  Out.Lexicon.parsePhonemeIPA
  Out.Lexicon.parseWordIPA
module dependencies: Data.Inflection Data.Other Data.Phoneme
                     Gen.Phonotactics Out.Roman Out.Syllable
package dependencies: MonadPrompt-1.0.0.5@MonadPrompt-1.0.0.5-DSJ4febv4ITH7w1gOjdDZE
                      MonadRandom-0.4.2.3@MonadRandom-0.4.2.3-8TfCm6PGvGYB7omozORhov
                      array-0.5.1.1@array-0.5.1.1 base-4.9.0.0
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      erf-2.0.0.0@erf-2.0.0.0-9HTdBV7htNjASgIJAT55AC
                      flexible-defaults-0.0.1.2@flexible-defaults-0.0.1.2-1H2pkAjuTF1KghZBVsL2zl
                      ghc-boot-th-8.0.1@ghc-boot-th-8.0.1 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
                      math-functions-0.2.1.0@math-functions-0.2.1.0-JE0wcV77zWeIiF13ulGtAh
                      mersenne-random-pure64-0.2.0.5@mersenne-random-pure64-0.2.0.5-F5a2mcFFCTQJXAM4TYDSBs
                      monad-loops-0.4.3@monad-loops-0.4.3-1xZFtRVMQPC4X8bjTBWqNi
                      mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM
                      mwc-random-0.13.5.0@mwc-random-0.13.5.0-LMmPnBqFcyXKNTZwO31mEb
                      old-locale-1.0.0.7@old-locale-1.0.0.7-6glXNhHF891B41ZfuI8hU8
                      old-time-1.1.0.3@old-time-1.1.0.3-IcvdkJUsE9M8t3io8peAEp
                      pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa
                      random-1.1@random-1.1-54KmMHXjttlERYcr1mvsAe
                      random-extras-0.19@random-extras-0.19-CVrKkFX7Wr28Gjqnh35lrd
                      random-fu-0.2.7.0@random-fu-0.2.7.0-CQ0Lr6a3wRjKfR0NneZKnx
                      random-shuffle-0.0.4@random-shuffle-0.0.4-LfeDYNPfwrQ2o9p6tw2M9l
                      random-source-0.3.0.6@random-source-0.3.0.6-9Kd6KhtNNMs92HTzA5obc8
                      rvar-0.2.0.3@rvar-0.2.0.3-830TjBaI3UX5PWiddvPaWF
                      stateref-0.3@stateref-0.3-3PlselgQchu2fixnOT7uWq
                      stm-2.4.4.1@stm-2.4.4.1-4z2NRWnB0NIIUvSJsHW0kF
                      syb-0.6@syb-0.6-C65vWCsht6A8uLstpQIXyj template-haskell-2.11.0.0
                      th-extras-0.0.0.4@th-extras-0.0.0.4-65k7Dg54W2KxpzDoCAUbA
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
                      vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6
orphans: MonadRandom-0.4.2.3@MonadRandom-0.4.2.3-8TfCm6PGvGYB7omozORhov:Control.Monad.Random
         base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         con-lang-gen-0.0.0.1-JpecSLrjfNmG1CUMEdSr39:Data.Inflection
         mersenne-random-pure64-0.2.0.5@mersenne-random-pure64-0.2.0.5-F5a2mcFFCTQJXAM4TYDSBs:System.Random.Mersenne.Pure64
         random-source-0.3.0.6@random-source-0.3.0.6-9Kd6KhtNNMs92HTzA5obc8:Data.Random.Source
         random-source-0.3.0.6@random-source-0.3.0.6-9Kd6KhtNNMs92HTzA5obc8:Data.Random.Source.IO
         random-source-0.3.0.6@random-source-0.3.0.6-9Kd6KhtNNMs92HTzA5obc8:Data.Random.Source.MWC
         random-source-0.3.0.6@random-source-0.3.0.6-9Kd6KhtNNMs92HTzA5obc8:Data.Random.Source.PureMT
         random-source-0.3.0.6@random-source-0.3.0.6-9Kd6KhtNNMs92HTzA5obc8:Data.Random.Source.StdGen
         stateref-0.3@stateref-0.3-3PlselgQchu2fixnOT7uWq:Data.StateRef.Instances
         stateref-0.3@stateref-0.3-3PlselgQchu2fixnOT7uWq:Data.StateRef.Instances.STM
         stm-2.4.4.1@stm-2.4.4.1-4z2NRWnB0NIIUvSJsHW0kF:Control.Monad.STM
         syb-0.6@syb-0.6-C65vWCsht6A8uLstpQIXyj:Data.Generics.Instances
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Fusion.Bundle
         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Unboxed
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.1@ghc-boot-th-8.0.1:GHC.LanguageExtensions.Type
                         math-functions-0.2.1.0@math-functions-0.2.1.0-JE0wcV77zWeIiF13ulGtAh:Numeric.RootFinding
                         mwc-random-0.13.5.0@mwc-random-0.13.5.0-LMmPnBqFcyXKNTZwO31mEb:System.Random.MWC
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa:Control.Monad.Primitive
                         template-haskell-2.11.0.0:Language.Haskell.TH.Syntax
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Primitive
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Unboxed
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Unboxed.Base
import  -/  base-4.9.0.0:Control.Arrow 29ee70aef11b50f3bae1135acf073ed5
import  -/  base-4.9.0.0:Data.Foldable 8aeb682f6c74f97fcf0ace0d608a43ea
import  -/  base-4.9.0.0:Data.List 49b86831b79b49ce5d4d9416ecba61df
import  -/  base-4.9.0.0:Data.OldList 0058409f994fb13ae0616e3f1e5b4dae
import  -/  base-4.9.0.0:Data.Tuple acb0ed10307ed88df6c81b8589f4de16
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.Exts 79bfb724def0ed3fd4411241036c8cc5
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  Data.Inflection f266f0dbc95b0bc603741fea34af6d4b
  exports: 3959414e78500c5c160744df7b5d22d7
  Adj e22b8a29c2b36729bbd8bb65a666313f
  Adpo 9829130ab1bec46aff1f967edf49b31f
  Adv f229caf470e5736a09d9743697103eda
  LexCat ae7b63f8f02a08f901ccdfd454a411ac
  Noun 53147e303af8b8d9270e2843acb727ca
  Verb 7c78db69105adfc8ac6e2f45ad086918
import  -/  Data.Other ca3d75b7f17df1a823d9bed122472296
  exports: a3d527128309076dcf1ad037267b56af
  SyllWord b5c32794646e1fa4f93c723edca4cab2
  Syllable 5754f71ff55b7c8a646254b701bc288c
  Syllable 1040feab8e4745824f62065870bfd393
import  -/  Data.Phoneme 8d8abfca47f36976b4a493acc97ddf5b
  exports: cf7e229a8d1eca731bf27cf39a54d5d4
  Blank 779f84017dd67b97ceeb6c48add99cf8
  Consonant 2025c45471b917c711c4a3ed75432b5d
  Diphthong a422ed032dcd1f6394d211ff53692455
  Morpheme b30fcf8c1909ae0b282e12f97a52fc6c
  Phoneme 83c67fc806e8317ebba4d84ed8aa040f
  Vowel 5359c3eb0ea01a91f571480b7c844ae3
  Word 7b936d811d140964313d74386435dc67
import  -/  Out.Roman 5530982b9cccab9a544cb97a7d0f688e
  exports: d95adf043e51cba456fe8aeb7f3f96a4
  romanizeWord da3b71e5cb79611e046a9c6fe7cc0981
import  -/  Out.Syllable 29e0811bc1a0675557f58bc58e61537d
  exports: 2c5c029a33d5567a3da6220bf81f69cb
  syllabifyMorpheme edd1be0c4c724abcddd13eec1afce1e6
  syllabifyWord 1d758914b21fa813f4576ba144fb20f9
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
fb3806d614384f6fd742511aa70475b5
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Out.Lexicon.$trModule2
                   Out.Lexicon.$trModule1) -}
ceed1f8cd3e20bab252a952aa9dc9da6
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Out.Lexicon"#) -}
f9b60f9d76ad0b8e87a12037d8f33e6a
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "con-lang-gen-0.0.0.1-JpecSLrjfNmG1CUMEdSr39"#) -}
c1a06ddf7c879fbc02d52a71d695f9a8
  $wgo ::
    [((GHC.Base.String, Data.Inflection.LexCat), Data.Phoneme.Word)]
    -> (# [(GHC.Base.String, Data.Inflection.LexCat)],
          [Data.Phoneme.Word] #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0] -}
de10cc453a3c7e95ef87bd453bed2ed1
  $wparseSyllableIPA ::
    [Data.Phoneme.Phoneme]
    -> Data.Phoneme.Phoneme
    -> [Data.Phoneme.Phoneme]
    -> GHC.Base.String
  {- Arity: 3, Strictness: <S,1*U><S,1*U><L,1*U>, Inline: [0] -}
a449b2e9b80750eecab419d9bc9791f2
  parseDictionary ::
    [[Data.Phoneme.Phoneme]]
    -> [((GHC.Base.String, Data.Inflection.LexCat), Data.Phoneme.Word)]
    -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U><L,1*U>,
     Unfolding: (\ (sonHier :: [[Data.Phoneme.Phoneme]])
                   (pairs :: [((GHC.Base.String, Data.Inflection.LexCat),
                               Data.Phoneme.Word)]) ->
                 GHC.CString.unpackAppendCString#
                   "\n"#
                   (letrec {
                      groupByFBCore :: [((GHC.Base.String, Data.Inflection.LexCat),
                                         Data.Phoneme.Word)]
                                       -> [[GHC.Types.Char]]
                        {- Arity: 1, Strictness: <S,1*U> -}
                      = \ (ds :: [((GHC.Base.String, Data.Inflection.LexCat),
                                   Data.Phoneme.Word)]) ->
                        case ds of wild {
                          [] -> GHC.Types.[] @ [GHC.Types.Char]
                          : x xs
                          -> let {
                               ds1 :: ([((GHC.Base.String, Data.Inflection.LexCat),
                                         Data.Phoneme.Word)],
                                       [((GHC.Base.String, Data.Inflection.LexCat),
                                         Data.Phoneme.Word)])
                               = case GHC.List.$wspan
                                        @ ((GHC.Base.String, Data.Inflection.LexCat),
                                           Data.Phoneme.Word)
                                        (\ (y :: ((GHC.Base.String, Data.Inflection.LexCat),
                                                  Data.Phoneme.Word)) ->
                                         case x of wild1 { (,) ds2 y1 ->
                                         case y1 of wild2 { Data.Phoneme.Word a1 ->
                                         case y of wild3 { (,) ds3 y2 ->
                                         case y2 of wild4 { Data.Phoneme.Word b1 ->
                                         GHC.Classes.$fEq[]_$c==
                                           @ Data.Phoneme.Morpheme
                                           Data.Phoneme.$fEqMorpheme
                                           a1
                                           b1 } } } })
                                        xs of ww { (#,#) ww1 ww2 ->
                                 (ww1, ww2) }
                             } in
                             GHC.Types.:
                               @ [GHC.Types.Char]
                               (case Out.Lexicon.$wgo
                                       (GHC.Types.:
                                          @ ((GHC.Base.String, Data.Inflection.LexCat),
                                             Data.Phoneme.Word)
                                          x
                                          (case ds1 of wild1 { (,) ys zs ->
                                           ys })) of ww { (#,#) ww1 ww2 ->
                                case ww2 of wild1 {
                                  [] -> case GHC.List.badHead ret_ty [GHC.Types.Char] of {}
                                  : x1 ds2
                                  -> case x1 of ww3 { Data.Phoneme.Word ww4 ->
                                     GHC.Base.++
                                       @ GHC.Types.Char
                                       (Out.Roman.romanizeWord_go ww4)
                                       (GHC.CString.unpackAppendCString#
                                          " ("#
                                          (GHC.Base.++
                                             @ GHC.Types.Char
                                             (Out.Lexicon.parseWordIPA sonHier ww3)
                                             (GHC.CString.unpackAppendCString#
                                                ")"#
                                                (Out.Lexicon.parseDictionary_go ww1)))) } } })
                               (case ds1 of wild1 { (,) ys zs -> groupByFBCore zs }) }
                    } in
                    case groupByFBCore
                           (Data.OldList.sortBy
                              @ ((GHC.Base.String, Data.Inflection.LexCat), Data.Phoneme.Word)
                              Out.Lexicon.parseDictionary2
                              (Data.OldList.sortBy
                                 @ ((GHC.Base.String, Data.Inflection.LexCat), Data.Phoneme.Word)
                                 Out.Lexicon.parseDictionary2
                                 pairs)) of wild {
                      [] -> GHC.Types.[] @ GHC.Types.Char
                      : x xs1
                      -> Data.OldList.intercalate_$spoly_go
                           @ GHC.Types.Char
                           x
                           (Data.OldList.prependToAll
                              @ [GHC.Types.Char]
                              Out.Lexicon.parseDictionary1
                              xs1) })) -}
73f6aba0518494657e2569c2dafd2860
  parseDictionary1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "\n"#) -}
a74d45073a2b054d26084baa450d05fc
  parseDictionary2 ::
    ((GHC.Base.String, Data.Inflection.LexCat), Data.Phoneme.Word)
    -> ((GHC.Base.String, Data.Inflection.LexCat), Data.Phoneme.Word)
    -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (\ (x :: ((GHC.Base.String, Data.Inflection.LexCat),
                          Data.Phoneme.Word))
                   (y :: ((GHC.Base.String, Data.Inflection.LexCat),
                          Data.Phoneme.Word))[OneShot] ->
                 case x of wild { (,) ds1 y1 ->
                 case y1 of wild1 { Data.Phoneme.Word a1 ->
                 case y of wild2 { (,) ds2 y2 ->
                 case y2 of wild3 { Data.Phoneme.Word b1 ->
                 GHC.Classes.$fOrd[]_$ccompare
                   @ Data.Phoneme.Morpheme
                   Data.Phoneme.$fOrdMorpheme
                   a1
                   b1 } } } }) -}
838d0987420b4a4b8eb7ccd0083d6ec2
  parseDictionary_go ::
    [([GHC.Types.Char], Data.Inflection.LexCat)] -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <S,1*U> -}
2673cc7e002bb22f251c010f011dbe38
  parseMorphemeIPA ::
    [[Data.Phoneme.Phoneme]]
    -> Data.Phoneme.Morpheme -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U><L,1*U(1*U)>,
     Unfolding: (\ (sonHier :: [[Data.Phoneme.Phoneme]])
                   (morph :: Data.Phoneme.Morpheme) ->
                 GHC.CString.unpackAppendCString#
                   "/"#
                   (case morph of wild { Data.Phoneme.Morpheme ds1 ->
                    case GHC.Base.map
                           @ Data.Other.Syllable
                           @ [GHC.Types.Char]
                           Out.Lexicon.parseSyllableIPA
                           (GHC.Base.map
                              @ [Data.Phoneme.Phoneme]
                              @ Data.Other.Syllable
                              (Out.Syllable.makeSyllable sonHier)
                              (Out.Syllable.breakWord
                                 ds1
                                 (GHC.Types.[] @ Data.Phoneme.Phoneme)
                                 sonHier)) of wild1 {
                      [] -> Out.Lexicon.parseWordIPA2
                      : x xs1
                      -> GHC.Base.++
                           @ GHC.Types.Char
                           (Data.OldList.intercalate_$spoly_go
                              @ GHC.Types.Char
                              x
                              (Data.OldList.prependToAll
                                 @ [GHC.Types.Char]
                                 Out.Lexicon.parseWordIPA1
                                 xs1))
                           Out.Lexicon.parseWordIPA2 } })) -}
2edfaf837d4bc016821f1c64f45d425e
  parsePhonemeIPA :: Data.Phoneme.Phoneme -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Data.Phoneme.Phoneme) ->
                 case ds of wild {
                   Data.Phoneme.Consonant ds1 ds2 ds3 ipa -> ipa
                   Data.Phoneme.Vowel ds1 ds2 ds3 ds4 ds5 ipa -> ipa
                   Data.Phoneme.Diphthong ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ipa -> ipa
                   Data.Phoneme.Blank -> GHC.Types.[] @ GHC.Types.Char }) -}
6d3885cef1eac3e35a00d712a7d7ce85
  parseSyllableIPA :: Data.Other.Syllable -> GHC.Base.String
  {- Arity: 1, Strictness: <S(SSL),1*U(1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.Other.Syllable) ->
                 case w of ww { Data.Other.Syllable ww1 ww2 ww3 ->
                 Out.Lexicon.$wparseSyllableIPA ww1 ww2 ww3 }) -}
afb48de498fa54c42bf8a78b72f586cc
  parseWordIPA ::
    [[Data.Phoneme.Phoneme]] -> Data.Phoneme.Word -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U><L,1*U(1*U)>,
     Unfolding: (\ (sonHier :: [[Data.Phoneme.Phoneme]])
                   (word :: Data.Phoneme.Word) ->
                 GHC.CString.unpackAppendCString#
                   "/"#
                   (case word of ww { Data.Phoneme.Word ww1 ->
                    case GHC.Base.map
                           @ Data.Other.Syllable
                           @ [GHC.Types.Char]
                           Out.Lexicon.parseSyllableIPA
                           (GHC.Base.map
                              @ [Data.Phoneme.Phoneme]
                              @ Data.Other.Syllable
                              (Out.Syllable.makeSyllable sonHier)
                              (Out.Syllable.breakWord
                                 (Out.Syllable.syllabifyWord_go ww1)
                                 (GHC.Types.[] @ Data.Phoneme.Phoneme)
                                 sonHier)) of wild {
                      [] -> Out.Lexicon.parseWordIPA2
                      : x xs1
                      -> GHC.Base.++
                           @ GHC.Types.Char
                           (Data.OldList.intercalate_$spoly_go
                              @ GHC.Types.Char
                              x
                              (Data.OldList.prependToAll
                                 @ [GHC.Types.Char]
                                 Out.Lexicon.parseWordIPA1
                                 xs1))
                           Out.Lexicon.parseWordIPA2 } })) -}
d679480572c7896850b177dfb88b18a4
  parseWordIPA1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "."#) -}
314627e5138c5a16f182e6f4874882bc
  parseWordIPA2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "/"#) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

