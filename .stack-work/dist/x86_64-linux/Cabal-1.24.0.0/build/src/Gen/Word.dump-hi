
==================== FINAL INTERFACE ====================
2016-12-23 22:46:49.024089 UTC

interface con-lang-gen-0.0.0.1-JpecSLrjfNmG1CUMEdSr39:Gen.Word 8001
  interface hash: 2efb57ce8fd9c2c5f26d5f6b55ea572e
  ABI hash: dba56026d662d728bdcc7f366ef7b715
  export-list hash: 9c9ff1216590b215ad358bce19949b0c
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: fbb7bb6b86ae8faca780181c3078ce45
  sig of: Nothing
  used TH splices: False
  where
exports:
  Gen.Word.makeDictionary
  Gen.Word.someFunction
module dependencies: Data.Grammar Data.Inflection Data.Other
                     Data.Phoneme Gen.Phoneme Gen.Phonotactics LoadStuff
package dependencies: MonadPrompt-1.0.0.5@MonadPrompt-1.0.0.5-DSJ4febv4ITH7w1gOjdDZE
                      MonadRandom-0.4.2.3@MonadRandom-0.4.2.3-8TfCm6PGvGYB7omozORhov
                      array-0.5.1.1@array-0.5.1.1 base-4.9.0.0
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      erf-2.0.0.0@erf-2.0.0.0-9HTdBV7htNjASgIJAT55AC
                      flexible-defaults-0.0.1.2@flexible-defaults-0.0.1.2-1H2pkAjuTF1KghZBVsL2zl
                      ghc-boot-th-8.0.1@ghc-boot-th-8.0.1 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
                      math-functions-0.2.1.0@math-functions-0.2.1.0-JE0wcV77zWeIiF13ulGtAh
                      mersenne-random-pure64-0.2.0.5@mersenne-random-pure64-0.2.0.5-F5a2mcFFCTQJXAM4TYDSBs
                      monad-loops-0.4.3@monad-loops-0.4.3-1xZFtRVMQPC4X8bjTBWqNi
                      mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM
                      mwc-random-0.13.5.0@mwc-random-0.13.5.0-LMmPnBqFcyXKNTZwO31mEb
                      old-locale-1.0.0.7@old-locale-1.0.0.7-6glXNhHF891B41ZfuI8hU8
                      old-time-1.1.0.3@old-time-1.1.0.3-IcvdkJUsE9M8t3io8peAEp
                      pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa
                      random-1.1@random-1.1-54KmMHXjttlERYcr1mvsAe
                      random-extras-0.19@random-extras-0.19-CVrKkFX7Wr28Gjqnh35lrd
                      random-fu-0.2.7.0@random-fu-0.2.7.0-CQ0Lr6a3wRjKfR0NneZKnx
                      random-shuffle-0.0.4@random-shuffle-0.0.4-LfeDYNPfwrQ2o9p6tw2M9l
                      random-source-0.3.0.6@random-source-0.3.0.6-9Kd6KhtNNMs92HTzA5obc8
                      rvar-0.2.0.3@rvar-0.2.0.3-830TjBaI3UX5PWiddvPaWF
                      stateref-0.3@stateref-0.3-3PlselgQchu2fixnOT7uWq
                      stm-2.4.4.1@stm-2.4.4.1-4z2NRWnB0NIIUvSJsHW0kF
                      syb-0.6@syb-0.6-C65vWCsht6A8uLstpQIXyj template-haskell-2.11.0.0
                      th-extras-0.0.0.4@th-extras-0.0.0.4-65k7Dg54W2KxpzDoCAUbA
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
                      vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6
orphans: MonadRandom-0.4.2.3@MonadRandom-0.4.2.3-8TfCm6PGvGYB7omozORhov:Control.Monad.Random
         base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         con-lang-gen-0.0.0.1-JpecSLrjfNmG1CUMEdSr39:Data.Inflection
         mersenne-random-pure64-0.2.0.5@mersenne-random-pure64-0.2.0.5-F5a2mcFFCTQJXAM4TYDSBs:System.Random.Mersenne.Pure64
         random-source-0.3.0.6@random-source-0.3.0.6-9Kd6KhtNNMs92HTzA5obc8:Data.Random.Source
         random-source-0.3.0.6@random-source-0.3.0.6-9Kd6KhtNNMs92HTzA5obc8:Data.Random.Source.IO
         random-source-0.3.0.6@random-source-0.3.0.6-9Kd6KhtNNMs92HTzA5obc8:Data.Random.Source.MWC
         random-source-0.3.0.6@random-source-0.3.0.6-9Kd6KhtNNMs92HTzA5obc8:Data.Random.Source.PureMT
         random-source-0.3.0.6@random-source-0.3.0.6-9Kd6KhtNNMs92HTzA5obc8:Data.Random.Source.StdGen
         stateref-0.3@stateref-0.3-3PlselgQchu2fixnOT7uWq:Data.StateRef.Instances
         stateref-0.3@stateref-0.3-3PlselgQchu2fixnOT7uWq:Data.StateRef.Instances.STM
         stm-2.4.4.1@stm-2.4.4.1-4z2NRWnB0NIIUvSJsHW0kF:Control.Monad.STM
         syb-0.6@syb-0.6-C65vWCsht6A8uLstpQIXyj:Data.Generics.Instances
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Fusion.Bundle
         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Unboxed
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.1@ghc-boot-th-8.0.1:GHC.LanguageExtensions.Type
                         math-functions-0.2.1.0@math-functions-0.2.1.0-JE0wcV77zWeIiF13ulGtAh:Numeric.RootFinding
                         mwc-random-0.13.5.0@mwc-random-0.13.5.0-LMmPnBqFcyXKNTZwO31mEb:System.Random.MWC
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa:Control.Monad.Primitive
                         template-haskell-2.11.0.0:Language.Haskell.TH.Syntax
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Primitive
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Unboxed
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Unboxed.Base
import  -/  base-4.9.0.0:Control.Monad 7767aebfd53f0b584cef2fe66ad3986c
import  -/  base-4.9.0.0:Data.Foldable 8aeb682f6c74f97fcf0ace0d608a43ea
import  -/  base-4.9.0.0:Data.Functor 6fc476505db88d678632a4a838125f13
import  -/  base-4.9.0.0:Data.List 49b86831b79b49ce5d4d9416ecba61df
import  -/  base-4.9.0.0:Data.Tuple acb0ed10307ed88df6c81b8589f4de16
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  Data.Grammar e3bdf85eebd04aee9ead3a06df4aad28
  exports: 0062e624f7e52b2eec78ca7e68e0f617
import  -/  Data.Inflection f266f0dbc95b0bc603741fea34af6d4b
  exports: 3959414e78500c5c160744df7b5d22d7
  LexCat ae7b63f8f02a08f901ccdfd454a411ac
  ManifestSystem bbcb171ae6dead0cd5095e2d02b10d22
  manSysCombos 3ceb0c52394cecda4a3f30b5608284fd
import  -/  Data.Other ca3d75b7f17df1a823d9bed122472296
  exports: a3d527128309076dcf1ad037267b56af
import  -/  Data.Phoneme 8d8abfca47f36976b4a493acc97ddf5b
  exports: cf7e229a8d1eca731bf27cf39a54d5d4
  Morpheme b30fcf8c1909ae0b282e12f97a52fc6c
  Word 94b2295a81362cccfd6d7143a2d43ca8
  Word 7b936d811d140964313d74386435dc67
import  -/  Gen.Phoneme 1feac3b6cefe256da800ca9a4b653c35
  exports: 87fc837d057a141a62651e3cb3f147e6
import  -/  Gen.Phonotactics 64947df302293ab7496d6582d0e870f2
  exports: 81285c12768478261952ac9b82364ee9
import  -/  LoadStuff 52b30a31121fa9ff1df53e3779483f3b
  exports: 1aacee6a2d33dfd56110673072210ea2
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  random-extras-0.19@random-extras-0.19-CVrKkFX7Wr28Gjqnh35lrd:Data.Random.Extras 29c24169732e6d9b861a3e34bb12d853
import  -/  random-fu-0.2.7.0@random-fu-0.2.7.0-CQ0Lr6a3wRjKfR0NneZKnx:Data.Random 8883d063189e353ce779cba72d37ba19
import  -/  rvar-0.2.0.3@rvar-0.2.0.3-830TjBaI3UX5PWiddvPaWF:Data.RVar af4b152c68035decd69925a9162e78b3
2f847706a4786868f8f5ced448e94f1c
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Gen.Word.$trModule2
                   Gen.Word.$trModule1) -}
0b601cb530894b6ae459e8c7c601153c
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Gen.Word"#) -}
3a22e00df04db8c9c0562aabd3372166
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "con-lang-gen-0.0.0.1-JpecSLrjfNmG1CUMEdSr39"#) -}
2f2bc6dfab0a63f3231a2429067c7ae9
  makeDictionary ::
    [(Data.Inflection.LexCat, [Data.Inflection.ManifestSystem],
      [Data.Inflection.ManifestSystem],
      [Data.Inflection.ManifestSystem])]
    -> [((GHC.Base.String, Data.Inflection.LexCat),
         Data.Phoneme.Morpheme)]
    -> [((GHC.Base.String, Data.Inflection.LexCat), Data.Phoneme.Word)]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>,
     Unfolding: (\ (mans :: [(Data.Inflection.LexCat,
                              [Data.Inflection.ManifestSystem], [Data.Inflection.ManifestSystem],
                              [Data.Inflection.ManifestSystem])])
                   (rootDict :: [((GHC.Base.String, Data.Inflection.LexCat),
                                  Data.Phoneme.Morpheme)]) ->
                 letrec {
                   go :: [((GHC.Base.String, Data.Inflection.LexCat),
                           Data.Phoneme.Morpheme)]
                         -> [((GHC.Base.String, Data.Inflection.LexCat), Data.Phoneme.Word)]
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [((GHC.Base.String, Data.Inflection.LexCat),
                                Data.Phoneme.Morpheme)]) ->
                     case ds of wild {
                       []
                       -> GHC.Types.[]
                            @ ((GHC.Base.String, Data.Inflection.LexCat), Data.Phoneme.Word)
                       : y ys
                       -> case y of wild1 { (,) ds1 morph ->
                          case ds1 of wild2 { (,) str lc ->
                          case GHC.List.filter
                                 @ (Data.Inflection.LexCat, [Data.Inflection.ManifestSystem],
                                    [Data.Inflection.ManifestSystem],
                                    [Data.Inflection.ManifestSystem])
                                 (\ (ds2 :: (Data.Inflection.LexCat,
                                             [Data.Inflection.ManifestSystem],
                                             [Data.Inflection.ManifestSystem],
                                             [Data.Inflection.ManifestSystem])) ->
                                  case ds2 of wild3 { (,,,) x ds3 ds4 ds5 ->
                                  Data.Inflection.$fEqLexCat_$c== x lc })
                                 mans of wild3 {
                            []
                            -> GHC.Types.:
                                 @ ((GHC.Base.String, Data.Inflection.LexCat), Data.Phoneme.Word)
                                 (wild2,
                                  Data.Phoneme.Word
                                    (GHC.Types.:
                                       @ Data.Phoneme.Morpheme
                                       morph
                                       (GHC.Types.[] @ Data.Phoneme.Morpheme)))
                                 (go ys)
                            : ds2 ds3
                            -> case ds2 of wild4 { (,,,) ds4 part pref suff ->
                               let {
                                 xs :: [[Data.Phoneme.Morpheme]]
                                 = Gen.Word.someFunction
                                     (GHC.Base.map
                                        @ Data.Inflection.ManifestSystem
                                        @ [Data.Phoneme.Morpheme]
                                        Gen.Word.makeDictionary1
                                        suff)
                               } in
                               let {
                                 xs1 :: [Data.Phoneme.Morpheme]
                                 = GHC.Types.:
                                     @ Data.Phoneme.Morpheme
                                     morph
                                     (GHC.Types.[] @ Data.Phoneme.Morpheme)
                               } in
                               let {
                                 z :: [((GHC.Base.String, Data.Inflection.LexCat),
                                        Data.Phoneme.Word)]
                                 = go ys
                               } in
                               letrec {
                                 go1 :: [[Data.Phoneme.Morpheme]]
                                        -> [((GHC.Base.String, Data.Inflection.LexCat),
                                             Data.Phoneme.Word)]
                                   {- Arity: 1, Strictness: <S,1*U> -}
                                 = \ (ds5 :: [[Data.Phoneme.Morpheme]]) ->
                                   case ds5 of wild5 {
                                     [] -> z
                                     : y1 ys1
                                     -> let {
                                          ys2 :: [((GHC.Base.String, Data.Inflection.LexCat),
                                                   Data.Phoneme.Word)]
                                          = go1 ys1
                                        } in
                                        letrec {
                                          go2 :: [[Data.Phoneme.Morpheme]]
                                                 -> [((GHC.Base.String, Data.Inflection.LexCat),
                                                      Data.Phoneme.Word)]
                                            {- Arity: 1, Strictness: <S,1*U> -}
                                          = \ (ds6 :: [[Data.Phoneme.Morpheme]]) ->
                                            case ds6 of wild6 {
                                              [] -> ys2
                                              : y2 ys3
                                              -> GHC.Types.:
                                                   @ ((GHC.Base.String, Data.Inflection.LexCat),
                                                      Data.Phoneme.Word)
                                                   (wild2,
                                                    Data.Phoneme.Word
                                                      (GHC.Base.++
                                                         @ Data.Phoneme.Morpheme
                                                         y1
                                                         (GHC.Base.++
                                                            @ Data.Phoneme.Morpheme
                                                            xs1
                                                            y2)))
                                                   (go2 ys3) }
                                        } in
                                        go2 xs }
                               } in
                               go1
                                 (Gen.Word.someFunction
                                    (GHC.Base.map
                                       @ Data.Inflection.ManifestSystem
                                       @ [Data.Phoneme.Morpheme]
                                       Gen.Word.makeDictionary1
                                       pref)) } } } } }
                 } in
                 go rootDict) -}
717ed5ba38aa057d2edd0723d67237e5
  makeDictionary1 ::
    Data.Inflection.ManifestSystem -> [Data.Phoneme.Morpheme]
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Inflection.ManifestSystem) ->
                 case x of wild { Data.Inflection.ManifestSystem ds1 ds2 ds3 ->
                 GHC.Base.build
                   @ Data.Phoneme.Morpheme
                   (\ @ b1
                      (c :: Data.Phoneme.Morpheme -> b1 -> b1)[OneShot]
                      (n :: b1)[OneShot] ->
                    GHC.Base.foldr
                      @ (Data.Phoneme.Morpheme,
                         (Data.Inflection.Express Data.Inflection.Gender,
                          Data.Inflection.Express Data.Inflection.Animacy,
                          Data.Inflection.Express Data.Inflection.Case,
                          Data.Inflection.Express Data.Inflection.Number,
                          Data.Inflection.Express Data.Inflection.Definiteness,
                          Data.Inflection.Express Data.Inflection.Specificity,
                          Data.Inflection.Express Data.Inflection.Topic,
                          Data.Inflection.Express Data.Inflection.Person,
                          Data.Inflection.Express Data.Inflection.Honorific,
                          Data.Inflection.Express Data.Inflection.Polarity,
                          Data.Inflection.Express Data.Inflection.Tense,
                          Data.Inflection.Express Data.Inflection.Aspect,
                          Data.Inflection.Express Data.Inflection.Mood,
                          Data.Inflection.Express Data.Inflection.Voice,
                          Data.Inflection.Express Data.Inflection.Evidentiality,
                          Data.Inflection.Express Data.Inflection.Transitivity,
                          Data.Inflection.Express Data.Inflection.Volition))
                      @ b1
                      (GHC.Base.mapFB
                         @ Data.Phoneme.Morpheme
                         @ b1
                         @ (Data.Phoneme.Morpheme,
                            (Data.Inflection.Express Data.Inflection.Gender,
                             Data.Inflection.Express Data.Inflection.Animacy,
                             Data.Inflection.Express Data.Inflection.Case,
                             Data.Inflection.Express Data.Inflection.Number,
                             Data.Inflection.Express Data.Inflection.Definiteness,
                             Data.Inflection.Express Data.Inflection.Specificity,
                             Data.Inflection.Express Data.Inflection.Topic,
                             Data.Inflection.Express Data.Inflection.Person,
                             Data.Inflection.Express Data.Inflection.Honorific,
                             Data.Inflection.Express Data.Inflection.Polarity,
                             Data.Inflection.Express Data.Inflection.Tense,
                             Data.Inflection.Express Data.Inflection.Aspect,
                             Data.Inflection.Express Data.Inflection.Mood,
                             Data.Inflection.Express Data.Inflection.Voice,
                             Data.Inflection.Express Data.Inflection.Evidentiality,
                             Data.Inflection.Express Data.Inflection.Transitivity,
                             Data.Inflection.Express Data.Inflection.Volition))
                         c
                         (Data.Tuple.fst
                            @ Data.Phoneme.Morpheme
                            @ (Data.Inflection.Express Data.Inflection.Gender,
                               Data.Inflection.Express Data.Inflection.Animacy,
                               Data.Inflection.Express Data.Inflection.Case,
                               Data.Inflection.Express Data.Inflection.Number,
                               Data.Inflection.Express Data.Inflection.Definiteness,
                               Data.Inflection.Express Data.Inflection.Specificity,
                               Data.Inflection.Express Data.Inflection.Topic,
                               Data.Inflection.Express Data.Inflection.Person,
                               Data.Inflection.Express Data.Inflection.Honorific,
                               Data.Inflection.Express Data.Inflection.Polarity,
                               Data.Inflection.Express Data.Inflection.Tense,
                               Data.Inflection.Express Data.Inflection.Aspect,
                               Data.Inflection.Express Data.Inflection.Mood,
                               Data.Inflection.Express Data.Inflection.Voice,
                               Data.Inflection.Express Data.Inflection.Evidentiality,
                               Data.Inflection.Express Data.Inflection.Transitivity,
                               Data.Inflection.Express Data.Inflection.Volition)))
                      n
                      ds3) }) -}
9120f006e7f0bd044a5191157d3fc090
  someFunction ::
    [[Data.Phoneme.Morpheme]] -> [[Data.Phoneme.Morpheme]]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

