
==================== FINAL INTERFACE ====================
2016-12-21 17:41:41.25303 UTC

interface con-lang-gen-0.0.0.1-JpecSLrjfNmG1CUMEdSr39:Gen.Phoneme 8001
  interface hash: 39eea89403f9205d01727771486c1d5a
  ABI hash: 1feac3b6cefe256da800ca9a4b653c35
  export-list hash: 87fc837d057a141a62651e3cb3f147e6
  orphan hash: 67c36f871353a0ca9f89a13753979246
  flag hash: fbb7bb6b86ae8faca780181c3078ce45
  sig of: Nothing
  used TH splices: False
  where
exports:
  Gen.Phoneme.makeBacknesses
  Gen.Phoneme.makeConsonants
  Gen.Phoneme.makeDiphInventory
  Gen.Phoneme.makeHeights
  Gen.Phoneme.makeLengths
  Gen.Phoneme.makeManners
  Gen.Phoneme.makePhonations
  Gen.Phoneme.makePlaces
  Gen.Phoneme.makeRoundedneses
  Gen.Phoneme.makeTones
  Gen.Phoneme.makeVowels
module dependencies: Data.Phoneme
package dependencies: MonadPrompt-1.0.0.5@MonadPrompt-1.0.0.5-DSJ4febv4ITH7w1gOjdDZE
                      MonadRandom-0.4.2.3@MonadRandom-0.4.2.3-8TfCm6PGvGYB7omozORhov
                      array-0.5.1.1@array-0.5.1.1 base-4.9.0.0
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      erf-2.0.0.0@erf-2.0.0.0-9HTdBV7htNjASgIJAT55AC
                      flexible-defaults-0.0.1.2@flexible-defaults-0.0.1.2-1H2pkAjuTF1KghZBVsL2zl
                      ghc-boot-th-8.0.1@ghc-boot-th-8.0.1 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
                      math-functions-0.2.1.0@math-functions-0.2.1.0-JE0wcV77zWeIiF13ulGtAh
                      mersenne-random-pure64-0.2.0.5@mersenne-random-pure64-0.2.0.5-F5a2mcFFCTQJXAM4TYDSBs
                      monad-loops-0.4.3@monad-loops-0.4.3-1xZFtRVMQPC4X8bjTBWqNi
                      mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM
                      mwc-random-0.13.5.0@mwc-random-0.13.5.0-LMmPnBqFcyXKNTZwO31mEb
                      old-locale-1.0.0.7@old-locale-1.0.0.7-6glXNhHF891B41ZfuI8hU8
                      old-time-1.1.0.3@old-time-1.1.0.3-IcvdkJUsE9M8t3io8peAEp
                      pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa
                      random-1.1@random-1.1-54KmMHXjttlERYcr1mvsAe
                      random-extras-0.19@random-extras-0.19-CVrKkFX7Wr28Gjqnh35lrd
                      random-fu-0.2.7.0@random-fu-0.2.7.0-CQ0Lr6a3wRjKfR0NneZKnx
                      random-shuffle-0.0.4@random-shuffle-0.0.4-LfeDYNPfwrQ2o9p6tw2M9l
                      random-source-0.3.0.6@random-source-0.3.0.6-9Kd6KhtNNMs92HTzA5obc8
                      rvar-0.2.0.3@rvar-0.2.0.3-830TjBaI3UX5PWiddvPaWF
                      stateref-0.3@stateref-0.3-3PlselgQchu2fixnOT7uWq
                      stm-2.4.4.1@stm-2.4.4.1-4z2NRWnB0NIIUvSJsHW0kF
                      syb-0.6@syb-0.6-C65vWCsht6A8uLstpQIXyj template-haskell-2.11.0.0
                      th-extras-0.0.0.4@th-extras-0.0.0.4-65k7Dg54W2KxpzDoCAUbA
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
                      vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6
orphans: MonadRandom-0.4.2.3@MonadRandom-0.4.2.3-8TfCm6PGvGYB7omozORhov:Control.Monad.Random
         base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         mersenne-random-pure64-0.2.0.5@mersenne-random-pure64-0.2.0.5-F5a2mcFFCTQJXAM4TYDSBs:System.Random.Mersenne.Pure64
         random-source-0.3.0.6@random-source-0.3.0.6-9Kd6KhtNNMs92HTzA5obc8:Data.Random.Source
         random-source-0.3.0.6@random-source-0.3.0.6-9Kd6KhtNNMs92HTzA5obc8:Data.Random.Source.IO
         random-source-0.3.0.6@random-source-0.3.0.6-9Kd6KhtNNMs92HTzA5obc8:Data.Random.Source.MWC
         random-source-0.3.0.6@random-source-0.3.0.6-9Kd6KhtNNMs92HTzA5obc8:Data.Random.Source.PureMT
         random-source-0.3.0.6@random-source-0.3.0.6-9Kd6KhtNNMs92HTzA5obc8:Data.Random.Source.StdGen
         stateref-0.3@stateref-0.3-3PlselgQchu2fixnOT7uWq:Data.StateRef.Instances
         stateref-0.3@stateref-0.3-3PlselgQchu2fixnOT7uWq:Data.StateRef.Instances.STM
         stm-2.4.4.1@stm-2.4.4.1-4z2NRWnB0NIIUvSJsHW0kF:Control.Monad.STM
         syb-0.6@syb-0.6-C65vWCsht6A8uLstpQIXyj:Data.Generics.Instances
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Fusion.Bundle
         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Unboxed
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.1@ghc-boot-th-8.0.1:GHC.LanguageExtensions.Type
                         math-functions-0.2.1.0@math-functions-0.2.1.0-JE0wcV77zWeIiF13ulGtAh:Numeric.RootFinding
                         mwc-random-0.13.5.0@mwc-random-0.13.5.0-LMmPnBqFcyXKNTZwO31mEb:System.Random.MWC
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa:Control.Monad.Primitive
                         template-haskell-2.11.0.0:Language.Haskell.TH.Syntax
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Primitive
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Unboxed
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Unboxed.Base
import  -/  base-4.9.0.0:Control.Monad 7767aebfd53f0b584cef2fe66ad3986c
import  -/  base-4.9.0.0:Data.Foldable 8aeb682f6c74f97fcf0ace0d608a43ea
import  -/  base-4.9.0.0:Data.Functor 6fc476505db88d678632a4a838125f13
import  -/  base-4.9.0.0:Data.List 49b86831b79b49ce5d4d9416ecba61df
import  -/  base-4.9.0.0:Data.Traversable 7ce5b7ee67475ac3d03ae825b86efd9f
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:GHC.Num 48f506a8f4ecf06285d0a0706594dcc0
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  Data.Phoneme 8d8abfca47f36976b4a493acc97ddf5b
  exports: cf7e229a8d1eca731bf27cf39a54d5d4
  AFFRICATE c09cefcdf9bb64c77f5e92d25366c36b
  ALVEOLAR 3a9a95462866e3bf2d250a65735051a2
  ALVEOLOPALATAL b1cee91b280aa32b1a16a83f9ff7cc8c
  APPROXIMANT 5b904c47e0af46d4ed2af2fc21c64f28
  ASPIRATED f718f0e94410ce82cc34a054c28fed14
  BACK 9d22ce0b6089f0d97dfc83996c89271a
  BILABIAL 4932d81a5a7643b2d4cac9f847fa3c60
  BOTTOMT 4b19720767d17ee51afe1bfde8baef41
  BREATHY 262bc4bc1dd1c7c1750d49973240d549
  Backness a3d34da76e787829b1272672cb3d501f
  CENTRAL e2dbee74de6becc28a8c0a024e5e801f
  CLOSE ec81b4ac2a0b04985f65b74159463ac0
  CLOSEMID 649fa4922c6917822c15255f97a4e2a2
  CORONAL 3c6ed8445cba57651f7d298a182db7a3
  CREAKY 953f8dd0cb0972c3b2b64ae937e4c034
  Consonant 2025c45471b917c711c4a3ed75432b5d
  DEFAULT f389b6ae06ccf3b27fb0ca84dbc4bdfe
  DENTAL ccd27642943b87e17600fd9e8ee24b1e
  DENTIALVEOLAR fc8394ec45cbde564885bf1730a8cf6a
  DIPT eaea9eab9da766cdd1bc77038600cc0d
  DORSAL 3ac56eb0ca68bf7d0167f85b6e61c503
  Diphthong a422ed032dcd1f6394d211ff53692455
  EPIGLOTTAL 494278946c0c793a8071610cd11ceb0d
  EPIPHARYNGEAL 505b75b14c1153e9ba74c6bfbf96116b
  FALLT 61b24745a24af2d298461eca4e70fcf3
  FLAP 0d7cc8fe644c1be784b98ad3976b3267
  FRICATIVE 5128ce7a13ff47475ce842f60c37f38a
  FRONT ad6d475040d1eb2b1c57cc3b56742c5c
  GLOTTAL c24f85e82ba3e8197b209f18ddf9e1a8
  HFALLT ed6725618e05d96ead5d7ee0eaa56df2
  HIGHT 7c531786375d6dca8fcccf367446775e
  HRISET f937bc0177edd97d5314d4eafba864f3
  Height e52daabfd4cc5d18128954ffcda031bb
  LABIAL a67d5034bf8b17c86be9890b5864e9e8
  LABIODENTAL 4b67a0a37938a948cd05689c9747a992
  LAFFRICATE fa70fed8aef23670d5f34bf3320b34a8
  LAPPROXIMANT 625bbf3b1a085001beeb1ca70d8c0062
  LARYNGEAL cd4cc76f713b39a246bbb27633925fed
  LFALLT afeeb480fa321508c6f116f271a6f283
  LFLAP 9649da6702946f291e293ab5a51f1e28
  LFRICATIVE daec662e31b6f98940d3ccb3ab7df9eb
  LONG 3d8fb38457eaa47a2963b1e4350c5d7a
  LOWT 4e0c2a45e849c3f84819a2863b8d2b36
  LRISET e741fbffe4d46e7a71ca8002079ba14f
  Length 3bc911798122c419c4b3747def87cb7a
  MID 0354802dc823401fcac57ef55064be50
  MIDT 5c0c48d38df97ce2d1811d913d70ffa8
  MODAL f1271d56c4f1b7534f63d27b7a959bcf
  Manner 457727c142c08ed8e753e8053528da14
  NASAL 1ac2144e9a4963705d5ae92bfc557a7d
  NEARBACK dde7c118320db393ed271630dc61c5b7
  NEARCLOSE 04f29112a37e8b0b8e37f675a15ff58f
  NEARFRONT 8455338a78879735295ab65d43bdcb1b
  NEAROPEN cd64e5e76d54266fc2b09138f094dbe5
  NONET 1a3aa6b632f9ff8c51c8571279e4ceb9
  NORMAL 704e6aaceb8af6f189a9e3216dffd052
  OPEN d7ff641b05444fb7e28b8fe6e747c3d2
  OPENMID 1b938e0895f1e07a2207917e45cf2404
  PALATAL 6aac2a3cf0418800625a6a3af9138540
  PEAKT e7187651f79f62c9250bbc897eb2de0c
  PHARYNGEAL 5bcd470ecfc134e6c38e38c8ccacb16d
  POSTALVEOLAR 861d5064f347617e6a0446683a06a770
  Phonation ff541d1764888145304960d9b00dcecd
  Phoneme 83c67fc806e8317ebba4d84ed8aa040f
  Place 1971716d79acadd98b648de5350e6f24
  RETROFLEX 7ad310359db018a44300ed3ae71c8664
  RISET 50501e013f58ff12930d2654a6e61038
  ROUNDED d3cfa13b6db97c2f47535e25da3c7c8f
  Roundedness 974abd7cc25c83307948d0001b49f38e
  SAFFRICATE 42927a60df4929e62f8f5d160e786c38
  SHORT 06551bee5114977459fa1e8401a1a445
  SILIBANT 67958a59eba78de4424b7c8fe5ce41bc
  SLACK 4c13096bb9b2b673f3990d402ee874cc
  STIFF 72b20ad67aece9b4798b325bba343c6d
  STOP 91d3c97adce79a6d653188bf658fe837
  TOPT e977fbb503be775a2b7e8c958cc0205d
  TRILL 8ddb2aeab5657e952dc2119957acc8ac
  Tone 8a5e65312c0d4c3c751cfe378d84cf4e
  UNROUNDED 2d32cb4061b6c09c9b1674f6d148f03f
  UVULAR d7051c82a99fe5d40b76e4d1cd6b3780
  VELAR 5182e2257fd8be1c7e795e8db857ac2f
  VOICELESS 4f0d49c305e531120bebbe1787527e91
  Vowel 5359c3eb0ea01a91f571480b7c844ae3
  csymbol 44e09bc93432887c79fdaf7cc2bfc5ab
  vsymbol d7238a8b79e42f07f54238aaf4e0c6dd
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  random-extras-0.19@random-extras-0.19-CVrKkFX7Wr28Gjqnh35lrd:Data.Random.Extras 29c24169732e6d9b861a3e34bb12d853
import  -/  random-fu-0.2.7.0@random-fu-0.2.7.0-CQ0Lr6a3wRjKfR0NneZKnx:Data.Random 8883d063189e353ce779cba72d37ba19
import  -/  random-fu-0.2.7.0@random-fu-0.2.7.0-CQ0Lr6a3wRjKfR0NneZKnx:Data.Random.Distribution.Uniform ce0adaf8d18b3032f5eb8601b73b7de8
import  -/  rvar-0.2.0.3@rvar-0.2.0.3-830TjBaI3UX5PWiddvPaWF:Data.RVar af4b152c68035decd69925a9162e78b3
774c1714edbb0bc1e1256e0f8078b4d6
  $s$fEq(,) ::
    GHC.Classes.Eq (Data.Phoneme.Place, Data.Phoneme.Manner)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Phoneme.Place, Data.Phoneme.Manner)
                  (GHC.Classes.$fEq(,)_$c==
                     @ Data.Phoneme.Place
                     @ Data.Phoneme.Manner
                     Data.Phoneme.$fEqPlace
                     Data.Phoneme.$fEqManner)
                  (GHC.Classes.$fEq(,)_$c/=
                     @ Data.Phoneme.Place
                     @ Data.Phoneme.Manner
                     Data.Phoneme.$fEqPlace
                     Data.Phoneme.$fEqManner) -}
bda4e08f104a495c9fcdfad9d03777ec
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Gen.Phoneme.$trModule2
                   Gen.Phoneme.$trModule1) -}
eca451a8b0fbfa27c172f093b8cc5301
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Gen.Phoneme"#) -}
9af5d831c6f8364c5967095d6dc29c4d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "con-lang-gen-0.0.0.1-JpecSLrjfNmG1CUMEdSr39"#) -}
4259ca164852ceb0340baece957bd6cb
  makeBacknesses :: Data.RVar.RVar [Data.Phoneme.Backness]
  {- Unfolding: (Data.Random.Extras.choice
                   @ [Data.Phoneme.Backness]
                   Gen.Phoneme.makeBacknesses1) -}
25bc915a3451325e13d10eb9c15f1ee5
  makeBacknesses1 :: [[Data.Phoneme.Backness]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [Data.Phoneme.Backness]
                   Gen.Phoneme.makeBacknesses13
                   Gen.Phoneme.makeBacknesses2) -}
86e53111687b5f0b825145c525b54952
  makeBacknesses10 :: [Data.Phoneme.Backness]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Backness
                   Data.Phoneme.FRONT
                   Gen.Phoneme.makeBacknesses11) -}
028d853ba222ac9531e1a7991787bd48
  makeBacknesses11 :: [Data.Phoneme.Backness]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Backness
                   Data.Phoneme.CENTRAL
                   Gen.Phoneme.makeBacknesses9) -}
d985e4dc28439f09629f20541ab6e6b6
  makeBacknesses12 :: [Data.Phoneme.Backness]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Backness
                   Data.Phoneme.FRONT
                   Gen.Phoneme.makeBacknesses9) -}
901111c2df5e4d7c8f6ebec1be7593bf
  makeBacknesses13 :: [Data.Phoneme.Backness]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Backness
                   Data.Phoneme.CENTRAL
                   (GHC.Types.[] @ Data.Phoneme.Backness)) -}
09141430d1c99d8dfc6fc28b7559dacc
  makeBacknesses2 :: [[Data.Phoneme.Backness]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [Data.Phoneme.Backness]
                   Gen.Phoneme.makeBacknesses12
                   Gen.Phoneme.makeBacknesses3) -}
eb1566a415e29f8188f6a72b6bfe43ab
  makeBacknesses3 :: [[Data.Phoneme.Backness]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [Data.Phoneme.Backness]
                   Gen.Phoneme.makeBacknesses10
                   Gen.Phoneme.makeBacknesses4) -}
63e6afb9966d81c66fbec44582348a5d
  makeBacknesses4 :: [[Data.Phoneme.Backness]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [Data.Phoneme.Backness]
                   Gen.Phoneme.makeBacknesses5
                   (GHC.Types.[] @ [Data.Phoneme.Backness])) -}
d9be894823fbc8cde4dafa76105eeda2
  makeBacknesses5 :: [Data.Phoneme.Backness]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Backness
                   Data.Phoneme.FRONT
                   Gen.Phoneme.makeBacknesses6) -}
b732921a96e861dd8794016300f0b7e9
  makeBacknesses6 :: [Data.Phoneme.Backness]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Backness
                   Data.Phoneme.NEARFRONT
                   Gen.Phoneme.makeBacknesses7) -}
6a9563cbe6a94826027053eb8475834b
  makeBacknesses7 :: [Data.Phoneme.Backness]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Backness
                   Data.Phoneme.CENTRAL
                   Gen.Phoneme.makeBacknesses8) -}
876712c3354f1c303b3e7b7d2a2cfa1a
  makeBacknesses8 :: [Data.Phoneme.Backness]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Backness
                   Data.Phoneme.NEARBACK
                   Gen.Phoneme.makeBacknesses9) -}
4e9834111b3bf1afa4011d2f14c74aca
  makeBacknesses9 :: [Data.Phoneme.Backness]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Backness
                   Data.Phoneme.BACK
                   (GHC.Types.[] @ Data.Phoneme.Backness)) -}
308666821f4db627348ea9efe8056eb9
  makeConsonants ::
    [Data.Phoneme.Place]
    -> [Data.Phoneme.Manner]
    -> [Data.Phoneme.Phonation]
    -> Data.RVar.RVar [Data.Phoneme.Phoneme]
  {- Arity: 3, Strictness: <L,U><L,U><L,U> -}
1fbf336c4c0962c0537c8e27b7767aa2
  makeDiphInventory ::
    GHC.Types.Int
    -> [Data.Phoneme.Phoneme] -> Data.RVar.RVar [Data.Phoneme.Phoneme]
  {- Arity: 2, Strictness: <L,1*U(U)><L,U> -}
ea8206f2f162085c99c713fe26485921
  makeHeights :: Data.RVar.RVar [Data.Phoneme.Height]
  {- Unfolding: (Data.Random.Extras.choice
                   @ [Data.Phoneme.Height]
                   Gen.Phoneme.makeHeights1) -}
97ec9f642157d6e1dc082bdddfef398b
  makeHeights1 :: [[Data.Phoneme.Height]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [Data.Phoneme.Height]
                   Gen.Phoneme.makeHeights20
                   Gen.Phoneme.makeHeights2) -}
ad5778ee7ae6f5ba54567174078558d6
  makeHeights10 :: [Data.Phoneme.Height]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Height
                   Data.Phoneme.OPENMID
                   Gen.Phoneme.makeHeights11) -}
0bf21b6e18bd02900fb4b7f3aa435c26
  makeHeights11 :: [Data.Phoneme.Height]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Height
                   Data.Phoneme.NEAROPEN
                   Gen.Phoneme.makeHeights12) -}
7f536adb40d16ae29b86761329370dd0
  makeHeights12 :: [Data.Phoneme.Height]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Height
                   Data.Phoneme.OPEN
                   (GHC.Types.[] @ Data.Phoneme.Height)) -}
0e515d7e094dec2ae11f829e736af8a2
  makeHeights13 :: [Data.Phoneme.Height]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Height
                   Data.Phoneme.CLOSE
                   Gen.Phoneme.makeHeights14) -}
4e25939cafb31183836dac2807758bdd
  makeHeights14 :: [Data.Phoneme.Height]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Height
                   Data.Phoneme.NEARCLOSE
                   Gen.Phoneme.makeHeights15) -}
c9132026fa688938c63636c8ced3ddcf
  makeHeights15 :: [Data.Phoneme.Height]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Height
                   Data.Phoneme.CLOSEMID
                   Gen.Phoneme.makeHeights10) -}
d31ef0a0baed56224e596a8c49b0419f
  makeHeights16 :: [Data.Phoneme.Height]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Height
                   Data.Phoneme.CLOSE
                   Gen.Phoneme.makeHeights17) -}
5dfe6aea866f81c2c97de4ebf9ff2373
  makeHeights17 :: [Data.Phoneme.Height]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Height
                   Data.Phoneme.CLOSEMID
                   Gen.Phoneme.makeHeights18) -}
fa24c70da859099b2d905a42a65c042e
  makeHeights18 :: [Data.Phoneme.Height]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Height
                   Data.Phoneme.OPENMID
                   Gen.Phoneme.makeHeights12) -}
de0fec6301aaa8078526f6c16f27f090
  makeHeights19 :: [Data.Phoneme.Height]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Height
                   Data.Phoneme.CLOSE
                   Gen.Phoneme.makeHeights12) -}
d0b8a70624e7167ee5d4b522676b9d52
  makeHeights2 :: [[Data.Phoneme.Height]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [Data.Phoneme.Height]
                   Gen.Phoneme.makeHeights19
                   Gen.Phoneme.makeHeights3) -}
d733d815f9d9a24d9ab17c91125e2ee3
  makeHeights20 :: [Data.Phoneme.Height]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Height
                   Data.Phoneme.MID
                   (GHC.Types.[] @ Data.Phoneme.Height)) -}
edecbd7ed08ad6869837f4120f99beb9
  makeHeights3 :: [[Data.Phoneme.Height]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [Data.Phoneme.Height]
                   Gen.Phoneme.makeHeights16
                   Gen.Phoneme.makeHeights4) -}
e389b5e6e34dfafb5972a241025644e1
  makeHeights4 :: [[Data.Phoneme.Height]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [Data.Phoneme.Height]
                   Gen.Phoneme.makeHeights13
                   Gen.Phoneme.makeHeights5) -}
9fcc6a3ebac2f68ea40ceb562dd188d5
  makeHeights5 :: [[Data.Phoneme.Height]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [Data.Phoneme.Height]
                   Gen.Phoneme.makeHeights6
                   (GHC.Types.[] @ [Data.Phoneme.Height])) -}
7aaf91bcfd2e5f7848f845d84bd90136
  makeHeights6 :: [Data.Phoneme.Height]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Height
                   Data.Phoneme.CLOSE
                   Gen.Phoneme.makeHeights7) -}
59df7b96e27ffc1f85e5d69fabaf366c
  makeHeights7 :: [Data.Phoneme.Height]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Height
                   Data.Phoneme.NEARCLOSE
                   Gen.Phoneme.makeHeights8) -}
f0997b1134a462e58458680c1b30c460
  makeHeights8 :: [Data.Phoneme.Height]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Height
                   Data.Phoneme.CLOSEMID
                   Gen.Phoneme.makeHeights9) -}
d4604140ba3cae0c8334b8251de630e6
  makeHeights9 :: [Data.Phoneme.Height]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Height
                   Data.Phoneme.MID
                   Gen.Phoneme.makeHeights10) -}
40ae56e00073fa391442b8bbf885fe8a
  makeLengths :: Data.RVar.RVar [Data.Phoneme.Length]
  {- Unfolding: (Data.Random.Extras.choice
                   @ [Data.Phoneme.Length]
                   Gen.Phoneme.makeLengths1) -}
da2e0b87db76e881bb32d14e48b3ab5b
  makeLengths1 :: [[Data.Phoneme.Length]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [Data.Phoneme.Length]
                   Gen.Phoneme.makeLengths9
                   Gen.Phoneme.makeLengths2) -}
3ca8e34755841d7c8387d30aceefc80b
  makeLengths2 :: [[Data.Phoneme.Length]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [Data.Phoneme.Length]
                   Gen.Phoneme.makeLengths6
                   Gen.Phoneme.makeLengths3) -}
3ec7c73ce23647072811a9a8d107026d
  makeLengths3 :: [[Data.Phoneme.Length]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [Data.Phoneme.Length]
                   Gen.Phoneme.makeLengths8
                   Gen.Phoneme.makeLengths4) -}
944a2236e49f16726c065340ec972b3e
  makeLengths4 :: [[Data.Phoneme.Length]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [Data.Phoneme.Length]
                   Gen.Phoneme.makeLengths5
                   (GHC.Types.[] @ [Data.Phoneme.Length])) -}
9eff5b5b6f09612e9feae1470a8d0978
  makeLengths5 :: [Data.Phoneme.Length]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Length
                   Data.Phoneme.SHORT
                   Gen.Phoneme.makeLengths6) -}
136304847bce4bed0ab722b4637ae664
  makeLengths6 :: [Data.Phoneme.Length]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Length
                   Data.Phoneme.NORMAL
                   Gen.Phoneme.makeLengths7) -}
fbf82bef07bb66959e170197168021ee
  makeLengths7 :: [Data.Phoneme.Length]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Length
                   Data.Phoneme.LONG
                   (GHC.Types.[] @ Data.Phoneme.Length)) -}
247f58d55c112283ba7d940bbefb23c9
  makeLengths8 :: [Data.Phoneme.Length]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Length
                   Data.Phoneme.SHORT
                   Gen.Phoneme.makeLengths9) -}
68af09d3f51e9b56ca84d3a1f9ecbbf3
  makeLengths9 :: [Data.Phoneme.Length]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Length
                   Data.Phoneme.NORMAL
                   (GHC.Types.[] @ Data.Phoneme.Length)) -}
d7cac329bc69e9473a2da6319a13b478
  makeManners :: Data.RVar.RVar [Data.Phoneme.Manner]
  {- Arity: 2, Strictness: <L,C(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Gen.Phoneme.makeManners1
                  `cast`
                (Trans
                     (Sym (Control.Monad.Prompt.N:Prompt[0]
                               <Control.Monad.Prompt.Lift
                                  Data.Random.Source.Internal.Prim.Prim
                                  Data.Functor.Identity.Identity>_R
                               <[Data.Phoneme.Manner]>_R))
                     (Trans
                          (Sym (Control.Monad.Prompt.N:PromptT[0]
                                    <Data.Random.Source.Internal.Prim.Prim>_R
                                    <Data.Functor.Identity.Identity>_R))
                          (Sym (Data.RVar.N:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[Data.Phoneme.Manner]>_N)) -}
b6d1f108cfccb51dbbe1380f9c5f66e1
  makeManners1 ::
    ([Data.Phoneme.Manner] -> b1)
    -> (forall a1.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a1
        -> (a1 -> b1) -> b1)
    -> b1
  {- Arity: 2, Strictness: <L,C(U)><L,U>,
     Unfolding: (\ @ b1
                   (eta :: [Data.Phoneme.Manner] -> b1)
                   (eta1 :: forall a1.
                            Control.Monad.Prompt.Lift
                              Data.Random.Source.Internal.Prim.Prim
                              Data.Functor.Identity.Identity
                              a1
                            -> (a1 -> b1) -> b1) ->
                 Gen.Phoneme.makeManners77
                   Gen.Phoneme.makeManners2
                   @ b1
                   (\ (x568 :: [[Data.Phoneme.Manner]]) ->
                    case Gen.Phoneme.makeManners_go x568 of x569 { DEFAULT ->
                    eta x569 })
                   eta1) -}
401f23ee0776e602e94d71c9942e330a
  makeManners10 :: [[Data.Phoneme.Manner]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [Data.Phoneme.Manner]
                   Gen.Phoneme.makeManners11
                   (GHC.Types.[] @ [Data.Phoneme.Manner])) -}
6c960a64ee121d6003cef2e630bb790d
  makeManners11 :: [Data.Phoneme.Manner]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Manner
                   Data.Phoneme.TRILL
                   (GHC.Types.[] @ Data.Phoneme.Manner)) -}
4d8921875db41e771df2d0fdb2c33989
  makeManners12 ::
    ([Data.Phoneme.Manner] -> b1)
    -> (forall a1.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a1
        -> (a1 -> b1) -> b1)
    -> b1
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ b1
                   (eta :: [Data.Phoneme.Manner] -> b1)
                   (eta1 :: forall a1.
                            Control.Monad.Prompt.Lift
                              Data.Random.Source.Internal.Prim.Prim
                              Data.Functor.Identity.Identity
                              a1
                            -> (a1 -> b1) -> b1) ->
                 Gen.Phoneme.makeManners_ds
                   `cast`
                 (Trans
                      (Trans
                           (Data.RVar.N:RVarT[0] <Data.Functor.Identity.Identity>_N)
                           (Control.Monad.Prompt.N:PromptT[0]
                                <Data.Random.Source.Internal.Prim.Prim>_R
                                <Data.Functor.Identity.Identity>_R) <Data.RVar.RVarT
                                                                       Data.Functor.Identity.Identity
                                                                       [Data.Phoneme.Manner]>_N)
                      (Control.Monad.Prompt.N:Prompt[0]
                           <Control.Monad.Prompt.Lift
                              Data.Random.Source.Internal.Prim.Prim
                              Data.Functor.Identity.Identity>_R
                           <Data.RVar.RVarT
                              Data.Functor.Identity.Identity [Data.Phoneme.Manner]>_R))
                   @ b1
                   (\ (x568 :: Data.RVar.RVarT
                                 Data.Functor.Identity.Identity [Data.Phoneme.Manner]) ->
                    case x568
                           `cast`
                         (Trans
                              (Trans
                                   (Data.RVar.N:RVarT[0] <Data.Functor.Identity.Identity>_N)
                                   (Control.Monad.Prompt.N:PromptT[0]
                                        <Data.Random.Source.Internal.Prim.Prim>_R
                                        <Data.Functor.Identity.Identity>_R) <[Data.Phoneme.Manner]>_N)
                              (Control.Monad.Prompt.N:Prompt[0]
                                   <Control.Monad.Prompt.Lift
                                      Data.Random.Source.Internal.Prim.Prim
                                      Data.Functor.Identity.Identity>_R
                                   <[Data.Phoneme.Manner]>_R)) of nt { DEFAULT ->
                    nt @ b1 eta eta1 })
                   eta1) -}
a95a98b2fdfbb41741e3adaadcc01d74
  makeManners13 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [Data.Phoneme.Manner]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [Data.Phoneme.Manner])
                   Gen.Phoneme.makeManners24
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.N:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[Data.Phoneme.Manner]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.N:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.N:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[Data.Phoneme.Manner]>_N))
                   Gen.Phoneme.makeManners14) -}
9d44a648e099fee4b20b9ed42834aaa6
  makeManners14 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [Data.Phoneme.Manner]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [Data.Phoneme.Manner])
                   Gen.Phoneme.makeManners15
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.N:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[Data.Phoneme.Manner]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.N:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.N:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[Data.Phoneme.Manner]>_N))
                   (GHC.Types.[]
                      @ (Data.RVar.RVarT
                           Data.Functor.Identity.Identity [Data.Phoneme.Manner]))) -}
dea5f99b6411834b812a426cf5c363de
  makeManners15 ::
    ([Data.Phoneme.Manner] -> b1)
    -> (forall a1.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a1
        -> (a1 -> b1) -> b1)
    -> b1
  {- Arity: 2,
     Unfolding: (\ @ b1
                   (eta :: [Data.Phoneme.Manner] -> b1)
                   (eta1 :: forall a1.
                            Control.Monad.Prompt.Lift
                              Data.Random.Source.Internal.Prim.Prim
                              Data.Functor.Identity.Identity
                              a1
                            -> (a1 -> b1) -> b1) ->
                 Gen.Phoneme.makeManners23
                   Gen.Phoneme.makeManners16
                   @ b1
                   (\ (x568 :: [[Data.Phoneme.Manner]]) ->
                    case Gen.Phoneme.makeManners_go1 x568 of x569 { DEFAULT ->
                    eta x569 })
                   eta1) -}
f8b9ccca4e5afc005b5edd506b41428f
  makeManners16 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [Data.Phoneme.Manner]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [Data.Phoneme.Manner])
                   Gen.Phoneme.makeManners22
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.N:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[Data.Phoneme.Manner]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.N:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.N:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[Data.Phoneme.Manner]>_N))
                   Gen.Phoneme.makeManners17) -}
a5b4594a0c023e8a0ab9bcf1ce8167ce
  makeManners17 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [Data.Phoneme.Manner]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [Data.Phoneme.Manner])
                   Gen.Phoneme.makeManners18
                   (GHC.Types.[]
                      @ (Data.RVar.RVarT
                           Data.Functor.Identity.Identity [Data.Phoneme.Manner]))) -}
37618808f7819b8496765baae5120d62
  makeManners18 :: Data.RVar.RVar [Data.Phoneme.Manner]
  {- Unfolding: (Data.Random.Extras.choice
                   @ [Data.Phoneme.Manner]
                   Gen.Phoneme.makeManners19) -}
613c50088dd027309c580980d04fef50
  makeManners19 :: [[Data.Phoneme.Manner]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [Data.Phoneme.Manner]
                   (GHC.Types.[] @ Data.Phoneme.Manner)
                   Gen.Phoneme.makeManners20) -}
a8caf0ab1b2efa5d6469cf1856551c08
  makeManners2 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [Data.Phoneme.Manner]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [Data.Phoneme.Manner])
                   Gen.Phoneme.makeManners76
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.N:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[Data.Phoneme.Manner]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.N:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.N:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[Data.Phoneme.Manner]>_N))
                   Gen.Phoneme.makeManners3) -}
8c3a7331c646791a36971a17dedb7316
  makeManners20 :: [[Data.Phoneme.Manner]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [Data.Phoneme.Manner]
                   Gen.Phoneme.makeManners21
                   (GHC.Types.[] @ [Data.Phoneme.Manner])) -}
75e81caf2c2328fe3f5669fc6d6831d8
  makeManners21 :: [Data.Phoneme.Manner]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Manner
                   Data.Phoneme.LAPPROXIMANT
                   (GHC.Types.[] @ Data.Phoneme.Manner)) -}
59f4bbe573f9b81df08a655ed6db684b
  makeManners22 ::
    ([Data.Phoneme.Manner] -> b)
    -> (forall a1.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a1
        -> (a1 -> b) -> b)
    -> b
  {- Arity: 2, HasNoCafRefs, Strictness: <C(S),1*C1(U)><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ b
                   (eta :: [Data.Phoneme.Manner] -> b)
                   (eta1 :: forall a1.
                            Control.Monad.Prompt.Lift
                              Data.Random.Source.Internal.Prim.Prim
                              Data.Functor.Identity.Identity
                              a1
                            -> (a1 -> b) -> b) ->
                 eta Gen.Phoneme.makeManners_x) -}
36af5f4ba7d1ba803c458792eb5bf19e
  makeManners23 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [Data.Phoneme.Manner]]
    -> forall b.
       ([[Data.Phoneme.Manner]] -> b)
       -> (forall a.
           Control.Monad.Prompt.Lift
             Data.Random.Source.Internal.Prim.Prim
             Data.Functor.Identity.Identity
             a
           -> (a -> b) -> b)
       -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,C(U)><L,U> -}
8950c5f4e560ea72676997cd53d25306
  makeManners24 ::
    ([Data.Phoneme.Manner] -> b)
    -> (forall a1.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a1
        -> (a1 -> b) -> b)
    -> b
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (\ @ b
                   (eta :: [Data.Phoneme.Manner] -> b)
                   (eta1 :: forall a1.
                            Control.Monad.Prompt.Lift
                              Data.Random.Source.Internal.Prim.Prim
                              Data.Functor.Identity.Identity
                              a1
                            -> (a1 -> b) -> b) ->
                 eta (GHC.Types.[] @ Data.Phoneme.Manner)) -}
94f6ad99b2eba3767184d31aa09a34a1
  makeManners25 ::
    ([Data.Phoneme.Manner] -> b1)
    -> (forall a1.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a1
        -> (a1 -> b1) -> b1)
    -> b1
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ b1
                   (eta :: [Data.Phoneme.Manner] -> b1)
                   (eta1 :: forall a1.
                            Control.Monad.Prompt.Lift
                              Data.Random.Source.Internal.Prim.Prim
                              Data.Functor.Identity.Identity
                              a1
                            -> (a1 -> b1) -> b1) ->
                 Gen.Phoneme.makeManners_ds1
                   `cast`
                 (Trans
                      (Trans
                           (Data.RVar.N:RVarT[0] <Data.Functor.Identity.Identity>_N)
                           (Control.Monad.Prompt.N:PromptT[0]
                                <Data.Random.Source.Internal.Prim.Prim>_R
                                <Data.Functor.Identity.Identity>_R) <Data.RVar.RVarT
                                                                       Data.Functor.Identity.Identity
                                                                       [Data.Phoneme.Manner]>_N)
                      (Control.Monad.Prompt.N:Prompt[0]
                           <Control.Monad.Prompt.Lift
                              Data.Random.Source.Internal.Prim.Prim
                              Data.Functor.Identity.Identity>_R
                           <Data.RVar.RVarT
                              Data.Functor.Identity.Identity [Data.Phoneme.Manner]>_R))
                   @ b1
                   (\ (x568 :: Data.RVar.RVarT
                                 Data.Functor.Identity.Identity [Data.Phoneme.Manner]) ->
                    case x568
                           `cast`
                         (Trans
                              (Trans
                                   (Data.RVar.N:RVarT[0] <Data.Functor.Identity.Identity>_N)
                                   (Control.Monad.Prompt.N:PromptT[0]
                                        <Data.Random.Source.Internal.Prim.Prim>_R
                                        <Data.Functor.Identity.Identity>_R) <[Data.Phoneme.Manner]>_N)
                              (Control.Monad.Prompt.N:Prompt[0]
                                   <Control.Monad.Prompt.Lift
                                      Data.Random.Source.Internal.Prim.Prim
                                      Data.Functor.Identity.Identity>_R
                                   <[Data.Phoneme.Manner]>_R)) of nt { DEFAULT ->
                    nt @ b1 eta eta1 })
                   eta1) -}
12d7698367b9a4517b7feaacad9c3c28
  makeManners26 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [Data.Phoneme.Manner]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [Data.Phoneme.Manner])
                   Gen.Phoneme.makeManners24
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.N:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[Data.Phoneme.Manner]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.N:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.N:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[Data.Phoneme.Manner]>_N))
                   Gen.Phoneme.makeManners27) -}
15e161f892be24e7e294cc0bc2eff3da
  makeManners27 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [Data.Phoneme.Manner]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [Data.Phoneme.Manner])
                   Gen.Phoneme.makeManners28
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.N:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[Data.Phoneme.Manner]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.N:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.N:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[Data.Phoneme.Manner]>_N))
                   (GHC.Types.[]
                      @ (Data.RVar.RVarT
                           Data.Functor.Identity.Identity [Data.Phoneme.Manner]))) -}
ea0fa4df69d62bcb18b39d8929ffb203
  makeManners28 ::
    ([Data.Phoneme.Manner] -> b1)
    -> (forall a1.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a1
        -> (a1 -> b1) -> b1)
    -> b1
  {- Arity: 2,
     Unfolding: (\ @ b1
                   (eta :: [Data.Phoneme.Manner] -> b1)
                   (eta1 :: forall a1.
                            Control.Monad.Prompt.Lift
                              Data.Random.Source.Internal.Prim.Prim
                              Data.Functor.Identity.Identity
                              a1
                            -> (a1 -> b1) -> b1) ->
                 Gen.Phoneme.makeManners59
                   Gen.Phoneme.makeManners29
                   @ b1
                   (\ (x568 :: [[Data.Phoneme.Manner]]) ->
                    case Gen.Phoneme.makeManners_go2 x568 of x569 { DEFAULT ->
                    eta x569 })
                   eta1) -}
e64e7d44cc327e2db65f483bc7252378
  makeManners29 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [Data.Phoneme.Manner]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [Data.Phoneme.Manner])
                   Gen.Phoneme.makeManners58
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.N:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[Data.Phoneme.Manner]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.N:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.N:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[Data.Phoneme.Manner]>_N))
                   Gen.Phoneme.makeManners30) -}
701662eef2506ae48327918ba5d8fb88
  makeManners3 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [Data.Phoneme.Manner]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [Data.Phoneme.Manner])
                   Gen.Phoneme.makeManners72
                   Gen.Phoneme.makeManners4) -}
f685749d51d810e5a974a93e3c7ee520
  makeManners30 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [Data.Phoneme.Manner]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [Data.Phoneme.Manner])
                   Gen.Phoneme.makeManners41
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.N:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[Data.Phoneme.Manner]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.N:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.N:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[Data.Phoneme.Manner]>_N))
                   Gen.Phoneme.makeManners31) -}
1b2ad7f456416c39646d828c47e9169e
  makeManners31 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [Data.Phoneme.Manner]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [Data.Phoneme.Manner])
                   Gen.Phoneme.makeManners37
                   Gen.Phoneme.makeManners32) -}
c942a1eb2f660610076ba4f63acc4435
  makeManners32 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [Data.Phoneme.Manner]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [Data.Phoneme.Manner])
                   Gen.Phoneme.makeManners33
                   (GHC.Types.[]
                      @ (Data.RVar.RVarT
                           Data.Functor.Identity.Identity [Data.Phoneme.Manner]))) -}
3ee5b865903b14cd5aa1e13a939ba611
  makeManners33 :: Data.RVar.RVar [Data.Phoneme.Manner]
  {- Unfolding: (Data.Random.Extras.choice
                   @ [Data.Phoneme.Manner]
                   Gen.Phoneme.makeManners34) -}
c44a60434bd50cdb56570ac5f78e90f8
  makeManners34 :: [[Data.Phoneme.Manner]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [Data.Phoneme.Manner]
                   (GHC.Types.[] @ Data.Phoneme.Manner)
                   Gen.Phoneme.makeManners35) -}
febfb3486a601b23c11c964a80dfd0f6
  makeManners35 :: [[Data.Phoneme.Manner]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [Data.Phoneme.Manner]
                   Gen.Phoneme.makeManners36
                   (GHC.Types.[] @ [Data.Phoneme.Manner])) -}
4f3e5e12fd3bba223d67dc2ff23ecaaa
  makeManners36 :: [Data.Phoneme.Manner]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Manner
                   Data.Phoneme.LFRICATIVE
                   (GHC.Types.[] @ Data.Phoneme.Manner)) -}
bc499ecdaf0d13162e2579873386cc2f
  makeManners37 :: Data.RVar.RVar [Data.Phoneme.Manner]
  {- Unfolding: (Data.Random.Extras.choice
                   @ [Data.Phoneme.Manner]
                   Gen.Phoneme.makeManners38) -}
8ee23ccc5c2fdf547ba8b28059ee5e66
  makeManners38 :: [[Data.Phoneme.Manner]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [Data.Phoneme.Manner]
                   (GHC.Types.[] @ Data.Phoneme.Manner)
                   Gen.Phoneme.makeManners39) -}
da7f7a26cd117a549174566ca283a406
  makeManners39 :: [[Data.Phoneme.Manner]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [Data.Phoneme.Manner]
                   Gen.Phoneme.makeManners40
                   (GHC.Types.[] @ [Data.Phoneme.Manner])) -}
f875558f4548ab6280a8cc8b19a79240
  makeManners4 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [Data.Phoneme.Manner]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [Data.Phoneme.Manner])
                   Gen.Phoneme.makeManners60
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.N:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[Data.Phoneme.Manner]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.N:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.N:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[Data.Phoneme.Manner]>_N))
                   Gen.Phoneme.makeManners5) -}
978db1821fcafc3c6fd980fc0ee47598
  makeManners40 :: [Data.Phoneme.Manner]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Manner
                   Data.Phoneme.SILIBANT
                   (GHC.Types.[] @ Data.Phoneme.Manner)) -}
6fde6f9f1582146d574788a5541e8faa
  makeManners41 ::
    ([Data.Phoneme.Manner] -> b1)
    -> (forall a1.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a1
        -> (a1 -> b1) -> b1)
    -> b1
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ b1
                   (eta :: [Data.Phoneme.Manner] -> b1)
                   (eta1 :: forall a1.
                            Control.Monad.Prompt.Lift
                              Data.Random.Source.Internal.Prim.Prim
                              Data.Functor.Identity.Identity
                              a1
                            -> (a1 -> b1) -> b1) ->
                 Gen.Phoneme.makeManners_ds2
                   `cast`
                 (Trans
                      (Trans
                           (Data.RVar.N:RVarT[0] <Data.Functor.Identity.Identity>_N)
                           (Control.Monad.Prompt.N:PromptT[0]
                                <Data.Random.Source.Internal.Prim.Prim>_R
                                <Data.Functor.Identity.Identity>_R) <Data.RVar.RVarT
                                                                       Data.Functor.Identity.Identity
                                                                       [Data.Phoneme.Manner]>_N)
                      (Control.Monad.Prompt.N:Prompt[0]
                           <Control.Monad.Prompt.Lift
                              Data.Random.Source.Internal.Prim.Prim
                              Data.Functor.Identity.Identity>_R
                           <Data.RVar.RVarT
                              Data.Functor.Identity.Identity [Data.Phoneme.Manner]>_R))
                   @ b1
                   (\ (x568 :: Data.RVar.RVarT
                                 Data.Functor.Identity.Identity [Data.Phoneme.Manner]) ->
                    case x568
                           `cast`
                         (Trans
                              (Trans
                                   (Data.RVar.N:RVarT[0] <Data.Functor.Identity.Identity>_N)
                                   (Control.Monad.Prompt.N:PromptT[0]
                                        <Data.Random.Source.Internal.Prim.Prim>_R
                                        <Data.Functor.Identity.Identity>_R) <[Data.Phoneme.Manner]>_N)
                              (Control.Monad.Prompt.N:Prompt[0]
                                   <Control.Monad.Prompt.Lift
                                      Data.Random.Source.Internal.Prim.Prim
                                      Data.Functor.Identity.Identity>_R
                                   <[Data.Phoneme.Manner]>_R)) of nt { DEFAULT ->
                    nt @ b1 eta eta1 })
                   eta1) -}
64afe0b370157daf58e99a85a58d8e9e
  makeManners42 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [Data.Phoneme.Manner]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [Data.Phoneme.Manner])
                   Gen.Phoneme.makeManners24
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.N:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[Data.Phoneme.Manner]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.N:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.N:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[Data.Phoneme.Manner]>_N))
                   Gen.Phoneme.makeManners43) -}
04f37cd1190ce1a6c58cfa4363eb3bc5
  makeManners43 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [Data.Phoneme.Manner]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [Data.Phoneme.Manner])
                   Gen.Phoneme.makeManners44
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.N:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[Data.Phoneme.Manner]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.N:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.N:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[Data.Phoneme.Manner]>_N))
                   (GHC.Types.[]
                      @ (Data.RVar.RVarT
                           Data.Functor.Identity.Identity [Data.Phoneme.Manner]))) -}
5ffd99bb31ea41e8756b267674e01611
  makeManners44 ::
    ([Data.Phoneme.Manner] -> b1)
    -> (forall a1.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a1
        -> (a1 -> b1) -> b1)
    -> b1
  {- Arity: 2,
     Unfolding: (\ @ b1
                   (eta :: [Data.Phoneme.Manner] -> b1)
                   (eta1 :: forall a1.
                            Control.Monad.Prompt.Lift
                              Data.Random.Source.Internal.Prim.Prim
                              Data.Functor.Identity.Identity
                              a1
                            -> (a1 -> b1) -> b1) ->
                 Gen.Phoneme.makeManners57
                   Gen.Phoneme.makeManners45
                   @ b1
                   (\ (x568 :: [[Data.Phoneme.Manner]]) ->
                    case Gen.Phoneme.makeManners_go3 x568 of x569 { DEFAULT ->
                    eta x569 })
                   eta1) -}
f1e555e113904e67964c4ed15ded39ce
  makeManners45 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [Data.Phoneme.Manner]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [Data.Phoneme.Manner])
                   Gen.Phoneme.makeManners56
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.N:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[Data.Phoneme.Manner]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.N:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.N:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[Data.Phoneme.Manner]>_N))
                   Gen.Phoneme.makeManners46) -}
26197ae38bef69baadb8c5b2c77f6da4
  makeManners46 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [Data.Phoneme.Manner]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [Data.Phoneme.Manner])
                   Gen.Phoneme.makeManners52
                   Gen.Phoneme.makeManners47) -}
3c6c93966ba495cfc140b61710fcd40d
  makeManners47 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [Data.Phoneme.Manner]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [Data.Phoneme.Manner])
                   Gen.Phoneme.makeManners48
                   (GHC.Types.[]
                      @ (Data.RVar.RVarT
                           Data.Functor.Identity.Identity [Data.Phoneme.Manner]))) -}
e5c8f3f2ed9704854bbf7ffaa8cb7b16
  makeManners48 :: Data.RVar.RVar [Data.Phoneme.Manner]
  {- Unfolding: (Data.Random.Extras.choice
                   @ [Data.Phoneme.Manner]
                   Gen.Phoneme.makeManners49) -}
4f14aa8aa03da7de1e247aeae6350839
  makeManners49 :: [[Data.Phoneme.Manner]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [Data.Phoneme.Manner]
                   (GHC.Types.[] @ Data.Phoneme.Manner)
                   Gen.Phoneme.makeManners50) -}
847235126f17f619b23ca477d8f1cd01
  makeManners5 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [Data.Phoneme.Manner]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [Data.Phoneme.Manner])
                   Gen.Phoneme.makeManners25
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.N:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[Data.Phoneme.Manner]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.N:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.N:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[Data.Phoneme.Manner]>_N))
                   Gen.Phoneme.makeManners6) -}
73627186d3ad685d9dbf54b044b24c73
  makeManners50 :: [[Data.Phoneme.Manner]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [Data.Phoneme.Manner]
                   Gen.Phoneme.makeManners51
                   (GHC.Types.[] @ [Data.Phoneme.Manner])) -}
8824b6c25fc26247ad2cd9d5fea4748e
  makeManners51 :: [Data.Phoneme.Manner]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Manner
                   Data.Phoneme.LAFFRICATE
                   (GHC.Types.[] @ Data.Phoneme.Manner)) -}
7cc43aa5335e4ae7fa083f25c898e482
  makeManners52 :: Data.RVar.RVar [Data.Phoneme.Manner]
  {- Unfolding: (Data.Random.Extras.choice
                   @ [Data.Phoneme.Manner]
                   Gen.Phoneme.makeManners53) -}
2b4345a1e1bf5e6084de253e7eb8baff
  makeManners53 :: [[Data.Phoneme.Manner]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [Data.Phoneme.Manner]
                   (GHC.Types.[] @ Data.Phoneme.Manner)
                   Gen.Phoneme.makeManners54) -}
c27c9dc89b4809d21399eaeb0abc016c
  makeManners54 :: [[Data.Phoneme.Manner]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [Data.Phoneme.Manner]
                   Gen.Phoneme.makeManners55
                   (GHC.Types.[] @ [Data.Phoneme.Manner])) -}
e2c97f103eb0155e52e89561c7716899
  makeManners55 :: [Data.Phoneme.Manner]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Manner
                   Data.Phoneme.SAFFRICATE
                   (GHC.Types.[] @ Data.Phoneme.Manner)) -}
744e16ecd2235242e8c4215ea22ed2ba
  makeManners56 ::
    ([Data.Phoneme.Manner] -> b)
    -> (forall a1.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a1
        -> (a1 -> b) -> b)
    -> b
  {- Arity: 2, HasNoCafRefs, Strictness: <C(S),1*C1(U)><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ b
                   (eta :: [Data.Phoneme.Manner] -> b)
                   (eta1 :: forall a1.
                            Control.Monad.Prompt.Lift
                              Data.Random.Source.Internal.Prim.Prim
                              Data.Functor.Identity.Identity
                              a1
                            -> (a1 -> b) -> b) ->
                 eta Gen.Phoneme.makeManners_x1) -}
b2e9ff37af44d8c062cfcb7b0caa7308
  makeManners57 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [Data.Phoneme.Manner]]
    -> forall b.
       ([[Data.Phoneme.Manner]] -> b)
       -> (forall a.
           Control.Monad.Prompt.Lift
             Data.Random.Source.Internal.Prim.Prim
             Data.Functor.Identity.Identity
             a
           -> (a -> b) -> b)
       -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,C(U)><L,U> -}
3389a161631b9c777252061eda4ba74d
  makeManners58 ::
    ([Data.Phoneme.Manner] -> b)
    -> (forall a1.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a1
        -> (a1 -> b) -> b)
    -> b
  {- Arity: 2, HasNoCafRefs, Strictness: <C(S),1*C1(U)><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ b
                   (eta :: [Data.Phoneme.Manner] -> b)
                   (eta1 :: forall a1.
                            Control.Monad.Prompt.Lift
                              Data.Random.Source.Internal.Prim.Prim
                              Data.Functor.Identity.Identity
                              a1
                            -> (a1 -> b) -> b) ->
                 eta Gen.Phoneme.makeManners_x2) -}
50850bd0c62171672eb225286a846e86
  makeManners59 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [Data.Phoneme.Manner]]
    -> forall b.
       ([[Data.Phoneme.Manner]] -> b)
       -> (forall a.
           Control.Monad.Prompt.Lift
             Data.Random.Source.Internal.Prim.Prim
             Data.Functor.Identity.Identity
             a
           -> (a -> b) -> b)
       -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,C(U)><L,U> -}
b302146054a3cad8cf02bb14689fa733
  makeManners6 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [Data.Phoneme.Manner]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [Data.Phoneme.Manner])
                   Gen.Phoneme.makeManners12
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.N:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[Data.Phoneme.Manner]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.N:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.N:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[Data.Phoneme.Manner]>_N))
                   Gen.Phoneme.makeManners7) -}
89b2e472c1ded6b2f2472069f240bd66
  makeManners60 ::
    ([Data.Phoneme.Manner] -> b1)
    -> (forall a1.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a1
        -> (a1 -> b1) -> b1)
    -> b1
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ b1
                   (eta :: [Data.Phoneme.Manner] -> b1)
                   (eta1 :: forall a1.
                            Control.Monad.Prompt.Lift
                              Data.Random.Source.Internal.Prim.Prim
                              Data.Functor.Identity.Identity
                              a1
                            -> (a1 -> b1) -> b1) ->
                 Gen.Phoneme.makeManners_ds3
                   `cast`
                 (Trans
                      (Trans
                           (Data.RVar.N:RVarT[0] <Data.Functor.Identity.Identity>_N)
                           (Control.Monad.Prompt.N:PromptT[0]
                                <Data.Random.Source.Internal.Prim.Prim>_R
                                <Data.Functor.Identity.Identity>_R) <Data.RVar.RVarT
                                                                       Data.Functor.Identity.Identity
                                                                       [Data.Phoneme.Manner]>_N)
                      (Control.Monad.Prompt.N:Prompt[0]
                           <Control.Monad.Prompt.Lift
                              Data.Random.Source.Internal.Prim.Prim
                              Data.Functor.Identity.Identity>_R
                           <Data.RVar.RVarT
                              Data.Functor.Identity.Identity [Data.Phoneme.Manner]>_R))
                   @ b1
                   (\ (x568 :: Data.RVar.RVarT
                                 Data.Functor.Identity.Identity [Data.Phoneme.Manner]) ->
                    case x568
                           `cast`
                         (Trans
                              (Trans
                                   (Data.RVar.N:RVarT[0] <Data.Functor.Identity.Identity>_N)
                                   (Control.Monad.Prompt.N:PromptT[0]
                                        <Data.Random.Source.Internal.Prim.Prim>_R
                                        <Data.Functor.Identity.Identity>_R) <[Data.Phoneme.Manner]>_N)
                              (Control.Monad.Prompt.N:Prompt[0]
                                   <Control.Monad.Prompt.Lift
                                      Data.Random.Source.Internal.Prim.Prim
                                      Data.Functor.Identity.Identity>_R
                                   <[Data.Phoneme.Manner]>_R)) of nt { DEFAULT ->
                    nt @ b1 eta eta1 })
                   eta1) -}
e3e984a4ca4e80b4f910d52c37b89413
  makeManners61 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [Data.Phoneme.Manner]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [Data.Phoneme.Manner])
                   Gen.Phoneme.makeManners24
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.N:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[Data.Phoneme.Manner]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.N:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.N:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[Data.Phoneme.Manner]>_N))
                   Gen.Phoneme.makeManners62) -}
e2f87957e8d3928e7b10b7ec9e6df8f1
  makeManners62 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [Data.Phoneme.Manner]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [Data.Phoneme.Manner])
                   Gen.Phoneme.makeManners63
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.N:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[Data.Phoneme.Manner]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.N:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.N:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[Data.Phoneme.Manner]>_N))
                   (GHC.Types.[]
                      @ (Data.RVar.RVarT
                           Data.Functor.Identity.Identity [Data.Phoneme.Manner]))) -}
891965d597c0fd4b2e724240a4131f6e
  makeManners63 ::
    ([Data.Phoneme.Manner] -> b1)
    -> (forall a1.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a1
        -> (a1 -> b1) -> b1)
    -> b1
  {- Arity: 2,
     Unfolding: (\ @ b1
                   (eta :: [Data.Phoneme.Manner] -> b1)
                   (eta1 :: forall a1.
                            Control.Monad.Prompt.Lift
                              Data.Random.Source.Internal.Prim.Prim
                              Data.Functor.Identity.Identity
                              a1
                            -> (a1 -> b1) -> b1) ->
                 Gen.Phoneme.makeManners71
                   Gen.Phoneme.makeManners64
                   @ b1
                   (\ (x568 :: [[Data.Phoneme.Manner]]) ->
                    case Gen.Phoneme.makeManners_go4 x568 of x569 { DEFAULT ->
                    eta x569 })
                   eta1) -}
5af775a64122b43fff8b70ab0af385a2
  makeManners64 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [Data.Phoneme.Manner]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [Data.Phoneme.Manner])
                   Gen.Phoneme.makeManners70
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.N:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[Data.Phoneme.Manner]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.N:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.N:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[Data.Phoneme.Manner]>_N))
                   Gen.Phoneme.makeManners65) -}
9f6a8e2464646793d3aedf34bda9ce4f
  makeManners65 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [Data.Phoneme.Manner]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [Data.Phoneme.Manner])
                   Gen.Phoneme.makeManners66
                   (GHC.Types.[]
                      @ (Data.RVar.RVarT
                           Data.Functor.Identity.Identity [Data.Phoneme.Manner]))) -}
c5920123c271359cca1bfc6626512940
  makeManners66 :: Data.RVar.RVar [Data.Phoneme.Manner]
  {- Unfolding: (Data.Random.Extras.choice
                   @ [Data.Phoneme.Manner]
                   Gen.Phoneme.makeManners67) -}
6ddd816e02ee531d95e250ca5779c281
  makeManners67 :: [[Data.Phoneme.Manner]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [Data.Phoneme.Manner]
                   (GHC.Types.[] @ Data.Phoneme.Manner)
                   Gen.Phoneme.makeManners68) -}
7a4dba257819feb706e2773bfc6beeb8
  makeManners68 :: [[Data.Phoneme.Manner]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [Data.Phoneme.Manner]
                   Gen.Phoneme.makeManners69
                   (GHC.Types.[] @ [Data.Phoneme.Manner])) -}
2a5d29348904a9b9c0af99f84bd18329
  makeManners69 :: [Data.Phoneme.Manner]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Manner
                   Data.Phoneme.LFLAP
                   (GHC.Types.[] @ Data.Phoneme.Manner)) -}
fbb3cc85b660cff3f95f12ebe21b4171
  makeManners7 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [Data.Phoneme.Manner]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [Data.Phoneme.Manner])
                   Gen.Phoneme.makeManners8
                   (GHC.Types.[]
                      @ (Data.RVar.RVarT
                           Data.Functor.Identity.Identity [Data.Phoneme.Manner]))) -}
244f4dca58cdb12c76e680b64e899225
  makeManners70 ::
    ([Data.Phoneme.Manner] -> b)
    -> (forall a1.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a1
        -> (a1 -> b) -> b)
    -> b
  {- Arity: 2, HasNoCafRefs, Strictness: <C(S),1*C1(U)><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ b
                   (eta :: [Data.Phoneme.Manner] -> b)
                   (eta1 :: forall a1.
                            Control.Monad.Prompt.Lift
                              Data.Random.Source.Internal.Prim.Prim
                              Data.Functor.Identity.Identity
                              a1
                            -> (a1 -> b) -> b) ->
                 eta Gen.Phoneme.makeManners_x3) -}
7e83d5ebf38daf1b431aac337945b52d
  makeManners71 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [Data.Phoneme.Manner]]
    -> forall b.
       ([[Data.Phoneme.Manner]] -> b)
       -> (forall a.
           Control.Monad.Prompt.Lift
             Data.Random.Source.Internal.Prim.Prim
             Data.Functor.Identity.Identity
             a
           -> (a -> b) -> b)
       -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,C(U)><L,U> -}
eddc44ad73cb7493dc9dfc84afb3c91b
  makeManners72 :: Data.RVar.RVar [Data.Phoneme.Manner]
  {- Unfolding: (Data.Random.Extras.choice
                   @ [Data.Phoneme.Manner]
                   Gen.Phoneme.makeManners73) -}
b56ce900555ab1f42e54f78597bf24e7
  makeManners73 :: [[Data.Phoneme.Manner]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [Data.Phoneme.Manner]
                   (GHC.Types.[] @ Data.Phoneme.Manner)
                   Gen.Phoneme.makeManners74) -}
35861b7c129118ba1691448a7a70fabe
  makeManners74 :: [[Data.Phoneme.Manner]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [Data.Phoneme.Manner]
                   Gen.Phoneme.makeManners75
                   (GHC.Types.[] @ [Data.Phoneme.Manner])) -}
be556ab45e3d3ddc5eeba05f8a169106
  makeManners75 :: [Data.Phoneme.Manner]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Manner
                   Data.Phoneme.NASAL
                   (GHC.Types.[] @ Data.Phoneme.Manner)) -}
e94ab38c641825badc78454b4a7417df
  makeManners76 ::
    ([Data.Phoneme.Manner] -> b)
    -> (forall a1.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a1
        -> (a1 -> b) -> b)
    -> b
  {- Arity: 2, HasNoCafRefs, Strictness: <C(S),1*C1(U)><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ b
                   (eta :: [Data.Phoneme.Manner] -> b)
                   (eta1 :: forall a1.
                            Control.Monad.Prompt.Lift
                              Data.Random.Source.Internal.Prim.Prim
                              Data.Functor.Identity.Identity
                              a1
                            -> (a1 -> b) -> b) ->
                 eta Gen.Phoneme.makeManners_x4) -}
3230a0a4caf6570c0645ffbd2a824e99
  makeManners77 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [Data.Phoneme.Manner]]
    -> forall b.
       ([[Data.Phoneme.Manner]] -> b)
       -> (forall a.
           Control.Monad.Prompt.Lift
             Data.Random.Source.Internal.Prim.Prim
             Data.Functor.Identity.Identity
             a
           -> (a -> b) -> b)
       -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,C(U)><L,U> -}
cdbdb6781f257bb46fdb76704b0b32a4
  makeManners8 :: Data.RVar.RVar [Data.Phoneme.Manner]
  {- Unfolding: (Data.Random.Extras.choice
                   @ [Data.Phoneme.Manner]
                   Gen.Phoneme.makeManners9) -}
4c72dd70a67ee43dc24670fd1114f5e1
  makeManners9 :: [[Data.Phoneme.Manner]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [Data.Phoneme.Manner]
                   (GHC.Types.[] @ Data.Phoneme.Manner)
                   Gen.Phoneme.makeManners10) -}
005155149534356ca76968052375adf7
  makeManners_ds ::
    Data.RVar.RVarT
      Data.Functor.Identity.Identity
      (Data.RVar.RVarT
         Data.Functor.Identity.Identity [Data.Phoneme.Manner])
  {- Unfolding: (Data.Random.Extras.choice
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [Data.Phoneme.Manner])
                   Gen.Phoneme.makeManners13) -}
ef2bcbef8fc2cc6df4d2d912a14cb746
  makeManners_ds1 ::
    Data.RVar.RVarT
      Data.Functor.Identity.Identity
      (Data.RVar.RVarT
         Data.Functor.Identity.Identity [Data.Phoneme.Manner])
  {- Unfolding: (Data.Random.Extras.choice
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [Data.Phoneme.Manner])
                   Gen.Phoneme.makeManners26) -}
8e9cd302123766ea49e3aabee6825bb4
  makeManners_ds2 ::
    Data.RVar.RVarT
      Data.Functor.Identity.Identity
      (Data.RVar.RVarT
         Data.Functor.Identity.Identity [Data.Phoneme.Manner])
  {- Unfolding: (Data.Random.Extras.choice
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [Data.Phoneme.Manner])
                   Gen.Phoneme.makeManners42) -}
e6a52a87fe2c47d6f04ea4f4bc719c65
  makeManners_ds3 ::
    Data.RVar.RVarT
      Data.Functor.Identity.Identity
      (Data.RVar.RVarT
         Data.Functor.Identity.Identity [Data.Phoneme.Manner])
  {- Unfolding: (Data.Random.Extras.choice
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [Data.Phoneme.Manner])
                   Gen.Phoneme.makeManners61) -}
8e30df3bf80a039f758d8add2efc4121
  makeManners_go :: [[Data.Phoneme.Manner]] -> [Data.Phoneme.Manner]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
bc00fb07f9a653e3b22b8e253ee6338f
  makeManners_go1 :: [[Data.Phoneme.Manner]] -> [Data.Phoneme.Manner]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
12b295dc18e04d1182c7cbeae4edd9cd
  makeManners_go2 :: [[Data.Phoneme.Manner]] -> [Data.Phoneme.Manner]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
2cd5d46d986ce55ff94499a1994fd1f3
  makeManners_go3 :: [[Data.Phoneme.Manner]] -> [Data.Phoneme.Manner]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
dae0fded78fc5b6ee8920a9450ee8b13
  makeManners_go4 :: [[Data.Phoneme.Manner]] -> [Data.Phoneme.Manner]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
0aa5ce476b257f675dfb24daceeaa1d4
  makeManners_x :: [Data.Phoneme.Manner]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Manner
                   Data.Phoneme.APPROXIMANT
                   (GHC.Types.[] @ Data.Phoneme.Manner)) -}
e7a45243b4daf956d10e7848f47384ba
  makeManners_x1 :: [Data.Phoneme.Manner]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Manner
                   Data.Phoneme.AFFRICATE
                   (GHC.Types.[] @ Data.Phoneme.Manner)) -}
e684638ae22e21bdb8a92591bdd31896
  makeManners_x2 :: [Data.Phoneme.Manner]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Manner
                   Data.Phoneme.FRICATIVE
                   (GHC.Types.[] @ Data.Phoneme.Manner)) -}
86fbf5f86dfdc61730006a59e05be5ec
  makeManners_x3 :: [Data.Phoneme.Manner]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Manner
                   Data.Phoneme.FLAP
                   (GHC.Types.[] @ Data.Phoneme.Manner)) -}
3156ff0748525d5e998a95a1df13fe81
  makeManners_x4 :: [Data.Phoneme.Manner]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Manner
                   Data.Phoneme.STOP
                   (GHC.Types.[] @ Data.Phoneme.Manner)) -}
5da0b361a83a3745906a1907ea418cf9
  makePhonations :: Data.RVar.RVar [Data.Phoneme.Phonation]
  {- Unfolding: (Data.Random.Extras.choice
                   @ [Data.Phoneme.Phonation]
                   Gen.Phoneme.makePhonations1) -}
ed74bb318c6b8695e9307538d42299f9
  makePhonations1 :: [[Data.Phoneme.Phonation]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [Data.Phoneme.Phonation]
                   Gen.Phoneme.makePhonations17
                   Gen.Phoneme.makePhonations2) -}
cea4a231f1cdb93d4d190dc4ff22fa46
  makePhonations10 :: [Data.Phoneme.Phonation]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Phonation
                   Data.Phoneme.SLACK
                   Gen.Phoneme.makePhonations11) -}
232af533b8164d9143700322ff3d70c7
  makePhonations11 :: [Data.Phoneme.Phonation]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Phonation
                   Data.Phoneme.MODAL
                   Gen.Phoneme.makePhonations12) -}
95e046fa02945fad39ebbe6583d090a4
  makePhonations12 :: [Data.Phoneme.Phonation]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Phonation
                   Data.Phoneme.STIFF
                   (GHC.Types.[] @ Data.Phoneme.Phonation)) -}
b0260f380175432a242885800c7f6cc3
  makePhonations13 :: [Data.Phoneme.Phonation]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Phonation
                   Data.Phoneme.BREATHY
                   Gen.Phoneme.makePhonations14) -}
db1e0bfb5a34bc96f61b7ff58e960e2c
  makePhonations14 :: [Data.Phoneme.Phonation]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Phonation
                   Data.Phoneme.MODAL
                   Gen.Phoneme.makePhonations15) -}
a67ec6eb7d9f8b5d5d84e0bc33eaa58f
  makePhonations15 :: [Data.Phoneme.Phonation]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Phonation
                   Data.Phoneme.CREAKY
                   (GHC.Types.[] @ Data.Phoneme.Phonation)) -}
0e8d5ce3b4e2cc108a2f822e38b4ee86
  makePhonations16 :: [Data.Phoneme.Phonation]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Phonation
                   Data.Phoneme.VOICELESS
                   Gen.Phoneme.makePhonations17) -}
2b70cb612a7723c761a6fcdd758a03d6
  makePhonations17 :: [Data.Phoneme.Phonation]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Phonation
                   Data.Phoneme.MODAL
                   (GHC.Types.[] @ Data.Phoneme.Phonation)) -}
21eeac2feec4cca9e69310ac0aa40763
  makePhonations2 :: [[Data.Phoneme.Phonation]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [Data.Phoneme.Phonation]
                   Gen.Phoneme.makePhonations16
                   Gen.Phoneme.makePhonations3) -}
1f855fbf1373660efa962d686738f33e
  makePhonations3 :: [[Data.Phoneme.Phonation]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [Data.Phoneme.Phonation]
                   Gen.Phoneme.makePhonations13
                   Gen.Phoneme.makePhonations4) -}
ed791d07fae918b850874ad3e83e050e
  makePhonations4 :: [[Data.Phoneme.Phonation]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [Data.Phoneme.Phonation]
                   Gen.Phoneme.makePhonations10
                   Gen.Phoneme.makePhonations5) -}
80c8d43bf04e0438631dd236b362dab8
  makePhonations5 :: [[Data.Phoneme.Phonation]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [Data.Phoneme.Phonation]
                   Gen.Phoneme.makePhonations9
                   Gen.Phoneme.makePhonations6) -}
4db73a24c7c5e5a04538cc51f8ef985f
  makePhonations6 :: [[Data.Phoneme.Phonation]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [Data.Phoneme.Phonation]
                   Gen.Phoneme.makePhonations7
                   (GHC.Types.[] @ [Data.Phoneme.Phonation])) -}
e2f661edfe3aad0c3ade4a57257c057a
  makePhonations7 :: [Data.Phoneme.Phonation]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Phonation
                   Data.Phoneme.MODAL
                   Gen.Phoneme.makePhonations8) -}
54c11ee532254e4848130af537defa72
  makePhonations8 :: [Data.Phoneme.Phonation]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Phonation
                   Data.Phoneme.ASPIRATED
                   (GHC.Types.[] @ Data.Phoneme.Phonation)) -}
e69a80b49f65d40161f63a08f52d95e5
  makePhonations9 :: [Data.Phoneme.Phonation]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Phonation
                   Data.Phoneme.VOICELESS
                   Gen.Phoneme.makePhonations7) -}
2a88c9e3d7b97e01b0d572a99e4ffbf3
  makePlaces :: Data.RVar.RVar [Data.Phoneme.Place]
  {- Arity: 2, Strictness: <L,C(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Gen.Phoneme.makePlaces1
                  `cast`
                (Trans
                     (Sym (Control.Monad.Prompt.N:Prompt[0]
                               <Control.Monad.Prompt.Lift
                                  Data.Random.Source.Internal.Prim.Prim
                                  Data.Functor.Identity.Identity>_R
                               <[Data.Phoneme.Place]>_R))
                     (Trans
                          (Sym (Control.Monad.Prompt.N:PromptT[0]
                                    <Data.Random.Source.Internal.Prim.Prim>_R
                                    <Data.Functor.Identity.Identity>_R))
                          (Sym (Data.RVar.N:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[Data.Phoneme.Place]>_N)) -}
f36bb6eaffefbdf0670eabd346973446
  makePlaces1 ::
    ([Data.Phoneme.Place] -> b1)
    -> (forall a1.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a1
        -> (a1 -> b1) -> b1)
    -> b1
  {- Arity: 2, Strictness: <L,C(U)><L,U>,
     Unfolding: (\ @ b1
                   (eta :: [Data.Phoneme.Place] -> b1)
                   (eta1 :: forall a1.
                            Control.Monad.Prompt.Lift
                              Data.Random.Source.Internal.Prim.Prim
                              Data.Functor.Identity.Identity
                              a1
                            -> (a1 -> b1) -> b1) ->
                 Gen.Phoneme.makePlaces62
                   Gen.Phoneme.makePlaces2
                   @ b1
                   (\ (x568 :: [[Data.Phoneme.Place]]) ->
                    case Gen.Phoneme.makePlaces_go x568 of x569 { DEFAULT ->
                    eta x569 })
                   eta1) -}
b6893c375d24166ba789755eaaaa76a0
  makePlaces10 ::
    ([Data.Phoneme.Place] -> b1)
    -> (forall a1.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a1
        -> (a1 -> b1) -> b1)
    -> b1
  {- Arity: 2,
     Unfolding: (\ @ b1
                   (eta :: [Data.Phoneme.Place] -> b1)
                   (eta1 :: forall a1.
                            Control.Monad.Prompt.Lift
                              Data.Random.Source.Internal.Prim.Prim
                              Data.Functor.Identity.Identity
                              a1
                            -> (a1 -> b1) -> b1) ->
                 Gen.Phoneme.makePlaces20
                   Gen.Phoneme.makePlaces11
                   @ b1
                   (\ (x568 :: [[Data.Phoneme.Place]]) ->
                    case Gen.Phoneme.makePlaces_go1 x568 of x569 { DEFAULT ->
                    eta x569 })
                   eta1) -}
4d30355e5b52b0b8bbeffdc0f46f3456
  makePlaces11 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [Data.Phoneme.Place]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [Data.Phoneme.Place])
                   Gen.Phoneme.makePlaces14
                   Gen.Phoneme.makePlaces12) -}
1b3ea618fb4311f7b115acfe2ef25e6f
  makePlaces12 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [Data.Phoneme.Place]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [Data.Phoneme.Place])
                   Gen.Phoneme.makePlaces13
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.N:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[Data.Phoneme.Place]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.N:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.N:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[Data.Phoneme.Place]>_N))
                   (GHC.Types.[]
                      @ (Data.RVar.RVarT
                           Data.Functor.Identity.Identity [Data.Phoneme.Place]))) -}
6b2f734f63e2d72198a0afb4f04fc50e
  makePlaces13 ::
    ([Data.Phoneme.Place] -> b)
    -> (forall a1.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a1
        -> (a1 -> b) -> b)
    -> b
  {- Arity: 2, HasNoCafRefs, Strictness: <C(S),1*C1(U)><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ b
                   (eta :: [Data.Phoneme.Place] -> b)
                   (eta1 :: forall a1.
                            Control.Monad.Prompt.Lift
                              Data.Random.Source.Internal.Prim.Prim
                              Data.Functor.Identity.Identity
                              a1
                            -> (a1 -> b) -> b) ->
                 eta Gen.Phoneme.makePlaces_x) -}
3eac8b9373155b0423132648c8a83e3e
  makePlaces14 :: Data.RVar.RVar [Data.Phoneme.Place]
  {- Unfolding: (Data.Random.Extras.choice
                   @ [Data.Phoneme.Place]
                   Gen.Phoneme.makePlaces15) -}
966175351251c332a400d20b66947659
  makePlaces15 :: [[Data.Phoneme.Place]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [Data.Phoneme.Place]
                   Gen.Phoneme.makePlaces19
                   Gen.Phoneme.makePlaces16) -}
10a5f0181b6ca83c72bcd3092208155b
  makePlaces16 :: [[Data.Phoneme.Place]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [Data.Phoneme.Place]
                   Gen.Phoneme.makePlaces17
                   (GHC.Types.[] @ [Data.Phoneme.Place])) -}
14130256f97b09876a70194b7cebb1b0
  makePlaces17 :: [Data.Phoneme.Place]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Place
                   Data.Phoneme.PHARYNGEAL
                   Gen.Phoneme.makePlaces18) -}
59f58013bd73ca6e62be4f194ab52230
  makePlaces18 :: [Data.Phoneme.Place]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Place
                   Data.Phoneme.EPIGLOTTAL
                   (GHC.Types.[] @ Data.Phoneme.Place)) -}
93259ffc68d79b4ace58844a1352ad09
  makePlaces19 :: [Data.Phoneme.Place]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Place
                   Data.Phoneme.EPIPHARYNGEAL
                   (GHC.Types.[] @ Data.Phoneme.Place)) -}
5a3bc62269d1c8ccae537a0a1b54f3c7
  makePlaces2 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [Data.Phoneme.Place]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [Data.Phoneme.Place])
                   Gen.Phoneme.makePlaces55
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.N:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[Data.Phoneme.Place]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.N:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.N:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[Data.Phoneme.Place]>_N))
                   Gen.Phoneme.makePlaces3) -}
e7ba21a0f133d25055bc49fc544f0dc4
  makePlaces20 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [Data.Phoneme.Place]]
    -> forall b.
       ([[Data.Phoneme.Place]] -> b)
       -> (forall a.
           Control.Monad.Prompt.Lift
             Data.Random.Source.Internal.Prim.Prim
             Data.Functor.Identity.Identity
             a
           -> (a -> b) -> b)
       -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,C(U)><L,U> -}
547e0165dcaaf8070f544a51c9f8583a
  makePlaces21 ::
    ([Data.Phoneme.Place] -> b)
    -> (forall a1.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a1
        -> (a1 -> b) -> b)
    -> b
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (\ @ b
                   (eta :: [Data.Phoneme.Place] -> b)
                   (eta1 :: forall a1.
                            Control.Monad.Prompt.Lift
                              Data.Random.Source.Internal.Prim.Prim
                              Data.Functor.Identity.Identity
                              a1
                            -> (a1 -> b) -> b) ->
                 eta Gen.Phoneme.makePlaces_x1) -}
f94153f4e5a9d12c255e59ce6eb75e32
  makePlaces22 ::
    ([Data.Phoneme.Place] -> b)
    -> (forall a1.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a1
        -> (a1 -> b) -> b)
    -> b
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (\ @ b
                   (eta :: [Data.Phoneme.Place] -> b)
                   (eta1 :: forall a1.
                            Control.Monad.Prompt.Lift
                              Data.Random.Source.Internal.Prim.Prim
                              Data.Functor.Identity.Identity
                              a1
                            -> (a1 -> b) -> b) ->
                 eta (GHC.Types.[] @ Data.Phoneme.Place)) -}
e80cb35e7648454e07aa3b5e1e1f30ac
  makePlaces23 ::
    ([Data.Phoneme.Place] -> b1)
    -> (forall a1.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a1
        -> (a1 -> b1) -> b1)
    -> b1
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ b1
                   (eta :: [Data.Phoneme.Place] -> b1)
                   (eta1 :: forall a1.
                            Control.Monad.Prompt.Lift
                              Data.Random.Source.Internal.Prim.Prim
                              Data.Functor.Identity.Identity
                              a1
                            -> (a1 -> b1) -> b1) ->
                 Gen.Phoneme.makePlaces_ds1
                   `cast`
                 (Trans
                      (Trans
                           (Data.RVar.N:RVarT[0] <Data.Functor.Identity.Identity>_N)
                           (Control.Monad.Prompt.N:PromptT[0]
                                <Data.Random.Source.Internal.Prim.Prim>_R
                                <Data.Functor.Identity.Identity>_R) <Data.RVar.RVarT
                                                                       Data.Functor.Identity.Identity
                                                                       [Data.Phoneme.Place]>_N)
                      (Control.Monad.Prompt.N:Prompt[0]
                           <Control.Monad.Prompt.Lift
                              Data.Random.Source.Internal.Prim.Prim
                              Data.Functor.Identity.Identity>_R
                           <Data.RVar.RVarT
                              Data.Functor.Identity.Identity [Data.Phoneme.Place]>_R))
                   @ b1
                   (\ (x568 :: Data.RVar.RVarT
                                 Data.Functor.Identity.Identity [Data.Phoneme.Place]) ->
                    case x568
                           `cast`
                         (Trans
                              (Trans
                                   (Data.RVar.N:RVarT[0] <Data.Functor.Identity.Identity>_N)
                                   (Control.Monad.Prompt.N:PromptT[0]
                                        <Data.Random.Source.Internal.Prim.Prim>_R
                                        <Data.Functor.Identity.Identity>_R) <[Data.Phoneme.Place]>_N)
                              (Control.Monad.Prompt.N:Prompt[0]
                                   <Control.Monad.Prompt.Lift
                                      Data.Random.Source.Internal.Prim.Prim
                                      Data.Functor.Identity.Identity>_R
                                   <[Data.Phoneme.Place]>_R)) of nt { DEFAULT ->
                    nt @ b1 eta eta1 })
                   eta1) -}
8fb48065f6532fb3ea58f04b24d617d1
  makePlaces24 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [Data.Phoneme.Place]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [Data.Phoneme.Place])
                   Gen.Phoneme.makePlaces38
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.N:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[Data.Phoneme.Place]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.N:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.N:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[Data.Phoneme.Place]>_N))
                   Gen.Phoneme.makePlaces25) -}
b1f8e7631c3d8e36e4ada3b03f14d1e9
  makePlaces25 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [Data.Phoneme.Place]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [Data.Phoneme.Place])
                   Gen.Phoneme.makePlaces26
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.N:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[Data.Phoneme.Place]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.N:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.N:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[Data.Phoneme.Place]>_N))
                   (GHC.Types.[]
                      @ (Data.RVar.RVarT
                           Data.Functor.Identity.Identity [Data.Phoneme.Place]))) -}
d5150bb93b092e35a818bc622cd1159e
  makePlaces26 ::
    ([Data.Phoneme.Place] -> b1)
    -> (forall a1.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a1
        -> (a1 -> b1) -> b1)
    -> b1
  {- Arity: 2,
     Unfolding: (\ @ b1
                   (eta :: [Data.Phoneme.Place] -> b1)
                   (eta1 :: forall a1.
                            Control.Monad.Prompt.Lift
                              Data.Random.Source.Internal.Prim.Prim
                              Data.Functor.Identity.Identity
                              a1
                            -> (a1 -> b1) -> b1) ->
                 let {
                   eta2 :: [[Data.Phoneme.Place]] -> b1
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (x568 :: [[Data.Phoneme.Place]]) ->
                     case Gen.Phoneme.makePlaces_go2 x568 of x569 { DEFAULT ->
                     eta x569 }
                 } in
                 Gen.Phoneme.makePlaces_m1
                   `cast`
                 (Trans
                      (Trans
                           (Data.RVar.N:RVarT[0] <Data.Functor.Identity.Identity>_N)
                           (Control.Monad.Prompt.N:PromptT[0]
                                <Data.Random.Source.Internal.Prim.Prim>_R
                                <Data.Functor.Identity.Identity>_R) <GHC.Types.Int>_N)
                      (Control.Monad.Prompt.N:Prompt[0]
                           <Control.Monad.Prompt.Lift
                              Data.Random.Source.Internal.Prim.Prim
                              Data.Functor.Identity.Identity>_R
                           <GHC.Types.Int>_R))
                   @ b1
                   (\ (x568 :: GHC.Types.Int) ->
                    case x568 of x569 { GHC.Types.I# ipv ->
                    Gen.Phoneme.makePlaces37
                      Gen.Phoneme.makePlaces27
                      @ b1
                      (\ (x570 :: [[Data.Phoneme.Place]]) ->
                       case x570 of x571 { DEFAULT ->
                       case (Data.Random.Extras.sampleSeq
                               @ [Data.Phoneme.Place]
                               x569
                               (Data.Sequence.fromList1
                                  @ [Data.Phoneme.Place]
                                  x571
                                    `cast`
                                  ([Sym (Data.Sequence.N:Elem[0] <[Data.Phoneme.Place]>_R)])_R)
                                 `cast`
                               (Sym (Data.Sequence.N:Seq[0] <[Data.Phoneme.Place]>_R)))
                              `cast`
                            (Trans
                                 (Trans
                                      (Data.RVar.N:RVarT[0] <Data.Functor.Identity.Identity>_N)
                                      (Control.Monad.Prompt.N:PromptT[0]
                                           <Data.Random.Source.Internal.Prim.Prim>_R
                                           <Data.Functor.Identity.Identity>_R) <[[Data.Phoneme.Place]]>_N)
                                 (Control.Monad.Prompt.N:Prompt[0]
                                      <Control.Monad.Prompt.Lift
                                         Data.Random.Source.Internal.Prim.Prim
                                         Data.Functor.Identity.Identity>_R
                                      <[[Data.Phoneme.Place]]>_R)) of nt { DEFAULT ->
                       nt @ b1 eta2 eta1 } })
                      eta1 })
                   eta1) -}
8c43580ec83c9def5c7a385961fee241
  makePlaces27 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [Data.Phoneme.Place]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [Data.Phoneme.Place])
                   Gen.Phoneme.makePlaces32
                   Gen.Phoneme.makePlaces28) -}
2de553c226f2f61c27b8e64dfae298cd
  makePlaces28 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [Data.Phoneme.Place]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [Data.Phoneme.Place])
                   Gen.Phoneme.makePlaces31
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.N:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[Data.Phoneme.Place]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.N:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.N:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[Data.Phoneme.Place]>_N))
                   Gen.Phoneme.makePlaces29) -}
1b9a319a22a1b494fa3694588e646ae0
  makePlaces29 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [Data.Phoneme.Place]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [Data.Phoneme.Place])
                   Gen.Phoneme.makePlaces30
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.N:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[Data.Phoneme.Place]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.N:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.N:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[Data.Phoneme.Place]>_N))
                   (GHC.Types.[]
                      @ (Data.RVar.RVarT
                           Data.Functor.Identity.Identity [Data.Phoneme.Place]))) -}
1a312fd0593c11420ae0db4479428997
  makePlaces3 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [Data.Phoneme.Place]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [Data.Phoneme.Place])
                   Gen.Phoneme.makePlaces39
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.N:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[Data.Phoneme.Place]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.N:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.N:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[Data.Phoneme.Place]>_N))
                   Gen.Phoneme.makePlaces4) -}
cefd71878d5ccc3b5824d656087de53d
  makePlaces30 ::
    ([Data.Phoneme.Place] -> b)
    -> (forall a1.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a1
        -> (a1 -> b) -> b)
    -> b
  {- Arity: 2, HasNoCafRefs, Strictness: <C(S),1*C1(U)><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ b
                   (eta :: [Data.Phoneme.Place] -> b)
                   (eta1 :: forall a1.
                            Control.Monad.Prompt.Lift
                              Data.Random.Source.Internal.Prim.Prim
                              Data.Functor.Identity.Identity
                              a1
                            -> (a1 -> b) -> b) ->
                 eta Gen.Phoneme.makePlaces_x2) -}
8b909e2aa568df9ee5a5b28861f83e4b
  makePlaces31 ::
    ([Data.Phoneme.Place] -> b)
    -> (forall a1.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a1
        -> (a1 -> b) -> b)
    -> b
  {- Arity: 2, HasNoCafRefs, Strictness: <C(S),1*C1(U)><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ b
                   (eta :: [Data.Phoneme.Place] -> b)
                   (eta1 :: forall a1.
                            Control.Monad.Prompt.Lift
                              Data.Random.Source.Internal.Prim.Prim
                              Data.Functor.Identity.Identity
                              a1
                            -> (a1 -> b) -> b) ->
                 eta Gen.Phoneme.makePlaces_x3) -}
a6e737b395b04e06021da956c0eb612a
  makePlaces32 :: Data.RVar.RVar [Data.Phoneme.Place]
  {- Unfolding: (Data.Random.Extras.choice
                   @ [Data.Phoneme.Place]
                   Gen.Phoneme.makePlaces33) -}
6b399a84e40a3af265c4d60b0b3962c4
  makePlaces33 :: [[Data.Phoneme.Place]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [Data.Phoneme.Place]
                   Gen.Phoneme.makePlaces36
                   Gen.Phoneme.makePlaces34) -}
46a5df89d0d5b574a1e2c228cbd2f10b
  makePlaces34 :: [[Data.Phoneme.Place]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [Data.Phoneme.Place]
                   Gen.Phoneme.makePlaces35
                   (GHC.Types.[] @ [Data.Phoneme.Place])) -}
c0e8cc4e3ca09176a166be34eed2d0a6
  makePlaces35 :: [Data.Phoneme.Place]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Place
                   Data.Phoneme.ALVEOLOPALATAL
                   Gen.Phoneme.makePlaces36) -}
45d19d7806791a8f499715dad082e8f3
  makePlaces36 :: [Data.Phoneme.Place]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Place
                   Data.Phoneme.PALATAL
                   (GHC.Types.[] @ Data.Phoneme.Place)) -}
4fa3454ef602a02a5644da6173f09d84
  makePlaces37 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [Data.Phoneme.Place]]
    -> forall b.
       ([[Data.Phoneme.Place]] -> b)
       -> (forall a.
           Control.Monad.Prompt.Lift
             Data.Random.Source.Internal.Prim.Prim
             Data.Functor.Identity.Identity
             a
           -> (a -> b) -> b)
       -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,C(U)><L,U> -}
0da59e8894019bd811223b54a02c1e0a
  makePlaces38 ::
    ([Data.Phoneme.Place] -> b)
    -> (forall a1.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a1
        -> (a1 -> b) -> b)
    -> b
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (\ @ b
                   (eta :: [Data.Phoneme.Place] -> b)
                   (eta1 :: forall a1.
                            Control.Monad.Prompt.Lift
                              Data.Random.Source.Internal.Prim.Prim
                              Data.Functor.Identity.Identity
                              a1
                            -> (a1 -> b) -> b) ->
                 eta Gen.Phoneme.makePlaces_x4) -}
20dee590c68a8e49f368e385162c3456
  makePlaces39 ::
    ([Data.Phoneme.Place] -> b1)
    -> (forall a1.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a1
        -> (a1 -> b1) -> b1)
    -> b1
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ b1
                   (eta :: [Data.Phoneme.Place] -> b1)
                   (eta1 :: forall a1.
                            Control.Monad.Prompt.Lift
                              Data.Random.Source.Internal.Prim.Prim
                              Data.Functor.Identity.Identity
                              a1
                            -> (a1 -> b1) -> b1) ->
                 Gen.Phoneme.makePlaces_ds2
                   `cast`
                 (Trans
                      (Trans
                           (Data.RVar.N:RVarT[0] <Data.Functor.Identity.Identity>_N)
                           (Control.Monad.Prompt.N:PromptT[0]
                                <Data.Random.Source.Internal.Prim.Prim>_R
                                <Data.Functor.Identity.Identity>_R) <Data.RVar.RVarT
                                                                       Data.Functor.Identity.Identity
                                                                       [Data.Phoneme.Place]>_N)
                      (Control.Monad.Prompt.N:Prompt[0]
                           <Control.Monad.Prompt.Lift
                              Data.Random.Source.Internal.Prim.Prim
                              Data.Functor.Identity.Identity>_R
                           <Data.RVar.RVarT
                              Data.Functor.Identity.Identity [Data.Phoneme.Place]>_R))
                   @ b1
                   (\ (x568 :: Data.RVar.RVarT
                                 Data.Functor.Identity.Identity [Data.Phoneme.Place]) ->
                    case x568
                           `cast`
                         (Trans
                              (Trans
                                   (Data.RVar.N:RVarT[0] <Data.Functor.Identity.Identity>_N)
                                   (Control.Monad.Prompt.N:PromptT[0]
                                        <Data.Random.Source.Internal.Prim.Prim>_R
                                        <Data.Functor.Identity.Identity>_R) <[Data.Phoneme.Place]>_N)
                              (Control.Monad.Prompt.N:Prompt[0]
                                   <Control.Monad.Prompt.Lift
                                      Data.Random.Source.Internal.Prim.Prim
                                      Data.Functor.Identity.Identity>_R
                                   <[Data.Phoneme.Place]>_R)) of nt { DEFAULT ->
                    nt @ b1 eta eta1 })
                   eta1) -}
4f8398eb60334493927c63cabb53185b
  makePlaces4 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [Data.Phoneme.Place]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [Data.Phoneme.Place])
                   Gen.Phoneme.makePlaces23
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.N:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[Data.Phoneme.Place]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.N:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.N:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[Data.Phoneme.Place]>_N))
                   Gen.Phoneme.makePlaces5) -}
7748d9b80b4e2a8f54eb6814f6737563
  makePlaces40 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [Data.Phoneme.Place]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [Data.Phoneme.Place])
                   Gen.Phoneme.makePlaces54
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.N:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[Data.Phoneme.Place]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.N:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.N:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[Data.Phoneme.Place]>_N))
                   Gen.Phoneme.makePlaces41) -}
96e0b2a8e122e12a0d985c016d44c1e1
  makePlaces41 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [Data.Phoneme.Place]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [Data.Phoneme.Place])
                   Gen.Phoneme.makePlaces42
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.N:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[Data.Phoneme.Place]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.N:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.N:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[Data.Phoneme.Place]>_N))
                   (GHC.Types.[]
                      @ (Data.RVar.RVarT
                           Data.Functor.Identity.Identity [Data.Phoneme.Place]))) -}
4446949b2b7b7d9f9f150e0b5a24943e
  makePlaces42 ::
    ([Data.Phoneme.Place] -> b1)
    -> (forall a1.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a1
        -> (a1 -> b1) -> b1)
    -> b1
  {- Arity: 2,
     Unfolding: (\ @ b1
                   (eta :: [Data.Phoneme.Place] -> b1)
                   (eta1 :: forall a1.
                            Control.Monad.Prompt.Lift
                              Data.Random.Source.Internal.Prim.Prim
                              Data.Functor.Identity.Identity
                              a1
                            -> (a1 -> b1) -> b1) ->
                 Gen.Phoneme.makePlaces53
                   Gen.Phoneme.makePlaces43
                   @ b1
                   (\ (x568 :: [[Data.Phoneme.Place]]) ->
                    case Gen.Phoneme.makePlaces_go3 x568 of x569 { DEFAULT ->
                    eta x569 })
                   eta1) -}
e226319451ba2d6b78ed820a51c7bc9c
  makePlaces43 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [Data.Phoneme.Place]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [Data.Phoneme.Place])
                   Gen.Phoneme.makePlaces46
                   Gen.Phoneme.makePlaces44) -}
528576ff4d88e96f8219bad3302f5647
  makePlaces44 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [Data.Phoneme.Place]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [Data.Phoneme.Place])
                   Gen.Phoneme.makePlaces45
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.N:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[Data.Phoneme.Place]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.N:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.N:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[Data.Phoneme.Place]>_N))
                   (GHC.Types.[]
                      @ (Data.RVar.RVarT
                           Data.Functor.Identity.Identity [Data.Phoneme.Place]))) -}
048782595661ab4afadf8398562fa1fb
  makePlaces45 ::
    ([Data.Phoneme.Place] -> b)
    -> (forall a1.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a1
        -> (a1 -> b) -> b)
    -> b
  {- Arity: 2, HasNoCafRefs, Strictness: <C(S),1*C1(U)><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ b
                   (eta :: [Data.Phoneme.Place] -> b)
                   (eta1 :: forall a1.
                            Control.Monad.Prompt.Lift
                              Data.Random.Source.Internal.Prim.Prim
                              Data.Functor.Identity.Identity
                              a1
                            -> (a1 -> b) -> b) ->
                 eta Gen.Phoneme.makePlaces_x5) -}
dbb169c6aefbec399bc268fce71bfb37
  makePlaces46 :: Data.RVar.RVar [Data.Phoneme.Place]
  {- Unfolding: (Data.Random.Extras.choice
                   @ [Data.Phoneme.Place]
                   Gen.Phoneme.makePlaces47) -}
22b4d2f75cad236b3aa22b96a136f29c
  makePlaces47 :: [[Data.Phoneme.Place]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [Data.Phoneme.Place]
                   Gen.Phoneme.makePlaces52
                   Gen.Phoneme.makePlaces48) -}
c47ce8eb4b6efc54b2df667c9f7ab1d8
  makePlaces48 :: [[Data.Phoneme.Place]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [Data.Phoneme.Place]
                   Gen.Phoneme.makePlaces49
                   (GHC.Types.[] @ [Data.Phoneme.Place])) -}
52c7b14e2a8289601c20579c9121a814
  makePlaces49 :: [Data.Phoneme.Place]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Place
                   Data.Phoneme.DENTAL
                   Gen.Phoneme.makePlaces50) -}
af2df9f68c0bfdb385bf6ede32dae360
  makePlaces5 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [Data.Phoneme.Place]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [Data.Phoneme.Place])
                   Gen.Phoneme.makePlaces6
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.N:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[Data.Phoneme.Place]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.N:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.N:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[Data.Phoneme.Place]>_N))
                   (GHC.Types.[]
                      @ (Data.RVar.RVarT
                           Data.Functor.Identity.Identity [Data.Phoneme.Place]))) -}
bb4f355f535ad6410ebb909b8f7d5307
  makePlaces50 :: [Data.Phoneme.Place]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Place
                   Data.Phoneme.ALVEOLAR
                   Gen.Phoneme.makePlaces51) -}
00d6529f84de67880cf039f5179833cb
  makePlaces51 :: [Data.Phoneme.Place]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Place
                   Data.Phoneme.POSTALVEOLAR
                   (GHC.Types.[] @ Data.Phoneme.Place)) -}
2b92f92bd8518bc79170e77e825d75f4
  makePlaces52 :: [Data.Phoneme.Place]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Place
                   Data.Phoneme.DENTIALVEOLAR
                   (GHC.Types.[] @ Data.Phoneme.Place)) -}
461912290816bbe1de992e6b12ee4c0e
  makePlaces53 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [Data.Phoneme.Place]]
    -> forall b.
       ([[Data.Phoneme.Place]] -> b)
       -> (forall a.
           Control.Monad.Prompt.Lift
             Data.Random.Source.Internal.Prim.Prim
             Data.Functor.Identity.Identity
             a
           -> (a -> b) -> b)
       -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,C(U)><L,U> -}
7f0f461ded50e63bdb53b7b279496aa7
  makePlaces54 ::
    ([Data.Phoneme.Place] -> b)
    -> (forall a1.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a1
        -> (a1 -> b) -> b)
    -> b
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (\ @ b
                   (eta :: [Data.Phoneme.Place] -> b)
                   (eta1 :: forall a1.
                            Control.Monad.Prompt.Lift
                              Data.Random.Source.Internal.Prim.Prim
                              Data.Functor.Identity.Identity
                              a1
                            -> (a1 -> b) -> b) ->
                 eta Gen.Phoneme.makePlaces_x6) -}
89135c962fb0a7076151bda1fba634b8
  makePlaces55 ::
    ([Data.Phoneme.Place] -> b1)
    -> (forall a1.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a1
        -> (a1 -> b1) -> b1)
    -> b1
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ b1
                   (eta :: [Data.Phoneme.Place] -> b1)
                   (eta1 :: forall a1.
                            Control.Monad.Prompt.Lift
                              Data.Random.Source.Internal.Prim.Prim
                              Data.Functor.Identity.Identity
                              a1
                            -> (a1 -> b1) -> b1) ->
                 Gen.Phoneme.makePlaces_ds3
                   `cast`
                 (Trans
                      (Trans
                           (Data.RVar.N:RVarT[0] <Data.Functor.Identity.Identity>_N)
                           (Control.Monad.Prompt.N:PromptT[0]
                                <Data.Random.Source.Internal.Prim.Prim>_R
                                <Data.Functor.Identity.Identity>_R) <Data.RVar.RVarT
                                                                       Data.Functor.Identity.Identity
                                                                       [Data.Phoneme.Place]>_N)
                      (Control.Monad.Prompt.N:Prompt[0]
                           <Control.Monad.Prompt.Lift
                              Data.Random.Source.Internal.Prim.Prim
                              Data.Functor.Identity.Identity>_R
                           <Data.RVar.RVarT
                              Data.Functor.Identity.Identity [Data.Phoneme.Place]>_R))
                   @ b1
                   (\ (x568 :: Data.RVar.RVarT
                                 Data.Functor.Identity.Identity [Data.Phoneme.Place]) ->
                    case x568
                           `cast`
                         (Trans
                              (Trans
                                   (Data.RVar.N:RVarT[0] <Data.Functor.Identity.Identity>_N)
                                   (Control.Monad.Prompt.N:PromptT[0]
                                        <Data.Random.Source.Internal.Prim.Prim>_R
                                        <Data.Functor.Identity.Identity>_R) <[Data.Phoneme.Place]>_N)
                              (Control.Monad.Prompt.N:Prompt[0]
                                   <Control.Monad.Prompt.Lift
                                      Data.Random.Source.Internal.Prim.Prim
                                      Data.Functor.Identity.Identity>_R
                                   <[Data.Phoneme.Place]>_R)) of nt { DEFAULT ->
                    nt @ b1 eta eta1 })
                   eta1) -}
c07b3bf885b42db0df861f42d011b76b
  makePlaces56 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [Data.Phoneme.Place]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [Data.Phoneme.Place])
                   Gen.Phoneme.makePlaces22
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.N:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[Data.Phoneme.Place]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.N:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.N:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[Data.Phoneme.Place]>_N))
                   Gen.Phoneme.makePlaces57) -}
bf2e2dbc730df9f47e71202359cac8d0
  makePlaces57 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [Data.Phoneme.Place]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [Data.Phoneme.Place])
                   Gen.Phoneme.makePlaces61
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.N:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[Data.Phoneme.Place]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.N:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.N:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[Data.Phoneme.Place]>_N))
                   Gen.Phoneme.makePlaces58) -}
7e41d12362b38082555ff8a188c647ab
  makePlaces58 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [Data.Phoneme.Place]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [Data.Phoneme.Place])
                   Gen.Phoneme.makePlaces59
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.N:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[Data.Phoneme.Place]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.N:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.N:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[Data.Phoneme.Place]>_N))
                   (GHC.Types.[]
                      @ (Data.RVar.RVarT
                           Data.Functor.Identity.Identity [Data.Phoneme.Place]))) -}
5a73545e75ec86cd9cc83f536b55a665
  makePlaces59 ::
    ([Data.Phoneme.Place] -> b)
    -> (forall a1.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a1
        -> (a1 -> b) -> b)
    -> b
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (\ @ b
                   (eta :: [Data.Phoneme.Place] -> b)
                   (eta1 :: forall a1.
                            Control.Monad.Prompt.Lift
                              Data.Random.Source.Internal.Prim.Prim
                              Data.Functor.Identity.Identity
                              a1
                            -> (a1 -> b) -> b) ->
                 eta Gen.Phoneme.makePlaces_x7) -}
daed68278496d3b5310b9ed9c79c3603
  makePlaces6 ::
    ([Data.Phoneme.Place] -> b1)
    -> (forall a1.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a1
        -> (a1 -> b1) -> b1)
    -> b1
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ b1
                   (eta :: [Data.Phoneme.Place] -> b1)
                   (eta1 :: forall a1.
                            Control.Monad.Prompt.Lift
                              Data.Random.Source.Internal.Prim.Prim
                              Data.Functor.Identity.Identity
                              a1
                            -> (a1 -> b1) -> b1) ->
                 Gen.Phoneme.makePlaces_ds
                   `cast`
                 (Trans
                      (Trans
                           (Data.RVar.N:RVarT[0] <Data.Functor.Identity.Identity>_N)
                           (Control.Monad.Prompt.N:PromptT[0]
                                <Data.Random.Source.Internal.Prim.Prim>_R
                                <Data.Functor.Identity.Identity>_R) <Data.RVar.RVarT
                                                                       Data.Functor.Identity.Identity
                                                                       [Data.Phoneme.Place]>_N)
                      (Control.Monad.Prompt.N:Prompt[0]
                           <Control.Monad.Prompt.Lift
                              Data.Random.Source.Internal.Prim.Prim
                              Data.Functor.Identity.Identity>_R
                           <Data.RVar.RVarT
                              Data.Functor.Identity.Identity [Data.Phoneme.Place]>_R))
                   @ b1
                   (\ (x568 :: Data.RVar.RVarT
                                 Data.Functor.Identity.Identity [Data.Phoneme.Place]) ->
                    case x568
                           `cast`
                         (Trans
                              (Trans
                                   (Data.RVar.N:RVarT[0] <Data.Functor.Identity.Identity>_N)
                                   (Control.Monad.Prompt.N:PromptT[0]
                                        <Data.Random.Source.Internal.Prim.Prim>_R
                                        <Data.Functor.Identity.Identity>_R) <[Data.Phoneme.Place]>_N)
                              (Control.Monad.Prompt.N:Prompt[0]
                                   <Control.Monad.Prompt.Lift
                                      Data.Random.Source.Internal.Prim.Prim
                                      Data.Functor.Identity.Identity>_R
                                   <[Data.Phoneme.Place]>_R)) of nt { DEFAULT ->
                    nt @ b1 eta eta1 })
                   eta1) -}
239c075588832d527e7461a8c7eb82ed
  makePlaces60 :: [Data.Phoneme.Place]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Place
                   Data.Phoneme.LABIODENTAL
                   (GHC.Types.[] @ Data.Phoneme.Place)) -}
080a6c775881b6f3509bad07857c284c
  makePlaces61 ::
    ([Data.Phoneme.Place] -> b)
    -> (forall a1.
        Control.Monad.Prompt.Lift
          Data.Random.Source.Internal.Prim.Prim
          Data.Functor.Identity.Identity
          a1
        -> (a1 -> b) -> b)
    -> b
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (\ @ b
                   (eta :: [Data.Phoneme.Place] -> b)
                   (eta1 :: forall a1.
                            Control.Monad.Prompt.Lift
                              Data.Random.Source.Internal.Prim.Prim
                              Data.Functor.Identity.Identity
                              a1
                            -> (a1 -> b) -> b) ->
                 eta Gen.Phoneme.makePlaces_x8) -}
a2c80f92d2887e4c7f472ca595b32dc5
  makePlaces62 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [Data.Phoneme.Place]]
    -> forall b.
       ([[Data.Phoneme.Place]] -> b)
       -> (forall a.
           Control.Monad.Prompt.Lift
             Data.Random.Source.Internal.Prim.Prim
             Data.Functor.Identity.Identity
             a
           -> (a -> b) -> b)
       -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,C(U)><L,U> -}
38cb69b8d982c9c2bf77b3343c72f473
  makePlaces7 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [Data.Phoneme.Place]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [Data.Phoneme.Place])
                   Gen.Phoneme.makePlaces22
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.N:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[Data.Phoneme.Place]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.N:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.N:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[Data.Phoneme.Place]>_N))
                   Gen.Phoneme.makePlaces8) -}
0ea0aeaefe015933bca2f87e55d41c54
  makePlaces8 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [Data.Phoneme.Place]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [Data.Phoneme.Place])
                   Gen.Phoneme.makePlaces21
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.N:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[Data.Phoneme.Place]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.N:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.N:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[Data.Phoneme.Place]>_N))
                   Gen.Phoneme.makePlaces9) -}
6f87b19d60f07289963bba2021efea0c
  makePlaces9 ::
    [Data.RVar.RVarT
       Data.Functor.Identity.Identity [Data.Phoneme.Place]]
  {- Unfolding: (GHC.Types.:
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [Data.Phoneme.Place])
                   Gen.Phoneme.makePlaces10
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Prompt.N:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[Data.Phoneme.Place]>_R))
                        (Trans
                             (Sym (Control.Monad.Prompt.N:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R))
                             (Sym (Data.RVar.N:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[Data.Phoneme.Place]>_N))
                   (GHC.Types.[]
                      @ (Data.RVar.RVarT
                           Data.Functor.Identity.Identity [Data.Phoneme.Place]))) -}
f4fca3acbec125d7c9a5a0c1ef03df67
  makePlaces_ds ::
    Data.RVar.RVarT
      Data.Functor.Identity.Identity
      (Data.RVar.RVarT
         Data.Functor.Identity.Identity [Data.Phoneme.Place])
  {- Unfolding: (Data.Random.Extras.choice
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [Data.Phoneme.Place])
                   Gen.Phoneme.makePlaces7) -}
2ad14ed29d615b19de5426d5a84e7cd7
  makePlaces_ds1 ::
    Data.RVar.RVarT
      Data.Functor.Identity.Identity
      (Data.RVar.RVarT
         Data.Functor.Identity.Identity [Data.Phoneme.Place])
  {- Unfolding: (Data.Random.Extras.choice
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [Data.Phoneme.Place])
                   Gen.Phoneme.makePlaces24) -}
cd51b02770d7b69b607a8b0ebb59e980
  makePlaces_ds2 ::
    Data.RVar.RVarT
      Data.Functor.Identity.Identity
      (Data.RVar.RVarT
         Data.Functor.Identity.Identity [Data.Phoneme.Place])
  {- Unfolding: (Data.Random.Extras.choice
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [Data.Phoneme.Place])
                   Gen.Phoneme.makePlaces40) -}
d1868d1c5baa875a6211682ee9cd04ad
  makePlaces_ds3 ::
    Data.RVar.RVarT
      Data.Functor.Identity.Identity
      (Data.RVar.RVarT
         Data.Functor.Identity.Identity [Data.Phoneme.Place])
  {- Unfolding: (Data.Random.Extras.choice
                   @ (Data.RVar.RVarT
                        Data.Functor.Identity.Identity [Data.Phoneme.Place])
                   Gen.Phoneme.makePlaces56) -}
f280e2323ef16651f56afc756902ac35
  makePlaces_go :: [[Data.Phoneme.Place]] -> [Data.Phoneme.Place]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
f21f4c95ffe427ca91f66c0ab9e18915
  makePlaces_go1 :: [[Data.Phoneme.Place]] -> [Data.Phoneme.Place]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
ec6b7dcef294190bbfb8b8c33b22a90a
  makePlaces_go2 :: [[Data.Phoneme.Place]] -> [Data.Phoneme.Place]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
b3910b8a24aa8864925a5eb3c4b9a0c7
  makePlaces_go3 :: [[Data.Phoneme.Place]] -> [Data.Phoneme.Place]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
339a83d03ce1bd07a438b017806ef59a
  makePlaces_m1 ::
    Data.RVar.RVarT Data.Functor.Identity.Identity GHC.Types.Int
  {- Unfolding: (Data.Random.Distribution.Uniform.$w$sintegralUniform'
                   @ Data.Functor.Identity.Identity
                   2#
                   3#) -}
60b4052b42997152257662d22a4b4aa6
  makePlaces_x :: [Data.Phoneme.Place]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Place
                   Data.Phoneme.GLOTTAL
                   (GHC.Types.[] @ Data.Phoneme.Place)) -}
9890391c25c86d392587c66bf57fc7dc
  makePlaces_x1 :: [Data.Phoneme.Place]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Place
                   Data.Phoneme.LARYNGEAL
                   (GHC.Types.[] @ Data.Phoneme.Place)) -}
09d41705a9495e69c5e2daffbb38bb19
  makePlaces_x2 :: [Data.Phoneme.Place]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Place
                   Data.Phoneme.UVULAR
                   (GHC.Types.[] @ Data.Phoneme.Place)) -}
eed10511217012905a3f9fb2bdfbb1d2
  makePlaces_x3 :: [Data.Phoneme.Place]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Place
                   Data.Phoneme.VELAR
                   (GHC.Types.[] @ Data.Phoneme.Place)) -}
7a1a3e1dfe6ae90a3eca456f624bdd3a
  makePlaces_x4 :: [Data.Phoneme.Place]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Place
                   Data.Phoneme.DORSAL
                   (GHC.Types.[] @ Data.Phoneme.Place)) -}
8781cf6fd2244f08a086594ee7e1dd6a
  makePlaces_x5 :: [Data.Phoneme.Place]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Place
                   Data.Phoneme.RETROFLEX
                   (GHC.Types.[] @ Data.Phoneme.Place)) -}
cdc6a875bf3b50fd4c09563620856f29
  makePlaces_x6 :: [Data.Phoneme.Place]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Place
                   Data.Phoneme.CORONAL
                   (GHC.Types.[] @ Data.Phoneme.Place)) -}
ccccd27c0aaccc438fb1e279bc18e06c
  makePlaces_x7 :: [Data.Phoneme.Place]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Place
                   Data.Phoneme.BILABIAL
                   Gen.Phoneme.makePlaces60) -}
df37aef74592debacdcb38c11f60727c
  makePlaces_x8 :: [Data.Phoneme.Place]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Place
                   Data.Phoneme.LABIAL
                   (GHC.Types.[] @ Data.Phoneme.Place)) -}
53317d3fd4264f5db244ea21d371e722
  makeRoundedneses :: Data.RVar.RVar [Data.Phoneme.Roundedness]
  {- Unfolding: (Data.Random.Extras.choice
                   @ [Data.Phoneme.Roundedness]
                   Gen.Phoneme.makeRoundedneses1) -}
dcf227d196fc90100c3473aa087ffba6
  makeRoundedneses1 :: [[Data.Phoneme.Roundedness]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [Data.Phoneme.Roundedness]
                   Gen.Phoneme.makeRoundedneses5
                   Gen.Phoneme.makeRoundedneses2) -}
1b791d315e2cc019a9b9cda06c41c644
  makeRoundedneses2 :: [[Data.Phoneme.Roundedness]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [Data.Phoneme.Roundedness]
                   Gen.Phoneme.makeRoundedneses3
                   (GHC.Types.[] @ [Data.Phoneme.Roundedness])) -}
b4707f5e802d291e2b9e890e9f75bc21
  makeRoundedneses3 :: [Data.Phoneme.Roundedness]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Roundedness
                   Data.Phoneme.UNROUNDED
                   Gen.Phoneme.makeRoundedneses4) -}
4b719c93e2ca4870f9d050001d0fe7ec
  makeRoundedneses4 :: [Data.Phoneme.Roundedness]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Roundedness
                   Data.Phoneme.ROUNDED
                   (GHC.Types.[] @ Data.Phoneme.Roundedness)) -}
8b5aa411714692e2cc8f5e9d258d6713
  makeRoundedneses5 :: [Data.Phoneme.Roundedness]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Roundedness
                   Data.Phoneme.DEFAULT
                   (GHC.Types.[] @ Data.Phoneme.Roundedness)) -}
82d2a96bf139b9e63618a469fa1c940e
  makeTones :: Data.RVar.RVar [Data.Phoneme.Tone]
  {- Unfolding: (Data.Random.Extras.choice
                   @ [Data.Phoneme.Tone]
                   Gen.Phoneme.makeTones1) -}
c0439d70c80d475a672e9f5c26a26628
  makeTones1 :: [[Data.Phoneme.Tone]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [Data.Phoneme.Tone]
                   Gen.Phoneme.makeTones22
                   Gen.Phoneme.makeTones2) -}
6ac3ebc97c6cb6b5608149035ccc9e76
  makeTones10 :: [[Data.Phoneme.Tone]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [Data.Phoneme.Tone]
                   Gen.Phoneme.makeTones43
                   Gen.Phoneme.makeTones11) -}
59795415923f189f89e8f3942c132a83
  makeTones11 :: [[Data.Phoneme.Tone]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [Data.Phoneme.Tone]
                   Gen.Phoneme.makeTones39
                   Gen.Phoneme.makeTones12) -}
0e0cb6332d29b52657feb03f4ba10190
  makeTones12 :: [[Data.Phoneme.Tone]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [Data.Phoneme.Tone]
                   Gen.Phoneme.makeTones34
                   Gen.Phoneme.makeTones13) -}
87a955e11d5b5b4168d0de7f609037da
  makeTones13 :: [[Data.Phoneme.Tone]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [Data.Phoneme.Tone]
                   Gen.Phoneme.makeTones29
                   Gen.Phoneme.makeTones14) -}
1c1af8d084e8ed9e1a9bc4172eb0fc71
  makeTones14 :: [[Data.Phoneme.Tone]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [Data.Phoneme.Tone]
                   Gen.Phoneme.makeTones23
                   Gen.Phoneme.makeTones15) -}
b12a785b648f8dc0818ca3a64b82f4b4
  makeTones15 :: [[Data.Phoneme.Tone]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [Data.Phoneme.Tone]
                   Gen.Phoneme.makeTones16
                   (GHC.Types.[] @ [Data.Phoneme.Tone])) -}
8149fd0e0f15a8dfa4d3a36bf20d7c7a
  makeTones16 :: [Data.Phoneme.Tone]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Tone
                   Data.Phoneme.LOWT
                   Gen.Phoneme.makeTones17) -}
87ec43d6dbfce189aced1109f420e83d
  makeTones17 :: [Data.Phoneme.Tone]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Tone
                   Data.Phoneme.MIDT
                   Gen.Phoneme.makeTones18) -}
57df4b14563334bd7cac695b39d1760f
  makeTones18 :: [Data.Phoneme.Tone]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Tone
                   Data.Phoneme.HIGHT
                   Gen.Phoneme.makeTones19) -}
e7f14d59e58f9ff44efed1e8fb3b9c4a
  makeTones19 :: [Data.Phoneme.Tone]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Tone
                   Data.Phoneme.TOPT
                   Gen.Phoneme.makeTones20) -}
60affe7a4492b7646620af56ad9c227a
  makeTones2 :: [[Data.Phoneme.Tone]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [Data.Phoneme.Tone]
                   Gen.Phoneme.makeTones63
                   Gen.Phoneme.makeTones3) -}
de2e4f15168fd5bc91759369060d81b5
  makeTones20 :: [Data.Phoneme.Tone]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Tone
                   Data.Phoneme.RISET
                   Gen.Phoneme.makeTones21) -}
26e84246644e512c7c1575e76edf0990
  makeTones21 :: [Data.Phoneme.Tone]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Tone
                   Data.Phoneme.FALLT
                   Gen.Phoneme.makeTones22) -}
03833dc84fbad72a9db1100ee81c33bc
  makeTones22 :: [Data.Phoneme.Tone]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Tone
                   Data.Phoneme.NONET
                   (GHC.Types.[] @ Data.Phoneme.Tone)) -}
4c8f58e396da07058be8596dc8265125
  makeTones23 :: [Data.Phoneme.Tone]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Tone
                   Data.Phoneme.LOWT
                   Gen.Phoneme.makeTones24) -}
5d68fc0f1c9f5fe580fef6cc4d7304b9
  makeTones24 :: [Data.Phoneme.Tone]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Tone
                   Data.Phoneme.MIDT
                   Gen.Phoneme.makeTones25) -}
897343c0ef780929ee27473032b9f254
  makeTones25 :: [Data.Phoneme.Tone]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Tone
                   Data.Phoneme.HIGHT
                   Gen.Phoneme.makeTones26) -}
78073b247abdd6a3af7bb939bae4a6ed
  makeTones26 :: [Data.Phoneme.Tone]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Tone
                   Data.Phoneme.TOPT
                   Gen.Phoneme.makeTones27) -}
f036223d1745a8af7ef6c0e1c2271343
  makeTones27 :: [Data.Phoneme.Tone]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Tone
                   Data.Phoneme.RISET
                   Gen.Phoneme.makeTones28) -}
2f95d5fd2ec70f81950d8287450dd840
  makeTones28 :: [Data.Phoneme.Tone]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Tone
                   Data.Phoneme.FALLT
                   (GHC.Types.[] @ Data.Phoneme.Tone)) -}
c2aa25e3372016d3f710bc81672872c2
  makeTones29 :: [Data.Phoneme.Tone]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Tone
                   Data.Phoneme.MIDT
                   Gen.Phoneme.makeTones30) -}
9f626c621ac3329eb33f43ca687fff1f
  makeTones3 :: [[Data.Phoneme.Tone]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [Data.Phoneme.Tone]
                   Gen.Phoneme.makeTones61
                   Gen.Phoneme.makeTones4) -}
86413f92df1212ecd20e4d57830d4918
  makeTones30 :: [Data.Phoneme.Tone]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Tone
                   Data.Phoneme.LOWT
                   Gen.Phoneme.makeTones31) -}
661a141607eae8e13311a8ae38f12efd
  makeTones31 :: [Data.Phoneme.Tone]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Tone
                   Data.Phoneme.FALLT
                   Gen.Phoneme.makeTones32) -}
2b55ebb16555deef849877f81d875430
  makeTones32 :: [Data.Phoneme.Tone]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Tone
                   Data.Phoneme.HIGHT
                   Gen.Phoneme.makeTones33) -}
a07d92fccfad9f4d5119da4d081ea077
  makeTones33 :: [Data.Phoneme.Tone]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Tone
                   Data.Phoneme.RISET
                   Gen.Phoneme.makeTones22) -}
f015ab20d8e22d118deb21d2d46ce34b
  makeTones34 :: [Data.Phoneme.Tone]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Tone
                   Data.Phoneme.MIDT
                   Gen.Phoneme.makeTones35) -}
5d03df92b8ec44fbc87f4d6adc49363f
  makeTones35 :: [Data.Phoneme.Tone]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Tone
                   Data.Phoneme.LOWT
                   Gen.Phoneme.makeTones36) -}
0c5140f20e61537d8407032d62d24e2b
  makeTones36 :: [Data.Phoneme.Tone]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Tone
                   Data.Phoneme.FALLT
                   Gen.Phoneme.makeTones37) -}
0d8864c8df5a9d799312a69d20143121
  makeTones37 :: [Data.Phoneme.Tone]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Tone
                   Data.Phoneme.HIGHT
                   Gen.Phoneme.makeTones38) -}
bbce03cfa5fbc68bd6ea84664e1d6334
  makeTones38 :: [Data.Phoneme.Tone]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Tone
                   Data.Phoneme.RISET
                   (GHC.Types.[] @ Data.Phoneme.Tone)) -}
fa46d8067c82ae0f6be13c7af3cb8e93
  makeTones39 :: [Data.Phoneme.Tone]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Tone
                   Data.Phoneme.MIDT
                   Gen.Phoneme.makeTones40) -}
ac900501a2bd49860efcda536c4dfd7e
  makeTones4 :: [[Data.Phoneme.Tone]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [Data.Phoneme.Tone]
                   Gen.Phoneme.makeTones60
                   Gen.Phoneme.makeTones5) -}
cc05435c19db58405289b1dbf7cb6c68
  makeTones40 :: [Data.Phoneme.Tone]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Tone
                   Data.Phoneme.LFALLT
                   Gen.Phoneme.makeTones41) -}
74038cdfde4072cf009b14650b7965ee
  makeTones41 :: [Data.Phoneme.Tone]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Tone
                   Data.Phoneme.HRISET
                   Gen.Phoneme.makeTones42) -}
b1b74df86aa8054096fc25881e8dda53
  makeTones42 :: [Data.Phoneme.Tone]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Tone
                   Data.Phoneme.DIPT
                   Gen.Phoneme.makeTones22) -}
7afda6762a683ae514a4e2f7d76dbf18
  makeTones43 :: [Data.Phoneme.Tone]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Tone
                   Data.Phoneme.MIDT
                   Gen.Phoneme.makeTones44) -}
f40dc822a68ff740416c5569e25ecc9b
  makeTones44 :: [Data.Phoneme.Tone]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Tone
                   Data.Phoneme.LFALLT
                   Gen.Phoneme.makeTones45) -}
6ca41c9818369a555b9cacfda999d22b
  makeTones45 :: [Data.Phoneme.Tone]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Tone
                   Data.Phoneme.HRISET
                   Gen.Phoneme.makeTones46) -}
eba2514c4cbaa6ccf4b020d79ccc1ea4
  makeTones46 :: [Data.Phoneme.Tone]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Tone
                   Data.Phoneme.DIPT
                   (GHC.Types.[] @ Data.Phoneme.Tone)) -}
1b484c6d15f6dbc59164a90ad58c57f2
  makeTones47 :: [Data.Phoneme.Tone]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Tone
                   Data.Phoneme.HIGHT
                   Gen.Phoneme.makeTones48) -}
a98dc64a742d04a20e6d45c366f4bc3d
  makeTones48 :: [Data.Phoneme.Tone]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Tone
                   Data.Phoneme.RISET
                   Gen.Phoneme.makeTones49) -}
650c848cae311b336ef1e9643ce9b1c0
  makeTones49 :: [Data.Phoneme.Tone]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Tone
                   Data.Phoneme.DIPT
                   Gen.Phoneme.makeTones21) -}
2c26c3d49bbee77531826e73da37a5c4
  makeTones5 :: [[Data.Phoneme.Tone]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [Data.Phoneme.Tone]
                   Gen.Phoneme.makeTones59
                   Gen.Phoneme.makeTones6) -}
2a458b52b606ded25168a2623216e43a
  makeTones50 :: [Data.Phoneme.Tone]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Tone
                   Data.Phoneme.HIGHT
                   Gen.Phoneme.makeTones51) -}
f9e4ebb0c97c6e457fbdf879726c466d
  makeTones51 :: [Data.Phoneme.Tone]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Tone
                   Data.Phoneme.RISET
                   Gen.Phoneme.makeTones52) -}
649bc30880c3214d22ac0c6dea17457b
  makeTones52 :: [Data.Phoneme.Tone]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Tone
                   Data.Phoneme.DIPT
                   Gen.Phoneme.makeTones28) -}
62070f20dcb62e94c0a40587c9c2b8a6
  makeTones53 :: [Data.Phoneme.Tone]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Tone
                   Data.Phoneme.HIGHT
                   Gen.Phoneme.makeTones54) -}
4c8e4e0ac3db6a16f4210db7e6b53849
  makeTones54 :: [Data.Phoneme.Tone]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Tone
                   Data.Phoneme.MIDT
                   Gen.Phoneme.makeTones55) -}
bbe7862c15135500126f9dcca65b5fc5
  makeTones55 :: [Data.Phoneme.Tone]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Tone
                   Data.Phoneme.LOWT
                   Gen.Phoneme.makeTones22) -}
09c1c9db08f52858f6eaf121170d8bec
  makeTones56 :: [Data.Phoneme.Tone]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Tone
                   Data.Phoneme.HIGHT
                   Gen.Phoneme.makeTones57) -}
8b8349209d6ccd563ac40a0a0f5cca42
  makeTones57 :: [Data.Phoneme.Tone]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Tone
                   Data.Phoneme.MIDT
                   Gen.Phoneme.makeTones58) -}
672c85ab9b6d7e8639dd95d5c51a2420
  makeTones58 :: [Data.Phoneme.Tone]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Tone
                   Data.Phoneme.LOWT
                   (GHC.Types.[] @ Data.Phoneme.Tone)) -}
956047dc564642117266fb2651b74e00
  makeTones59 :: [Data.Phoneme.Tone]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Tone
                   Data.Phoneme.HIGHT
                   Gen.Phoneme.makeTones55) -}
ce01aa68a965c67017e6752162d6abc0
  makeTones6 :: [[Data.Phoneme.Tone]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [Data.Phoneme.Tone]
                   Gen.Phoneme.makeTones56
                   Gen.Phoneme.makeTones7) -}
282144844867b8da8301d0ce5542603f
  makeTones60 :: [Data.Phoneme.Tone]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Tone
                   Data.Phoneme.LOWT
                   Gen.Phoneme.makeTones21) -}
3bd402d927de2e6ffdec4409814097cc
  makeTones61 :: [Data.Phoneme.Tone]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Tone
                   Data.Phoneme.FALLT
                   Gen.Phoneme.makeTones62) -}
bf25ed375c86e56db43431c8a97cc425
  makeTones62 :: [Data.Phoneme.Tone]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Tone
                   Data.Phoneme.PEAKT
                   Gen.Phoneme.makeTones22) -}
1bb7a43a8885f22d67fe1a95027928bd
  makeTones63 :: [Data.Phoneme.Tone]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Data.Phoneme.Tone
                   Data.Phoneme.HIGHT
                   Gen.Phoneme.makeTones21) -}
b770d11fa65f53f37116a69f46e94b18
  makeTones7 :: [[Data.Phoneme.Tone]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [Data.Phoneme.Tone]
                   Gen.Phoneme.makeTones53
                   Gen.Phoneme.makeTones8) -}
cce629250b26555c3f5d6e6a157335af
  makeTones8 :: [[Data.Phoneme.Tone]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [Data.Phoneme.Tone]
                   Gen.Phoneme.makeTones50
                   Gen.Phoneme.makeTones9) -}
6d3ebb097cd04dd7ef43200df036eb9b
  makeTones9 :: [[Data.Phoneme.Tone]]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ [Data.Phoneme.Tone]
                   Gen.Phoneme.makeTones47
                   Gen.Phoneme.makeTones10) -}
cd53619cfc3cab3ab8b47d9ca80ecce6
  makeVowels ::
    [Data.Phoneme.Height]
    -> [Data.Phoneme.Backness]
    -> [Data.Phoneme.Roundedness]
    -> [Data.Phoneme.Length]
    -> [Data.Phoneme.Tone]
    -> Data.RVar.RVar [Data.Phoneme.Phoneme]
  {- Arity: 5, Strictness: <L,1*U><L,U><L,U><L,U><L,U>,
     Unfolding: (\ (heights :: [Data.Phoneme.Height])
                   (backs :: [Data.Phoneme.Backness])
                   (rounds :: [Data.Phoneme.Roundedness])
                   (lengths :: [Data.Phoneme.Length])
                   (tones :: [Data.Phoneme.Tone]) ->
                 let {
                   x568 :: [Data.Phoneme.Phoneme]
                   = letrec {
                       go1 :: [Data.Phoneme.Height] -> [Data.Phoneme.Phoneme]
                         {- Arity: 1, Strictness: <S,1*U> -}
                       = \ (ds :: [Data.Phoneme.Height]) ->
                         case ds of wild {
                           [] -> GHC.Types.[] @ Data.Phoneme.Phoneme
                           : y ys
                           -> let {
                                ys1 :: [Data.Phoneme.Phoneme] = go1 ys
                              } in
                              letrec {
                                go2 :: [Data.Phoneme.Backness] -> [Data.Phoneme.Phoneme]
                                  {- Arity: 1, Strictness: <S,1*U> -}
                                = \ (ds1 :: [Data.Phoneme.Backness]) ->
                                  case ds1 of wild1 {
                                    [] -> ys1
                                    : y1 ys2
                                    -> let {
                                         z :: [Data.Phoneme.Phoneme] = go2 ys2
                                       } in
                                       letrec {
                                         go3 :: [Data.Phoneme.Roundedness] -> [Data.Phoneme.Phoneme]
                                           {- Arity: 1, Strictness: <S,1*U> -}
                                         = \ (ds2 :: [Data.Phoneme.Roundedness]) ->
                                           case ds2 of wild2 {
                                             [] -> z
                                             : y2 ys3
                                             -> let {
                                                  z1 :: [Data.Phoneme.Phoneme] = go3 ys3
                                                } in
                                                letrec {
                                                  go4 :: [Data.Phoneme.Length]
                                                         -> [Data.Phoneme.Phoneme]
                                                    {- Arity: 1, Strictness: <S,1*U> -}
                                                  = \ (ds3 :: [Data.Phoneme.Length]) ->
                                                    case ds3 of wild3 {
                                                      [] -> z1
                                                      : y3 ys4
                                                      -> let {
                                                           z2 :: [Data.Phoneme.Phoneme] = go4 ys4
                                                         } in
                                                         letrec {
                                                           go5 :: [Data.Phoneme.Tone]
                                                                  -> [Data.Phoneme.Phoneme]
                                                             {- Arity: 1, Strictness: <S,1*U> -}
                                                           = \ (ds4 :: [Data.Phoneme.Tone]) ->
                                                             case ds4 of wild4 {
                                                               [] -> z2
                                                               : y4 ys5
                                                               -> GHC.Types.:
                                                                    @ Data.Phoneme.Phoneme
                                                                    (Data.Phoneme.Vowel
                                                                       y
                                                                       y1
                                                                       y2
                                                                       y3
                                                                       y4
                                                                       (Gen.Phoneme.retrieveVSymbol
                                                                          y
                                                                          y1
                                                                          y2
                                                                          y3
                                                                          y4))
                                                                    (go5 ys5) }
                                                         } in
                                                         go5 tones }
                                                } in
                                                go4 lengths }
                                       } in
                                       go3 rounds }
                              } in
                              go2 backs }
                     } in
                     go1 heights
                 } in
                 (\ @ b
                    (eta :: [Data.Phoneme.Phoneme] -> b)
                    (eta1 :: forall a1.
                             Control.Monad.Prompt.Lift
                               Data.Random.Source.Internal.Prim.Prim
                               Data.Functor.Identity.Identity
                               a1
                             -> (a1 -> b) -> b) ->
                  case x568 of x569 { DEFAULT -> eta x569 })
                   `cast`
                 (Trans
                      (Sym (Control.Monad.Prompt.N:Prompt[0]
                                <Control.Monad.Prompt.Lift
                                   Data.Random.Source.Internal.Prim.Prim
                                   Data.Functor.Identity.Identity>_R
                                <[Data.Phoneme.Phoneme]>_R))
                      (Trans
                           (Sym (Control.Monad.Prompt.N:PromptT[0]
                                     <Data.Random.Source.Internal.Prim.Prim>_R
                                     <Data.Functor.Identity.Identity>_R))
                           (Sym (Data.RVar.N:RVarT[0]) <Data.Functor.Identity.Identity>_N) <[Data.Phoneme.Phoneme]>_N))) -}
0400017ad998150377ec0cf2be4404ea
  retrieveVSymbol ::
    Data.Phoneme.Height
    -> Data.Phoneme.Backness
    -> Data.Phoneme.Roundedness
    -> Data.Phoneme.Length
    -> Data.Phoneme.Tone
    -> GHC.Base.String
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,U><L,U> -}
"SPEC/Gen.Phoneme $fEq(,) @ Place @ Manner" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                                       Data.Phoneme.Place)
                                                            ($dEq1 :: GHC.Classes.Eq
                                                                        Data.Phoneme.Manner)
  GHC.Classes.$fEq(,) @ Data.Phoneme.Place
                      @ Data.Phoneme.Manner
                      $dEq
                      $dEq1
  = Gen.Phoneme.$s$fEq(,)
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

