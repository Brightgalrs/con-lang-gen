
==================== FINAL INTERFACE ====================
2016-12-21 17:41:43.961707 UTC

interface con-lang-gen-0.0.0.1-JpecSLrjfNmG1CUMEdSr39:Gen.Morphology 8001
  interface hash: fa819d7507df9d285296cace14a65855
  ABI hash: 3b65e69a4ca803f3d8f7ba4f9964cd06
  export-list hash: 75616a0bc3467e620c5b8decff64d75a
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: fbb7bb6b86ae8faca780181c3078ce45
  sig of: Nothing
  used TH splices: False
  where
exports:
  Gen.Morphology.cleanGrammarSys
  Gen.Morphology.makeLexicalInflection
module dependencies: Data.Grammar Data.Inflection Data.Other
                     Data.Phoneme Gen.Inflection Gen.Phoneme Gen.Phonotactics Gen.Root
                     LoadStuff
package dependencies: MonadPrompt-1.0.0.5@MonadPrompt-1.0.0.5-DSJ4febv4ITH7w1gOjdDZE
                      MonadRandom-0.4.2.3@MonadRandom-0.4.2.3-8TfCm6PGvGYB7omozORhov
                      array-0.5.1.1@array-0.5.1.1 base-4.9.0.0
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      erf-2.0.0.0@erf-2.0.0.0-9HTdBV7htNjASgIJAT55AC
                      flexible-defaults-0.0.1.2@flexible-defaults-0.0.1.2-1H2pkAjuTF1KghZBVsL2zl
                      ghc-boot-th-8.0.1@ghc-boot-th-8.0.1 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
                      math-functions-0.2.1.0@math-functions-0.2.1.0-JE0wcV77zWeIiF13ulGtAh
                      mersenne-random-pure64-0.2.0.5@mersenne-random-pure64-0.2.0.5-F5a2mcFFCTQJXAM4TYDSBs
                      monad-loops-0.4.3@monad-loops-0.4.3-1xZFtRVMQPC4X8bjTBWqNi
                      mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM
                      mwc-random-0.13.5.0@mwc-random-0.13.5.0-LMmPnBqFcyXKNTZwO31mEb
                      old-locale-1.0.0.7@old-locale-1.0.0.7-6glXNhHF891B41ZfuI8hU8
                      old-time-1.1.0.3@old-time-1.1.0.3-IcvdkJUsE9M8t3io8peAEp
                      pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa
                      random-1.1@random-1.1-54KmMHXjttlERYcr1mvsAe
                      random-extras-0.19@random-extras-0.19-CVrKkFX7Wr28Gjqnh35lrd
                      random-fu-0.2.7.0@random-fu-0.2.7.0-CQ0Lr6a3wRjKfR0NneZKnx
                      random-shuffle-0.0.4@random-shuffle-0.0.4-LfeDYNPfwrQ2o9p6tw2M9l
                      random-source-0.3.0.6@random-source-0.3.0.6-9Kd6KhtNNMs92HTzA5obc8
                      rvar-0.2.0.3@rvar-0.2.0.3-830TjBaI3UX5PWiddvPaWF
                      stateref-0.3@stateref-0.3-3PlselgQchu2fixnOT7uWq
                      stm-2.4.4.1@stm-2.4.4.1-4z2NRWnB0NIIUvSJsHW0kF
                      syb-0.6@syb-0.6-C65vWCsht6A8uLstpQIXyj template-haskell-2.11.0.0
                      th-extras-0.0.0.4@th-extras-0.0.0.4-65k7Dg54W2KxpzDoCAUbA
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
                      vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6
orphans: MonadRandom-0.4.2.3@MonadRandom-0.4.2.3-8TfCm6PGvGYB7omozORhov:Control.Monad.Random
         base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         con-lang-gen-0.0.0.1-JpecSLrjfNmG1CUMEdSr39:Data.Inflection
         mersenne-random-pure64-0.2.0.5@mersenne-random-pure64-0.2.0.5-F5a2mcFFCTQJXAM4TYDSBs:System.Random.Mersenne.Pure64
         random-source-0.3.0.6@random-source-0.3.0.6-9Kd6KhtNNMs92HTzA5obc8:Data.Random.Source
         random-source-0.3.0.6@random-source-0.3.0.6-9Kd6KhtNNMs92HTzA5obc8:Data.Random.Source.IO
         random-source-0.3.0.6@random-source-0.3.0.6-9Kd6KhtNNMs92HTzA5obc8:Data.Random.Source.MWC
         random-source-0.3.0.6@random-source-0.3.0.6-9Kd6KhtNNMs92HTzA5obc8:Data.Random.Source.PureMT
         random-source-0.3.0.6@random-source-0.3.0.6-9Kd6KhtNNMs92HTzA5obc8:Data.Random.Source.StdGen
         stateref-0.3@stateref-0.3-3PlselgQchu2fixnOT7uWq:Data.StateRef.Instances
         stateref-0.3@stateref-0.3-3PlselgQchu2fixnOT7uWq:Data.StateRef.Instances.STM
         stm-2.4.4.1@stm-2.4.4.1-4z2NRWnB0NIIUvSJsHW0kF:Control.Monad.STM
         syb-0.6@syb-0.6-C65vWCsht6A8uLstpQIXyj:Data.Generics.Instances
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Fusion.Bundle
         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Unboxed
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.1@ghc-boot-th-8.0.1:GHC.LanguageExtensions.Type
                         math-functions-0.2.1.0@math-functions-0.2.1.0-JE0wcV77zWeIiF13ulGtAh:Numeric.RootFinding
                         mwc-random-0.13.5.0@mwc-random-0.13.5.0-LMmPnBqFcyXKNTZwO31mEb:System.Random.MWC
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa:Control.Monad.Primitive
                         template-haskell-2.11.0.0:Language.Haskell.TH.Syntax
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Primitive
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Unboxed
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Unboxed.Base
import  -/  base-4.9.0.0:Control.Monad 7767aebfd53f0b584cef2fe66ad3986c
import  -/  base-4.9.0.0:Data.Foldable 8aeb682f6c74f97fcf0ace0d608a43ea
import  -/  base-4.9.0.0:Data.Functor 6fc476505db88d678632a4a838125f13
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:GHC.Num 48f506a8f4ecf06285d0a0706594dcc0
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  Data.Grammar e3bdf85eebd04aee9ead3a06df4aad28
  exports: 0062e624f7e52b2eec78ca7e68e0f617
import  -/  Data.Inflection f266f0dbc95b0bc603741fea34af6d4b
  exports: 3959414e78500c5c160744df7b5d22d7
  Animacy 1f555085a72acd0be7c2a6de830d5d03
  Aspect 73f9fcce4a2a405b233176b51f525cb2
  Case 476440af125c1822cd0b767cc8ac9f95
  Definiteness 1de448f2aa68251f2e0f9da9901aa214
  Evidentiality 18aae8850f4e0825a5c83b6a39cdd02c
  Express 5b9a30e57907153c9d73916e653e1523
  Express 215fe38755b3229d5abb86dd2bfcfba2
  Gender 8099e7e810494d6db288b5ee6338a850
  Honorific fb068a739b47969783c008d0c5ccdfb8
  InflectionSystem 4d85e0faa8b64608c6b72704c2fa6a55
  LexCat ae7b63f8f02a08f901ccdfd454a411ac
  Manifest db16baca5a5ac6cca78d6394672bf28b
  Manifest 7ddf4c335f657c49b9e10fc56a6bbdf0
  ManifestSystem 09abdffa07215df3f31d690df29bcb1e
  ManifestSystem bbcb171ae6dead0cd5095e2d02b10d22
  ManifestType e80d8f471552e307f8ce67ea59e61dde
  Mood 72dcb6eb4442b59226b0ba8f6714f13e
  NoExpress 676d50f85f9d9eb78082cdcfaafad173
  NoManifest 7a3af5f4d574b9acc62f1eec06c97f74
  Number 7465cc747c74e065f91b84b3f135a27f
  Particle 2fa5cb80a24f5e646f936d04ea2f3db9
  Person 45fed2402e7ed2b24c1d66ccdfd878c7
  Polarity 1c2c61816b840e25aed576544ed551f7
  Prefix d2dd02b340fd8373cb43a40ab82f9f2c
  Specificity 160b967a8965f1dbfdfeda3e8d2f734a
  Suffix 36323275ad7faf274e168f817b713186
  Tense 66acf52fe96ad50a10594fa2d12d699d
  Topic f6776b7675319519d06c9aea2dc03bf9
  Transitivity 7302fbe55b71c04bf146a8a39e883cde
  Voice 82e4499831c335865b73c47901c341b5
  Volition 637cf4191464029f30da46ab81b77985
  aniSys 79a2b46a74c5e9ae76d8c7634583213b
  aspSys 7ea174a878cf4cc3f4ccad891d2c4ce2
  casSys 96d7cbb903d2b6e71868d12838ba0d70
  defSys dc152fde80a2e6f012cf4cad582a2732
  eviSys ba916281d5929eaf21b2b4dbc19fd461
  genSys ea995e3825971508f2aef47b7550c556
  honSys 9dcd5fdd3f0dd4ebf99c95af86399d6d
  mooSys df674e58ca0ddd582eb68a75885f07bb
  numSys 6f1d055c7fee29154991fce9f0ddc2d4
  perSys 8261318a5d413dda1b6ecd848164a496
  polSys 85fed7288f15cf731822518b2d41374b
  speSys 5917e534ba91b2cc97198856ad200b98
  tenSys bf08155923431e8d2e27a195481f9cdb
  topSys 30e34761aee375966b983c6f27c8f9dc
  traSys da6fafe1dba73683286fe8af7a6970ef
  voiSys 1705c258669e74d07b6e1c6313b0b585
  volSys bc0df6fcb6268478bd400fea067efb89
import  -/  Data.Phoneme 8d8abfca47f36976b4a493acc97ddf5b
  exports: cf7e229a8d1eca731bf27cf39a54d5d4
  Phoneme 83c67fc806e8317ebba4d84ed8aa040f
import  -/  Gen.Inflection ac2770df30eb1a0e46f7f2b6e6f75030
  exports: e7ed9441a53677d9287a575084d644d0
import  -/  Gen.Root 2f6973edeeaa7ea140ce1a3c16717f63
  exports: 73bba0b11e990f01b3d2fe93a1689683
  makeRoot 905f32e4229126cf456dbf4331be9091
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  random-extras-0.19@random-extras-0.19-CVrKkFX7Wr28Gjqnh35lrd:Data.Random.Extras 29c24169732e6d9b861a3e34bb12d853
import  -/  random-fu-0.2.7.0@random-fu-0.2.7.0-CQ0Lr6a3wRjKfR0NneZKnx:Data.Random 8883d063189e353ce779cba72d37ba19
import  -/  rvar-0.2.0.3@rvar-0.2.0.3-830TjBaI3UX5PWiddvPaWF:Data.RVar af4b152c68035decd69925a9162e78b3
280f6bfd8018ebf68d65724b732b52a0
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Gen.Morphology.$trModule2
                   Gen.Morphology.$trModule1) -}
4a3768bb2388bb81775ebc59d01b80db
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Gen.Morphology"#) -}
0fb44eaeeac9defa0b939d46e47ca6ca
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "con-lang-gen-0.0.0.1-JpecSLrjfNmG1CUMEdSr39"#) -}
232618e8ed5b3d4ba3396580f4207d0b
  $wmakeLexicalInflection ::
    [Data.Phoneme.Phoneme]
    -> [[Data.Phoneme.Phoneme]]
    -> Data.Inflection.InflectionSystem
    -> Data.Inflection.LexCat
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> Data.RVar.RVar
         (Data.Inflection.LexCat, [Data.Inflection.ManifestSystem],
          [Data.Inflection.ManifestSystem], [Data.Inflection.ManifestSystem])
  {- Arity: 7,
     Strictness: <L,U><L,U><L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U><L,1*U(U)><L,1*U(U)><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (w :: [Data.Phoneme.Phoneme])
                   (w1 :: [[Data.Phoneme.Phoneme]])
                   (w2 :: Data.Inflection.InflectionSystem)
                   (ww :: Data.Inflection.LexCat)
                   (ww1 :: GHC.Types.Int)
                   (ww2 :: GHC.Types.Int)
                   (ww3 :: GHC.Types.Int) ->
                 let {
                   m1 :: Data.RVar.RVarT
                           Data.Functor.Identity.Identity [Data.Inflection.ManifestSystem]
                   = case ww1 of ww4 { GHC.Types.I# ww5 ->
                     Gen.Morphology.$wmakeParticleSystems ww ww5 w w1 w2 }
                 } in
                 let {
                   m2 :: Data.RVar.RVarT
                           Data.Functor.Identity.Identity [Data.Inflection.ManifestSystem]
                   = case ww2 of ww4 { GHC.Types.I# ww5 ->
                     Gen.Morphology.$wmakePrefixSystems ww ww5 w w1 w2 }
                 } in
                 let {
                   m4 :: Data.RVar.RVarT
                           Data.Functor.Identity.Identity [Data.Inflection.ManifestSystem]
                   = case ww3 of ww4 { GHC.Types.I# ww5 ->
                     Gen.Morphology.$wmakeSuffixSystems ww ww5 w w1 w2 }
                 } in
                 (\ @ b1
                    (eta :: (Data.Inflection.LexCat, [Data.Inflection.ManifestSystem],
                             [Data.Inflection.ManifestSystem], [Data.Inflection.ManifestSystem])
                            -> b1)
                    (eta1 :: forall a1.
                             Control.Monad.Prompt.Lift
                               Data.Random.Source.Internal.Prim.Prim
                               Data.Functor.Identity.Identity
                               a1
                             -> (a1 -> b1) -> b1) ->
                  m1
                    `cast`
                  (Trans
                       (Trans
                            (Data.RVar.N:RVarT[0] <Data.Functor.Identity.Identity>_N)
                            (Control.Monad.Prompt.N:PromptT[0]
                                 <Data.Random.Source.Internal.Prim.Prim>_R
                                 <Data.Functor.Identity.Identity>_R) <[Data.Inflection.ManifestSystem]>_N)
                       (Control.Monad.Prompt.N:Prompt[0]
                            <Control.Monad.Prompt.Lift
                               Data.Random.Source.Internal.Prim.Prim
                               Data.Functor.Identity.Identity>_R
                            <[Data.Inflection.ManifestSystem]>_R))
                    @ b1
                    (\ (x :: [Data.Inflection.ManifestSystem]) ->
                     case x of x1 { DEFAULT ->
                     m2
                       `cast`
                     (Trans
                          (Trans
                               (Data.RVar.N:RVarT[0] <Data.Functor.Identity.Identity>_N)
                               (Control.Monad.Prompt.N:PromptT[0]
                                    <Data.Random.Source.Internal.Prim.Prim>_R
                                    <Data.Functor.Identity.Identity>_R) <[Data.Inflection.ManifestSystem]>_N)
                          (Control.Monad.Prompt.N:Prompt[0]
                               <Control.Monad.Prompt.Lift
                                  Data.Random.Source.Internal.Prim.Prim
                                  Data.Functor.Identity.Identity>_R
                               <[Data.Inflection.ManifestSystem]>_R))
                       @ b1
                       (\ (x2 :: [Data.Inflection.ManifestSystem]) ->
                        case x2 of x3 { DEFAULT ->
                        m4
                          `cast`
                        (Trans
                             (Trans
                                  (Data.RVar.N:RVarT[0] <Data.Functor.Identity.Identity>_N)
                                  (Control.Monad.Prompt.N:PromptT[0]
                                       <Data.Random.Source.Internal.Prim.Prim>_R
                                       <Data.Functor.Identity.Identity>_R) <[Data.Inflection.ManifestSystem]>_N)
                             (Control.Monad.Prompt.N:Prompt[0]
                                  <Control.Monad.Prompt.Lift
                                     Data.Random.Source.Internal.Prim.Prim
                                     Data.Functor.Identity.Identity>_R
                                  <[Data.Inflection.ManifestSystem]>_R))
                          @ b1
                          (\ (x4 :: [Data.Inflection.ManifestSystem]) ->
                           case x4 of x5 { DEFAULT -> eta (ww, x1, x3, x5) })
                          eta1 })
                       eta1 })
                    eta1)
                   `cast`
                 (Trans
                      (Sym (Control.Monad.Prompt.N:Prompt[0]
                                <Control.Monad.Prompt.Lift
                                   Data.Random.Source.Internal.Prim.Prim
                                   Data.Functor.Identity.Identity>_R
                                <(Data.Inflection.LexCat, [Data.Inflection.ManifestSystem],
                                  [Data.Inflection.ManifestSystem],
                                  [Data.Inflection.ManifestSystem])>_R))
                      (Trans
                           (Sym (Control.Monad.Prompt.N:PromptT[0]
                                     <Data.Random.Source.Internal.Prim.Prim>_R
                                     <Data.Functor.Identity.Identity>_R))
                           (Sym (Data.RVar.N:RVarT[0]) <Data.Functor.Identity.Identity>_N) <(Data.Inflection.LexCat,
                                                                                             [Data.Inflection.ManifestSystem],
                                                                                             [Data.Inflection.ManifestSystem],
                                                                                             [Data.Inflection.ManifestSystem])>_N))) -}
faaf4d75a48acc6c0009cfd9ac6b2881
  $wmakeParticleSystems ::
    Data.Inflection.LexCat
    -> GHC.Prim.Int#
    -> [Data.Phoneme.Phoneme]
    -> [[Data.Phoneme.Phoneme]]
    -> Data.Inflection.InflectionSystem
    -> Data.RVar.RVar [Data.Inflection.ManifestSystem]
  {- Arity: 5,
     Strictness: <L,U><S,U><L,U><L,U><L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: [0] -}
d28571439979334d146b3eea244f6044
  $wmakePrefixSystems ::
    Data.Inflection.LexCat
    -> GHC.Prim.Int#
    -> [Data.Phoneme.Phoneme]
    -> [[Data.Phoneme.Phoneme]]
    -> Data.Inflection.InflectionSystem
    -> Data.RVar.RVar [Data.Inflection.ManifestSystem]
  {- Arity: 5,
     Strictness: <L,U><S,U><L,U><L,U><L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: [0] -}
6d2ed63e8db6e77ed25080d1edd8f7ef
  $wmakeSuffixSystems ::
    Data.Inflection.LexCat
    -> GHC.Prim.Int#
    -> [Data.Phoneme.Phoneme]
    -> [[Data.Phoneme.Phoneme]]
    -> Data.Inflection.InflectionSystem
    -> Data.RVar.RVar [Data.Inflection.ManifestSystem]
  {- Arity: 5,
     Strictness: <L,U><S,U><L,U><L,U><L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: [0] -}
cbbb959f65fa35bd7529fc3e8667b339
  cleanGrammarSys ::
    Data.Inflection.InflectionSystem
    -> Data.Inflection.LexCat
    -> Data.Inflection.ManifestType
    -> GHC.Types.Int
    -> ([Data.Inflection.Express Data.Inflection.Gender],
        [Data.Inflection.Express Data.Inflection.Animacy],
        [Data.Inflection.Express Data.Inflection.Case],
        [Data.Inflection.Express Data.Inflection.Number],
        [Data.Inflection.Express Data.Inflection.Definiteness],
        [Data.Inflection.Express Data.Inflection.Specificity],
        [Data.Inflection.Express Data.Inflection.Topic],
        [Data.Inflection.Express Data.Inflection.Person],
        [Data.Inflection.Express Data.Inflection.Honorific],
        [Data.Inflection.Express Data.Inflection.Polarity],
        [Data.Inflection.Express Data.Inflection.Tense],
        [Data.Inflection.Express Data.Inflection.Aspect],
        [Data.Inflection.Express Data.Inflection.Mood],
        [Data.Inflection.Express Data.Inflection.Voice],
        [Data.Inflection.Express Data.Inflection.Evidentiality],
        [Data.Inflection.Express Data.Inflection.Transitivity],
        [Data.Inflection.Express Data.Inflection.Volition])
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)><L,U><L,U><L,U(U)> -}
769d97c7dde7e30fcccba0c2069fdfb8
  makeLexicalInflection ::
    [Data.Phoneme.Phoneme]
    -> [[Data.Phoneme.Phoneme]]
    -> Data.Inflection.InflectionSystem
    -> (Data.Inflection.LexCat, GHC.Types.Int, GHC.Types.Int,
        GHC.Types.Int)
    -> Data.RVar.RVar
         (Data.Inflection.LexCat, [Data.Inflection.ManifestSystem],
          [Data.Inflection.ManifestSystem], [Data.Inflection.ManifestSystem])
  {- Arity: 4,
     Strictness: <L,U><L,U><L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U(U,1*U(U),1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: [Data.Phoneme.Phoneme])
                   (w1 :: [[Data.Phoneme.Phoneme]])
                   (w2 :: Data.Inflection.InflectionSystem)
                   (w3 :: (Data.Inflection.LexCat, GHC.Types.Int, GHC.Types.Int,
                           GHC.Types.Int)) ->
                 case w3 of ww { (,,,) ww1 ww2 ww3 ww4 ->
                 Gen.Morphology.$wmakeLexicalInflection
                   w
                   w1
                   w2
                   ww1
                   ww2
                   ww3
                   ww4 }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

