
==================== FINAL INTERFACE ====================
2016-12-21 17:41:26.615237 UTC

interface con-lang-gen-0.0.0.1-JpecSLrjfNmG1CUMEdSr39:Data.Other 8001
  interface hash: 69da32db3dcb20cddbfaddb4f6bf99b3
  ABI hash: ca3d75b7f17df1a823d9bed122472296
  export-list hash: a3d527128309076dcf1ad037267b56af
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 87177015adbaa5bcec08b7699971b9b7
  sig of: Nothing
  used TH splices: False
  where
exports:
  Data.Other.SyllWord{Data.Other.SyllWord}
  Data.Other.Syllable{Data.Other.Syllable getCoda getNucleus getOnset}
module dependencies: Data.Phoneme
package dependencies: base-4.9.0.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.Read 817c914615ac8e308afc0c675fb3f671
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  base-4.9.0.0:Text.ParserCombinators.ReadPrec 9512e2f4b227f507f87a150887202aed
import  -/  base-4.9.0.0:Text.Read.Lex fe3dd7b823826bf6870140c5363f9596
import  -/  Data.Phoneme 8d8abfca47f36976b4a493acc97ddf5b
  exports: cf7e229a8d1eca731bf27cf39a54d5d4
  Phoneme 83c67fc806e8317ebba4d84ed8aa040f
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
dde7d8f003864d169d7d8c03a632306b
  $fEqSyllWord :: GHC.Classes.Eq Data.Other.SyllWord
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Other.SyllWord
                  Data.Other.$fEqSyllWord_$c==
                  Data.Other.$fEqSyllWord_$c/= -}
dde7d8f003864d169d7d8c03a632306b
  $fEqSyllWord_$c/= ::
    Data.Other.SyllWord -> Data.Other.SyllWord -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Data.Other.SyllWord) (b :: Data.Other.SyllWord) ->
                 case a of wild { Data.Other.SyllWord a1 ->
                 case b of wild1 { Data.Other.SyllWord b1 ->
                 case GHC.Classes.$fEq[]_$c==
                        @ Data.Other.Syllable
                        Data.Other.$fEqSyllable
                        a1
                        b1 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
dde7d8f003864d169d7d8c03a632306b
  $fEqSyllWord_$c== ::
    Data.Other.SyllWord -> Data.Other.SyllWord -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Data.Other.SyllWord) (ds1 :: Data.Other.SyllWord) ->
                 case ds of wild { Data.Other.SyllWord a1 ->
                 case ds1 of wild1 { Data.Other.SyllWord b1 ->
                 GHC.Classes.$fEq[]_$c==
                   @ Data.Other.Syllable
                   Data.Other.$fEqSyllable
                   a1
                   b1 } }) -}
1040feab8e4745824f62065870bfd393
  $fEqSyllable :: GHC.Classes.Eq Data.Other.Syllable
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Other.Syllable
                  Data.Other.$fEqSyllable_$c==
                  Data.Other.$fEqSyllable_$c/= -}
1040feab8e4745824f62065870bfd393
  $fEqSyllable_$c/= ::
    Data.Other.Syllable -> Data.Other.Syllable -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U,1*U,1*U)><S(SLL),1*U(1*U,1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Data.Other.Syllable) (b :: Data.Other.Syllable) ->
                 case Data.Other.$fEqSyllable_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
1040feab8e4745824f62065870bfd393
  $fEqSyllable_$c== ::
    Data.Other.Syllable -> Data.Other.Syllable -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U,1*U,1*U)><S(SLL),1*U(1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Data.Other.Syllable) (w1 :: Data.Other.Syllable) ->
                 case w of ww { Data.Other.Syllable ww1 ww2 ww3 ->
                 case w1 of ww4 { Data.Other.Syllable ww5 ww6 ww7 ->
                 Data.Other.$w$c== ww1 ww2 ww3 ww5 ww6 ww7 } }) -}
dde7d8f003864d169d7d8c03a632306b
  $fReadSyllWord :: GHC.Read.Read Data.Other.SyllWord
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Other.SyllWord
                  Data.Other.$fReadSyllWord_$creadsPrec
                  Data.Other.$fReadSyllWord_$creadList
                  Data.Other.$fReadSyllWord_$creadPrec
                  Data.Other.$fReadSyllWord_$creadListPrec -}
dde7d8f003864d169d7d8c03a632306b
  $fReadSyllWord1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Data.Other.SyllWord] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [Data.Other.SyllWord]
                            -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.$wlist
                   @ Data.Other.SyllWord
                   Data.Other.$fReadSyllWord2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Data.Other.SyllWord>_R))
                   @ b
                   eta1) -}
dde7d8f003864d169d7d8c03a632306b
  $fReadSyllWord2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Data.Other.SyllWord
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ Data.Other.SyllWord
                   Data.Other.$fReadSyllWord3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <Data.Other.SyllWord>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <Data.Other.SyllWord>_R)))) -}
dde7d8f003864d169d7d8c03a632306b
  $fReadSyllWord3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Data.Other.SyllWord -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (w1 :: Data.Other.SyllWord -> Text.ParserCombinators.ReadP.P b) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Data.Other.$w$creadPrec ww1 @ b w1 }) -}
fcaf20fb7454216e91f8ff1f17b2fb78
  $fReadSyllWord4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SyllWord"#) -}
1040feab8e4745824f62065870bfd393
  $fReadSyllWord5 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Data.Other.Syllable
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ Data.Other.Syllable
                   Data.Other.$fReadSyllWord6
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <Data.Other.Syllable>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <Data.Other.Syllable>_R)))) -}
1040feab8e4745824f62065870bfd393
  $fReadSyllWord6 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Data.Other.Syllable -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (w1 :: Data.Other.Syllable -> Text.ParserCombinators.ReadP.P b) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Data.Other.$w$creadPrec1 ww1 @ b w1 }) -}
dde7d8f003864d169d7d8c03a632306b
  $fReadSyllWord7 ::
    Text.ParserCombinators.ReadP.P [Data.Other.SyllWord]
  {- Unfolding: (GHC.Read.$wlist
                   @ Data.Other.SyllWord
                   Data.Other.$fReadSyllWord2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Data.Other.SyllWord>_R))
                   @ [Data.Other.SyllWord]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [Data.Other.SyllWord])) -}
dde7d8f003864d169d7d8c03a632306b
  $fReadSyllWord_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [Data.Other.SyllWord]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [Data.Other.SyllWord]
                   Data.Other.$fReadSyllWord7) -}
dde7d8f003864d169d7d8c03a632306b
  $fReadSyllWord_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [Data.Other.SyllWord]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Data.Other.$fReadSyllWord1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[Data.Other.SyllWord]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[Data.Other.SyllWord]>_R))) -}
dde7d8f003864d169d7d8c03a632306b
  $fReadSyllWord_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec Data.Other.SyllWord
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Data.Other.$fReadSyllWord2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <Data.Other.SyllWord>_R)) -}
dde7d8f003864d169d7d8c03a632306b
  $fReadSyllWord_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS Data.Other.SyllWord
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ Data.Other.SyllWord
                   ((GHC.Read.$fReadDouble10
                       @ Data.Other.SyllWord
                       Data.Other.$fReadSyllWord3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <Data.Other.SyllWord>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <Data.Other.SyllWord>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <Data.Other.SyllWord>_R)
                      @ Data.Other.SyllWord
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ Data.Other.SyllWord))) -}
1040feab8e4745824f62065870bfd393
  $fReadSyllable :: GHC.Read.Read Data.Other.Syllable
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Other.Syllable
                  Data.Other.$fReadSyllable_$creadsPrec
                  Data.Other.$fReadSyllable_$creadList
                  Data.Other.$fReadSyllable_$creadPrec
                  Data.Other.$fReadSyllable_$creadListPrec -}
1040feab8e4745824f62065870bfd393
  $fReadSyllable1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Data.Other.Syllable] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [Data.Other.Syllable]
                            -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.$wlist
                   @ Data.Other.Syllable
                   Data.Other.$fReadSyllWord5
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Data.Other.Syllable>_R))
                   @ b
                   eta1) -}
1040feab8e4745824f62065870bfd393
  $fReadSyllable2 ::
    Text.ParserCombinators.ReadP.P [Data.Other.Syllable]
  {- Unfolding: (GHC.Read.$wlist
                   @ Data.Other.Syllable
                   Data.Other.$fReadSyllWord5
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Data.Other.Syllable>_R))
                   @ [Data.Other.Syllable]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [Data.Other.Syllable])) -}
1040feab8e4745824f62065870bfd393
  $fReadSyllable_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [Data.Other.Syllable]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [Data.Other.Syllable]
                   Data.Other.$fReadSyllable2) -}
1040feab8e4745824f62065870bfd393
  $fReadSyllable_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [Data.Other.Syllable]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Data.Other.$fReadSyllable1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[Data.Other.Syllable]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[Data.Other.Syllable]>_R))) -}
1040feab8e4745824f62065870bfd393
  $fReadSyllable_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec Data.Other.Syllable
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Data.Other.$fReadSyllWord5
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <Data.Other.Syllable>_R)) -}
1040feab8e4745824f62065870bfd393
  $fReadSyllable_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS Data.Other.Syllable
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ Data.Other.Syllable
                   ((GHC.Read.$fReadDouble10
                       @ Data.Other.Syllable
                       Data.Other.$fReadSyllWord6
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <Data.Other.Syllable>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <Data.Other.Syllable>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <Data.Other.Syllable>_R)
                      @ Data.Other.Syllable
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ Data.Other.Syllable))) -}
dde7d8f003864d169d7d8c03a632306b
  $fShowSyllWord :: GHC.Show.Show Data.Other.SyllWord
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Other.SyllWord
                  Data.Other.$fShowSyllWord_$cshowsPrec
                  Data.Other.$fShowSyllWord_$cshow
                  Data.Other.$fShowSyllWord_$cshowList -}
dde7d8f003864d169d7d8c03a632306b
  $fShowSyllWord1 :: Data.Other.SyllWord -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Data.Other.SyllWord) (w1 :: GHC.Base.String) ->
                 case w of ww { Data.Other.SyllWord ww1 ->
                 Data.Other.$w$cshowsPrec 0# ww1 w1 }) -}
1040feab8e4745824f62065870bfd393
  $fShowSyllWord2 :: Data.Other.Syllable -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Data.Other.Syllable) (w1 :: GHC.Base.String) ->
                 case w of ww { Data.Other.Syllable ww1 ww2 ww3 ->
                 Data.Other.$w$cshowsPrec1 0# ww1 ww2 ww3 w1 }) -}
d98900bcae440630cbca8555d413aa4a
  $fShowSyllWord3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SyllWord "#) -}
dde7d8f003864d169d7d8c03a632306b
  $fShowSyllWord_$cshow :: Data.Other.SyllWord -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Other.SyllWord) ->
                 case x of wild { Data.Other.SyllWord b1 ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n Data.Other.$fShowSyllWord3)
                   (GHC.Show.showList__
                      @ Data.Other.Syllable
                      Data.Other.$fShowSyllWord2
                      b1
                      (GHC.Types.[] @ GHC.Types.Char)) }) -}
dde7d8f003864d169d7d8c03a632306b
  $fShowSyllWord_$cshowList ::
    [Data.Other.SyllWord] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Data.Other.SyllWord
                   Data.Other.$fShowSyllWord1) -}
dde7d8f003864d169d7d8c03a632306b
  $fShowSyllWord_$cshowsPrec ::
    GHC.Types.Int -> Data.Other.SyllWord -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Data.Other.SyllWord)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Data.Other.SyllWord ww3 ->
                 Data.Other.$w$cshowsPrec ww1 ww3 w2 } }) -}
1040feab8e4745824f62065870bfd393
  $fShowSyllable :: GHC.Show.Show Data.Other.Syllable
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Other.Syllable
                  Data.Other.$fShowSyllable_$cshowsPrec
                  Data.Other.$fShowSyllable_$cshow
                  Data.Other.$fShowSyllable_$cshowList -}
1040feab8e4745824f62065870bfd393
  $fShowSyllable_$cshow :: Data.Other.Syllable -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Other.Syllable) ->
                 Data.Other.$fShowSyllable_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
1040feab8e4745824f62065870bfd393
  $fShowSyllable_$cshowList ::
    [Data.Other.Syllable] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Data.Other.Syllable
                   Data.Other.$fShowSyllWord2) -}
1040feab8e4745824f62065870bfd393
  $fShowSyllable_$cshowsPrec ::
    GHC.Types.Int -> Data.Other.Syllable -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U,1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Data.Other.Syllable)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Data.Other.Syllable ww3 ww4 ww5 ->
                 Data.Other.$w$cshowsPrec1 ww1 ww3 ww4 ww5 w2 } }) -}
87ad400a50071da27edace6bcc088eec
  $tc'SyllWord :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8407651469271663602##
                   8048294486313463540##
                   Data.Other.$trModule
                   Data.Other.$tc'SyllWord1) -}
a99f651d3afdb2d2aba3f94d83e83219
  $tc'SyllWord1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'SyllWord"#) -}
5063bb7c484ee7824d43f5e454062dc7
  $tc'Syllable :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9590235475477524652##
                   8102808554607374872##
                   Data.Other.$trModule
                   Data.Other.$tc'Syllable1) -}
ed4f766913363bbdc66b1f0254fd0305
  $tc'Syllable1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Syllable"#) -}
345eef37fc45581d4b4751ed295e3ed6
  $tcSyllWord :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4769505196493333368##
                   15868555881387166884##
                   Data.Other.$trModule
                   Data.Other.$tcSyllWord1) -}
90cafef32c217697eb33b1b0d72e3417
  $tcSyllWord1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "SyllWord"#) -}
9677587328f9dcd23253be559d61edd0
  $tcSyllable :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9795766934735219207##
                   17741577981562865831##
                   Data.Other.$trModule
                   Data.Other.$tcSyllable1) -}
31f1cfc9b36c1cf8ed9946e17bf0f693
  $tcSyllable1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Syllable"#) -}
3e958155cb32404eace90cdf982ba035
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Data.Other.$trModule2
                   Data.Other.$trModule1) -}
813d97ceb0f351dcf9f8c1a842cd4089
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Data.Other"#) -}
7e2ce6001eb4bbaf14b4c53702bb30cd
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "con-lang-gen-0.0.0.1-JpecSLrjfNmG1CUMEdSr39"#) -}
07f82be9107a7d17b8b089efd4ed0467
  $w$c== ::
    [Data.Phoneme.Phoneme]
    -> Data.Phoneme.Phoneme
    -> [Data.Phoneme.Phoneme]
    -> [Data.Phoneme.Phoneme]
    -> Data.Phoneme.Phoneme
    -> [Data.Phoneme.Phoneme]
    -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: [Data.Phoneme.Phoneme])
                   (ww1 :: Data.Phoneme.Phoneme)
                   (ww2 :: [Data.Phoneme.Phoneme])
                   (ww3 :: [Data.Phoneme.Phoneme])
                   (ww4 :: Data.Phoneme.Phoneme)
                   (ww5 :: [Data.Phoneme.Phoneme]) ->
                 case GHC.Classes.$fEq[]_$c==
                        @ Data.Phoneme.Phoneme
                        Data.Phoneme.$fEqPhoneme
                        ww
                        ww3 of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case Data.Phoneme.$fEqPhoneme_$c== ww1 ww4 of wild1 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> GHC.Classes.$fEq[]_$c==
                             @ Data.Phoneme.Phoneme
                             Data.Phoneme.$fEqPhoneme
                             ww2
                             ww5 } }) -}
dde7d8f003864d169d7d8c03a632306b
  $w$creadPrec ::
    GHC.Prim.Int#
    -> forall b.
       (Data.Other.SyllWord -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,U><L,C(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   @ b
                   (w :: Data.Other.SyllWord -> Text.ParserCombinators.ReadP.P b) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 10#) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> let {
                        lvl80 :: Text.ParserCombinators.ReadP.P b
                        = let {
                            lvl81 :: Text.ParserCombinators.ReadP.P b
                            = GHC.Read.$wlist
                                @ Data.Other.Syllable
                                Data.Other.$fReadSyllWord5
                                  `cast`
                                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                          <Data.Other.Syllable>_R))
                                @ b
                                (\ (a1 :: [Data.Other.Syllable]) -> w (Data.Other.SyllWord a1))
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ (a1 :: Text.Read.Lex.Lexeme) ->
                             case a1 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a2
                               -> case GHC.Base.eqString a2 Data.Other.$fReadSyllWord4 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl81 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                             Unfolding: InlineRule (1, True, True) (\ (w4 :: ()) -> lvl80) -}
                        = \ (w4 :: ()) -> lvl80
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ (a :: GHC.Base.String) ->
                         (Text.ParserCombinators.ReadP.skipSpaces_skip a)
                           `cast`
                         (Text.ParserCombinators.ReadP.N:ReadP[0] <()>_R)
                           @ b
                           k) }) -}
1040feab8e4745824f62065870bfd393
  $w$creadPrec1 ::
    GHC.Prim.Int#
    -> forall b.
       (Data.Other.Syllable -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,U><L,C(U)>, Inline: [0] -}
daf86a053c5091d5f095e96dac16b29c
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> [Data.Other.Syllable] -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: [Data.Other.Syllable])
                   (w :: GHC.Base.String) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Data.Other.$fShowSyllWord3
                        (GHC.Show.showList__
                           @ Data.Other.Syllable
                           Data.Other.$fShowSyllWord2
                           ww1
                           w)
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Data.Other.$fShowSyllWord3
                           (GHC.Show.showList__
                              @ Data.Other.Syllable
                              Data.Other.$fShowSyllWord2
                              ww1
                              (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 w))) }) -}
bb78db6c1f4301d7d03cfe1784624205
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> [Data.Phoneme.Phoneme]
    -> Data.Phoneme.Phoneme
    -> [Data.Phoneme.Phoneme]
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 5, Strictness: <S,U><L,1*U><L,1*U><L,1*U><L,U>,
     Inline: [0] -}
dde7d8f003864d169d7d8c03a632306b
  data SyllWord = SyllWord [Data.Other.Syllable]
1040feab8e4745824f62065870bfd393
  data Syllable
    = Syllable {getOnset :: [Data.Phoneme.Phoneme],
                getNucleus :: Data.Phoneme.Phoneme,
                getCoda :: [Data.Phoneme.Phoneme]}
6c3913aab675b96bee7665da2f6758d7
  getCoda :: Data.Other.Syllable -> [Data.Phoneme.Phoneme]
  RecSel Left Data.Other.Syllable
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Data.Other.Syllable) ->
                 case ds of wild { Data.Other.Syllable ds1 ds2 ds3 -> ds3 }) -}
fd2d6fc3b2fca48a46533ed1b426a313
  getNucleus :: Data.Other.Syllable -> Data.Phoneme.Phoneme
  RecSel Left Data.Other.Syllable
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Data.Other.Syllable) ->
                 case ds of wild { Data.Other.Syllable ds1 ds2 ds3 -> ds2 }) -}
b7c8c0b095421caa31b6e87bbf3f1c48
  getOnset :: Data.Other.Syllable -> [Data.Phoneme.Phoneme]
  RecSel Left Data.Other.Syllable
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Data.Other.Syllable) ->
                 case ds of wild { Data.Other.Syllable ds1 ds2 ds3 -> ds1 }) -}
instance [safe] GHC.Classes.Eq [Data.Other.SyllWord]
  = Data.Other.$fEqSyllWord
instance [safe] GHC.Classes.Eq [Data.Other.Syllable]
  = Data.Other.$fEqSyllable
instance [safe] GHC.Read.Read [Data.Other.SyllWord]
  = Data.Other.$fReadSyllWord
instance [safe] GHC.Read.Read [Data.Other.Syllable]
  = Data.Other.$fReadSyllable
instance [safe] GHC.Show.Show [Data.Other.SyllWord]
  = Data.Other.$fShowSyllWord
instance [safe] GHC.Show.Show [Data.Other.Syllable]
  = Data.Other.$fShowSyllable
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

