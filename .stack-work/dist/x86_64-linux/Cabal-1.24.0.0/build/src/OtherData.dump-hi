
==================== FINAL INTERFACE ====================
2016-12-09 19:39:23.332294 UTC

interface con-lang-gen-0.0.0.1-JpecSLrjfNmG1CUMEdSr39:OtherData 8001
  interface hash: c04eb3677aa72edb895f36eb72a1ad02
  ABI hash: df5604537cb8f3523635a22cc664b290
  export-list hash: bf22fe2bed584fddd0df87b95eb5a320
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: b159a15c55fa7c6870cb2eb79bbae5a5
  sig of: Nothing
  used TH splices: False
  where
exports:
  OtherData.SyllWord{OtherData.SyllWord}
  OtherData.Syllable{OtherData.Syllable getCoda getNucleus getOnset}
module dependencies: PhonemeData
package dependencies: base-4.9.0.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.Read 817c914615ac8e308afc0c675fb3f671
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  base-4.9.0.0:Text.ParserCombinators.ReadPrec 9512e2f4b227f507f87a150887202aed
import  -/  base-4.9.0.0:Text.Read.Lex fe3dd7b823826bf6870140c5363f9596
import  -/  PhonemeData c5c8f3da2226ff98b75ea8cff0a9f4e3
  exports: c443d5b5be953d18447401b2674c832d
  Phoneme a99d82394cccf94f6dc3580d7da31e00
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
461cabe71a9907ab659678e5dbadfc91
  $fEqSyllWord :: GHC.Classes.Eq OtherData.SyllWord
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ OtherData.SyllWord
                  OtherData.$fEqSyllWord_$c==
                  OtherData.$fEqSyllWord_$c/= -}
461cabe71a9907ab659678e5dbadfc91
  $fEqSyllWord_$c/= ::
    OtherData.SyllWord -> OtherData.SyllWord -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: OtherData.SyllWord) (b :: OtherData.SyllWord) ->
                 case a of wild { OtherData.SyllWord a1 ->
                 case b of wild1 { OtherData.SyllWord b1 ->
                 case GHC.Classes.$fEq[]_$c==
                        @ OtherData.Syllable
                        OtherData.$fEqSyllable
                        a1
                        b1 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
461cabe71a9907ab659678e5dbadfc91
  $fEqSyllWord_$c== ::
    OtherData.SyllWord -> OtherData.SyllWord -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: OtherData.SyllWord) (ds1 :: OtherData.SyllWord) ->
                 case ds of wild { OtherData.SyllWord a1 ->
                 case ds1 of wild1 { OtherData.SyllWord b1 ->
                 GHC.Classes.$fEq[]_$c==
                   @ OtherData.Syllable
                   OtherData.$fEqSyllable
                   a1
                   b1 } }) -}
a5ffdec2d4db7b6f3e7c77129601a59f
  $fEqSyllable :: GHC.Classes.Eq OtherData.Syllable
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ OtherData.Syllable
                  OtherData.$fEqSyllable_$c==
                  OtherData.$fEqSyllable_$c/= -}
a5ffdec2d4db7b6f3e7c77129601a59f
  $fEqSyllable_$c/= ::
    OtherData.Syllable -> OtherData.Syllable -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U,1*U,1*U)><S(SLL),1*U(1*U,1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: OtherData.Syllable) (b :: OtherData.Syllable) ->
                 case OtherData.$fEqSyllable_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
a5ffdec2d4db7b6f3e7c77129601a59f
  $fEqSyllable_$c== ::
    OtherData.Syllable -> OtherData.Syllable -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U,1*U,1*U)><S(SLL),1*U(1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: OtherData.Syllable) (w1 :: OtherData.Syllable) ->
                 case w of ww { OtherData.Syllable ww1 ww2 ww3 ->
                 case w1 of ww4 { OtherData.Syllable ww5 ww6 ww7 ->
                 OtherData.$w$c== ww1 ww2 ww3 ww5 ww6 ww7 } }) -}
461cabe71a9907ab659678e5dbadfc91
  $fReadSyllWord :: GHC.Read.Read OtherData.SyllWord
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ OtherData.SyllWord
                  OtherData.$fReadSyllWord_$creadsPrec
                  OtherData.$fReadSyllWord_$creadList
                  OtherData.$fReadSyllWord_$creadPrec
                  OtherData.$fReadSyllWord_$creadListPrec -}
461cabe71a9907ab659678e5dbadfc91
  $fReadSyllWord1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([OtherData.SyllWord] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [OtherData.SyllWord]
                            -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.$wlist
                   @ OtherData.SyllWord
                   OtherData.$fReadSyllWord2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <OtherData.SyllWord>_R))
                   @ b
                   eta1) -}
461cabe71a9907ab659678e5dbadfc91
  $fReadSyllWord2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP OtherData.SyllWord
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ OtherData.SyllWord
                   OtherData.$fReadSyllWord3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <OtherData.SyllWord>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <OtherData.SyllWord>_R)))) -}
461cabe71a9907ab659678e5dbadfc91
  $fReadSyllWord3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (OtherData.SyllWord -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (w1 :: OtherData.SyllWord -> Text.ParserCombinators.ReadP.P b) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 OtherData.$w$creadPrec ww1 @ b w1 }) -}
fbc8c17d20fc58ed277ba3bb8a4afb63
  $fReadSyllWord4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SyllWord"#) -}
a5ffdec2d4db7b6f3e7c77129601a59f
  $fReadSyllWord5 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP OtherData.Syllable
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ OtherData.Syllable
                   OtherData.$fReadSyllWord6
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <OtherData.Syllable>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <OtherData.Syllable>_R)))) -}
a5ffdec2d4db7b6f3e7c77129601a59f
  $fReadSyllWord6 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (OtherData.Syllable -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (w1 :: OtherData.Syllable -> Text.ParserCombinators.ReadP.P b) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 OtherData.$w$creadPrec1 ww1 @ b w1 }) -}
461cabe71a9907ab659678e5dbadfc91
  $fReadSyllWord7 ::
    Text.ParserCombinators.ReadP.P [OtherData.SyllWord]
  {- Unfolding: (GHC.Read.$wlist
                   @ OtherData.SyllWord
                   OtherData.$fReadSyllWord2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <OtherData.SyllWord>_R))
                   @ [OtherData.SyllWord]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [OtherData.SyllWord])) -}
461cabe71a9907ab659678e5dbadfc91
  $fReadSyllWord_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [OtherData.SyllWord]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [OtherData.SyllWord]
                   OtherData.$fReadSyllWord7) -}
461cabe71a9907ab659678e5dbadfc91
  $fReadSyllWord_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [OtherData.SyllWord]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                OtherData.$fReadSyllWord1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[OtherData.SyllWord]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[OtherData.SyllWord]>_R))) -}
461cabe71a9907ab659678e5dbadfc91
  $fReadSyllWord_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec OtherData.SyllWord
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                OtherData.$fReadSyllWord2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <OtherData.SyllWord>_R)) -}
461cabe71a9907ab659678e5dbadfc91
  $fReadSyllWord_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS OtherData.SyllWord
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ OtherData.SyllWord
                   ((GHC.Read.$fReadDouble10
                       @ OtherData.SyllWord
                       OtherData.$fReadSyllWord3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <OtherData.SyllWord>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <OtherData.SyllWord>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <OtherData.SyllWord>_R)
                      @ OtherData.SyllWord
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ OtherData.SyllWord))) -}
a5ffdec2d4db7b6f3e7c77129601a59f
  $fReadSyllable :: GHC.Read.Read OtherData.Syllable
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ OtherData.Syllable
                  OtherData.$fReadSyllable_$creadsPrec
                  OtherData.$fReadSyllable_$creadList
                  OtherData.$fReadSyllable_$creadPrec
                  OtherData.$fReadSyllable_$creadListPrec -}
a5ffdec2d4db7b6f3e7c77129601a59f
  $fReadSyllable1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([OtherData.Syllable] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [OtherData.Syllable]
                            -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.$wlist
                   @ OtherData.Syllable
                   OtherData.$fReadSyllWord5
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <OtherData.Syllable>_R))
                   @ b
                   eta1) -}
a5ffdec2d4db7b6f3e7c77129601a59f
  $fReadSyllable2 ::
    Text.ParserCombinators.ReadP.P [OtherData.Syllable]
  {- Unfolding: (GHC.Read.$wlist
                   @ OtherData.Syllable
                   OtherData.$fReadSyllWord5
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <OtherData.Syllable>_R))
                   @ [OtherData.Syllable]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [OtherData.Syllable])) -}
a5ffdec2d4db7b6f3e7c77129601a59f
  $fReadSyllable_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [OtherData.Syllable]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [OtherData.Syllable]
                   OtherData.$fReadSyllable2) -}
a5ffdec2d4db7b6f3e7c77129601a59f
  $fReadSyllable_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [OtherData.Syllable]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                OtherData.$fReadSyllable1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[OtherData.Syllable]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[OtherData.Syllable]>_R))) -}
a5ffdec2d4db7b6f3e7c77129601a59f
  $fReadSyllable_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec OtherData.Syllable
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                OtherData.$fReadSyllWord5
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <OtherData.Syllable>_R)) -}
a5ffdec2d4db7b6f3e7c77129601a59f
  $fReadSyllable_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS OtherData.Syllable
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ OtherData.Syllable
                   ((GHC.Read.$fReadDouble10
                       @ OtherData.Syllable
                       OtherData.$fReadSyllWord6
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <OtherData.Syllable>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <OtherData.Syllable>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <OtherData.Syllable>_R)
                      @ OtherData.Syllable
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ OtherData.Syllable))) -}
461cabe71a9907ab659678e5dbadfc91
  $fShowSyllWord :: GHC.Show.Show OtherData.SyllWord
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ OtherData.SyllWord
                  OtherData.$fShowSyllWord_$cshowsPrec
                  OtherData.$fShowSyllWord_$cshow
                  OtherData.$fShowSyllWord_$cshowList -}
461cabe71a9907ab659678e5dbadfc91
  $fShowSyllWord1 :: OtherData.SyllWord -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: OtherData.SyllWord) (w1 :: GHC.Base.String) ->
                 case w of ww { OtherData.SyllWord ww1 ->
                 OtherData.$w$cshowsPrec 0# ww1 w1 }) -}
a5ffdec2d4db7b6f3e7c77129601a59f
  $fShowSyllWord2 :: OtherData.Syllable -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: OtherData.Syllable) (w1 :: GHC.Base.String) ->
                 case w of ww { OtherData.Syllable ww1 ww2 ww3 ->
                 OtherData.$w$cshowsPrec1 0# ww1 ww2 ww3 w1 }) -}
1d84ab4c37dbcbc956052bad1918e585
  $fShowSyllWord3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SyllWord "#) -}
461cabe71a9907ab659678e5dbadfc91
  $fShowSyllWord_$cshow :: OtherData.SyllWord -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: OtherData.SyllWord) ->
                 case x of wild { OtherData.SyllWord b1 ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n OtherData.$fShowSyllWord3)
                   (GHC.Show.showList__
                      @ OtherData.Syllable
                      OtherData.$fShowSyllWord2
                      b1
                      (GHC.Types.[] @ GHC.Types.Char)) }) -}
461cabe71a9907ab659678e5dbadfc91
  $fShowSyllWord_$cshowList :: [OtherData.SyllWord] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ OtherData.SyllWord
                   OtherData.$fShowSyllWord1) -}
461cabe71a9907ab659678e5dbadfc91
  $fShowSyllWord_$cshowsPrec ::
    GHC.Types.Int -> OtherData.SyllWord -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: OtherData.SyllWord)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { OtherData.SyllWord ww3 ->
                 OtherData.$w$cshowsPrec ww1 ww3 w2 } }) -}
a5ffdec2d4db7b6f3e7c77129601a59f
  $fShowSyllable :: GHC.Show.Show OtherData.Syllable
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ OtherData.Syllable
                  OtherData.$fShowSyllable_$cshowsPrec
                  OtherData.$fShowSyllable_$cshow
                  OtherData.$fShowSyllable_$cshowList -}
a5ffdec2d4db7b6f3e7c77129601a59f
  $fShowSyllable_$cshow :: OtherData.Syllable -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: OtherData.Syllable) ->
                 OtherData.$fShowSyllable_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
a5ffdec2d4db7b6f3e7c77129601a59f
  $fShowSyllable_$cshowList :: [OtherData.Syllable] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ OtherData.Syllable
                   OtherData.$fShowSyllWord2) -}
a5ffdec2d4db7b6f3e7c77129601a59f
  $fShowSyllable_$cshowsPrec ::
    GHC.Types.Int -> OtherData.Syllable -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U,1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: OtherData.Syllable)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { OtherData.Syllable ww3 ww4 ww5 ->
                 OtherData.$w$cshowsPrec1 ww1 ww3 ww4 ww5 w2 } }) -}
cf4c148dcb9ca6590ebabdc62749855f
  $tc'SyllWord :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4685955825006840530##
                   7256440325800889746##
                   OtherData.$trModule
                   OtherData.$tc'SyllWord1) -}
57e4eda78e321264b4cdd06fd4f75341
  $tc'SyllWord1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'SyllWord"#) -}
703e23484b6388fc88219d2b04dc440e
  $tc'Syllable :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7966248419580525550##
                   16736635052840000589##
                   OtherData.$trModule
                   OtherData.$tc'Syllable1) -}
af4f4db73bc1bcbc0470c568fe5edbbb
  $tc'Syllable1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Syllable"#) -}
53a46579fc5e28c11d7cc5b714271809
  $tcSyllWord :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4931714425982592102##
                   16648430862415726115##
                   OtherData.$trModule
                   OtherData.$tcSyllWord1) -}
b8c6fc7f23b303470dfbf727cccbdb0c
  $tcSyllWord1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "SyllWord"#) -}
c390c560201a96323dd1ed2de1283813
  $tcSyllable :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   174453836950200628##
                   17741371031315601030##
                   OtherData.$trModule
                   OtherData.$tcSyllable1) -}
cb64305457f887538f5bd8f2bfcc31c4
  $tcSyllable1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Syllable"#) -}
3dd2a391500d4bf89d03a1df627a8193
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   OtherData.$trModule2
                   OtherData.$trModule1) -}
209e114542ea9c3d8386539144b3dfa9
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "OtherData"#) -}
0834e218dd717d1eb935202d4bc42067
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "con-lang-gen-0.0.0.1-JpecSLrjfNmG1CUMEdSr39"#) -}
52f48f38258a010bff099530081a8c5c
  $w$c== ::
    [PhonemeData.Phoneme]
    -> PhonemeData.Phoneme
    -> [PhonemeData.Phoneme]
    -> [PhonemeData.Phoneme]
    -> PhonemeData.Phoneme
    -> [PhonemeData.Phoneme]
    -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: [PhonemeData.Phoneme])
                   (ww1 :: PhonemeData.Phoneme)
                   (ww2 :: [PhonemeData.Phoneme])
                   (ww3 :: [PhonemeData.Phoneme])
                   (ww4 :: PhonemeData.Phoneme)
                   (ww5 :: [PhonemeData.Phoneme]) ->
                 case GHC.Classes.$fEq[]_$c==
                        @ PhonemeData.Phoneme
                        PhonemeData.$fEqPhoneme
                        ww
                        ww3 of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case PhonemeData.$fEqPhoneme_$c== ww1 ww4 of wild1 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> GHC.Classes.$fEq[]_$c==
                             @ PhonemeData.Phoneme
                             PhonemeData.$fEqPhoneme
                             ww2
                             ww5 } }) -}
461cabe71a9907ab659678e5dbadfc91
  $w$creadPrec ::
    GHC.Prim.Int#
    -> forall b.
       (OtherData.SyllWord -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,U><L,C(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   @ b
                   (w :: OtherData.SyllWord -> Text.ParserCombinators.ReadP.P b) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 10#) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> let {
                        lvl80 :: Text.ParserCombinators.ReadP.P b
                        = let {
                            lvl81 :: Text.ParserCombinators.ReadP.P b
                            = GHC.Read.$wlist
                                @ OtherData.Syllable
                                OtherData.$fReadSyllWord5
                                  `cast`
                                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                          <OtherData.Syllable>_R))
                                @ b
                                (\ (a1 :: [OtherData.Syllable]) -> w (OtherData.SyllWord a1))
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ (a1 :: Text.Read.Lex.Lexeme) ->
                             case a1 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a2
                               -> case GHC.Base.eqString a2 OtherData.$fReadSyllWord4 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl81 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                             Unfolding: InlineRule (1, True, True) (\ (w4 :: ()) -> lvl80) -}
                        = \ (w4 :: ()) -> lvl80
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ (a :: GHC.Base.String) ->
                         (Text.ParserCombinators.ReadP.skipSpaces_skip a)
                           `cast`
                         (Text.ParserCombinators.ReadP.N:ReadP[0] <()>_R)
                           @ b
                           k) }) -}
a5ffdec2d4db7b6f3e7c77129601a59f
  $w$creadPrec1 ::
    GHC.Prim.Int#
    -> forall b.
       (OtherData.Syllable -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,U><L,C(U)>, Inline: [0] -}
760c184a2eeeac660c39c5a7007c3f8d
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> [OtherData.Syllable] -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: [OtherData.Syllable])
                   (w :: GHC.Base.String) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        OtherData.$fShowSyllWord3
                        (GHC.Show.showList__
                           @ OtherData.Syllable
                           OtherData.$fShowSyllWord2
                           ww1
                           w)
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           OtherData.$fShowSyllWord3
                           (GHC.Show.showList__
                              @ OtherData.Syllable
                              OtherData.$fShowSyllWord2
                              ww1
                              (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 w))) }) -}
592d3356db3f879a5cc9002e40dd5476
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> [PhonemeData.Phoneme]
    -> PhonemeData.Phoneme
    -> [PhonemeData.Phoneme]
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 5, Strictness: <S,U><L,1*U><L,1*U><L,1*U><L,U>,
     Inline: [0] -}
461cabe71a9907ab659678e5dbadfc91
  data SyllWord = SyllWord [OtherData.Syllable]
a5ffdec2d4db7b6f3e7c77129601a59f
  data Syllable
    = Syllable {getOnset :: [PhonemeData.Phoneme],
                getNucleus :: PhonemeData.Phoneme,
                getCoda :: [PhonemeData.Phoneme]}
c35e6e800ea060461dc59b447d67cfe0
  getCoda :: OtherData.Syllable -> [PhonemeData.Phoneme]
  RecSel Left OtherData.Syllable
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: OtherData.Syllable) ->
                 case ds of wild { OtherData.Syllable ds1 ds2 ds3 -> ds3 }) -}
2370a92d63954ec08140fafc77ac5a73
  getNucleus :: OtherData.Syllable -> PhonemeData.Phoneme
  RecSel Left OtherData.Syllable
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: OtherData.Syllable) ->
                 case ds of wild { OtherData.Syllable ds1 ds2 ds3 -> ds2 }) -}
06492565c5eafbfce48fcc3358304dac
  getOnset :: OtherData.Syllable -> [PhonemeData.Phoneme]
  RecSel Left OtherData.Syllable
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: OtherData.Syllable) ->
                 case ds of wild { OtherData.Syllable ds1 ds2 ds3 -> ds1 }) -}
instance [safe] GHC.Classes.Eq [OtherData.SyllWord]
  = OtherData.$fEqSyllWord
instance [safe] GHC.Classes.Eq [OtherData.Syllable]
  = OtherData.$fEqSyllable
instance [safe] GHC.Read.Read [OtherData.SyllWord]
  = OtherData.$fReadSyllWord
instance [safe] GHC.Read.Read [OtherData.Syllable]
  = OtherData.$fReadSyllable
instance [safe] GHC.Show.Show [OtherData.SyllWord]
  = OtherData.$fShowSyllWord
instance [safe] GHC.Show.Show [OtherData.Syllable]
  = OtherData.$fShowSyllable
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

