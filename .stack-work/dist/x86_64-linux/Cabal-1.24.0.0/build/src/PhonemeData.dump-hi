
==================== FINAL INTERFACE ====================
2016-12-09 19:39:20.173521 UTC

interface con-lang-gen-0.0.0.1-JpecSLrjfNmG1CUMEdSr39:PhonemeData 8001
  interface hash: e83316d2112e54963801d55ed82cf9e6
  ABI hash: c5c8f3da2226ff98b75ea8cff0a9f4e3
  export-list hash: c443d5b5be953d18447401b2674c832d
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: b159a15c55fa7c6870cb2eb79bbae5a5
  sig of: Nothing
  used TH splices: False
  where
exports:
  PhonemeData.Backness{PhonemeData.BACK PhonemeData.CENTRAL PhonemeData.FRONT PhonemeData.NEARBACK PhonemeData.NEARFRONT}
  PhonemeData.Height{PhonemeData.CLOSE PhonemeData.CLOSEMID PhonemeData.MID PhonemeData.NEARCLOSE PhonemeData.NEAROPEN PhonemeData.OPEN PhonemeData.OPENMID}
  PhonemeData.Length{PhonemeData.LONG PhonemeData.NORMAL PhonemeData.SHORT}
  PhonemeData.Manner{PhonemeData.AFFRICATE PhonemeData.APPROXIMANT PhonemeData.FLAP PhonemeData.FRICATIVE PhonemeData.LAFFRICATE PhonemeData.LAPPROXIMANT PhonemeData.LFLAP PhonemeData.LFRICATIVE PhonemeData.NASAL PhonemeData.SAFFRICATE PhonemeData.SILIBANT PhonemeData.STOP PhonemeData.TRILL}
  PhonemeData.Morpheme{PhonemeData.Morpheme getPhonemes}
  PhonemeData.Phonation{PhonemeData.ASPIRATED PhonemeData.BREATHY PhonemeData.CREAKY PhonemeData.MODAL PhonemeData.SLACK PhonemeData.STIFF PhonemeData.VOICELESS}
  PhonemeData.Phoneme{PhonemeData.Blank PhonemeData.Consonant PhonemeData.Diphthong PhonemeData.Vowel cmanner cplace csymbol cvoice dbackness1 dbackness2 dheight1 dheight2 dlength droundedness1 droundedness2 dsymbol dtone vbackness vheight vlength vroundedness vsymbol vtone}
  PhonemeData.Place{PhonemeData.ALVEOLAR PhonemeData.ALVEOLOPALATAL PhonemeData.BILABIAL PhonemeData.CORONAL PhonemeData.DENTAL PhonemeData.DENTIALVEOLAR PhonemeData.DORSAL PhonemeData.EPIGLOTTAL PhonemeData.EPIPHARYNGEAL PhonemeData.GLOTTAL PhonemeData.LABIAL PhonemeData.LABIODENTAL PhonemeData.LARYNGEAL PhonemeData.PALATAL PhonemeData.PHARYNGEAL PhonemeData.POSTALVEOLAR PhonemeData.RETROFLEX PhonemeData.UVULAR PhonemeData.VELAR}
  PhonemeData.Roundedness{PhonemeData.DEFAULT PhonemeData.ROUNDED PhonemeData.UNROUNDED}
  PhonemeData.Tone{PhonemeData.BOTTOMT PhonemeData.DIPT PhonemeData.FALLT PhonemeData.HFALLT PhonemeData.HIGHT PhonemeData.HRISET PhonemeData.LFALLT PhonemeData.LOWT PhonemeData.LRISET PhonemeData.MIDT PhonemeData.NONET PhonemeData.PEAKT PhonemeData.RISET PhonemeData.TOPT}
  PhonemeData.Word{PhonemeData.Word getMorphemes}
module dependencies:
package dependencies: base-4.9.0.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.Enum fdf7ac3e1b0be0a4a37257601bddad14
import  -/  base-4.9.0.0:GHC.Err 3bba35a16538d33d424682ce66876cdd
import  -/  base-4.9.0.0:GHC.Num 48f506a8f4ecf06285d0a0706594dcc0
import  -/  base-4.9.0.0:GHC.Read 817c914615ac8e308afc0c675fb3f671
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  base-4.9.0.0:Text.ParserCombinators.ReadPrec 9512e2f4b227f507f87a150887202aed
import  -/  base-4.9.0.0:Text.Read.Lex fe3dd7b823826bf6870140c5363f9596
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 7378e41b7749213c8c88ceb6b0665d4c
d7d82e642198a794ac3b3638da1bf9f3
  $fBoundedBackness :: GHC.Enum.Bounded PhonemeData.Backness
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ PhonemeData.Backness PhonemeData.BACK PhonemeData.FRONT -}
ba05bb435342e1a32b92b81d74410bc0
  $fBoundedHeight :: GHC.Enum.Bounded PhonemeData.Height
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ PhonemeData.Height PhonemeData.CLOSE PhonemeData.OPEN -}
60079db4dd97570a8e4fd882d78d3a98
  $fBoundedLength :: GHC.Enum.Bounded PhonemeData.Length
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ PhonemeData.Length PhonemeData.SHORT PhonemeData.LONG -}
cc18ad7b6a428637be9e42d493f6b8da
  $fBoundedManner :: GHC.Enum.Bounded PhonemeData.Manner
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ PhonemeData.Manner PhonemeData.NASAL PhonemeData.LFLAP -}
2e1a0e09a78074c21fc0136e518a2133
  $fBoundedPhonation :: GHC.Enum.Bounded PhonemeData.Phonation
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ PhonemeData.Phonation
                  PhonemeData.VOICELESS
                  PhonemeData.ASPIRATED -}
27d4fb2260414ca95f988dc9fef00141
  $fBoundedPlace :: GHC.Enum.Bounded PhonemeData.Place
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ PhonemeData.Place PhonemeData.LABIAL PhonemeData.GLOTTAL -}
e7b029a5844a6e008b95082c9c811e33
  $fBoundedRoundedness :: GHC.Enum.Bounded PhonemeData.Roundedness
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ PhonemeData.Roundedness
                  PhonemeData.DEFAULT
                  PhonemeData.UNROUNDED -}
87cd4acf5bb796129082f7006a0ea5b8
  $fBoundedTone :: GHC.Enum.Bounded PhonemeData.Tone
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ PhonemeData.Tone PhonemeData.NONET PhonemeData.PEAKT -}
d7d82e642198a794ac3b3638da1bf9f3
  $fEnumBackness :: GHC.Enum.Enum PhonemeData.Backness
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ PhonemeData.Backness
                  PhonemeData.$fEnumBackness_$csucc
                  PhonemeData.$fEnumBackness_$cpred
                  PhonemeData.$fEnumBackness_$ctoEnum
                  PhonemeData.$fEnumBackness_$cfromEnum
                  PhonemeData.$fEnumBackness_$cenumFrom
                  PhonemeData.$fEnumBackness_$cenumFromThen
                  PhonemeData.$fEnumBackness_$cenumFromTo
                  PhonemeData.$fEnumBackness_$cenumFromThenTo -}
d7d82e642198a794ac3b3638da1bf9f3
  $fEnumBackness1 :: [PhonemeData.Backness]
  {- Unfolding: (PhonemeData.$fEnumBackness_go5 4#) -}
d7d82e642198a794ac3b3638da1bf9f3
  $fEnumBackness2 :: [PhonemeData.Backness]
  {- Unfolding: (PhonemeData.$fEnumBackness_go6 3#) -}
d7d82e642198a794ac3b3638da1bf9f3
  $fEnumBackness3 :: [PhonemeData.Backness]
  {- Unfolding: (PhonemeData.$fEnumBackness_go7 2#) -}
d7d82e642198a794ac3b3638da1bf9f3
  $fEnumBackness4 :: [PhonemeData.Backness]
  {- Unfolding: (PhonemeData.$fEnumBackness_go8 1#) -}
d7d82e642198a794ac3b3638da1bf9f3
  $fEnumBackness5 :: [PhonemeData.Backness]
  {- Unfolding: (PhonemeData.$fEnumBackness_go9 0#) -}
d7d82e642198a794ac3b3638da1bf9f3
  $fEnumBackness6 :: GHC.Prim.Int# -> PhonemeData.Backness
  {- Arity: 1, Strictness: <L,U>x -}
d7d82e642198a794ac3b3638da1bf9f3
  $fEnumBackness7 :: PhonemeData.Backness
  {- Strictness: x -}
d7d82e642198a794ac3b3638da1bf9f3
  $fEnumBackness8 :: PhonemeData.Backness
  {- Strictness: x -}
d7d82e642198a794ac3b3638da1bf9f3
  $fEnumBackness_$cenumFrom ::
    PhonemeData.Backness -> [PhonemeData.Backness]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (a :: PhonemeData.Backness) ->
                 case a of wild {
                   PhonemeData.BACK -> PhonemeData.$fEnumBackness5
                   PhonemeData.NEARBACK -> PhonemeData.$fEnumBackness4
                   PhonemeData.CENTRAL -> PhonemeData.$fEnumBackness3
                   PhonemeData.NEARFRONT -> PhonemeData.$fEnumBackness2
                   PhonemeData.FRONT -> PhonemeData.$fEnumBackness1 }) -}
d7d82e642198a794ac3b3638da1bf9f3
  $fEnumBackness_$cenumFromThen ::
    PhonemeData.Backness
    -> PhonemeData.Backness -> [PhonemeData.Backness]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: PhonemeData.Backness)
                   (b :: PhonemeData.Backness) ->
                 let {
                   $j :: GHC.Prim.Int# -> [PhonemeData.Backness]
                     {- Arity: 1, Strictness: <S,U> -}
                   = \ (a# :: GHC.Prim.Int#)[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int# -> [PhonemeData.Backness]
                         {- Arity: 1, Strictness: <S,U> -}
                       = \ (b# :: GHC.Prim.Int#)[OneShot] ->
                         let {
                           $j2 :: GHC.Prim.Int# -> [PhonemeData.Backness]
                             {- Arity: 1, Strictness: <S,U> -}
                           = \ (y :: GHC.Prim.Int#)[OneShot] ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# b# a#) of wild {
                               GHC.Types.False
                               -> GHC.Enum.efdtIntDnFB
                                    @ [PhonemeData.Backness]
                                    PhonemeData.$fEnumBackness_c
                                    (GHC.Types.[] @ PhonemeData.Backness)
                                    a#
                                    b#
                                    y
                               GHC.Types.True
                               -> GHC.Enum.efdtIntUpFB
                                    @ [PhonemeData.Backness]
                                    PhonemeData.$fEnumBackness_c
                                    (GHC.Types.[] @ PhonemeData.Backness)
                                    a#
                                    b#
                                    y }
                         } in
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.># a# b#) of wild {
                           GHC.Types.False -> $j2 4# GHC.Types.True -> $j2 0# }
                     } in
                     case b of wild {
                       PhonemeData.BACK -> $j1 0#
                       PhonemeData.NEARBACK -> $j1 1#
                       PhonemeData.CENTRAL -> $j1 2#
                       PhonemeData.NEARFRONT -> $j1 3#
                       PhonemeData.FRONT -> $j1 4# }
                 } in
                 case a of wild {
                   PhonemeData.BACK -> $j 0#
                   PhonemeData.NEARBACK -> $j 1#
                   PhonemeData.CENTRAL -> $j 2#
                   PhonemeData.NEARFRONT -> $j 3#
                   PhonemeData.FRONT -> $j 4# }) -}
d7d82e642198a794ac3b3638da1bf9f3
  $fEnumBackness_$cenumFromThenTo ::
    PhonemeData.Backness
    -> PhonemeData.Backness
    -> PhonemeData.Backness
    -> [PhonemeData.Backness]
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U> -}
d7d82e642198a794ac3b3638da1bf9f3
  $fEnumBackness_$cenumFromTo ::
    PhonemeData.Backness
    -> PhonemeData.Backness -> [PhonemeData.Backness]
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x :: PhonemeData.Backness)
                   (y :: PhonemeData.Backness) ->
                 let {
                   $j :: GHC.Prim.Int# -> [PhonemeData.Backness]
                     {- Arity: 1, Strictness: <S,U> -}
                   = \ (x1 :: GHC.Prim.Int#)[OneShot] ->
                     case y of wild {
                       PhonemeData.BACK
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 0#) of wild1 {
                            GHC.Types.False -> PhonemeData.$fEnumBackness_go4 x1
                            GHC.Types.True -> GHC.Types.[] @ PhonemeData.Backness }
                       PhonemeData.NEARBACK
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 1#) of wild1 {
                            GHC.Types.False -> PhonemeData.$fEnumBackness_go3 x1
                            GHC.Types.True -> GHC.Types.[] @ PhonemeData.Backness }
                       PhonemeData.CENTRAL
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 2#) of wild1 {
                            GHC.Types.False -> PhonemeData.$fEnumBackness_go2 x1
                            GHC.Types.True -> GHC.Types.[] @ PhonemeData.Backness }
                       PhonemeData.NEARFRONT
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 3#) of wild1 {
                            GHC.Types.False -> PhonemeData.$fEnumBackness_go1 x1
                            GHC.Types.True -> GHC.Types.[] @ PhonemeData.Backness }
                       PhonemeData.FRONT
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 4#) of wild1 {
                            GHC.Types.False -> PhonemeData.$fEnumBackness_go x1
                            GHC.Types.True -> GHC.Types.[] @ PhonemeData.Backness } }
                 } in
                 case x of wild {
                   PhonemeData.BACK -> $j 0#
                   PhonemeData.NEARBACK -> $j 1#
                   PhonemeData.CENTRAL -> $j 2#
                   PhonemeData.NEARFRONT -> $j 3#
                   PhonemeData.FRONT -> $j 4# }) -}
d7d82e642198a794ac3b3638da1bf9f3
  $fEnumBackness_$cfromEnum :: PhonemeData.Backness -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: PhonemeData.Backness) ->
                 case w of wild {
                   PhonemeData.BACK -> GHC.Types.I# 0#
                   PhonemeData.NEARBACK -> GHC.Types.I# 1#
                   PhonemeData.CENTRAL -> GHC.Types.I# 2#
                   PhonemeData.NEARFRONT -> GHC.Types.I# 3#
                   PhonemeData.FRONT -> GHC.Types.I# 4# }) -}
d7d82e642198a794ac3b3638da1bf9f3
  $fEnumBackness_$cpred ::
    PhonemeData.Backness -> PhonemeData.Backness
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: PhonemeData.Backness) ->
                 case a of wild {
                   PhonemeData.BACK -> PhonemeData.$fEnumBackness7
                   PhonemeData.NEARBACK -> PhonemeData.BACK
                   PhonemeData.CENTRAL -> PhonemeData.NEARBACK
                   PhonemeData.NEARFRONT -> PhonemeData.CENTRAL
                   PhonemeData.FRONT -> PhonemeData.NEARFRONT }) -}
d7d82e642198a794ac3b3638da1bf9f3
  $fEnumBackness_$csucc ::
    PhonemeData.Backness -> PhonemeData.Backness
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: PhonemeData.Backness) ->
                 case a of wild {
                   PhonemeData.BACK -> PhonemeData.NEARBACK
                   PhonemeData.NEARBACK -> PhonemeData.CENTRAL
                   PhonemeData.CENTRAL -> PhonemeData.NEARFRONT
                   PhonemeData.NEARFRONT -> PhonemeData.FRONT
                   PhonemeData.FRONT -> PhonemeData.$fEnumBackness8 }) -}
d7d82e642198a794ac3b3638da1bf9f3
  $fEnumBackness_$ctoEnum :: GHC.Types.Int -> PhonemeData.Backness
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 -> PhonemeData.$w$ctoEnum ww1 }) -}
d7d82e642198a794ac3b3638da1bf9f3
  $fEnumBackness_c ::
    GHC.Types.Int -> [PhonemeData.Backness] -> [PhonemeData.Backness]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: GHC.Types.Int) (ys :: [PhonemeData.Backness]) ->
                 GHC.Types.:
                   @ PhonemeData.Backness
                   (case x of wild { GHC.Types.I# a ->
                    GHC.Prim.tagToEnum# @ PhonemeData.Backness a })
                   ys) -}
d7d82e642198a794ac3b3638da1bf9f3
  $fEnumBackness_go :: GHC.Prim.Int# -> [PhonemeData.Backness]
  {- Arity: 1, Strictness: <L,U> -}
d7d82e642198a794ac3b3638da1bf9f3
  $fEnumBackness_go1 :: GHC.Prim.Int# -> [PhonemeData.Backness]
  {- Arity: 1, Strictness: <L,U> -}
d7d82e642198a794ac3b3638da1bf9f3
  $fEnumBackness_go2 :: GHC.Prim.Int# -> [PhonemeData.Backness]
  {- Arity: 1, Strictness: <L,U> -}
d7d82e642198a794ac3b3638da1bf9f3
  $fEnumBackness_go3 :: GHC.Prim.Int# -> [PhonemeData.Backness]
  {- Arity: 1, Strictness: <L,U> -}
d7d82e642198a794ac3b3638da1bf9f3
  $fEnumBackness_go4 :: GHC.Prim.Int# -> [PhonemeData.Backness]
  {- Arity: 1, Strictness: <L,U> -}
d7d82e642198a794ac3b3638da1bf9f3
  $fEnumBackness_go5 :: GHC.Prim.Int# -> [PhonemeData.Backness]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
d7d82e642198a794ac3b3638da1bf9f3
  $fEnumBackness_go6 :: GHC.Prim.Int# -> [PhonemeData.Backness]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
d7d82e642198a794ac3b3638da1bf9f3
  $fEnumBackness_go7 :: GHC.Prim.Int# -> [PhonemeData.Backness]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
d7d82e642198a794ac3b3638da1bf9f3
  $fEnumBackness_go8 :: GHC.Prim.Int# -> [PhonemeData.Backness]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
d7d82e642198a794ac3b3638da1bf9f3
  $fEnumBackness_go9 :: GHC.Prim.Int# -> [PhonemeData.Backness]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
ba05bb435342e1a32b92b81d74410bc0
  $fEnumHeight :: GHC.Enum.Enum PhonemeData.Height
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ PhonemeData.Height
                  PhonemeData.$fEnumHeight_$csucc
                  PhonemeData.$fEnumHeight_$cpred
                  PhonemeData.$fEnumHeight_$ctoEnum
                  PhonemeData.$fEnumHeight_$cfromEnum
                  PhonemeData.$fEnumHeight_$cenumFrom
                  PhonemeData.$fEnumHeight_$cenumFromThen
                  PhonemeData.$fEnumHeight_$cenumFromTo
                  PhonemeData.$fEnumHeight_$cenumFromThenTo -}
ba05bb435342e1a32b92b81d74410bc0
  $fEnumHeight1 :: [PhonemeData.Height]
  {- Unfolding: (PhonemeData.$fEnumHeight_go7 6#) -}
ba05bb435342e1a32b92b81d74410bc0
  $fEnumHeight10 :: PhonemeData.Height
  {- Strictness: x -}
ba05bb435342e1a32b92b81d74410bc0
  $fEnumHeight2 :: [PhonemeData.Height]
  {- Unfolding: (PhonemeData.$fEnumHeight_go8 5#) -}
ba05bb435342e1a32b92b81d74410bc0
  $fEnumHeight3 :: [PhonemeData.Height]
  {- Unfolding: (PhonemeData.$fEnumHeight_go9 4#) -}
ba05bb435342e1a32b92b81d74410bc0
  $fEnumHeight4 :: [PhonemeData.Height]
  {- Unfolding: (PhonemeData.$fEnumHeight_go10 3#) -}
ba05bb435342e1a32b92b81d74410bc0
  $fEnumHeight5 :: [PhonemeData.Height]
  {- Unfolding: (PhonemeData.$fEnumHeight_go11 2#) -}
ba05bb435342e1a32b92b81d74410bc0
  $fEnumHeight6 :: [PhonemeData.Height]
  {- Unfolding: (PhonemeData.$fEnumHeight_go12 1#) -}
ba05bb435342e1a32b92b81d74410bc0
  $fEnumHeight7 :: [PhonemeData.Height]
  {- Unfolding: (PhonemeData.$fEnumHeight_go13 0#) -}
ba05bb435342e1a32b92b81d74410bc0
  $fEnumHeight8 :: GHC.Prim.Int# -> PhonemeData.Height
  {- Arity: 1, Strictness: <L,U>x -}
ba05bb435342e1a32b92b81d74410bc0
  $fEnumHeight9 :: PhonemeData.Height
  {- Strictness: x -}
ba05bb435342e1a32b92b81d74410bc0
  $fEnumHeight_$cenumFrom ::
    PhonemeData.Height -> [PhonemeData.Height]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (a :: PhonemeData.Height) ->
                 case a of wild {
                   PhonemeData.CLOSE -> PhonemeData.$fEnumHeight7
                   PhonemeData.NEARCLOSE -> PhonemeData.$fEnumHeight6
                   PhonemeData.CLOSEMID -> PhonemeData.$fEnumHeight5
                   PhonemeData.MID -> PhonemeData.$fEnumHeight4
                   PhonemeData.OPENMID -> PhonemeData.$fEnumHeight3
                   PhonemeData.NEAROPEN -> PhonemeData.$fEnumHeight2
                   PhonemeData.OPEN -> PhonemeData.$fEnumHeight1 }) -}
ba05bb435342e1a32b92b81d74410bc0
  $fEnumHeight_$cenumFromThen ::
    PhonemeData.Height -> PhonemeData.Height -> [PhonemeData.Height]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: PhonemeData.Height)
                   (b :: PhonemeData.Height) ->
                 let {
                   $j :: GHC.Prim.Int# -> [PhonemeData.Height]
                     {- Arity: 1, Strictness: <S,U> -}
                   = \ (a# :: GHC.Prim.Int#)[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int# -> [PhonemeData.Height]
                         {- Arity: 1, Strictness: <S,U> -}
                       = \ (b# :: GHC.Prim.Int#)[OneShot] ->
                         let {
                           $j2 :: GHC.Prim.Int# -> [PhonemeData.Height]
                             {- Arity: 1, Strictness: <S,U> -}
                           = \ (y :: GHC.Prim.Int#)[OneShot] ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# b# a#) of wild {
                               GHC.Types.False
                               -> GHC.Enum.efdtIntDnFB
                                    @ [PhonemeData.Height]
                                    PhonemeData.$fEnumHeight_c
                                    (GHC.Types.[] @ PhonemeData.Height)
                                    a#
                                    b#
                                    y
                               GHC.Types.True
                               -> GHC.Enum.efdtIntUpFB
                                    @ [PhonemeData.Height]
                                    PhonemeData.$fEnumHeight_c
                                    (GHC.Types.[] @ PhonemeData.Height)
                                    a#
                                    b#
                                    y }
                         } in
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.># a# b#) of wild {
                           GHC.Types.False -> $j2 6# GHC.Types.True -> $j2 0# }
                     } in
                     case b of wild {
                       PhonemeData.CLOSE -> $j1 0#
                       PhonemeData.NEARCLOSE -> $j1 1#
                       PhonemeData.CLOSEMID -> $j1 2#
                       PhonemeData.MID -> $j1 3#
                       PhonemeData.OPENMID -> $j1 4#
                       PhonemeData.NEAROPEN -> $j1 5#
                       PhonemeData.OPEN -> $j1 6# }
                 } in
                 case a of wild {
                   PhonemeData.CLOSE -> $j 0#
                   PhonemeData.NEARCLOSE -> $j 1#
                   PhonemeData.CLOSEMID -> $j 2#
                   PhonemeData.MID -> $j 3#
                   PhonemeData.OPENMID -> $j 4#
                   PhonemeData.NEAROPEN -> $j 5#
                   PhonemeData.OPEN -> $j 6# }) -}
ba05bb435342e1a32b92b81d74410bc0
  $fEnumHeight_$cenumFromThenTo ::
    PhonemeData.Height
    -> PhonemeData.Height -> PhonemeData.Height -> [PhonemeData.Height]
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U> -}
ba05bb435342e1a32b92b81d74410bc0
  $fEnumHeight_$cenumFromTo ::
    PhonemeData.Height -> PhonemeData.Height -> [PhonemeData.Height]
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x :: PhonemeData.Height)
                   (y :: PhonemeData.Height) ->
                 let {
                   $j :: GHC.Prim.Int# -> [PhonemeData.Height]
                     {- Arity: 1, Strictness: <S,U> -}
                   = \ (x1 :: GHC.Prim.Int#)[OneShot] ->
                     case y of wild {
                       PhonemeData.CLOSE
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 0#) of wild1 {
                            GHC.Types.False -> PhonemeData.$fEnumHeight_go6 x1
                            GHC.Types.True -> GHC.Types.[] @ PhonemeData.Height }
                       PhonemeData.NEARCLOSE
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 1#) of wild1 {
                            GHC.Types.False -> PhonemeData.$fEnumHeight_go5 x1
                            GHC.Types.True -> GHC.Types.[] @ PhonemeData.Height }
                       PhonemeData.CLOSEMID
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 2#) of wild1 {
                            GHC.Types.False -> PhonemeData.$fEnumHeight_go4 x1
                            GHC.Types.True -> GHC.Types.[] @ PhonemeData.Height }
                       PhonemeData.MID
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 3#) of wild1 {
                            GHC.Types.False -> PhonemeData.$fEnumHeight_go3 x1
                            GHC.Types.True -> GHC.Types.[] @ PhonemeData.Height }
                       PhonemeData.OPENMID
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 4#) of wild1 {
                            GHC.Types.False -> PhonemeData.$fEnumHeight_go2 x1
                            GHC.Types.True -> GHC.Types.[] @ PhonemeData.Height }
                       PhonemeData.NEAROPEN
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 5#) of wild1 {
                            GHC.Types.False -> PhonemeData.$fEnumHeight_go1 x1
                            GHC.Types.True -> GHC.Types.[] @ PhonemeData.Height }
                       PhonemeData.OPEN
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 6#) of wild1 {
                            GHC.Types.False -> PhonemeData.$fEnumHeight_go x1
                            GHC.Types.True -> GHC.Types.[] @ PhonemeData.Height } }
                 } in
                 case x of wild {
                   PhonemeData.CLOSE -> $j 0#
                   PhonemeData.NEARCLOSE -> $j 1#
                   PhonemeData.CLOSEMID -> $j 2#
                   PhonemeData.MID -> $j 3#
                   PhonemeData.OPENMID -> $j 4#
                   PhonemeData.NEAROPEN -> $j 5#
                   PhonemeData.OPEN -> $j 6# }) -}
ba05bb435342e1a32b92b81d74410bc0
  $fEnumHeight_$cfromEnum :: PhonemeData.Height -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: PhonemeData.Height) ->
                 case w of wild {
                   PhonemeData.CLOSE -> GHC.Types.I# 0#
                   PhonemeData.NEARCLOSE -> GHC.Types.I# 1#
                   PhonemeData.CLOSEMID -> GHC.Types.I# 2#
                   PhonemeData.MID -> GHC.Types.I# 3#
                   PhonemeData.OPENMID -> GHC.Types.I# 4#
                   PhonemeData.NEAROPEN -> GHC.Types.I# 5#
                   PhonemeData.OPEN -> GHC.Types.I# 6# }) -}
ba05bb435342e1a32b92b81d74410bc0
  $fEnumHeight_$cpred :: PhonemeData.Height -> PhonemeData.Height
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: PhonemeData.Height) ->
                 case a of wild {
                   PhonemeData.CLOSE -> PhonemeData.$fEnumHeight9
                   PhonemeData.NEARCLOSE -> PhonemeData.CLOSE
                   PhonemeData.CLOSEMID -> PhonemeData.NEARCLOSE
                   PhonemeData.MID -> PhonemeData.CLOSEMID
                   PhonemeData.OPENMID -> PhonemeData.MID
                   PhonemeData.NEAROPEN -> PhonemeData.OPENMID
                   PhonemeData.OPEN -> PhonemeData.NEAROPEN }) -}
ba05bb435342e1a32b92b81d74410bc0
  $fEnumHeight_$csucc :: PhonemeData.Height -> PhonemeData.Height
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: PhonemeData.Height) ->
                 case a of wild {
                   PhonemeData.CLOSE -> PhonemeData.NEARCLOSE
                   PhonemeData.NEARCLOSE -> PhonemeData.CLOSEMID
                   PhonemeData.CLOSEMID -> PhonemeData.MID
                   PhonemeData.MID -> PhonemeData.OPENMID
                   PhonemeData.OPENMID -> PhonemeData.NEAROPEN
                   PhonemeData.NEAROPEN -> PhonemeData.OPEN
                   PhonemeData.OPEN -> PhonemeData.$fEnumHeight10 }) -}
ba05bb435342e1a32b92b81d74410bc0
  $fEnumHeight_$ctoEnum :: GHC.Types.Int -> PhonemeData.Height
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 PhonemeData.$w$ctoEnum1 ww1 }) -}
ba05bb435342e1a32b92b81d74410bc0
  $fEnumHeight_c ::
    GHC.Types.Int -> [PhonemeData.Height] -> [PhonemeData.Height]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: GHC.Types.Int) (ys :: [PhonemeData.Height]) ->
                 GHC.Types.:
                   @ PhonemeData.Height
                   (case x of wild { GHC.Types.I# a ->
                    GHC.Prim.tagToEnum# @ PhonemeData.Height a })
                   ys) -}
ba05bb435342e1a32b92b81d74410bc0
  $fEnumHeight_go :: GHC.Prim.Int# -> [PhonemeData.Height]
  {- Arity: 1, Strictness: <L,U> -}
ba05bb435342e1a32b92b81d74410bc0
  $fEnumHeight_go1 :: GHC.Prim.Int# -> [PhonemeData.Height]
  {- Arity: 1, Strictness: <L,U> -}
ba05bb435342e1a32b92b81d74410bc0
  $fEnumHeight_go10 :: GHC.Prim.Int# -> [PhonemeData.Height]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
ba05bb435342e1a32b92b81d74410bc0
  $fEnumHeight_go11 :: GHC.Prim.Int# -> [PhonemeData.Height]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
ba05bb435342e1a32b92b81d74410bc0
  $fEnumHeight_go12 :: GHC.Prim.Int# -> [PhonemeData.Height]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
ba05bb435342e1a32b92b81d74410bc0
  $fEnumHeight_go13 :: GHC.Prim.Int# -> [PhonemeData.Height]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
ba05bb435342e1a32b92b81d74410bc0
  $fEnumHeight_go2 :: GHC.Prim.Int# -> [PhonemeData.Height]
  {- Arity: 1, Strictness: <L,U> -}
ba05bb435342e1a32b92b81d74410bc0
  $fEnumHeight_go3 :: GHC.Prim.Int# -> [PhonemeData.Height]
  {- Arity: 1, Strictness: <L,U> -}
ba05bb435342e1a32b92b81d74410bc0
  $fEnumHeight_go4 :: GHC.Prim.Int# -> [PhonemeData.Height]
  {- Arity: 1, Strictness: <L,U> -}
ba05bb435342e1a32b92b81d74410bc0
  $fEnumHeight_go5 :: GHC.Prim.Int# -> [PhonemeData.Height]
  {- Arity: 1, Strictness: <L,U> -}
ba05bb435342e1a32b92b81d74410bc0
  $fEnumHeight_go6 :: GHC.Prim.Int# -> [PhonemeData.Height]
  {- Arity: 1, Strictness: <L,U> -}
ba05bb435342e1a32b92b81d74410bc0
  $fEnumHeight_go7 :: GHC.Prim.Int# -> [PhonemeData.Height]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
ba05bb435342e1a32b92b81d74410bc0
  $fEnumHeight_go8 :: GHC.Prim.Int# -> [PhonemeData.Height]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
ba05bb435342e1a32b92b81d74410bc0
  $fEnumHeight_go9 :: GHC.Prim.Int# -> [PhonemeData.Height]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
60079db4dd97570a8e4fd882d78d3a98
  $fEnumLength :: GHC.Enum.Enum PhonemeData.Length
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ PhonemeData.Length
                  PhonemeData.$fEnumLength_$csucc
                  PhonemeData.$fEnumLength_$cpred
                  PhonemeData.$fEnumLength_$ctoEnum
                  PhonemeData.$fEnumLength_$cfromEnum
                  PhonemeData.$fEnumLength_$cenumFrom
                  PhonemeData.$fEnumLength_$cenumFromThen
                  PhonemeData.$fEnumLength_$cenumFromTo
                  PhonemeData.$fEnumLength_$cenumFromThenTo -}
60079db4dd97570a8e4fd882d78d3a98
  $fEnumLength1 :: GHC.Prim.Int# -> PhonemeData.Length
  {- Arity: 1, Strictness: <L,U>x -}
60079db4dd97570a8e4fd882d78d3a98
  $fEnumLength2 :: [PhonemeData.Length]
  {- Unfolding: (PhonemeData.$fEnumLength_go3 2#) -}
60079db4dd97570a8e4fd882d78d3a98
  $fEnumLength3 :: [PhonemeData.Length]
  {- Unfolding: (PhonemeData.$fEnumLength_go4 1#) -}
60079db4dd97570a8e4fd882d78d3a98
  $fEnumLength4 :: [PhonemeData.Length]
  {- Unfolding: (PhonemeData.$fEnumLength_go5 0#) -}
60079db4dd97570a8e4fd882d78d3a98
  $fEnumLength5 :: PhonemeData.Length
  {- Strictness: x -}
60079db4dd97570a8e4fd882d78d3a98
  $fEnumLength6 :: PhonemeData.Length
  {- Strictness: x -}
60079db4dd97570a8e4fd882d78d3a98
  $fEnumLength_$cenumFrom ::
    PhonemeData.Length -> [PhonemeData.Length]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (a :: PhonemeData.Length) ->
                 case a of wild {
                   PhonemeData.SHORT -> PhonemeData.$fEnumLength4
                   PhonemeData.NORMAL -> PhonemeData.$fEnumLength3
                   PhonemeData.LONG -> PhonemeData.$fEnumLength2 }) -}
60079db4dd97570a8e4fd882d78d3a98
  $fEnumLength_$cenumFromThen ::
    PhonemeData.Length -> PhonemeData.Length -> [PhonemeData.Length]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: PhonemeData.Length)
                   (b :: PhonemeData.Length) ->
                 let {
                   $j :: GHC.Prim.Int# -> [PhonemeData.Length]
                     {- Arity: 1, Strictness: <S,U> -}
                   = \ (a# :: GHC.Prim.Int#)[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int# -> [PhonemeData.Length]
                         {- Arity: 1, Strictness: <S,U> -}
                       = \ (b# :: GHC.Prim.Int#)[OneShot] ->
                         let {
                           $j2 :: GHC.Prim.Int# -> [PhonemeData.Length]
                             {- Arity: 1, Strictness: <S,U> -}
                           = \ (y :: GHC.Prim.Int#)[OneShot] ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# b# a#) of wild {
                               GHC.Types.False
                               -> GHC.Enum.efdtIntDnFB
                                    @ [PhonemeData.Length]
                                    PhonemeData.$fEnumLength_c1
                                    (GHC.Types.[] @ PhonemeData.Length)
                                    a#
                                    b#
                                    y
                               GHC.Types.True
                               -> GHC.Enum.efdtIntUpFB
                                    @ [PhonemeData.Length]
                                    PhonemeData.$fEnumLength_c1
                                    (GHC.Types.[] @ PhonemeData.Length)
                                    a#
                                    b#
                                    y }
                         } in
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.># a# b#) of wild {
                           GHC.Types.False -> $j2 2# GHC.Types.True -> $j2 0# }
                     } in
                     case b of wild {
                       PhonemeData.SHORT -> $j1 0#
                       PhonemeData.NORMAL -> $j1 1#
                       PhonemeData.LONG -> $j1 2# }
                 } in
                 case a of wild {
                   PhonemeData.SHORT -> $j 0#
                   PhonemeData.NORMAL -> $j 1#
                   PhonemeData.LONG -> $j 2# }) -}
60079db4dd97570a8e4fd882d78d3a98
  $fEnumLength_$cenumFromThenTo ::
    PhonemeData.Length
    -> PhonemeData.Length -> PhonemeData.Length -> [PhonemeData.Length]
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U>,
     Unfolding: (\ (x1 :: PhonemeData.Length)
                   (x2 :: PhonemeData.Length)
                   (y :: PhonemeData.Length) ->
                 let {
                   $j :: GHC.Prim.Int# -> [PhonemeData.Length]
                     {- Arity: 1, Strictness: <S,U> -}
                   = \ (x4 :: GHC.Prim.Int#)[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int# -> [PhonemeData.Length]
                         {- Arity: 1, Strictness: <S,U> -}
                       = \ (x5 :: GHC.Prim.Int#)[OneShot] ->
                         case y of wild {
                           PhonemeData.SHORT
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [PhonemeData.Length]
                                     PhonemeData.$fEnumLength_c
                                     (GHC.Types.[] @ PhonemeData.Length)
                                     x4
                                     x5
                                     0#
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [PhonemeData.Length]
                                     PhonemeData.$fEnumLength_c
                                     (GHC.Types.[] @ PhonemeData.Length)
                                     x4
                                     x5
                                     0# }
                           PhonemeData.NORMAL
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [PhonemeData.Length]
                                     PhonemeData.$fEnumLength_c
                                     (GHC.Types.[] @ PhonemeData.Length)
                                     x4
                                     x5
                                     1#
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [PhonemeData.Length]
                                     PhonemeData.$fEnumLength_c
                                     (GHC.Types.[] @ PhonemeData.Length)
                                     x4
                                     x5
                                     1# }
                           PhonemeData.LONG
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [PhonemeData.Length]
                                     PhonemeData.$fEnumLength_c
                                     (GHC.Types.[] @ PhonemeData.Length)
                                     x4
                                     x5
                                     2#
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [PhonemeData.Length]
                                     PhonemeData.$fEnumLength_c
                                     (GHC.Types.[] @ PhonemeData.Length)
                                     x4
                                     x5
                                     2# } }
                     } in
                     case x2 of wild {
                       PhonemeData.SHORT -> $j1 0#
                       PhonemeData.NORMAL -> $j1 1#
                       PhonemeData.LONG -> $j1 2# }
                 } in
                 case x1 of wild {
                   PhonemeData.SHORT -> $j 0#
                   PhonemeData.NORMAL -> $j 1#
                   PhonemeData.LONG -> $j 2# }) -}
60079db4dd97570a8e4fd882d78d3a98
  $fEnumLength_$cenumFromTo ::
    PhonemeData.Length -> PhonemeData.Length -> [PhonemeData.Length]
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x :: PhonemeData.Length)
                   (y :: PhonemeData.Length) ->
                 let {
                   $j :: GHC.Prim.Int# -> [PhonemeData.Length]
                     {- Arity: 1, Strictness: <S,U> -}
                   = \ (x1 :: GHC.Prim.Int#)[OneShot] ->
                     case y of wild {
                       PhonemeData.SHORT
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 0#) of wild1 {
                            GHC.Types.False -> PhonemeData.$fEnumLength_go2 x1
                            GHC.Types.True -> GHC.Types.[] @ PhonemeData.Length }
                       PhonemeData.NORMAL
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 1#) of wild1 {
                            GHC.Types.False -> PhonemeData.$fEnumLength_go1 x1
                            GHC.Types.True -> GHC.Types.[] @ PhonemeData.Length }
                       PhonemeData.LONG
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 2#) of wild1 {
                            GHC.Types.False -> PhonemeData.$fEnumLength_go x1
                            GHC.Types.True -> GHC.Types.[] @ PhonemeData.Length } }
                 } in
                 case x of wild {
                   PhonemeData.SHORT -> $j 0#
                   PhonemeData.NORMAL -> $j 1#
                   PhonemeData.LONG -> $j 2# }) -}
60079db4dd97570a8e4fd882d78d3a98
  $fEnumLength_$cfromEnum :: PhonemeData.Length -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: PhonemeData.Length) ->
                 case a of wild {
                   PhonemeData.SHORT -> GHC.Types.I# 0#
                   PhonemeData.NORMAL -> GHC.Types.I# 1#
                   PhonemeData.LONG -> GHC.Types.I# 2# }) -}
60079db4dd97570a8e4fd882d78d3a98
  $fEnumLength_$cpred :: PhonemeData.Length -> PhonemeData.Length
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: PhonemeData.Length) ->
                 case a of wild {
                   PhonemeData.SHORT -> PhonemeData.$fEnumLength5
                   PhonemeData.NORMAL -> PhonemeData.SHORT
                   PhonemeData.LONG -> PhonemeData.NORMAL }) -}
60079db4dd97570a8e4fd882d78d3a98
  $fEnumLength_$csucc :: PhonemeData.Length -> PhonemeData.Length
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: PhonemeData.Length) ->
                 case a of wild {
                   PhonemeData.SHORT -> PhonemeData.NORMAL
                   PhonemeData.NORMAL -> PhonemeData.LONG
                   PhonemeData.LONG -> PhonemeData.$fEnumLength6 }) -}
60079db4dd97570a8e4fd882d78d3a98
  $fEnumLength_$ctoEnum :: GHC.Types.Int -> PhonemeData.Length
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 PhonemeData.$w$ctoEnum2 ww1 }) -}
60079db4dd97570a8e4fd882d78d3a98
  $fEnumLength_c ::
    GHC.Types.Int -> [PhonemeData.Length] -> [PhonemeData.Length]
  {- Arity: 2, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: GHC.Types.Int) (ys :: [PhonemeData.Length]) ->
                 GHC.Types.:
                   @ PhonemeData.Length
                   (PhonemeData.$fEnumLength_$ctoEnum x)
                   ys) -}
60079db4dd97570a8e4fd882d78d3a98
  $fEnumLength_c1 ::
    GHC.Types.Int -> [PhonemeData.Length] -> [PhonemeData.Length]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: GHC.Types.Int) (ys :: [PhonemeData.Length]) ->
                 GHC.Types.:
                   @ PhonemeData.Length
                   (case x of wild { GHC.Types.I# a ->
                    GHC.Prim.tagToEnum# @ PhonemeData.Length a })
                   ys) -}
60079db4dd97570a8e4fd882d78d3a98
  $fEnumLength_go :: GHC.Prim.Int# -> [PhonemeData.Length]
  {- Arity: 1, Strictness: <L,U> -}
60079db4dd97570a8e4fd882d78d3a98
  $fEnumLength_go1 :: GHC.Prim.Int# -> [PhonemeData.Length]
  {- Arity: 1, Strictness: <L,U> -}
60079db4dd97570a8e4fd882d78d3a98
  $fEnumLength_go2 :: GHC.Prim.Int# -> [PhonemeData.Length]
  {- Arity: 1, Strictness: <L,U> -}
60079db4dd97570a8e4fd882d78d3a98
  $fEnumLength_go3 :: GHC.Prim.Int# -> [PhonemeData.Length]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
60079db4dd97570a8e4fd882d78d3a98
  $fEnumLength_go4 :: GHC.Prim.Int# -> [PhonemeData.Length]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
60079db4dd97570a8e4fd882d78d3a98
  $fEnumLength_go5 :: GHC.Prim.Int# -> [PhonemeData.Length]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
cc18ad7b6a428637be9e42d493f6b8da
  $fEnumManner :: GHC.Enum.Enum PhonemeData.Manner
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ PhonemeData.Manner
                  PhonemeData.$fEnumManner_$csucc
                  PhonemeData.$fEnumManner_$cpred
                  PhonemeData.$fEnumManner_$ctoEnum
                  PhonemeData.$fEnumManner_$cfromEnum
                  PhonemeData.$fEnumManner_$cenumFrom
                  PhonemeData.$fEnumManner_$cenumFromThen
                  PhonemeData.$fEnumManner_$cenumFromTo
                  PhonemeData.$fEnumManner_$cenumFromThenTo -}
cc18ad7b6a428637be9e42d493f6b8da
  $fEnumManner1 :: GHC.Prim.Int# -> PhonemeData.Manner
  {- Arity: 1, Strictness: <L,U>x -}
cc18ad7b6a428637be9e42d493f6b8da
  $fEnumManner2 :: PhonemeData.Manner
  {- Strictness: x -}
cc18ad7b6a428637be9e42d493f6b8da
  $fEnumManner3 :: PhonemeData.Manner
  {- Strictness: x -}
cc18ad7b6a428637be9e42d493f6b8da
  $fEnumManner_$cenumFrom ::
    PhonemeData.Manner -> [PhonemeData.Manner]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (a :: PhonemeData.Manner) ->
                 let {
                   x0 :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ PhonemeData.Manner a
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.># x0 12#) of wild {
                   GHC.Types.False -> PhonemeData.$fEnumManner_go x0
                   GHC.Types.True -> GHC.Types.[] @ PhonemeData.Manner }) -}
cc18ad7b6a428637be9e42d493f6b8da
  $fEnumManner_$cenumFromThen ::
    PhonemeData.Manner -> PhonemeData.Manner -> [PhonemeData.Manner]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: PhonemeData.Manner)
                   (b :: PhonemeData.Manner) ->
                 let {
                   a# :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ PhonemeData.Manner a
                 } in
                 let {
                   b# :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ PhonemeData.Manner b
                 } in
                 let {
                   $j :: GHC.Prim.Int# -> [PhonemeData.Manner]
                     {- Arity: 1, Strictness: <S,U> -}
                   = \ (y :: GHC.Prim.Int#)[OneShot] ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# b# a#) of wild {
                       GHC.Types.False
                       -> GHC.Enum.efdtIntDnFB
                            @ [PhonemeData.Manner]
                            PhonemeData.$fEnumManner_c1
                            (GHC.Types.[] @ PhonemeData.Manner)
                            a#
                            b#
                            y
                       GHC.Types.True
                       -> GHC.Enum.efdtIntUpFB
                            @ [PhonemeData.Manner]
                            PhonemeData.$fEnumManner_c1
                            (GHC.Types.[] @ PhonemeData.Manner)
                            a#
                            b#
                            y }
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.># a# b#) of wild {
                   GHC.Types.False -> $j 12# GHC.Types.True -> $j 0# }) -}
cc18ad7b6a428637be9e42d493f6b8da
  $fEnumManner_$cenumFromThenTo ::
    PhonemeData.Manner
    -> PhonemeData.Manner -> PhonemeData.Manner -> [PhonemeData.Manner]
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U>,
     Unfolding: (\ (x1 :: PhonemeData.Manner)
                   (x2 :: PhonemeData.Manner)
                   (y :: PhonemeData.Manner) ->
                 let {
                   x4 :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ PhonemeData.Manner x1
                 } in
                 let {
                   x5 :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ PhonemeData.Manner x2
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# x5 x4) of wild {
                   GHC.Types.False
                   -> GHC.Enum.efdtIntDnFB
                        @ [PhonemeData.Manner]
                        PhonemeData.$fEnumManner_c
                        (GHC.Types.[] @ PhonemeData.Manner)
                        x4
                        x5
                        (GHC.Prim.dataToTag# @ PhonemeData.Manner y)
                   GHC.Types.True
                   -> GHC.Enum.efdtIntUpFB
                        @ [PhonemeData.Manner]
                        PhonemeData.$fEnumManner_c
                        (GHC.Types.[] @ PhonemeData.Manner)
                        x4
                        x5
                        (GHC.Prim.dataToTag# @ PhonemeData.Manner y) }) -}
cc18ad7b6a428637be9e42d493f6b8da
  $fEnumManner_$cenumFromTo ::
    PhonemeData.Manner -> PhonemeData.Manner -> [PhonemeData.Manner]
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x :: PhonemeData.Manner)
                   (y :: PhonemeData.Manner) ->
                 let {
                   x0 :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ PhonemeData.Manner x
                 } in
                 let {
                   y1 :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ PhonemeData.Manner y
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.># x0 y1) of wild {
                   GHC.Types.False
                   -> letrec {
                        go25 :: GHC.Prim.Int# -> [PhonemeData.Manner]
                          {- Arity: 1, Strictness: <L,U> -}
                        = \ (x1 :: GHC.Prim.Int#) ->
                          GHC.Types.:
                            @ PhonemeData.Manner
                            (case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# x1 0#) of wild1 {
                               GHC.Types.False -> PhonemeData.$fEnumManner1 x1
                               GHC.Types.True
                               -> case GHC.Prim.tagToEnum#
                                         @ GHC.Types.Bool
                                         (GHC.Prim.<=# x1 12#) of wild2 {
                                    GHC.Types.False -> PhonemeData.$fEnumManner1 x1
                                    GHC.Types.True
                                    -> GHC.Prim.tagToEnum# @ PhonemeData.Manner x1 } })
                            (case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.==# x1 y1) of wild1 {
                               GHC.Types.False -> go25 (GHC.Prim.+# x1 1#)
                               GHC.Types.True -> GHC.Types.[] @ PhonemeData.Manner })
                      } in
                      go25 x0
                   GHC.Types.True -> GHC.Types.[] @ PhonemeData.Manner }) -}
cc18ad7b6a428637be9e42d493f6b8da
  $fEnumManner_$cfromEnum :: PhonemeData.Manner -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: PhonemeData.Manner) ->
                 case a of x1 { DEFAULT ->
                 GHC.Types.I# (GHC.Prim.dataToTag# @ PhonemeData.Manner x1) }) -}
cc18ad7b6a428637be9e42d493f6b8da
  $fEnumManner_$cpred :: PhonemeData.Manner -> PhonemeData.Manner
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: PhonemeData.Manner) ->
                 case a of x1 { DEFAULT ->
                 case GHC.Prim.dataToTag# @ PhonemeData.Manner x1 of wild {
                   DEFAULT
                   -> GHC.Prim.tagToEnum# @ PhonemeData.Manner (GHC.Prim.+# wild -1#)
                   0# -> PhonemeData.$fEnumManner2 } }) -}
cc18ad7b6a428637be9e42d493f6b8da
  $fEnumManner_$csucc :: PhonemeData.Manner -> PhonemeData.Manner
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: PhonemeData.Manner) ->
                 case a of x1 { DEFAULT ->
                 case GHC.Prim.dataToTag# @ PhonemeData.Manner x1 of wild {
                   DEFAULT
                   -> GHC.Prim.tagToEnum# @ PhonemeData.Manner (GHC.Prim.+# wild 1#)
                   12# -> PhonemeData.$fEnumManner3 } }) -}
cc18ad7b6a428637be9e42d493f6b8da
  $fEnumManner_$ctoEnum :: GHC.Types.Int -> PhonemeData.Manner
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 PhonemeData.$w$ctoEnum3 ww1 }) -}
cc18ad7b6a428637be9e42d493f6b8da
  $fEnumManner_c ::
    GHC.Types.Int -> [PhonemeData.Manner] -> [PhonemeData.Manner]
  {- Arity: 2, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: GHC.Types.Int) (ys :: [PhonemeData.Manner]) ->
                 GHC.Types.:
                   @ PhonemeData.Manner
                   (PhonemeData.$fEnumManner_$ctoEnum x)
                   ys) -}
cc18ad7b6a428637be9e42d493f6b8da
  $fEnumManner_c1 ::
    GHC.Types.Int -> [PhonemeData.Manner] -> [PhonemeData.Manner]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: GHC.Types.Int) (ys :: [PhonemeData.Manner]) ->
                 GHC.Types.:
                   @ PhonemeData.Manner
                   (case x of wild { GHC.Types.I# a ->
                    GHC.Prim.tagToEnum# @ PhonemeData.Manner a })
                   ys) -}
cc18ad7b6a428637be9e42d493f6b8da
  $fEnumManner_go :: GHC.Prim.Int# -> [PhonemeData.Manner]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
2e1a0e09a78074c21fc0136e518a2133
  $fEnumPhonation :: GHC.Enum.Enum PhonemeData.Phonation
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ PhonemeData.Phonation
                  PhonemeData.$fEnumPhonation_$csucc
                  PhonemeData.$fEnumPhonation_$cpred
                  PhonemeData.$fEnumPhonation_$ctoEnum
                  PhonemeData.$fEnumPhonation_$cfromEnum
                  PhonemeData.$fEnumPhonation_$cenumFrom
                  PhonemeData.$fEnumPhonation_$cenumFromThen
                  PhonemeData.$fEnumPhonation_$cenumFromTo
                  PhonemeData.$fEnumPhonation_$cenumFromThenTo -}
2e1a0e09a78074c21fc0136e518a2133
  $fEnumPhonation1 :: [PhonemeData.Phonation]
  {- Unfolding: (PhonemeData.$fEnumPhonation_go7 6#) -}
2e1a0e09a78074c21fc0136e518a2133
  $fEnumPhonation10 :: PhonemeData.Phonation
  {- Strictness: x -}
2e1a0e09a78074c21fc0136e518a2133
  $fEnumPhonation2 :: [PhonemeData.Phonation]
  {- Unfolding: (PhonemeData.$fEnumPhonation_go8 5#) -}
2e1a0e09a78074c21fc0136e518a2133
  $fEnumPhonation3 :: [PhonemeData.Phonation]
  {- Unfolding: (PhonemeData.$fEnumPhonation_go9 4#) -}
2e1a0e09a78074c21fc0136e518a2133
  $fEnumPhonation4 :: [PhonemeData.Phonation]
  {- Unfolding: (PhonemeData.$fEnumPhonation_go10 3#) -}
2e1a0e09a78074c21fc0136e518a2133
  $fEnumPhonation5 :: [PhonemeData.Phonation]
  {- Unfolding: (PhonemeData.$fEnumPhonation_go11 2#) -}
2e1a0e09a78074c21fc0136e518a2133
  $fEnumPhonation6 :: [PhonemeData.Phonation]
  {- Unfolding: (PhonemeData.$fEnumPhonation_go12 1#) -}
2e1a0e09a78074c21fc0136e518a2133
  $fEnumPhonation7 :: [PhonemeData.Phonation]
  {- Unfolding: (PhonemeData.$fEnumPhonation_go13 0#) -}
2e1a0e09a78074c21fc0136e518a2133
  $fEnumPhonation8 :: GHC.Prim.Int# -> PhonemeData.Phonation
  {- Arity: 1, Strictness: <L,U>x -}
2e1a0e09a78074c21fc0136e518a2133
  $fEnumPhonation9 :: PhonemeData.Phonation
  {- Strictness: x -}
2e1a0e09a78074c21fc0136e518a2133
  $fEnumPhonation_$cenumFrom ::
    PhonemeData.Phonation -> [PhonemeData.Phonation]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (a :: PhonemeData.Phonation) ->
                 case a of wild {
                   PhonemeData.VOICELESS -> PhonemeData.$fEnumPhonation7
                   PhonemeData.BREATHY -> PhonemeData.$fEnumPhonation6
                   PhonemeData.SLACK -> PhonemeData.$fEnumPhonation5
                   PhonemeData.MODAL -> PhonemeData.$fEnumPhonation4
                   PhonemeData.STIFF -> PhonemeData.$fEnumPhonation3
                   PhonemeData.CREAKY -> PhonemeData.$fEnumPhonation2
                   PhonemeData.ASPIRATED -> PhonemeData.$fEnumPhonation1 }) -}
2e1a0e09a78074c21fc0136e518a2133
  $fEnumPhonation_$cenumFromThen ::
    PhonemeData.Phonation
    -> PhonemeData.Phonation -> [PhonemeData.Phonation]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: PhonemeData.Phonation)
                   (b :: PhonemeData.Phonation) ->
                 let {
                   $j :: GHC.Prim.Int# -> [PhonemeData.Phonation]
                     {- Arity: 1, Strictness: <S,U> -}
                   = \ (a# :: GHC.Prim.Int#)[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int# -> [PhonemeData.Phonation]
                         {- Arity: 1, Strictness: <S,U> -}
                       = \ (b# :: GHC.Prim.Int#)[OneShot] ->
                         let {
                           $j2 :: GHC.Prim.Int# -> [PhonemeData.Phonation]
                             {- Arity: 1, Strictness: <S,U> -}
                           = \ (y :: GHC.Prim.Int#)[OneShot] ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# b# a#) of wild {
                               GHC.Types.False
                               -> GHC.Enum.efdtIntDnFB
                                    @ [PhonemeData.Phonation]
                                    PhonemeData.$fEnumPhonation_c
                                    (GHC.Types.[] @ PhonemeData.Phonation)
                                    a#
                                    b#
                                    y
                               GHC.Types.True
                               -> GHC.Enum.efdtIntUpFB
                                    @ [PhonemeData.Phonation]
                                    PhonemeData.$fEnumPhonation_c
                                    (GHC.Types.[] @ PhonemeData.Phonation)
                                    a#
                                    b#
                                    y }
                         } in
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.># a# b#) of wild {
                           GHC.Types.False -> $j2 6# GHC.Types.True -> $j2 0# }
                     } in
                     case b of wild {
                       PhonemeData.VOICELESS -> $j1 0#
                       PhonemeData.BREATHY -> $j1 1#
                       PhonemeData.SLACK -> $j1 2#
                       PhonemeData.MODAL -> $j1 3#
                       PhonemeData.STIFF -> $j1 4#
                       PhonemeData.CREAKY -> $j1 5#
                       PhonemeData.ASPIRATED -> $j1 6# }
                 } in
                 case a of wild {
                   PhonemeData.VOICELESS -> $j 0#
                   PhonemeData.BREATHY -> $j 1#
                   PhonemeData.SLACK -> $j 2#
                   PhonemeData.MODAL -> $j 3#
                   PhonemeData.STIFF -> $j 4#
                   PhonemeData.CREAKY -> $j 5#
                   PhonemeData.ASPIRATED -> $j 6# }) -}
2e1a0e09a78074c21fc0136e518a2133
  $fEnumPhonation_$cenumFromThenTo ::
    PhonemeData.Phonation
    -> PhonemeData.Phonation
    -> PhonemeData.Phonation
    -> [PhonemeData.Phonation]
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U> -}
2e1a0e09a78074c21fc0136e518a2133
  $fEnumPhonation_$cenumFromTo ::
    PhonemeData.Phonation
    -> PhonemeData.Phonation -> [PhonemeData.Phonation]
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x :: PhonemeData.Phonation)
                   (y :: PhonemeData.Phonation) ->
                 let {
                   $j :: GHC.Prim.Int# -> [PhonemeData.Phonation]
                     {- Arity: 1, Strictness: <S,U> -}
                   = \ (x1 :: GHC.Prim.Int#)[OneShot] ->
                     case y of wild {
                       PhonemeData.VOICELESS
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 0#) of wild1 {
                            GHC.Types.False -> PhonemeData.$fEnumPhonation_go6 x1
                            GHC.Types.True -> GHC.Types.[] @ PhonemeData.Phonation }
                       PhonemeData.BREATHY
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 1#) of wild1 {
                            GHC.Types.False -> PhonemeData.$fEnumPhonation_go5 x1
                            GHC.Types.True -> GHC.Types.[] @ PhonemeData.Phonation }
                       PhonemeData.SLACK
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 2#) of wild1 {
                            GHC.Types.False -> PhonemeData.$fEnumPhonation_go4 x1
                            GHC.Types.True -> GHC.Types.[] @ PhonemeData.Phonation }
                       PhonemeData.MODAL
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 3#) of wild1 {
                            GHC.Types.False -> PhonemeData.$fEnumPhonation_go3 x1
                            GHC.Types.True -> GHC.Types.[] @ PhonemeData.Phonation }
                       PhonemeData.STIFF
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 4#) of wild1 {
                            GHC.Types.False -> PhonemeData.$fEnumPhonation_go2 x1
                            GHC.Types.True -> GHC.Types.[] @ PhonemeData.Phonation }
                       PhonemeData.CREAKY
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 5#) of wild1 {
                            GHC.Types.False -> PhonemeData.$fEnumPhonation_go1 x1
                            GHC.Types.True -> GHC.Types.[] @ PhonemeData.Phonation }
                       PhonemeData.ASPIRATED
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 6#) of wild1 {
                            GHC.Types.False -> PhonemeData.$fEnumPhonation_go x1
                            GHC.Types.True -> GHC.Types.[] @ PhonemeData.Phonation } }
                 } in
                 case x of wild {
                   PhonemeData.VOICELESS -> $j 0#
                   PhonemeData.BREATHY -> $j 1#
                   PhonemeData.SLACK -> $j 2#
                   PhonemeData.MODAL -> $j 3#
                   PhonemeData.STIFF -> $j 4#
                   PhonemeData.CREAKY -> $j 5#
                   PhonemeData.ASPIRATED -> $j 6# }) -}
2e1a0e09a78074c21fc0136e518a2133
  $fEnumPhonation_$cfromEnum ::
    PhonemeData.Phonation -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: PhonemeData.Phonation) ->
                 case w of wild {
                   PhonemeData.VOICELESS -> GHC.Types.I# 0#
                   PhonemeData.BREATHY -> GHC.Types.I# 1#
                   PhonemeData.SLACK -> GHC.Types.I# 2#
                   PhonemeData.MODAL -> GHC.Types.I# 3#
                   PhonemeData.STIFF -> GHC.Types.I# 4#
                   PhonemeData.CREAKY -> GHC.Types.I# 5#
                   PhonemeData.ASPIRATED -> GHC.Types.I# 6# }) -}
2e1a0e09a78074c21fc0136e518a2133
  $fEnumPhonation_$cpred ::
    PhonemeData.Phonation -> PhonemeData.Phonation
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: PhonemeData.Phonation) ->
                 case a of wild {
                   PhonemeData.VOICELESS -> PhonemeData.$fEnumPhonation9
                   PhonemeData.BREATHY -> PhonemeData.VOICELESS
                   PhonemeData.SLACK -> PhonemeData.BREATHY
                   PhonemeData.MODAL -> PhonemeData.SLACK
                   PhonemeData.STIFF -> PhonemeData.MODAL
                   PhonemeData.CREAKY -> PhonemeData.STIFF
                   PhonemeData.ASPIRATED -> PhonemeData.CREAKY }) -}
2e1a0e09a78074c21fc0136e518a2133
  $fEnumPhonation_$csucc ::
    PhonemeData.Phonation -> PhonemeData.Phonation
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: PhonemeData.Phonation) ->
                 case a of wild {
                   PhonemeData.VOICELESS -> PhonemeData.BREATHY
                   PhonemeData.BREATHY -> PhonemeData.SLACK
                   PhonemeData.SLACK -> PhonemeData.MODAL
                   PhonemeData.MODAL -> PhonemeData.STIFF
                   PhonemeData.STIFF -> PhonemeData.CREAKY
                   PhonemeData.CREAKY -> PhonemeData.ASPIRATED
                   PhonemeData.ASPIRATED -> PhonemeData.$fEnumPhonation10 }) -}
2e1a0e09a78074c21fc0136e518a2133
  $fEnumPhonation_$ctoEnum :: GHC.Types.Int -> PhonemeData.Phonation
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 PhonemeData.$w$ctoEnum4 ww1 }) -}
2e1a0e09a78074c21fc0136e518a2133
  $fEnumPhonation_c ::
    GHC.Types.Int -> [PhonemeData.Phonation] -> [PhonemeData.Phonation]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: GHC.Types.Int) (ys :: [PhonemeData.Phonation]) ->
                 GHC.Types.:
                   @ PhonemeData.Phonation
                   (case x of wild { GHC.Types.I# a ->
                    GHC.Prim.tagToEnum# @ PhonemeData.Phonation a })
                   ys) -}
2e1a0e09a78074c21fc0136e518a2133
  $fEnumPhonation_go :: GHC.Prim.Int# -> [PhonemeData.Phonation]
  {- Arity: 1, Strictness: <L,U> -}
2e1a0e09a78074c21fc0136e518a2133
  $fEnumPhonation_go1 :: GHC.Prim.Int# -> [PhonemeData.Phonation]
  {- Arity: 1, Strictness: <L,U> -}
2e1a0e09a78074c21fc0136e518a2133
  $fEnumPhonation_go10 :: GHC.Prim.Int# -> [PhonemeData.Phonation]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
2e1a0e09a78074c21fc0136e518a2133
  $fEnumPhonation_go11 :: GHC.Prim.Int# -> [PhonemeData.Phonation]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
2e1a0e09a78074c21fc0136e518a2133
  $fEnumPhonation_go12 :: GHC.Prim.Int# -> [PhonemeData.Phonation]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
2e1a0e09a78074c21fc0136e518a2133
  $fEnumPhonation_go13 :: GHC.Prim.Int# -> [PhonemeData.Phonation]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
2e1a0e09a78074c21fc0136e518a2133
  $fEnumPhonation_go2 :: GHC.Prim.Int# -> [PhonemeData.Phonation]
  {- Arity: 1, Strictness: <L,U> -}
2e1a0e09a78074c21fc0136e518a2133
  $fEnumPhonation_go3 :: GHC.Prim.Int# -> [PhonemeData.Phonation]
  {- Arity: 1, Strictness: <L,U> -}
2e1a0e09a78074c21fc0136e518a2133
  $fEnumPhonation_go4 :: GHC.Prim.Int# -> [PhonemeData.Phonation]
  {- Arity: 1, Strictness: <L,U> -}
2e1a0e09a78074c21fc0136e518a2133
  $fEnumPhonation_go5 :: GHC.Prim.Int# -> [PhonemeData.Phonation]
  {- Arity: 1, Strictness: <L,U> -}
2e1a0e09a78074c21fc0136e518a2133
  $fEnumPhonation_go6 :: GHC.Prim.Int# -> [PhonemeData.Phonation]
  {- Arity: 1, Strictness: <L,U> -}
2e1a0e09a78074c21fc0136e518a2133
  $fEnumPhonation_go7 :: GHC.Prim.Int# -> [PhonemeData.Phonation]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
2e1a0e09a78074c21fc0136e518a2133
  $fEnumPhonation_go8 :: GHC.Prim.Int# -> [PhonemeData.Phonation]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
2e1a0e09a78074c21fc0136e518a2133
  $fEnumPhonation_go9 :: GHC.Prim.Int# -> [PhonemeData.Phonation]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
27d4fb2260414ca95f988dc9fef00141
  $fEnumPlace :: GHC.Enum.Enum PhonemeData.Place
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ PhonemeData.Place
                  PhonemeData.$fEnumPlace_$csucc
                  PhonemeData.$fEnumPlace_$cpred
                  PhonemeData.$fEnumPlace_$ctoEnum
                  PhonemeData.$fEnumPlace_$cfromEnum
                  PhonemeData.$fEnumPlace_$cenumFrom
                  PhonemeData.$fEnumPlace_$cenumFromThen
                  PhonemeData.$fEnumPlace_$cenumFromTo
                  PhonemeData.$fEnumPlace_$cenumFromThenTo -}
27d4fb2260414ca95f988dc9fef00141
  $fEnumPlace1 :: GHC.Prim.Int# -> PhonemeData.Place
  {- Arity: 1, Strictness: <L,U>x -}
27d4fb2260414ca95f988dc9fef00141
  $fEnumPlace2 :: PhonemeData.Place
  {- Strictness: x -}
27d4fb2260414ca95f988dc9fef00141
  $fEnumPlace3 :: PhonemeData.Place
  {- Strictness: x -}
27d4fb2260414ca95f988dc9fef00141
  $fEnumPlace_$cenumFrom :: PhonemeData.Place -> [PhonemeData.Place]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (a :: PhonemeData.Place) ->
                 let {
                   x0 :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ PhonemeData.Place a
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.># x0 18#) of wild {
                   GHC.Types.False -> PhonemeData.$fEnumPlace_go x0
                   GHC.Types.True -> GHC.Types.[] @ PhonemeData.Place }) -}
27d4fb2260414ca95f988dc9fef00141
  $fEnumPlace_$cenumFromThen ::
    PhonemeData.Place -> PhonemeData.Place -> [PhonemeData.Place]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: PhonemeData.Place) (b :: PhonemeData.Place) ->
                 let {
                   a# :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ PhonemeData.Place a
                 } in
                 let {
                   b# :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ PhonemeData.Place b
                 } in
                 let {
                   $j :: GHC.Prim.Int# -> [PhonemeData.Place]
                     {- Arity: 1, Strictness: <S,U> -}
                   = \ (y :: GHC.Prim.Int#)[OneShot] ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# b# a#) of wild {
                       GHC.Types.False
                       -> GHC.Enum.efdtIntDnFB
                            @ [PhonemeData.Place]
                            PhonemeData.$fEnumPlace_c1
                            (GHC.Types.[] @ PhonemeData.Place)
                            a#
                            b#
                            y
                       GHC.Types.True
                       -> GHC.Enum.efdtIntUpFB
                            @ [PhonemeData.Place]
                            PhonemeData.$fEnumPlace_c1
                            (GHC.Types.[] @ PhonemeData.Place)
                            a#
                            b#
                            y }
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.># a# b#) of wild {
                   GHC.Types.False -> $j 18# GHC.Types.True -> $j 0# }) -}
27d4fb2260414ca95f988dc9fef00141
  $fEnumPlace_$cenumFromThenTo ::
    PhonemeData.Place
    -> PhonemeData.Place -> PhonemeData.Place -> [PhonemeData.Place]
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U>,
     Unfolding: (\ (x1 :: PhonemeData.Place)
                   (x2 :: PhonemeData.Place)
                   (y :: PhonemeData.Place) ->
                 let {
                   x4 :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ PhonemeData.Place x1
                 } in
                 let {
                   x5 :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ PhonemeData.Place x2
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# x5 x4) of wild {
                   GHC.Types.False
                   -> GHC.Enum.efdtIntDnFB
                        @ [PhonemeData.Place]
                        PhonemeData.$fEnumPlace_c
                        (GHC.Types.[] @ PhonemeData.Place)
                        x4
                        x5
                        (GHC.Prim.dataToTag# @ PhonemeData.Place y)
                   GHC.Types.True
                   -> GHC.Enum.efdtIntUpFB
                        @ [PhonemeData.Place]
                        PhonemeData.$fEnumPlace_c
                        (GHC.Types.[] @ PhonemeData.Place)
                        x4
                        x5
                        (GHC.Prim.dataToTag# @ PhonemeData.Place y) }) -}
27d4fb2260414ca95f988dc9fef00141
  $fEnumPlace_$cenumFromTo ::
    PhonemeData.Place -> PhonemeData.Place -> [PhonemeData.Place]
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x :: PhonemeData.Place) (y :: PhonemeData.Place) ->
                 let {
                   x0 :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ PhonemeData.Place x
                 } in
                 let {
                   y1 :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ PhonemeData.Place y
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.># x0 y1) of wild {
                   GHC.Types.False
                   -> letrec {
                        go25 :: GHC.Prim.Int# -> [PhonemeData.Place]
                          {- Arity: 1, Strictness: <L,U> -}
                        = \ (x1 :: GHC.Prim.Int#) ->
                          GHC.Types.:
                            @ PhonemeData.Place
                            (case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# x1 0#) of wild1 {
                               GHC.Types.False -> PhonemeData.$fEnumPlace1 x1
                               GHC.Types.True
                               -> case GHC.Prim.tagToEnum#
                                         @ GHC.Types.Bool
                                         (GHC.Prim.<=# x1 18#) of wild2 {
                                    GHC.Types.False -> PhonemeData.$fEnumPlace1 x1
                                    GHC.Types.True
                                    -> GHC.Prim.tagToEnum# @ PhonemeData.Place x1 } })
                            (case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.==# x1 y1) of wild1 {
                               GHC.Types.False -> go25 (GHC.Prim.+# x1 1#)
                               GHC.Types.True -> GHC.Types.[] @ PhonemeData.Place })
                      } in
                      go25 x0
                   GHC.Types.True -> GHC.Types.[] @ PhonemeData.Place }) -}
27d4fb2260414ca95f988dc9fef00141
  $fEnumPlace_$cfromEnum :: PhonemeData.Place -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: PhonemeData.Place) ->
                 case a of x1 { DEFAULT ->
                 GHC.Types.I# (GHC.Prim.dataToTag# @ PhonemeData.Place x1) }) -}
27d4fb2260414ca95f988dc9fef00141
  $fEnumPlace_$cpred :: PhonemeData.Place -> PhonemeData.Place
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: PhonemeData.Place) ->
                 case a of x1 { DEFAULT ->
                 case GHC.Prim.dataToTag# @ PhonemeData.Place x1 of wild {
                   DEFAULT
                   -> GHC.Prim.tagToEnum# @ PhonemeData.Place (GHC.Prim.+# wild -1#)
                   0# -> PhonemeData.$fEnumPlace2 } }) -}
27d4fb2260414ca95f988dc9fef00141
  $fEnumPlace_$csucc :: PhonemeData.Place -> PhonemeData.Place
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: PhonemeData.Place) ->
                 case a of x1 { DEFAULT ->
                 case GHC.Prim.dataToTag# @ PhonemeData.Place x1 of wild {
                   DEFAULT
                   -> GHC.Prim.tagToEnum# @ PhonemeData.Place (GHC.Prim.+# wild 1#)
                   18# -> PhonemeData.$fEnumPlace3 } }) -}
27d4fb2260414ca95f988dc9fef00141
  $fEnumPlace_$ctoEnum :: GHC.Types.Int -> PhonemeData.Place
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 PhonemeData.$w$ctoEnum5 ww1 }) -}
27d4fb2260414ca95f988dc9fef00141
  $fEnumPlace_c ::
    GHC.Types.Int -> [PhonemeData.Place] -> [PhonemeData.Place]
  {- Arity: 2, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: GHC.Types.Int) (ys :: [PhonemeData.Place]) ->
                 GHC.Types.:
                   @ PhonemeData.Place
                   (PhonemeData.$fEnumPlace_$ctoEnum x)
                   ys) -}
27d4fb2260414ca95f988dc9fef00141
  $fEnumPlace_c1 ::
    GHC.Types.Int -> [PhonemeData.Place] -> [PhonemeData.Place]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: GHC.Types.Int) (ys :: [PhonemeData.Place]) ->
                 GHC.Types.:
                   @ PhonemeData.Place
                   (case x of wild { GHC.Types.I# a ->
                    GHC.Prim.tagToEnum# @ PhonemeData.Place a })
                   ys) -}
27d4fb2260414ca95f988dc9fef00141
  $fEnumPlace_go :: GHC.Prim.Int# -> [PhonemeData.Place]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
e7b029a5844a6e008b95082c9c811e33
  $fEnumRoundedness :: GHC.Enum.Enum PhonemeData.Roundedness
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ PhonemeData.Roundedness
                  PhonemeData.$fEnumRoundedness_$csucc
                  PhonemeData.$fEnumRoundedness_$cpred
                  PhonemeData.$fEnumRoundedness_$ctoEnum
                  PhonemeData.$fEnumRoundedness_$cfromEnum
                  PhonemeData.$fEnumRoundedness_$cenumFrom
                  PhonemeData.$fEnumRoundedness_$cenumFromThen
                  PhonemeData.$fEnumRoundedness_$cenumFromTo
                  PhonemeData.$fEnumRoundedness_$cenumFromThenTo -}
e7b029a5844a6e008b95082c9c811e33
  $fEnumRoundedness1 :: GHC.Prim.Int# -> PhonemeData.Roundedness
  {- Arity: 1, Strictness: <L,U>x -}
e7b029a5844a6e008b95082c9c811e33
  $fEnumRoundedness2 :: [PhonemeData.Roundedness]
  {- Unfolding: (PhonemeData.$fEnumRoundedness_go3 2#) -}
e7b029a5844a6e008b95082c9c811e33
  $fEnumRoundedness3 :: [PhonemeData.Roundedness]
  {- Unfolding: (PhonemeData.$fEnumRoundedness_go4 1#) -}
e7b029a5844a6e008b95082c9c811e33
  $fEnumRoundedness4 :: [PhonemeData.Roundedness]
  {- Unfolding: (PhonemeData.$fEnumRoundedness_go5 0#) -}
e7b029a5844a6e008b95082c9c811e33
  $fEnumRoundedness5 :: PhonemeData.Roundedness
  {- Strictness: x -}
e7b029a5844a6e008b95082c9c811e33
  $fEnumRoundedness6 :: PhonemeData.Roundedness
  {- Strictness: x -}
e7b029a5844a6e008b95082c9c811e33
  $fEnumRoundedness_$cenumFrom ::
    PhonemeData.Roundedness -> [PhonemeData.Roundedness]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (a :: PhonemeData.Roundedness) ->
                 case a of wild {
                   PhonemeData.DEFAULT -> PhonemeData.$fEnumRoundedness4
                   PhonemeData.ROUNDED -> PhonemeData.$fEnumRoundedness3
                   PhonemeData.UNROUNDED -> PhonemeData.$fEnumRoundedness2 }) -}
e7b029a5844a6e008b95082c9c811e33
  $fEnumRoundedness_$cenumFromThen ::
    PhonemeData.Roundedness
    -> PhonemeData.Roundedness -> [PhonemeData.Roundedness]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: PhonemeData.Roundedness)
                   (b :: PhonemeData.Roundedness) ->
                 let {
                   $j :: GHC.Prim.Int# -> [PhonemeData.Roundedness]
                     {- Arity: 1, Strictness: <S,U> -}
                   = \ (a# :: GHC.Prim.Int#)[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int# -> [PhonemeData.Roundedness]
                         {- Arity: 1, Strictness: <S,U> -}
                       = \ (b# :: GHC.Prim.Int#)[OneShot] ->
                         let {
                           $j2 :: GHC.Prim.Int# -> [PhonemeData.Roundedness]
                             {- Arity: 1, Strictness: <S,U> -}
                           = \ (y :: GHC.Prim.Int#)[OneShot] ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# b# a#) of wild {
                               GHC.Types.False
                               -> GHC.Enum.efdtIntDnFB
                                    @ [PhonemeData.Roundedness]
                                    PhonemeData.$fEnumRoundedness_c1
                                    (GHC.Types.[] @ PhonemeData.Roundedness)
                                    a#
                                    b#
                                    y
                               GHC.Types.True
                               -> GHC.Enum.efdtIntUpFB
                                    @ [PhonemeData.Roundedness]
                                    PhonemeData.$fEnumRoundedness_c1
                                    (GHC.Types.[] @ PhonemeData.Roundedness)
                                    a#
                                    b#
                                    y }
                         } in
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.># a# b#) of wild {
                           GHC.Types.False -> $j2 2# GHC.Types.True -> $j2 0# }
                     } in
                     case b of wild {
                       PhonemeData.DEFAULT -> $j1 0#
                       PhonemeData.ROUNDED -> $j1 1#
                       PhonemeData.UNROUNDED -> $j1 2# }
                 } in
                 case a of wild {
                   PhonemeData.DEFAULT -> $j 0#
                   PhonemeData.ROUNDED -> $j 1#
                   PhonemeData.UNROUNDED -> $j 2# }) -}
e7b029a5844a6e008b95082c9c811e33
  $fEnumRoundedness_$cenumFromThenTo ::
    PhonemeData.Roundedness
    -> PhonemeData.Roundedness
    -> PhonemeData.Roundedness
    -> [PhonemeData.Roundedness]
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U>,
     Unfolding: (\ (x1 :: PhonemeData.Roundedness)
                   (x2 :: PhonemeData.Roundedness)
                   (y :: PhonemeData.Roundedness) ->
                 let {
                   $j :: GHC.Prim.Int# -> [PhonemeData.Roundedness]
                     {- Arity: 1, Strictness: <S,U> -}
                   = \ (x4 :: GHC.Prim.Int#)[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int# -> [PhonemeData.Roundedness]
                         {- Arity: 1, Strictness: <S,U> -}
                       = \ (x5 :: GHC.Prim.Int#)[OneShot] ->
                         case y of wild {
                           PhonemeData.DEFAULT
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [PhonemeData.Roundedness]
                                     PhonemeData.$fEnumRoundedness_c
                                     (GHC.Types.[] @ PhonemeData.Roundedness)
                                     x4
                                     x5
                                     0#
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [PhonemeData.Roundedness]
                                     PhonemeData.$fEnumRoundedness_c
                                     (GHC.Types.[] @ PhonemeData.Roundedness)
                                     x4
                                     x5
                                     0# }
                           PhonemeData.ROUNDED
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [PhonemeData.Roundedness]
                                     PhonemeData.$fEnumRoundedness_c
                                     (GHC.Types.[] @ PhonemeData.Roundedness)
                                     x4
                                     x5
                                     1#
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [PhonemeData.Roundedness]
                                     PhonemeData.$fEnumRoundedness_c
                                     (GHC.Types.[] @ PhonemeData.Roundedness)
                                     x4
                                     x5
                                     1# }
                           PhonemeData.UNROUNDED
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [PhonemeData.Roundedness]
                                     PhonemeData.$fEnumRoundedness_c
                                     (GHC.Types.[] @ PhonemeData.Roundedness)
                                     x4
                                     x5
                                     2#
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [PhonemeData.Roundedness]
                                     PhonemeData.$fEnumRoundedness_c
                                     (GHC.Types.[] @ PhonemeData.Roundedness)
                                     x4
                                     x5
                                     2# } }
                     } in
                     case x2 of wild {
                       PhonemeData.DEFAULT -> $j1 0#
                       PhonemeData.ROUNDED -> $j1 1#
                       PhonemeData.UNROUNDED -> $j1 2# }
                 } in
                 case x1 of wild {
                   PhonemeData.DEFAULT -> $j 0#
                   PhonemeData.ROUNDED -> $j 1#
                   PhonemeData.UNROUNDED -> $j 2# }) -}
e7b029a5844a6e008b95082c9c811e33
  $fEnumRoundedness_$cenumFromTo ::
    PhonemeData.Roundedness
    -> PhonemeData.Roundedness -> [PhonemeData.Roundedness]
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x :: PhonemeData.Roundedness)
                   (y :: PhonemeData.Roundedness) ->
                 let {
                   $j :: GHC.Prim.Int# -> [PhonemeData.Roundedness]
                     {- Arity: 1, Strictness: <S,U> -}
                   = \ (x1 :: GHC.Prim.Int#)[OneShot] ->
                     case y of wild {
                       PhonemeData.DEFAULT
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 0#) of wild1 {
                            GHC.Types.False -> PhonemeData.$fEnumRoundedness_go2 x1
                            GHC.Types.True -> GHC.Types.[] @ PhonemeData.Roundedness }
                       PhonemeData.ROUNDED
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 1#) of wild1 {
                            GHC.Types.False -> PhonemeData.$fEnumRoundedness_go1 x1
                            GHC.Types.True -> GHC.Types.[] @ PhonemeData.Roundedness }
                       PhonemeData.UNROUNDED
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 2#) of wild1 {
                            GHC.Types.False -> PhonemeData.$fEnumRoundedness_go x1
                            GHC.Types.True -> GHC.Types.[] @ PhonemeData.Roundedness } }
                 } in
                 case x of wild {
                   PhonemeData.DEFAULT -> $j 0#
                   PhonemeData.ROUNDED -> $j 1#
                   PhonemeData.UNROUNDED -> $j 2# }) -}
e7b029a5844a6e008b95082c9c811e33
  $fEnumRoundedness_$cfromEnum ::
    PhonemeData.Roundedness -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: PhonemeData.Roundedness) ->
                 case a of wild {
                   PhonemeData.DEFAULT -> GHC.Types.I# 0#
                   PhonemeData.ROUNDED -> GHC.Types.I# 1#
                   PhonemeData.UNROUNDED -> GHC.Types.I# 2# }) -}
e7b029a5844a6e008b95082c9c811e33
  $fEnumRoundedness_$cpred ::
    PhonemeData.Roundedness -> PhonemeData.Roundedness
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: PhonemeData.Roundedness) ->
                 case a of wild {
                   PhonemeData.DEFAULT -> PhonemeData.$fEnumRoundedness5
                   PhonemeData.ROUNDED -> PhonemeData.DEFAULT
                   PhonemeData.UNROUNDED -> PhonemeData.ROUNDED }) -}
e7b029a5844a6e008b95082c9c811e33
  $fEnumRoundedness_$csucc ::
    PhonemeData.Roundedness -> PhonemeData.Roundedness
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: PhonemeData.Roundedness) ->
                 case a of wild {
                   PhonemeData.DEFAULT -> PhonemeData.ROUNDED
                   PhonemeData.ROUNDED -> PhonemeData.UNROUNDED
                   PhonemeData.UNROUNDED -> PhonemeData.$fEnumRoundedness6 }) -}
e7b029a5844a6e008b95082c9c811e33
  $fEnumRoundedness_$ctoEnum ::
    GHC.Types.Int -> PhonemeData.Roundedness
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 PhonemeData.$w$ctoEnum6 ww1 }) -}
e7b029a5844a6e008b95082c9c811e33
  $fEnumRoundedness_c ::
    GHC.Types.Int
    -> [PhonemeData.Roundedness] -> [PhonemeData.Roundedness]
  {- Arity: 2, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: GHC.Types.Int) (ys :: [PhonemeData.Roundedness]) ->
                 GHC.Types.:
                   @ PhonemeData.Roundedness
                   (PhonemeData.$fEnumRoundedness_$ctoEnum x)
                   ys) -}
e7b029a5844a6e008b95082c9c811e33
  $fEnumRoundedness_c1 ::
    GHC.Types.Int
    -> [PhonemeData.Roundedness] -> [PhonemeData.Roundedness]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: GHC.Types.Int) (ys :: [PhonemeData.Roundedness]) ->
                 GHC.Types.:
                   @ PhonemeData.Roundedness
                   (case x of wild { GHC.Types.I# a ->
                    GHC.Prim.tagToEnum# @ PhonemeData.Roundedness a })
                   ys) -}
e7b029a5844a6e008b95082c9c811e33
  $fEnumRoundedness_go :: GHC.Prim.Int# -> [PhonemeData.Roundedness]
  {- Arity: 1, Strictness: <L,U> -}
e7b029a5844a6e008b95082c9c811e33
  $fEnumRoundedness_go1 :: GHC.Prim.Int# -> [PhonemeData.Roundedness]
  {- Arity: 1, Strictness: <L,U> -}
e7b029a5844a6e008b95082c9c811e33
  $fEnumRoundedness_go2 :: GHC.Prim.Int# -> [PhonemeData.Roundedness]
  {- Arity: 1, Strictness: <L,U> -}
e7b029a5844a6e008b95082c9c811e33
  $fEnumRoundedness_go3 :: GHC.Prim.Int# -> [PhonemeData.Roundedness]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
e7b029a5844a6e008b95082c9c811e33
  $fEnumRoundedness_go4 :: GHC.Prim.Int# -> [PhonemeData.Roundedness]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
e7b029a5844a6e008b95082c9c811e33
  $fEnumRoundedness_go5 :: GHC.Prim.Int# -> [PhonemeData.Roundedness]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
87cd4acf5bb796129082f7006a0ea5b8
  $fEnumTone :: GHC.Enum.Enum PhonemeData.Tone
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ PhonemeData.Tone
                  PhonemeData.$fEnumTone_$csucc
                  PhonemeData.$fEnumTone_$cpred
                  PhonemeData.$fEnumTone_$ctoEnum
                  PhonemeData.$fEnumTone_$cfromEnum
                  PhonemeData.$fEnumTone_$cenumFrom
                  PhonemeData.$fEnumTone_$cenumFromThen
                  PhonemeData.$fEnumTone_$cenumFromTo
                  PhonemeData.$fEnumTone_$cenumFromThenTo -}
87cd4acf5bb796129082f7006a0ea5b8
  $fEnumTone1 :: GHC.Prim.Int# -> PhonemeData.Tone
  {- Arity: 1, Strictness: <L,U>x -}
87cd4acf5bb796129082f7006a0ea5b8
  $fEnumTone2 :: PhonemeData.Tone
  {- Strictness: x -}
87cd4acf5bb796129082f7006a0ea5b8
  $fEnumTone3 :: PhonemeData.Tone
  {- Strictness: x -}
87cd4acf5bb796129082f7006a0ea5b8
  $fEnumTone_$cenumFrom :: PhonemeData.Tone -> [PhonemeData.Tone]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (a :: PhonemeData.Tone) ->
                 let {
                   x0 :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ PhonemeData.Tone a
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.># x0 13#) of wild {
                   GHC.Types.False -> PhonemeData.$fEnumTone_go x0
                   GHC.Types.True -> GHC.Types.[] @ PhonemeData.Tone }) -}
87cd4acf5bb796129082f7006a0ea5b8
  $fEnumTone_$cenumFromThen ::
    PhonemeData.Tone -> PhonemeData.Tone -> [PhonemeData.Tone]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: PhonemeData.Tone) (b :: PhonemeData.Tone) ->
                 let {
                   a# :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ PhonemeData.Tone a
                 } in
                 let {
                   b# :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ PhonemeData.Tone b
                 } in
                 let {
                   $j :: GHC.Prim.Int# -> [PhonemeData.Tone]
                     {- Arity: 1, Strictness: <S,U> -}
                   = \ (y :: GHC.Prim.Int#)[OneShot] ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# b# a#) of wild {
                       GHC.Types.False
                       -> GHC.Enum.efdtIntDnFB
                            @ [PhonemeData.Tone]
                            PhonemeData.$fEnumTone_c1
                            (GHC.Types.[] @ PhonemeData.Tone)
                            a#
                            b#
                            y
                       GHC.Types.True
                       -> GHC.Enum.efdtIntUpFB
                            @ [PhonemeData.Tone]
                            PhonemeData.$fEnumTone_c1
                            (GHC.Types.[] @ PhonemeData.Tone)
                            a#
                            b#
                            y }
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.># a# b#) of wild {
                   GHC.Types.False -> $j 13# GHC.Types.True -> $j 0# }) -}
87cd4acf5bb796129082f7006a0ea5b8
  $fEnumTone_$cenumFromThenTo ::
    PhonemeData.Tone
    -> PhonemeData.Tone -> PhonemeData.Tone -> [PhonemeData.Tone]
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U>,
     Unfolding: (\ (x1 :: PhonemeData.Tone)
                   (x2 :: PhonemeData.Tone)
                   (y :: PhonemeData.Tone) ->
                 let {
                   x4 :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ PhonemeData.Tone x1
                 } in
                 let {
                   x5 :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ PhonemeData.Tone x2
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# x5 x4) of wild {
                   GHC.Types.False
                   -> GHC.Enum.efdtIntDnFB
                        @ [PhonemeData.Tone]
                        PhonemeData.$fEnumTone_c
                        (GHC.Types.[] @ PhonemeData.Tone)
                        x4
                        x5
                        (GHC.Prim.dataToTag# @ PhonemeData.Tone y)
                   GHC.Types.True
                   -> GHC.Enum.efdtIntUpFB
                        @ [PhonemeData.Tone]
                        PhonemeData.$fEnumTone_c
                        (GHC.Types.[] @ PhonemeData.Tone)
                        x4
                        x5
                        (GHC.Prim.dataToTag# @ PhonemeData.Tone y) }) -}
87cd4acf5bb796129082f7006a0ea5b8
  $fEnumTone_$cenumFromTo ::
    PhonemeData.Tone -> PhonemeData.Tone -> [PhonemeData.Tone]
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x :: PhonemeData.Tone) (y :: PhonemeData.Tone) ->
                 let {
                   x0 :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ PhonemeData.Tone x
                 } in
                 let {
                   y1 :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ PhonemeData.Tone y
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.># x0 y1) of wild {
                   GHC.Types.False
                   -> letrec {
                        go25 :: GHC.Prim.Int# -> [PhonemeData.Tone]
                          {- Arity: 1, Strictness: <L,U> -}
                        = \ (x1 :: GHC.Prim.Int#) ->
                          GHC.Types.:
                            @ PhonemeData.Tone
                            (case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# x1 0#) of wild1 {
                               GHC.Types.False -> PhonemeData.$fEnumTone1 x1
                               GHC.Types.True
                               -> case GHC.Prim.tagToEnum#
                                         @ GHC.Types.Bool
                                         (GHC.Prim.<=# x1 13#) of wild2 {
                                    GHC.Types.False -> PhonemeData.$fEnumTone1 x1
                                    GHC.Types.True -> GHC.Prim.tagToEnum# @ PhonemeData.Tone x1 } })
                            (case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.==# x1 y1) of wild1 {
                               GHC.Types.False -> go25 (GHC.Prim.+# x1 1#)
                               GHC.Types.True -> GHC.Types.[] @ PhonemeData.Tone })
                      } in
                      go25 x0
                   GHC.Types.True -> GHC.Types.[] @ PhonemeData.Tone }) -}
87cd4acf5bb796129082f7006a0ea5b8
  $fEnumTone_$cfromEnum :: PhonemeData.Tone -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: PhonemeData.Tone) ->
                 case a of x1 { DEFAULT ->
                 GHC.Types.I# (GHC.Prim.dataToTag# @ PhonemeData.Tone x1) }) -}
87cd4acf5bb796129082f7006a0ea5b8
  $fEnumTone_$cpred :: PhonemeData.Tone -> PhonemeData.Tone
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: PhonemeData.Tone) ->
                 case a of x1 { DEFAULT ->
                 case GHC.Prim.dataToTag# @ PhonemeData.Tone x1 of wild {
                   DEFAULT
                   -> GHC.Prim.tagToEnum# @ PhonemeData.Tone (GHC.Prim.+# wild -1#)
                   0# -> PhonemeData.$fEnumTone2 } }) -}
87cd4acf5bb796129082f7006a0ea5b8
  $fEnumTone_$csucc :: PhonemeData.Tone -> PhonemeData.Tone
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: PhonemeData.Tone) ->
                 case a of x1 { DEFAULT ->
                 case GHC.Prim.dataToTag# @ PhonemeData.Tone x1 of wild {
                   DEFAULT
                   -> GHC.Prim.tagToEnum# @ PhonemeData.Tone (GHC.Prim.+# wild 1#)
                   13# -> PhonemeData.$fEnumTone3 } }) -}
87cd4acf5bb796129082f7006a0ea5b8
  $fEnumTone_$ctoEnum :: GHC.Types.Int -> PhonemeData.Tone
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 PhonemeData.$w$ctoEnum7 ww1 }) -}
87cd4acf5bb796129082f7006a0ea5b8
  $fEnumTone_c ::
    GHC.Types.Int -> [PhonemeData.Tone] -> [PhonemeData.Tone]
  {- Arity: 2, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: GHC.Types.Int) (ys :: [PhonemeData.Tone]) ->
                 GHC.Types.:
                   @ PhonemeData.Tone
                   (PhonemeData.$fEnumTone_$ctoEnum x)
                   ys) -}
87cd4acf5bb796129082f7006a0ea5b8
  $fEnumTone_c1 ::
    GHC.Types.Int -> [PhonemeData.Tone] -> [PhonemeData.Tone]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: GHC.Types.Int) (ys :: [PhonemeData.Tone]) ->
                 GHC.Types.:
                   @ PhonemeData.Tone
                   (case x of wild { GHC.Types.I# a ->
                    GHC.Prim.tagToEnum# @ PhonemeData.Tone a })
                   ys) -}
87cd4acf5bb796129082f7006a0ea5b8
  $fEnumTone_go :: GHC.Prim.Int# -> [PhonemeData.Tone]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
d7d82e642198a794ac3b3638da1bf9f3
  $fEqBackness :: GHC.Classes.Eq PhonemeData.Backness
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ PhonemeData.Backness
                  PhonemeData.$fEqBackness_$c==
                  PhonemeData.$fEqBackness_$c/= -}
d7d82e642198a794ac3b3638da1bf9f3
  $fEqBackness_$c/= ::
    PhonemeData.Backness -> PhonemeData.Backness -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: PhonemeData.Backness)
                   (b :: PhonemeData.Backness) ->
                 case a of wild {
                   PhonemeData.BACK
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True PhonemeData.BACK -> GHC.Types.False }
                   PhonemeData.NEARBACK
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True PhonemeData.NEARBACK -> GHC.Types.False }
                   PhonemeData.CENTRAL
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True PhonemeData.CENTRAL -> GHC.Types.False }
                   PhonemeData.NEARFRONT
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        PhonemeData.NEARFRONT -> GHC.Types.False }
                   PhonemeData.FRONT
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        PhonemeData.FRONT -> GHC.Types.False } }) -}
d7d82e642198a794ac3b3638da1bf9f3
  $fEqBackness_$c== ::
    PhonemeData.Backness -> PhonemeData.Backness -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: PhonemeData.Backness)
                   (ds1 :: PhonemeData.Backness) ->
                 case ds of wild {
                   PhonemeData.BACK
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False PhonemeData.BACK -> GHC.Types.True }
                   PhonemeData.NEARBACK
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False PhonemeData.NEARBACK -> GHC.Types.True }
                   PhonemeData.CENTRAL
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False PhonemeData.CENTRAL -> GHC.Types.True }
                   PhonemeData.NEARFRONT
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        PhonemeData.NEARFRONT -> GHC.Types.True }
                   PhonemeData.FRONT
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        PhonemeData.FRONT -> GHC.Types.True } }) -}
ba05bb435342e1a32b92b81d74410bc0
  $fEqHeight :: GHC.Classes.Eq PhonemeData.Height
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ PhonemeData.Height
                  PhonemeData.$fEqHeight_$c==
                  PhonemeData.$fEqHeight_$c/= -}
ba05bb435342e1a32b92b81d74410bc0
  $fEqHeight_$c/= ::
    PhonemeData.Height -> PhonemeData.Height -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: PhonemeData.Height)
                   (b :: PhonemeData.Height) ->
                 case a of wild {
                   PhonemeData.CLOSE
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True PhonemeData.CLOSE -> GHC.Types.False }
                   PhonemeData.NEARCLOSE
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        PhonemeData.NEARCLOSE -> GHC.Types.False }
                   PhonemeData.CLOSEMID
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True PhonemeData.CLOSEMID -> GHC.Types.False }
                   PhonemeData.MID
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True PhonemeData.MID -> GHC.Types.False }
                   PhonemeData.OPENMID
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True PhonemeData.OPENMID -> GHC.Types.False }
                   PhonemeData.NEAROPEN
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True PhonemeData.NEAROPEN -> GHC.Types.False }
                   PhonemeData.OPEN
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        PhonemeData.OPEN -> GHC.Types.False } }) -}
ba05bb435342e1a32b92b81d74410bc0
  $fEqHeight_$c== ::
    PhonemeData.Height -> PhonemeData.Height -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: PhonemeData.Height)
                   (ds1 :: PhonemeData.Height) ->
                 case ds of wild {
                   PhonemeData.CLOSE
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False PhonemeData.CLOSE -> GHC.Types.True }
                   PhonemeData.NEARCLOSE
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        PhonemeData.NEARCLOSE -> GHC.Types.True }
                   PhonemeData.CLOSEMID
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False PhonemeData.CLOSEMID -> GHC.Types.True }
                   PhonemeData.MID
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False PhonemeData.MID -> GHC.Types.True }
                   PhonemeData.OPENMID
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False PhonemeData.OPENMID -> GHC.Types.True }
                   PhonemeData.NEAROPEN
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False PhonemeData.NEAROPEN -> GHC.Types.True }
                   PhonemeData.OPEN
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        PhonemeData.OPEN -> GHC.Types.True } }) -}
60079db4dd97570a8e4fd882d78d3a98
  $fEqLength :: GHC.Classes.Eq PhonemeData.Length
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ PhonemeData.Length
                  PhonemeData.$fEqLength_$c==
                  PhonemeData.$fEqLength_$c/= -}
60079db4dd97570a8e4fd882d78d3a98
  $fEqLength_$c/= ::
    PhonemeData.Length -> PhonemeData.Length -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: PhonemeData.Length) (b :: PhonemeData.Length) ->
                 case a of wild {
                   PhonemeData.SHORT
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True PhonemeData.SHORT -> GHC.Types.False }
                   PhonemeData.NORMAL
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True PhonemeData.NORMAL -> GHC.Types.False }
                   PhonemeData.LONG
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        PhonemeData.LONG -> GHC.Types.False } }) -}
60079db4dd97570a8e4fd882d78d3a98
  $fEqLength_$c== ::
    PhonemeData.Length -> PhonemeData.Length -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: PhonemeData.Length) (ds1 :: PhonemeData.Length) ->
                 case ds of wild {
                   PhonemeData.SHORT
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False PhonemeData.SHORT -> GHC.Types.True }
                   PhonemeData.NORMAL
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False PhonemeData.NORMAL -> GHC.Types.True }
                   PhonemeData.LONG
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        PhonemeData.LONG -> GHC.Types.True } }) -}
cc18ad7b6a428637be9e42d493f6b8da
  $fEqManner :: GHC.Classes.Eq PhonemeData.Manner
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ PhonemeData.Manner
                  PhonemeData.$fEqManner_$c==
                  PhonemeData.$fEqManner_$c/= -}
cc18ad7b6a428637be9e42d493f6b8da
  $fEqManner_$c/= ::
    PhonemeData.Manner -> PhonemeData.Manner -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: PhonemeData.Manner) (b :: PhonemeData.Manner) ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==#
                           (GHC.Prim.dataToTag# @ PhonemeData.Manner x1)
                           (GHC.Prim.dataToTag# @ PhonemeData.Manner x2)) of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
cc18ad7b6a428637be9e42d493f6b8da
  $fEqManner_$c== ::
    PhonemeData.Manner -> PhonemeData.Manner -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: PhonemeData.Manner) (b :: PhonemeData.Manner) ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.==#
                      (GHC.Prim.dataToTag# @ PhonemeData.Manner x1)
                      (GHC.Prim.dataToTag# @ PhonemeData.Manner x2)) } }) -}
8d3162e814627ae5597b1f6cf9209b2d
  $fEqMorpheme :: GHC.Classes.Eq PhonemeData.Morpheme
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ PhonemeData.Morpheme
                  PhonemeData.$fEqMorpheme_$c==
                  PhonemeData.$fEqMorpheme_$c/= -}
8d3162e814627ae5597b1f6cf9209b2d
  $fEqMorpheme_$c/= ::
    PhonemeData.Morpheme -> PhonemeData.Morpheme -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: PhonemeData.Morpheme) (b :: PhonemeData.Morpheme) ->
                 case a of wild { PhonemeData.Morpheme a1 ->
                 case b of wild1 { PhonemeData.Morpheme b1 ->
                 case GHC.Classes.$fEq[]_$c==
                        @ PhonemeData.Phoneme
                        PhonemeData.$fEqPhoneme
                        a1
                        b1 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
8d3162e814627ae5597b1f6cf9209b2d
  $fEqMorpheme_$c== ::
    PhonemeData.Morpheme -> PhonemeData.Morpheme -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: PhonemeData.Morpheme) (ds1 :: PhonemeData.Morpheme) ->
                 case ds of wild { PhonemeData.Morpheme a1 ->
                 case ds1 of wild1 { PhonemeData.Morpheme b1 ->
                 GHC.Classes.$fEq[]_$c==
                   @ PhonemeData.Phoneme
                   PhonemeData.$fEqPhoneme
                   a1
                   b1 } }) -}
2e1a0e09a78074c21fc0136e518a2133
  $fEqPhonation :: GHC.Classes.Eq PhonemeData.Phonation
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ PhonemeData.Phonation
                  PhonemeData.$fEqPhonation_$c==
                  PhonemeData.$fEqPhonation_$c/= -}
2e1a0e09a78074c21fc0136e518a2133
  $fEqPhonation_$c/= ::
    PhonemeData.Phonation -> PhonemeData.Phonation -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: PhonemeData.Phonation)
                   (b :: PhonemeData.Phonation) ->
                 case a of wild {
                   PhonemeData.VOICELESS
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        PhonemeData.VOICELESS -> GHC.Types.False }
                   PhonemeData.BREATHY
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True PhonemeData.BREATHY -> GHC.Types.False }
                   PhonemeData.SLACK
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True PhonemeData.SLACK -> GHC.Types.False }
                   PhonemeData.MODAL
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True PhonemeData.MODAL -> GHC.Types.False }
                   PhonemeData.STIFF
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True PhonemeData.STIFF -> GHC.Types.False }
                   PhonemeData.CREAKY
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True PhonemeData.CREAKY -> GHC.Types.False }
                   PhonemeData.ASPIRATED
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        PhonemeData.ASPIRATED -> GHC.Types.False } }) -}
2e1a0e09a78074c21fc0136e518a2133
  $fEqPhonation_$c== ::
    PhonemeData.Phonation -> PhonemeData.Phonation -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: PhonemeData.Phonation)
                   (ds1 :: PhonemeData.Phonation) ->
                 case ds of wild {
                   PhonemeData.VOICELESS
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        PhonemeData.VOICELESS -> GHC.Types.True }
                   PhonemeData.BREATHY
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False PhonemeData.BREATHY -> GHC.Types.True }
                   PhonemeData.SLACK
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False PhonemeData.SLACK -> GHC.Types.True }
                   PhonemeData.MODAL
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False PhonemeData.MODAL -> GHC.Types.True }
                   PhonemeData.STIFF
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False PhonemeData.STIFF -> GHC.Types.True }
                   PhonemeData.CREAKY
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False PhonemeData.CREAKY -> GHC.Types.True }
                   PhonemeData.ASPIRATED
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        PhonemeData.ASPIRATED -> GHC.Types.True } }) -}
a99d82394cccf94f6dc3580d7da31e00
  $fEqPhoneme :: GHC.Classes.Eq PhonemeData.Phoneme
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ PhonemeData.Phoneme
                  PhonemeData.$fEqPhoneme_$c==
                  PhonemeData.$fEqPhoneme_$c/= -}
a99d82394cccf94f6dc3580d7da31e00
  $fEqPhoneme_$c/= ::
    PhonemeData.Phoneme -> PhonemeData.Phoneme -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: PhonemeData.Phoneme) (b :: PhonemeData.Phoneme) ->
                 case PhonemeData.$fEqPhoneme_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
a99d82394cccf94f6dc3580d7da31e00
  $fEqPhoneme_$c== ::
    PhonemeData.Phoneme -> PhonemeData.Phoneme -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
27d4fb2260414ca95f988dc9fef00141
  $fEqPlace :: GHC.Classes.Eq PhonemeData.Place
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ PhonemeData.Place
                  PhonemeData.$fEqPlace_$c==
                  PhonemeData.$fEqPlace_$c/= -}
27d4fb2260414ca95f988dc9fef00141
  $fEqPlace_$c/= ::
    PhonemeData.Place -> PhonemeData.Place -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: PhonemeData.Place) (b :: PhonemeData.Place) ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==#
                           (GHC.Prim.dataToTag# @ PhonemeData.Place x1)
                           (GHC.Prim.dataToTag# @ PhonemeData.Place x2)) of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
27d4fb2260414ca95f988dc9fef00141
  $fEqPlace_$c== ::
    PhonemeData.Place -> PhonemeData.Place -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: PhonemeData.Place) (b :: PhonemeData.Place) ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.==#
                      (GHC.Prim.dataToTag# @ PhonemeData.Place x1)
                      (GHC.Prim.dataToTag# @ PhonemeData.Place x2)) } }) -}
e7b029a5844a6e008b95082c9c811e33
  $fEqRoundedness :: GHC.Classes.Eq PhonemeData.Roundedness
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ PhonemeData.Roundedness
                  PhonemeData.$fEqRoundedness_$c==
                  PhonemeData.$fEqRoundedness_$c/= -}
e7b029a5844a6e008b95082c9c811e33
  $fEqRoundedness_$c/= ::
    PhonemeData.Roundedness
    -> PhonemeData.Roundedness -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: PhonemeData.Roundedness) (b :: PhonemeData.Roundedness) ->
                 case a of wild {
                   PhonemeData.DEFAULT
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True PhonemeData.DEFAULT -> GHC.Types.False }
                   PhonemeData.ROUNDED
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True PhonemeData.ROUNDED -> GHC.Types.False }
                   PhonemeData.UNROUNDED
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        PhonemeData.UNROUNDED -> GHC.Types.False } }) -}
e7b029a5844a6e008b95082c9c811e33
  $fEqRoundedness_$c== ::
    PhonemeData.Roundedness
    -> PhonemeData.Roundedness -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: PhonemeData.Roundedness)
                   (ds1 :: PhonemeData.Roundedness) ->
                 case ds of wild {
                   PhonemeData.DEFAULT
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False PhonemeData.DEFAULT -> GHC.Types.True }
                   PhonemeData.ROUNDED
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False PhonemeData.ROUNDED -> GHC.Types.True }
                   PhonemeData.UNROUNDED
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        PhonemeData.UNROUNDED -> GHC.Types.True } }) -}
87cd4acf5bb796129082f7006a0ea5b8
  $fEqTone :: GHC.Classes.Eq PhonemeData.Tone
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ PhonemeData.Tone
                  PhonemeData.$fEqTone_$c==
                  PhonemeData.$fEqTone_$c/= -}
87cd4acf5bb796129082f7006a0ea5b8
  $fEqTone_$c/= ::
    PhonemeData.Tone -> PhonemeData.Tone -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: PhonemeData.Tone) (b :: PhonemeData.Tone) ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==#
                           (GHC.Prim.dataToTag# @ PhonemeData.Tone x1)
                           (GHC.Prim.dataToTag# @ PhonemeData.Tone x2)) of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
87cd4acf5bb796129082f7006a0ea5b8
  $fEqTone_$c== ::
    PhonemeData.Tone -> PhonemeData.Tone -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: PhonemeData.Tone) (b :: PhonemeData.Tone) ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.==#
                      (GHC.Prim.dataToTag# @ PhonemeData.Tone x1)
                      (GHC.Prim.dataToTag# @ PhonemeData.Tone x2)) } }) -}
3bda176bb325231b683f164bd205b115
  $fEqWord :: GHC.Classes.Eq PhonemeData.Word
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ PhonemeData.Word
                  PhonemeData.$fEqWord_$c==
                  PhonemeData.$fEqWord_$c/= -}
3bda176bb325231b683f164bd205b115
  $fEqWord_$c/= ::
    PhonemeData.Word -> PhonemeData.Word -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: PhonemeData.Word) (b :: PhonemeData.Word) ->
                 case a of wild { PhonemeData.Word a1 ->
                 case b of wild1 { PhonemeData.Word b1 ->
                 case GHC.Classes.$fEq[]_$c==
                        @ PhonemeData.Morpheme
                        PhonemeData.$fEqMorpheme
                        a1
                        b1 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
3bda176bb325231b683f164bd205b115
  $fEqWord_$c== ::
    PhonemeData.Word -> PhonemeData.Word -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: PhonemeData.Word) (ds1 :: PhonemeData.Word) ->
                 case ds of wild { PhonemeData.Word a1 ->
                 case ds1 of wild1 { PhonemeData.Word b1 ->
                 GHC.Classes.$fEq[]_$c==
                   @ PhonemeData.Morpheme
                   PhonemeData.$fEqMorpheme
                   a1
                   b1 } }) -}
d7d82e642198a794ac3b3638da1bf9f3
  $fOrdBackness :: GHC.Classes.Ord PhonemeData.Backness
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ PhonemeData.Backness
                  PhonemeData.$fEqBackness
                  PhonemeData.$fOrdBackness_$ccompare
                  PhonemeData.$fOrdBackness_$c<
                  PhonemeData.$fOrdBackness_$c<=
                  PhonemeData.$fOrdBackness_$c>
                  PhonemeData.$fOrdBackness_$c>=
                  PhonemeData.$fOrdBackness_$cmax
                  PhonemeData.$fOrdBackness_$cmin -}
d7d82e642198a794ac3b3638da1bf9f3
  $fOrdBackness_$c< ::
    PhonemeData.Backness -> PhonemeData.Backness -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: PhonemeData.Backness)
                   (b :: PhonemeData.Backness) ->
                 case a of wild {
                   PhonemeData.BACK
                   -> case b of wild1 {
                        PhonemeData.BACK -> GHC.Types.False
                        PhonemeData.NEARBACK -> GHC.Types.True
                        PhonemeData.CENTRAL -> GHC.Types.True
                        PhonemeData.NEARFRONT -> GHC.Types.True
                        PhonemeData.FRONT -> GHC.Types.True }
                   PhonemeData.NEARBACK
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False
                        PhonemeData.CENTRAL -> GHC.Types.True
                        PhonemeData.NEARFRONT -> GHC.Types.True
                        PhonemeData.FRONT -> GHC.Types.True }
                   PhonemeData.CENTRAL
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False
                        PhonemeData.NEARFRONT -> GHC.Types.True
                        PhonemeData.FRONT -> GHC.Types.True }
                   PhonemeData.NEARFRONT
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False PhonemeData.FRONT -> GHC.Types.True }
                   PhonemeData.FRONT
                   -> case b of wild1 { DEFAULT -> GHC.Types.False } }) -}
d7d82e642198a794ac3b3638da1bf9f3
  $fOrdBackness_$c<= ::
    PhonemeData.Backness -> PhonemeData.Backness -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: PhonemeData.Backness)
                   (b :: PhonemeData.Backness) ->
                 case a of wild {
                   PhonemeData.BACK -> case b of wild1 { DEFAULT -> GHC.Types.True }
                   PhonemeData.NEARBACK
                   -> case b of wild1 {
                        PhonemeData.BACK -> GHC.Types.False
                        PhonemeData.NEARBACK -> GHC.Types.True
                        PhonemeData.CENTRAL -> GHC.Types.True
                        PhonemeData.NEARFRONT -> GHC.Types.True
                        PhonemeData.FRONT -> GHC.Types.True }
                   PhonemeData.CENTRAL
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False
                        PhonemeData.CENTRAL -> GHC.Types.True
                        PhonemeData.NEARFRONT -> GHC.Types.True
                        PhonemeData.FRONT -> GHC.Types.True }
                   PhonemeData.NEARFRONT
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False
                        PhonemeData.NEARFRONT -> GHC.Types.True
                        PhonemeData.FRONT -> GHC.Types.True }
                   PhonemeData.FRONT
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False
                        PhonemeData.FRONT -> GHC.Types.True } }) -}
d7d82e642198a794ac3b3638da1bf9f3
  $fOrdBackness_$c> ::
    PhonemeData.Backness -> PhonemeData.Backness -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: PhonemeData.Backness)
                   (b :: PhonemeData.Backness) ->
                 case a of wild {
                   PhonemeData.BACK -> case b of wild1 { DEFAULT -> GHC.Types.False }
                   PhonemeData.NEARBACK
                   -> case b of wild1 {
                        PhonemeData.BACK -> GHC.Types.True
                        PhonemeData.NEARBACK -> GHC.Types.False
                        PhonemeData.CENTRAL -> GHC.Types.False
                        PhonemeData.NEARFRONT -> GHC.Types.False
                        PhonemeData.FRONT -> GHC.Types.False }
                   PhonemeData.CENTRAL
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        PhonemeData.CENTRAL -> GHC.Types.False
                        PhonemeData.NEARFRONT -> GHC.Types.False
                        PhonemeData.FRONT -> GHC.Types.False }
                   PhonemeData.NEARFRONT
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        PhonemeData.NEARFRONT -> GHC.Types.False
                        PhonemeData.FRONT -> GHC.Types.False }
                   PhonemeData.FRONT
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        PhonemeData.FRONT -> GHC.Types.False } }) -}
d7d82e642198a794ac3b3638da1bf9f3
  $fOrdBackness_$c>= ::
    PhonemeData.Backness -> PhonemeData.Backness -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: PhonemeData.Backness)
                   (b :: PhonemeData.Backness) ->
                 case a of wild {
                   PhonemeData.BACK
                   -> case b of wild1 {
                        PhonemeData.BACK -> GHC.Types.True
                        PhonemeData.NEARBACK -> GHC.Types.False
                        PhonemeData.CENTRAL -> GHC.Types.False
                        PhonemeData.NEARFRONT -> GHC.Types.False
                        PhonemeData.FRONT -> GHC.Types.False }
                   PhonemeData.NEARBACK
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        PhonemeData.CENTRAL -> GHC.Types.False
                        PhonemeData.NEARFRONT -> GHC.Types.False
                        PhonemeData.FRONT -> GHC.Types.False }
                   PhonemeData.CENTRAL
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        PhonemeData.NEARFRONT -> GHC.Types.False
                        PhonemeData.FRONT -> GHC.Types.False }
                   PhonemeData.NEARFRONT
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True PhonemeData.FRONT -> GHC.Types.False }
                   PhonemeData.FRONT
                   -> case b of wild1 { DEFAULT -> GHC.Types.True } }) -}
d7d82e642198a794ac3b3638da1bf9f3
  $fOrdBackness_$ccompare ::
    PhonemeData.Backness -> PhonemeData.Backness -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: PhonemeData.Backness)
                   (b :: PhonemeData.Backness) ->
                 case a of wild {
                   PhonemeData.BACK
                   -> case b of wild1 {
                        PhonemeData.BACK -> GHC.Types.EQ
                        PhonemeData.NEARBACK -> GHC.Types.LT
                        PhonemeData.CENTRAL -> GHC.Types.LT
                        PhonemeData.NEARFRONT -> GHC.Types.LT
                        PhonemeData.FRONT -> GHC.Types.LT }
                   PhonemeData.NEARBACK
                   -> case b of wild1 {
                        PhonemeData.BACK -> GHC.Types.GT
                        PhonemeData.NEARBACK -> GHC.Types.EQ
                        PhonemeData.CENTRAL -> GHC.Types.LT
                        PhonemeData.NEARFRONT -> GHC.Types.LT
                        PhonemeData.FRONT -> GHC.Types.LT }
                   PhonemeData.CENTRAL
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        PhonemeData.CENTRAL -> GHC.Types.EQ
                        PhonemeData.NEARFRONT -> GHC.Types.LT
                        PhonemeData.FRONT -> GHC.Types.LT }
                   PhonemeData.NEARFRONT
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        PhonemeData.NEARFRONT -> GHC.Types.EQ
                        PhonemeData.FRONT -> GHC.Types.LT }
                   PhonemeData.FRONT
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT PhonemeData.FRONT -> GHC.Types.EQ } }) -}
d7d82e642198a794ac3b3638da1bf9f3
  $fOrdBackness_$cmax ::
    PhonemeData.Backness
    -> PhonemeData.Backness -> PhonemeData.Backness
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x :: PhonemeData.Backness)
                   (y :: PhonemeData.Backness) ->
                 case x of wild {
                   PhonemeData.BACK -> y
                   PhonemeData.NEARBACK
                   -> case y of wild1 {
                        DEFAULT -> PhonemeData.NEARBACK
                        PhonemeData.CENTRAL -> PhonemeData.CENTRAL
                        PhonemeData.NEARFRONT -> PhonemeData.NEARFRONT
                        PhonemeData.FRONT -> PhonemeData.FRONT }
                   PhonemeData.CENTRAL
                   -> case y of wild1 {
                        DEFAULT -> PhonemeData.CENTRAL
                        PhonemeData.NEARFRONT -> PhonemeData.NEARFRONT
                        PhonemeData.FRONT -> PhonemeData.FRONT }
                   PhonemeData.NEARFRONT
                   -> case y of wild1 {
                        DEFAULT -> PhonemeData.NEARFRONT
                        PhonemeData.FRONT -> PhonemeData.FRONT }
                   PhonemeData.FRONT
                   -> case y of wild1 { DEFAULT -> PhonemeData.FRONT } }) -}
d7d82e642198a794ac3b3638da1bf9f3
  $fOrdBackness_$cmin ::
    PhonemeData.Backness
    -> PhonemeData.Backness -> PhonemeData.Backness
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x :: PhonemeData.Backness)
                   (y :: PhonemeData.Backness) ->
                 case x of wild {
                   PhonemeData.BACK -> case y of wild1 { DEFAULT -> PhonemeData.BACK }
                   PhonemeData.NEARBACK
                   -> case y of wild1 {
                        PhonemeData.BACK -> PhonemeData.BACK
                        PhonemeData.NEARBACK -> PhonemeData.NEARBACK
                        PhonemeData.CENTRAL -> PhonemeData.NEARBACK
                        PhonemeData.NEARFRONT -> PhonemeData.NEARBACK
                        PhonemeData.FRONT -> PhonemeData.NEARBACK }
                   PhonemeData.CENTRAL
                   -> case y of wild1 {
                        DEFAULT -> wild1
                        PhonemeData.CENTRAL -> PhonemeData.CENTRAL
                        PhonemeData.NEARFRONT -> PhonemeData.CENTRAL
                        PhonemeData.FRONT -> PhonemeData.CENTRAL }
                   PhonemeData.NEARFRONT
                   -> case y of wild1 {
                        DEFAULT -> wild1
                        PhonemeData.NEARFRONT -> PhonemeData.NEARFRONT
                        PhonemeData.FRONT -> PhonemeData.NEARFRONT }
                   PhonemeData.FRONT -> y }) -}
ba05bb435342e1a32b92b81d74410bc0
  $fOrdHeight :: GHC.Classes.Ord PhonemeData.Height
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ PhonemeData.Height
                  PhonemeData.$fEqHeight
                  PhonemeData.$fOrdHeight_$ccompare
                  PhonemeData.$fOrdHeight_$c<
                  PhonemeData.$fOrdHeight_$c<=
                  PhonemeData.$fOrdHeight_$c>
                  PhonemeData.$fOrdHeight_$c>=
                  PhonemeData.$fOrdHeight_$cmax
                  PhonemeData.$fOrdHeight_$cmin -}
ba05bb435342e1a32b92b81d74410bc0
  $fOrdHeight_$c< ::
    PhonemeData.Height -> PhonemeData.Height -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: PhonemeData.Height)
                   (b :: PhonemeData.Height) ->
                 let {
                   $j :: GHC.Prim.Int# -> GHC.Types.Bool
                     {- Arity: 1, Strictness: <S,U> -}
                   = \ (a# :: GHC.Prim.Int#)[OneShot] ->
                     case b of wild {
                       PhonemeData.CLOSE
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.<# a# 0#)
                       PhonemeData.NEARCLOSE
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.<# a# 1#)
                       PhonemeData.CLOSEMID
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.<# a# 2#)
                       PhonemeData.MID
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.<# a# 3#)
                       PhonemeData.OPENMID
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.<# a# 4#)
                       PhonemeData.NEAROPEN
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.<# a# 5#)
                       PhonemeData.OPEN
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.<# a# 6#) }
                 } in
                 case a of wild {
                   PhonemeData.CLOSE -> $j 0#
                   PhonemeData.NEARCLOSE -> $j 1#
                   PhonemeData.CLOSEMID -> $j 2#
                   PhonemeData.MID -> $j 3#
                   PhonemeData.OPENMID -> $j 4#
                   PhonemeData.NEAROPEN -> $j 5#
                   PhonemeData.OPEN -> $j 6# }) -}
ba05bb435342e1a32b92b81d74410bc0
  $fOrdHeight_$c<= ::
    PhonemeData.Height -> PhonemeData.Height -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: PhonemeData.Height)
                   (b :: PhonemeData.Height) ->
                 let {
                   $j :: GHC.Prim.Int# -> GHC.Types.Bool
                     {- Arity: 1, Strictness: <S,U> -}
                   = \ (a# :: GHC.Prim.Int#)[OneShot] ->
                     case b of wild {
                       PhonemeData.CLOSE
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.<=# a# 0#)
                       PhonemeData.NEARCLOSE
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.<=# a# 1#)
                       PhonemeData.CLOSEMID
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.<=# a# 2#)
                       PhonemeData.MID
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.<=# a# 3#)
                       PhonemeData.OPENMID
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.<=# a# 4#)
                       PhonemeData.NEAROPEN
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.<=# a# 5#)
                       PhonemeData.OPEN
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.<=# a# 6#) }
                 } in
                 case a of wild {
                   PhonemeData.CLOSE -> $j 0#
                   PhonemeData.NEARCLOSE -> $j 1#
                   PhonemeData.CLOSEMID -> $j 2#
                   PhonemeData.MID -> $j 3#
                   PhonemeData.OPENMID -> $j 4#
                   PhonemeData.NEAROPEN -> $j 5#
                   PhonemeData.OPEN -> $j 6# }) -}
ba05bb435342e1a32b92b81d74410bc0
  $fOrdHeight_$c> ::
    PhonemeData.Height -> PhonemeData.Height -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: PhonemeData.Height)
                   (b :: PhonemeData.Height) ->
                 let {
                   $j :: GHC.Prim.Int# -> GHC.Types.Bool
                     {- Arity: 1, Strictness: <S,U> -}
                   = \ (a# :: GHC.Prim.Int#)[OneShot] ->
                     case b of wild {
                       PhonemeData.CLOSE
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.># a# 0#)
                       PhonemeData.NEARCLOSE
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.># a# 1#)
                       PhonemeData.CLOSEMID
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.># a# 2#)
                       PhonemeData.MID
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.># a# 3#)
                       PhonemeData.OPENMID
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.># a# 4#)
                       PhonemeData.NEAROPEN
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.># a# 5#)
                       PhonemeData.OPEN
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.># a# 6#) }
                 } in
                 case a of wild {
                   PhonemeData.CLOSE -> $j 0#
                   PhonemeData.NEARCLOSE -> $j 1#
                   PhonemeData.CLOSEMID -> $j 2#
                   PhonemeData.MID -> $j 3#
                   PhonemeData.OPENMID -> $j 4#
                   PhonemeData.NEAROPEN -> $j 5#
                   PhonemeData.OPEN -> $j 6# }) -}
ba05bb435342e1a32b92b81d74410bc0
  $fOrdHeight_$c>= ::
    PhonemeData.Height -> PhonemeData.Height -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: PhonemeData.Height)
                   (b :: PhonemeData.Height) ->
                 let {
                   $j :: GHC.Prim.Int# -> GHC.Types.Bool
                     {- Arity: 1, Strictness: <S,U> -}
                   = \ (a# :: GHC.Prim.Int#)[OneShot] ->
                     case b of wild {
                       PhonemeData.CLOSE
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.>=# a# 0#)
                       PhonemeData.NEARCLOSE
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.>=# a# 1#)
                       PhonemeData.CLOSEMID
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.>=# a# 2#)
                       PhonemeData.MID
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.>=# a# 3#)
                       PhonemeData.OPENMID
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.>=# a# 4#)
                       PhonemeData.NEAROPEN
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.>=# a# 5#)
                       PhonemeData.OPEN
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.>=# a# 6#) }
                 } in
                 case a of wild {
                   PhonemeData.CLOSE -> $j 0#
                   PhonemeData.NEARCLOSE -> $j 1#
                   PhonemeData.CLOSEMID -> $j 2#
                   PhonemeData.MID -> $j 3#
                   PhonemeData.OPENMID -> $j 4#
                   PhonemeData.NEAROPEN -> $j 5#
                   PhonemeData.OPEN -> $j 6# }) -}
ba05bb435342e1a32b92b81d74410bc0
  $fOrdHeight_$ccompare ::
    PhonemeData.Height -> PhonemeData.Height -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: PhonemeData.Height)
                   (b :: PhonemeData.Height) ->
                 case a of wild {
                   PhonemeData.CLOSE
                   -> case b of wild1 {
                        PhonemeData.CLOSE -> GHC.Types.EQ
                        PhonemeData.NEARCLOSE -> GHC.Types.LT
                        PhonemeData.CLOSEMID -> GHC.Types.LT
                        PhonemeData.MID -> GHC.Types.LT
                        PhonemeData.OPENMID -> GHC.Types.LT
                        PhonemeData.NEAROPEN -> GHC.Types.LT
                        PhonemeData.OPEN -> GHC.Types.LT }
                   PhonemeData.NEARCLOSE
                   -> case b of wild1 {
                        PhonemeData.CLOSE -> GHC.Types.GT
                        PhonemeData.NEARCLOSE -> GHC.Types.EQ
                        PhonemeData.CLOSEMID -> GHC.Types.LT
                        PhonemeData.MID -> GHC.Types.LT
                        PhonemeData.OPENMID -> GHC.Types.LT
                        PhonemeData.NEAROPEN -> GHC.Types.LT
                        PhonemeData.OPEN -> GHC.Types.LT }
                   PhonemeData.CLOSEMID
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        PhonemeData.CLOSEMID -> GHC.Types.EQ
                        PhonemeData.MID -> GHC.Types.LT
                        PhonemeData.OPENMID -> GHC.Types.LT
                        PhonemeData.NEAROPEN -> GHC.Types.LT
                        PhonemeData.OPEN -> GHC.Types.LT }
                   PhonemeData.MID
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        PhonemeData.MID -> GHC.Types.EQ
                        PhonemeData.OPENMID -> GHC.Types.LT
                        PhonemeData.NEAROPEN -> GHC.Types.LT
                        PhonemeData.OPEN -> GHC.Types.LT }
                   PhonemeData.OPENMID
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        PhonemeData.OPENMID -> GHC.Types.EQ
                        PhonemeData.NEAROPEN -> GHC.Types.LT
                        PhonemeData.OPEN -> GHC.Types.LT }
                   PhonemeData.NEAROPEN
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        PhonemeData.NEAROPEN -> GHC.Types.EQ
                        PhonemeData.OPEN -> GHC.Types.LT }
                   PhonemeData.OPEN
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT PhonemeData.OPEN -> GHC.Types.EQ } }) -}
ba05bb435342e1a32b92b81d74410bc0
  $fOrdHeight_$cmax ::
    PhonemeData.Height -> PhonemeData.Height -> PhonemeData.Height
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: PhonemeData.Height) (y :: PhonemeData.Height) ->
                 case PhonemeData.$fOrdHeight_$c<= x y of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
ba05bb435342e1a32b92b81d74410bc0
  $fOrdHeight_$cmin ::
    PhonemeData.Height -> PhonemeData.Height -> PhonemeData.Height
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: PhonemeData.Height) (y :: PhonemeData.Height) ->
                 case PhonemeData.$fOrdHeight_$c<= x y of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
60079db4dd97570a8e4fd882d78d3a98
  $fOrdLength :: GHC.Classes.Ord PhonemeData.Length
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ PhonemeData.Length
                  PhonemeData.$fEqLength
                  PhonemeData.$fOrdLength_$ccompare
                  PhonemeData.$fOrdLength_$c<
                  PhonemeData.$fOrdLength_$c<=
                  PhonemeData.$fOrdLength_$c>
                  PhonemeData.$fOrdLength_$c>=
                  PhonemeData.$fOrdLength_$cmax
                  PhonemeData.$fOrdLength_$cmin -}
60079db4dd97570a8e4fd882d78d3a98
  $fOrdLength_$c< ::
    PhonemeData.Length -> PhonemeData.Length -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: PhonemeData.Length) (b :: PhonemeData.Length) ->
                 case a of wild {
                   PhonemeData.SHORT
                   -> case b of wild1 {
                        PhonemeData.SHORT -> GHC.Types.False
                        PhonemeData.NORMAL -> GHC.Types.True
                        PhonemeData.LONG -> GHC.Types.True }
                   PhonemeData.NORMAL
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False PhonemeData.LONG -> GHC.Types.True }
                   PhonemeData.LONG
                   -> case b of wild1 { DEFAULT -> GHC.Types.False } }) -}
60079db4dd97570a8e4fd882d78d3a98
  $fOrdLength_$c<= ::
    PhonemeData.Length -> PhonemeData.Length -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: PhonemeData.Length) (b :: PhonemeData.Length) ->
                 case a of wild {
                   PhonemeData.SHORT -> case b of wild1 { DEFAULT -> GHC.Types.True }
                   PhonemeData.NORMAL
                   -> case b of wild1 {
                        PhonemeData.SHORT -> GHC.Types.False
                        PhonemeData.NORMAL -> GHC.Types.True
                        PhonemeData.LONG -> GHC.Types.True }
                   PhonemeData.LONG
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False
                        PhonemeData.LONG -> GHC.Types.True } }) -}
60079db4dd97570a8e4fd882d78d3a98
  $fOrdLength_$c> ::
    PhonemeData.Length -> PhonemeData.Length -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: PhonemeData.Length) (b :: PhonemeData.Length) ->
                 case a of wild {
                   PhonemeData.SHORT -> case b of wild1 { DEFAULT -> GHC.Types.False }
                   PhonemeData.NORMAL
                   -> case b of wild1 {
                        PhonemeData.SHORT -> GHC.Types.True
                        PhonemeData.NORMAL -> GHC.Types.False
                        PhonemeData.LONG -> GHC.Types.False }
                   PhonemeData.LONG
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        PhonemeData.LONG -> GHC.Types.False } }) -}
60079db4dd97570a8e4fd882d78d3a98
  $fOrdLength_$c>= ::
    PhonemeData.Length -> PhonemeData.Length -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: PhonemeData.Length) (b :: PhonemeData.Length) ->
                 case a of wild {
                   PhonemeData.SHORT
                   -> case b of wild1 {
                        PhonemeData.SHORT -> GHC.Types.True
                        PhonemeData.NORMAL -> GHC.Types.False
                        PhonemeData.LONG -> GHC.Types.False }
                   PhonemeData.NORMAL
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True PhonemeData.LONG -> GHC.Types.False }
                   PhonemeData.LONG
                   -> case b of wild1 { DEFAULT -> GHC.Types.True } }) -}
60079db4dd97570a8e4fd882d78d3a98
  $fOrdLength_$ccompare ::
    PhonemeData.Length -> PhonemeData.Length -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: PhonemeData.Length)
                   (b :: PhonemeData.Length) ->
                 case a of wild {
                   PhonemeData.SHORT
                   -> case b of wild1 {
                        PhonemeData.SHORT -> GHC.Types.EQ
                        PhonemeData.NORMAL -> GHC.Types.LT
                        PhonemeData.LONG -> GHC.Types.LT }
                   PhonemeData.NORMAL
                   -> case b of wild1 {
                        PhonemeData.SHORT -> GHC.Types.GT
                        PhonemeData.NORMAL -> GHC.Types.EQ
                        PhonemeData.LONG -> GHC.Types.LT }
                   PhonemeData.LONG
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT PhonemeData.LONG -> GHC.Types.EQ } }) -}
60079db4dd97570a8e4fd882d78d3a98
  $fOrdLength_$cmax ::
    PhonemeData.Length -> PhonemeData.Length -> PhonemeData.Length
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: PhonemeData.Length) (y :: PhonemeData.Length) ->
                 case x of wild {
                   PhonemeData.SHORT -> y
                   PhonemeData.NORMAL
                   -> case y of wild1 {
                        DEFAULT -> PhonemeData.NORMAL
                        PhonemeData.LONG -> PhonemeData.LONG }
                   PhonemeData.LONG
                   -> case y of wild1 { DEFAULT -> PhonemeData.LONG } }) -}
60079db4dd97570a8e4fd882d78d3a98
  $fOrdLength_$cmin ::
    PhonemeData.Length -> PhonemeData.Length -> PhonemeData.Length
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: PhonemeData.Length) (y :: PhonemeData.Length) ->
                 case x of wild {
                   PhonemeData.SHORT
                   -> case y of wild1 { DEFAULT -> PhonemeData.SHORT }
                   PhonemeData.NORMAL
                   -> case y of wild1 {
                        PhonemeData.SHORT -> PhonemeData.SHORT
                        PhonemeData.NORMAL -> PhonemeData.NORMAL
                        PhonemeData.LONG -> PhonemeData.NORMAL }
                   PhonemeData.LONG -> y }) -}
cc18ad7b6a428637be9e42d493f6b8da
  $fOrdManner :: GHC.Classes.Ord PhonemeData.Manner
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ PhonemeData.Manner
                  PhonemeData.$fEqManner
                  PhonemeData.$fOrdManner_$ccompare
                  PhonemeData.$fOrdManner_$c<
                  PhonemeData.$fOrdManner_$c<=
                  PhonemeData.$fOrdManner_$c>
                  PhonemeData.$fOrdManner_$c>=
                  PhonemeData.$fOrdManner_$cmax
                  PhonemeData.$fOrdManner_$cmin -}
cc18ad7b6a428637be9e42d493f6b8da
  $fOrdManner_$c< ::
    PhonemeData.Manner -> PhonemeData.Manner -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: PhonemeData.Manner) (b :: PhonemeData.Manner) ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.<#
                      (GHC.Prim.dataToTag# @ PhonemeData.Manner x1)
                      (GHC.Prim.dataToTag# @ PhonemeData.Manner x2)) } }) -}
cc18ad7b6a428637be9e42d493f6b8da
  $fOrdManner_$c<= ::
    PhonemeData.Manner -> PhonemeData.Manner -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: PhonemeData.Manner) (b :: PhonemeData.Manner) ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.<=#
                      (GHC.Prim.dataToTag# @ PhonemeData.Manner x1)
                      (GHC.Prim.dataToTag# @ PhonemeData.Manner x2)) } }) -}
cc18ad7b6a428637be9e42d493f6b8da
  $fOrdManner_$c> ::
    PhonemeData.Manner -> PhonemeData.Manner -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: PhonemeData.Manner) (b :: PhonemeData.Manner) ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.>#
                      (GHC.Prim.dataToTag# @ PhonemeData.Manner x1)
                      (GHC.Prim.dataToTag# @ PhonemeData.Manner x2)) } }) -}
cc18ad7b6a428637be9e42d493f6b8da
  $fOrdManner_$c>= ::
    PhonemeData.Manner -> PhonemeData.Manner -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: PhonemeData.Manner) (b :: PhonemeData.Manner) ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.>=#
                      (GHC.Prim.dataToTag# @ PhonemeData.Manner x1)
                      (GHC.Prim.dataToTag# @ PhonemeData.Manner x2)) } }) -}
cc18ad7b6a428637be9e42d493f6b8da
  $fOrdManner_$ccompare ::
    PhonemeData.Manner -> PhonemeData.Manner -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: PhonemeData.Manner) (b :: PhonemeData.Manner) ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 let {
                   b# :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ PhonemeData.Manner x2
                 } in
                 let {
                   a# :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ PhonemeData.Manner x1
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# a# b#) of wild {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# a# b#) of wild1 {
                        GHC.Types.False -> GHC.Types.GT GHC.Types.True -> GHC.Types.EQ }
                   GHC.Types.True -> GHC.Types.LT } } }) -}
cc18ad7b6a428637be9e42d493f6b8da
  $fOrdManner_$cmax ::
    PhonemeData.Manner -> PhonemeData.Manner -> PhonemeData.Manner
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: PhonemeData.Manner) (y :: PhonemeData.Manner) ->
                 case x of x1 { DEFAULT ->
                 case y of x2 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=#
                           (GHC.Prim.dataToTag# @ PhonemeData.Manner x1)
                           (GHC.Prim.dataToTag# @ PhonemeData.Manner x2)) of wild {
                   GHC.Types.False -> x1 GHC.Types.True -> x2 } } }) -}
cc18ad7b6a428637be9e42d493f6b8da
  $fOrdManner_$cmin ::
    PhonemeData.Manner -> PhonemeData.Manner -> PhonemeData.Manner
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: PhonemeData.Manner) (y :: PhonemeData.Manner) ->
                 case x of x1 { DEFAULT ->
                 case y of x2 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=#
                           (GHC.Prim.dataToTag# @ PhonemeData.Manner x1)
                           (GHC.Prim.dataToTag# @ PhonemeData.Manner x2)) of wild {
                   GHC.Types.False -> x2 GHC.Types.True -> x1 } } }) -}
8d3162e814627ae5597b1f6cf9209b2d
  $fOrdMorpheme :: GHC.Classes.Ord PhonemeData.Morpheme
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ PhonemeData.Morpheme
                  PhonemeData.$fEqMorpheme
                  PhonemeData.$fOrdMorpheme_$ccompare
                  PhonemeData.$fOrdMorpheme_$c<
                  PhonemeData.$fOrdMorpheme_$c<=
                  PhonemeData.$fOrdMorpheme_$c>
                  PhonemeData.$fOrdMorpheme_$c>=
                  PhonemeData.$fOrdMorpheme_$cmax
                  PhonemeData.$fOrdMorpheme_$cmin -}
8d3162e814627ae5597b1f6cf9209b2d
  $fOrdMorpheme_$c< ::
    PhonemeData.Morpheme -> PhonemeData.Morpheme -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: PhonemeData.Morpheme) (b :: PhonemeData.Morpheme) ->
                 case a of wild { PhonemeData.Morpheme a1 ->
                 case b of wild1 { PhonemeData.Morpheme b1 ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ PhonemeData.Phoneme
                        PhonemeData.$fOrdPhoneme
                        a1
                        b1 of wild2 {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True } } }) -}
8d3162e814627ae5597b1f6cf9209b2d
  $fOrdMorpheme_$c<= ::
    PhonemeData.Morpheme -> PhonemeData.Morpheme -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: PhonemeData.Morpheme) (b :: PhonemeData.Morpheme) ->
                 case a of wild { PhonemeData.Morpheme a1 ->
                 case b of wild1 { PhonemeData.Morpheme b1 ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ PhonemeData.Phoneme
                        PhonemeData.$fOrdPhoneme
                        a1
                        b1 of wild2 {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False } } }) -}
8d3162e814627ae5597b1f6cf9209b2d
  $fOrdMorpheme_$c> ::
    PhonemeData.Morpheme -> PhonemeData.Morpheme -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: PhonemeData.Morpheme) (b :: PhonemeData.Morpheme) ->
                 case a of wild { PhonemeData.Morpheme a1 ->
                 case b of wild1 { PhonemeData.Morpheme b1 ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ PhonemeData.Phoneme
                        PhonemeData.$fOrdPhoneme
                        a1
                        b1 of wild2 {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True } } }) -}
8d3162e814627ae5597b1f6cf9209b2d
  $fOrdMorpheme_$c>= ::
    PhonemeData.Morpheme -> PhonemeData.Morpheme -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: PhonemeData.Morpheme) (b :: PhonemeData.Morpheme) ->
                 case a of wild { PhonemeData.Morpheme a1 ->
                 case b of wild1 { PhonemeData.Morpheme b1 ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ PhonemeData.Phoneme
                        PhonemeData.$fOrdPhoneme
                        a1
                        b1 of wild2 {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False } } }) -}
8d3162e814627ae5597b1f6cf9209b2d
  $fOrdMorpheme_$ccompare ::
    PhonemeData.Morpheme -> PhonemeData.Morpheme -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: PhonemeData.Morpheme) (b :: PhonemeData.Morpheme) ->
                 case a of wild { PhonemeData.Morpheme a1 ->
                 case b of wild1 { PhonemeData.Morpheme b1 ->
                 GHC.Classes.$fOrd[]_$ccompare
                   @ PhonemeData.Phoneme
                   PhonemeData.$fOrdPhoneme
                   a1
                   b1 } }) -}
8d3162e814627ae5597b1f6cf9209b2d
  $fOrdMorpheme_$cmax ::
    PhonemeData.Morpheme
    -> PhonemeData.Morpheme -> PhonemeData.Morpheme
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: PhonemeData.Morpheme) (y :: PhonemeData.Morpheme) ->
                 case x of wild { PhonemeData.Morpheme a1 ->
                 case y of wild1 { PhonemeData.Morpheme b1 ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ PhonemeData.Phoneme
                        PhonemeData.$fOrdPhoneme
                        a1
                        b1 of wild2 {
                   DEFAULT -> wild1 GHC.Types.GT -> wild } } }) -}
8d3162e814627ae5597b1f6cf9209b2d
  $fOrdMorpheme_$cmin ::
    PhonemeData.Morpheme
    -> PhonemeData.Morpheme -> PhonemeData.Morpheme
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: PhonemeData.Morpheme) (y :: PhonemeData.Morpheme) ->
                 case x of wild { PhonemeData.Morpheme a1 ->
                 case y of wild1 { PhonemeData.Morpheme b1 ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ PhonemeData.Phoneme
                        PhonemeData.$fOrdPhoneme
                        a1
                        b1 of wild2 {
                   DEFAULT -> wild GHC.Types.GT -> wild1 } } }) -}
2e1a0e09a78074c21fc0136e518a2133
  $fOrdPhonation :: GHC.Classes.Ord PhonemeData.Phonation
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ PhonemeData.Phonation
                  PhonemeData.$fEqPhonation
                  PhonemeData.$fOrdPhonation_$ccompare
                  PhonemeData.$fOrdPhonation_$c<
                  PhonemeData.$fOrdPhonation_$c<=
                  PhonemeData.$fOrdPhonation_$c>
                  PhonemeData.$fOrdPhonation_$c>=
                  PhonemeData.$fOrdPhonation_$cmax
                  PhonemeData.$fOrdPhonation_$cmin -}
2e1a0e09a78074c21fc0136e518a2133
  $fOrdPhonation_$c< ::
    PhonemeData.Phonation -> PhonemeData.Phonation -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: PhonemeData.Phonation)
                   (b :: PhonemeData.Phonation) ->
                 let {
                   $j :: GHC.Prim.Int# -> GHC.Types.Bool
                     {- Arity: 1, Strictness: <S,U> -}
                   = \ (a# :: GHC.Prim.Int#)[OneShot] ->
                     case b of wild {
                       PhonemeData.VOICELESS
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.<# a# 0#)
                       PhonemeData.BREATHY
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.<# a# 1#)
                       PhonemeData.SLACK
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.<# a# 2#)
                       PhonemeData.MODAL
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.<# a# 3#)
                       PhonemeData.STIFF
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.<# a# 4#)
                       PhonemeData.CREAKY
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.<# a# 5#)
                       PhonemeData.ASPIRATED
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.<# a# 6#) }
                 } in
                 case a of wild {
                   PhonemeData.VOICELESS -> $j 0#
                   PhonemeData.BREATHY -> $j 1#
                   PhonemeData.SLACK -> $j 2#
                   PhonemeData.MODAL -> $j 3#
                   PhonemeData.STIFF -> $j 4#
                   PhonemeData.CREAKY -> $j 5#
                   PhonemeData.ASPIRATED -> $j 6# }) -}
2e1a0e09a78074c21fc0136e518a2133
  $fOrdPhonation_$c<= ::
    PhonemeData.Phonation -> PhonemeData.Phonation -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: PhonemeData.Phonation)
                   (b :: PhonemeData.Phonation) ->
                 let {
                   $j :: GHC.Prim.Int# -> GHC.Types.Bool
                     {- Arity: 1, Strictness: <S,U> -}
                   = \ (a# :: GHC.Prim.Int#)[OneShot] ->
                     case b of wild {
                       PhonemeData.VOICELESS
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.<=# a# 0#)
                       PhonemeData.BREATHY
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.<=# a# 1#)
                       PhonemeData.SLACK
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.<=# a# 2#)
                       PhonemeData.MODAL
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.<=# a# 3#)
                       PhonemeData.STIFF
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.<=# a# 4#)
                       PhonemeData.CREAKY
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.<=# a# 5#)
                       PhonemeData.ASPIRATED
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.<=# a# 6#) }
                 } in
                 case a of wild {
                   PhonemeData.VOICELESS -> $j 0#
                   PhonemeData.BREATHY -> $j 1#
                   PhonemeData.SLACK -> $j 2#
                   PhonemeData.MODAL -> $j 3#
                   PhonemeData.STIFF -> $j 4#
                   PhonemeData.CREAKY -> $j 5#
                   PhonemeData.ASPIRATED -> $j 6# }) -}
2e1a0e09a78074c21fc0136e518a2133
  $fOrdPhonation_$c> ::
    PhonemeData.Phonation -> PhonemeData.Phonation -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: PhonemeData.Phonation)
                   (b :: PhonemeData.Phonation) ->
                 let {
                   $j :: GHC.Prim.Int# -> GHC.Types.Bool
                     {- Arity: 1, Strictness: <S,U> -}
                   = \ (a# :: GHC.Prim.Int#)[OneShot] ->
                     case b of wild {
                       PhonemeData.VOICELESS
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.># a# 0#)
                       PhonemeData.BREATHY
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.># a# 1#)
                       PhonemeData.SLACK
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.># a# 2#)
                       PhonemeData.MODAL
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.># a# 3#)
                       PhonemeData.STIFF
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.># a# 4#)
                       PhonemeData.CREAKY
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.># a# 5#)
                       PhonemeData.ASPIRATED
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.># a# 6#) }
                 } in
                 case a of wild {
                   PhonemeData.VOICELESS -> $j 0#
                   PhonemeData.BREATHY -> $j 1#
                   PhonemeData.SLACK -> $j 2#
                   PhonemeData.MODAL -> $j 3#
                   PhonemeData.STIFF -> $j 4#
                   PhonemeData.CREAKY -> $j 5#
                   PhonemeData.ASPIRATED -> $j 6# }) -}
2e1a0e09a78074c21fc0136e518a2133
  $fOrdPhonation_$c>= ::
    PhonemeData.Phonation -> PhonemeData.Phonation -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: PhonemeData.Phonation)
                   (b :: PhonemeData.Phonation) ->
                 let {
                   $j :: GHC.Prim.Int# -> GHC.Types.Bool
                     {- Arity: 1, Strictness: <S,U> -}
                   = \ (a# :: GHC.Prim.Int#)[OneShot] ->
                     case b of wild {
                       PhonemeData.VOICELESS
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.>=# a# 0#)
                       PhonemeData.BREATHY
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.>=# a# 1#)
                       PhonemeData.SLACK
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.>=# a# 2#)
                       PhonemeData.MODAL
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.>=# a# 3#)
                       PhonemeData.STIFF
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.>=# a# 4#)
                       PhonemeData.CREAKY
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.>=# a# 5#)
                       PhonemeData.ASPIRATED
                       -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.>=# a# 6#) }
                 } in
                 case a of wild {
                   PhonemeData.VOICELESS -> $j 0#
                   PhonemeData.BREATHY -> $j 1#
                   PhonemeData.SLACK -> $j 2#
                   PhonemeData.MODAL -> $j 3#
                   PhonemeData.STIFF -> $j 4#
                   PhonemeData.CREAKY -> $j 5#
                   PhonemeData.ASPIRATED -> $j 6# }) -}
2e1a0e09a78074c21fc0136e518a2133
  $fOrdPhonation_$ccompare ::
    PhonemeData.Phonation
    -> PhonemeData.Phonation -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: PhonemeData.Phonation)
                   (b :: PhonemeData.Phonation) ->
                 case a of wild {
                   PhonemeData.VOICELESS
                   -> case b of wild1 {
                        PhonemeData.VOICELESS -> GHC.Types.EQ
                        PhonemeData.BREATHY -> GHC.Types.LT
                        PhonemeData.SLACK -> GHC.Types.LT
                        PhonemeData.MODAL -> GHC.Types.LT
                        PhonemeData.STIFF -> GHC.Types.LT
                        PhonemeData.CREAKY -> GHC.Types.LT
                        PhonemeData.ASPIRATED -> GHC.Types.LT }
                   PhonemeData.BREATHY
                   -> case b of wild1 {
                        PhonemeData.VOICELESS -> GHC.Types.GT
                        PhonemeData.BREATHY -> GHC.Types.EQ
                        PhonemeData.SLACK -> GHC.Types.LT
                        PhonemeData.MODAL -> GHC.Types.LT
                        PhonemeData.STIFF -> GHC.Types.LT
                        PhonemeData.CREAKY -> GHC.Types.LT
                        PhonemeData.ASPIRATED -> GHC.Types.LT }
                   PhonemeData.SLACK
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        PhonemeData.SLACK -> GHC.Types.EQ
                        PhonemeData.MODAL -> GHC.Types.LT
                        PhonemeData.STIFF -> GHC.Types.LT
                        PhonemeData.CREAKY -> GHC.Types.LT
                        PhonemeData.ASPIRATED -> GHC.Types.LT }
                   PhonemeData.MODAL
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        PhonemeData.MODAL -> GHC.Types.EQ
                        PhonemeData.STIFF -> GHC.Types.LT
                        PhonemeData.CREAKY -> GHC.Types.LT
                        PhonemeData.ASPIRATED -> GHC.Types.LT }
                   PhonemeData.STIFF
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        PhonemeData.STIFF -> GHC.Types.EQ
                        PhonemeData.CREAKY -> GHC.Types.LT
                        PhonemeData.ASPIRATED -> GHC.Types.LT }
                   PhonemeData.CREAKY
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        PhonemeData.CREAKY -> GHC.Types.EQ
                        PhonemeData.ASPIRATED -> GHC.Types.LT }
                   PhonemeData.ASPIRATED
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        PhonemeData.ASPIRATED -> GHC.Types.EQ } }) -}
2e1a0e09a78074c21fc0136e518a2133
  $fOrdPhonation_$cmax ::
    PhonemeData.Phonation
    -> PhonemeData.Phonation -> PhonemeData.Phonation
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: PhonemeData.Phonation) (y :: PhonemeData.Phonation) ->
                 case PhonemeData.$fOrdPhonation_$c<= x y of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
2e1a0e09a78074c21fc0136e518a2133
  $fOrdPhonation_$cmin ::
    PhonemeData.Phonation
    -> PhonemeData.Phonation -> PhonemeData.Phonation
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: PhonemeData.Phonation) (y :: PhonemeData.Phonation) ->
                 case PhonemeData.$fOrdPhonation_$c<= x y of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
a99d82394cccf94f6dc3580d7da31e00
  $fOrdPhoneme :: GHC.Classes.Ord PhonemeData.Phoneme
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ PhonemeData.Phoneme
                  PhonemeData.$fEqPhoneme
                  PhonemeData.$fOrdPhoneme_$ccompare
                  PhonemeData.$fOrdPhoneme_$c<
                  PhonemeData.$fOrdPhoneme_$c<=
                  PhonemeData.$fOrdPhoneme_$c>
                  PhonemeData.$fOrdPhoneme_$c>=
                  PhonemeData.$fOrdPhoneme_$cmax
                  PhonemeData.$fOrdPhoneme_$cmin -}
a99d82394cccf94f6dc3580d7da31e00
  $fOrdPhoneme_$c< ::
    PhonemeData.Phoneme -> PhonemeData.Phoneme -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: PhonemeData.Phoneme) (y :: PhonemeData.Phoneme) ->
                 case PhonemeData.$fOrdPhoneme_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
a99d82394cccf94f6dc3580d7da31e00
  $fOrdPhoneme_$c<= ::
    PhonemeData.Phoneme -> PhonemeData.Phoneme -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: PhonemeData.Phoneme) (y :: PhonemeData.Phoneme) ->
                 case PhonemeData.$fOrdPhoneme_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
a99d82394cccf94f6dc3580d7da31e00
  $fOrdPhoneme_$c> ::
    PhonemeData.Phoneme -> PhonemeData.Phoneme -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: PhonemeData.Phoneme) (y :: PhonemeData.Phoneme) ->
                 case PhonemeData.$fOrdPhoneme_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
a99d82394cccf94f6dc3580d7da31e00
  $fOrdPhoneme_$c>= ::
    PhonemeData.Phoneme -> PhonemeData.Phoneme -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: PhonemeData.Phoneme) (y :: PhonemeData.Phoneme) ->
                 case PhonemeData.$fOrdPhoneme_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
a99d82394cccf94f6dc3580d7da31e00
  $fOrdPhoneme_$ccompare ::
    PhonemeData.Phoneme -> PhonemeData.Phoneme -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
a99d82394cccf94f6dc3580d7da31e00
  $fOrdPhoneme_$cmax ::
    PhonemeData.Phoneme -> PhonemeData.Phoneme -> PhonemeData.Phoneme
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: PhonemeData.Phoneme) (y :: PhonemeData.Phoneme) ->
                 case PhonemeData.$fOrdPhoneme_$ccompare x y of wild {
                   DEFAULT -> y GHC.Types.GT -> x }) -}
a99d82394cccf94f6dc3580d7da31e00
  $fOrdPhoneme_$cmin ::
    PhonemeData.Phoneme -> PhonemeData.Phoneme -> PhonemeData.Phoneme
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: PhonemeData.Phoneme) (y :: PhonemeData.Phoneme) ->
                 case PhonemeData.$fOrdPhoneme_$ccompare x y of wild {
                   DEFAULT -> x GHC.Types.GT -> y }) -}
27d4fb2260414ca95f988dc9fef00141
  $fOrdPlace :: GHC.Classes.Ord PhonemeData.Place
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ PhonemeData.Place
                  PhonemeData.$fEqPlace
                  PhonemeData.$fOrdPlace_$ccompare
                  PhonemeData.$fOrdPlace_$c<
                  PhonemeData.$fOrdPlace_$c<=
                  PhonemeData.$fOrdPlace_$c>
                  PhonemeData.$fOrdPlace_$c>=
                  PhonemeData.$fOrdPlace_$cmax
                  PhonemeData.$fOrdPlace_$cmin -}
27d4fb2260414ca95f988dc9fef00141
  $fOrdPlace_$c< ::
    PhonemeData.Place -> PhonemeData.Place -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: PhonemeData.Place) (b :: PhonemeData.Place) ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.<#
                      (GHC.Prim.dataToTag# @ PhonemeData.Place x1)
                      (GHC.Prim.dataToTag# @ PhonemeData.Place x2)) } }) -}
27d4fb2260414ca95f988dc9fef00141
  $fOrdPlace_$c<= ::
    PhonemeData.Place -> PhonemeData.Place -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: PhonemeData.Place) (b :: PhonemeData.Place) ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.<=#
                      (GHC.Prim.dataToTag# @ PhonemeData.Place x1)
                      (GHC.Prim.dataToTag# @ PhonemeData.Place x2)) } }) -}
27d4fb2260414ca95f988dc9fef00141
  $fOrdPlace_$c> ::
    PhonemeData.Place -> PhonemeData.Place -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: PhonemeData.Place) (b :: PhonemeData.Place) ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.>#
                      (GHC.Prim.dataToTag# @ PhonemeData.Place x1)
                      (GHC.Prim.dataToTag# @ PhonemeData.Place x2)) } }) -}
27d4fb2260414ca95f988dc9fef00141
  $fOrdPlace_$c>= ::
    PhonemeData.Place -> PhonemeData.Place -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: PhonemeData.Place) (b :: PhonemeData.Place) ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.>=#
                      (GHC.Prim.dataToTag# @ PhonemeData.Place x1)
                      (GHC.Prim.dataToTag# @ PhonemeData.Place x2)) } }) -}
27d4fb2260414ca95f988dc9fef00141
  $fOrdPlace_$ccompare ::
    PhonemeData.Place -> PhonemeData.Place -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: PhonemeData.Place) (b :: PhonemeData.Place) ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 let {
                   b# :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ PhonemeData.Place x2
                 } in
                 let {
                   a# :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ PhonemeData.Place x1
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# a# b#) of wild {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# a# b#) of wild1 {
                        GHC.Types.False -> GHC.Types.GT GHC.Types.True -> GHC.Types.EQ }
                   GHC.Types.True -> GHC.Types.LT } } }) -}
27d4fb2260414ca95f988dc9fef00141
  $fOrdPlace_$cmax ::
    PhonemeData.Place -> PhonemeData.Place -> PhonemeData.Place
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: PhonemeData.Place) (y :: PhonemeData.Place) ->
                 case x of x1 { DEFAULT ->
                 case y of x2 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=#
                           (GHC.Prim.dataToTag# @ PhonemeData.Place x1)
                           (GHC.Prim.dataToTag# @ PhonemeData.Place x2)) of wild {
                   GHC.Types.False -> x1 GHC.Types.True -> x2 } } }) -}
27d4fb2260414ca95f988dc9fef00141
  $fOrdPlace_$cmin ::
    PhonemeData.Place -> PhonemeData.Place -> PhonemeData.Place
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: PhonemeData.Place) (y :: PhonemeData.Place) ->
                 case x of x1 { DEFAULT ->
                 case y of x2 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=#
                           (GHC.Prim.dataToTag# @ PhonemeData.Place x1)
                           (GHC.Prim.dataToTag# @ PhonemeData.Place x2)) of wild {
                   GHC.Types.False -> x2 GHC.Types.True -> x1 } } }) -}
e7b029a5844a6e008b95082c9c811e33
  $fOrdRoundedness :: GHC.Classes.Ord PhonemeData.Roundedness
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ PhonemeData.Roundedness
                  PhonemeData.$fEqRoundedness
                  PhonemeData.$fOrdRoundedness_$ccompare
                  PhonemeData.$fOrdRoundedness_$c<
                  PhonemeData.$fOrdRoundedness_$c<=
                  PhonemeData.$fOrdRoundedness_$c>
                  PhonemeData.$fOrdRoundedness_$c>=
                  PhonemeData.$fOrdRoundedness_$cmax
                  PhonemeData.$fOrdRoundedness_$cmin -}
e7b029a5844a6e008b95082c9c811e33
  $fOrdRoundedness_$c< ::
    PhonemeData.Roundedness
    -> PhonemeData.Roundedness -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: PhonemeData.Roundedness) (b :: PhonemeData.Roundedness) ->
                 case a of wild {
                   PhonemeData.DEFAULT
                   -> case b of wild1 {
                        PhonemeData.DEFAULT -> GHC.Types.False
                        PhonemeData.ROUNDED -> GHC.Types.True
                        PhonemeData.UNROUNDED -> GHC.Types.True }
                   PhonemeData.ROUNDED
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False
                        PhonemeData.UNROUNDED -> GHC.Types.True }
                   PhonemeData.UNROUNDED
                   -> case b of wild1 { DEFAULT -> GHC.Types.False } }) -}
e7b029a5844a6e008b95082c9c811e33
  $fOrdRoundedness_$c<= ::
    PhonemeData.Roundedness
    -> PhonemeData.Roundedness -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: PhonemeData.Roundedness) (b :: PhonemeData.Roundedness) ->
                 case a of wild {
                   PhonemeData.DEFAULT
                   -> case b of wild1 { DEFAULT -> GHC.Types.True }
                   PhonemeData.ROUNDED
                   -> case b of wild1 {
                        PhonemeData.DEFAULT -> GHC.Types.False
                        PhonemeData.ROUNDED -> GHC.Types.True
                        PhonemeData.UNROUNDED -> GHC.Types.True }
                   PhonemeData.UNROUNDED
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False
                        PhonemeData.UNROUNDED -> GHC.Types.True } }) -}
e7b029a5844a6e008b95082c9c811e33
  $fOrdRoundedness_$c> ::
    PhonemeData.Roundedness
    -> PhonemeData.Roundedness -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: PhonemeData.Roundedness) (b :: PhonemeData.Roundedness) ->
                 case a of wild {
                   PhonemeData.DEFAULT
                   -> case b of wild1 { DEFAULT -> GHC.Types.False }
                   PhonemeData.ROUNDED
                   -> case b of wild1 {
                        PhonemeData.DEFAULT -> GHC.Types.True
                        PhonemeData.ROUNDED -> GHC.Types.False
                        PhonemeData.UNROUNDED -> GHC.Types.False }
                   PhonemeData.UNROUNDED
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        PhonemeData.UNROUNDED -> GHC.Types.False } }) -}
e7b029a5844a6e008b95082c9c811e33
  $fOrdRoundedness_$c>= ::
    PhonemeData.Roundedness
    -> PhonemeData.Roundedness -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: PhonemeData.Roundedness) (b :: PhonemeData.Roundedness) ->
                 case a of wild {
                   PhonemeData.DEFAULT
                   -> case b of wild1 {
                        PhonemeData.DEFAULT -> GHC.Types.True
                        PhonemeData.ROUNDED -> GHC.Types.False
                        PhonemeData.UNROUNDED -> GHC.Types.False }
                   PhonemeData.ROUNDED
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        PhonemeData.UNROUNDED -> GHC.Types.False }
                   PhonemeData.UNROUNDED
                   -> case b of wild1 { DEFAULT -> GHC.Types.True } }) -}
e7b029a5844a6e008b95082c9c811e33
  $fOrdRoundedness_$ccompare ::
    PhonemeData.Roundedness
    -> PhonemeData.Roundedness -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: PhonemeData.Roundedness)
                   (b :: PhonemeData.Roundedness) ->
                 case a of wild {
                   PhonemeData.DEFAULT
                   -> case b of wild1 {
                        PhonemeData.DEFAULT -> GHC.Types.EQ
                        PhonemeData.ROUNDED -> GHC.Types.LT
                        PhonemeData.UNROUNDED -> GHC.Types.LT }
                   PhonemeData.ROUNDED
                   -> case b of wild1 {
                        PhonemeData.DEFAULT -> GHC.Types.GT
                        PhonemeData.ROUNDED -> GHC.Types.EQ
                        PhonemeData.UNROUNDED -> GHC.Types.LT }
                   PhonemeData.UNROUNDED
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        PhonemeData.UNROUNDED -> GHC.Types.EQ } }) -}
e7b029a5844a6e008b95082c9c811e33
  $fOrdRoundedness_$cmax ::
    PhonemeData.Roundedness
    -> PhonemeData.Roundedness -> PhonemeData.Roundedness
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: PhonemeData.Roundedness) (y :: PhonemeData.Roundedness) ->
                 case x of wild {
                   PhonemeData.DEFAULT -> y
                   PhonemeData.ROUNDED
                   -> case y of wild1 {
                        DEFAULT -> PhonemeData.ROUNDED
                        PhonemeData.UNROUNDED -> PhonemeData.UNROUNDED }
                   PhonemeData.UNROUNDED
                   -> case y of wild1 { DEFAULT -> PhonemeData.UNROUNDED } }) -}
e7b029a5844a6e008b95082c9c811e33
  $fOrdRoundedness_$cmin ::
    PhonemeData.Roundedness
    -> PhonemeData.Roundedness -> PhonemeData.Roundedness
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: PhonemeData.Roundedness) (y :: PhonemeData.Roundedness) ->
                 case x of wild {
                   PhonemeData.DEFAULT
                   -> case y of wild1 { DEFAULT -> PhonemeData.DEFAULT }
                   PhonemeData.ROUNDED
                   -> case y of wild1 {
                        PhonemeData.DEFAULT -> PhonemeData.DEFAULT
                        PhonemeData.ROUNDED -> PhonemeData.ROUNDED
                        PhonemeData.UNROUNDED -> PhonemeData.ROUNDED }
                   PhonemeData.UNROUNDED -> y }) -}
87cd4acf5bb796129082f7006a0ea5b8
  $fOrdTone :: GHC.Classes.Ord PhonemeData.Tone
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ PhonemeData.Tone
                  PhonemeData.$fEqTone
                  PhonemeData.$fOrdTone_$ccompare
                  PhonemeData.$fOrdTone_$c<
                  PhonemeData.$fOrdTone_$c<=
                  PhonemeData.$fOrdTone_$c>
                  PhonemeData.$fOrdTone_$c>=
                  PhonemeData.$fOrdTone_$cmax
                  PhonemeData.$fOrdTone_$cmin -}
87cd4acf5bb796129082f7006a0ea5b8
  $fOrdTone_$c< ::
    PhonemeData.Tone -> PhonemeData.Tone -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: PhonemeData.Tone) (b :: PhonemeData.Tone) ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.<#
                      (GHC.Prim.dataToTag# @ PhonemeData.Tone x1)
                      (GHC.Prim.dataToTag# @ PhonemeData.Tone x2)) } }) -}
87cd4acf5bb796129082f7006a0ea5b8
  $fOrdTone_$c<= ::
    PhonemeData.Tone -> PhonemeData.Tone -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: PhonemeData.Tone) (b :: PhonemeData.Tone) ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.<=#
                      (GHC.Prim.dataToTag# @ PhonemeData.Tone x1)
                      (GHC.Prim.dataToTag# @ PhonemeData.Tone x2)) } }) -}
87cd4acf5bb796129082f7006a0ea5b8
  $fOrdTone_$c> ::
    PhonemeData.Tone -> PhonemeData.Tone -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: PhonemeData.Tone) (b :: PhonemeData.Tone) ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.>#
                      (GHC.Prim.dataToTag# @ PhonemeData.Tone x1)
                      (GHC.Prim.dataToTag# @ PhonemeData.Tone x2)) } }) -}
87cd4acf5bb796129082f7006a0ea5b8
  $fOrdTone_$c>= ::
    PhonemeData.Tone -> PhonemeData.Tone -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: PhonemeData.Tone) (b :: PhonemeData.Tone) ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.>=#
                      (GHC.Prim.dataToTag# @ PhonemeData.Tone x1)
                      (GHC.Prim.dataToTag# @ PhonemeData.Tone x2)) } }) -}
87cd4acf5bb796129082f7006a0ea5b8
  $fOrdTone_$ccompare ::
    PhonemeData.Tone -> PhonemeData.Tone -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: PhonemeData.Tone) (b :: PhonemeData.Tone) ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 let {
                   b# :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ PhonemeData.Tone x2
                 } in
                 let {
                   a# :: GHC.Prim.Int# = GHC.Prim.dataToTag# @ PhonemeData.Tone x1
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# a# b#) of wild {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# a# b#) of wild1 {
                        GHC.Types.False -> GHC.Types.GT GHC.Types.True -> GHC.Types.EQ }
                   GHC.Types.True -> GHC.Types.LT } } }) -}
87cd4acf5bb796129082f7006a0ea5b8
  $fOrdTone_$cmax ::
    PhonemeData.Tone -> PhonemeData.Tone -> PhonemeData.Tone
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: PhonemeData.Tone) (y :: PhonemeData.Tone) ->
                 case x of x1 { DEFAULT ->
                 case y of x2 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=#
                           (GHC.Prim.dataToTag# @ PhonemeData.Tone x1)
                           (GHC.Prim.dataToTag# @ PhonemeData.Tone x2)) of wild {
                   GHC.Types.False -> x1 GHC.Types.True -> x2 } } }) -}
87cd4acf5bb796129082f7006a0ea5b8
  $fOrdTone_$cmin ::
    PhonemeData.Tone -> PhonemeData.Tone -> PhonemeData.Tone
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: PhonemeData.Tone) (y :: PhonemeData.Tone) ->
                 case x of x1 { DEFAULT ->
                 case y of x2 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=#
                           (GHC.Prim.dataToTag# @ PhonemeData.Tone x1)
                           (GHC.Prim.dataToTag# @ PhonemeData.Tone x2)) of wild {
                   GHC.Types.False -> x2 GHC.Types.True -> x1 } } }) -}
3bda176bb325231b683f164bd205b115
  $fOrdWord :: GHC.Classes.Ord PhonemeData.Word
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ PhonemeData.Word
                  PhonemeData.$fEqWord
                  PhonemeData.$fOrdWord_$ccompare
                  PhonemeData.$fOrdWord_$c<
                  PhonemeData.$fOrdWord_$c<=
                  PhonemeData.$fOrdWord_$c>
                  PhonemeData.$fOrdWord_$c>=
                  PhonemeData.$fOrdWord_$cmax
                  PhonemeData.$fOrdWord_$cmin -}
3bda176bb325231b683f164bd205b115
  $fOrdWord_$c< ::
    PhonemeData.Word -> PhonemeData.Word -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: PhonemeData.Word) (b :: PhonemeData.Word) ->
                 case a of wild { PhonemeData.Word a1 ->
                 case b of wild1 { PhonemeData.Word b1 ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ PhonemeData.Morpheme
                        PhonemeData.$fOrdMorpheme
                        a1
                        b1 of wild2 {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True } } }) -}
3bda176bb325231b683f164bd205b115
  $fOrdWord_$c<= ::
    PhonemeData.Word -> PhonemeData.Word -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: PhonemeData.Word) (b :: PhonemeData.Word) ->
                 case a of wild { PhonemeData.Word a1 ->
                 case b of wild1 { PhonemeData.Word b1 ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ PhonemeData.Morpheme
                        PhonemeData.$fOrdMorpheme
                        a1
                        b1 of wild2 {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False } } }) -}
3bda176bb325231b683f164bd205b115
  $fOrdWord_$c> ::
    PhonemeData.Word -> PhonemeData.Word -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: PhonemeData.Word) (b :: PhonemeData.Word) ->
                 case a of wild { PhonemeData.Word a1 ->
                 case b of wild1 { PhonemeData.Word b1 ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ PhonemeData.Morpheme
                        PhonemeData.$fOrdMorpheme
                        a1
                        b1 of wild2 {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True } } }) -}
3bda176bb325231b683f164bd205b115
  $fOrdWord_$c>= ::
    PhonemeData.Word -> PhonemeData.Word -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: PhonemeData.Word) (b :: PhonemeData.Word) ->
                 case a of wild { PhonemeData.Word a1 ->
                 case b of wild1 { PhonemeData.Word b1 ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ PhonemeData.Morpheme
                        PhonemeData.$fOrdMorpheme
                        a1
                        b1 of wild2 {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False } } }) -}
3bda176bb325231b683f164bd205b115
  $fOrdWord_$ccompare ::
    PhonemeData.Word -> PhonemeData.Word -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: PhonemeData.Word) (b :: PhonemeData.Word) ->
                 case a of wild { PhonemeData.Word a1 ->
                 case b of wild1 { PhonemeData.Word b1 ->
                 GHC.Classes.$fOrd[]_$ccompare
                   @ PhonemeData.Morpheme
                   PhonemeData.$fOrdMorpheme
                   a1
                   b1 } }) -}
3bda176bb325231b683f164bd205b115
  $fOrdWord_$cmax ::
    PhonemeData.Word -> PhonemeData.Word -> PhonemeData.Word
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: PhonemeData.Word) (y :: PhonemeData.Word) ->
                 case x of wild { PhonemeData.Word a1 ->
                 case y of wild1 { PhonemeData.Word b1 ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ PhonemeData.Morpheme
                        PhonemeData.$fOrdMorpheme
                        a1
                        b1 of wild2 {
                   DEFAULT -> wild1 GHC.Types.GT -> wild } } }) -}
3bda176bb325231b683f164bd205b115
  $fOrdWord_$cmin ::
    PhonemeData.Word -> PhonemeData.Word -> PhonemeData.Word
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: PhonemeData.Word) (y :: PhonemeData.Word) ->
                 case x of wild { PhonemeData.Word a1 ->
                 case y of wild1 { PhonemeData.Word b1 ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ PhonemeData.Morpheme
                        PhonemeData.$fOrdMorpheme
                        a1
                        b1 of wild2 {
                   DEFAULT -> wild GHC.Types.GT -> wild1 } } }) -}
d7d82e642198a794ac3b3638da1bf9f3
  $fReadBackness :: GHC.Read.Read PhonemeData.Backness
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ PhonemeData.Backness
                  PhonemeData.$fReadBackness_$creadsPrec
                  PhonemeData.$fReadBackness_$creadList
                  PhonemeData.$fReadBackness_$creadPrec
                  PhonemeData.$fReadBackness_$creadListPrec -}
d7d82e642198a794ac3b3638da1bf9f3
  $fReadBackness1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([PhonemeData.Backness] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [PhonemeData.Backness]
                            -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.$wlist
                   @ PhonemeData.Backness
                   PhonemeData.$fReadBackness2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <PhonemeData.Backness>_R))
                   @ b
                   eta1) -}
d7d82e642198a794ac3b3638da1bf9f3
  $fReadBackness10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Backness -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: PhonemeData.Backness
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta PhonemeData.FRONT) -}
e26a7d5cf05bc8778d0bc6894dc7e3e3
  $fReadBackness11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FRONT"#) -}
d7d82e642198a794ac3b3638da1bf9f3
  $fReadBackness12 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Backness)
  {- Strictness: m,
     Unfolding: ((PhonemeData.$fReadBackness14,
                  PhonemeData.$fReadBackness13
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <PhonemeData.Backness>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <PhonemeData.Backness>_R))))) -}
d7d82e642198a794ac3b3638da1bf9f3
  $fReadBackness13 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Backness -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: PhonemeData.Backness
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta PhonemeData.NEARFRONT) -}
ca896fb84503ce41c48e87688631d97b
  $fReadBackness14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NEARFRONT"#) -}
d7d82e642198a794ac3b3638da1bf9f3
  $fReadBackness15 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Backness)
  {- Strictness: m,
     Unfolding: ((PhonemeData.$fReadBackness17,
                  PhonemeData.$fReadBackness16
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <PhonemeData.Backness>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <PhonemeData.Backness>_R))))) -}
d7d82e642198a794ac3b3638da1bf9f3
  $fReadBackness16 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Backness -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: PhonemeData.Backness
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta PhonemeData.CENTRAL) -}
7e0a7d05d6b346852a4f8b81ddcab90a
  $fReadBackness17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "CENTRAL"#) -}
d7d82e642198a794ac3b3638da1bf9f3
  $fReadBackness18 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Backness)
  {- Strictness: m,
     Unfolding: ((PhonemeData.$fReadBackness20,
                  PhonemeData.$fReadBackness19
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <PhonemeData.Backness>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <PhonemeData.Backness>_R))))) -}
d7d82e642198a794ac3b3638da1bf9f3
  $fReadBackness19 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Backness -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: PhonemeData.Backness
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta PhonemeData.NEARBACK) -}
d7d82e642198a794ac3b3638da1bf9f3
  $fReadBackness2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP PhonemeData.Backness
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ PhonemeData.Backness
                   PhonemeData.$fReadBackness3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <PhonemeData.Backness>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <PhonemeData.Backness>_R)))) -}
fe3facaccbf4f2d8361827db80401884
  $fReadBackness20 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NEARBACK"#) -}
d7d82e642198a794ac3b3638da1bf9f3
  $fReadBackness21 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Backness)
  {- Strictness: m,
     Unfolding: ((PhonemeData.$fReadBackness23,
                  PhonemeData.$fReadBackness22
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <PhonemeData.Backness>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <PhonemeData.Backness>_R))))) -}
d7d82e642198a794ac3b3638da1bf9f3
  $fReadBackness22 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Backness -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: PhonemeData.Backness
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta PhonemeData.BACK) -}
9e1111a6f57bbfd573d68eccf3f02b37
  $fReadBackness23 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "BACK"#) -}
d7d82e642198a794ac3b3638da1bf9f3
  $fReadBackness24 ::
    Text.ParserCombinators.ReadP.P [PhonemeData.Backness]
  {- Unfolding: (GHC.Read.$wlist
                   @ PhonemeData.Backness
                   PhonemeData.$fReadBackness2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <PhonemeData.Backness>_R))
                   @ [PhonemeData.Backness]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [PhonemeData.Backness])) -}
d7d82e642198a794ac3b3638da1bf9f3
  $fReadBackness3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Backness -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: PhonemeData.Backness
                            -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.choose2
                   @ PhonemeData.Backness
                   PhonemeData.$fReadBackness4
                   eta
                   @ b
                   eta1) -}
d7d82e642198a794ac3b3638da1bf9f3
  $fReadBackness4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Backness)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Backness)
                   PhonemeData.$fReadBackness21
                   PhonemeData.$fReadBackness5) -}
d7d82e642198a794ac3b3638da1bf9f3
  $fReadBackness5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Backness)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Backness)
                   PhonemeData.$fReadBackness18
                   PhonemeData.$fReadBackness6) -}
d7d82e642198a794ac3b3638da1bf9f3
  $fReadBackness6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Backness)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Backness)
                   PhonemeData.$fReadBackness15
                   PhonemeData.$fReadBackness7) -}
d7d82e642198a794ac3b3638da1bf9f3
  $fReadBackness7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Backness)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Backness)
                   PhonemeData.$fReadBackness12
                   PhonemeData.$fReadBackness8) -}
d7d82e642198a794ac3b3638da1bf9f3
  $fReadBackness8 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Backness)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Backness)
                   PhonemeData.$fReadBackness9
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Backness))) -}
d7d82e642198a794ac3b3638da1bf9f3
  $fReadBackness9 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Backness)
  {- Strictness: m,
     Unfolding: ((PhonemeData.$fReadBackness11,
                  PhonemeData.$fReadBackness10
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <PhonemeData.Backness>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <PhonemeData.Backness>_R))))) -}
d7d82e642198a794ac3b3638da1bf9f3
  $fReadBackness_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [PhonemeData.Backness]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [PhonemeData.Backness]
                   PhonemeData.$fReadBackness24) -}
d7d82e642198a794ac3b3638da1bf9f3
  $fReadBackness_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [PhonemeData.Backness]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                PhonemeData.$fReadBackness1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[PhonemeData.Backness]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[PhonemeData.Backness]>_R))) -}
d7d82e642198a794ac3b3638da1bf9f3
  $fReadBackness_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Backness
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                PhonemeData.$fReadBackness2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <PhonemeData.Backness>_R)) -}
d7d82e642198a794ac3b3638da1bf9f3
  $fReadBackness_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS PhonemeData.Backness
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ PhonemeData.Backness
                   ((GHC.Read.$fReadDouble10
                       @ PhonemeData.Backness
                       PhonemeData.$fReadBackness3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <PhonemeData.Backness>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <PhonemeData.Backness>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <PhonemeData.Backness>_R)
                      @ PhonemeData.Backness
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ PhonemeData.Backness))) -}
ba05bb435342e1a32b92b81d74410bc0
  $fReadHeight :: GHC.Read.Read PhonemeData.Height
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ PhonemeData.Height
                  PhonemeData.$fReadHeight_$creadsPrec
                  PhonemeData.$fReadHeight_$creadList
                  PhonemeData.$fReadHeight_$creadPrec
                  PhonemeData.$fReadHeight_$creadListPrec -}
ba05bb435342e1a32b92b81d74410bc0
  $fReadHeight1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([PhonemeData.Height] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [PhonemeData.Height]
                            -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.$wlist
                   @ PhonemeData.Height
                   PhonemeData.$fReadHeight2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <PhonemeData.Height>_R))
                   @ b
                   eta1) -}
ba05bb435342e1a32b92b81d74410bc0
  $fReadHeight10 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Height)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Height)
                   PhonemeData.$fReadHeight11
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Height))) -}
ba05bb435342e1a32b92b81d74410bc0
  $fReadHeight11 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Height)
  {- Strictness: m,
     Unfolding: ((PhonemeData.$fReadHeight13,
                  PhonemeData.$fReadHeight12
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <PhonemeData.Height>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <PhonemeData.Height>_R))))) -}
ba05bb435342e1a32b92b81d74410bc0
  $fReadHeight12 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Height -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: PhonemeData.Height -> Text.ParserCombinators.ReadP.P b) ->
                 eta PhonemeData.OPEN) -}
b24bdfc2bf255459d30408bf25f75ce1
  $fReadHeight13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OPEN"#) -}
ba05bb435342e1a32b92b81d74410bc0
  $fReadHeight14 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Height)
  {- Strictness: m,
     Unfolding: ((PhonemeData.$fReadHeight16,
                  PhonemeData.$fReadHeight15
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <PhonemeData.Height>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <PhonemeData.Height>_R))))) -}
ba05bb435342e1a32b92b81d74410bc0
  $fReadHeight15 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Height -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: PhonemeData.Height -> Text.ParserCombinators.ReadP.P b) ->
                 eta PhonemeData.NEAROPEN) -}
9b76a91d9d46d7ea1e09c9735eed7944
  $fReadHeight16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NEAROPEN"#) -}
ba05bb435342e1a32b92b81d74410bc0
  $fReadHeight17 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Height)
  {- Strictness: m,
     Unfolding: ((PhonemeData.$fReadHeight19,
                  PhonemeData.$fReadHeight18
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <PhonemeData.Height>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <PhonemeData.Height>_R))))) -}
ba05bb435342e1a32b92b81d74410bc0
  $fReadHeight18 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Height -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: PhonemeData.Height -> Text.ParserCombinators.ReadP.P b) ->
                 eta PhonemeData.OPENMID) -}
f7703e9e84465d7e84a4459317cd9336
  $fReadHeight19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OPENMID"#) -}
ba05bb435342e1a32b92b81d74410bc0
  $fReadHeight2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP PhonemeData.Height
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ PhonemeData.Height
                   PhonemeData.$fReadHeight3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <PhonemeData.Height>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <PhonemeData.Height>_R)))) -}
ba05bb435342e1a32b92b81d74410bc0
  $fReadHeight20 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Height)
  {- Strictness: m,
     Unfolding: ((PhonemeData.$fReadHeight22,
                  PhonemeData.$fReadHeight21
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <PhonemeData.Height>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <PhonemeData.Height>_R))))) -}
ba05bb435342e1a32b92b81d74410bc0
  $fReadHeight21 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Height -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: PhonemeData.Height -> Text.ParserCombinators.ReadP.P b) ->
                 eta PhonemeData.MID) -}
9ad86be549998e7ba282658966bde85d
  $fReadHeight22 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "MID"#) -}
ba05bb435342e1a32b92b81d74410bc0
  $fReadHeight23 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Height)
  {- Strictness: m,
     Unfolding: ((PhonemeData.$fReadHeight25,
                  PhonemeData.$fReadHeight24
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <PhonemeData.Height>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <PhonemeData.Height>_R))))) -}
ba05bb435342e1a32b92b81d74410bc0
  $fReadHeight24 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Height -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: PhonemeData.Height -> Text.ParserCombinators.ReadP.P b) ->
                 eta PhonemeData.CLOSEMID) -}
e13054df0da5b2a208614da362e25a69
  $fReadHeight25 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "CLOSEMID"#) -}
ba05bb435342e1a32b92b81d74410bc0
  $fReadHeight26 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Height)
  {- Strictness: m,
     Unfolding: ((PhonemeData.$fReadHeight28,
                  PhonemeData.$fReadHeight27
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <PhonemeData.Height>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <PhonemeData.Height>_R))))) -}
ba05bb435342e1a32b92b81d74410bc0
  $fReadHeight27 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Height -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: PhonemeData.Height -> Text.ParserCombinators.ReadP.P b) ->
                 eta PhonemeData.NEARCLOSE) -}
481411137addd1afcd1a3040b062fcb7
  $fReadHeight28 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NEARCLOSE"#) -}
ba05bb435342e1a32b92b81d74410bc0
  $fReadHeight29 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Height)
  {- Strictness: m,
     Unfolding: ((PhonemeData.$fReadHeight31,
                  PhonemeData.$fReadHeight30
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <PhonemeData.Height>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <PhonemeData.Height>_R))))) -}
ba05bb435342e1a32b92b81d74410bc0
  $fReadHeight3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Height -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: PhonemeData.Height -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.choose2
                   @ PhonemeData.Height
                   PhonemeData.$fReadHeight4
                   eta
                   @ b
                   eta1) -}
ba05bb435342e1a32b92b81d74410bc0
  $fReadHeight30 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Height -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: PhonemeData.Height -> Text.ParserCombinators.ReadP.P b) ->
                 eta PhonemeData.CLOSE) -}
744de0a4e11b7a99a71f069f7fbc027d
  $fReadHeight31 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "CLOSE"#) -}
ba05bb435342e1a32b92b81d74410bc0
  $fReadHeight32 ::
    Text.ParserCombinators.ReadP.P [PhonemeData.Height]
  {- Unfolding: (GHC.Read.$wlist
                   @ PhonemeData.Height
                   PhonemeData.$fReadHeight2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <PhonemeData.Height>_R))
                   @ [PhonemeData.Height]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [PhonemeData.Height])) -}
ba05bb435342e1a32b92b81d74410bc0
  $fReadHeight4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Height)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Height)
                   PhonemeData.$fReadHeight29
                   PhonemeData.$fReadHeight5) -}
ba05bb435342e1a32b92b81d74410bc0
  $fReadHeight5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Height)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Height)
                   PhonemeData.$fReadHeight26
                   PhonemeData.$fReadHeight6) -}
ba05bb435342e1a32b92b81d74410bc0
  $fReadHeight6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Height)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Height)
                   PhonemeData.$fReadHeight23
                   PhonemeData.$fReadHeight7) -}
ba05bb435342e1a32b92b81d74410bc0
  $fReadHeight7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Height)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Height)
                   PhonemeData.$fReadHeight20
                   PhonemeData.$fReadHeight8) -}
ba05bb435342e1a32b92b81d74410bc0
  $fReadHeight8 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Height)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Height)
                   PhonemeData.$fReadHeight17
                   PhonemeData.$fReadHeight9) -}
ba05bb435342e1a32b92b81d74410bc0
  $fReadHeight9 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Height)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Height)
                   PhonemeData.$fReadHeight14
                   PhonemeData.$fReadHeight10) -}
ba05bb435342e1a32b92b81d74410bc0
  $fReadHeight_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [PhonemeData.Height]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [PhonemeData.Height]
                   PhonemeData.$fReadHeight32) -}
ba05bb435342e1a32b92b81d74410bc0
  $fReadHeight_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [PhonemeData.Height]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                PhonemeData.$fReadHeight1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[PhonemeData.Height]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[PhonemeData.Height]>_R))) -}
ba05bb435342e1a32b92b81d74410bc0
  $fReadHeight_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Height
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                PhonemeData.$fReadHeight2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <PhonemeData.Height>_R)) -}
ba05bb435342e1a32b92b81d74410bc0
  $fReadHeight_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS PhonemeData.Height
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ PhonemeData.Height
                   ((GHC.Read.$fReadDouble10
                       @ PhonemeData.Height
                       PhonemeData.$fReadHeight3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <PhonemeData.Height>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <PhonemeData.Height>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <PhonemeData.Height>_R)
                      @ PhonemeData.Height
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ PhonemeData.Height))) -}
60079db4dd97570a8e4fd882d78d3a98
  $fReadLength :: GHC.Read.Read PhonemeData.Length
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ PhonemeData.Length
                  PhonemeData.$fReadLength_$creadsPrec
                  PhonemeData.$fReadLength_$creadList
                  PhonemeData.$fReadLength_$creadPrec
                  PhonemeData.$fReadLength_$creadListPrec -}
60079db4dd97570a8e4fd882d78d3a98
  $fReadLength1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([PhonemeData.Length] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [PhonemeData.Length]
                            -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.$wlist
                   @ PhonemeData.Length
                   PhonemeData.$fReadLength2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <PhonemeData.Length>_R))
                   @ b
                   eta1) -}
60079db4dd97570a8e4fd882d78d3a98
  $fReadLength10 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Length)
  {- Strictness: m,
     Unfolding: ((PhonemeData.$fReadLength12,
                  PhonemeData.$fReadLength11
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <PhonemeData.Length>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <PhonemeData.Length>_R))))) -}
60079db4dd97570a8e4fd882d78d3a98
  $fReadLength11 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Length -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: PhonemeData.Length -> Text.ParserCombinators.ReadP.P b) ->
                 eta PhonemeData.NORMAL) -}
ffdfcdb1967f86baf457b61b2600ad94
  $fReadLength12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NORMAL"#) -}
60079db4dd97570a8e4fd882d78d3a98
  $fReadLength13 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Length)
  {- Strictness: m,
     Unfolding: ((PhonemeData.$fReadLength15,
                  PhonemeData.$fReadLength14
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <PhonemeData.Length>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <PhonemeData.Length>_R))))) -}
60079db4dd97570a8e4fd882d78d3a98
  $fReadLength14 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Length -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: PhonemeData.Length -> Text.ParserCombinators.ReadP.P b) ->
                 eta PhonemeData.SHORT) -}
c4076f07d98157875d6a6e8e1fb03de4
  $fReadLength15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SHORT"#) -}
60079db4dd97570a8e4fd882d78d3a98
  $fReadLength16 ::
    Text.ParserCombinators.ReadP.P [PhonemeData.Length]
  {- Unfolding: (GHC.Read.$wlist
                   @ PhonemeData.Length
                   PhonemeData.$fReadLength2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <PhonemeData.Length>_R))
                   @ [PhonemeData.Length]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [PhonemeData.Length])) -}
60079db4dd97570a8e4fd882d78d3a98
  $fReadLength2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP PhonemeData.Length
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ PhonemeData.Length
                   PhonemeData.$fReadLength3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <PhonemeData.Length>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <PhonemeData.Length>_R)))) -}
60079db4dd97570a8e4fd882d78d3a98
  $fReadLength3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Length -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: PhonemeData.Length -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.choose2
                   @ PhonemeData.Length
                   PhonemeData.$fReadLength4
                   eta
                   @ b
                   eta1) -}
60079db4dd97570a8e4fd882d78d3a98
  $fReadLength4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Length)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Length)
                   PhonemeData.$fReadLength13
                   PhonemeData.$fReadLength5) -}
60079db4dd97570a8e4fd882d78d3a98
  $fReadLength5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Length)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Length)
                   PhonemeData.$fReadLength10
                   PhonemeData.$fReadLength6) -}
60079db4dd97570a8e4fd882d78d3a98
  $fReadLength6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Length)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Length)
                   PhonemeData.$fReadLength7
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Length))) -}
60079db4dd97570a8e4fd882d78d3a98
  $fReadLength7 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Length)
  {- Strictness: m,
     Unfolding: ((PhonemeData.$fReadLength9,
                  PhonemeData.$fReadLength8
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <PhonemeData.Length>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <PhonemeData.Length>_R))))) -}
60079db4dd97570a8e4fd882d78d3a98
  $fReadLength8 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Length -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: PhonemeData.Length -> Text.ParserCombinators.ReadP.P b) ->
                 eta PhonemeData.LONG) -}
de7ba16a6fe31364d50e7e4c8ec4a765
  $fReadLength9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "LONG"#) -}
60079db4dd97570a8e4fd882d78d3a98
  $fReadLength_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [PhonemeData.Length]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [PhonemeData.Length]
                   PhonemeData.$fReadLength16) -}
60079db4dd97570a8e4fd882d78d3a98
  $fReadLength_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [PhonemeData.Length]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                PhonemeData.$fReadLength1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[PhonemeData.Length]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[PhonemeData.Length]>_R))) -}
60079db4dd97570a8e4fd882d78d3a98
  $fReadLength_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Length
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                PhonemeData.$fReadLength2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <PhonemeData.Length>_R)) -}
60079db4dd97570a8e4fd882d78d3a98
  $fReadLength_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS PhonemeData.Length
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ PhonemeData.Length
                   ((GHC.Read.$fReadDouble10
                       @ PhonemeData.Length
                       PhonemeData.$fReadLength3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <PhonemeData.Length>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <PhonemeData.Length>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <PhonemeData.Length>_R)
                      @ PhonemeData.Length
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ PhonemeData.Length))) -}
cc18ad7b6a428637be9e42d493f6b8da
  $fReadManner :: GHC.Read.Read PhonemeData.Manner
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ PhonemeData.Manner
                  PhonemeData.$fReadManner_$creadsPrec
                  PhonemeData.$fReadManner_$creadList
                  PhonemeData.$fReadManner_$creadPrec
                  PhonemeData.$fReadManner_$creadListPrec -}
cc18ad7b6a428637be9e42d493f6b8da
  $fReadManner1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([PhonemeData.Manner] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [PhonemeData.Manner]
                            -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.$wlist
                   @ PhonemeData.Manner
                   PhonemeData.$fReadManner2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <PhonemeData.Manner>_R))
                   @ b
                   eta1) -}
cc18ad7b6a428637be9e42d493f6b8da
  $fReadManner10 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Manner)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Manner)
                   PhonemeData.$fReadManner35
                   PhonemeData.$fReadManner11) -}
cc18ad7b6a428637be9e42d493f6b8da
  $fReadManner11 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Manner)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Manner)
                   PhonemeData.$fReadManner32
                   PhonemeData.$fReadManner12) -}
cc18ad7b6a428637be9e42d493f6b8da
  $fReadManner12 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Manner)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Manner)
                   PhonemeData.$fReadManner29
                   PhonemeData.$fReadManner13) -}
cc18ad7b6a428637be9e42d493f6b8da
  $fReadManner13 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Manner)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Manner)
                   PhonemeData.$fReadManner26
                   PhonemeData.$fReadManner14) -}
cc18ad7b6a428637be9e42d493f6b8da
  $fReadManner14 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Manner)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Manner)
                   PhonemeData.$fReadManner23
                   PhonemeData.$fReadManner15) -}
cc18ad7b6a428637be9e42d493f6b8da
  $fReadManner15 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Manner)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Manner)
                   PhonemeData.$fReadManner20
                   PhonemeData.$fReadManner16) -}
cc18ad7b6a428637be9e42d493f6b8da
  $fReadManner16 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Manner)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Manner)
                   PhonemeData.$fReadManner17
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Manner))) -}
cc18ad7b6a428637be9e42d493f6b8da
  $fReadManner17 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Manner)
  {- Strictness: m,
     Unfolding: ((PhonemeData.$fReadManner19,
                  PhonemeData.$fReadManner18
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <PhonemeData.Manner>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <PhonemeData.Manner>_R))))) -}
cc18ad7b6a428637be9e42d493f6b8da
  $fReadManner18 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Manner -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: PhonemeData.Manner -> Text.ParserCombinators.ReadP.P b) ->
                 eta PhonemeData.LFLAP) -}
67c8ad7f9419a945ca265740f377c379
  $fReadManner19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "LFLAP"#) -}
cc18ad7b6a428637be9e42d493f6b8da
  $fReadManner2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP PhonemeData.Manner
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ PhonemeData.Manner
                   PhonemeData.$fReadManner3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <PhonemeData.Manner>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <PhonemeData.Manner>_R)))) -}
cc18ad7b6a428637be9e42d493f6b8da
  $fReadManner20 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Manner)
  {- Strictness: m,
     Unfolding: ((PhonemeData.$fReadManner22,
                  PhonemeData.$fReadManner21
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <PhonemeData.Manner>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <PhonemeData.Manner>_R))))) -}
cc18ad7b6a428637be9e42d493f6b8da
  $fReadManner21 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Manner -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: PhonemeData.Manner -> Text.ParserCombinators.ReadP.P b) ->
                 eta PhonemeData.LAPPROXIMANT) -}
0599332266825ff2376376d82f96f7ab
  $fReadManner22 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "LAPPROXIMANT"#) -}
cc18ad7b6a428637be9e42d493f6b8da
  $fReadManner23 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Manner)
  {- Strictness: m,
     Unfolding: ((PhonemeData.$fReadManner25,
                  PhonemeData.$fReadManner24
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <PhonemeData.Manner>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <PhonemeData.Manner>_R))))) -}
cc18ad7b6a428637be9e42d493f6b8da
  $fReadManner24 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Manner -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: PhonemeData.Manner -> Text.ParserCombinators.ReadP.P b) ->
                 eta PhonemeData.LFRICATIVE) -}
e572a0c0530476c903396b6648bf847e
  $fReadManner25 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "LFRICATIVE"#) -}
cc18ad7b6a428637be9e42d493f6b8da
  $fReadManner26 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Manner)
  {- Strictness: m,
     Unfolding: ((PhonemeData.$fReadManner28,
                  PhonemeData.$fReadManner27
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <PhonemeData.Manner>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <PhonemeData.Manner>_R))))) -}
cc18ad7b6a428637be9e42d493f6b8da
  $fReadManner27 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Manner -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: PhonemeData.Manner -> Text.ParserCombinators.ReadP.P b) ->
                 eta PhonemeData.LAFFRICATE) -}
83602406ab6e50522f605cd9df3d3b99
  $fReadManner28 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "LAFFRICATE"#) -}
cc18ad7b6a428637be9e42d493f6b8da
  $fReadManner29 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Manner)
  {- Strictness: m,
     Unfolding: ((PhonemeData.$fReadManner31,
                  PhonemeData.$fReadManner30
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <PhonemeData.Manner>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <PhonemeData.Manner>_R))))) -}
cc18ad7b6a428637be9e42d493f6b8da
  $fReadManner3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Manner -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: PhonemeData.Manner -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.choose2
                   @ PhonemeData.Manner
                   PhonemeData.$fReadManner4
                   eta
                   @ b
                   eta1) -}
cc18ad7b6a428637be9e42d493f6b8da
  $fReadManner30 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Manner -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: PhonemeData.Manner -> Text.ParserCombinators.ReadP.P b) ->
                 eta PhonemeData.TRILL) -}
b7dd64e9927350143a8c84966220f698
  $fReadManner31 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TRILL"#) -}
cc18ad7b6a428637be9e42d493f6b8da
  $fReadManner32 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Manner)
  {- Strictness: m,
     Unfolding: ((PhonemeData.$fReadManner34,
                  PhonemeData.$fReadManner33
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <PhonemeData.Manner>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <PhonemeData.Manner>_R))))) -}
cc18ad7b6a428637be9e42d493f6b8da
  $fReadManner33 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Manner -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: PhonemeData.Manner -> Text.ParserCombinators.ReadP.P b) ->
                 eta PhonemeData.FLAP) -}
81d312e044a0061750cc44a3e33e85bd
  $fReadManner34 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FLAP"#) -}
cc18ad7b6a428637be9e42d493f6b8da
  $fReadManner35 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Manner)
  {- Strictness: m,
     Unfolding: ((PhonemeData.$fReadManner37,
                  PhonemeData.$fReadManner36
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <PhonemeData.Manner>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <PhonemeData.Manner>_R))))) -}
cc18ad7b6a428637be9e42d493f6b8da
  $fReadManner36 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Manner -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: PhonemeData.Manner -> Text.ParserCombinators.ReadP.P b) ->
                 eta PhonemeData.APPROXIMANT) -}
58a07077dd326a18d38d6edb8d023703
  $fReadManner37 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "APPROXIMANT"#) -}
cc18ad7b6a428637be9e42d493f6b8da
  $fReadManner38 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Manner)
  {- Strictness: m,
     Unfolding: ((PhonemeData.$fReadManner40,
                  PhonemeData.$fReadManner39
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <PhonemeData.Manner>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <PhonemeData.Manner>_R))))) -}
cc18ad7b6a428637be9e42d493f6b8da
  $fReadManner39 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Manner -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: PhonemeData.Manner -> Text.ParserCombinators.ReadP.P b) ->
                 eta PhonemeData.FRICATIVE) -}
cc18ad7b6a428637be9e42d493f6b8da
  $fReadManner4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Manner)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Manner)
                   PhonemeData.$fReadManner53
                   PhonemeData.$fReadManner5) -}
f2888fc652992fb7292d78b9452fd939
  $fReadManner40 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FRICATIVE"#) -}
cc18ad7b6a428637be9e42d493f6b8da
  $fReadManner41 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Manner)
  {- Strictness: m,
     Unfolding: ((PhonemeData.$fReadManner43,
                  PhonemeData.$fReadManner42
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <PhonemeData.Manner>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <PhonemeData.Manner>_R))))) -}
cc18ad7b6a428637be9e42d493f6b8da
  $fReadManner42 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Manner -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: PhonemeData.Manner -> Text.ParserCombinators.ReadP.P b) ->
                 eta PhonemeData.SILIBANT) -}
38aaaf4bfbc72d453523498e0036d6fa
  $fReadManner43 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SILIBANT"#) -}
cc18ad7b6a428637be9e42d493f6b8da
  $fReadManner44 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Manner)
  {- Strictness: m,
     Unfolding: ((PhonemeData.$fReadManner46,
                  PhonemeData.$fReadManner45
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <PhonemeData.Manner>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <PhonemeData.Manner>_R))))) -}
cc18ad7b6a428637be9e42d493f6b8da
  $fReadManner45 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Manner -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: PhonemeData.Manner -> Text.ParserCombinators.ReadP.P b) ->
                 eta PhonemeData.AFFRICATE) -}
b2f1aaeecfece6056e21e90c2ae684b0
  $fReadManner46 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AFFRICATE"#) -}
cc18ad7b6a428637be9e42d493f6b8da
  $fReadManner47 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Manner)
  {- Strictness: m,
     Unfolding: ((PhonemeData.$fReadManner49,
                  PhonemeData.$fReadManner48
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <PhonemeData.Manner>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <PhonemeData.Manner>_R))))) -}
cc18ad7b6a428637be9e42d493f6b8da
  $fReadManner48 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Manner -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: PhonemeData.Manner -> Text.ParserCombinators.ReadP.P b) ->
                 eta PhonemeData.SAFFRICATE) -}
05f68c20e06a770080d8f8d9d5805684
  $fReadManner49 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SAFFRICATE"#) -}
cc18ad7b6a428637be9e42d493f6b8da
  $fReadManner5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Manner)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Manner)
                   PhonemeData.$fReadManner50
                   PhonemeData.$fReadManner6) -}
cc18ad7b6a428637be9e42d493f6b8da
  $fReadManner50 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Manner)
  {- Strictness: m,
     Unfolding: ((PhonemeData.$fReadManner52,
                  PhonemeData.$fReadManner51
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <PhonemeData.Manner>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <PhonemeData.Manner>_R))))) -}
cc18ad7b6a428637be9e42d493f6b8da
  $fReadManner51 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Manner -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: PhonemeData.Manner -> Text.ParserCombinators.ReadP.P b) ->
                 eta PhonemeData.STOP) -}
c0572a0bc76ef2099763196fcb6115d7
  $fReadManner52 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "STOP"#) -}
cc18ad7b6a428637be9e42d493f6b8da
  $fReadManner53 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Manner)
  {- Strictness: m,
     Unfolding: ((PhonemeData.$fReadManner55,
                  PhonemeData.$fReadManner54
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <PhonemeData.Manner>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <PhonemeData.Manner>_R))))) -}
cc18ad7b6a428637be9e42d493f6b8da
  $fReadManner54 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Manner -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: PhonemeData.Manner -> Text.ParserCombinators.ReadP.P b) ->
                 eta PhonemeData.NASAL) -}
008f8a68b98ac1c0f3cdca65e4a059a7
  $fReadManner55 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NASAL"#) -}
cc18ad7b6a428637be9e42d493f6b8da
  $fReadManner56 ::
    Text.ParserCombinators.ReadP.P [PhonemeData.Manner]
  {- Unfolding: (GHC.Read.$wlist
                   @ PhonemeData.Manner
                   PhonemeData.$fReadManner2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <PhonemeData.Manner>_R))
                   @ [PhonemeData.Manner]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [PhonemeData.Manner])) -}
cc18ad7b6a428637be9e42d493f6b8da
  $fReadManner6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Manner)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Manner)
                   PhonemeData.$fReadManner47
                   PhonemeData.$fReadManner7) -}
cc18ad7b6a428637be9e42d493f6b8da
  $fReadManner7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Manner)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Manner)
                   PhonemeData.$fReadManner44
                   PhonemeData.$fReadManner8) -}
cc18ad7b6a428637be9e42d493f6b8da
  $fReadManner8 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Manner)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Manner)
                   PhonemeData.$fReadManner41
                   PhonemeData.$fReadManner9) -}
cc18ad7b6a428637be9e42d493f6b8da
  $fReadManner9 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Manner)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Manner)
                   PhonemeData.$fReadManner38
                   PhonemeData.$fReadManner10) -}
cc18ad7b6a428637be9e42d493f6b8da
  $fReadManner_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [PhonemeData.Manner]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [PhonemeData.Manner]
                   PhonemeData.$fReadManner56) -}
cc18ad7b6a428637be9e42d493f6b8da
  $fReadManner_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [PhonemeData.Manner]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                PhonemeData.$fReadManner1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[PhonemeData.Manner]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[PhonemeData.Manner]>_R))) -}
cc18ad7b6a428637be9e42d493f6b8da
  $fReadManner_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Manner
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                PhonemeData.$fReadManner2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <PhonemeData.Manner>_R)) -}
cc18ad7b6a428637be9e42d493f6b8da
  $fReadManner_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS PhonemeData.Manner
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ PhonemeData.Manner
                   ((GHC.Read.$fReadDouble10
                       @ PhonemeData.Manner
                       PhonemeData.$fReadManner3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <PhonemeData.Manner>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <PhonemeData.Manner>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <PhonemeData.Manner>_R)
                      @ PhonemeData.Manner
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ PhonemeData.Manner))) -}
8d3162e814627ae5597b1f6cf9209b2d
  $fReadMorpheme :: GHC.Read.Read PhonemeData.Morpheme
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ PhonemeData.Morpheme
                  PhonemeData.$fReadMorpheme_$creadsPrec
                  PhonemeData.$fReadMorpheme_$creadList
                  PhonemeData.$fReadMorpheme_$creadPrec
                  PhonemeData.$fReadMorpheme_$creadListPrec -}
8d3162e814627ae5597b1f6cf9209b2d
  $fReadMorpheme1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([PhonemeData.Morpheme] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [PhonemeData.Morpheme]
                            -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.$wlist
                   @ PhonemeData.Morpheme
                   PhonemeData.$fReadMorpheme2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <PhonemeData.Morpheme>_R))
                   @ b
                   eta1) -}
8d3162e814627ae5597b1f6cf9209b2d
  $fReadMorpheme2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP PhonemeData.Morpheme
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ PhonemeData.Morpheme
                   PhonemeData.$fReadMorpheme3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <PhonemeData.Morpheme>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <PhonemeData.Morpheme>_R)))) -}
8d3162e814627ae5597b1f6cf9209b2d
  $fReadMorpheme3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Morpheme -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (w1 :: PhonemeData.Morpheme -> Text.ParserCombinators.ReadP.P b) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 PhonemeData.$w$creadPrec ww1 @ b w1 }) -}
8d3162e814627ae5597b1f6cf9209b2d
  $fReadMorpheme4 ::
    Text.ParserCombinators.ReadP.P [PhonemeData.Morpheme]
  {- Unfolding: (GHC.Read.$wlist
                   @ PhonemeData.Morpheme
                   PhonemeData.$fReadMorpheme2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <PhonemeData.Morpheme>_R))
                   @ [PhonemeData.Morpheme]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [PhonemeData.Morpheme])) -}
8d3162e814627ae5597b1f6cf9209b2d
  $fReadMorpheme_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [PhonemeData.Morpheme]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [PhonemeData.Morpheme]
                   PhonemeData.$fReadMorpheme4) -}
8d3162e814627ae5597b1f6cf9209b2d
  $fReadMorpheme_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [PhonemeData.Morpheme]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                PhonemeData.$fReadMorpheme1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[PhonemeData.Morpheme]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[PhonemeData.Morpheme]>_R))) -}
8d3162e814627ae5597b1f6cf9209b2d
  $fReadMorpheme_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Morpheme
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                PhonemeData.$fReadMorpheme2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <PhonemeData.Morpheme>_R)) -}
8d3162e814627ae5597b1f6cf9209b2d
  $fReadMorpheme_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS PhonemeData.Morpheme
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ PhonemeData.Morpheme
                   ((GHC.Read.$fReadDouble10
                       @ PhonemeData.Morpheme
                       PhonemeData.$fReadMorpheme3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <PhonemeData.Morpheme>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <PhonemeData.Morpheme>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <PhonemeData.Morpheme>_R)
                      @ PhonemeData.Morpheme
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ PhonemeData.Morpheme))) -}
2e1a0e09a78074c21fc0136e518a2133
  $fReadPhonation :: GHC.Read.Read PhonemeData.Phonation
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ PhonemeData.Phonation
                  PhonemeData.$fReadPhonation_$creadsPrec
                  PhonemeData.$fReadPhonation_$creadList
                  PhonemeData.$fReadPhonation_$creadPrec
                  PhonemeData.$fReadPhonation_$creadListPrec -}
2e1a0e09a78074c21fc0136e518a2133
  $fReadPhonation1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([PhonemeData.Phonation] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [PhonemeData.Phonation]
                            -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.$wlist
                   @ PhonemeData.Phonation
                   PhonemeData.$fReadPhonation2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <PhonemeData.Phonation>_R))
                   @ b
                   eta1) -}
2e1a0e09a78074c21fc0136e518a2133
  $fReadPhonation10 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Phonation)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Phonation)
                   PhonemeData.$fReadPhonation11
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           PhonemeData.Phonation))) -}
2e1a0e09a78074c21fc0136e518a2133
  $fReadPhonation11 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Phonation)
  {- Strictness: m,
     Unfolding: ((PhonemeData.$fReadPhonation13,
                  PhonemeData.$fReadPhonation12
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <PhonemeData.Phonation>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <PhonemeData.Phonation>_R))))) -}
2e1a0e09a78074c21fc0136e518a2133
  $fReadPhonation12 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Phonation -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: PhonemeData.Phonation
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta PhonemeData.ASPIRATED) -}
dd71796cfbd54bcc8a845bff13258545
  $fReadPhonation13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ASPIRATED"#) -}
2e1a0e09a78074c21fc0136e518a2133
  $fReadPhonation14 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Phonation)
  {- Strictness: m,
     Unfolding: ((PhonemeData.$fReadPhonation16,
                  PhonemeData.$fReadPhonation15
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <PhonemeData.Phonation>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <PhonemeData.Phonation>_R))))) -}
2e1a0e09a78074c21fc0136e518a2133
  $fReadPhonation15 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Phonation -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: PhonemeData.Phonation
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta PhonemeData.CREAKY) -}
823c69ee5c405e37b0a3bd065b81f76c
  $fReadPhonation16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "CREAKY"#) -}
2e1a0e09a78074c21fc0136e518a2133
  $fReadPhonation17 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Phonation)
  {- Strictness: m,
     Unfolding: ((PhonemeData.$fReadPhonation19,
                  PhonemeData.$fReadPhonation18
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <PhonemeData.Phonation>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <PhonemeData.Phonation>_R))))) -}
2e1a0e09a78074c21fc0136e518a2133
  $fReadPhonation18 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Phonation -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: PhonemeData.Phonation
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta PhonemeData.STIFF) -}
3463c95a5c6b4f1a3ca4d342c00db4c2
  $fReadPhonation19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "STIFF"#) -}
2e1a0e09a78074c21fc0136e518a2133
  $fReadPhonation2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP PhonemeData.Phonation
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ PhonemeData.Phonation
                   PhonemeData.$fReadPhonation3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <PhonemeData.Phonation>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <PhonemeData.Phonation>_R)))) -}
2e1a0e09a78074c21fc0136e518a2133
  $fReadPhonation20 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Phonation)
  {- Strictness: m,
     Unfolding: ((PhonemeData.$fReadPhonation22,
                  PhonemeData.$fReadPhonation21
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <PhonemeData.Phonation>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <PhonemeData.Phonation>_R))))) -}
2e1a0e09a78074c21fc0136e518a2133
  $fReadPhonation21 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Phonation -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: PhonemeData.Phonation
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta PhonemeData.MODAL) -}
d9c4f245570483f646c58c46526b8f73
  $fReadPhonation22 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "MODAL"#) -}
2e1a0e09a78074c21fc0136e518a2133
  $fReadPhonation23 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Phonation)
  {- Strictness: m,
     Unfolding: ((PhonemeData.$fReadPhonation25,
                  PhonemeData.$fReadPhonation24
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <PhonemeData.Phonation>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <PhonemeData.Phonation>_R))))) -}
2e1a0e09a78074c21fc0136e518a2133
  $fReadPhonation24 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Phonation -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: PhonemeData.Phonation
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta PhonemeData.SLACK) -}
71d5fae21fc1065c7778a395d1c0e1d8
  $fReadPhonation25 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SLACK"#) -}
2e1a0e09a78074c21fc0136e518a2133
  $fReadPhonation26 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Phonation)
  {- Strictness: m,
     Unfolding: ((PhonemeData.$fReadPhonation28,
                  PhonemeData.$fReadPhonation27
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <PhonemeData.Phonation>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <PhonemeData.Phonation>_R))))) -}
2e1a0e09a78074c21fc0136e518a2133
  $fReadPhonation27 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Phonation -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: PhonemeData.Phonation
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta PhonemeData.BREATHY) -}
fb712abeca921ed47e9f3ab29721f16b
  $fReadPhonation28 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "BREATHY"#) -}
2e1a0e09a78074c21fc0136e518a2133
  $fReadPhonation29 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Phonation)
  {- Strictness: m,
     Unfolding: ((PhonemeData.$fReadPhonation31,
                  PhonemeData.$fReadPhonation30
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <PhonemeData.Phonation>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <PhonemeData.Phonation>_R))))) -}
2e1a0e09a78074c21fc0136e518a2133
  $fReadPhonation3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Phonation -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: PhonemeData.Phonation
                            -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.choose2
                   @ PhonemeData.Phonation
                   PhonemeData.$fReadPhonation4
                   eta
                   @ b
                   eta1) -}
2e1a0e09a78074c21fc0136e518a2133
  $fReadPhonation30 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Phonation -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: PhonemeData.Phonation
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta PhonemeData.VOICELESS) -}
98ab37e587d8d11b071a27418e599218
  $fReadPhonation31 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "VOICELESS"#) -}
2e1a0e09a78074c21fc0136e518a2133
  $fReadPhonation32 ::
    Text.ParserCombinators.ReadP.P [PhonemeData.Phonation]
  {- Unfolding: (GHC.Read.$wlist
                   @ PhonemeData.Phonation
                   PhonemeData.$fReadPhonation2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <PhonemeData.Phonation>_R))
                   @ [PhonemeData.Phonation]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [PhonemeData.Phonation])) -}
2e1a0e09a78074c21fc0136e518a2133
  $fReadPhonation4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Phonation)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Phonation)
                   PhonemeData.$fReadPhonation29
                   PhonemeData.$fReadPhonation5) -}
2e1a0e09a78074c21fc0136e518a2133
  $fReadPhonation5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Phonation)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Phonation)
                   PhonemeData.$fReadPhonation26
                   PhonemeData.$fReadPhonation6) -}
2e1a0e09a78074c21fc0136e518a2133
  $fReadPhonation6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Phonation)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Phonation)
                   PhonemeData.$fReadPhonation23
                   PhonemeData.$fReadPhonation7) -}
2e1a0e09a78074c21fc0136e518a2133
  $fReadPhonation7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Phonation)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Phonation)
                   PhonemeData.$fReadPhonation20
                   PhonemeData.$fReadPhonation8) -}
2e1a0e09a78074c21fc0136e518a2133
  $fReadPhonation8 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Phonation)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Phonation)
                   PhonemeData.$fReadPhonation17
                   PhonemeData.$fReadPhonation9) -}
2e1a0e09a78074c21fc0136e518a2133
  $fReadPhonation9 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Phonation)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Phonation)
                   PhonemeData.$fReadPhonation14
                   PhonemeData.$fReadPhonation10) -}
2e1a0e09a78074c21fc0136e518a2133
  $fReadPhonation_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [PhonemeData.Phonation]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [PhonemeData.Phonation]
                   PhonemeData.$fReadPhonation32) -}
2e1a0e09a78074c21fc0136e518a2133
  $fReadPhonation_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [PhonemeData.Phonation]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                PhonemeData.$fReadPhonation1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[PhonemeData.Phonation]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[PhonemeData.Phonation]>_R))) -}
2e1a0e09a78074c21fc0136e518a2133
  $fReadPhonation_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Phonation
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                PhonemeData.$fReadPhonation2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <PhonemeData.Phonation>_R)) -}
2e1a0e09a78074c21fc0136e518a2133
  $fReadPhonation_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS PhonemeData.Phonation
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ PhonemeData.Phonation
                   ((GHC.Read.$fReadDouble10
                       @ PhonemeData.Phonation
                       PhonemeData.$fReadPhonation3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <PhonemeData.Phonation>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <PhonemeData.Phonation>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <PhonemeData.Phonation>_R)
                      @ PhonemeData.Phonation
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ PhonemeData.Phonation))) -}
a99d82394cccf94f6dc3580d7da31e00
  $fReadPhoneme :: GHC.Read.Read PhonemeData.Phoneme
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ PhonemeData.Phoneme
                  PhonemeData.$fReadPhoneme_$creadsPrec
                  PhonemeData.$fReadPhoneme_$creadList
                  PhonemeData.$fReadPhoneme_$creadPrec
                  PhonemeData.$fReadPhoneme_$creadListPrec -}
a99d82394cccf94f6dc3580d7da31e00
  $fReadPhoneme1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([PhonemeData.Phoneme] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [PhonemeData.Phoneme]
                            -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.$wlist
                   @ PhonemeData.Phoneme
                   PhonemeData.$fReadPhoneme2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <PhonemeData.Phoneme>_R))
                   @ b
                   eta1) -}
a99d82394cccf94f6dc3580d7da31e00
  $fReadPhoneme2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP PhonemeData.Phoneme
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ PhonemeData.Phoneme
                   PhonemeData.$fReadPhoneme3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <PhonemeData.Phoneme>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <PhonemeData.Phoneme>_R)))) -}
a99d82394cccf94f6dc3580d7da31e00
  $fReadPhoneme3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Phoneme -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)> -}
a99d82394cccf94f6dc3580d7da31e00
  $fReadPhoneme4 ::
    Text.ParserCombinators.ReadP.P [PhonemeData.Phoneme]
  {- Unfolding: (GHC.Read.$wlist
                   @ PhonemeData.Phoneme
                   PhonemeData.$fReadPhoneme2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <PhonemeData.Phoneme>_R))
                   @ [PhonemeData.Phoneme]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [PhonemeData.Phoneme])) -}
a99d82394cccf94f6dc3580d7da31e00
  $fReadPhoneme_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [PhonemeData.Phoneme]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [PhonemeData.Phoneme]
                   PhonemeData.$fReadPhoneme4) -}
a99d82394cccf94f6dc3580d7da31e00
  $fReadPhoneme_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [PhonemeData.Phoneme]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                PhonemeData.$fReadPhoneme1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[PhonemeData.Phoneme]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[PhonemeData.Phoneme]>_R))) -}
a99d82394cccf94f6dc3580d7da31e00
  $fReadPhoneme_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Phoneme
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                PhonemeData.$fReadPhoneme2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <PhonemeData.Phoneme>_R)) -}
a99d82394cccf94f6dc3580d7da31e00
  $fReadPhoneme_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS PhonemeData.Phoneme
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ PhonemeData.Phoneme
                   ((GHC.Read.$fReadDouble10
                       @ PhonemeData.Phoneme
                       PhonemeData.$fReadPhoneme3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <PhonemeData.Phoneme>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <PhonemeData.Phoneme>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <PhonemeData.Phoneme>_R)
                      @ PhonemeData.Phoneme
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ PhonemeData.Phoneme))) -}
27d4fb2260414ca95f988dc9fef00141
  $fReadPlace :: GHC.Read.Read PhonemeData.Place
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ PhonemeData.Place
                  PhonemeData.$fReadPlace_$creadsPrec
                  PhonemeData.$fReadPlace_$creadList
                  PhonemeData.$fReadPlace_$creadPrec
                  PhonemeData.$fReadPlace_$creadListPrec -}
27d4fb2260414ca95f988dc9fef00141
  $fReadPlace1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([PhonemeData.Place] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [PhonemeData.Place]
                            -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.$wlist
                   @ PhonemeData.Place
                   PhonemeData.$fReadPlace2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <PhonemeData.Place>_R))
                   @ b
                   eta1) -}
27d4fb2260414ca95f988dc9fef00141
  $fReadPlace10 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Place)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Place)
                   PhonemeData.$fReadPlace59
                   PhonemeData.$fReadPlace11) -}
27d4fb2260414ca95f988dc9fef00141
  $fReadPlace11 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Place)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Place)
                   PhonemeData.$fReadPlace56
                   PhonemeData.$fReadPlace12) -}
27d4fb2260414ca95f988dc9fef00141
  $fReadPlace12 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Place)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Place)
                   PhonemeData.$fReadPlace53
                   PhonemeData.$fReadPlace13) -}
27d4fb2260414ca95f988dc9fef00141
  $fReadPlace13 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Place)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Place)
                   PhonemeData.$fReadPlace50
                   PhonemeData.$fReadPlace14) -}
27d4fb2260414ca95f988dc9fef00141
  $fReadPlace14 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Place)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Place)
                   PhonemeData.$fReadPlace47
                   PhonemeData.$fReadPlace15) -}
27d4fb2260414ca95f988dc9fef00141
  $fReadPlace15 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Place)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Place)
                   PhonemeData.$fReadPlace44
                   PhonemeData.$fReadPlace16) -}
27d4fb2260414ca95f988dc9fef00141
  $fReadPlace16 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Place)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Place)
                   PhonemeData.$fReadPlace41
                   PhonemeData.$fReadPlace17) -}
27d4fb2260414ca95f988dc9fef00141
  $fReadPlace17 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Place)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Place)
                   PhonemeData.$fReadPlace38
                   PhonemeData.$fReadPlace18) -}
27d4fb2260414ca95f988dc9fef00141
  $fReadPlace18 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Place)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Place)
                   PhonemeData.$fReadPlace35
                   PhonemeData.$fReadPlace19) -}
27d4fb2260414ca95f988dc9fef00141
  $fReadPlace19 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Place)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Place)
                   PhonemeData.$fReadPlace32
                   PhonemeData.$fReadPlace20) -}
27d4fb2260414ca95f988dc9fef00141
  $fReadPlace2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP PhonemeData.Place
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ PhonemeData.Place
                   PhonemeData.$fReadPlace3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <PhonemeData.Place>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <PhonemeData.Place>_R)))) -}
27d4fb2260414ca95f988dc9fef00141
  $fReadPlace20 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Place)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Place)
                   PhonemeData.$fReadPlace29
                   PhonemeData.$fReadPlace21) -}
27d4fb2260414ca95f988dc9fef00141
  $fReadPlace21 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Place)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Place)
                   PhonemeData.$fReadPlace26
                   PhonemeData.$fReadPlace22) -}
27d4fb2260414ca95f988dc9fef00141
  $fReadPlace22 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Place)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Place)
                   PhonemeData.$fReadPlace23
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Place))) -}
27d4fb2260414ca95f988dc9fef00141
  $fReadPlace23 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Place)
  {- Strictness: m,
     Unfolding: ((PhonemeData.$fReadPlace25,
                  PhonemeData.$fReadPlace24
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <PhonemeData.Place>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <PhonemeData.Place>_R))))) -}
27d4fb2260414ca95f988dc9fef00141
  $fReadPlace24 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Place -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: PhonemeData.Place -> Text.ParserCombinators.ReadP.P b) ->
                 eta PhonemeData.GLOTTAL) -}
d36278df5cdfef45a421b7946c2d5fc9
  $fReadPlace25 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "GLOTTAL"#) -}
27d4fb2260414ca95f988dc9fef00141
  $fReadPlace26 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Place)
  {- Strictness: m,
     Unfolding: ((PhonemeData.$fReadPlace28,
                  PhonemeData.$fReadPlace27
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <PhonemeData.Place>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <PhonemeData.Place>_R))))) -}
27d4fb2260414ca95f988dc9fef00141
  $fReadPlace27 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Place -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: PhonemeData.Place -> Text.ParserCombinators.ReadP.P b) ->
                 eta PhonemeData.EPIGLOTTAL) -}
844e6f96db3db0c3b788b4156b44ed67
  $fReadPlace28 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "EPIGLOTTAL"#) -}
27d4fb2260414ca95f988dc9fef00141
  $fReadPlace29 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Place)
  {- Strictness: m,
     Unfolding: ((PhonemeData.$fReadPlace31,
                  PhonemeData.$fReadPlace30
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <PhonemeData.Place>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <PhonemeData.Place>_R))))) -}
27d4fb2260414ca95f988dc9fef00141
  $fReadPlace3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Place -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: PhonemeData.Place -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.choose2
                   @ PhonemeData.Place
                   PhonemeData.$fReadPlace4
                   eta
                   @ b
                   eta1) -}
27d4fb2260414ca95f988dc9fef00141
  $fReadPlace30 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Place -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: PhonemeData.Place -> Text.ParserCombinators.ReadP.P b) ->
                 eta PhonemeData.PHARYNGEAL) -}
5c3de0642c4e8f46b35d38341e18549e
  $fReadPlace31 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PHARYNGEAL"#) -}
27d4fb2260414ca95f988dc9fef00141
  $fReadPlace32 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Place)
  {- Strictness: m,
     Unfolding: ((PhonemeData.$fReadPlace34,
                  PhonemeData.$fReadPlace33
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <PhonemeData.Place>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <PhonemeData.Place>_R))))) -}
27d4fb2260414ca95f988dc9fef00141
  $fReadPlace33 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Place -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: PhonemeData.Place -> Text.ParserCombinators.ReadP.P b) ->
                 eta PhonemeData.EPIPHARYNGEAL) -}
f64f66a8c8c0366170e30907714eeb27
  $fReadPlace34 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "EPIPHARYNGEAL"#) -}
27d4fb2260414ca95f988dc9fef00141
  $fReadPlace35 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Place)
  {- Strictness: m,
     Unfolding: ((PhonemeData.$fReadPlace37,
                  PhonemeData.$fReadPlace36
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <PhonemeData.Place>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <PhonemeData.Place>_R))))) -}
27d4fb2260414ca95f988dc9fef00141
  $fReadPlace36 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Place -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: PhonemeData.Place -> Text.ParserCombinators.ReadP.P b) ->
                 eta PhonemeData.LARYNGEAL) -}
10cb4f6b517915eda7aa30227d027934
  $fReadPlace37 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "LARYNGEAL"#) -}
27d4fb2260414ca95f988dc9fef00141
  $fReadPlace38 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Place)
  {- Strictness: m,
     Unfolding: ((PhonemeData.$fReadPlace40,
                  PhonemeData.$fReadPlace39
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <PhonemeData.Place>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <PhonemeData.Place>_R))))) -}
27d4fb2260414ca95f988dc9fef00141
  $fReadPlace39 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Place -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: PhonemeData.Place -> Text.ParserCombinators.ReadP.P b) ->
                 eta PhonemeData.UVULAR) -}
27d4fb2260414ca95f988dc9fef00141
  $fReadPlace4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Place)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Place)
                   PhonemeData.$fReadPlace77
                   PhonemeData.$fReadPlace5) -}
04a37abb3024b5601d33c8d084fe3d4d
  $fReadPlace40 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "UVULAR"#) -}
27d4fb2260414ca95f988dc9fef00141
  $fReadPlace41 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Place)
  {- Strictness: m,
     Unfolding: ((PhonemeData.$fReadPlace43,
                  PhonemeData.$fReadPlace42
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <PhonemeData.Place>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <PhonemeData.Place>_R))))) -}
27d4fb2260414ca95f988dc9fef00141
  $fReadPlace42 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Place -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: PhonemeData.Place -> Text.ParserCombinators.ReadP.P b) ->
                 eta PhonemeData.VELAR) -}
a891a9ed4d721f037e95c9a43f116752
  $fReadPlace43 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "VELAR"#) -}
27d4fb2260414ca95f988dc9fef00141
  $fReadPlace44 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Place)
  {- Strictness: m,
     Unfolding: ((PhonemeData.$fReadPlace46,
                  PhonemeData.$fReadPlace45
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <PhonemeData.Place>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <PhonemeData.Place>_R))))) -}
27d4fb2260414ca95f988dc9fef00141
  $fReadPlace45 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Place -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: PhonemeData.Place -> Text.ParserCombinators.ReadP.P b) ->
                 eta PhonemeData.PALATAL) -}
7d889264b0b79117d3c69ad161fee1fb
  $fReadPlace46 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PALATAL"#) -}
27d4fb2260414ca95f988dc9fef00141
  $fReadPlace47 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Place)
  {- Strictness: m,
     Unfolding: ((PhonemeData.$fReadPlace49,
                  PhonemeData.$fReadPlace48
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <PhonemeData.Place>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <PhonemeData.Place>_R))))) -}
27d4fb2260414ca95f988dc9fef00141
  $fReadPlace48 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Place -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: PhonemeData.Place -> Text.ParserCombinators.ReadP.P b) ->
                 eta PhonemeData.ALVEOLOPALATAL) -}
bb76ff9d4dd384e48377ed28e60783cb
  $fReadPlace49 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ALVEOLOPALATAL"#) -}
27d4fb2260414ca95f988dc9fef00141
  $fReadPlace5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Place)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Place)
                   PhonemeData.$fReadPlace74
                   PhonemeData.$fReadPlace6) -}
27d4fb2260414ca95f988dc9fef00141
  $fReadPlace50 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Place)
  {- Strictness: m,
     Unfolding: ((PhonemeData.$fReadPlace52,
                  PhonemeData.$fReadPlace51
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <PhonemeData.Place>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <PhonemeData.Place>_R))))) -}
27d4fb2260414ca95f988dc9fef00141
  $fReadPlace51 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Place -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: PhonemeData.Place -> Text.ParserCombinators.ReadP.P b) ->
                 eta PhonemeData.DORSAL) -}
ab275bd66549369273904ac660bdb21c
  $fReadPlace52 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DORSAL"#) -}
27d4fb2260414ca95f988dc9fef00141
  $fReadPlace53 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Place)
  {- Strictness: m,
     Unfolding: ((PhonemeData.$fReadPlace55,
                  PhonemeData.$fReadPlace54
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <PhonemeData.Place>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <PhonemeData.Place>_R))))) -}
27d4fb2260414ca95f988dc9fef00141
  $fReadPlace54 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Place -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: PhonemeData.Place -> Text.ParserCombinators.ReadP.P b) ->
                 eta PhonemeData.RETROFLEX) -}
047e589a0ca06cedfdf45b4fd2e70b81
  $fReadPlace55 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "RETROFLEX"#) -}
27d4fb2260414ca95f988dc9fef00141
  $fReadPlace56 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Place)
  {- Strictness: m,
     Unfolding: ((PhonemeData.$fReadPlace58,
                  PhonemeData.$fReadPlace57
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <PhonemeData.Place>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <PhonemeData.Place>_R))))) -}
27d4fb2260414ca95f988dc9fef00141
  $fReadPlace57 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Place -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: PhonemeData.Place -> Text.ParserCombinators.ReadP.P b) ->
                 eta PhonemeData.POSTALVEOLAR) -}
f667dd0b48033904a908ff46efbeffd4
  $fReadPlace58 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "POSTALVEOLAR"#) -}
27d4fb2260414ca95f988dc9fef00141
  $fReadPlace59 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Place)
  {- Strictness: m,
     Unfolding: ((PhonemeData.$fReadPlace61,
                  PhonemeData.$fReadPlace60
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <PhonemeData.Place>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <PhonemeData.Place>_R))))) -}
27d4fb2260414ca95f988dc9fef00141
  $fReadPlace6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Place)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Place)
                   PhonemeData.$fReadPlace71
                   PhonemeData.$fReadPlace7) -}
27d4fb2260414ca95f988dc9fef00141
  $fReadPlace60 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Place -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: PhonemeData.Place -> Text.ParserCombinators.ReadP.P b) ->
                 eta PhonemeData.ALVEOLAR) -}
0f2dedb853f58d3b64662eb0dcd317d1
  $fReadPlace61 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ALVEOLAR"#) -}
27d4fb2260414ca95f988dc9fef00141
  $fReadPlace62 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Place)
  {- Strictness: m,
     Unfolding: ((PhonemeData.$fReadPlace64,
                  PhonemeData.$fReadPlace63
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <PhonemeData.Place>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <PhonemeData.Place>_R))))) -}
27d4fb2260414ca95f988dc9fef00141
  $fReadPlace63 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Place -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: PhonemeData.Place -> Text.ParserCombinators.ReadP.P b) ->
                 eta PhonemeData.DENTAL) -}
8eb2ab0862b47a88b985a60967a022be
  $fReadPlace64 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DENTAL"#) -}
27d4fb2260414ca95f988dc9fef00141
  $fReadPlace65 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Place)
  {- Strictness: m,
     Unfolding: ((PhonemeData.$fReadPlace67,
                  PhonemeData.$fReadPlace66
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <PhonemeData.Place>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <PhonemeData.Place>_R))))) -}
27d4fb2260414ca95f988dc9fef00141
  $fReadPlace66 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Place -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: PhonemeData.Place -> Text.ParserCombinators.ReadP.P b) ->
                 eta PhonemeData.DENTIALVEOLAR) -}
fcb8b30df01813bd622b4afe89c787e3
  $fReadPlace67 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DENTIALVEOLAR"#) -}
27d4fb2260414ca95f988dc9fef00141
  $fReadPlace68 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Place)
  {- Strictness: m,
     Unfolding: ((PhonemeData.$fReadPlace70,
                  PhonemeData.$fReadPlace69
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <PhonemeData.Place>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <PhonemeData.Place>_R))))) -}
27d4fb2260414ca95f988dc9fef00141
  $fReadPlace69 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Place -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: PhonemeData.Place -> Text.ParserCombinators.ReadP.P b) ->
                 eta PhonemeData.CORONAL) -}
27d4fb2260414ca95f988dc9fef00141
  $fReadPlace7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Place)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Place)
                   PhonemeData.$fReadPlace68
                   PhonemeData.$fReadPlace8) -}
cc5c56ea1f63deec246d168c51fa6d41
  $fReadPlace70 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "CORONAL"#) -}
27d4fb2260414ca95f988dc9fef00141
  $fReadPlace71 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Place)
  {- Strictness: m,
     Unfolding: ((PhonemeData.$fReadPlace73,
                  PhonemeData.$fReadPlace72
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <PhonemeData.Place>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <PhonemeData.Place>_R))))) -}
27d4fb2260414ca95f988dc9fef00141
  $fReadPlace72 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Place -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: PhonemeData.Place -> Text.ParserCombinators.ReadP.P b) ->
                 eta PhonemeData.LABIODENTAL) -}
acb80b08c39d76134e8015fa91f6473a
  $fReadPlace73 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "LABIODENTAL"#) -}
27d4fb2260414ca95f988dc9fef00141
  $fReadPlace74 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Place)
  {- Strictness: m,
     Unfolding: ((PhonemeData.$fReadPlace76,
                  PhonemeData.$fReadPlace75
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <PhonemeData.Place>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <PhonemeData.Place>_R))))) -}
27d4fb2260414ca95f988dc9fef00141
  $fReadPlace75 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Place -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: PhonemeData.Place -> Text.ParserCombinators.ReadP.P b) ->
                 eta PhonemeData.BILABIAL) -}
3dab231c28a5c33dbc28d3f796900e0b
  $fReadPlace76 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "BILABIAL"#) -}
27d4fb2260414ca95f988dc9fef00141
  $fReadPlace77 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Place)
  {- Strictness: m,
     Unfolding: ((PhonemeData.$fReadPlace79,
                  PhonemeData.$fReadPlace78
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <PhonemeData.Place>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <PhonemeData.Place>_R))))) -}
27d4fb2260414ca95f988dc9fef00141
  $fReadPlace78 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Place -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: PhonemeData.Place -> Text.ParserCombinators.ReadP.P b) ->
                 eta PhonemeData.LABIAL) -}
8add2f0504a137f898fe4aa25dbeadf9
  $fReadPlace79 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "LABIAL"#) -}
27d4fb2260414ca95f988dc9fef00141
  $fReadPlace8 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Place)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Place)
                   PhonemeData.$fReadPlace65
                   PhonemeData.$fReadPlace9) -}
27d4fb2260414ca95f988dc9fef00141
  $fReadPlace80 :: Text.ParserCombinators.ReadP.P [PhonemeData.Place]
  {- Unfolding: (GHC.Read.$wlist
                   @ PhonemeData.Place
                   PhonemeData.$fReadPlace2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <PhonemeData.Place>_R))
                   @ [PhonemeData.Place]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [PhonemeData.Place])) -}
27d4fb2260414ca95f988dc9fef00141
  $fReadPlace9 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Place)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Place)
                   PhonemeData.$fReadPlace62
                   PhonemeData.$fReadPlace10) -}
27d4fb2260414ca95f988dc9fef00141
  $fReadPlace_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [PhonemeData.Place]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [PhonemeData.Place]
                   PhonemeData.$fReadPlace80) -}
27d4fb2260414ca95f988dc9fef00141
  $fReadPlace_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [PhonemeData.Place]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                PhonemeData.$fReadPlace1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[PhonemeData.Place]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[PhonemeData.Place]>_R))) -}
27d4fb2260414ca95f988dc9fef00141
  $fReadPlace_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Place
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                PhonemeData.$fReadPlace2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <PhonemeData.Place>_R)) -}
27d4fb2260414ca95f988dc9fef00141
  $fReadPlace_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS PhonemeData.Place
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ PhonemeData.Place
                   ((GHC.Read.$fReadDouble10
                       @ PhonemeData.Place
                       PhonemeData.$fReadPlace3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <PhonemeData.Place>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <PhonemeData.Place>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <PhonemeData.Place>_R)
                      @ PhonemeData.Place
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ PhonemeData.Place))) -}
e7b029a5844a6e008b95082c9c811e33
  $fReadRoundedness :: GHC.Read.Read PhonemeData.Roundedness
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ PhonemeData.Roundedness
                  PhonemeData.$fReadRoundedness_$creadsPrec
                  PhonemeData.$fReadRoundedness_$creadList
                  PhonemeData.$fReadRoundedness_$creadPrec
                  PhonemeData.$fReadRoundedness_$creadListPrec -}
e7b029a5844a6e008b95082c9c811e33
  $fReadRoundedness1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([PhonemeData.Roundedness] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [PhonemeData.Roundedness]
                            -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.$wlist
                   @ PhonemeData.Roundedness
                   PhonemeData.$fReadRoundedness2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <PhonemeData.Roundedness>_R))
                   @ b
                   eta1) -}
e7b029a5844a6e008b95082c9c811e33
  $fReadRoundedness10 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Roundedness)
  {- Strictness: m,
     Unfolding: ((PhonemeData.$fReadRoundedness12,
                  PhonemeData.$fReadRoundedness11
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <PhonemeData.Roundedness>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <PhonemeData.Roundedness>_R))))) -}
e7b029a5844a6e008b95082c9c811e33
  $fReadRoundedness11 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Roundedness -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: PhonemeData.Roundedness
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta PhonemeData.ROUNDED) -}
068d4a8a0f6eb36b71b3591c53b603b2
  $fReadRoundedness12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ROUNDED"#) -}
e7b029a5844a6e008b95082c9c811e33
  $fReadRoundedness13 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Roundedness)
  {- Strictness: m,
     Unfolding: ((PhonemeData.$fReadRoundedness15,
                  PhonemeData.$fReadRoundedness14
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <PhonemeData.Roundedness>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <PhonemeData.Roundedness>_R))))) -}
e7b029a5844a6e008b95082c9c811e33
  $fReadRoundedness14 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Roundedness -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: PhonemeData.Roundedness
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta PhonemeData.DEFAULT) -}
0a88d6289b0138a22814f87d4cccdc56
  $fReadRoundedness15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DEFAULT"#) -}
e7b029a5844a6e008b95082c9c811e33
  $fReadRoundedness16 ::
    Text.ParserCombinators.ReadP.P [PhonemeData.Roundedness]
  {- Unfolding: (GHC.Read.$wlist
                   @ PhonemeData.Roundedness
                   PhonemeData.$fReadRoundedness2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <PhonemeData.Roundedness>_R))
                   @ [PhonemeData.Roundedness]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [PhonemeData.Roundedness])) -}
e7b029a5844a6e008b95082c9c811e33
  $fReadRoundedness2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP PhonemeData.Roundedness
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ PhonemeData.Roundedness
                   PhonemeData.$fReadRoundedness3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <PhonemeData.Roundedness>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <PhonemeData.Roundedness>_R)))) -}
e7b029a5844a6e008b95082c9c811e33
  $fReadRoundedness3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Roundedness -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: PhonemeData.Roundedness
                            -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.choose2
                   @ PhonemeData.Roundedness
                   PhonemeData.$fReadRoundedness4
                   eta
                   @ b
                   eta1) -}
e7b029a5844a6e008b95082c9c811e33
  $fReadRoundedness4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Roundedness)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Roundedness)
                   PhonemeData.$fReadRoundedness13
                   PhonemeData.$fReadRoundedness5) -}
e7b029a5844a6e008b95082c9c811e33
  $fReadRoundedness5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Roundedness)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Roundedness)
                   PhonemeData.$fReadRoundedness10
                   PhonemeData.$fReadRoundedness6) -}
e7b029a5844a6e008b95082c9c811e33
  $fReadRoundedness6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Roundedness)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Roundedness)
                   PhonemeData.$fReadRoundedness7
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           PhonemeData.Roundedness))) -}
e7b029a5844a6e008b95082c9c811e33
  $fReadRoundedness7 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Roundedness)
  {- Strictness: m,
     Unfolding: ((PhonemeData.$fReadRoundedness9,
                  PhonemeData.$fReadRoundedness8
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <PhonemeData.Roundedness>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <PhonemeData.Roundedness>_R))))) -}
e7b029a5844a6e008b95082c9c811e33
  $fReadRoundedness8 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Roundedness -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: PhonemeData.Roundedness
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta PhonemeData.UNROUNDED) -}
e925997fb73510f3e5980f7913d36c2c
  $fReadRoundedness9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "UNROUNDED"#) -}
e7b029a5844a6e008b95082c9c811e33
  $fReadRoundedness_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [PhonemeData.Roundedness]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [PhonemeData.Roundedness]
                   PhonemeData.$fReadRoundedness16) -}
e7b029a5844a6e008b95082c9c811e33
  $fReadRoundedness_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [PhonemeData.Roundedness]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                PhonemeData.$fReadRoundedness1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[PhonemeData.Roundedness]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[PhonemeData.Roundedness]>_R))) -}
e7b029a5844a6e008b95082c9c811e33
  $fReadRoundedness_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Roundedness
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                PhonemeData.$fReadRoundedness2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <PhonemeData.Roundedness>_R)) -}
e7b029a5844a6e008b95082c9c811e33
  $fReadRoundedness_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS PhonemeData.Roundedness
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ PhonemeData.Roundedness
                   ((GHC.Read.$fReadDouble10
                       @ PhonemeData.Roundedness
                       PhonemeData.$fReadRoundedness3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <PhonemeData.Roundedness>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <PhonemeData.Roundedness>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0]
                         <PhonemeData.Roundedness>_R)
                      @ PhonemeData.Roundedness
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ PhonemeData.Roundedness))) -}
87cd4acf5bb796129082f7006a0ea5b8
  $fReadTone :: GHC.Read.Read PhonemeData.Tone
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ PhonemeData.Tone
                  PhonemeData.$fReadTone_$creadsPrec
                  PhonemeData.$fReadTone_$creadList
                  PhonemeData.$fReadTone_$creadPrec
                  PhonemeData.$fReadTone_$creadListPrec -}
87cd4acf5bb796129082f7006a0ea5b8
  $fReadTone1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([PhonemeData.Tone] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [PhonemeData.Tone] -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.$wlist
                   @ PhonemeData.Tone
                   PhonemeData.$fReadTone2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <PhonemeData.Tone>_R))
                   @ b
                   eta1) -}
87cd4acf5bb796129082f7006a0ea5b8
  $fReadTone10 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Tone)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Tone)
                   PhonemeData.$fReadTone39
                   PhonemeData.$fReadTone11) -}
87cd4acf5bb796129082f7006a0ea5b8
  $fReadTone11 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Tone)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Tone)
                   PhonemeData.$fReadTone36
                   PhonemeData.$fReadTone12) -}
87cd4acf5bb796129082f7006a0ea5b8
  $fReadTone12 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Tone)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Tone)
                   PhonemeData.$fReadTone33
                   PhonemeData.$fReadTone13) -}
87cd4acf5bb796129082f7006a0ea5b8
  $fReadTone13 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Tone)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Tone)
                   PhonemeData.$fReadTone30
                   PhonemeData.$fReadTone14) -}
87cd4acf5bb796129082f7006a0ea5b8
  $fReadTone14 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Tone)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Tone)
                   PhonemeData.$fReadTone27
                   PhonemeData.$fReadTone15) -}
87cd4acf5bb796129082f7006a0ea5b8
  $fReadTone15 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Tone)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Tone)
                   PhonemeData.$fReadTone24
                   PhonemeData.$fReadTone16) -}
87cd4acf5bb796129082f7006a0ea5b8
  $fReadTone16 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Tone)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Tone)
                   PhonemeData.$fReadTone21
                   PhonemeData.$fReadTone17) -}
87cd4acf5bb796129082f7006a0ea5b8
  $fReadTone17 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Tone)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Tone)
                   PhonemeData.$fReadTone18
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Tone))) -}
87cd4acf5bb796129082f7006a0ea5b8
  $fReadTone18 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Tone)
  {- Strictness: m,
     Unfolding: ((PhonemeData.$fReadTone20,
                  PhonemeData.$fReadTone19
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <PhonemeData.Tone>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <PhonemeData.Tone>_R))))) -}
87cd4acf5bb796129082f7006a0ea5b8
  $fReadTone19 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Tone -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: PhonemeData.Tone -> Text.ParserCombinators.ReadP.P b) ->
                 eta PhonemeData.PEAKT) -}
87cd4acf5bb796129082f7006a0ea5b8
  $fReadTone2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP PhonemeData.Tone
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ PhonemeData.Tone
                   PhonemeData.$fReadTone3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <PhonemeData.Tone>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <PhonemeData.Tone>_R)))) -}
b8df6cb108af10b7739a52e2ade0542c
  $fReadTone20 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PEAKT"#) -}
87cd4acf5bb796129082f7006a0ea5b8
  $fReadTone21 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Tone)
  {- Strictness: m,
     Unfolding: ((PhonemeData.$fReadTone23,
                  PhonemeData.$fReadTone22
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <PhonemeData.Tone>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <PhonemeData.Tone>_R))))) -}
87cd4acf5bb796129082f7006a0ea5b8
  $fReadTone22 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Tone -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: PhonemeData.Tone -> Text.ParserCombinators.ReadP.P b) ->
                 eta PhonemeData.DIPT) -}
b46b7e237857351cb2994126a5fd7e04
  $fReadTone23 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DIPT"#) -}
87cd4acf5bb796129082f7006a0ea5b8
  $fReadTone24 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Tone)
  {- Strictness: m,
     Unfolding: ((PhonemeData.$fReadTone26,
                  PhonemeData.$fReadTone25
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <PhonemeData.Tone>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <PhonemeData.Tone>_R))))) -}
87cd4acf5bb796129082f7006a0ea5b8
  $fReadTone25 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Tone -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: PhonemeData.Tone -> Text.ParserCombinators.ReadP.P b) ->
                 eta PhonemeData.LRISET) -}
6981d0740738f2fcdcca31002797fc21
  $fReadTone26 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "LRISET"#) -}
87cd4acf5bb796129082f7006a0ea5b8
  $fReadTone27 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Tone)
  {- Strictness: m,
     Unfolding: ((PhonemeData.$fReadTone29,
                  PhonemeData.$fReadTone28
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <PhonemeData.Tone>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <PhonemeData.Tone>_R))))) -}
87cd4acf5bb796129082f7006a0ea5b8
  $fReadTone28 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Tone -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: PhonemeData.Tone -> Text.ParserCombinators.ReadP.P b) ->
                 eta PhonemeData.HRISET) -}
8236c8ca7cd668891a980ad27de5efb9
  $fReadTone29 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "HRISET"#) -}
87cd4acf5bb796129082f7006a0ea5b8
  $fReadTone3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Tone -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: PhonemeData.Tone -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.choose2
                   @ PhonemeData.Tone
                   PhonemeData.$fReadTone4
                   eta
                   @ b
                   eta1) -}
87cd4acf5bb796129082f7006a0ea5b8
  $fReadTone30 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Tone)
  {- Strictness: m,
     Unfolding: ((PhonemeData.$fReadTone32,
                  PhonemeData.$fReadTone31
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <PhonemeData.Tone>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <PhonemeData.Tone>_R))))) -}
87cd4acf5bb796129082f7006a0ea5b8
  $fReadTone31 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Tone -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: PhonemeData.Tone -> Text.ParserCombinators.ReadP.P b) ->
                 eta PhonemeData.RISET) -}
ec745ac4533c48224a0505cf9e6290c5
  $fReadTone32 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "RISET"#) -}
87cd4acf5bb796129082f7006a0ea5b8
  $fReadTone33 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Tone)
  {- Strictness: m,
     Unfolding: ((PhonemeData.$fReadTone35,
                  PhonemeData.$fReadTone34
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <PhonemeData.Tone>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <PhonemeData.Tone>_R))))) -}
87cd4acf5bb796129082f7006a0ea5b8
  $fReadTone34 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Tone -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: PhonemeData.Tone -> Text.ParserCombinators.ReadP.P b) ->
                 eta PhonemeData.LFALLT) -}
597b5c978650f94c2c53044de0f58acc
  $fReadTone35 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "LFALLT"#) -}
87cd4acf5bb796129082f7006a0ea5b8
  $fReadTone36 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Tone)
  {- Strictness: m,
     Unfolding: ((PhonemeData.$fReadTone38,
                  PhonemeData.$fReadTone37
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <PhonemeData.Tone>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <PhonemeData.Tone>_R))))) -}
87cd4acf5bb796129082f7006a0ea5b8
  $fReadTone37 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Tone -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: PhonemeData.Tone -> Text.ParserCombinators.ReadP.P b) ->
                 eta PhonemeData.HFALLT) -}
b2e45c5d340666bea2cb1b5d66228f79
  $fReadTone38 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "HFALLT"#) -}
87cd4acf5bb796129082f7006a0ea5b8
  $fReadTone39 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Tone)
  {- Strictness: m,
     Unfolding: ((PhonemeData.$fReadTone41,
                  PhonemeData.$fReadTone40
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <PhonemeData.Tone>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <PhonemeData.Tone>_R))))) -}
87cd4acf5bb796129082f7006a0ea5b8
  $fReadTone4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Tone)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Tone)
                   PhonemeData.$fReadTone57
                   PhonemeData.$fReadTone5) -}
87cd4acf5bb796129082f7006a0ea5b8
  $fReadTone40 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Tone -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: PhonemeData.Tone -> Text.ParserCombinators.ReadP.P b) ->
                 eta PhonemeData.FALLT) -}
d3bfa6cef70af47b4345189c153d175b
  $fReadTone41 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FALLT"#) -}
87cd4acf5bb796129082f7006a0ea5b8
  $fReadTone42 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Tone)
  {- Strictness: m,
     Unfolding: ((PhonemeData.$fReadTone44,
                  PhonemeData.$fReadTone43
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <PhonemeData.Tone>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <PhonemeData.Tone>_R))))) -}
87cd4acf5bb796129082f7006a0ea5b8
  $fReadTone43 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Tone -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: PhonemeData.Tone -> Text.ParserCombinators.ReadP.P b) ->
                 eta PhonemeData.BOTTOMT) -}
3f8d96df3283ed5a38a5503714dbc3e7
  $fReadTone44 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "BOTTOMT"#) -}
87cd4acf5bb796129082f7006a0ea5b8
  $fReadTone45 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Tone)
  {- Strictness: m,
     Unfolding: ((PhonemeData.$fReadTone47,
                  PhonemeData.$fReadTone46
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <PhonemeData.Tone>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <PhonemeData.Tone>_R))))) -}
87cd4acf5bb796129082f7006a0ea5b8
  $fReadTone46 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Tone -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: PhonemeData.Tone -> Text.ParserCombinators.ReadP.P b) ->
                 eta PhonemeData.LOWT) -}
f4209e313cda9894444ab61b509c0689
  $fReadTone47 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "LOWT"#) -}
87cd4acf5bb796129082f7006a0ea5b8
  $fReadTone48 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Tone)
  {- Strictness: m,
     Unfolding: ((PhonemeData.$fReadTone50,
                  PhonemeData.$fReadTone49
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <PhonemeData.Tone>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <PhonemeData.Tone>_R))))) -}
87cd4acf5bb796129082f7006a0ea5b8
  $fReadTone49 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Tone -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: PhonemeData.Tone -> Text.ParserCombinators.ReadP.P b) ->
                 eta PhonemeData.MIDT) -}
87cd4acf5bb796129082f7006a0ea5b8
  $fReadTone5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Tone)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Tone)
                   PhonemeData.$fReadTone54
                   PhonemeData.$fReadTone6) -}
598d8b069301729c1d275033d6c03072
  $fReadTone50 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "MIDT"#) -}
87cd4acf5bb796129082f7006a0ea5b8
  $fReadTone51 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Tone)
  {- Strictness: m,
     Unfolding: ((PhonemeData.$fReadTone53,
                  PhonemeData.$fReadTone52
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <PhonemeData.Tone>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <PhonemeData.Tone>_R))))) -}
87cd4acf5bb796129082f7006a0ea5b8
  $fReadTone52 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Tone -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: PhonemeData.Tone -> Text.ParserCombinators.ReadP.P b) ->
                 eta PhonemeData.HIGHT) -}
962d8d7d34a9cefcec496e0276f55b41
  $fReadTone53 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "HIGHT"#) -}
87cd4acf5bb796129082f7006a0ea5b8
  $fReadTone54 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Tone)
  {- Strictness: m,
     Unfolding: ((PhonemeData.$fReadTone56,
                  PhonemeData.$fReadTone55
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <PhonemeData.Tone>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <PhonemeData.Tone>_R))))) -}
87cd4acf5bb796129082f7006a0ea5b8
  $fReadTone55 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Tone -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: PhonemeData.Tone -> Text.ParserCombinators.ReadP.P b) ->
                 eta PhonemeData.TOPT) -}
a56750f4e54706a99133de71960e9713
  $fReadTone56 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TOPT"#) -}
87cd4acf5bb796129082f7006a0ea5b8
  $fReadTone57 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Tone)
  {- Strictness: m,
     Unfolding: ((PhonemeData.$fReadTone59,
                  PhonemeData.$fReadTone58
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <PhonemeData.Tone>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <PhonemeData.Tone>_R))))) -}
87cd4acf5bb796129082f7006a0ea5b8
  $fReadTone58 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Tone -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: PhonemeData.Tone -> Text.ParserCombinators.ReadP.P b) ->
                 eta PhonemeData.NONET) -}
69c69f044b89bf0baf03b912fa06a306
  $fReadTone59 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NONET"#) -}
87cd4acf5bb796129082f7006a0ea5b8
  $fReadTone6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Tone)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Tone)
                   PhonemeData.$fReadTone51
                   PhonemeData.$fReadTone7) -}
87cd4acf5bb796129082f7006a0ea5b8
  $fReadTone60 :: Text.ParserCombinators.ReadP.P [PhonemeData.Tone]
  {- Unfolding: (GHC.Read.$wlist
                   @ PhonemeData.Tone
                   PhonemeData.$fReadTone2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <PhonemeData.Tone>_R))
                   @ [PhonemeData.Tone]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [PhonemeData.Tone])) -}
87cd4acf5bb796129082f7006a0ea5b8
  $fReadTone7 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Tone)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Tone)
                   PhonemeData.$fReadTone48
                   PhonemeData.$fReadTone8) -}
87cd4acf5bb796129082f7006a0ea5b8
  $fReadTone8 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Tone)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Tone)
                   PhonemeData.$fReadTone45
                   PhonemeData.$fReadTone9) -}
87cd4acf5bb796129082f7006a0ea5b8
  $fReadTone9 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Tone)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Tone)
                   PhonemeData.$fReadTone42
                   PhonemeData.$fReadTone10) -}
87cd4acf5bb796129082f7006a0ea5b8
  $fReadTone_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [PhonemeData.Tone]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [PhonemeData.Tone]
                   PhonemeData.$fReadTone60) -}
87cd4acf5bb796129082f7006a0ea5b8
  $fReadTone_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [PhonemeData.Tone]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                PhonemeData.$fReadTone1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[PhonemeData.Tone]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[PhonemeData.Tone]>_R))) -}
87cd4acf5bb796129082f7006a0ea5b8
  $fReadTone_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Tone
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                PhonemeData.$fReadTone2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <PhonemeData.Tone>_R)) -}
87cd4acf5bb796129082f7006a0ea5b8
  $fReadTone_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS PhonemeData.Tone
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ PhonemeData.Tone
                   ((GHC.Read.$fReadDouble10
                       @ PhonemeData.Tone
                       PhonemeData.$fReadTone3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <PhonemeData.Tone>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <PhonemeData.Tone>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <PhonemeData.Tone>_R)
                      @ PhonemeData.Tone
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ PhonemeData.Tone))) -}
3bda176bb325231b683f164bd205b115
  $fReadWord :: GHC.Read.Read PhonemeData.Word
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ PhonemeData.Word
                  PhonemeData.$fReadWord_$creadsPrec
                  PhonemeData.$fReadWord_$creadList
                  PhonemeData.$fReadWord_$creadPrec
                  PhonemeData.$fReadWord_$creadListPrec -}
3bda176bb325231b683f164bd205b115
  $fReadWord1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([PhonemeData.Word] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [PhonemeData.Word] -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.$wlist
                   @ PhonemeData.Word
                   PhonemeData.$fReadWord2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <PhonemeData.Word>_R))
                   @ b
                   eta1) -}
3bda176bb325231b683f164bd205b115
  $fReadWord2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP PhonemeData.Word
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ PhonemeData.Word
                   PhonemeData.$fReadWord3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <PhonemeData.Word>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <PhonemeData.Word>_R)))) -}
3bda176bb325231b683f164bd205b115
  $fReadWord3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (PhonemeData.Word -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (w1 :: PhonemeData.Word -> Text.ParserCombinators.ReadP.P b) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 PhonemeData.$w$creadPrec1 ww1 @ b w1 }) -}
3bda176bb325231b683f164bd205b115
  $fReadWord4 :: Text.ParserCombinators.ReadP.P [PhonemeData.Word]
  {- Unfolding: (GHC.Read.$wlist
                   @ PhonemeData.Word
                   PhonemeData.$fReadWord2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <PhonemeData.Word>_R))
                   @ [PhonemeData.Word]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [PhonemeData.Word])) -}
3bda176bb325231b683f164bd205b115
  $fReadWord_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [PhonemeData.Word]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [PhonemeData.Word]
                   PhonemeData.$fReadWord4) -}
3bda176bb325231b683f164bd205b115
  $fReadWord_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [PhonemeData.Word]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                PhonemeData.$fReadWord1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[PhonemeData.Word]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[PhonemeData.Word]>_R))) -}
3bda176bb325231b683f164bd205b115
  $fReadWord_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec PhonemeData.Word
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                PhonemeData.$fReadWord2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <PhonemeData.Word>_R)) -}
3bda176bb325231b683f164bd205b115
  $fReadWord_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS PhonemeData.Word
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ PhonemeData.Word
                   ((GHC.Read.$fReadDouble10
                       @ PhonemeData.Word
                       PhonemeData.$fReadWord3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <PhonemeData.Word>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <PhonemeData.Word>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <PhonemeData.Word>_R)
                      @ PhonemeData.Word
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ PhonemeData.Word))) -}
d7d82e642198a794ac3b3638da1bf9f3
  $fShowBackness :: GHC.Show.Show PhonemeData.Backness
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ PhonemeData.Backness
                  PhonemeData.$fShowBackness_$cshowsPrec
                  PhonemeData.$fShowBackness_$cshow
                  PhonemeData.$fShowBackness_$cshowList -}
d7d82e642198a794ac3b3638da1bf9f3
  $fShowBackness_$cshow :: PhonemeData.Backness -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: PhonemeData.Backness) ->
                 PhonemeData.$fShowBackness_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
d7d82e642198a794ac3b3638da1bf9f3
  $fShowBackness_$cshowList ::
    [PhonemeData.Backness] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ PhonemeData.Backness
                   PhonemeData.$w$cshowsPrec) -}
d7d82e642198a794ac3b3638da1bf9f3
  $fShowBackness_$cshowsPrec ::
    GHC.Types.Int -> PhonemeData.Backness -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: PhonemeData.Backness)
                   (w2 :: GHC.Base.String) ->
                 PhonemeData.$w$cshowsPrec w1 w2) -}
ba05bb435342e1a32b92b81d74410bc0
  $fShowHeight :: GHC.Show.Show PhonemeData.Height
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ PhonemeData.Height
                  PhonemeData.$fShowHeight_$cshowsPrec
                  PhonemeData.$fShowHeight_$cshow
                  PhonemeData.$fShowHeight_$cshowList -}
ba05bb435342e1a32b92b81d74410bc0
  $fShowHeight_$cshow :: PhonemeData.Height -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: PhonemeData.Height) ->
                 PhonemeData.$fShowHeight_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
ba05bb435342e1a32b92b81d74410bc0
  $fShowHeight_$cshowList :: [PhonemeData.Height] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ PhonemeData.Height
                   PhonemeData.$w$cshowsPrec1) -}
ba05bb435342e1a32b92b81d74410bc0
  $fShowHeight_$cshowsPrec ::
    GHC.Types.Int -> PhonemeData.Height -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: PhonemeData.Height)
                   (w2 :: GHC.Base.String) ->
                 PhonemeData.$w$cshowsPrec1 w1 w2) -}
60079db4dd97570a8e4fd882d78d3a98
  $fShowLength :: GHC.Show.Show PhonemeData.Length
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ PhonemeData.Length
                  PhonemeData.$fShowLength_$cshowsPrec
                  PhonemeData.$fShowLength_$cshow
                  PhonemeData.$fShowLength_$cshowList -}
60079db4dd97570a8e4fd882d78d3a98
  $fShowLength_$cshow :: PhonemeData.Length -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: PhonemeData.Length) ->
                 case x of wild {
                   PhonemeData.SHORT -> PhonemeData.$fReadLength15
                   PhonemeData.NORMAL -> PhonemeData.$fReadLength12
                   PhonemeData.LONG -> PhonemeData.$fReadLength9 }) -}
60079db4dd97570a8e4fd882d78d3a98
  $fShowLength_$cshowList :: [PhonemeData.Length] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ PhonemeData.Length
                   PhonemeData.$w$cshowsPrec2) -}
60079db4dd97570a8e4fd882d78d3a98
  $fShowLength_$cshowsPrec ::
    GHC.Types.Int -> PhonemeData.Length -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: PhonemeData.Length)
                   (w2 :: GHC.Base.String) ->
                 PhonemeData.$w$cshowsPrec2 w1 w2) -}
cc18ad7b6a428637be9e42d493f6b8da
  $fShowManner :: GHC.Show.Show PhonemeData.Manner
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ PhonemeData.Manner
                  PhonemeData.$fShowManner_$cshowsPrec
                  PhonemeData.$fShowManner_$cshow
                  PhonemeData.$fShowManner_$cshowList -}
cc18ad7b6a428637be9e42d493f6b8da
  $fShowManner_$cshow :: PhonemeData.Manner -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: PhonemeData.Manner) ->
                 PhonemeData.$fShowManner_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
cc18ad7b6a428637be9e42d493f6b8da
  $fShowManner_$cshowList :: [PhonemeData.Manner] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ PhonemeData.Manner
                   PhonemeData.$w$cshowsPrec3) -}
cc18ad7b6a428637be9e42d493f6b8da
  $fShowManner_$cshowsPrec ::
    GHC.Types.Int -> PhonemeData.Manner -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: PhonemeData.Manner)
                   (w2 :: GHC.Base.String) ->
                 PhonemeData.$w$cshowsPrec3 w1 w2) -}
8d3162e814627ae5597b1f6cf9209b2d
  $fShowMorpheme :: GHC.Show.Show PhonemeData.Morpheme
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ PhonemeData.Morpheme
                  PhonemeData.$fShowMorpheme_$cshowsPrec1
                  PhonemeData.$fShowMorpheme_$cshow
                  PhonemeData.$fShowMorpheme_$cshowList -}
8d3162e814627ae5597b1f6cf9209b2d
  $fShowMorpheme1 :: PhonemeData.Morpheme -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: PhonemeData.Morpheme)
                   (w1 :: GHC.Base.String) ->
                 case w of ww { PhonemeData.Morpheme ww1 ->
                 PhonemeData.$w$cshowsPrec4 0# ww1 w1 }) -}
6b4d5c130a8e21aa612b76a63e45ee6a
  $fShowMorpheme2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
48acebb36260212b897c7194d33b931f
  $fShowMorpheme3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "}"#) -}
3d1d92ba342da083feb6da437d277e1b
  $fShowMorpheme4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "getPhonemes = "#) -}
885e6c95edcfa850175173c22099ac5e
  $fShowMorpheme5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Morpheme {"#) -}
8d3162e814627ae5597b1f6cf9209b2d
  $fShowMorpheme_$cshow :: PhonemeData.Morpheme -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: PhonemeData.Morpheme) ->
                 PhonemeData.$fShowMorpheme_$cshowsPrec1
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
8d3162e814627ae5597b1f6cf9209b2d
  $fShowMorpheme_$cshowList ::
    [PhonemeData.Morpheme] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ PhonemeData.Morpheme
                   PhonemeData.$fShowMorpheme1) -}
a99d82394cccf94f6dc3580d7da31e00
  $fShowMorpheme_$cshowsPrec ::
    GHC.Types.Int -> PhonemeData.Phoneme -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U> -}
8d3162e814627ae5597b1f6cf9209b2d
  $fShowMorpheme_$cshowsPrec1 ::
    GHC.Types.Int -> PhonemeData.Morpheme -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: PhonemeData.Morpheme)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { PhonemeData.Morpheme ww3 ->
                 PhonemeData.$w$cshowsPrec4 ww1 ww3 w2 } }) -}
2e1a0e09a78074c21fc0136e518a2133
  $fShowPhonation :: GHC.Show.Show PhonemeData.Phonation
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ PhonemeData.Phonation
                  PhonemeData.$fShowPhonation_$cshowsPrec
                  PhonemeData.$fShowPhonation_$cshow
                  PhonemeData.$fShowPhonation_$cshowList -}
2e1a0e09a78074c21fc0136e518a2133
  $fShowPhonation_$cshow :: PhonemeData.Phonation -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: PhonemeData.Phonation) ->
                 PhonemeData.$fShowPhonation_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
2e1a0e09a78074c21fc0136e518a2133
  $fShowPhonation_$cshowList ::
    [PhonemeData.Phonation] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ PhonemeData.Phonation
                   PhonemeData.$w$cshowsPrec5) -}
2e1a0e09a78074c21fc0136e518a2133
  $fShowPhonation_$cshowsPrec ::
    GHC.Types.Int -> PhonemeData.Phonation -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: PhonemeData.Phonation)
                   (w2 :: GHC.Base.String) ->
                 PhonemeData.$w$cshowsPrec5 w1 w2) -}
a99d82394cccf94f6dc3580d7da31e00
  $fShowPhoneme :: GHC.Show.Show PhonemeData.Phoneme
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ PhonemeData.Phoneme
                  PhonemeData.$fShowMorpheme_$cshowsPrec
                  PhonemeData.$fShowPhoneme_$cshow
                  PhonemeData.$fShowPhoneme_$cshowList -}
a99d82394cccf94f6dc3580d7da31e00
  $fShowPhoneme1 :: PhonemeData.Phoneme -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (PhonemeData.$fShowMorpheme_$cshowsPrec
                   PhonemeData.$fShowMorpheme2) -}
a99d82394cccf94f6dc3580d7da31e00
  $fShowPhoneme_$cshow :: PhonemeData.Phoneme -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: PhonemeData.Phoneme) ->
                 PhonemeData.$fShowMorpheme_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
a99d82394cccf94f6dc3580d7da31e00
  $fShowPhoneme_$cshowList :: [PhonemeData.Phoneme] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ PhonemeData.Phoneme
                   PhonemeData.$fShowPhoneme1) -}
27d4fb2260414ca95f988dc9fef00141
  $fShowPlace :: GHC.Show.Show PhonemeData.Place
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ PhonemeData.Place
                  PhonemeData.$fShowPlace_$cshowsPrec
                  PhonemeData.$fShowPlace_$cshow
                  PhonemeData.$fShowPlace_$cshowList -}
27d4fb2260414ca95f988dc9fef00141
  $fShowPlace_$cshow :: PhonemeData.Place -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: PhonemeData.Place) ->
                 PhonemeData.$fShowPlace_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
27d4fb2260414ca95f988dc9fef00141
  $fShowPlace_$cshowList :: [PhonemeData.Place] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ PhonemeData.Place
                   PhonemeData.$w$cshowsPrec6) -}
27d4fb2260414ca95f988dc9fef00141
  $fShowPlace_$cshowsPrec ::
    GHC.Types.Int -> PhonemeData.Place -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: PhonemeData.Place)
                   (w2 :: GHC.Base.String) ->
                 PhonemeData.$w$cshowsPrec6 w1 w2) -}
e7b029a5844a6e008b95082c9c811e33
  $fShowRoundedness :: GHC.Show.Show PhonemeData.Roundedness
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ PhonemeData.Roundedness
                  PhonemeData.$fShowRoundedness_$cshowsPrec
                  PhonemeData.$fShowRoundedness_$cshow
                  PhonemeData.$fShowRoundedness_$cshowList -}
e7b029a5844a6e008b95082c9c811e33
  $fShowRoundedness_$cshow ::
    PhonemeData.Roundedness -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: PhonemeData.Roundedness) ->
                 case x of wild {
                   PhonemeData.DEFAULT -> PhonemeData.$fReadRoundedness15
                   PhonemeData.ROUNDED -> PhonemeData.$fReadRoundedness12
                   PhonemeData.UNROUNDED -> PhonemeData.$fReadRoundedness9 }) -}
e7b029a5844a6e008b95082c9c811e33
  $fShowRoundedness_$cshowList ::
    [PhonemeData.Roundedness] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ PhonemeData.Roundedness
                   PhonemeData.$w$cshowsPrec7) -}
e7b029a5844a6e008b95082c9c811e33
  $fShowRoundedness_$cshowsPrec ::
    GHC.Types.Int -> PhonemeData.Roundedness -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: PhonemeData.Roundedness)
                   (w2 :: GHC.Base.String) ->
                 PhonemeData.$w$cshowsPrec7 w1 w2) -}
87cd4acf5bb796129082f7006a0ea5b8
  $fShowTone :: GHC.Show.Show PhonemeData.Tone
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ PhonemeData.Tone
                  PhonemeData.$fShowTone_$cshowsPrec
                  PhonemeData.$fShowTone_$cshow
                  PhonemeData.$fShowTone_$cshowList -}
87cd4acf5bb796129082f7006a0ea5b8
  $fShowTone_$cshow :: PhonemeData.Tone -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: PhonemeData.Tone) ->
                 PhonemeData.$fShowTone_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
87cd4acf5bb796129082f7006a0ea5b8
  $fShowTone_$cshowList :: [PhonemeData.Tone] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ PhonemeData.Tone
                   PhonemeData.$w$cshowsPrec8) -}
87cd4acf5bb796129082f7006a0ea5b8
  $fShowTone_$cshowsPrec ::
    GHC.Types.Int -> PhonemeData.Tone -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: PhonemeData.Tone)
                   (w2 :: GHC.Base.String) ->
                 PhonemeData.$w$cshowsPrec8 w1 w2) -}
3bda176bb325231b683f164bd205b115
  $fShowWord :: GHC.Show.Show PhonemeData.Word
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ PhonemeData.Word
                  PhonemeData.$fShowWord_$cshowsPrec
                  PhonemeData.$fShowWord_$cshow
                  PhonemeData.$fShowWord_$cshowList -}
3bda176bb325231b683f164bd205b115
  $fShowWord1 :: PhonemeData.Word -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: PhonemeData.Word) (w1 :: GHC.Base.String) ->
                 case w of ww { PhonemeData.Word ww1 ->
                 PhonemeData.$w$cshowsPrec9 0# ww1 w1 }) -}
eaaf5fa3df7d75331ea208d481315466
  $fShowWord2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "getMorphemes = "#) -}
8d9c4e0982eed873493a1f58e73e83ce
  $fShowWord3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Word {"#) -}
3bda176bb325231b683f164bd205b115
  $fShowWord_$cshow :: PhonemeData.Word -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: PhonemeData.Word) ->
                 PhonemeData.$fShowWord_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
3bda176bb325231b683f164bd205b115
  $fShowWord_$cshowList :: [PhonemeData.Word] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ PhonemeData.Word
                   PhonemeData.$fShowWord1) -}
3bda176bb325231b683f164bd205b115
  $fShowWord_$cshowsPrec ::
    GHC.Types.Int -> PhonemeData.Word -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: PhonemeData.Word)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { PhonemeData.Word ww3 ->
                 PhonemeData.$w$cshowsPrec9 ww1 ww3 w2 } }) -}
ede2eb5fce92d3c15b86621f7be3fa80
  $tc'AFFRICATE :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16415263449796102880##
                   9512215814712708##
                   PhonemeData.$trModule
                   PhonemeData.$tc'AFFRICATE1) -}
58cec48021c1cf32711f413d6dcafba1
  $tc'AFFRICATE1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'AFFRICATE"#) -}
731f9c50230319fadff87d95411a383c
  $tc'ALVEOLAR :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17413064461111958625##
                   4881446273150457387##
                   PhonemeData.$trModule
                   PhonemeData.$tc'ALVEOLAR1) -}
0cf56d55208d26b2b108e030deceb9e1
  $tc'ALVEOLAR1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ALVEOLAR"#) -}
ef67b3ecc72896aedb3243dca4eac06b
  $tc'ALVEOLOPALATAL :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7205006440035756715##
                   1893783589695876916##
                   PhonemeData.$trModule
                   PhonemeData.$tc'ALVEOLOPALATAL1) -}
04ba664ada8f3802d8196f27bc17dc88
  $tc'ALVEOLOPALATAL1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ALVEOLOPALATAL"#) -}
70d2ad9b189a8da301c63aab3e06b271
  $tc'APPROXIMANT :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13513537090135435159##
                   7616857448546038643##
                   PhonemeData.$trModule
                   PhonemeData.$tc'APPROXIMANT1) -}
d1f843ebce0abde18f20d7912bf1265d
  $tc'APPROXIMANT1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'APPROXIMANT"#) -}
94d59dda0b56e934b4df01c8bc53b09e
  $tc'ASPIRATED :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14455389660148229991##
                   15839643650965439247##
                   PhonemeData.$trModule
                   PhonemeData.$tc'ASPIRATED1) -}
7325ed0144dc20aacf2830aeff3db010
  $tc'ASPIRATED1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ASPIRATED"#) -}
8d7578848231525fe21767aec8197207
  $tc'BACK :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2727036911180365706##
                   6570113954720784364##
                   PhonemeData.$trModule
                   PhonemeData.$tc'BACK1) -}
64e3657c9e29e56bd2ce02678c0110e7
  $tc'BACK1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'BACK"#) -}
6fa3cb2a183affa54f0c8a7a386fc832
  $tc'BILABIAL :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10535785350823887037##
                   2294584222821951803##
                   PhonemeData.$trModule
                   PhonemeData.$tc'BILABIAL1) -}
56f16c16c3a08ee4bab8f9ccce829cab
  $tc'BILABIAL1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'BILABIAL"#) -}
68ef596fcca684eb56edd0f354117436
  $tc'BOTTOMT :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9909915947580629427##
                   13063951067888800433##
                   PhonemeData.$trModule
                   PhonemeData.$tc'BOTTOMT1) -}
b9b57e380f6ae80cd4d7b00531b31755
  $tc'BOTTOMT1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'BOTTOMT"#) -}
9fe3c77d95604f8d37d6caa4a9661533
  $tc'BREATHY :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13132324606782517385##
                   12379980226056011470##
                   PhonemeData.$trModule
                   PhonemeData.$tc'BREATHY1) -}
2e6fa382fb4a5fd151d1b788e7f9dd76
  $tc'BREATHY1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'BREATHY"#) -}
db8197b5e79a1ef1f1375bcd72d55857
  $tc'Blank :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3569023901486983313##
                   15475709480196415788##
                   PhonemeData.$trModule
                   PhonemeData.$tc'Blank1) -}
fb9bcdd30882be45bf97b724942eb9c0
  $tc'Blank1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Blank"#) -}
50f8b03994f850ae1fa7887fbcd19a12
  $tc'CENTRAL :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9196470505436356960##
                   11784117240022360545##
                   PhonemeData.$trModule
                   PhonemeData.$tc'CENTRAL1) -}
3d4586aea5fa49c1c11abb859f7f6e04
  $tc'CENTRAL1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'CENTRAL"#) -}
ca571ec45411b43c107df329e3b61cbb
  $tc'CLOSE :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15075271677303645672##
                   4643933603354066025##
                   PhonemeData.$trModule
                   PhonemeData.$tc'CLOSE1) -}
4cd3a259424b9d2c003daf4e3bab26f1
  $tc'CLOSE1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'CLOSE"#) -}
e7b7b8e58e120351d2a1bcce6fa65bc6
  $tc'CLOSEMID :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16750679273420157338##
                   11234408519385157932##
                   PhonemeData.$trModule
                   PhonemeData.$tc'CLOSEMID1) -}
29678d680bab4093f80d3a591e028f74
  $tc'CLOSEMID1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'CLOSEMID"#) -}
389c3dca3cd6c5d6e7d5e939b0e7d0f5
  $tc'CORONAL :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13584644590812712768##
                   15268126355090869994##
                   PhonemeData.$trModule
                   PhonemeData.$tc'CORONAL1) -}
0636404002b7e0b8d88d8845eb83f445
  $tc'CORONAL1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'CORONAL"#) -}
e8c715227afbec673d0b2cc4796eff86
  $tc'CREAKY :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7507665926441205341##
                   4691393971549766139##
                   PhonemeData.$trModule
                   PhonemeData.$tc'CREAKY1) -}
1eee357f0199f2cedd4bbe3929770a79
  $tc'CREAKY1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'CREAKY"#) -}
40aed9e3a58d5d3bbf0344e2183359c4
  $tc'Consonant :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8815237167073264657##
                   11727521701697791476##
                   PhonemeData.$trModule
                   PhonemeData.$tc'Consonant1) -}
3bd596b456f8e60edd23c3233f65f32d
  $tc'Consonant1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Consonant"#) -}
a17148a114e7234c1602f4b089871f7b
  $tc'DEFAULT :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11432615425026393831##
                   7740626020885565047##
                   PhonemeData.$trModule
                   PhonemeData.$tc'DEFAULT1) -}
7cbd4870cb9eed5bb32b155dfb5abe4d
  $tc'DEFAULT1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'DEFAULT"#) -}
8abd83c4814b3be0317708300ca45117
  $tc'DENTAL :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17216724780642193364##
                   11631249561387015099##
                   PhonemeData.$trModule
                   PhonemeData.$tc'DENTAL1) -}
1a1ce30e0a4aff8fb6e3849368f88e2b
  $tc'DENTAL1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'DENTAL"#) -}
b2346c5a0e66540616788e21d587fccd
  $tc'DENTIALVEOLAR :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12571646669993031382##
                   7668982684511262757##
                   PhonemeData.$trModule
                   PhonemeData.$tc'DENTIALVEOLAR1) -}
efc9668660c0d2e324aa4193b926220a
  $tc'DENTIALVEOLAR1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'DENTIALVEOLAR"#) -}
58b482d1415eca4641aa48e2e96665ba
  $tc'DIPT :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15909934192726562018##
                   14677983772388677275##
                   PhonemeData.$trModule
                   PhonemeData.$tc'DIPT1) -}
56704f9b462a2ac8cb22db9bfbca0ec8
  $tc'DIPT1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'DIPT"#) -}
39511ea66c6ae18c805e2a237ece96dc
  $tc'DORSAL :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   530236615339481196##
                   7396280831763472287##
                   PhonemeData.$trModule
                   PhonemeData.$tc'DORSAL1) -}
f767ed091a08e8a579c51ec5b57aae65
  $tc'DORSAL1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'DORSAL"#) -}
61de7a8194bec9288588dc2342a9215e
  $tc'Diphthong :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17703779489684119710##
                   15078111617043876755##
                   PhonemeData.$trModule
                   PhonemeData.$tc'Diphthong1) -}
31f1ff61b96e23410a4a37fb3b604e1c
  $tc'Diphthong1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Diphthong"#) -}
c3a289e1482ef194d40fd8ec7bb10451
  $tc'EPIGLOTTAL :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8393044817393494214##
                   4530280960733509848##
                   PhonemeData.$trModule
                   PhonemeData.$tc'EPIGLOTTAL1) -}
8635efa36a14671813680449b3b24f7a
  $tc'EPIGLOTTAL1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'EPIGLOTTAL"#) -}
b3507307f79ca2ed6a35829f5909bd15
  $tc'EPIPHARYNGEAL :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17372800585857899285##
                   13775378994555499357##
                   PhonemeData.$trModule
                   PhonemeData.$tc'EPIPHARYNGEAL1) -}
490a4e90b96460f477365e33281a0b83
  $tc'EPIPHARYNGEAL1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'EPIPHARYNGEAL"#) -}
c86559da5f0688a775b015b96e7fe98f
  $tc'FALLT :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13103096179254727010##
                   8959546665916540599##
                   PhonemeData.$trModule
                   PhonemeData.$tc'FALLT1) -}
f25674844ac36a20ceae06da9a5076eb
  $tc'FALLT1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'FALLT"#) -}
8cb8007049ee56bd4c70440a9c860960
  $tc'FLAP :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12176404184761969317##
                   9286445991077944490##
                   PhonemeData.$trModule
                   PhonemeData.$tc'FLAP1) -}
b48ff1b975518892f18289fe2fcd7285
  $tc'FLAP1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'FLAP"#) -}
a7869ac04a943ea22cdef4675496d4ff
  $tc'FRICATIVE :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7485157054715021432##
                   9467724803919748011##
                   PhonemeData.$trModule
                   PhonemeData.$tc'FRICATIVE1) -}
7ee5dbc545efcee54728a42d26347640
  $tc'FRICATIVE1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'FRICATIVE"#) -}
3a8dd5669645c2fc11d3f62fc4e3b3fa
  $tc'FRONT :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3090413812319707829##
                   4306950655838780836##
                   PhonemeData.$trModule
                   PhonemeData.$tc'FRONT1) -}
3cdc7619a4a4b2372f9b03e280c98d89
  $tc'FRONT1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'FRONT"#) -}
494bf07897673562fc357e1029ebf5d7
  $tc'GLOTTAL :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17951948759052342972##
                   13426388955856093307##
                   PhonemeData.$trModule
                   PhonemeData.$tc'GLOTTAL1) -}
375102c7d05bd5ffaef0b3ba933751e0
  $tc'GLOTTAL1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'GLOTTAL"#) -}
88ffc0ef3de14eff3732cedfe23d9021
  $tc'HFALLT :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17580336201839069880##
                   1585355770338896455##
                   PhonemeData.$trModule
                   PhonemeData.$tc'HFALLT1) -}
e3f216c1d4e46bddf6989cba4de52567
  $tc'HFALLT1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'HFALLT"#) -}
b1c2b7d05b6749e1c8810ec0d80bf94a
  $tc'HIGHT :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   414043845131665147##
                   10232422115952793121##
                   PhonemeData.$trModule
                   PhonemeData.$tc'HIGHT1) -}
69944b0d3d1f6b727526a6668c168598
  $tc'HIGHT1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'HIGHT"#) -}
b4765e391d2c7caafac5d0c95246dc50
  $tc'HRISET :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3083788968058989318##
                   5897318491875939213##
                   PhonemeData.$trModule
                   PhonemeData.$tc'HRISET1) -}
0358d606d64b75090d6028ba3174a678
  $tc'HRISET1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'HRISET"#) -}
7812ec7397ed55ab23b08d94a153cb03
  $tc'LABIAL :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2829190513309724570##
                   12062442459624126271##
                   PhonemeData.$trModule
                   PhonemeData.$tc'LABIAL1) -}
85a73146b3a6f44de5fffa97e483d449
  $tc'LABIAL1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'LABIAL"#) -}
73cb69176bdbfcb3978516ffda028ecc
  $tc'LABIODENTAL :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9590268485800249817##
                   13042182367711192448##
                   PhonemeData.$trModule
                   PhonemeData.$tc'LABIODENTAL1) -}
57d8ab6619a20a72918abd3467016a03
  $tc'LABIODENTAL1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'LABIODENTAL"#) -}
f3173f97762ada2a62823eb7be173c9e
  $tc'LAFFRICATE :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11438011924558808448##
                   11658744636940426977##
                   PhonemeData.$trModule
                   PhonemeData.$tc'LAFFRICATE1) -}
19ddad338b66d1ec163ac7c12f4c730d
  $tc'LAFFRICATE1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'LAFFRICATE"#) -}
63e2ff75f4b55d22a5470ebc4522bf0a
  $tc'LAPPROXIMANT :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14129192433710670879##
                   2167616497542989836##
                   PhonemeData.$trModule
                   PhonemeData.$tc'LAPPROXIMANT1) -}
a7eb577c1607f1358bc3f190ae2913c7
  $tc'LAPPROXIMANT1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'LAPPROXIMANT"#) -}
746f0425c28f8bd2077a417e698a2aac
  $tc'LARYNGEAL :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7955035923813516657##
                   11258081414498376953##
                   PhonemeData.$trModule
                   PhonemeData.$tc'LARYNGEAL1) -}
db6fa3a22a6d20f3f1a1a5be4bf3544b
  $tc'LARYNGEAL1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'LARYNGEAL"#) -}
eb2c0a2db41c5a6af7f2e8bfeda25a2e
  $tc'LFALLT :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6272153796033490719##
                   7236697574221933311##
                   PhonemeData.$trModule
                   PhonemeData.$tc'LFALLT1) -}
7b10b0ee2b599dc000f37c83206b5b30
  $tc'LFALLT1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'LFALLT"#) -}
b8c28974a26fd85c9155c295ebb9220f
  $tc'LFLAP :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15849672363223235468##
                   4933133207422718849##
                   PhonemeData.$trModule
                   PhonemeData.$tc'LFLAP1) -}
7e823f7f318f51236b47d877e7ba0fb7
  $tc'LFLAP1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'LFLAP"#) -}
a3a27ca495bfb95d339eb2da74aeeb19
  $tc'LFRICATIVE :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3935663875141377555##
                   5060003179438738149##
                   PhonemeData.$trModule
                   PhonemeData.$tc'LFRICATIVE1) -}
53c5353dddeea2a10e74468ee64c27c6
  $tc'LFRICATIVE1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'LFRICATIVE"#) -}
dcf110cf33c878f8086ef01f590d3b58
  $tc'LONG :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9542564163656220978##
                   2538926238362672761##
                   PhonemeData.$trModule
                   PhonemeData.$tc'LONG1) -}
ae1c23bbfd28e7b7c267eecf13adae1d
  $tc'LONG1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'LONG"#) -}
ffb0dc95494307db1c2ca494959f4f8b
  $tc'LOWT :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18261075832358768874##
                   15607480875212256491##
                   PhonemeData.$trModule
                   PhonemeData.$tc'LOWT1) -}
cba36ce44567b5a6c86d38f069331bce
  $tc'LOWT1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'LOWT"#) -}
a3293ded53b1ec7269c01e0dbf3319ea
  $tc'LRISET :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16203944891560096612##
                   5857028092490304088##
                   PhonemeData.$trModule
                   PhonemeData.$tc'LRISET1) -}
5048308139bc8390575c7ee4f0385fcb
  $tc'LRISET1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'LRISET"#) -}
32efe6863202c5a68070f1ee75d201a7
  $tc'MID :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14923543071775339637##
                   12453080741921827023##
                   PhonemeData.$trModule
                   PhonemeData.$tc'MID1) -}
dcd65eee787f7a269d7a9abe2d69f530
  $tc'MID1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'MID"#) -}
f773bd71725970ec2073e7d55811a699
  $tc'MIDT :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14970293887484182210##
                   9934286437777782201##
                   PhonemeData.$trModule
                   PhonemeData.$tc'MIDT1) -}
904c03e13294a72687bb08fee806c973
  $tc'MIDT1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'MIDT"#) -}
b74d519833b68d39956f0bf3661e9d1c
  $tc'MODAL :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1995398937226348450##
                   12204068046162059346##
                   PhonemeData.$trModule
                   PhonemeData.$tc'MODAL1) -}
b02b6f2407793c0ee005502105a733e4
  $tc'MODAL1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'MODAL"#) -}
693b1a0ff411ee2e3cf4d450c9088b04
  $tc'Morpheme :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   743782577159291147##
                   1771377557524690843##
                   PhonemeData.$trModule
                   PhonemeData.$tc'Morpheme1) -}
ea85fbd9fc9140793a7ea7b31a3a297a
  $tc'Morpheme1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Morpheme"#) -}
1094b73fc375ab979db8dd2d5e6af807
  $tc'NASAL :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4875459038794535972##
                   5426497078894679256##
                   PhonemeData.$trModule
                   PhonemeData.$tc'NASAL1) -}
ec999a5f8690c86278c6ea20a2d283c7
  $tc'NASAL1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'NASAL"#) -}
9737691f6382e4376ff1e324e142bdfb
  $tc'NEARBACK :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12140759861564750788##
                   14461915298990502442##
                   PhonemeData.$trModule
                   PhonemeData.$tc'NEARBACK1) -}
141d2e97c3610b9c4b8ee81889057ae3
  $tc'NEARBACK1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'NEARBACK"#) -}
a5fc22de9a1c6f28fbe8d2149e487623
  $tc'NEARCLOSE :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5138714703200062087##
                   2367612353894737262##
                   PhonemeData.$trModule
                   PhonemeData.$tc'NEARCLOSE1) -}
7597419284985748878a9a2da3c3f845
  $tc'NEARCLOSE1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'NEARCLOSE"#) -}
c1122d63436b0a1d9da7eebed57afc7c
  $tc'NEARFRONT :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14817099429865070261##
                   17413151149845719601##
                   PhonemeData.$trModule
                   PhonemeData.$tc'NEARFRONT1) -}
e33e45bc46c349997e5f8f1e2a1f954e
  $tc'NEARFRONT1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'NEARFRONT"#) -}
beb1014ffebe8d5053ba099b20200b09
  $tc'NEAROPEN :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1774443749588439569##
                   3884962975734052531##
                   PhonemeData.$trModule
                   PhonemeData.$tc'NEAROPEN1) -}
f7b9a993f96aaacee9cc19078b68654c
  $tc'NEAROPEN1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'NEAROPEN"#) -}
da055eb80cfd285fe0d6795ae9687b4d
  $tc'NONET :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17580491541679392670##
                   17653312852915354243##
                   PhonemeData.$trModule
                   PhonemeData.$tc'NONET1) -}
f74e9d99d31c28e4f4801039e3a95359
  $tc'NONET1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'NONET"#) -}
b065867761ff9ebd7de37ce7196ab1ea
  $tc'NORMAL :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8321648743226042510##
                   8405906422194153798##
                   PhonemeData.$trModule
                   PhonemeData.$tc'NORMAL1) -}
14abb45018ab2f1bcfc80c01c3d7c43c
  $tc'NORMAL1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'NORMAL"#) -}
aa18706e6c619c3cfc92a997383f2586
  $tc'OPEN :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6761889723208603506##
                   785284521849948846##
                   PhonemeData.$trModule
                   PhonemeData.$tc'OPEN1) -}
6c9ef01a1a3443dbb71f631ddbd5efef
  $tc'OPEN1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'OPEN"#) -}
435a142353a9a7d0942504943f16819b
  $tc'OPENMID :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8723296576568464723##
                   3019373703465924400##
                   PhonemeData.$trModule
                   PhonemeData.$tc'OPENMID1) -}
ff506be30af6620a481ba935f8e825a1
  $tc'OPENMID1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'OPENMID"#) -}
d9cc1cef62ec75bb825e153702112c72
  $tc'PALATAL :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14595704264105689038##
                   18133417156122736888##
                   PhonemeData.$trModule
                   PhonemeData.$tc'PALATAL1) -}
a7c2f9bb748736297bc64680c76b132a
  $tc'PALATAL1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PALATAL"#) -}
62f23c730ac2c4938e038767d3b4d135
  $tc'PEAKT :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10080119267272142849##
                   3834439142164734074##
                   PhonemeData.$trModule
                   PhonemeData.$tc'PEAKT1) -}
3e9964f84adcba3987d931293b8fc570
  $tc'PEAKT1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PEAKT"#) -}
dc76bfd9744e55329592c5bebc5abe23
  $tc'PHARYNGEAL :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4069915434915251624##
                   4027269738908815950##
                   PhonemeData.$trModule
                   PhonemeData.$tc'PHARYNGEAL1) -}
78ee0d0b93c5df44d58533bd3dda9ff9
  $tc'PHARYNGEAL1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PHARYNGEAL"#) -}
96639cc1efe928625d16a8e8f583346b
  $tc'POSTALVEOLAR :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6223859161764607869##
                   4864470297373637262##
                   PhonemeData.$trModule
                   PhonemeData.$tc'POSTALVEOLAR1) -}
e835ec15f31ff1ba8816830428b66609
  $tc'POSTALVEOLAR1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'POSTALVEOLAR"#) -}
8b182f816ba412109d92bbceba24520e
  $tc'RETROFLEX :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4786718089135839489##
                   14128381367018483212##
                   PhonemeData.$trModule
                   PhonemeData.$tc'RETROFLEX1) -}
ef03a00fc7a574285907a84c79bc972f
  $tc'RETROFLEX1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'RETROFLEX"#) -}
6a714c822be8b501477a7948cfa05d42
  $tc'RISET :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6825623946151739552##
                   1759329109996339803##
                   PhonemeData.$trModule
                   PhonemeData.$tc'RISET1) -}
0eecc6258cb1ad131bebcb7a4b2c11ae
  $tc'RISET1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'RISET"#) -}
9c8949bb97b040bfbf2370e8acf0fcb3
  $tc'ROUNDED :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7799564935134720742##
                   1015105178676250247##
                   PhonemeData.$trModule
                   PhonemeData.$tc'ROUNDED1) -}
7e14d79417e805a6cdf803622e5451ec
  $tc'ROUNDED1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ROUNDED"#) -}
956fdab94667a3fd86ff32e20fe924c9
  $tc'SAFFRICATE :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10187621366531244136##
                   12385703686481945296##
                   PhonemeData.$trModule
                   PhonemeData.$tc'SAFFRICATE1) -}
8734921714fe0acd63b5bda2ee7003d0
  $tc'SAFFRICATE1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'SAFFRICATE"#) -}
dc012a29a6232e3b44f4458566c88712
  $tc'SHORT :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10771708740238984771##
                   11993060436209560677##
                   PhonemeData.$trModule
                   PhonemeData.$tc'SHORT1) -}
b1765b686ecdd5ac8a10605c9b6bbdac
  $tc'SHORT1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'SHORT"#) -}
950e7cf3581099a1f11bb4651101f9f1
  $tc'SILIBANT :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6649036173229534763##
                   7117217495032932991##
                   PhonemeData.$trModule
                   PhonemeData.$tc'SILIBANT1) -}
695a9c557f289a26d4b0ebd8bdd2a701
  $tc'SILIBANT1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'SILIBANT"#) -}
5d3439b4fd3ab73673a5d23d1ac42a4b
  $tc'SLACK :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11655698948952672069##
                   4366161839057315695##
                   PhonemeData.$trModule
                   PhonemeData.$tc'SLACK1) -}
60ea5961d6d21287ef85cb7c704f485a
  $tc'SLACK1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'SLACK"#) -}
8421a3743c4ff7a1b56f8178356c490d
  $tc'STIFF :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17627976900663859370##
                   5977227785983666979##
                   PhonemeData.$trModule
                   PhonemeData.$tc'STIFF1) -}
efeb2077aba9d3e65492f2b28d11606e
  $tc'STIFF1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'STIFF"#) -}
cc29b241645cdb7c6509069a4e805888
  $tc'STOP :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1284851421194398515##
                   10041707387012622084##
                   PhonemeData.$trModule
                   PhonemeData.$tc'STOP1) -}
540c7a6ce299ebea319246e1d411df53
  $tc'STOP1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'STOP"#) -}
91b3f1f71f6f8a9c4aaa6ea4bb9c8118
  $tc'TOPT :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17470307189139320144##
                   14217883206421353565##
                   PhonemeData.$trModule
                   PhonemeData.$tc'TOPT1) -}
fd664fc4bacf3fcaea54d02f024ecddf
  $tc'TOPT1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'TOPT"#) -}
1fbf73f67ef3be5912d4654639d5129a
  $tc'TRILL :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12371456641715734771##
                   3233791673052005388##
                   PhonemeData.$trModule
                   PhonemeData.$tc'TRILL1) -}
a5b73980f9ffc26c8b3824d8f35d9e32
  $tc'TRILL1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'TRILL"#) -}
a0068e718ada604881a3c6d2e93cb1ae
  $tc'UNROUNDED :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7606791061269371675##
                   3209595617297141262##
                   PhonemeData.$trModule
                   PhonemeData.$tc'UNROUNDED1) -}
795900bc1815c055a5548bbeae08ffcd
  $tc'UNROUNDED1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'UNROUNDED"#) -}
debb3616664fad7153038ad0915f2bcf
  $tc'UVULAR :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16968883907375764303##
                   8717522330103864920##
                   PhonemeData.$trModule
                   PhonemeData.$tc'UVULAR1) -}
8a425f04f2017516276a951f8454d035
  $tc'UVULAR1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'UVULAR"#) -}
52d33fb895dbe9eca3d211fa6c5d5535
  $tc'VELAR :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18433042930094489874##
                   8018467024202767517##
                   PhonemeData.$trModule
                   PhonemeData.$tc'VELAR1) -}
440e6a34420b7ac48ab39c8871dbf507
  $tc'VELAR1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'VELAR"#) -}
147bbc733fe2fead2de624400873922e
  $tc'VOICELESS :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3572173879702733224##
                   8753892160042658327##
                   PhonemeData.$trModule
                   PhonemeData.$tc'VOICELESS1) -}
154c34f379ae7e68734ea7b4145ad651
  $tc'VOICELESS1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'VOICELESS"#) -}
afa05829c47b546d6db29a9aa34b14a3
  $tc'Vowel :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13594910950861939561##
                   6165878118861587479##
                   PhonemeData.$trModule
                   PhonemeData.$tc'Vowel1) -}
6124dc088a2d6f987c34195bd054c4da
  $tc'Vowel1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Vowel"#) -}
aae925e69526b239f1a5a2f975ede824
  $tc'Word :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3448018861798253773##
                   191571881966955224##
                   PhonemeData.$trModule
                   PhonemeData.$tc'Word1) -}
42b50a6a9d37e03b6fd3a67581aa1f9d
  $tc'Word1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Word"#) -}
8f14e68ae4d953a7491488667fe73ee8
  $tcBackness :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6493027134490001611##
                   12597761056602425123##
                   PhonemeData.$trModule
                   PhonemeData.$tcBackness1) -}
8784797b0892e238b2fc5e3f61d36da0
  $tcBackness1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Backness"#) -}
d5ea3cafa45feb507265ea97bc4a97b0
  $tcHeight :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13932109929582572205##
                   9971572728839296464##
                   PhonemeData.$trModule
                   PhonemeData.$tcHeight1) -}
367b6c15a201fd5a62ed195b8863503f
  $tcHeight1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Height"#) -}
38c5267ba965e30c5a7f313b2870b6a4
  $tcLength :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   58678482316845016##
                   1320442391604630906##
                   PhonemeData.$trModule
                   PhonemeData.$tcLength1) -}
ad92a9dc0fc745c6831c47196dee3349
  $tcLength1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Length"#) -}
16a6aa91ed9e3b8784abd40a9ecd6b22
  $tcManner :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5709352841377104392##
                   8547247040349430517##
                   PhonemeData.$trModule
                   PhonemeData.$tcManner1) -}
771609f781bd69c5c1297c50a4648f00
  $tcManner1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Manner"#) -}
dd5c23411831ea94a39daa7d962a01d1
  $tcMorpheme :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17855870708096778049##
                   16495642162841880405##
                   PhonemeData.$trModule
                   PhonemeData.$tcMorpheme1) -}
fda036fa5edb4db13f638ded036fcddc
  $tcMorpheme1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Morpheme"#) -}
7e697ec26b32c3ca627fe10f1dd79bca
  $tcPhonation :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12615135621520200491##
                   8301205614477132533##
                   PhonemeData.$trModule
                   PhonemeData.$tcPhonation1) -}
881c80d0b2ecb85c0f1b45ed85d759e9
  $tcPhonation1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Phonation"#) -}
26ce4182b2abc7724a85f42a7f5395be
  $tcPhoneme :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16010101934413564213##
                   14193807480496075191##
                   PhonemeData.$trModule
                   PhonemeData.$tcPhoneme1) -}
491f5bba6725bb1207890c798fce8669
  $tcPhoneme1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Phoneme"#) -}
f897e7588090658b78861d3e58ee488d
  $tcPlace :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17678669362216737526##
                   7133792189523245852##
                   PhonemeData.$trModule
                   PhonemeData.$tcPlace1) -}
1593439ececc6fa268b2a0562d35adb9
  $tcPlace1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Place"#) -}
8ae609e3f10066c9ce4a767abf5efd55
  $tcRoundedness :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2239565657515008333##
                   5830333130190264599##
                   PhonemeData.$trModule
                   PhonemeData.$tcRoundedness1) -}
753f037ffb9f50a64d016ecc5f3300c2
  $tcRoundedness1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Roundedness"#) -}
7ff7b27f59b390be8a784883792cfaf0
  $tcTone :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8923014792393448030##
                   10709770708094165070##
                   PhonemeData.$trModule
                   PhonemeData.$tcTone1) -}
3285b6d92beb85eb9307af3484b42aa3
  $tcTone1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Tone"#) -}
4c0a12e924b2fb0c861275bf5934ff38
  $tcWord :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15961274500791750884##
                   7958928503765361920##
                   PhonemeData.$trModule
                   PhonemeData.$tcWord1) -}
8d88fa952a0a23b1bbf8f07d49b86dac
  $tcWord1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Word"#) -}
e6ebc022a8a8f08169450a06bf3b1f28
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   PhonemeData.$trModule2
                   PhonemeData.$trModule1) -}
1b1778a1677a058b65bc65ed02f4272a
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "PhonemeData"#) -}
e313616cacde0917403841f32418d078
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "con-lang-gen-0.0.0.1-JpecSLrjfNmG1CUMEdSr39"#) -}
8d3162e814627ae5597b1f6cf9209b2d
  $w$creadPrec ::
    GHC.Prim.Int#
    -> forall b.
       (PhonemeData.Morpheme -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,U><L,C(U)>, Inline: [0] -}
3bda176bb325231b683f164bd205b115
  $w$creadPrec1 ::
    GHC.Prim.Int#
    -> forall b.
       (PhonemeData.Word -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,U><L,C(U)>, Inline: [0] -}
d7d82e642198a794ac3b3638da1bf9f3
  $w$cshowsPrec ::
    PhonemeData.Backness -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: PhonemeData.Backness)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   PhonemeData.BACK
                   -> GHC.Base.++ @ GHC.Types.Char PhonemeData.$fReadBackness23 w1
                   PhonemeData.NEARBACK
                   -> GHC.Base.++ @ GHC.Types.Char PhonemeData.$fReadBackness20 w1
                   PhonemeData.CENTRAL
                   -> GHC.Base.++ @ GHC.Types.Char PhonemeData.$fReadBackness17 w1
                   PhonemeData.NEARFRONT
                   -> GHC.Base.++ @ GHC.Types.Char PhonemeData.$fReadBackness14 w1
                   PhonemeData.FRONT
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        PhonemeData.$fReadBackness11
                        w1 }) -}
ba05bb435342e1a32b92b81d74410bc0
  $w$cshowsPrec1 ::
    PhonemeData.Height -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: PhonemeData.Height) (w1 :: GHC.Base.String) ->
                 case w of wild {
                   PhonemeData.CLOSE
                   -> GHC.Base.++ @ GHC.Types.Char PhonemeData.$fReadHeight31 w1
                   PhonemeData.NEARCLOSE
                   -> GHC.Base.++ @ GHC.Types.Char PhonemeData.$fReadHeight28 w1
                   PhonemeData.CLOSEMID
                   -> GHC.Base.++ @ GHC.Types.Char PhonemeData.$fReadHeight25 w1
                   PhonemeData.MID
                   -> GHC.Base.++ @ GHC.Types.Char PhonemeData.$fReadHeight22 w1
                   PhonemeData.OPENMID
                   -> GHC.Base.++ @ GHC.Types.Char PhonemeData.$fReadHeight19 w1
                   PhonemeData.NEAROPEN
                   -> GHC.Base.++ @ GHC.Types.Char PhonemeData.$fReadHeight16 w1
                   PhonemeData.OPEN
                   -> GHC.Base.++ @ GHC.Types.Char PhonemeData.$fReadHeight13 w1 }) -}
60079db4dd97570a8e4fd882d78d3a98
  $w$cshowsPrec2 ::
    PhonemeData.Length -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: PhonemeData.Length) (w1 :: GHC.Base.String) ->
                 case w of wild {
                   PhonemeData.SHORT
                   -> GHC.Base.++ @ GHC.Types.Char PhonemeData.$fReadLength15 w1
                   PhonemeData.NORMAL
                   -> GHC.Base.++ @ GHC.Types.Char PhonemeData.$fReadLength12 w1
                   PhonemeData.LONG
                   -> GHC.Base.++ @ GHC.Types.Char PhonemeData.$fReadLength9 w1 }) -}
cc18ad7b6a428637be9e42d493f6b8da
  $w$cshowsPrec3 ::
    PhonemeData.Manner -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: PhonemeData.Manner) (w1 :: GHC.Base.String) ->
                 case w of wild {
                   PhonemeData.NASAL
                   -> GHC.Base.++ @ GHC.Types.Char PhonemeData.$fReadManner55 w1
                   PhonemeData.STOP
                   -> GHC.Base.++ @ GHC.Types.Char PhonemeData.$fReadManner52 w1
                   PhonemeData.SAFFRICATE
                   -> GHC.Base.++ @ GHC.Types.Char PhonemeData.$fReadManner49 w1
                   PhonemeData.AFFRICATE
                   -> GHC.Base.++ @ GHC.Types.Char PhonemeData.$fReadManner46 w1
                   PhonemeData.SILIBANT
                   -> GHC.Base.++ @ GHC.Types.Char PhonemeData.$fReadManner43 w1
                   PhonemeData.FRICATIVE
                   -> GHC.Base.++ @ GHC.Types.Char PhonemeData.$fReadManner40 w1
                   PhonemeData.APPROXIMANT
                   -> GHC.Base.++ @ GHC.Types.Char PhonemeData.$fReadManner37 w1
                   PhonemeData.FLAP
                   -> GHC.Base.++ @ GHC.Types.Char PhonemeData.$fReadManner34 w1
                   PhonemeData.TRILL
                   -> GHC.Base.++ @ GHC.Types.Char PhonemeData.$fReadManner31 w1
                   PhonemeData.LAFFRICATE
                   -> GHC.Base.++ @ GHC.Types.Char PhonemeData.$fReadManner28 w1
                   PhonemeData.LFRICATIVE
                   -> GHC.Base.++ @ GHC.Types.Char PhonemeData.$fReadManner25 w1
                   PhonemeData.LAPPROXIMANT
                   -> GHC.Base.++ @ GHC.Types.Char PhonemeData.$fReadManner22 w1
                   PhonemeData.LFLAP
                   -> GHC.Base.++ @ GHC.Types.Char PhonemeData.$fReadManner19 w1 }) -}
4cd17e631211b9729a6d58594c380f5a
  $w$cshowsPrec4 ::
    GHC.Prim.Int#
    -> [PhonemeData.Phoneme] -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: [PhonemeData.Phoneme])
                   (w :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       PhonemeData.$fShowMorpheme5
                       (GHC.Base.++
                          @ GHC.Types.Char
                          PhonemeData.$fShowMorpheme4
                          (let {
                             s :: GHC.Base.String
                             = GHC.Base.++ @ GHC.Types.Char PhonemeData.$fShowMorpheme3 x
                           } in
                           case ww1 of wild {
                             [] -> GHC.CString.unpackAppendCString# "[]"# s
                             : x1 xs
                             -> GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showList__2
                                  (PhonemeData.$fShowMorpheme_$cshowsPrec
                                     PhonemeData.$fShowMorpheme2
                                     x1
                                     (let {
                                        lvl120 :: [GHC.Types.Char]
                                        = GHC.Types.: @ GHC.Types.Char GHC.Show.showList__1 s
                                      } in
                                      letrec {
                                        showl :: [PhonemeData.Phoneme] -> GHC.Base.String
                                          {- Arity: 1, Strictness: <S,1*U> -}
                                        = \ (ds2 :: [PhonemeData.Phoneme]) ->
                                          case ds2 of wild1 {
                                            [] -> lvl120
                                            : y ys
                                            -> GHC.Types.:
                                                 @ GHC.Types.Char
                                                 GHC.Show.shows7
                                                 (PhonemeData.$fShowMorpheme_$cshowsPrec
                                                    PhonemeData.$fShowMorpheme2
                                                    y
                                                    (showl ys)) }
                                      } in
                                      showl xs)) }))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p w
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 w)) }) -}
2e1a0e09a78074c21fc0136e518a2133
  $w$cshowsPrec5 ::
    PhonemeData.Phonation -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: PhonemeData.Phonation)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   PhonemeData.VOICELESS
                   -> GHC.Base.++ @ GHC.Types.Char PhonemeData.$fReadPhonation31 w1
                   PhonemeData.BREATHY
                   -> GHC.Base.++ @ GHC.Types.Char PhonemeData.$fReadPhonation28 w1
                   PhonemeData.SLACK
                   -> GHC.Base.++ @ GHC.Types.Char PhonemeData.$fReadPhonation25 w1
                   PhonemeData.MODAL
                   -> GHC.Base.++ @ GHC.Types.Char PhonemeData.$fReadPhonation22 w1
                   PhonemeData.STIFF
                   -> GHC.Base.++ @ GHC.Types.Char PhonemeData.$fReadPhonation19 w1
                   PhonemeData.CREAKY
                   -> GHC.Base.++ @ GHC.Types.Char PhonemeData.$fReadPhonation16 w1
                   PhonemeData.ASPIRATED
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        PhonemeData.$fReadPhonation13
                        w1 }) -}
27d4fb2260414ca95f988dc9fef00141
  $w$cshowsPrec6 ::
    PhonemeData.Place -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0] -}
e7b029a5844a6e008b95082c9c811e33
  $w$cshowsPrec7 ::
    PhonemeData.Roundedness -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: PhonemeData.Roundedness)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   PhonemeData.DEFAULT
                   -> GHC.Base.++ @ GHC.Types.Char PhonemeData.$fReadRoundedness15 w1
                   PhonemeData.ROUNDED
                   -> GHC.Base.++ @ GHC.Types.Char PhonemeData.$fReadRoundedness12 w1
                   PhonemeData.UNROUNDED
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        PhonemeData.$fReadRoundedness9
                        w1 }) -}
87cd4acf5bb796129082f7006a0ea5b8
  $w$cshowsPrec8 ::
    PhonemeData.Tone -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: PhonemeData.Tone) (w1 :: GHC.Base.String) ->
                 case w of wild {
                   PhonemeData.NONET
                   -> GHC.Base.++ @ GHC.Types.Char PhonemeData.$fReadTone59 w1
                   PhonemeData.TOPT
                   -> GHC.Base.++ @ GHC.Types.Char PhonemeData.$fReadTone56 w1
                   PhonemeData.HIGHT
                   -> GHC.Base.++ @ GHC.Types.Char PhonemeData.$fReadTone53 w1
                   PhonemeData.MIDT
                   -> GHC.Base.++ @ GHC.Types.Char PhonemeData.$fReadTone50 w1
                   PhonemeData.LOWT
                   -> GHC.Base.++ @ GHC.Types.Char PhonemeData.$fReadTone47 w1
                   PhonemeData.BOTTOMT
                   -> GHC.Base.++ @ GHC.Types.Char PhonemeData.$fReadTone44 w1
                   PhonemeData.FALLT
                   -> GHC.Base.++ @ GHC.Types.Char PhonemeData.$fReadTone41 w1
                   PhonemeData.HFALLT
                   -> GHC.Base.++ @ GHC.Types.Char PhonemeData.$fReadTone38 w1
                   PhonemeData.LFALLT
                   -> GHC.Base.++ @ GHC.Types.Char PhonemeData.$fReadTone35 w1
                   PhonemeData.RISET
                   -> GHC.Base.++ @ GHC.Types.Char PhonemeData.$fReadTone32 w1
                   PhonemeData.HRISET
                   -> GHC.Base.++ @ GHC.Types.Char PhonemeData.$fReadTone29 w1
                   PhonemeData.LRISET
                   -> GHC.Base.++ @ GHC.Types.Char PhonemeData.$fReadTone26 w1
                   PhonemeData.DIPT
                   -> GHC.Base.++ @ GHC.Types.Char PhonemeData.$fReadTone23 w1
                   PhonemeData.PEAKT
                   -> GHC.Base.++ @ GHC.Types.Char PhonemeData.$fReadTone20 w1 }) -}
81b2e887f9ba2c1dd5ddf5a7af773db6
  $w$cshowsPrec9 ::
    GHC.Prim.Int#
    -> [PhonemeData.Morpheme] -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: [PhonemeData.Morpheme])
                   (w :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       PhonemeData.$fShowWord3
                       (GHC.Base.++
                          @ GHC.Types.Char
                          PhonemeData.$fShowWord2
                          (let {
                             s :: GHC.Base.String
                             = GHC.Base.++ @ GHC.Types.Char PhonemeData.$fShowMorpheme3 x
                           } in
                           case ww1 of wild {
                             [] -> GHC.CString.unpackAppendCString# "[]"# s
                             : x1 xs
                             -> GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showList__2
                                  (case x1 of ww2 { PhonemeData.Morpheme ww3 ->
                                   PhonemeData.$w$cshowsPrec4
                                     0#
                                     ww3
                                     (let {
                                        lvl120 :: [GHC.Types.Char]
                                        = GHC.Types.: @ GHC.Types.Char GHC.Show.showList__1 s
                                      } in
                                      letrec {
                                        showl :: [PhonemeData.Morpheme] -> GHC.Base.String
                                          {- Arity: 1, Strictness: <S,1*U> -}
                                        = \ (ds2 :: [PhonemeData.Morpheme]) ->
                                          case ds2 of wild1 {
                                            [] -> lvl120
                                            : y ys
                                            -> GHC.Types.:
                                                 @ GHC.Types.Char
                                                 GHC.Show.shows7
                                                 (case y of ww4 { PhonemeData.Morpheme ww5 ->
                                                  PhonemeData.$w$cshowsPrec4 0# ww5 (showl ys) }) }
                                      } in
                                      showl xs) }) }))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p w
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 w)) }) -}
d7d82e642198a794ac3b3638da1bf9f3
  $w$ctoEnum :: GHC.Prim.Int# -> PhonemeData.Backness
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 0#) of wild {
                   GHC.Types.False -> PhonemeData.$fEnumBackness6 ww
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ww 4#) of wild1 {
                        GHC.Types.False -> PhonemeData.$fEnumBackness6 ww
                        GHC.Types.True
                        -> GHC.Prim.tagToEnum# @ PhonemeData.Backness ww } }) -}
ba05bb435342e1a32b92b81d74410bc0
  $w$ctoEnum1 :: GHC.Prim.Int# -> PhonemeData.Height
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 0#) of wild {
                   GHC.Types.False -> PhonemeData.$fEnumHeight8 ww
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ww 6#) of wild1 {
                        GHC.Types.False -> PhonemeData.$fEnumHeight8 ww
                        GHC.Types.True
                        -> GHC.Prim.tagToEnum# @ PhonemeData.Height ww } }) -}
60079db4dd97570a8e4fd882d78d3a98
  $w$ctoEnum2 :: GHC.Prim.Int# -> PhonemeData.Length
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 0#) of wild {
                   GHC.Types.False -> PhonemeData.$fEnumLength1 ww
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ww 2#) of wild1 {
                        GHC.Types.False -> PhonemeData.$fEnumLength1 ww
                        GHC.Types.True
                        -> GHC.Prim.tagToEnum# @ PhonemeData.Length ww } }) -}
cc18ad7b6a428637be9e42d493f6b8da
  $w$ctoEnum3 :: GHC.Prim.Int# -> PhonemeData.Manner
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 0#) of wild {
                   GHC.Types.False -> PhonemeData.$fEnumManner1 ww
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ww 12#) of wild1 {
                        GHC.Types.False -> PhonemeData.$fEnumManner1 ww
                        GHC.Types.True
                        -> GHC.Prim.tagToEnum# @ PhonemeData.Manner ww } }) -}
2e1a0e09a78074c21fc0136e518a2133
  $w$ctoEnum4 :: GHC.Prim.Int# -> PhonemeData.Phonation
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 0#) of wild {
                   GHC.Types.False -> PhonemeData.$fEnumPhonation8 ww
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ww 6#) of wild1 {
                        GHC.Types.False -> PhonemeData.$fEnumPhonation8 ww
                        GHC.Types.True
                        -> GHC.Prim.tagToEnum# @ PhonemeData.Phonation ww } }) -}
27d4fb2260414ca95f988dc9fef00141
  $w$ctoEnum5 :: GHC.Prim.Int# -> PhonemeData.Place
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 0#) of wild {
                   GHC.Types.False -> PhonemeData.$fEnumPlace1 ww
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ww 18#) of wild1 {
                        GHC.Types.False -> PhonemeData.$fEnumPlace1 ww
                        GHC.Types.True
                        -> GHC.Prim.tagToEnum# @ PhonemeData.Place ww } }) -}
e7b029a5844a6e008b95082c9c811e33
  $w$ctoEnum6 :: GHC.Prim.Int# -> PhonemeData.Roundedness
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 0#) of wild {
                   GHC.Types.False -> PhonemeData.$fEnumRoundedness1 ww
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ww 2#) of wild1 {
                        GHC.Types.False -> PhonemeData.$fEnumRoundedness1 ww
                        GHC.Types.True
                        -> GHC.Prim.tagToEnum# @ PhonemeData.Roundedness ww } }) -}
87cd4acf5bb796129082f7006a0ea5b8
  $w$ctoEnum7 :: GHC.Prim.Int# -> PhonemeData.Tone
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 0#) of wild {
                   GHC.Types.False -> PhonemeData.$fEnumTone1 ww
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ww 13#) of wild1 {
                        GHC.Types.False -> PhonemeData.$fEnumTone1 ww
                        GHC.Types.True -> GHC.Prim.tagToEnum# @ PhonemeData.Tone ww } }) -}
d7d82e642198a794ac3b3638da1bf9f3
  data Backness = BACK | NEARBACK | CENTRAL | NEARFRONT | FRONT
ba05bb435342e1a32b92b81d74410bc0
  data Height
    = CLOSE | NEARCLOSE | CLOSEMID | MID | OPENMID | NEAROPEN | OPEN
60079db4dd97570a8e4fd882d78d3a98
  data Length = SHORT | NORMAL | LONG
cc18ad7b6a428637be9e42d493f6b8da
  data Manner
    = NASAL
    | STOP
    | SAFFRICATE
    | AFFRICATE
    | SILIBANT
    | FRICATIVE
    | APPROXIMANT
    | FLAP
    | TRILL
    | LAFFRICATE
    | LFRICATIVE
    | LAPPROXIMANT
    | LFLAP
8d3162e814627ae5597b1f6cf9209b2d
  data Morpheme = Morpheme {getPhonemes :: [PhonemeData.Phoneme]}
2e1a0e09a78074c21fc0136e518a2133
  data Phonation
    = VOICELESS | BREATHY | SLACK | MODAL | STIFF | CREAKY | ASPIRATED
a99d82394cccf94f6dc3580d7da31e00
  data Phoneme
    = Consonant {cplace :: PhonemeData.Place,
                 cmanner :: PhonemeData.Manner,
                 cvoice :: PhonemeData.Phonation,
                 csymbol :: GHC.Base.String}
    | Vowel {vheight :: PhonemeData.Height,
             vbackness :: PhonemeData.Backness,
             vroundedness :: PhonemeData.Roundedness,
             vlength :: PhonemeData.Length,
             vtone :: PhonemeData.Tone,
             vsymbol :: GHC.Base.String}
    | Diphthong {dheight1 :: PhonemeData.Height,
                 dbackness1 :: PhonemeData.Backness,
                 droundedness1 :: PhonemeData.Roundedness,
                 dheight2 :: PhonemeData.Height,
                 dbackness2 :: PhonemeData.Backness,
                 droundedness2 :: PhonemeData.Roundedness,
                 dlength :: PhonemeData.Length,
                 dtone :: PhonemeData.Tone,
                 dsymbol :: GHC.Base.String}
    | Blank
27d4fb2260414ca95f988dc9fef00141
  data Place
    = LABIAL
    | BILABIAL
    | LABIODENTAL
    | CORONAL
    | DENTIALVEOLAR
    | DENTAL
    | ALVEOLAR
    | POSTALVEOLAR
    | RETROFLEX
    | DORSAL
    | ALVEOLOPALATAL
    | PALATAL
    | VELAR
    | UVULAR
    | LARYNGEAL
    | EPIPHARYNGEAL
    | PHARYNGEAL
    | EPIGLOTTAL
    | GLOTTAL
e7b029a5844a6e008b95082c9c811e33
  data Roundedness = DEFAULT | ROUNDED | UNROUNDED
87cd4acf5bb796129082f7006a0ea5b8
  data Tone
    = NONET
    | TOPT
    | HIGHT
    | MIDT
    | LOWT
    | BOTTOMT
    | FALLT
    | HFALLT
    | LFALLT
    | RISET
    | HRISET
    | LRISET
    | DIPT
    | PEAKT
3bda176bb325231b683f164bd205b115
  data Word = Word {getMorphemes :: [PhonemeData.Morpheme]}
6da76136bdf4e87145474a33150ef2ad
  cmanner :: PhonemeData.Phoneme -> PhonemeData.Manner
  RecSel Left PhonemeData.Phoneme
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: PhonemeData.Phoneme) ->
                 case ds of wild {
                   DEFAULT -> PhonemeData.cmanner1
                   PhonemeData.Consonant ds1 ds2 ds3 ds4 -> ds2 }) -}
437011da3c11efc030cb947fb3a0e85b
  cmanner1 :: PhonemeData.Manner
  {- Strictness: x -}
36ec5c2b56dd879375aee1c82868a24f
  cplace :: PhonemeData.Phoneme -> PhonemeData.Place
  RecSel Left PhonemeData.Phoneme
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: PhonemeData.Phoneme) ->
                 case ds of wild {
                   DEFAULT -> PhonemeData.cplace1
                   PhonemeData.Consonant ds1 ds2 ds3 ds4 -> ds1 }) -}
6440ff15ee1e9cc0dc78deb8d8d34821
  cplace1 :: PhonemeData.Place
  {- Strictness: x -}
67a886ccea412fc4a2de04ce15f6cf0e
  csymbol :: PhonemeData.Phoneme -> GHC.Base.String
  RecSel Left PhonemeData.Phoneme
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: PhonemeData.Phoneme) ->
                 case ds of wild {
                   DEFAULT -> PhonemeData.csymbol1
                   PhonemeData.Consonant ds1 ds2 ds3 ds4 -> ds4 }) -}
9ac2ed1c4fb99f7d3d8ee72849d04690
  csymbol1 :: GHC.Base.String
  {- Strictness: x -}
4881b6c10ab39ab34694813ee2492d19
  cvoice :: PhonemeData.Phoneme -> PhonemeData.Phonation
  RecSel Left PhonemeData.Phoneme
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: PhonemeData.Phoneme) ->
                 case ds of wild {
                   DEFAULT -> PhonemeData.cvoice1
                   PhonemeData.Consonant ds1 ds2 ds3 ds4 -> ds3 }) -}
5e3f5706510eb2ec87a9800ffc07453b
  cvoice1 :: PhonemeData.Phonation
  {- Strictness: x -}
9f661a9ba0261c409665bedb9c5d6f14
  dbackness1 :: PhonemeData.Phoneme -> PhonemeData.Backness
  RecSel Left PhonemeData.Phoneme
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: PhonemeData.Phoneme) ->
                 case ds of wild {
                   DEFAULT -> PhonemeData.dbackness4
                   PhonemeData.Diphthong ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9
                   -> ds2 }) -}
84c909194aff100f1b743ba533a7395f
  dbackness2 :: PhonemeData.Phoneme -> PhonemeData.Backness
  RecSel Left PhonemeData.Phoneme
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: PhonemeData.Phoneme) ->
                 case ds of wild {
                   DEFAULT -> PhonemeData.dbackness5
                   PhonemeData.Diphthong ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9
                   -> ds5 }) -}
5e396cdee1e88822f6e9fab50613aefe
  dbackness4 :: PhonemeData.Backness
  {- Strictness: x -}
5067d2fa9a8ccb6ee778e07e99d55d24
  dbackness5 :: PhonemeData.Backness
  {- Strictness: x -}
9e42c4e6579394afc3cf0dcbc58e21cc
  dheight1 :: PhonemeData.Phoneme -> PhonemeData.Height
  RecSel Left PhonemeData.Phoneme
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: PhonemeData.Phoneme) ->
                 case ds of wild {
                   DEFAULT -> PhonemeData.dheight4
                   PhonemeData.Diphthong ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9
                   -> ds1 }) -}
5f7d55c7f0252dfab864168fc9f98b81
  dheight2 :: PhonemeData.Phoneme -> PhonemeData.Height
  RecSel Left PhonemeData.Phoneme
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: PhonemeData.Phoneme) ->
                 case ds of wild {
                   DEFAULT -> PhonemeData.dheight5
                   PhonemeData.Diphthong ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9
                   -> ds4 }) -}
4f22195fbf5c1deede3fa85d292eec4b
  dheight4 :: PhonemeData.Height
  {- Strictness: x -}
2bc7a23dcb4973ced8d3037e14cfc21d
  dheight5 :: PhonemeData.Height
  {- Strictness: x -}
e6335ce73824cb8e5c0905ca55991d41
  dlength :: PhonemeData.Phoneme -> PhonemeData.Length
  RecSel Left PhonemeData.Phoneme
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: PhonemeData.Phoneme) ->
                 case ds of wild {
                   DEFAULT -> PhonemeData.dlength1
                   PhonemeData.Diphthong ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9
                   -> ds7 }) -}
bd329b3ca6b1efc743ab78f9a03b794c
  dlength1 :: PhonemeData.Length
  {- Strictness: x -}
50f04b23492b8e00765ff1dcb35ce204
  droundedness1 :: PhonemeData.Phoneme -> PhonemeData.Roundedness
  RecSel Left PhonemeData.Phoneme
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: PhonemeData.Phoneme) ->
                 case ds of wild {
                   DEFAULT -> PhonemeData.droundedness4
                   PhonemeData.Diphthong ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9
                   -> ds3 }) -}
3821c5885c81074ee59cea07b7549d99
  droundedness2 :: PhonemeData.Phoneme -> PhonemeData.Roundedness
  RecSel Left PhonemeData.Phoneme
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: PhonemeData.Phoneme) ->
                 case ds of wild {
                   DEFAULT -> PhonemeData.droundedness5
                   PhonemeData.Diphthong ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9
                   -> ds6 }) -}
c9fe426af0022feb0d94cc382aafa93a
  droundedness4 :: PhonemeData.Roundedness
  {- Strictness: x -}
845578dfed2999ca37c21b0101366c26
  droundedness5 :: PhonemeData.Roundedness
  {- Strictness: x -}
e2b8383eb716d9399a833e2a6124d8cb
  dsymbol :: PhonemeData.Phoneme -> GHC.Base.String
  RecSel Left PhonemeData.Phoneme
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: PhonemeData.Phoneme) ->
                 case ds of wild {
                   DEFAULT -> PhonemeData.dsymbol1
                   PhonemeData.Diphthong ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9
                   -> ds9 }) -}
edb012492d1c8d5371e21d25bb70d037
  dsymbol1 :: GHC.Base.String
  {- Strictness: x -}
491ee0077849dbaa16433abd3946fdfb
  dtone :: PhonemeData.Phoneme -> PhonemeData.Tone
  RecSel Left PhonemeData.Phoneme
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: PhonemeData.Phoneme) ->
                 case ds of wild {
                   DEFAULT -> PhonemeData.dtone1
                   PhonemeData.Diphthong ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9
                   -> ds8 }) -}
5e5562d880f1709c6a56638e4c74a17d
  dtone1 :: PhonemeData.Tone
  {- Strictness: x -}
3436d9e0bb23dc1a1b807f9a18610edb
  getMorphemes :: PhonemeData.Word -> [PhonemeData.Morpheme]
  RecSel Left PhonemeData.Word
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: PhonemeData.Word) ->
                 case ds of wild { PhonemeData.Word ds1 -> ds1 }) -}
7454724c6c7f69c051961126f174c739
  getPhonemes :: PhonemeData.Morpheme -> [PhonemeData.Phoneme]
  RecSel Left PhonemeData.Morpheme
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: PhonemeData.Morpheme) ->
                 case ds of wild { PhonemeData.Morpheme ds1 -> ds1 }) -}
f4e271fa32cb8d0ca5fbec8767b8e7cd
  vbackness :: PhonemeData.Phoneme -> PhonemeData.Backness
  RecSel Left PhonemeData.Phoneme
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: PhonemeData.Phoneme) ->
                 case ds of wild {
                   DEFAULT -> PhonemeData.vbackness1
                   PhonemeData.Vowel ds1 ds2 ds3 ds4 ds5 ds6 -> ds2 }) -}
ee5ae157d816820d5612bab0a2e95392
  vbackness1 :: PhonemeData.Backness
  {- Strictness: x -}
53a6eceea9f33889d2522a1fe9ca39fb
  vheight :: PhonemeData.Phoneme -> PhonemeData.Height
  RecSel Left PhonemeData.Phoneme
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: PhonemeData.Phoneme) ->
                 case ds of wild {
                   DEFAULT -> PhonemeData.vheight1
                   PhonemeData.Vowel ds1 ds2 ds3 ds4 ds5 ds6 -> ds1 }) -}
5c1c3b38d94dcd2c9555ffa28517782e
  vheight1 :: PhonemeData.Height
  {- Strictness: x -}
66b6089aff9b8bc40b944c04939be2f2
  vlength :: PhonemeData.Phoneme -> PhonemeData.Length
  RecSel Left PhonemeData.Phoneme
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: PhonemeData.Phoneme) ->
                 case ds of wild {
                   DEFAULT -> PhonemeData.vlength1
                   PhonemeData.Vowel ds1 ds2 ds3 ds4 ds5 ds6 -> ds4 }) -}
97f2789b195ba6a81fad141b48ae1025
  vlength1 :: PhonemeData.Length
  {- Strictness: x -}
fd976c67e304617c84f3873523e1e0af
  vroundedness :: PhonemeData.Phoneme -> PhonemeData.Roundedness
  RecSel Left PhonemeData.Phoneme
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: PhonemeData.Phoneme) ->
                 case ds of wild {
                   DEFAULT -> PhonemeData.vroundedness1
                   PhonemeData.Vowel ds1 ds2 ds3 ds4 ds5 ds6 -> ds3 }) -}
038eab8503ab3ee2eeaa3c3b4e22d16e
  vroundedness1 :: PhonemeData.Roundedness
  {- Strictness: x -}
b5f38e8e46f6ff72e4d789f442186486
  vsymbol :: PhonemeData.Phoneme -> GHC.Base.String
  RecSel Left PhonemeData.Phoneme
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: PhonemeData.Phoneme) ->
                 case ds of wild {
                   DEFAULT -> PhonemeData.vsymbol1
                   PhonemeData.Vowel ds1 ds2 ds3 ds4 ds5 ds6 -> ds6 }) -}
6bd98e7ba8ac158b3e3aad96a0474c98
  vsymbol1 :: GHC.Base.String
  {- Strictness: x -}
56793d9b9a82a4054e92623235ee93c7
  vtone :: PhonemeData.Phoneme -> PhonemeData.Tone
  RecSel Left PhonemeData.Phoneme
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: PhonemeData.Phoneme) ->
                 case ds of wild {
                   DEFAULT -> PhonemeData.vtone1
                   PhonemeData.Vowel ds1 ds2 ds3 ds4 ds5 ds6 -> ds5 }) -}
7c6a492780688f80e1fa281cee58db3d
  vtone1 :: PhonemeData.Tone
  {- Strictness: x -}
instance [safe] GHC.Enum.Bounded [PhonemeData.Backness]
  = PhonemeData.$fBoundedBackness
instance [safe] GHC.Enum.Bounded [PhonemeData.Height]
  = PhonemeData.$fBoundedHeight
instance [safe] GHC.Enum.Bounded [PhonemeData.Length]
  = PhonemeData.$fBoundedLength
instance [safe] GHC.Enum.Bounded [PhonemeData.Manner]
  = PhonemeData.$fBoundedManner
instance [safe] GHC.Enum.Bounded [PhonemeData.Phonation]
  = PhonemeData.$fBoundedPhonation
instance [safe] GHC.Enum.Bounded [PhonemeData.Place]
  = PhonemeData.$fBoundedPlace
instance [safe] GHC.Enum.Bounded [PhonemeData.Roundedness]
  = PhonemeData.$fBoundedRoundedness
instance [safe] GHC.Enum.Bounded [PhonemeData.Tone]
  = PhonemeData.$fBoundedTone
instance [safe] GHC.Enum.Enum [PhonemeData.Backness]
  = PhonemeData.$fEnumBackness
instance [safe] GHC.Enum.Enum [PhonemeData.Height]
  = PhonemeData.$fEnumHeight
instance [safe] GHC.Enum.Enum [PhonemeData.Length]
  = PhonemeData.$fEnumLength
instance [safe] GHC.Enum.Enum [PhonemeData.Manner]
  = PhonemeData.$fEnumManner
instance [safe] GHC.Enum.Enum [PhonemeData.Phonation]
  = PhonemeData.$fEnumPhonation
instance [safe] GHC.Enum.Enum [PhonemeData.Place]
  = PhonemeData.$fEnumPlace
instance [safe] GHC.Enum.Enum [PhonemeData.Roundedness]
  = PhonemeData.$fEnumRoundedness
instance [safe] GHC.Enum.Enum [PhonemeData.Tone]
  = PhonemeData.$fEnumTone
instance [safe] GHC.Classes.Eq [PhonemeData.Backness]
  = PhonemeData.$fEqBackness
instance [safe] GHC.Classes.Eq [PhonemeData.Height]
  = PhonemeData.$fEqHeight
instance [safe] GHC.Classes.Eq [PhonemeData.Length]
  = PhonemeData.$fEqLength
instance [safe] GHC.Classes.Eq [PhonemeData.Manner]
  = PhonemeData.$fEqManner
instance [safe] GHC.Classes.Eq [PhonemeData.Morpheme]
  = PhonemeData.$fEqMorpheme
instance [safe] GHC.Classes.Eq [PhonemeData.Phonation]
  = PhonemeData.$fEqPhonation
instance [safe] GHC.Classes.Eq [PhonemeData.Phoneme]
  = PhonemeData.$fEqPhoneme
instance [safe] GHC.Classes.Eq [PhonemeData.Place]
  = PhonemeData.$fEqPlace
instance [safe] GHC.Classes.Eq [PhonemeData.Roundedness]
  = PhonemeData.$fEqRoundedness
instance [safe] GHC.Classes.Eq [PhonemeData.Tone]
  = PhonemeData.$fEqTone
instance [safe] GHC.Classes.Eq [PhonemeData.Word]
  = PhonemeData.$fEqWord
instance [safe] GHC.Classes.Ord [PhonemeData.Backness]
  = PhonemeData.$fOrdBackness
instance [safe] GHC.Classes.Ord [PhonemeData.Height]
  = PhonemeData.$fOrdHeight
instance [safe] GHC.Classes.Ord [PhonemeData.Length]
  = PhonemeData.$fOrdLength
instance [safe] GHC.Classes.Ord [PhonemeData.Manner]
  = PhonemeData.$fOrdManner
instance [safe] GHC.Classes.Ord [PhonemeData.Morpheme]
  = PhonemeData.$fOrdMorpheme
instance [safe] GHC.Classes.Ord [PhonemeData.Phonation]
  = PhonemeData.$fOrdPhonation
instance [safe] GHC.Classes.Ord [PhonemeData.Phoneme]
  = PhonemeData.$fOrdPhoneme
instance [safe] GHC.Classes.Ord [PhonemeData.Place]
  = PhonemeData.$fOrdPlace
instance [safe] GHC.Classes.Ord [PhonemeData.Roundedness]
  = PhonemeData.$fOrdRoundedness
instance [safe] GHC.Classes.Ord [PhonemeData.Tone]
  = PhonemeData.$fOrdTone
instance [safe] GHC.Classes.Ord [PhonemeData.Word]
  = PhonemeData.$fOrdWord
instance [safe] GHC.Read.Read [PhonemeData.Backness]
  = PhonemeData.$fReadBackness
instance [safe] GHC.Read.Read [PhonemeData.Height]
  = PhonemeData.$fReadHeight
instance [safe] GHC.Read.Read [PhonemeData.Length]
  = PhonemeData.$fReadLength
instance [safe] GHC.Read.Read [PhonemeData.Manner]
  = PhonemeData.$fReadManner
instance [safe] GHC.Read.Read [PhonemeData.Morpheme]
  = PhonemeData.$fReadMorpheme
instance [safe] GHC.Read.Read [PhonemeData.Phonation]
  = PhonemeData.$fReadPhonation
instance [safe] GHC.Read.Read [PhonemeData.Phoneme]
  = PhonemeData.$fReadPhoneme
instance [safe] GHC.Read.Read [PhonemeData.Place]
  = PhonemeData.$fReadPlace
instance [safe] GHC.Read.Read [PhonemeData.Roundedness]
  = PhonemeData.$fReadRoundedness
instance [safe] GHC.Read.Read [PhonemeData.Tone]
  = PhonemeData.$fReadTone
instance [safe] GHC.Read.Read [PhonemeData.Word]
  = PhonemeData.$fReadWord
instance [safe] GHC.Show.Show [PhonemeData.Backness]
  = PhonemeData.$fShowBackness
instance [safe] GHC.Show.Show [PhonemeData.Height]
  = PhonemeData.$fShowHeight
instance [safe] GHC.Show.Show [PhonemeData.Length]
  = PhonemeData.$fShowLength
instance [safe] GHC.Show.Show [PhonemeData.Manner]
  = PhonemeData.$fShowManner
instance [safe] GHC.Show.Show [PhonemeData.Morpheme]
  = PhonemeData.$fShowMorpheme
instance [safe] GHC.Show.Show [PhonemeData.Phonation]
  = PhonemeData.$fShowPhonation
instance [safe] GHC.Show.Show [PhonemeData.Phoneme]
  = PhonemeData.$fShowPhoneme
instance [safe] GHC.Show.Show [PhonemeData.Place]
  = PhonemeData.$fShowPlace
instance [safe] GHC.Show.Show [PhonemeData.Roundedness]
  = PhonemeData.$fShowRoundedness
instance [safe] GHC.Show.Show [PhonemeData.Tone]
  = PhonemeData.$fShowTone
instance [safe] GHC.Show.Show [PhonemeData.Word]
  = PhonemeData.$fShowWord
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

